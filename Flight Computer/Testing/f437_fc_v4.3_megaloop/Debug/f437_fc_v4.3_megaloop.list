
f437_fc_v4.3_megaloop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000121d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08012388  08012388  00022388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b40  08012b40  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  08012b40  08012b40  00022b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b48  08012b48  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b48  08012b48  00022b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b4c  08012b4c  00022b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08012b50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301fc  2**0
                  CONTENTS
 10 .bss          00001550  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001750  20001750  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031d12  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b38  00000000  00000000  00061f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002300  00000000  00000000  00066a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002120  00000000  00000000  00068d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029831  00000000  00000000  0006ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023c36  00000000  00000000  000946c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f45c3  00000000  00000000  000b82ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ac8c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ad3c  00000000  00000000  001ac918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801236c 	.word	0x0801236c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	0801236c 	.word	0x0801236c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <Max31855_Read_Temp>:
uint8_t Error=0;                                      // Thermocouple Connection acknowledge Flag
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675
// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101c:	482c      	ldr	r0, [pc, #176]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 800101e:	f003 fdef 	bl	8004c00 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	2204      	movs	r2, #4
 8001028:	492a      	ldr	r1, [pc, #168]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 800102a:	482b      	ldr	r0, [pc, #172]	; (80010d8 <Max31855_Read_Temp+0xcc>)
 800102c:	f006 f86e 	bl	800710c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 8001038:	f003 fde2 	bl	8004c00 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 800103e:	78db      	ldrb	r3, [r3, #3]
 8001040:	461a      	mov	r2, r3
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	431a      	orrs	r2, r3
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 800104c:	785b      	ldrb	r3, [r3, #1]
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	431a      	orrs	r2, r3
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	4313      	orrs	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

	Error = v & 0x07;								  // Error Detection
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <Max31855_Read_Temp+0xd0>)
 8001068:	701a      	strb	r2, [r3, #0]

	if (v & 0x7) {
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <Max31855_Read_Temp+0x6c>
		// uh oh, a serious problem!
		return -99999;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <Max31855_Read_Temp+0xd4>)
 8001076:	e024      	b.n	80010c2 <Max31855_Read_Temp+0xb6>
	}

	if (v & 0x80000000) {
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da07      	bge.n	800108e <Max31855_Read_Temp+0x82>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		v = 0xFFFFC000 | ((v >> 18) & 0x00003FFF);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	0c9b      	lsrs	r3, r3, #18
 8001082:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001086:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	e002      	b.n	8001094 <Max31855_Read_Temp+0x88>
	} else {
		// Positive value, just drop the lower 18 bits.
		v >>= 18;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	0c9b      	lsrs	r3, r3, #18
 8001092:	60fb      	str	r3, [r7, #12]
	}
	// Serial.println(v, HEX);

	double centigrade = v;
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff fa45 	bl	8000524 <__aeabi_ui2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	e9c7 2300 	strd	r2, r3, [r7]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <Max31855_Read_Temp+0xd8>)
 80010a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ac:	f7ff fab4 	bl	8000618 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	e9c7 2300 	strd	r2, r3, [r7]
	return centigrade;
 80010b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010bc:	f7ff fda4 	bl	8000c08 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	200004f0 	.word	0x200004f0
 80010d8:	200004f4 	.word	0x200004f4
 80010dc:	2000021c 	.word	0x2000021c
 80010e0:	c7c34f80 	.word	0xc7c34f80
 80010e4:	3fd00000 	.word	0x3fd00000

080010e8 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <lsm6dsl_init+0xc8>)
 80010f2:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <lsm6dsl_init+0xcc>)
 80010f6:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <lsm6dsl_init+0xd0>)
 80010fa:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f000 fa13 	bl	8001528 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	492d      	ldr	r1, [pc, #180]	; (80011bc <lsm6dsl_init+0xd4>)
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fd71 	bl	8001bf0 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <lsm6dsl_init+0xd4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b6a      	cmp	r3, #106	; 0x6a
 8001114:	d005      	beq.n	8001122 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2102      	movs	r1, #2
 800111a:	4829      	ldr	r0, [pc, #164]	; (80011c0 <lsm6dsl_init+0xd8>)
 800111c:	f003 fd70 	bl	8004c00 <HAL_GPIO_WritePin>
		__BKPT();
 8001120:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2101      	movs	r1, #1
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fd72 	bl	8001c12 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4924      	ldr	r1, [pc, #144]	; (80011c4 <lsm6dsl_init+0xdc>)
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fd92 	bl	8001c5e <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <lsm6dsl_init+0xdc>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f5      	bne.n	800112e <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fc63 	bl	8001a14 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2104      	movs	r1, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fbeb 	bl	8001930 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2104      	movs	r1, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fc31 	bl	80019c8 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2103      	movs	r1, #3
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fbb9 	bl	80018e4 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2106      	movs	r1, #6
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fbff 	bl	800197c <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2111      	movs	r1, #17
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fd83 	bl	8001c90 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	21a8      	movs	r1, #168	; 0xa8
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fdb4 	bl	8001cfe <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	461c      	mov	r4, r3
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	08001441 	.word	0x08001441
 80011b4:	0800147b 	.word	0x0800147b
 80011b8:	20000550 	.word	0x20000550
 80011bc:	20000230 	.word	0x20000230
 80011c0:	40020800 	.word	0x40020800
 80011c4:	20000231 	.word	0x20000231

080011c8 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	1d3c      	adds	r4, r7, #4
 80011d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011d4:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80011d6:	f107 0217 	add.w	r2, r7, #23
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fc3e 	bl	8001a60 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d02d      	beq.n	8001246 <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80011ea:	2206      	movs	r2, #6
 80011ec:	2100      	movs	r1, #0
 80011ee:	4818      	ldr	r0, [pc, #96]	; (8001250 <get_acceleration+0x88>)
 80011f0:	f00b fcb0 	bl	800cb54 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4916      	ldr	r1, [pc, #88]	; (8001250 <get_acceleration+0x88>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fcae 	bl	8001b5a <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <get_acceleration+0x88>)
 8001200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fb3d 	bl	8001884 <lsm6dsl_from_fs8g_to_mg>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <get_acceleration+0x88>)
 8001216:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 800121e:	4610      	mov	r0, r2
 8001220:	f000 fb30 	bl	8001884 <lsm6dsl_from_fs8g_to_mg>
 8001224:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001228:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <get_acceleration+0x88>)
 800122e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001238:	4610      	mov	r0, r2
 800123a:	f000 fb23 	bl	8001884 <lsm6dsl_from_fs8g_to_mg>
 800123e:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001242:	edc4 7a00 	vstr	s15, [r4]
	}

}
 8001246:	bf00      	nop
 8001248:	371c      	adds	r7, #28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	bf00      	nop
 8001250:	20000220 	.word	0x20000220

08001254 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	1d3c      	adds	r4, r7, #4
 800125c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001260:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001262:	f107 0217 	add.w	r2, r7, #23
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fc11 	bl	8001a92 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d02d      	beq.n	80012d2 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001276:	2206      	movs	r2, #6
 8001278:	2100      	movs	r1, #0
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <get_angvelocity+0x88>)
 800127c:	f00b fc6a 	bl	800cb54 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4916      	ldr	r1, [pc, #88]	; (80012dc <get_angvelocity+0x88>)
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fc1d 	bl	8001ac4 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <get_angvelocity+0x88>)
 800128c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fb0f 	bl	80018b4 <lsm6dsl_from_fs2000dps_to_mdps>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <get_angvelocity+0x88>)
 80012a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80012aa:	4610      	mov	r0, r2
 80012ac:	f000 fb02 	bl	80018b4 <lsm6dsl_from_fs2000dps_to_mdps>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 80012b4:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <get_angvelocity+0x88>)
 80012ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80012c4:	4610      	mov	r0, r2
 80012c6:	f000 faf5 	bl	80018b4 <lsm6dsl_from_fs2000dps_to_mdps>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 80012ce:	edc4 7a00 	vstr	s15, [r4]
	}
}
 80012d2:	bf00      	nop
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd90      	pop	{r4, r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000228 	.word	0x20000228

080012e0 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <lps22hh_init+0x94>)
 80012ea:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <lps22hh_init+0x98>)
 80012ee:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <lps22hh_init+0x9c>)
 80012f2:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80012f4:	200a      	movs	r0, #10
 80012f6:	f000 f917 	bl	8001528 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <lps22hh_init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	491e      	ldr	r1, [pc, #120]	; (8001380 <lps22hh_init+0xa0>)
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fa3c 	bl	8001784 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <lps22hh_init+0xa0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2bb3      	cmp	r3, #179	; 0xb3
 8001312:	d007      	beq.n	8001324 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2104      	movs	r1, #4
 8001318:	481a      	ldr	r0, [pc, #104]	; (8001384 <lps22hh_init+0xa4>)
 800131a:	f003 fc71 	bl	8004c00 <HAL_GPIO_WritePin>
		__BKPT();
 800131e:	be00      	bkpt	0x0000
		Error_Handler();
 8001320:	f001 fe40 	bl	8002fa4 <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2101      	movs	r1, #1
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fa3b 	bl	80017a6 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4914      	ldr	r1, [pc, #80]	; (8001388 <lps22hh_init+0xa8>)
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fa5b 	bl	80017f2 <lps22hh_reset_get>
	} while (rst_lps22hh);
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <lps22hh_init+0xa8>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f5      	bne.n	8001330 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2101      	movs	r1, #1
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f95a 	bl	8001604 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2115      	movs	r1, #21
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f97a 	bl	8001650 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	461c      	mov	r4, r3
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd90      	pop	{r4, r7, pc}
 8001374:	080014b5 	.word	0x080014b5
 8001378:	080014ef 	.word	0x080014ef
 800137c:	20000550 	.word	0x20000550
 8001380:	20000238 	.word	0x20000238
 8001384:	40020800 	.word	0x40020800
 8001388:	20000239 	.word	0x20000239

0800138c <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	1d3c      	adds	r4, r7, #4
 8001394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001398:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800139a:	f107 0214 	add.w	r2, r7, #20
 800139e:	1d38      	adds	r0, r7, #4
 80013a0:	2301      	movs	r3, #1
 80013a2:	2127      	movs	r1, #39	; 0x27
 80013a4:	f000 f8cb 	bl	800153e <lps22hh_read_reg>

	if (reg.status.p_da) {
 80013a8:	7d3b      	ldrb	r3, [r7, #20]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d011      	beq.n	80013d8 <get_pressure+0x4c>
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <get_pressure+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4908      	ldr	r1, [pc, #32]	; (80013e0 <get_pressure+0x54>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f994 	bl	80016ec <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <get_pressure+0x54>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f8e9 	bl	80015a0 <lps22hh_from_lsb_to_hpa>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	20000234 	.word	0x20000234

080013e4 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	1d3c      	adds	r4, r7, #4
 80013ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013f0:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80013f2:	f107 0214 	add.w	r2, r7, #20
 80013f6:	1d38      	adds	r0, r7, #4
 80013f8:	2301      	movs	r3, #1
 80013fa:	2127      	movs	r1, #39	; 0x27
 80013fc:	f000 f89f 	bl	800153e <lps22hh_read_reg>

	if (reg.status.t_da) {
 8001400:	7d3b      	ldrb	r3, [r7, #20]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d012      	beq.n	8001432 <get_temperature+0x4e>
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <get_temperature+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4909      	ldr	r1, [pc, #36]	; (800143c <get_temperature+0x58>)
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f991 	bl	800173e <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <get_temperature+0x58>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f8d4 	bl	80015d0 <lps22hh_from_lsb_to_celsius>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001432:	bf00      	nop
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	2000022e 	.word	0x2000022e

08001440 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af04      	add	r7, sp, #16
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	461a      	mov	r2, r3
 800144c:	460b      	mov	r3, r1
 800144e:	72fb      	strb	r3, [r7, #11]
 8001450:	4613      	mov	r3, r2
 8001452:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 8001454:	7afb      	ldrb	r3, [r7, #11]
 8001456:	b29a      	uxth	r2, r3
 8001458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	893b      	ldrh	r3, [r7, #8]
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	21d5      	movs	r1, #213	; 0xd5
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f003 fd4a 	bl	8004f04 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af04      	add	r7, sp, #16
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	461a      	mov	r2, r3
 8001486:	460b      	mov	r3, r1
 8001488:	72fb      	strb	r3, [r7, #11]
 800148a:	4613      	mov	r3, r2
 800148c:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	b29a      	uxth	r2, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	893b      	ldrh	r3, [r7, #8]
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	21d5      	movs	r1, #213	; 0xd5
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f003 fe27 	bl	80050f8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af04      	add	r7, sp, #16
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	461a      	mov	r2, r3
 80014c0:	460b      	mov	r3, r1
 80014c2:	72fb      	strb	r3, [r7, #11]
 80014c4:	4613      	mov	r3, r2
 80014c6:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	893b      	ldrh	r3, [r7, #8]
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	21b9      	movs	r1, #185	; 0xb9
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f003 fd10 	bl	8004f04 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b088      	sub	sp, #32
 80014f2:	af04      	add	r7, sp, #16
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	461a      	mov	r2, r3
 80014fa:	460b      	mov	r3, r1
 80014fc:	72fb      	strb	r3, [r7, #11]
 80014fe:	4613      	mov	r3, r2
 8001500:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	b29a      	uxth	r2, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	893b      	ldrh	r3, [r7, #8]
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	21b9      	movs	r1, #185	; 0xb9
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f003 fded 	bl	80050f8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f002 fc4d 	bl	8003dd0 <HAL_Delay>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800153e:	b590      	push	{r4, r7, lr}
 8001540:	b087      	sub	sp, #28
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	461a      	mov	r2, r3
 800154a:	460b      	mov	r3, r1
 800154c:	72fb      	strb	r3, [r7, #11]
 800154e:	4613      	mov	r3, r2
 8001550:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	685c      	ldr	r4, [r3, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6898      	ldr	r0, [r3, #8]
 800155a:	893b      	ldrh	r3, [r7, #8]
 800155c:	7af9      	ldrb	r1, [r7, #11]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	47a0      	blx	r4
 8001562:	6178      	str	r0, [r7, #20]

  return ret;
 8001564:	697b      	ldr	r3, [r7, #20]
}
 8001566:	4618      	mov	r0, r3
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}

0800156e <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800156e:	b590      	push	{r4, r7, lr}
 8001570:	b087      	sub	sp, #28
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	461a      	mov	r2, r3
 800157a:	460b      	mov	r3, r1
 800157c:	72fb      	strb	r3, [r7, #11]
 800157e:	4613      	mov	r3, r2
 8001580:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681c      	ldr	r4, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6898      	ldr	r0, [r3, #8]
 800158a:	893b      	ldrh	r3, [r7, #8]
 800158c:	7af9      	ldrb	r1, [r7, #11]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	47a0      	blx	r4
 8001592:	6178      	str	r0, [r7, #20]

  return ret;
 8001594:	697b      	ldr	r3, [r7, #20]
}
 8001596:	4618      	mov	r0, r3
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}
	...

080015a0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80015cc <lps22hh_from_lsb_to_hpa+0x2c>
 80015b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	49800000 	.word	0x49800000

080015d0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001600 <lps22hh_from_lsb_to_celsius+0x30>
 80015ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ee:	eef0 7a66 	vmov.f32	s15, s13
}
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	42c80000 	.word	0x42c80000

08001604 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001610:	f107 0208 	add.w	r2, r7, #8
 8001614:	2301      	movs	r3, #1
 8001616:	2110      	movs	r1, #16
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff90 	bl	800153e <lps22hh_read_reg>
 800161e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	7a3b      	ldrb	r3, [r7, #8]
 8001630:	f362 0341 	bfi	r3, r2, #1, #1
 8001634:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001636:	f107 0208 	add.w	r2, r7, #8
 800163a:	2301      	movs	r3, #1
 800163c:	2110      	movs	r1, #16
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff95 	bl	800156e <lps22hh_write_reg>
 8001644:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800165c:	f107 0210 	add.w	r2, r7, #16
 8001660:	2301      	movs	r3, #1
 8001662:	2110      	movs	r1, #16
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff6a 	bl	800153e <lps22hh_read_reg>
 800166a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d107      	bne.n	8001682 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001672:	f107 020c 	add.w	r2, r7, #12
 8001676:	2301      	movs	r3, #1
 8001678:	2111      	movs	r1, #17
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff5f 	bl	800153e <lps22hh_read_reg>
 8001680:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10f      	bne.n	80016a8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	b2da      	uxtb	r2, r3
 8001690:	7c3b      	ldrb	r3, [r7, #16]
 8001692:	f362 1306 	bfi	r3, r2, #4, #3
 8001696:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001698:	f107 0210 	add.w	r2, r7, #16
 800169c:	2301      	movs	r3, #1
 800169e:	2110      	movs	r1, #16
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff64 	bl	800156e <lps22hh_write_reg>
 80016a6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	7b3b      	ldrb	r3, [r7, #12]
 80016ba:	f362 0341 	bfi	r3, r2, #1, #1
 80016be:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	08db      	lsrs	r3, r3, #3
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	7b3b      	ldrb	r3, [r7, #12]
 80016cc:	f362 0300 	bfi	r3, r2, #0, #1
 80016d0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80016d2:	f107 020c 	add.w	r2, r7, #12
 80016d6:	2301      	movs	r3, #1
 80016d8:	2111      	movs	r1, #17
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff47 	bl	800156e <lps22hh_write_reg>
 80016e0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80016e2:	697b      	ldr	r3, [r7, #20]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80016f6:	f107 0208 	add.w	r2, r7, #8
 80016fa:	2303      	movs	r3, #3
 80016fc:	2128      	movs	r1, #40	; 0x28
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ff1d 	bl	800153e <lps22hh_read_reg>
 8001704:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8001706:	7abb      	ldrb	r3, [r7, #10]
 8001708:	461a      	mov	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	7a7a      	ldrb	r2, [r7, #9]
 8001716:	441a      	add	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	7a3a      	ldrb	r2, [r7, #8]
 8001724:	441a      	add	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	021a      	lsls	r2, r3, #8
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	601a      	str	r2, [r3, #0]

  return ret;
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8001748:	f107 0208 	add.w	r2, r7, #8
 800174c:	2302      	movs	r3, #2
 800174e:	212b      	movs	r1, #43	; 0x2b
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fef4 	bl	800153e <lps22hh_read_reg>
 8001756:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8001758:	7a7b      	ldrb	r3, [r7, #9]
 800175a:	b21a      	sxth	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b29b      	uxth	r3, r3
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b29a      	uxth	r2, r3
 800176c:	7a3b      	ldrb	r3, [r7, #8]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	b21a      	sxth	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	801a      	strh	r2, [r3, #0]

  return ret;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800178e:	2301      	movs	r3, #1
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	210f      	movs	r1, #15
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fed2 	bl	800153e <lps22hh_read_reg>
 800179a:	60f8      	str	r0, [r7, #12]

  return ret;
 800179c:	68fb      	ldr	r3, [r7, #12]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80017b2:	f107 0208 	add.w	r2, r7, #8
 80017b6:	2301      	movs	r3, #1
 80017b8:	2111      	movs	r1, #17
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff febf 	bl	800153e <lps22hh_read_reg>
 80017c0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10f      	bne.n	80017e8 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	7a3b      	ldrb	r3, [r7, #8]
 80017d2:	f362 0382 	bfi	r3, r2, #2, #1
 80017d6:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80017d8:	f107 0208 	add.w	r2, r7, #8
 80017dc:	2301      	movs	r3, #1
 80017de:	2111      	movs	r1, #17
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fec4 	bl	800156e <lps22hh_write_reg>
 80017e6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80017fc:	f107 0208 	add.w	r2, r7, #8
 8001800:	2301      	movs	r3, #1
 8001802:	2111      	movs	r1, #17
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fe9a 	bl	800153e <lps22hh_read_reg>
 800180a:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800180c:	7a3b      	ldrb	r3, [r7, #8]
 800180e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	701a      	strb	r2, [r3, #0]

  return ret;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	461a      	mov	r2, r3
 8001830:	460b      	mov	r3, r1
 8001832:	72fb      	strb	r3, [r7, #11]
 8001834:	4613      	mov	r3, r2
 8001836:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685c      	ldr	r4, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6898      	ldr	r0, [r3, #8]
 8001840:	893b      	ldrh	r3, [r7, #8]
 8001842:	7af9      	ldrb	r1, [r7, #11]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	47a0      	blx	r4
 8001848:	6178      	str	r0, [r7, #20]

  return ret;
 800184a:	697b      	ldr	r3, [r7, #20]
}
 800184c:	4618      	mov	r0, r3
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	72fb      	strb	r3, [r7, #11]
 8001864:	4613      	mov	r3, r2
 8001866:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681c      	ldr	r4, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6898      	ldr	r0, [r3, #8]
 8001870:	893b      	ldrh	r3, [r7, #8]
 8001872:	7af9      	ldrb	r1, [r7, #11]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	47a0      	blx	r4
 8001878:	6178      	str	r0, [r7, #20]

  return ret;
 800187a:	697b      	ldr	r3, [r7, #20]
}
 800187c:	4618      	mov	r0, r3
 800187e:	371c      	adds	r7, #28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd90      	pop	{r4, r7, pc}

08001884 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 800188e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018b0 <lsm6dsl_from_fs8g_to_mg+0x2c>
 800189e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018a2:	eeb0 0a67 	vmov.f32	s0, s15
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	3e79db23 	.word	0x3e79db23

080018b4 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018e0 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 80018ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018d2:	eeb0 0a67 	vmov.f32	s0, s15
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	428c0000 	.word	0x428c0000

080018e4 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80018f0:	f107 0208 	add.w	r2, r7, #8
 80018f4:	2301      	movs	r3, #1
 80018f6:	2110      	movs	r1, #16
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff93 	bl	8001824 <lsm6dsl_read_reg>
 80018fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	7a3b      	ldrb	r3, [r7, #8]
 8001910:	f362 0383 	bfi	r3, r2, #2, #2
 8001914:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001916:	f107 0208 	add.w	r2, r7, #8
 800191a:	2301      	movs	r3, #1
 800191c:	2110      	movs	r1, #16
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ff98 	bl	8001854 <lsm6dsl_write_reg>
 8001924:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800193c:	f107 0208 	add.w	r2, r7, #8
 8001940:	2301      	movs	r3, #1
 8001942:	2110      	movs	r1, #16
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff6d 	bl	8001824 <lsm6dsl_read_reg>
 800194a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10f      	bne.n	8001972 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	b2da      	uxtb	r2, r3
 800195a:	7a3b      	ldrb	r3, [r7, #8]
 800195c:	f362 1307 	bfi	r3, r2, #4, #4
 8001960:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001962:	f107 0208 	add.w	r2, r7, #8
 8001966:	2301      	movs	r3, #1
 8001968:	2110      	movs	r1, #16
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff72 	bl	8001854 <lsm6dsl_write_reg>
 8001970:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001988:	f107 0208 	add.w	r2, r7, #8
 800198c:	2301      	movs	r3, #1
 800198e:	2111      	movs	r1, #17
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff47 	bl	8001824 <lsm6dsl_read_reg>
 8001996:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	7a3b      	ldrb	r3, [r7, #8]
 80019a8:	f362 0343 	bfi	r3, r2, #1, #3
 80019ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80019ae:	f107 0208 	add.w	r2, r7, #8
 80019b2:	2301      	movs	r3, #1
 80019b4:	2111      	movs	r1, #17
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff4c 	bl	8001854 <lsm6dsl_write_reg>
 80019bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80019d4:	f107 0208 	add.w	r2, r7, #8
 80019d8:	2301      	movs	r3, #1
 80019da:	2111      	movs	r1, #17
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff21 	bl	8001824 <lsm6dsl_read_reg>
 80019e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10f      	bne.n	8001a0a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	7a3b      	ldrb	r3, [r7, #8]
 80019f4:	f362 1307 	bfi	r3, r2, #4, #4
 80019f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80019fa:	f107 0208 	add.w	r2, r7, #8
 80019fe:	2301      	movs	r3, #1
 8001a00:	2111      	movs	r1, #17
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff26 	bl	8001854 <lsm6dsl_write_reg>
 8001a08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001a20:	f107 0208 	add.w	r2, r7, #8
 8001a24:	2301      	movs	r3, #1
 8001a26:	2112      	movs	r1, #18
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fefb 	bl	8001824 <lsm6dsl_read_reg>
 8001a2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	7a3b      	ldrb	r3, [r7, #8]
 8001a40:	f362 1386 	bfi	r3, r2, #6, #1
 8001a44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001a46:	f107 0208 	add.w	r2, r7, #8
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2112      	movs	r1, #18
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff00 	bl	8001854 <lsm6dsl_write_reg>
 8001a54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001a6a:	f107 0208 	add.w	r2, r7, #8
 8001a6e:	2301      	movs	r3, #1
 8001a70:	211e      	movs	r1, #30
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fed6 	bl	8001824 <lsm6dsl_read_reg>
 8001a78:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8001a7a:	7a3b      	ldrb	r3, [r7, #8]
 8001a7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a88:	68fb      	ldr	r3, [r7, #12]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001a9c:	f107 0208 	add.w	r2, r7, #8
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	211e      	movs	r1, #30
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff febd 	bl	8001824 <lsm6dsl_read_reg>
 8001aaa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8001aac:	7a3b      	ldrb	r3, [r7, #8]
 8001aae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]

  return ret;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001ace:	f107 020c 	add.w	r2, r7, #12
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	2122      	movs	r1, #34	; 0x22
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fea4 	bl	8001824 <lsm6dsl_read_reg>
 8001adc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001ade:	7b7b      	ldrb	r3, [r7, #13]
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	7b3b      	ldrb	r3, [r7, #12]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3302      	adds	r3, #2
 8001b06:	b212      	sxth	r2, r2
 8001b08:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	3302      	adds	r3, #2
 8001b24:	b212      	sxth	r2, r2
 8001b26:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001b28:	7c7a      	ldrb	r2, [r7, #17]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	b212      	sxth	r2, r2
 8001b30:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	3304      	adds	r3, #4
 8001b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	7c3b      	ldrb	r3, [r7, #16]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	b212      	sxth	r2, r2
 8001b4e:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b50:	697b      	ldr	r3, [r7, #20]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001b64:	f107 020c 	add.w	r2, r7, #12
 8001b68:	2306      	movs	r3, #6
 8001b6a:	2128      	movs	r1, #40	; 0x28
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fe59 	bl	8001824 <lsm6dsl_read_reg>
 8001b72:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001b74:	7b7b      	ldrb	r3, [r7, #13]
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	7b3b      	ldrb	r3, [r7, #12]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	b212      	sxth	r2, r2
 8001b9e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	b212      	sxth	r2, r2
 8001bbc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001bbe:	7c7a      	ldrb	r2, [r7, #17]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	b212      	sxth	r2, r2
 8001bc6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	7c3b      	ldrb	r3, [r7, #16]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	3304      	adds	r3, #4
 8001be2:	b212      	sxth	r2, r2
 8001be4:	801a      	strh	r2, [r3, #0]

  return ret;
 8001be6:	697b      	ldr	r3, [r7, #20]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	210f      	movs	r1, #15
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fe0f 	bl	8001824 <lsm6dsl_read_reg>
 8001c06:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c08:	68fb      	ldr	r3, [r7, #12]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c1e:	f107 0208 	add.w	r2, r7, #8
 8001c22:	2301      	movs	r3, #1
 8001c24:	2112      	movs	r1, #18
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fdfc 	bl	8001824 <lsm6dsl_read_reg>
 8001c2c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10f      	bne.n	8001c54 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	7a3b      	ldrb	r3, [r7, #8]
 8001c3e:	f362 0300 	bfi	r3, r2, #0, #1
 8001c42:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c44:	f107 0208 	add.w	r2, r7, #8
 8001c48:	2301      	movs	r3, #1
 8001c4a:	2112      	movs	r1, #18
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fe01 	bl	8001854 <lsm6dsl_write_reg>
 8001c52:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c68:	f107 0208 	add.w	r2, r7, #8
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	2112      	movs	r1, #18
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fdd7 	bl	8001824 <lsm6dsl_read_reg>
 8001c76:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001c78:	7a3b      	ldrb	r3, [r7, #8]
 8001c7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001c9c:	f107 0208 	add.w	r2, r7, #8
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	2117      	movs	r1, #23
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fdbd 	bl	8001824 <lsm6dsl_read_reg>
 8001caa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d120      	bne.n	8001cf4 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	7a3b      	ldrb	r3, [r7, #8]
 8001cbe:	f362 03c3 	bfi	r3, r2, #3, #1
 8001cc2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	7a3b      	ldrb	r3, [r7, #8]
 8001cce:	f362 1346 	bfi	r3, r2, #5, #2
 8001cd2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001cd4:	7a3b      	ldrb	r3, [r7, #8]
 8001cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cda:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001cdc:	7a3b      	ldrb	r3, [r7, #8]
 8001cde:	f36f 0382 	bfc	r3, #2, #1
 8001ce2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001ce4:	f107 0208 	add.w	r2, r7, #8
 8001ce8:	2301      	movs	r3, #1
 8001cea:	2117      	movs	r1, #23
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fdb1 	bl	8001854 <lsm6dsl_write_reg>
 8001cf2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001d0a:	f107 0208 	add.w	r2, r7, #8
 8001d0e:	2301      	movs	r3, #1
 8001d10:	2116      	movs	r1, #22
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fd86 	bl	8001824 <lsm6dsl_read_reg>
 8001d18:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d157      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	7a3b      	ldrb	r3, [r7, #8]
 8001d2c:	f362 1305 	bfi	r3, r2, #4, #2
 8001d30:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	09db      	lsrs	r3, r3, #7
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	7a3b      	ldrb	r3, [r7, #8]
 8001d40:	f362 1386 	bfi	r3, r2, #6, #1
 8001d44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001d46:	f107 0208 	add.w	r2, r7, #8
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	2116      	movs	r1, #22
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fd80 	bl	8001854 <lsm6dsl_write_reg>
 8001d54:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d139      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001d5c:	f107 020c 	add.w	r2, r7, #12
 8001d60:	2301      	movs	r3, #1
 8001d62:	2115      	movs	r1, #21
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fd5d 	bl	8001824 <lsm6dsl_read_reg>
 8001d6a:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d12e      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	7b3b      	ldrb	r3, [r7, #12]
 8001d7c:	f362 0301 	bfi	r3, r2, #0, #2
 8001d80:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001d82:	f107 020c 	add.w	r2, r7, #12
 8001d86:	2301      	movs	r3, #1
 8001d88:	2115      	movs	r1, #21
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fd62 	bl	8001854 <lsm6dsl_write_reg>
 8001d90:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11b      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001d98:	f107 0210 	add.w	r2, r7, #16
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2113      	movs	r1, #19
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fd3f 	bl	8001824 <lsm6dsl_read_reg>
 8001da6:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d110      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	7c3b      	ldrb	r3, [r7, #16]
 8001dba:	f362 0341 	bfi	r3, r2, #1, #1
 8001dbe:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8001dc0:	f107 0210 	add.w	r2, r7, #16
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	2113      	movs	r1, #19
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fd43 	bl	8001854 <lsm6dsl_write_reg>
 8001dce:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001dd0:	697b      	ldr	r3, [r7, #20]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <tone>:
	#endif
}
#endif

// helper functions for buzzing
void tone(uint32_t duration, uint32_t repeats) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	e013      	b.n	8001e14 <tone+0x38>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001dec:	2108      	movs	r1, #8
 8001dee:	480e      	ldr	r0, [pc, #56]	; (8001e28 <tone+0x4c>)
 8001df0:	f005 fdcc 	bl	800798c <HAL_TIM_PWM_Start>
		HAL_Delay(duration);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f001 ffeb 	bl	8003dd0 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	480a      	ldr	r0, [pc, #40]	; (8001e28 <tone+0x4c>)
 8001dfe:	f005 fe03 	bl	8007a08 <HAL_TIM_PWM_Stop>
		if (repeats > 1)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d902      	bls.n	8001e0e <tone+0x32>
			HAL_Delay(duration);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f001 ffe1 	bl	8003dd0 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3301      	adds	r3, #1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d3e7      	bcc.n	8001dec <tone+0x10>
	}
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000c58 	.word	0x20000c58

08001e2c <buzz_success>:
void buzz_success() { tone(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS); };
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	2101      	movs	r1, #1
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff ffd2 	bl	8001ddc <tone>
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <buzz_failure>:
void buzz_failure() { tone(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS); };
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	2101      	movs	r1, #1
 8001e42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e46:	f7ff ffc9 	bl	8001ddc <tone>
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e54:	b0a9      	sub	sp, #164	; 0xa4
 8001e56:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e58:	f001 ff48 	bl	8003cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e5c:	f000 f9d8 	bl	8002210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e60:	f000 fd6e 	bl	8002940 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e64:	f000 fa5c 	bl	8002320 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001e68:	f000 faac 	bl	80023c4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001e6c:	f000 faea 	bl	8002444 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001e70:	f000 fb82 	bl	8002578 <MX_SPI2_Init>
  MX_SPI4_Init();
 8001e74:	f000 fbb6 	bl	80025e4 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001e78:	f000 fbea 	bl	8002650 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001e7c:	f000 fc1e 	bl	80026bc <MX_TIM2_Init>
  MX_UART8_Init();
 8001e80:	f000 fce0 	bl	8002844 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001e84:	f000 fd08 	bl	8002898 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001e88:	f000 fd30 	bl	80028ec <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001e8c:	f007 fb7a 	bl	8009584 <MX_FATFS_Init>
  MX_RTC_Init();
 8001e90:	f000 fb18 	bl	80024c4 <MX_RTC_Init>
  MX_TIM4_Init();
 8001e94:	f000 fc88 	bl	80027a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2102      	movs	r1, #2
 8001e9c:	4847      	ldr	r0, [pc, #284]	; (8001fbc <main+0x16c>)
 8001e9e:	f002 feaf 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4845      	ldr	r0, [pc, #276]	; (8001fbc <main+0x16c>)
 8001ea8:	f002 feaa 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2108      	movs	r1, #8
 8001eb0:	4842      	ldr	r0, [pc, #264]	; (8001fbc <main+0x16c>)
 8001eb2:	f002 fea5 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2108      	movs	r1, #8
 8001eba:	4841      	ldr	r0, [pc, #260]	; (8001fc0 <main+0x170>)
 8001ebc:	f002 fea0 	bl	8004c00 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, SET);
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ec6:	483f      	ldr	r0, [pc, #252]	; (8001fc4 <main+0x174>)
 8001ec8:	f002 fe9a 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed2:	483c      	ldr	r0, [pc, #240]	; (8001fc4 <main+0x174>)
 8001ed4:	f002 fe94 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ede:	4839      	ldr	r0, [pc, #228]	; (8001fc4 <main+0x174>)
 8001ee0:	f002 fe8e 	bl	8004c00 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	4836      	ldr	r0, [pc, #216]	; (8001fc4 <main+0x174>)
 8001eea:	f002 fe89 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ef4:	4834      	ldr	r0, [pc, #208]	; (8001fc8 <main+0x178>)
 8001ef6:	f002 fe83 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f00:	4831      	ldr	r0, [pc, #196]	; (8001fc8 <main+0x178>)
 8001f02:	f002 fe7d 	bl	8004c00 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2104      	movs	r1, #4
 8001f0a:	4830      	ldr	r0, [pc, #192]	; (8001fcc <main+0x17c>)
 8001f0c:	f002 fe78 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	482d      	ldr	r0, [pc, #180]	; (8001fcc <main+0x17c>)
 8001f16:	f002 fe73 	bl	8004c00 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f20:	482a      	ldr	r0, [pc, #168]	; (8001fcc <main+0x17c>)
 8001f22:	f002 fe6d 	bl	8004c00 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high (SPI idle CS is high)
  HAL_GPIO_WritePin(TH_CS_GPIO_Port, TH_CS_Pin, SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4827      	ldr	r0, [pc, #156]	; (8001fcc <main+0x17c>)
 8001f2e:	f002 fe67 	bl	8004c00 <HAL_GPIO_WritePin>

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f38:	4822      	ldr	r0, [pc, #136]	; (8001fc4 <main+0x174>)
 8001f3a:	f002 fe61 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	4823      	ldr	r0, [pc, #140]	; (8001fd0 <main+0x180>)
 8001f44:	f002 fe5c 	bl	8004c00 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2140      	movs	r1, #64	; 0x40
 8001f4c:	4820      	ldr	r0, [pc, #128]	; (8001fd0 <main+0x180>)
 8001f4e:	f002 fe57 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	2120      	movs	r1, #32
 8001f56:	481e      	ldr	r0, [pc, #120]	; (8001fd0 <main+0x180>)
 8001f58:	f002 fe52 	bl	8004c00 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2110      	movs	r1, #16
 8001f60:	481b      	ldr	r0, [pc, #108]	; (8001fd0 <main+0x180>)
 8001f62:	f002 fe4d 	bl	8004c00 <HAL_GPIO_WritePin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
  Tx_setup();
#endif

  // init i2c sensors and data storage
  dev_ctx_lsm = lsm6dsl_init();
 8001f66:	4c1b      	ldr	r4, [pc, #108]	; (8001fd4 <main+0x184>)
 8001f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff f8bb 	bl	80010e8 <lsm6dsl_init>
 8001f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8001f7e:	f7ff ff55 	bl	8001e2c <buzz_success>
  HAL_Delay(500);
 8001f82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f86:	f001 ff23 	bl	8003dd0 <HAL_Delay>

  dev_ctx_lps = lps22hh_init();
 8001f8a:	4c13      	ldr	r4, [pc, #76]	; (8001fd8 <main+0x188>)
 8001f8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f9a5 	bl	80012e0 <lps22hh_init>
 8001f96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8001fa2:	f7ff ff43 	bl	8001e2c <buzz_success>
  HAL_Delay(500);
 8001fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001faa:	f001 ff11 	bl	8003dd0 <HAL_Delay>

  // get local_pressure
  local_pressure = 1022.0;  // https://montreal.weatherstats.ca/charts/pressure_sea-hourly.html
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <main+0x18c>)
 8001fb0:	4a0b      	ldr	r2, [pc, #44]	; (8001fe0 <main+0x190>)
 8001fb2:	601a      	str	r2, [r3, #0]
  for (uint8_t i = 0; i < 100; i++) {
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001fba:	e024      	b.n	8002006 <main+0x1b6>
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	40021800 	.word	0x40021800
 8001fc8:	40021400 	.word	0x40021400
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	20000c98 	.word	0x20000c98
 8001fd8:	20000ca4 	.word	0x20000ca4
 8001fdc:	2000025c 	.word	0x2000025c
 8001fe0:	447f8000 	.word	0x447f8000
	  alt_ground += getAltitude();
 8001fe4:	f000 fe64 	bl	8002cb0 <getAltitude>
 8001fe8:	eeb0 7a40 	vmov.f32	s14, s0
 8001fec:	4b70      	ldr	r3, [pc, #448]	; (80021b0 <main+0x360>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <main+0x360>)
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 100; i++) {
 8001ffc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002000:	3301      	adds	r3, #1
 8002002:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002006:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800200a:	2b63      	cmp	r3, #99	; 0x63
 800200c:	d9ea      	bls.n	8001fe4 <main+0x194>
  }

  alt_ground /= 100.0;
 800200e:	4b68      	ldr	r3, [pc, #416]	; (80021b0 <main+0x360>)
 8002010:	ed93 7a00 	vldr	s14, [r3]
 8002014:	eddf 6a67 	vldr	s13, [pc, #412]	; 80021b4 <main+0x364>
 8002018:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201c:	4b64      	ldr	r3, [pc, #400]	; (80021b0 <main+0x360>)
 800201e:	edc3 7a00 	vstr	s15, [r3]

  // init FLASH
//  if (!W25qxx_Init()) Error_Handler();
  buzz_success();
 8002022:	f7ff ff03 	bl	8001e2c <buzz_success>

  // init sd card with dynamic filename
  fres = sd_init_dynamic_filename("FC", sd_file_header, filename);
 8002026:	4a64      	ldr	r2, [pc, #400]	; (80021b8 <main+0x368>)
 8002028:	4964      	ldr	r1, [pc, #400]	; (80021bc <main+0x36c>)
 800202a:	4865      	ldr	r0, [pc, #404]	; (80021c0 <main+0x370>)
 800202c:	f000 ffe0 	bl	8002ff0 <sd_init_dynamic_filename>
 8002030:	4603      	mov	r3, r0
 8002032:	461a      	mov	r2, r3
 8002034:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <main+0x374>)
 8002036:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8002038:	4b62      	ldr	r3, [pc, #392]	; (80021c4 <main+0x374>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <main+0x1f4>
  		Error_Handler();
 8002040:	f000 ffb0 	bl	8002fa4 <Error_Handler>
  // send message with Iridium
//  MRT_Static_Iridium_sendMessage("message");
//  MRT_Static_Iridium_Shutdown();

  // init is done, can start timer 4 in interrupt mode for telemetry
  HAL_TIM_Base_Start_IT(&htim4);
 8002044:	4860      	ldr	r0, [pc, #384]	; (80021c8 <main+0x378>)
 8002046:	f005 fc48 	bl	80078da <HAL_TIM_Base_Start_IT>
//	  VR_Start_Rec();
//	  HAL_Delay(1000000);
//	  VR_Stop_Rec();
//	  buzz_success();

	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800204a:	2201      	movs	r2, #1
 800204c:	2104      	movs	r1, #4
 800204e:	485f      	ldr	r0, [pc, #380]	; (80021cc <main+0x37c>)
 8002050:	f002 fdd6 	bl	8004c00 <HAL_GPIO_WritePin>
//	  buzz_success();

	  // av message
	  sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
						acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002054:	4b5e      	ldr	r3, [pc, #376]	; (80021d0 <main+0x380>)
 8002056:	681b      	ldr	r3, [r3, #0]
	  sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa85 	bl	8000568 <__aeabi_f2d>
 800205e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002062:	4b5b      	ldr	r3, [pc, #364]	; (80021d0 <main+0x380>)
 8002064:	685b      	ldr	r3, [r3, #4]
	  sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fa7e 	bl	8000568 <__aeabi_f2d>
 800206c:	e9c7 0108 	strd	r0, r1, [r7, #32]
						acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002070:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <main+0x380>)
 8002072:	689b      	ldr	r3, [r3, #8]
	  sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fa77 	bl	8000568 <__aeabi_f2d>
 800207a:	e9c7 0106 	strd	r0, r1, [r7, #24]
						angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 800207e:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <main+0x384>)
 8002080:	681b      	ldr	r3, [r3, #0]
	  sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa70 	bl	8000568 <__aeabi_f2d>
 8002088:	e9c7 0104 	strd	r0, r1, [r7, #16]
						angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 800208c:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <main+0x384>)
 800208e:	685b      	ldr	r3, [r3, #4]
	  sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fa69 	bl	8000568 <__aeabi_f2d>
 8002096:	e9c7 0102 	strd	r0, r1, [r7, #8]
						angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 800209a:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <main+0x384>)
 800209c:	689b      	ldr	r3, [r3, #8]
	  sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa62 	bl	8000568 <__aeabi_f2d>
 80020a4:	4605      	mov	r5, r0
 80020a6:	460e      	mov	r6, r1
 80020a8:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <main+0x388>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa5b 	bl	8000568 <__aeabi_f2d>
 80020b2:	4682      	mov	sl, r0
 80020b4:	468b      	mov	fp, r1
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <main+0x38c>)
 80020b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80020bc:	4b48      	ldr	r3, [pc, #288]	; (80021e0 <main+0x390>)
 80020be:	e9d3 0100 	ldrd	r0, r1, [r3]
						pressure_hPa, latitude, longitude,
						stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 80020c2:	4b48      	ldr	r3, [pc, #288]	; (80021e4 <main+0x394>)
 80020c4:	785b      	ldrb	r3, [r3, #1]
	  sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 80020c6:	607b      	str	r3, [r7, #4]
						stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 80020c8:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <main+0x394>)
 80020ca:	789b      	ldrb	r3, [r3, #2]
	  sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 80020cc:	603b      	str	r3, [r7, #0]
 80020ce:	4b45      	ldr	r3, [pc, #276]	; (80021e4 <main+0x394>)
 80020d0:	685c      	ldr	r4, [r3, #4]
 80020d2:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <main+0x398>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4b44      	ldr	r3, [pc, #272]	; (80021ec <main+0x39c>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	9314      	str	r3, [sp, #80]	; 0x50
 80020e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80020e4:	9412      	str	r4, [sp, #72]	; 0x48
 80020e6:	683c      	ldr	r4, [r7, #0]
 80020e8:	9411      	str	r4, [sp, #68]	; 0x44
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	9310      	str	r3, [sp, #64]	; 0x40
 80020ee:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80020f2:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 80020f6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80020fa:	e9cd 5608 	strd	r5, r6, [sp, #32]
 80020fe:	ed97 7b02 	vldr	d7, [r7, #8]
 8002102:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002106:	ed97 7b04 	vldr	d7, [r7, #16]
 800210a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800210e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002112:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002116:	ed97 7b08 	vldr	d7, [r7, #32]
 800211a:	ed8d 7b00 	vstr	d7, [sp]
 800211e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002122:	4933      	ldr	r1, [pc, #204]	; (80021f0 <main+0x3a0>)
 8002124:	4833      	ldr	r0, [pc, #204]	; (80021f4 <main+0x3a4>)
 8002126:	f00b fc57 	bl	800d9d8 <siprintf>
						continuity, state);
		HAL_UART_Transmit(&huart3, msg_buffer_av, strlen((char *)msg_buffer_av), HAL_MAX_DELAY);
 800212a:	4832      	ldr	r0, [pc, #200]	; (80021f4 <main+0x3a4>)
 800212c:	f7fe f860 	bl	80001f0 <strlen>
 8002130:	4603      	mov	r3, r0
 8002132:	b29a      	uxth	r2, r3
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	492e      	ldr	r1, [pc, #184]	; (80021f4 <main+0x3a4>)
 800213a:	482f      	ldr	r0, [pc, #188]	; (80021f8 <main+0x3a8>)
 800213c:	f006 fb63 	bl	8008806 <HAL_UART_Transmit>
//		HAL_Delay(1);


		// prop message
		sprintf((char *)msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <main+0x3ac>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fa0f 	bl	8000568 <__aeabi_f2d>
 800214a:	4604      	mov	r4, r0
 800214c:	460d      	mov	r5, r1
 800214e:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <main+0x3b0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe fa08 	bl	8000568 <__aeabi_f2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4929      	ldr	r1, [pc, #164]	; (8002204 <main+0x3b4>)
 800215e:	7809      	ldrb	r1, [r1, #0]
 8002160:	b2c9      	uxtb	r1, r1
 8002162:	4608      	mov	r0, r1
						tank_pressure, tank_temperature, valve_state,
						stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds);
 8002164:	491f      	ldr	r1, [pc, #124]	; (80021e4 <main+0x394>)
 8002166:	7849      	ldrb	r1, [r1, #1]
		sprintf((char *)msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002168:	460e      	mov	r6, r1
						stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds);
 800216a:	491e      	ldr	r1, [pc, #120]	; (80021e4 <main+0x394>)
 800216c:	7889      	ldrb	r1, [r1, #2]
		sprintf((char *)msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 800216e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002170:	491c      	ldr	r1, [pc, #112]	; (80021e4 <main+0x394>)
 8002172:	6849      	ldr	r1, [r1, #4]
 8002174:	9105      	str	r1, [sp, #20]
 8002176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002178:	9104      	str	r1, [sp, #16]
 800217a:	9603      	str	r6, [sp, #12]
 800217c:	9002      	str	r0, [sp, #8]
 800217e:	e9cd 2300 	strd	r2, r3, [sp]
 8002182:	4622      	mov	r2, r4
 8002184:	462b      	mov	r3, r5
 8002186:	4920      	ldr	r1, [pc, #128]	; (8002208 <main+0x3b8>)
 8002188:	4820      	ldr	r0, [pc, #128]	; (800220c <main+0x3bc>)
 800218a:	f00b fc25 	bl	800d9d8 <siprintf>
		HAL_UART_Transmit(&huart3, msg_buffer_pr, strlen((char *)msg_buffer_pr), HAL_MAX_DELAY);
 800218e:	481f      	ldr	r0, [pc, #124]	; (800220c <main+0x3bc>)
 8002190:	f7fe f82e 	bl	80001f0 <strlen>
 8002194:	4603      	mov	r3, r0
 8002196:	b29a      	uxth	r2, r3
 8002198:	f04f 33ff 	mov.w	r3, #4294967295
 800219c:	491b      	ldr	r1, [pc, #108]	; (800220c <main+0x3bc>)
 800219e:	4816      	ldr	r0, [pc, #88]	; (80021f8 <main+0x3a8>)
 80021a0:	f006 fb31 	bl	8008806 <HAL_UART_Transmit>
		// transmit via radio (TODO: can be modified to send at different rate)
//		radio_tx(msg_buffer);
//		TxProtocol(msg_buffer, strlen(msg_buffer));
//		HAL_UART_Transmit(&huart3, msg_buffer_pr, strlen((char *)msg_buffer), HAL_MAX_DELAY);

		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2104      	movs	r1, #4
 80021a8:	4808      	ldr	r0, [pc, #32]	; (80021cc <main+0x37c>)
 80021aa:	f002 fd29 	bl	8004c00 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80021ae:	e74c      	b.n	800204a <main+0x1fa>
 80021b0:	20000390 	.word	0x20000390
 80021b4:	42c80000 	.word	0x42c80000
 80021b8:	20000380 	.word	0x20000380
 80021bc:	08012574 	.word	0x08012574
 80021c0:	08012388 	.word	0x08012388
 80021c4:	20000cb0 	.word	0x20000cb0
 80021c8:	20000654 	.word	0x20000654
 80021cc:	40020800 	.word	0x40020800
 80021d0:	2000023c 	.word	0x2000023c
 80021d4:	20000248 	.word	0x20000248
 80021d8:	20000254 	.word	0x20000254
 80021dc:	20000c50 	.word	0x20000c50
 80021e0:	20000ac0 	.word	0x20000ac0
 80021e4:	2000026c 	.word	0x2000026c
 80021e8:	2000023a 	.word	0x2000023a
 80021ec:	2000023b 	.word	0x2000023b
 80021f0:	0801238c 	.word	0x0801238c
 80021f4:	20000284 	.word	0x20000284
 80021f8:	20000694 	.word	0x20000694
 80021fc:	20000264 	.word	0x20000264
 8002200:	20000260 	.word	0x20000260
 8002204:	20000268 	.word	0x20000268
 8002208:	080123e8 	.word	0x080123e8
 800220c:	2000034c 	.word	0x2000034c

08002210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0a0      	sub	sp, #128	; 0x80
 8002214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800221a:	2230      	movs	r2, #48	; 0x30
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f00a fc98 	bl	800cb54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002224:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002234:	f107 030c 	add.w	r3, r7, #12
 8002238:	2230      	movs	r2, #48	; 0x30
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f00a fc89 	bl	800cb54 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b34      	ldr	r3, [pc, #208]	; (8002318 <SystemClock_Config+0x108>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a33      	ldr	r2, [pc, #204]	; (8002318 <SystemClock_Config+0x108>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b31      	ldr	r3, [pc, #196]	; (8002318 <SystemClock_Config+0x108>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	4b2e      	ldr	r3, [pc, #184]	; (800231c <SystemClock_Config+0x10c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a2d      	ldr	r2, [pc, #180]	; (800231c <SystemClock_Config+0x10c>)
 8002268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <SystemClock_Config+0x10c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800227a:	2309      	movs	r3, #9
 800227c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800227e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002282:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002284:	2301      	movs	r3, #1
 8002286:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002288:	2302      	movs	r3, #2
 800228a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800228c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002290:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002292:	2308      	movs	r3, #8
 8002294:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002296:	23b4      	movs	r3, #180	; 0xb4
 8002298:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800229a:	2302      	movs	r3, #2
 800229c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800229e:	2304      	movs	r3, #4
 80022a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fd72 	bl	8005d90 <HAL_RCC_OscConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80022b2:	f000 fe77 	bl	8002fa4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022b6:	f003 fd1b 	bl	8005cf0 <HAL_PWREx_EnableOverDrive>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80022c0:	f000 fe70 	bl	8002fa4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c4:	230f      	movs	r3, #15
 80022c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c8:	2302      	movs	r3, #2
 80022ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022da:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022e0:	2105      	movs	r1, #5
 80022e2:	4618      	mov	r0, r3
 80022e4:	f003 ffc4 	bl	8006270 <HAL_RCC_ClockConfig>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80022ee:	f000 fe59 	bl	8002fa4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022f2:	2320      	movs	r3, #32
 80022f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	4618      	mov	r0, r3
 8002302:	f004 f9af 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <SystemClock_Config+0x100>
  {
    Error_Handler();
 800230c:	f000 fe4a 	bl	8002fa4 <Error_Handler>
  }
}
 8002310:	bf00      	nop
 8002312:	3780      	adds	r7, #128	; 0x80
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40023800 	.word	0x40023800
 800231c:	40007000 	.word	0x40007000

08002320 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002326:	463b      	mov	r3, r7
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002332:	4b21      	ldr	r3, [pc, #132]	; (80023b8 <MX_ADC1_Init+0x98>)
 8002334:	4a21      	ldr	r2, [pc, #132]	; (80023bc <MX_ADC1_Init+0x9c>)
 8002336:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <MX_ADC1_Init+0x98>)
 800233a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800233e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <MX_ADC1_Init+0x98>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002346:	4b1c      	ldr	r3, [pc, #112]	; (80023b8 <MX_ADC1_Init+0x98>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <MX_ADC1_Init+0x98>)
 800234e:	2200      	movs	r2, #0
 8002350:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002352:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <MX_ADC1_Init+0x98>)
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800235a:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <MX_ADC1_Init+0x98>)
 800235c:	2200      	movs	r2, #0
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <MX_ADC1_Init+0x98>)
 8002362:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <MX_ADC1_Init+0xa0>)
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002366:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <MX_ADC1_Init+0x98>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <MX_ADC1_Init+0x98>)
 800236e:	2201      	movs	r2, #1
 8002370:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_ADC1_Init+0x98>)
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_ADC1_Init+0x98>)
 800237c:	2201      	movs	r2, #1
 800237e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002380:	480d      	ldr	r0, [pc, #52]	; (80023b8 <MX_ADC1_Init+0x98>)
 8002382:	f001 fd49 	bl	8003e18 <HAL_ADC_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800238c:	f000 fe0a 	bl	8002fa4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002390:	2306      	movs	r3, #6
 8002392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002394:	2301      	movs	r3, #1
 8002396:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002398:	2307      	movs	r3, #7
 800239a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800239c:	463b      	mov	r3, r7
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_ADC1_Init+0x98>)
 80023a2:	f001 ff07 	bl	80041b4 <HAL_ADC_ConfigChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80023ac:	f000 fdfa 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000958 	.word	0x20000958
 80023bc:	40012000 	.word	0x40012000
 80023c0:	0f000001 	.word	0x0f000001

080023c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MX_I2C2_Init+0x74>)
 80023ca:	4a1c      	ldr	r2, [pc, #112]	; (800243c <MX_I2C2_Init+0x78>)
 80023cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_I2C2_Init+0x74>)
 80023d0:	4a1b      	ldr	r2, [pc, #108]	; (8002440 <MX_I2C2_Init+0x7c>)
 80023d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_I2C2_Init+0x74>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <MX_I2C2_Init+0x74>)
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <MX_I2C2_Init+0x74>)
 80023e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <MX_I2C2_Init+0x74>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <MX_I2C2_Init+0x74>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <MX_I2C2_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_I2C2_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <MX_I2C2_Init+0x74>)
 8002402:	f002 fc3b 	bl	8004c7c <HAL_I2C_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800240c:	f000 fdca 	bl	8002fa4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002410:	2100      	movs	r1, #0
 8002412:	4809      	ldr	r0, [pc, #36]	; (8002438 <MX_I2C2_Init+0x74>)
 8002414:	f003 fbf1 	bl	8005bfa <HAL_I2CEx_ConfigAnalogFilter>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800241e:	f000 fdc1 	bl	8002fa4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002422:	2100      	movs	r1, #0
 8002424:	4804      	ldr	r0, [pc, #16]	; (8002438 <MX_I2C2_Init+0x74>)
 8002426:	f003 fc24 	bl	8005c72 <HAL_I2CEx_ConfigDigitalFilter>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002430:	f000 fdb8 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20000904 	.word	0x20000904
 800243c:	40005800 	.word	0x40005800
 8002440:	000186a0 	.word	0x000186a0

08002444 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <MX_I2C3_Init+0x74>)
 800244a:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <MX_I2C3_Init+0x78>)
 800244c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <MX_I2C3_Init+0x74>)
 8002450:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <MX_I2C3_Init+0x7c>)
 8002452:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <MX_I2C3_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800245a:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_I2C3_Init+0x74>)
 800245c:	2200      	movs	r2, #0
 800245e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_I2C3_Init+0x74>)
 8002462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002466:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <MX_I2C3_Init+0x74>)
 800246a:	2200      	movs	r2, #0
 800246c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_I2C3_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <MX_I2C3_Init+0x74>)
 8002476:	2200      	movs	r2, #0
 8002478:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800247a:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_I2C3_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <MX_I2C3_Init+0x74>)
 8002482:	f002 fbfb 	bl	8004c7c <HAL_I2C_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800248c:	f000 fd8a 	bl	8002fa4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002490:	2100      	movs	r1, #0
 8002492:	4809      	ldr	r0, [pc, #36]	; (80024b8 <MX_I2C3_Init+0x74>)
 8002494:	f003 fbb1 	bl	8005bfa <HAL_I2CEx_ConfigAnalogFilter>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800249e:	f000 fd81 	bl	8002fa4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024a2:	2100      	movs	r1, #0
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_I2C3_Init+0x74>)
 80024a6:	f003 fbe4 	bl	8005c72 <HAL_I2CEx_ConfigDigitalFilter>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80024b0:	f000 fd78 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000550 	.word	0x20000550
 80024bc:	40005c00 	.word	0x40005c00
 80024c0:	000186a0 	.word	0x000186a0

080024c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024d8:	2300      	movs	r3, #0
 80024da:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <MX_RTC_Init+0xac>)
 80024de:	4a25      	ldr	r2, [pc, #148]	; (8002574 <MX_RTC_Init+0xb0>)
 80024e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <MX_RTC_Init+0xac>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80024e8:	4b21      	ldr	r3, [pc, #132]	; (8002570 <MX_RTC_Init+0xac>)
 80024ea:	227f      	movs	r2, #127	; 0x7f
 80024ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80024ee:	4b20      	ldr	r3, [pc, #128]	; (8002570 <MX_RTC_Init+0xac>)
 80024f0:	22ff      	movs	r2, #255	; 0xff
 80024f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <MX_RTC_Init+0xac>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <MX_RTC_Init+0xac>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <MX_RTC_Init+0xac>)
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002506:	481a      	ldr	r0, [pc, #104]	; (8002570 <MX_RTC_Init+0xac>)
 8002508:	f004 fa6a 	bl	80069e0 <HAL_RTC_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002512:	f000 fd47 	bl	8002fa4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8002516:	2310      	movs	r3, #16
 8002518:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 800251a:	2320      	movs	r3, #32
 800251c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 800251e:	2330      	movs	r3, #48	; 0x30
 8002520:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	2201      	movs	r2, #1
 800252e:	4619      	mov	r1, r3
 8002530:	480f      	ldr	r0, [pc, #60]	; (8002570 <MX_RTC_Init+0xac>)
 8002532:	f004 fae6 	bl	8006b02 <HAL_RTC_SetTime>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800253c:	f000 fd32 	bl	8002fa4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002540:	2301      	movs	r3, #1
 8002542:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8002544:	2302      	movs	r3, #2
 8002546:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8002548:	2312      	movs	r3, #18
 800254a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 800254c:	2321      	movs	r3, #33	; 0x21
 800254e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002550:	463b      	mov	r3, r7
 8002552:	2201      	movs	r2, #1
 8002554:	4619      	mov	r1, r3
 8002556:	4806      	ldr	r0, [pc, #24]	; (8002570 <MX_RTC_Init+0xac>)
 8002558:	f004 fbee 	bl	8006d38 <HAL_RTC_SetDate>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002562:	f000 fd1f 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000aa0 	.word	0x20000aa0
 8002574:	40002800 	.word	0x40002800

08002578 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800257c:	4b17      	ldr	r3, [pc, #92]	; (80025dc <MX_SPI2_Init+0x64>)
 800257e:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <MX_SPI2_Init+0x68>)
 8002580:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002582:	4b16      	ldr	r3, [pc, #88]	; (80025dc <MX_SPI2_Init+0x64>)
 8002584:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002588:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <MX_SPI2_Init+0x64>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <MX_SPI2_Init+0x64>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_SPI2_Init+0x64>)
 8002598:	2200      	movs	r2, #0
 800259a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_SPI2_Init+0x64>)
 800259e:	2200      	movs	r2, #0
 80025a0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_SPI2_Init+0x64>)
 80025a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80025aa:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_SPI2_Init+0x64>)
 80025ac:	2228      	movs	r2, #40	; 0x28
 80025ae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025b0:	4b0a      	ldr	r3, [pc, #40]	; (80025dc <MX_SPI2_Init+0x64>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_SPI2_Init+0x64>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025bc:	4b07      	ldr	r3, [pc, #28]	; (80025dc <MX_SPI2_Init+0x64>)
 80025be:	2200      	movs	r2, #0
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_SPI2_Init+0x64>)
 80025c4:	220a      	movs	r2, #10
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025c8:	4804      	ldr	r0, [pc, #16]	; (80025dc <MX_SPI2_Init+0x64>)
 80025ca:	f004 fd3b 	bl	8007044 <HAL_SPI_Init>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80025d4:	f000 fce6 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025d8:	bf00      	nop
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200005a4 	.word	0x200005a4
 80025e0:	40003800 	.word	0x40003800

080025e4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <MX_SPI4_Init+0x64>)
 80025ea:	4a18      	ldr	r2, [pc, #96]	; (800264c <MX_SPI4_Init+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <MX_SPI4_Init+0x64>)
 80025f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025f4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <MX_SPI4_Init+0x64>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <MX_SPI4_Init+0x64>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_SPI4_Init+0x64>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <MX_SPI4_Init+0x64>)
 800260a:	2200      	movs	r2, #0
 800260c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_SPI4_Init+0x64>)
 8002610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002614:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_SPI4_Init+0x64>)
 8002618:	2228      	movs	r2, #40	; 0x28
 800261a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <MX_SPI4_Init+0x64>)
 800261e:	2200      	movs	r2, #0
 8002620:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_SPI4_Init+0x64>)
 8002624:	2200      	movs	r2, #0
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <MX_SPI4_Init+0x64>)
 800262a:	2200      	movs	r2, #0
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <MX_SPI4_Init+0x64>)
 8002630:	220a      	movs	r2, #10
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002634:	4804      	ldr	r0, [pc, #16]	; (8002648 <MX_SPI4_Init+0x64>)
 8002636:	f004 fd05 	bl	8007044 <HAL_SPI_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002640:	f000 fcb0 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	200004f4 	.word	0x200004f4
 800264c:	40013400 	.word	0x40013400

08002650 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <MX_SPI5_Init+0x64>)
 8002656:	4a18      	ldr	r2, [pc, #96]	; (80026b8 <MX_SPI5_Init+0x68>)
 8002658:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <MX_SPI5_Init+0x64>)
 800265c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002660:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <MX_SPI5_Init+0x64>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002668:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <MX_SPI5_Init+0x64>)
 800266a:	2200      	movs	r2, #0
 800266c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <MX_SPI5_Init+0x64>)
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <MX_SPI5_Init+0x64>)
 8002676:	2200      	movs	r2, #0
 8002678:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <MX_SPI5_Init+0x64>)
 800267c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002680:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <MX_SPI5_Init+0x64>)
 8002684:	2200      	movs	r2, #0
 8002686:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <MX_SPI5_Init+0x64>)
 800268a:	2200      	movs	r2, #0
 800268c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <MX_SPI5_Init+0x64>)
 8002690:	2200      	movs	r2, #0
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <MX_SPI5_Init+0x64>)
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <MX_SPI5_Init+0x64>)
 800269c:	220a      	movs	r2, #10
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80026a0:	4804      	ldr	r0, [pc, #16]	; (80026b4 <MX_SPI5_Init+0x64>)
 80026a2:	f004 fccf 	bl	8007044 <HAL_SPI_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80026ac:	f000 fc7a 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200005fc 	.word	0x200005fc
 80026b8:	40015000 	.word	0x40015000

080026bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	; 0x38
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026d0:	f107 0320 	add.w	r3, r7, #32
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
 80026e8:	615a      	str	r2, [r3, #20]
 80026ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026ec:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <MX_TIM2_Init+0xe8>)
 80026ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80026f4:	4b2b      	ldr	r3, [pc, #172]	; (80027a4 <MX_TIM2_Init+0xe8>)
 80026f6:	2259      	movs	r2, #89	; 0x59
 80026f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <MX_TIM2_Init+0xe8>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <MX_TIM2_Init+0xe8>)
 8002702:	f240 128f 	movw	r2, #399	; 0x18f
 8002706:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002708:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <MX_TIM2_Init+0xe8>)
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270e:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <MX_TIM2_Init+0xe8>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002714:	4823      	ldr	r0, [pc, #140]	; (80027a4 <MX_TIM2_Init+0xe8>)
 8002716:	f005 f8b5 	bl	8007884 <HAL_TIM_Base_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002720:	f000 fc40 	bl	8002fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800272a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800272e:	4619      	mov	r1, r3
 8002730:	481c      	ldr	r0, [pc, #112]	; (80027a4 <MX_TIM2_Init+0xe8>)
 8002732:	f005 fb8f 	bl	8007e54 <HAL_TIM_ConfigClockSource>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800273c:	f000 fc32 	bl	8002fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002740:	4818      	ldr	r0, [pc, #96]	; (80027a4 <MX_TIM2_Init+0xe8>)
 8002742:	f005 f8ee 	bl	8007922 <HAL_TIM_PWM_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800274c:	f000 fc2a 	bl	8002fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002750:	2320      	movs	r3, #32
 8002752:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002758:	f107 0320 	add.w	r3, r7, #32
 800275c:	4619      	mov	r1, r3
 800275e:	4811      	ldr	r0, [pc, #68]	; (80027a4 <MX_TIM2_Init+0xe8>)
 8002760:	f005 ff74 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800276a:	f000 fc1b 	bl	8002fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276e:	2360      	movs	r3, #96	; 0x60
 8002770:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002772:	2364      	movs	r3, #100	; 0x64
 8002774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2208      	movs	r2, #8
 8002782:	4619      	mov	r1, r3
 8002784:	4807      	ldr	r0, [pc, #28]	; (80027a4 <MX_TIM2_Init+0xe8>)
 8002786:	f005 fa9f 	bl	8007cc8 <HAL_TIM_PWM_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002790:	f000 fc08 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002794:	4803      	ldr	r0, [pc, #12]	; (80027a4 <MX_TIM2_Init+0xe8>)
 8002796:	f001 f865 	bl	8003864 <HAL_TIM_MspPostInit>

}
 800279a:	bf00      	nop
 800279c:	3738      	adds	r7, #56	; 0x38
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000c58 	.word	0x20000c58

080027a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027bc:	463b      	mov	r3, r7
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <MX_TIM4_Init+0x94>)
 80027c6:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <MX_TIM4_Init+0x98>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <MX_TIM4_Init+0x94>)
 80027cc:	f242 3227 	movw	r2, #8999	; 0x2327
 80027d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <MX_TIM4_Init+0x94>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80027d8:	4b18      	ldr	r3, [pc, #96]	; (800283c <MX_TIM4_Init+0x94>)
 80027da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <MX_TIM4_Init+0x94>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <MX_TIM4_Init+0x94>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80027ec:	4813      	ldr	r0, [pc, #76]	; (800283c <MX_TIM4_Init+0x94>)
 80027ee:	f005 f849 	bl	8007884 <HAL_TIM_Base_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80027f8:	f000 fbd4 	bl	8002fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002800:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	4619      	mov	r1, r3
 8002808:	480c      	ldr	r0, [pc, #48]	; (800283c <MX_TIM4_Init+0x94>)
 800280a:	f005 fb23 	bl	8007e54 <HAL_TIM_ConfigClockSource>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002814:	f000 fbc6 	bl	8002fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002818:	2320      	movs	r3, #32
 800281a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002820:	463b      	mov	r3, r7
 8002822:	4619      	mov	r1, r3
 8002824:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_TIM4_Init+0x94>)
 8002826:	f005 ff11 	bl	800864c <HAL_TIMEx_MasterConfigSynchronization>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002830:	f000 fbb8 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002834:	bf00      	nop
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000654 	.word	0x20000654
 8002840:	40000800 	.word	0x40000800

08002844 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <MX_UART8_Init+0x4c>)
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <MX_UART8_Init+0x50>)
 800284c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <MX_UART8_Init+0x4c>)
 8002850:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002854:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002856:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <MX_UART8_Init+0x4c>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <MX_UART8_Init+0x4c>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <MX_UART8_Init+0x4c>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <MX_UART8_Init+0x4c>)
 800286a:	220c      	movs	r2, #12
 800286c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <MX_UART8_Init+0x4c>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <MX_UART8_Init+0x4c>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800287a:	4805      	ldr	r0, [pc, #20]	; (8002890 <MX_UART8_Init+0x4c>)
 800287c:	f005 ff76 	bl	800876c <HAL_UART_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8002886:	f000 fb8d 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000bcc 	.word	0x20000bcc
 8002894:	40007c00 	.word	0x40007c00

08002898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <MX_USART3_UART_Init+0x4c>)
 800289e:	4a12      	ldr	r2, [pc, #72]	; (80028e8 <MX_USART3_UART_Init+0x50>)
 80028a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80028a2:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <MX_USART3_UART_Init+0x4c>)
 80028a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <MX_USART3_UART_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <MX_USART3_UART_Init+0x4c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <MX_USART3_UART_Init+0x4c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <MX_USART3_UART_Init+0x4c>)
 80028be:	220c      	movs	r2, #12
 80028c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <MX_USART3_UART_Init+0x4c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <MX_USART3_UART_Init+0x4c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028ce:	4805      	ldr	r0, [pc, #20]	; (80028e4 <MX_USART3_UART_Init+0x4c>)
 80028d0:	f005 ff4c 	bl	800876c <HAL_UART_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80028da:	f000 fb63 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000694 	.word	0x20000694
 80028e8:	40004800 	.word	0x40004800

080028ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_USART6_UART_Init+0x4c>)
 80028f2:	4a12      	ldr	r2, [pc, #72]	; (800293c <MX_USART6_UART_Init+0x50>)
 80028f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <MX_USART6_UART_Init+0x4c>)
 80028f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_USART6_UART_Init+0x4c>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <MX_USART6_UART_Init+0x4c>)
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <MX_USART6_UART_Init+0x4c>)
 800290c:	2200      	movs	r2, #0
 800290e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002910:	4b09      	ldr	r3, [pc, #36]	; (8002938 <MX_USART6_UART_Init+0x4c>)
 8002912:	220c      	movs	r2, #12
 8002914:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <MX_USART6_UART_Init+0x4c>)
 8002918:	2200      	movs	r2, #0
 800291a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800291c:	4b06      	ldr	r3, [pc, #24]	; (8002938 <MX_USART6_UART_Init+0x4c>)
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <MX_USART6_UART_Init+0x4c>)
 8002924:	f005 ff22 	bl	800876c <HAL_UART_Init>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800292e:	f000 fb39 	bl	8002fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000c0c 	.word	0x20000c0c
 800293c:	40011400 	.word	0x40011400

08002940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08e      	sub	sp, #56	; 0x38
 8002944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]
 8002954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	4bb5      	ldr	r3, [pc, #724]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	4ab4      	ldr	r2, [pc, #720]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002960:	f043 0310 	orr.w	r3, r3, #16
 8002964:	6313      	str	r3, [r2, #48]	; 0x30
 8002966:	4bb2      	ldr	r3, [pc, #712]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	623b      	str	r3, [r7, #32]
 8002970:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	4bae      	ldr	r3, [pc, #696]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4aad      	ldr	r2, [pc, #692]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4bab      	ldr	r3, [pc, #684]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	4ba7      	ldr	r3, [pc, #668]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4aa6      	ldr	r2, [pc, #664]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002998:	f043 0320 	orr.w	r3, r3, #32
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4ba4      	ldr	r3, [pc, #656]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	4ba0      	ldr	r3, [pc, #640]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	4a9f      	ldr	r2, [pc, #636]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029b8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ba:	4b9d      	ldr	r3, [pc, #628]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	4b99      	ldr	r3, [pc, #612]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a98      	ldr	r2, [pc, #608]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b96      	ldr	r3, [pc, #600]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b92      	ldr	r3, [pc, #584]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a91      	ldr	r2, [pc, #580]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b8f      	ldr	r3, [pc, #572]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	4b8b      	ldr	r3, [pc, #556]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4a8a      	ldr	r2, [pc, #552]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0e:	4b88      	ldr	r3, [pc, #544]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
 8002a1e:	4b84      	ldr	r3, [pc, #528]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a83      	ldr	r2, [pc, #524]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002a24:	f043 0308 	orr.w	r3, r3, #8
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b81      	ldr	r3, [pc, #516]	; (8002c30 <MX_GPIO_Init+0x2f0>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 8002a36:	2200      	movs	r2, #0
 8002a38:	f248 4184 	movw	r1, #33924	; 0x8484
 8002a3c:	487d      	ldr	r0, [pc, #500]	; (8002c34 <MX_GPIO_Init+0x2f4>)
 8002a3e:	f002 f8df 	bl	8004c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 8002a48:	487b      	ldr	r0, [pc, #492]	; (8002c38 <MX_GPIO_Init+0x2f8>)
 8002a4a:	f002 f8d9 	bl	8004c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002a54:	4879      	ldr	r0, [pc, #484]	; (8002c3c <MX_GPIO_Init+0x2fc>)
 8002a56:	f002 f8d3 	bl	8004c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_RESET);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2108      	movs	r1, #8
 8002a5e:	4878      	ldr	r0, [pc, #480]	; (8002c40 <MX_GPIO_Init+0x300>)
 8002a60:	f002 f8ce 	bl	8004c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002a64:	2200      	movs	r2, #0
 8002a66:	f645 213e 	movw	r1, #23102	; 0x5a3e
 8002a6a:	4876      	ldr	r0, [pc, #472]	; (8002c44 <MX_GPIO_Init+0x304>)
 8002a6c:	f002 f8c8 	bl	8004c00 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
                          |Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_NSS_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002a70:	2200      	movs	r2, #0
 8002a72:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8002a76:	4874      	ldr	r0, [pc, #464]	; (8002c48 <MX_GPIO_Init+0x308>)
 8002a78:	f002 f8c2 	bl	8004c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8002a82:	4872      	ldr	r0, [pc, #456]	; (8002c4c <MX_GPIO_Init+0x30c>)
 8002a84:	f002 f8bc 	bl	8004c00 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin
                          |VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin TH_CS_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin;
 8002a88:	f248 4384 	movw	r3, #33924	; 0x8484
 8002a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4864      	ldr	r0, [pc, #400]	; (8002c34 <MX_GPIO_Init+0x2f4>)
 8002aa2:	f001 fee9 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002abc:	4619      	mov	r1, r3
 8002abe:	485e      	ldr	r0, [pc, #376]	; (8002c38 <MX_GPIO_Init+0x2f8>)
 8002ac0:	f001 feda 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac8:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <MX_GPIO_Init+0x310>)
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4859      	ldr	r0, [pc, #356]	; (8002c3c <MX_GPIO_Init+0x2fc>)
 8002ad8:	f001 fece 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin;
 8002adc:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002af2:	4619      	mov	r1, r3
 8002af4:	4851      	ldr	r0, [pc, #324]	; (8002c3c <MX_GPIO_Init+0x2fc>)
 8002af6:	f001 febf 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDF_Pin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 8002afa:	2308      	movs	r3, #8
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002afe:	2301      	movs	r3, #1
 8002b00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b02:	2300      	movs	r3, #0
 8002b04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b06:	2300      	movs	r3, #0
 8002b08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 8002b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0e:	4619      	mov	r1, r3
 8002b10:	484b      	ldr	r0, [pc, #300]	; (8002c40 <MX_GPIO_Init+0x300>)
 8002b12:	f001 feb1 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002b16:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4844      	ldr	r0, [pc, #272]	; (8002c3c <MX_GPIO_Init+0x2fc>)
 8002b2c:	f001 fea4 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8002b30:	2302      	movs	r3, #2
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b40:	4619      	mov	r1, r3
 8002b42:	4841      	ldr	r0, [pc, #260]	; (8002c48 <MX_GPIO_Init+0x308>)
 8002b44:	f001 fe98 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 8002b48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 8002b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4836      	ldr	r0, [pc, #216]	; (8002c38 <MX_GPIO_Init+0x2f8>)
 8002b5e:	f001 fe8b 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8002b62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2300      	movs	r3, #0
 8002b72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b78:	4619      	mov	r1, r3
 8002b7a:	482f      	ldr	r0, [pc, #188]	; (8002c38 <MX_GPIO_Init+0x2f8>)
 8002b7c:	f001 fe7c 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 8002b80:	f242 4301 	movw	r3, #9217	; 0x2401
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b92:	4619      	mov	r1, r3
 8002b94:	482b      	ldr	r0, [pc, #172]	; (8002c44 <MX_GPIO_Init+0x304>)
 8002b96:	f001 fe6f 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin VR_CTRL_PWR_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin
                           Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002b9a:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
                          |Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4824      	ldr	r0, [pc, #144]	; (8002c44 <MX_GPIO_Init+0x304>)
 8002bb4:	f001 fe60 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : Payload_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = Payload_EN_Pin|IN_XTend_Continuity_Pin;
 8002bb8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4819      	ldr	r0, [pc, #100]	; (8002c34 <MX_GPIO_Init+0x2f4>)
 8002bce:	f001 fe53 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_NSS_Pin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 8002bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 8002be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be8:	4619      	mov	r1, r3
 8002bea:	4817      	ldr	r0, [pc, #92]	; (8002c48 <MX_GPIO_Init+0x308>)
 8002bec:	f001 fe44 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin FLASH_IO3_Pin FLASH_WP_Pin FLASH_CS_Pin
                           VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002bf0:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin
                          |VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c06:	4619      	mov	r1, r3
 8002c08:	4810      	ldr	r0, [pc, #64]	; (8002c4c <MX_GPIO_Init+0x30c>)
 8002c0a:	f001 fe35 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c20:	4619      	mov	r1, r3
 8002c22:	480a      	ldr	r0, [pc, #40]	; (8002c4c <MX_GPIO_Init+0x30c>)
 8002c24:	f001 fe28 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8002c28:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002c2c:	e012      	b.n	8002c54 <MX_GPIO_Init+0x314>
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40021400 	.word	0x40021400
 8002c3c:	40020800 	.word	0x40020800
 8002c40:	40020000 	.word	0x40020000
 8002c44:	40021800 	.word	0x40021800
 8002c48:	40020400 	.word	0x40020400
 8002c4c:	40020c00 	.word	0x40020c00
 8002c50:	10110000 	.word	0x10110000
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <MX_GPIO_Init+0x360>)
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c62:	4619      	mov	r1, r3
 8002c64:	480f      	ldr	r0, [pc, #60]	; (8002ca4 <MX_GPIO_Init+0x364>)
 8002c66:	f001 fe07 	bl	8004878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c70:	2301      	movs	r3, #1
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	4619      	mov	r1, r3
 8002c82:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <MX_GPIO_Init+0x368>)
 8002c84:	f001 fdf8 	bl	8004878 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	2006      	movs	r0, #6
 8002c8e:	f001 fd9a 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c92:	2006      	movs	r0, #6
 8002c94:	f001 fdb3 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 8002c98:	bf00      	nop
 8002c9a:	3738      	adds	r7, #56	; 0x38
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	10110000 	.word	0x10110000
 8002ca4:	40021800 	.word	0x40021800
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	00000000 	.word	0x00000000

08002cb0 <getAltitude>:
#ifdef DEBUG
	HAL_UART_Transmit(&huart8, msg_buffer_av, strlen(msg_buffer_av), HAL_MAX_DELAY);
#endif
}

float getAltitude() {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
	get_pressure(dev_ctx_lps, &pressure_hPa);
 8002cb6:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <getAltitude+0x90>)
 8002cb8:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <getAltitude+0x94>)
 8002cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cbc:	f7fe fb66 	bl	800138c <get_pressure>
	uint32_t altitude = 145442.1609 * (1.0 - pow(pressure_hPa/local_pressure, 0.190266436));
 8002cc0:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <getAltitude+0x94>)
 8002cc2:	ed93 7a00 	vldr	s14, [r3]
 8002cc6:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <getAltitude+0x98>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002cd0:	ee16 0a90 	vmov	r0, s13
 8002cd4:	f7fd fc48 	bl	8000568 <__aeabi_f2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8002d30 <getAltitude+0x80>
 8002ce0:	ec43 2b10 	vmov	d0, r2, r3
 8002ce4:	f00e fb98 	bl	8011418 <pow>
 8002ce8:	ec53 2b10 	vmov	r2, r3, d0
 8002cec:	f04f 0000 	mov.w	r0, #0
 8002cf0:	4916      	ldr	r1, [pc, #88]	; (8002d4c <getAltitude+0x9c>)
 8002cf2:	f7fd fad9 	bl	80002a8 <__aeabi_dsub>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	a30e      	add	r3, pc, #56	; (adr r3, 8002d38 <getAltitude+0x88>)
 8002d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d04:	f7fd fc88 	bl	8000618 <__aeabi_dmul>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	f7fd ff5a 	bl	8000bc8 <__aeabi_d2uiz>
 8002d14:	4603      	mov	r3, r0
 8002d16:	607b      	str	r3, [r7, #4]
	return altitude;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8002d22:	eeb0 0a67 	vmov.f32	s0, s15
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	f3af 8000 	nop.w
 8002d30:	8c12bfc3 	.word	0x8c12bfc3
 8002d34:	3fc85aa6 	.word	0x3fc85aa6
 8002d38:	4985f06f 	.word	0x4985f06f
 8002d3c:	4101c111 	.word	0x4101c111
 8002d40:	20000ca4 	.word	0x20000ca4
 8002d44:	20000254 	.word	0x20000254
 8002d48:	2000025c 	.word	0x2000025c
 8002d4c:	3ff00000 	.word	0x3ff00000

08002d50 <HAL_TIM_PeriodElapsedCallback>:

// timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a45      	ldr	r2, [pc, #276]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	f040 8083 	bne.w	8002e6a <HAL_TIM_PeriodElapsedCallback+0x11a>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002d64:	2201      	movs	r2, #1
 8002d66:	2102      	movs	r1, #2
 8002d68:	4843      	ldr	r0, [pc, #268]	; (8002e78 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002d6a:	f001 ff49 	bl	8004c00 <HAL_GPIO_WritePin>
		switch (curr_task)
 8002d6e:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3b01      	subs	r3, #1
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d866      	bhi.n	8002e48 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002da5 	.word	0x08002da5
 8002d84:	08002dbb 	.word	0x08002dbb
 8002d88:	08002dd1 	.word	0x08002dd1
 8002d8c:	08002de7 	.word	0x08002de7
 8002d90:	08002df5 	.word	0x08002df5
 8002d94:	08002e51 	.word	0x08002e51
 8002d98:	08002e51 	.word	0x08002e51
 8002d9c:	08002e51 	.word	0x08002e51
 8002da0:	08002e23 	.word	0x08002e23
		{
			case 1:
				// lsm6dsl data
				get_acceleration(dev_ctx_lsm, acceleration_mg);
 8002da4:	4a36      	ldr	r2, [pc, #216]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002da6:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8002da8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002daa:	f7fe fa0d 	bl	80011c8 <get_acceleration>
				get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8002dae:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8002db0:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002db2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002db4:	f7fe fa4e 	bl	8001254 <get_angvelocity>
				break;
 8002db8:	e04b      	b.n	8002e52 <HAL_TIM_PeriodElapsedCallback+0x102>

			case 2:
				// lps22hh data
				get_pressure(dev_ctx_lps, &pressure_hPa);
 8002dba:	4a34      	ldr	r2, [pc, #208]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002dbc:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002dbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dc0:	f7fe fae4 	bl	800138c <get_pressure>
				get_temperature(dev_ctx_lps, &temperature_degC);
 8002dc4:	4a31      	ldr	r2, [pc, #196]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002dc6:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002dc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002dca:	f7fe fb0b 	bl	80013e4 <get_temperature>
				break;
 8002dce:	e040      	b.n	8002e52 <HAL_TIM_PeriodElapsedCallback+0x102>

			case 3:
				// rtc data
				HAL_RTC_GetTime(&hrtc, &stimeget, RTC_FORMAT_BIN);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4931      	ldr	r1, [pc, #196]	; (8002e98 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002dd4:	4831      	ldr	r0, [pc, #196]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002dd6:	f003 ff51 	bl	8006c7c <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &sdateget, RTC_FORMAT_BIN); // have to call GetDate for the time to be correct
 8002dda:	2200      	movs	r2, #0
 8002ddc:	4930      	ldr	r1, [pc, #192]	; (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002dde:	482f      	ldr	r0, [pc, #188]	; (8002e9c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002de0:	f004 f851 	bl	8006e86 <HAL_RTC_GetDate>
				break;
 8002de4:	e035      	b.n	8002e52 <HAL_TIM_PeriodElapsedCallback+0x102>

			case 4:
				// continuity on pyro channels (one hot encoded)
				continuity = get_continuity();
 8002de6:	f000 f871 	bl	8002ecc <get_continuity>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b2d      	ldr	r3, [pc, #180]	; (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002df0:	701a      	strb	r2, [r3, #0]
				break;
 8002df2:	e02e      	b.n	8002e52 <HAL_TIM_PeriodElapsedCallback+0x102>

			case 5:
				// propulsion data
				tank_temperature = Max31855_Read_Temp();
 8002df4:	f7fe f90a 	bl	800100c <Max31855_Read_Temp>
 8002df8:	eef0 7a40 	vmov.f32	s15, s0
 8002dfc:	4b2a      	ldr	r3, [pc, #168]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002dfe:	edc3 7a00 	vstr	s15, [r3]
				tank_pressure = prop_poll_pressure_transducer();
 8002e02:	f000 f89d 	bl	8002f40 <prop_poll_pressure_transducer>
 8002e06:	eef0 7a40 	vmov.f32	s15, s0
 8002e0a:	4b28      	ldr	r3, [pc, #160]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002e0c:	edc3 7a00 	vstr	s15, [r3]
				valve_state = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port, IN_Prop_ActuatedVent_Feedback_Pin);
 8002e10:	2102      	movs	r1, #2
 8002e12:	4827      	ldr	r0, [pc, #156]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002e14:	f001 fedc 	bl	8004bd0 <HAL_GPIO_ReadPin>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002e1e:	701a      	strb	r2, [r3, #0]
				break;
 8002e20:	e017      	b.n	8002e52 <HAL_TIM_PeriodElapsedCallback+0x102>
//				memset(msg_buffer_pr, 0, 50);
				break;

			case 9:
				// save to sd
				fres = sd_open_file(filename);
 8002e22:	4825      	ldr	r0, [pc, #148]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002e24:	f000 f962 	bl	80030ec <sd_open_file>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002e2e:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, msg_buffer_av);
 8002e30:	4923      	ldr	r1, [pc, #140]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002e32:	4824      	ldr	r0, [pc, #144]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002e34:	f000 f972 	bl	800311c <sd_write>
				sd_write(&fil, msg_buffer_pr);
 8002e38:	4923      	ldr	r1, [pc, #140]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002e3a:	4822      	ldr	r0, [pc, #136]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002e3c:	f000 f96e 	bl	800311c <sd_write>
				f_close(&fil);
 8002e40:	4820      	ldr	r0, [pc, #128]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002e42:	f009 fae2 	bl	800c40a <f_close>

				break;
 8002e46:	e004      	b.n	8002e52 <HAL_TIM_PeriodElapsedCallback+0x102>
////				 radio send avionics
//				HAL_UART_Transmit(&huart3, msg_buffer_pr, strlen((char *)msg_buffer_pr), HAL_MAX_DELAY);
//				break;

			default:
				curr_task = 0;
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
 8002e4e:	e000      	b.n	8002e52 <HAL_TIM_PeriodElapsedCallback+0x102>
				break;
 8002e50:	bf00      	nop
		}
		curr_task++;
 8002e52:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	3301      	adds	r3, #1
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8002e5e:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8002e60:	2200      	movs	r2, #0
 8002e62:	2102      	movs	r1, #2
 8002e64:	4804      	ldr	r0, [pc, #16]	; (8002e78 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8002e66:	f001 fecb 	bl	8004c00 <HAL_GPIO_WritePin>

//		W25qxx_WriteBlock(msg_buffer, page_address, page_offset, strlen((const char *)msg_buffer));
//		flash_write_address += strlen((const char *)msg_buffer);

	}
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40020800 	.word	0x40020800
 8002e7c:	2000038d 	.word	0x2000038d
 8002e80:	20000c98 	.word	0x20000c98
 8002e84:	2000023c 	.word	0x2000023c
 8002e88:	20000248 	.word	0x20000248
 8002e8c:	20000ca4 	.word	0x20000ca4
 8002e90:	20000254 	.word	0x20000254
 8002e94:	20000258 	.word	0x20000258
 8002e98:	2000026c 	.word	0x2000026c
 8002e9c:	20000aa0 	.word	0x20000aa0
 8002ea0:	20000280 	.word	0x20000280
 8002ea4:	2000023a 	.word	0x2000023a
 8002ea8:	20000260 	.word	0x20000260
 8002eac:	20000264 	.word	0x20000264
 8002eb0:	40020400 	.word	0x40020400
 8002eb4:	20000268 	.word	0x20000268
 8002eb8:	20000380 	.word	0x20000380
 8002ebc:	20000cb0 	.word	0x20000cb0
 8002ec0:	20000284 	.word	0x20000284
 8002ec4:	20000cb4 	.word	0x20000cb4
 8002ec8:	2000034c 	.word	0x2000034c

08002ecc <get_continuity>:
	return 0;

}


uint8_t get_continuity() {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0

	// read pins
	GPIO_PinState drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 8002ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ed6:	4817      	ldr	r0, [pc, #92]	; (8002f34 <get_continuity+0x68>)
 8002ed8:	f001 fe7a 	bl	8004bd0 <HAL_GPIO_ReadPin>
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 8002ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ee4:	4813      	ldr	r0, [pc, #76]	; (8002f34 <get_continuity+0x68>)
 8002ee6:	f001 fe73 	bl	8004bd0 <HAL_GPIO_ReadPin>
 8002eea:	4603      	mov	r3, r0
 8002eec:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 8002eee:	2101      	movs	r1, #1
 8002ef0:	4810      	ldr	r0, [pc, #64]	; (8002f34 <get_continuity+0x68>)
 8002ef2:	f001 fe6d 	bl	8004bd0 <HAL_GPIO_ReadPin>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	717b      	strb	r3, [r7, #5]
	GPIO_PinState prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 8002efa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002efe:	480e      	ldr	r0, [pc, #56]	; (8002f38 <get_continuity+0x6c>)
 8002f00:	f001 fe66 	bl	8004bd0 <HAL_GPIO_ReadPin>
 8002f04:	4603      	mov	r3, r0
 8002f06:	713b      	strb	r3, [r7, #4]

	// assign one-hot encoded result (apparently you can multiply enums?)
	uint8_t continuity = (drogue) + (main * 2) + (prop_1 * 4) + (prop_2 * 8);
 8002f08:	793b      	ldrb	r3, [r7, #4]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	797b      	ldrb	r3, [r7, #5]
 8002f10:	4413      	add	r3, r2
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	79bb      	ldrb	r3, [r7, #6]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	4413      	add	r3, r2
 8002f26:	70fb      	strb	r3, [r7, #3]

	return continuity;
 8002f28:	78fb      	ldrb	r3, [r7, #3]

}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40021800 	.word	0x40021800
 8002f38:	40021400 	.word	0x40021400
 8002f3c:	00000000 	.word	0x00000000

08002f40 <prop_poll_pressure_transducer>:

float prop_poll_pressure_transducer(void) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0

	// reading adc
	HAL_ADC_Start(&hadc1);
 8002f46:	4816      	ldr	r0, [pc, #88]	; (8002fa0 <prop_poll_pressure_transducer+0x60>)
 8002f48:	f000 ffaa 	bl	8003ea0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8002f4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002f50:	4813      	ldr	r0, [pc, #76]	; (8002fa0 <prop_poll_pressure_transducer+0x60>)
 8002f52:	f001 f89e 	bl	8004092 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(&hadc1);
 8002f56:	4812      	ldr	r0, [pc, #72]	; (8002fa0 <prop_poll_pressure_transducer+0x60>)
 8002f58:	f001 f91f 	bl	800419a <HAL_ADC_GetValue>
 8002f5c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8002f5e:	4810      	ldr	r0, [pc, #64]	; (8002fa0 <prop_poll_pressure_transducer+0x60>)
 8002f60:	f001 f864 	bl	800402c <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0); // assuming 12 bits
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7fd fadd 	bl	8000524 <__aeabi_ui2d>
 8002f6a:	a30b      	add	r3, pc, #44	; (adr r3, 8002f98 <prop_poll_pressure_transducer+0x58>)
 8002f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f70:	f7fd fc7c 	bl	800086c <__aeabi_ddiv>
 8002f74:	4602      	mov	r2, r0
 8002f76:	460b      	mov	r3, r1
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f7fd fe44 	bl	8000c08 <__aeabi_d2f>
 8002f80:	4603      	mov	r3, r0
 8002f82:	603b      	str	r3, [r7, #0]

	// convert using transfer function
	// TODO

	return voltage;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	ee07 3a90 	vmov	s15, r3
}
 8002f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	f3af 8000 	nop.w
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	40affe00 	.word	0x40affe00
 8002fa0:	20000958 	.word	0x20000958

08002fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002fa8:	2201      	movs	r2, #1
 8002faa:	2104      	movs	r1, #4
 8002fac:	4803      	ldr	r0, [pc, #12]	; (8002fbc <Error_Handler+0x18>)
 8002fae:	f001 fe27 	bl	8004c00 <HAL_GPIO_WritePin>
	buzz_failure();
 8002fb2:	f7fe ff43 	bl	8001e3c <buzz_failure>
	__BKPT();
 8002fb6:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40020800 	.word	0x40020800

08002fc0 <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002fc0:	b40f      	push	{r0, r1, r2, r3}
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd6:	4805      	ldr	r0, [pc, #20]	; (8002fec <myprintf+0x2c>)
 8002fd8:	f00b fc66 	bl	800e8a8 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe6:	b004      	add	sp, #16
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000394 	.word	0x20000394

08002ff0 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b08a      	sub	sp, #40	; 0x28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	4932      	ldr	r1, [pc, #200]	; (80030c8 <sd_init_dynamic_filename+0xd8>)
 8003000:	4832      	ldr	r0, [pc, #200]	; (80030cc <sd_init_dynamic_filename+0xdc>)
 8003002:	f008 fe0b 	bl	800bc1c <f_mount>
 8003006:	4603      	mov	r3, r0
 8003008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 800300c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8003014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003018:	4619      	mov	r1, r3
 800301a:	482d      	ldr	r0, [pc, #180]	; (80030d0 <sd_init_dynamic_filename+0xe0>)
 800301c:	f7ff ffd0 	bl	8002fc0 <myprintf>
		return fres;
 8003020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003024:	e04b      	b.n	80030be <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 800302a:	f107 0320 	add.w	r3, r7, #32
 800302e:	461a      	mov	r2, r3
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	4825      	ldr	r0, [pc, #148]	; (80030c8 <sd_init_dynamic_filename+0xd8>)
 8003034:	f000 f89c 	bl	8003170 <scan_files>
 8003038:	4603      	mov	r3, r0
 800303a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	f107 0310 	add.w	r3, r7, #16
 8003046:	4923      	ldr	r1, [pc, #140]	; (80030d4 <sd_init_dynamic_filename+0xe4>)
 8003048:	4618      	mov	r0, r3
 800304a:	f00a fcc5 	bl	800d9d8 <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 800304e:	f107 0310 	add.w	r3, r7, #16
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f00a fd22 	bl	800da9e <strcpy>
 800305a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800305c:	f107 0310 	add.w	r3, r7, #16
 8003060:	221a      	movs	r2, #26
 8003062:	4619      	mov	r1, r3
 8003064:	481c      	ldr	r0, [pc, #112]	; (80030d8 <sd_init_dynamic_filename+0xe8>)
 8003066:	f008 fe1f 	bl	800bca8 <f_open>
 800306a:	4603      	mov	r3, r0
 800306c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8003070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003074:	2b00      	cmp	r3, #0
 8003076:	d11a      	bne.n	80030ae <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8003078:	4818      	ldr	r0, [pc, #96]	; (80030dc <sd_init_dynamic_filename+0xec>)
 800307a:	f7ff ffa1 	bl	8002fc0 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 800307e:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <sd_init_dynamic_filename+0xe8>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	4619      	mov	r1, r3
 8003084:	4814      	ldr	r0, [pc, #80]	; (80030d8 <sd_init_dynamic_filename+0xe8>)
 8003086:	f009 f9ea 	bl	800c45e <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 800308a:	4915      	ldr	r1, [pc, #84]	; (80030e0 <sd_init_dynamic_filename+0xf0>)
 800308c:	4815      	ldr	r0, [pc, #84]	; (80030e4 <sd_init_dynamic_filename+0xf4>)
 800308e:	f00a fca3 	bl	800d9d8 <siprintf>
	sd_write(&fil, msg_buffer);
 8003092:	4914      	ldr	r1, [pc, #80]	; (80030e4 <sd_init_dynamic_filename+0xf4>)
 8003094:	4810      	ldr	r0, [pc, #64]	; (80030d8 <sd_init_dynamic_filename+0xe8>)
 8003096:	f000 f841 	bl	800311c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	480e      	ldr	r0, [pc, #56]	; (80030d8 <sd_init_dynamic_filename+0xe8>)
 800309e:	f000 f83d 	bl	800311c <sd_write>
	f_close(&fil);
 80030a2:	480d      	ldr	r0, [pc, #52]	; (80030d8 <sd_init_dynamic_filename+0xe8>)
 80030a4:	f009 f9b1 	bl	800c40a <f_close>

	return fres;
 80030a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ac:	e007      	b.n	80030be <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 80030ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030b2:	4619      	mov	r1, r3
 80030b4:	480c      	ldr	r0, [pc, #48]	; (80030e8 <sd_init_dynamic_filename+0xf8>)
 80030b6:	f7ff ff83 	bl	8002fc0 <myprintf>
		return fres;
 80030ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	08012468 	.word	0x08012468
 80030cc:	200006d4 	.word	0x200006d4
 80030d0:	0801246c 	.word	0x0801246c
 80030d4:	080124e8 	.word	0x080124e8
 80030d8:	20000cb4 	.word	0x20000cb4
 80030dc:	08012484 	.word	0x08012484
 80030e0:	080124c8 	.word	0x080124c8
 80030e4:	20000ee4 	.word	0x20000ee4
 80030e8:	080124b4 	.word	0x080124b4

080030ec <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 80030f4:	2212      	movs	r2, #18
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4807      	ldr	r0, [pc, #28]	; (8003118 <sd_open_file+0x2c>)
 80030fa:	f008 fdd5 	bl	800bca8 <f_open>
 80030fe:	4603      	mov	r3, r0
 8003100:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003102:	4b05      	ldr	r3, [pc, #20]	; (8003118 <sd_open_file+0x2c>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	4619      	mov	r1, r3
 8003108:	4803      	ldr	r0, [pc, #12]	; (8003118 <sd_open_file+0x2c>)
 800310a:	f009 f9a8 	bl	800c45e <f_lseek>

	return fres;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20000cb4 	.word	0x20000cb4

0800311c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003126:	6838      	ldr	r0, [r7, #0]
 8003128:	f7fd f862 	bl	80001f0 <strlen>
 800312c:	4602      	mov	r2, r0
 800312e:	f107 0308 	add.w	r3, r7, #8
 8003132:	6839      	ldr	r1, [r7, #0]
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f008 ff75 	bl	800c024 <f_write>
 800313a:	4603      	mov	r3, r0
 800313c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800313e:	7bfb      	ldrb	r3, [r7, #15]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d107      	bne.n	8003154 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4619      	mov	r1, r3
 8003148:	4807      	ldr	r0, [pc, #28]	; (8003168 <sd_write+0x4c>)
 800314a:	f7ff ff39 	bl	8002fc0 <myprintf>
		return bytesWrote;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	b25b      	sxtb	r3, r3
 8003152:	e004      	b.n	800315e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <sd_write+0x50>)
 8003156:	f7ff ff33 	bl	8002fc0 <myprintf>
		return -1;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	080124f4 	.word	0x080124f4
 800316c:	08012518 	.word	0x08012518

08003170 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8003170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003172:	b099      	sub	sp, #100	; 0x64
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	466b      	mov	r3, sp
 800317e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8003180:	68b8      	ldr	r0, [r7, #8]
 8003182:	f7fd f835 	bl	80001f0 <strlen>
 8003186:	4603      	mov	r3, r0
 8003188:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 800318c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8003190:	4623      	mov	r3, r4
 8003192:	3b01      	subs	r3, #1
 8003194:	65bb      	str	r3, [r7, #88]	; 0x58
 8003196:	b2e0      	uxtb	r0, r4
 8003198:	f04f 0100 	mov.w	r1, #0
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	00cb      	lsls	r3, r1, #3
 80031a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80031aa:	00c2      	lsls	r2, r0, #3
 80031ac:	b2e0      	uxtb	r0, r4
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	00cb      	lsls	r3, r1, #3
 80031bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80031c0:	00c2      	lsls	r2, r0, #3
 80031c2:	4623      	mov	r3, r4
 80031c4:	3307      	adds	r3, #7
 80031c6:	08db      	lsrs	r3, r3, #3
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	ebad 0d03 	sub.w	sp, sp, r3
 80031ce:	466b      	mov	r3, sp
 80031d0:	3300      	adds	r3, #0
 80031d2:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 80031d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d6:	4619      	mov	r1, r3
 80031d8:	68b8      	ldr	r0, [r7, #8]
 80031da:	f000 f8ff 	bl	80033dc <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 80031e4:	2300      	movs	r3, #0
 80031e6:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 80031e8:	f107 0318 	add.w	r3, r7, #24
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f009 fb3e 	bl	800c870 <f_opendir>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 80031fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d16c      	bne.n	80032dc <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003202:	f107 0318 	add.w	r3, r7, #24
 8003206:	4939      	ldr	r1, [pc, #228]	; (80032ec <scan_files+0x17c>)
 8003208:	4618      	mov	r0, r3
 800320a:	f009 fbca 	bl	800c9a2 <f_readdir>
 800320e:	4603      	mov	r3, r0
 8003210:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003214:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003218:	2b00      	cmp	r3, #0
 800321a:	d15a      	bne.n	80032d2 <scan_files+0x162>
 800321c:	4b33      	ldr	r3, [pc, #204]	; (80032ec <scan_files+0x17c>)
 800321e:	7a5b      	ldrb	r3, [r3, #9]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d056      	beq.n	80032d2 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003224:	4b31      	ldr	r3, [pc, #196]	; (80032ec <scan_files+0x17c>)
 8003226:	7a1b      	ldrb	r3, [r3, #8]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d14e      	bne.n	80032ce <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8003230:	466b      	mov	r3, sp
 8003232:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003234:	482e      	ldr	r0, [pc, #184]	; (80032f0 <scan_files+0x180>)
 8003236:	f7fc ffdb 	bl	80001f0 <strlen>
 800323a:	4604      	mov	r4, r0
 800323c:	4623      	mov	r3, r4
 800323e:	3b01      	subs	r3, #1
 8003240:	653b      	str	r3, [r7, #80]	; 0x50
 8003242:	4620      	mov	r0, r4
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	00cb      	lsls	r3, r1, #3
 8003252:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003256:	00c2      	lsls	r2, r0, #3
 8003258:	4620      	mov	r0, r4
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	00cb      	lsls	r3, r1, #3
 8003268:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800326c:	00c2      	lsls	r2, r0, #3
 800326e:	1de3      	adds	r3, r4, #7
 8003270:	08db      	lsrs	r3, r3, #3
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	ebad 0d03 	sub.w	sp, sp, r3
 8003278:	466b      	mov	r3, sp
 800327a:	3300      	adds	r3, #0
 800327c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800327e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003280:	4619      	mov	r1, r3
 8003282:	481b      	ldr	r0, [pc, #108]	; (80032f0 <scan_files+0x180>)
 8003284:	f000 f8aa 	bl	80033dc <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8003288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800328e:	4619      	mov	r1, r3
 8003290:	4817      	ldr	r0, [pc, #92]	; (80032f0 <scan_files+0x180>)
 8003292:	f00a fc0c 	bl	800daae <strncmp>
 8003296:	4603      	mov	r3, r0
 8003298:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 800329c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d112      	bne.n	80032ca <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80032a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a6:	f107 0214 	add.w	r2, r7, #20
 80032aa:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f820 	bl	80032f4 <extract_filename_suffix>
 80032b4:	4603      	mov	r3, r0
 80032b6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d202      	bcs.n	80032ca <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	46b5      	mov	sp, r6
 80032cc:	e799      	b.n	8003202 <scan_files+0x92>
            	continue; // don't enter directory
 80032ce:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80032d0:	e797      	b.n	8003202 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 80032d2:	f107 0318 	add.w	r3, r7, #24
 80032d6:	4618      	mov	r0, r3
 80032d8:	f009 fb3d 	bl	800c956 <f_closedir>
    }

    return res;
 80032dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80032e0:	46ad      	mov	sp, r5
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3764      	adds	r7, #100	; 0x64
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000494 	.word	0x20000494
 80032f0:	2000049d 	.word	0x2000049d

080032f4 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 80032f4:	b5b0      	push	{r4, r5, r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	460b      	mov	r3, r1
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	72fb      	strb	r3, [r7, #11]
 8003302:	466b      	mov	r3, sp
 8003304:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f7fc ff72 	bl	80001f0 <strlen>
 800330c:	4603      	mov	r3, r0
 800330e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8003310:	2308      	movs	r3, #8
 8003312:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003314:	7f7c      	ldrb	r4, [r7, #29]
 8003316:	4623      	mov	r3, r4
 8003318:	3b01      	subs	r3, #1
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	b2e0      	uxtb	r0, r4
 800331e:	f04f 0100 	mov.w	r1, #0
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	00cb      	lsls	r3, r1, #3
 800332c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003330:	00c2      	lsls	r2, r0, #3
 8003332:	b2e0      	uxtb	r0, r4
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	00cb      	lsls	r3, r1, #3
 8003342:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003346:	00c2      	lsls	r2, r0, #3
 8003348:	4623      	mov	r3, r4
 800334a:	3307      	adds	r3, #7
 800334c:	08db      	lsrs	r3, r3, #3
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	ebad 0d03 	sub.w	sp, sp, r3
 8003354:	466b      	mov	r3, sp
 8003356:	3300      	adds	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800335a:	2300      	movs	r3, #0
 800335c:	77fb      	strb	r3, [r7, #31]
 800335e:	e014      	b.n	800338a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8003360:	7afb      	ldrb	r3, [r7, #11]
 8003362:	1e5a      	subs	r2, r3, #1
 8003364:	7ffb      	ldrb	r3, [r7, #31]
 8003366:	441a      	add	r2, r3
 8003368:	7fbb      	ldrb	r3, [r7, #30]
 800336a:	3b01      	subs	r3, #1
 800336c:	429a      	cmp	r2, r3
 800336e:	da11      	bge.n	8003394 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8003370:	7afa      	ldrb	r2, [r7, #11]
 8003372:	7ffb      	ldrb	r3, [r7, #31]
 8003374:	4413      	add	r3, r2
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	441a      	add	r2, r3
 800337c:	7ffb      	ldrb	r3, [r7, #31]
 800337e:	7811      	ldrb	r1, [r2, #0]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8003384:	7ffb      	ldrb	r3, [r7, #31]
 8003386:	3301      	adds	r3, #1
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	7ffa      	ldrb	r2, [r7, #31]
 800338c:	7f7b      	ldrb	r3, [r7, #29]
 800338e:	429a      	cmp	r2, r3
 8003390:	d3e6      	bcc.n	8003360 <extract_filename_suffix+0x6c>
 8003392:	e000      	b.n	8003396 <extract_filename_suffix+0xa2>
		}
		else break;
 8003394:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f107 0110 	add.w	r1, r7, #16
 800339c:	220a      	movs	r2, #10
 800339e:	4618      	mov	r0, r3
 80033a0:	f00b fa4c 	bl	800e83c <strtol>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d00a      	beq.n	80033ca <extract_filename_suffix+0xd6>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033bc:	d005      	beq.n	80033ca <extract_filename_suffix+0xd6>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <extract_filename_suffix+0xda>
	{
		return 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <extract_filename_suffix+0xdc>
	}

	return 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	46ad      	mov	sp, r5
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080033dc <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	e019      	b.n	8003420 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	73bb      	strb	r3, [r7, #14]
 80033f6:	7bbb      	ldrb	r3, [r7, #14]
 80033f8:	3301      	adds	r3, #1
 80033fa:	4a0f      	ldr	r2, [pc, #60]	; (8003438 <str2upper+0x5c>)
 80033fc:	4413      	add	r3, r2
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	f003 0303 	and.w	r3, r3, #3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d102      	bne.n	800340e <str2upper+0x32>
 8003408:	7bbb      	ldrb	r3, [r7, #14]
 800340a:	3b20      	subs	r3, #32
 800340c:	e000      	b.n	8003410 <str2upper+0x34>
 800340e:	7bbb      	ldrb	r3, [r7, #14]
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	6839      	ldr	r1, [r7, #0]
 8003414:	440a      	add	r2, r1
 8003416:	b2db      	uxtb	r3, r3
 8003418:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800341a:	7bfb      	ldrb	r3, [r7, #15]
 800341c:	3301      	adds	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
 8003420:	7bfc      	ldrb	r4, [r7, #15]
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fc fee4 	bl	80001f0 <strlen>
 8003428:	4603      	mov	r3, r0
 800342a:	429c      	cmp	r4, r3
 800342c:	d3de      	bcc.n	80033ec <str2upper+0x10>
	}
}
 800342e:	bf00      	nop
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bd90      	pop	{r4, r7, pc}
 8003438:	08012644 	.word	0x08012644

0800343c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
 8003446:	4b10      	ldr	r3, [pc, #64]	; (8003488 <HAL_MspInit+0x4c>)
 8003448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344a:	4a0f      	ldr	r2, [pc, #60]	; (8003488 <HAL_MspInit+0x4c>)
 800344c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003450:	6453      	str	r3, [r2, #68]	; 0x44
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <HAL_MspInit+0x4c>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4b09      	ldr	r3, [pc, #36]	; (8003488 <HAL_MspInit+0x4c>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a08      	ldr	r2, [pc, #32]	; (8003488 <HAL_MspInit+0x4c>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_MspInit+0x4c>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40023800 	.word	0x40023800

0800348c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a17      	ldr	r2, [pc, #92]	; (8003508 <HAL_ADC_MspInit+0x7c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d127      	bne.n	80034fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_ADC_MspInit+0x80>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	4a15      	ldr	r2, [pc, #84]	; (800350c <HAL_ADC_MspInit+0x80>)
 80034b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034bc:	6453      	str	r3, [r2, #68]	; 0x44
 80034be:	4b13      	ldr	r3, [pc, #76]	; (800350c <HAL_ADC_MspInit+0x80>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	4b0f      	ldr	r3, [pc, #60]	; (800350c <HAL_ADC_MspInit+0x80>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a0e      	ldr	r2, [pc, #56]	; (800350c <HAL_ADC_MspInit+0x80>)
 80034d4:	f043 0301 	orr.w	r3, r3, #1
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_ADC_MspInit+0x80>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 80034e6:	2340      	movs	r3, #64	; 0x40
 80034e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ea:	2303      	movs	r3, #3
 80034ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	4805      	ldr	r0, [pc, #20]	; (8003510 <HAL_ADC_MspInit+0x84>)
 80034fa:	f001 f9bd 	bl	8004878 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034fe:	bf00      	nop
 8003500:	3728      	adds	r7, #40	; 0x28
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40012000 	.word	0x40012000
 800350c:	40023800 	.word	0x40023800
 8003510:	40020000 	.word	0x40020000

08003514 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	; 0x30
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 031c 	add.w	r3, r7, #28
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a42      	ldr	r2, [pc, #264]	; (800363c <HAL_I2C_MspInit+0x128>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d12d      	bne.n	8003592 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	4b41      	ldr	r3, [pc, #260]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4a40      	ldr	r2, [pc, #256]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 8003540:	f043 0302 	orr.w	r3, r3, #2
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003552:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003558:	2312      	movs	r3, #18
 800355a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800355c:	2301      	movs	r3, #1
 800355e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003560:	2303      	movs	r3, #3
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003564:	2304      	movs	r3, #4
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003568:	f107 031c 	add.w	r3, r7, #28
 800356c:	4619      	mov	r1, r3
 800356e:	4835      	ldr	r0, [pc, #212]	; (8003644 <HAL_I2C_MspInit+0x130>)
 8003570:	f001 f982 	bl	8004878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	4b31      	ldr	r3, [pc, #196]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	4a30      	ldr	r2, [pc, #192]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 800357e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003582:	6413      	str	r3, [r2, #64]	; 0x40
 8003584:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003590:	e050      	b.n	8003634 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <HAL_I2C_MspInit+0x134>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d14b      	bne.n	8003634 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	4b27      	ldr	r3, [pc, #156]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	4a26      	ldr	r2, [pc, #152]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 80035a6:	f043 0304 	orr.w	r3, r3, #4
 80035aa:	6313      	str	r3, [r2, #48]	; 0x30
 80035ac:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b8:	2300      	movs	r3, #0
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	4b20      	ldr	r3, [pc, #128]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	4a1f      	ldr	r2, [pc, #124]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6313      	str	r3, [r2, #48]	; 0x30
 80035c8:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80035d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035da:	2312      	movs	r3, #18
 80035dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035de:	2301      	movs	r3, #1
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e2:	2303      	movs	r3, #3
 80035e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035e6:	2304      	movs	r3, #4
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ea:	f107 031c 	add.w	r3, r7, #28
 80035ee:	4619      	mov	r1, r3
 80035f0:	4816      	ldr	r0, [pc, #88]	; (800364c <HAL_I2C_MspInit+0x138>)
 80035f2:	f001 f941 	bl	8004878 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035fc:	2312      	movs	r3, #18
 80035fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003600:	2301      	movs	r3, #1
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003604:	2303      	movs	r3, #3
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003608:	2304      	movs	r3, #4
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	4619      	mov	r1, r3
 8003612:	480f      	ldr	r0, [pc, #60]	; (8003650 <HAL_I2C_MspInit+0x13c>)
 8003614:	f001 f930 	bl	8004878 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	4a07      	ldr	r2, [pc, #28]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 8003622:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003626:	6413      	str	r3, [r2, #64]	; 0x40
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_I2C_MspInit+0x12c>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
}
 8003634:	bf00      	nop
 8003636:	3730      	adds	r7, #48	; 0x30
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	40005800 	.word	0x40005800
 8003640:	40023800 	.word	0x40023800
 8003644:	40020400 	.word	0x40020400
 8003648:	40005c00 	.word	0x40005c00
 800364c:	40020800 	.word	0x40020800
 8003650:	40020000 	.word	0x40020000

08003654 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a05      	ldr	r2, [pc, #20]	; (8003678 <HAL_RTC_MspInit+0x24>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d102      	bne.n	800366c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RTC_MspInit+0x28>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40002800 	.word	0x40002800
 800367c:	42470e3c 	.word	0x42470e3c

08003680 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08e      	sub	sp, #56	; 0x38
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	60da      	str	r2, [r3, #12]
 8003696:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a4c      	ldr	r2, [pc, #304]	; (80037d0 <HAL_SPI_MspInit+0x150>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d12d      	bne.n	80036fe <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]
 80036a6:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	4a4a      	ldr	r2, [pc, #296]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 80036ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036b0:	6413      	str	r3, [r2, #64]	; 0x40
 80036b2:	4b48      	ldr	r3, [pc, #288]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	623b      	str	r3, [r7, #32]
 80036bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	4b44      	ldr	r3, [pc, #272]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	4a43      	ldr	r2, [pc, #268]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 80036c8:	f043 0302 	orr.w	r3, r3, #2
 80036cc:	6313      	str	r3, [r2, #48]	; 0x30
 80036ce:	4b41      	ldr	r3, [pc, #260]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80036da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036e4:	2301      	movs	r3, #1
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e8:	2303      	movs	r3, #3
 80036ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036ec:	2305      	movs	r3, #5
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f4:	4619      	mov	r1, r3
 80036f6:	4838      	ldr	r0, [pc, #224]	; (80037d8 <HAL_SPI_MspInit+0x158>)
 80036f8:	f001 f8be 	bl	8004878 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80036fc:	e064      	b.n	80037c8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a36      	ldr	r2, [pc, #216]	; (80037dc <HAL_SPI_MspInit+0x15c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d12d      	bne.n	8003764 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]
 800370c:	4b31      	ldr	r3, [pc, #196]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 800370e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003710:	4a30      	ldr	r2, [pc, #192]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 8003712:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003716:	6453      	str	r3, [r2, #68]	; 0x44
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	4b2a      	ldr	r3, [pc, #168]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	4a29      	ldr	r2, [pc, #164]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 800372e:	f043 0310 	orr.w	r3, r3, #16
 8003732:	6313      	str	r3, [r2, #48]	; 0x30
 8003734:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003740:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374e:	2303      	movs	r3, #3
 8003750:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003752:	2305      	movs	r3, #5
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800375a:	4619      	mov	r1, r3
 800375c:	4820      	ldr	r0, [pc, #128]	; (80037e0 <HAL_SPI_MspInit+0x160>)
 800375e:	f001 f88b 	bl	8004878 <HAL_GPIO_Init>
}
 8003762:	e031      	b.n	80037c8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1e      	ldr	r2, [pc, #120]	; (80037e4 <HAL_SPI_MspInit+0x164>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d12c      	bne.n	80037c8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 8003778:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800377c:	6453      	str	r3, [r2, #68]	; 0x44
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 8003780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003782:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4a10      	ldr	r2, [pc, #64]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 8003794:	f043 0320 	orr.w	r3, r3, #32
 8003798:	6313      	str	r3, [r2, #48]	; 0x30
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_SPI_MspInit+0x154>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80037a6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037b0:	2301      	movs	r3, #1
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b4:	2303      	movs	r3, #3
 80037b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80037b8:	2305      	movs	r3, #5
 80037ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037c0:	4619      	mov	r1, r3
 80037c2:	4809      	ldr	r0, [pc, #36]	; (80037e8 <HAL_SPI_MspInit+0x168>)
 80037c4:	f001 f858 	bl	8004878 <HAL_GPIO_Init>
}
 80037c8:	bf00      	nop
 80037ca:	3738      	adds	r7, #56	; 0x38
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40003800 	.word	0x40003800
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40020400 	.word	0x40020400
 80037dc:	40013400 	.word	0x40013400
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40015000 	.word	0x40015000
 80037e8:	40021400 	.word	0x40021400

080037ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fc:	d10e      	bne.n	800381c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <HAL_TIM_Base_MspInit+0x70>)
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <HAL_TIM_Base_MspInit+0x70>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6413      	str	r3, [r2, #64]	; 0x40
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <HAL_TIM_Base_MspInit+0x70>)
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800381a:	e01a      	b.n	8003852 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a0f      	ldr	r2, [pc, #60]	; (8003860 <HAL_TIM_Base_MspInit+0x74>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d115      	bne.n	8003852 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003826:	2300      	movs	r3, #0
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <HAL_TIM_Base_MspInit+0x70>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	4a0b      	ldr	r2, [pc, #44]	; (800385c <HAL_TIM_Base_MspInit+0x70>)
 8003830:	f043 0304 	orr.w	r3, r3, #4
 8003834:	6413      	str	r3, [r2, #64]	; 0x40
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <HAL_TIM_Base_MspInit+0x70>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f003 0304 	and.w	r3, r3, #4
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003842:	2200      	movs	r2, #0
 8003844:	2100      	movs	r1, #0
 8003846:	201e      	movs	r0, #30
 8003848:	f000 ffbd 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800384c:	201e      	movs	r0, #30
 800384e:	f000 ffd6 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023800 	.word	0x40023800
 8003860:	40000800 	.word	0x40000800

08003864 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b088      	sub	sp, #32
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003884:	d11d      	bne.n	80038c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_TIM_MspPostInit+0x68>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4a0f      	ldr	r2, [pc, #60]	; (80038cc <HAL_TIM_MspPostInit+0x68>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6313      	str	r3, [r2, #48]	; 0x30
 8003896:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <HAL_TIM_MspPostInit+0x68>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 80038a2:	2304      	movs	r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038a6:	2302      	movs	r3, #2
 80038a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80038b6:	f107 030c 	add.w	r3, r7, #12
 80038ba:	4619      	mov	r1, r3
 80038bc:	4804      	ldr	r0, [pc, #16]	; (80038d0 <HAL_TIM_MspPostInit+0x6c>)
 80038be:	f000 ffdb 	bl	8004878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	40020000 	.word	0x40020000

080038d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08e      	sub	sp, #56	; 0x38
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	60da      	str	r2, [r3, #12]
 80038ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a4f      	ldr	r2, [pc, #316]	; (8003a30 <HAL_UART_MspInit+0x15c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d12c      	bne.n	8003950 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	4b4e      	ldr	r3, [pc, #312]	; (8003a34 <HAL_UART_MspInit+0x160>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	4a4d      	ldr	r2, [pc, #308]	; (8003a34 <HAL_UART_MspInit+0x160>)
 8003900:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003904:	6413      	str	r3, [r2, #64]	; 0x40
 8003906:	4b4b      	ldr	r3, [pc, #300]	; (8003a34 <HAL_UART_MspInit+0x160>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800390e:	623b      	str	r3, [r7, #32]
 8003910:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	4b47      	ldr	r3, [pc, #284]	; (8003a34 <HAL_UART_MspInit+0x160>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a46      	ldr	r2, [pc, #280]	; (8003a34 <HAL_UART_MspInit+0x160>)
 800391c:	f043 0310 	orr.w	r3, r3, #16
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b44      	ldr	r3, [pc, #272]	; (8003a34 <HAL_UART_MspInit+0x160>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 800392e:	2303      	movs	r3, #3
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003932:	2302      	movs	r3, #2
 8003934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003936:	2301      	movs	r3, #1
 8003938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393a:	2303      	movs	r3, #3
 800393c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800393e:	2308      	movs	r3, #8
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003946:	4619      	mov	r1, r3
 8003948:	483b      	ldr	r0, [pc, #236]	; (8003a38 <HAL_UART_MspInit+0x164>)
 800394a:	f000 ff95 	bl	8004878 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800394e:	e06b      	b.n	8003a28 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a39      	ldr	r2, [pc, #228]	; (8003a3c <HAL_UART_MspInit+0x168>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d12d      	bne.n	80039b6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
 800395e:	4b35      	ldr	r3, [pc, #212]	; (8003a34 <HAL_UART_MspInit+0x160>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	4a34      	ldr	r2, [pc, #208]	; (8003a34 <HAL_UART_MspInit+0x160>)
 8003964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
 800396a:	4b32      	ldr	r3, [pc, #200]	; (8003a34 <HAL_UART_MspInit+0x160>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003972:	61bb      	str	r3, [r7, #24]
 8003974:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	617b      	str	r3, [r7, #20]
 800397a:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <HAL_UART_MspInit+0x160>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a2d      	ldr	r2, [pc, #180]	; (8003a34 <HAL_UART_MspInit+0x160>)
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <HAL_UART_MspInit+0x160>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8003992:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039a4:	2307      	movs	r3, #7
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ac:	4619      	mov	r1, r3
 80039ae:	4824      	ldr	r0, [pc, #144]	; (8003a40 <HAL_UART_MspInit+0x16c>)
 80039b0:	f000 ff62 	bl	8004878 <HAL_GPIO_Init>
}
 80039b4:	e038      	b.n	8003a28 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <HAL_UART_MspInit+0x170>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d133      	bne.n	8003a28 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039c0:	2300      	movs	r3, #0
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_UART_MspInit+0x160>)
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <HAL_UART_MspInit+0x160>)
 80039ca:	f043 0320 	orr.w	r3, r3, #32
 80039ce:	6453      	str	r3, [r2, #68]	; 0x44
 80039d0:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <HAL_UART_MspInit+0x160>)
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039dc:	2300      	movs	r3, #0
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <HAL_UART_MspInit+0x160>)
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	4a13      	ldr	r2, [pc, #76]	; (8003a34 <HAL_UART_MspInit+0x160>)
 80039e6:	f043 0304 	orr.w	r3, r3, #4
 80039ea:	6313      	str	r3, [r2, #48]	; 0x30
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_UART_MspInit+0x160>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 80039f8:	23c0      	movs	r3, #192	; 0xc0
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a04:	2303      	movs	r3, #3
 8003a06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a08:	2308      	movs	r3, #8
 8003a0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a10:	4619      	mov	r1, r3
 8003a12:	480d      	ldr	r0, [pc, #52]	; (8003a48 <HAL_UART_MspInit+0x174>)
 8003a14:	f000 ff30 	bl	8004878 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	2047      	movs	r0, #71	; 0x47
 8003a1e:	f000 fed2 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003a22:	2047      	movs	r0, #71	; 0x47
 8003a24:	f000 feeb 	bl	80047fe <HAL_NVIC_EnableIRQ>
}
 8003a28:	bf00      	nop
 8003a2a:	3738      	adds	r7, #56	; 0x38
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40007c00 	.word	0x40007c00
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40004800 	.word	0x40004800
 8003a40:	40020c00 	.word	0x40020c00
 8003a44:	40011400 	.word	0x40011400
 8003a48:	40020800 	.word	0x40020800

08003a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a5e:	e7fe      	b.n	8003a5e <HardFault_Handler+0x4>

08003a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a64:	e7fe      	b.n	8003a64 <MemManage_Handler+0x4>

08003a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a66:	b480      	push	{r7}
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a6a:	e7fe      	b.n	8003a6a <BusFault_Handler+0x4>

08003a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a70:	e7fe      	b.n	8003a70 <UsageFault_Handler+0x4>

08003a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa0:	f000 f976 	bl	8003d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003aac:	2001      	movs	r0, #1
 8003aae:	f001 f8c1 	bl	8004c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003abc:	4802      	ldr	r0, [pc, #8]	; (8003ac8 <TIM4_IRQHandler+0x10>)
 8003abe:	f003 fffb 	bl	8007ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000654 	.word	0x20000654

08003acc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ad0:	4802      	ldr	r0, [pc, #8]	; (8003adc <USART6_IRQHandler+0x10>)
 8003ad2:	f004 ff31 	bl	8008938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000c0c 	.word	0x20000c0c

08003ae0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
	return 1;
 8003ae4:	2301      	movs	r3, #1
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <_kill>:

int _kill(int pid, int sig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003afa:	f008 ffeb 	bl	800cad4 <__errno>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2216      	movs	r2, #22
 8003b02:	601a      	str	r2, [r3, #0]
	return -1;
 8003b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <_exit>:

void _exit (int status)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b18:	f04f 31ff 	mov.w	r1, #4294967295
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f7ff ffe7 	bl	8003af0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b22:	e7fe      	b.n	8003b22 <_exit+0x12>

08003b24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e00a      	b.n	8003b4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b36:	f3af 8000 	nop.w
 8003b3a:	4601      	mov	r1, r0
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	60ba      	str	r2, [r7, #8]
 8003b42:	b2ca      	uxtb	r2, r1
 8003b44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	dbf0      	blt.n	8003b36 <_read+0x12>
	}

return len;
 8003b54:	687b      	ldr	r3, [r7, #4]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	617b      	str	r3, [r7, #20]
 8003b6e:	e009      	b.n	8003b84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	60ba      	str	r2, [r7, #8]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3301      	adds	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	dbf1      	blt.n	8003b70 <_write+0x12>
	}
	return len;
 8003b8c:	687b      	ldr	r3, [r7, #4]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_close>:

int _close(int file)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
	return -1;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bbe:	605a      	str	r2, [r3, #4]
	return 0;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_isatty>:

int _isatty(int file)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8003bd6:	2301      	movs	r3, #1
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
	return 0;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <_sbrk+0x5c>)
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <_sbrk+0x60>)
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <_sbrk+0x64>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <_sbrk+0x64>)
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <_sbrk+0x68>)
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <_sbrk+0x64>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d207      	bcs.n	8003c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c30:	f008 ff50 	bl	800cad4 <__errno>
 8003c34:	4603      	mov	r3, r0
 8003c36:	220c      	movs	r2, #12
 8003c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e009      	b.n	8003c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <_sbrk+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <_sbrk+0x64>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <_sbrk+0x64>)
 8003c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20030000 	.word	0x20030000
 8003c60:	00000400 	.word	0x00000400
 8003c64:	200004ac 	.word	0x200004ac
 8003c68:	20001750 	.word	0x20001750

08003c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <SystemInit+0x28>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <SystemInit+0x28>)
 8003c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <SystemInit+0x28>)
 8003c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c86:	609a      	str	r2, [r3, #8]
#endif
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c9e:	e003      	b.n	8003ca8 <LoopCopyDataInit>

08003ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003ca6:	3104      	adds	r1, #4

08003ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ca8:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003cb0:	d3f6      	bcc.n	8003ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003cb4:	e002      	b.n	8003cbc <LoopFillZerobss>

08003cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003cb8:	f842 3b04 	str.w	r3, [r2], #4

08003cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cc0:	d3f9      	bcc.n	8003cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cc2:	f7ff ffd3 	bl	8003c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cc6:	f008 ff0b 	bl	800cae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cca:	f7fe f8c1 	bl	8001e50 <main>
  bx  lr    
 8003cce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003cd0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003cd4:	08012b50 	.word	0x08012b50
  ldr  r0, =_sdata
 8003cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003cdc:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8003ce0:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8003ce4:	20001750 	.word	0x20001750

08003ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ce8:	e7fe      	b.n	8003ce8 <ADC_IRQHandler>
	...

08003cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <HAL_Init+0x40>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a0d      	ldr	r2, [pc, #52]	; (8003d2c <HAL_Init+0x40>)
 8003cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_Init+0x40>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	; (8003d2c <HAL_Init+0x40>)
 8003d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d08:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <HAL_Init+0x40>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a07      	ldr	r2, [pc, #28]	; (8003d2c <HAL_Init+0x40>)
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d14:	2003      	movs	r0, #3
 8003d16:	f000 fd4b 	bl	80047b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	f000 f808 	bl	8003d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d20:	f7ff fb8c 	bl	800343c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023c00 	.word	0x40023c00

08003d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d38:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <HAL_InitTick+0x54>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <HAL_InitTick+0x58>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	4619      	mov	r1, r3
 8003d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 fd63 	bl	800481a <HAL_SYSTICK_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e00e      	b.n	8003d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d80a      	bhi.n	8003d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d64:	2200      	movs	r2, #0
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	f000 fd2b 	bl	80047c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d70:	4a06      	ldr	r2, [pc, #24]	; (8003d8c <HAL_InitTick+0x5c>)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000000 	.word	0x20000000
 8003d88:	20000008 	.word	0x20000008
 8003d8c:	20000004 	.word	0x20000004

08003d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d94:	4b06      	ldr	r3, [pc, #24]	; (8003db0 <HAL_IncTick+0x20>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_IncTick+0x24>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4413      	add	r3, r2
 8003da0:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <HAL_IncTick+0x24>)
 8003da2:	6013      	str	r3, [r2, #0]
}
 8003da4:	bf00      	nop
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20000008 	.word	0x20000008
 8003db4:	200012cc 	.word	0x200012cc

08003db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return uwTick;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_GetTick+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	200012cc 	.word	0x200012cc

08003dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dd8:	f7ff ffee 	bl	8003db8 <HAL_GetTick>
 8003ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d005      	beq.n	8003df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dea:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <HAL_Delay+0x44>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003df6:	bf00      	nop
 8003df8:	f7ff ffde 	bl	8003db8 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d8f7      	bhi.n	8003df8 <HAL_Delay+0x28>
  {
  }
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	20000008 	.word	0x20000008

08003e18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e033      	b.n	8003e96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fb28 	bl	800348c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 0310 	and.w	r3, r3, #16
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d118      	bne.n	8003e88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e5e:	f023 0302 	bic.w	r3, r3, #2
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fad4 	bl	8004418 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f023 0303 	bic.w	r3, r3, #3
 8003e7e:	f043 0201 	orr.w	r2, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
 8003e86:	e001      	b.n	8003e8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_Start+0x1a>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e0a5      	b.n	8004006 <HAL_ADC_Start+0x166>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d018      	beq.n	8003f02 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ee0:	4b4c      	ldr	r3, [pc, #304]	; (8004014 <HAL_ADC_Start+0x174>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a4c      	ldr	r2, [pc, #304]	; (8004018 <HAL_ADC_Start+0x178>)
 8003ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eea:	0c9a      	lsrs	r2, r3, #18
 8003eec:	4613      	mov	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ef4:	e002      	b.n	8003efc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1f9      	bne.n	8003ef6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d179      	bne.n	8004004 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4e:	d106      	bne.n	8003f5e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f54:	f023 0206 	bic.w	r2, r3, #6
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	645a      	str	r2, [r3, #68]	; 0x44
 8003f5c:	e002      	b.n	8003f64 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f6c:	4b2b      	ldr	r3, [pc, #172]	; (800401c <HAL_ADC_Start+0x17c>)
 8003f6e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f78:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f003 031f 	and.w	r3, r3, #31
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d12a      	bne.n	8003fdc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a25      	ldr	r2, [pc, #148]	; (8004020 <HAL_ADC_Start+0x180>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d015      	beq.n	8003fbc <HAL_ADC_Start+0x11c>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a23      	ldr	r2, [pc, #140]	; (8004024 <HAL_ADC_Start+0x184>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d105      	bne.n	8003fa6 <HAL_ADC_Start+0x106>
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_ADC_Start+0x17c>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f003 031f 	and.w	r3, r3, #31
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_ADC_Start+0x188>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d129      	bne.n	8004004 <HAL_ADC_Start+0x164>
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_ADC_Start+0x17c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d123      	bne.n	8004004 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d11c      	bne.n	8004004 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	e013      	b.n	8004004 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a0f      	ldr	r2, [pc, #60]	; (8004020 <HAL_ADC_Start+0x180>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10e      	bne.n	8004004 <HAL_ADC_Start+0x164>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004002:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000000 	.word	0x20000000
 8004018:	431bde83 	.word	0x431bde83
 800401c:	40012300 	.word	0x40012300
 8004020:	40012000 	.word	0x40012000
 8004024:	40012100 	.word	0x40012100
 8004028:	40012200 	.word	0x40012200

0800402c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_ADC_Stop+0x16>
 800403e:	2302      	movs	r3, #2
 8004040:	e021      	b.n	8004086 <HAL_ADC_Stop+0x5a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0201 	bic.w	r2, r2, #1
 8004058:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d109      	bne.n	800407c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004070:	f023 0301 	bic.w	r3, r3, #1
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ae:	d113      	bne.n	80040d8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040be:	d10b      	bne.n	80040d8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e05c      	b.n	8004192 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80040d8:	f7ff fe6e 	bl	8003db8 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040de:	e01a      	b.n	8004116 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d016      	beq.n	8004116 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_ADC_PollForConversion+0x6c>
 80040ee:	f7ff fe63 	bl	8003db8 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	683a      	ldr	r2, [r7, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d20b      	bcs.n	8004116 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	f043 0204 	orr.w	r2, r3, #4
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e03d      	b.n	8004192 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d1dd      	bne.n	80040e0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0212 	mvn.w	r2, #18
 800412c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d123      	bne.n	8004190 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800414c:	2b00      	cmp	r3, #0
 800414e:	d11f      	bne.n	8004190 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004156:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800415a:	2b00      	cmp	r3, #0
 800415c:	d006      	beq.n	800416c <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004168:	2b00      	cmp	r3, #0
 800416a:	d111      	bne.n	8004190 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x1c>
 80041cc:	2302      	movs	r3, #2
 80041ce:	e113      	b.n	80043f8 <HAL_ADC_ConfigChannel+0x244>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b09      	cmp	r3, #9
 80041de:	d925      	bls.n	800422c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68d9      	ldr	r1, [r3, #12]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	3b1e      	subs	r3, #30
 80041f6:	2207      	movs	r2, #7
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43da      	mvns	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	400a      	ands	r2, r1
 8004204:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68d9      	ldr	r1, [r3, #12]
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	4618      	mov	r0, r3
 8004218:	4603      	mov	r3, r0
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	4403      	add	r3, r0
 800421e:	3b1e      	subs	r3, #30
 8004220:	409a      	lsls	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	60da      	str	r2, [r3, #12]
 800422a:	e022      	b.n	8004272 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6919      	ldr	r1, [r3, #16]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	461a      	mov	r2, r3
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	2207      	movs	r2, #7
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43da      	mvns	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	400a      	ands	r2, r1
 800424e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6919      	ldr	r1, [r3, #16]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	4618      	mov	r0, r3
 8004262:	4603      	mov	r3, r0
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4403      	add	r3, r0
 8004268:	409a      	lsls	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b06      	cmp	r3, #6
 8004278:	d824      	bhi.n	80042c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	3b05      	subs	r3, #5
 800428c:	221f      	movs	r2, #31
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43da      	mvns	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	400a      	ands	r2, r1
 800429a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	4618      	mov	r0, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	3b05      	subs	r3, #5
 80042b6:	fa00 f203 	lsl.w	r2, r0, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	635a      	str	r2, [r3, #52]	; 0x34
 80042c2:	e04c      	b.n	800435e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b0c      	cmp	r3, #12
 80042ca:	d824      	bhi.n	8004316 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	3b23      	subs	r3, #35	; 0x23
 80042de:	221f      	movs	r2, #31
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	43da      	mvns	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	400a      	ands	r2, r1
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	4618      	mov	r0, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	3b23      	subs	r3, #35	; 0x23
 8004308:	fa00 f203 	lsl.w	r2, r0, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	631a      	str	r2, [r3, #48]	; 0x30
 8004314:	e023      	b.n	800435e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	3b41      	subs	r3, #65	; 0x41
 8004328:	221f      	movs	r2, #31
 800432a:	fa02 f303 	lsl.w	r3, r2, r3
 800432e:	43da      	mvns	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	400a      	ands	r2, r1
 8004336:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	b29b      	uxth	r3, r3
 8004344:	4618      	mov	r0, r3
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	3b41      	subs	r3, #65	; 0x41
 8004352:	fa00 f203 	lsl.w	r2, r0, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800435e:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_ADC_ConfigChannel+0x250>)
 8004360:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a28      	ldr	r2, [pc, #160]	; (8004408 <HAL_ADC_ConfigChannel+0x254>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d10f      	bne.n	800438c <HAL_ADC_ConfigChannel+0x1d8>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b12      	cmp	r3, #18
 8004372:	d10b      	bne.n	800438c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a1d      	ldr	r2, [pc, #116]	; (8004408 <HAL_ADC_ConfigChannel+0x254>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d12b      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x23a>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1c      	ldr	r2, [pc, #112]	; (800440c <HAL_ADC_ConfigChannel+0x258>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <HAL_ADC_ConfigChannel+0x1f4>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b11      	cmp	r3, #17
 80043a6:	d122      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a11      	ldr	r2, [pc, #68]	; (800440c <HAL_ADC_ConfigChannel+0x258>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d111      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043ca:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_ADC_ConfigChannel+0x25c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a11      	ldr	r2, [pc, #68]	; (8004414 <HAL_ADC_ConfigChannel+0x260>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	0c9a      	lsrs	r2, r3, #18
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043e0:	e002      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f9      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40012300 	.word	0x40012300
 8004408:	40012000 	.word	0x40012000
 800440c:	10000012 	.word	0x10000012
 8004410:	20000000 	.word	0x20000000
 8004414:	431bde83 	.word	0x431bde83

08004418 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004420:	4b79      	ldr	r3, [pc, #484]	; (8004608 <ADC_Init+0x1f0>)
 8004422:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	431a      	orrs	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800444c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6859      	ldr	r1, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6859      	ldr	r1, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6899      	ldr	r1, [r3, #8]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68da      	ldr	r2, [r3, #12]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	4a58      	ldr	r2, [pc, #352]	; (800460c <ADC_Init+0x1f4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d022      	beq.n	80044f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6899      	ldr	r1, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
 80044f4:	e00f      	b.n	8004516 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004514:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0202 	bic.w	r2, r2, #2
 8004524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6899      	ldr	r1, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	7e1b      	ldrb	r3, [r3, #24]
 8004530:	005a      	lsls	r2, r3, #1
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004552:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004562:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	3b01      	subs	r3, #1
 8004570:	035a      	lsls	r2, r3, #13
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	e007      	b.n	800458c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800458a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	051a      	lsls	r2, r3, #20
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6899      	ldr	r1, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045ce:	025a      	lsls	r2, r3, #9
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6899      	ldr	r1, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	029a      	lsls	r2, r3, #10
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	40012300 	.word	0x40012300
 800460c:	0f000001 	.word	0x0f000001

08004610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800462c:	4013      	ands	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800463c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004642:	4a04      	ldr	r2, [pc, #16]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	60d3      	str	r3, [r2, #12]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <__NVIC_GetPriorityGrouping+0x18>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f003 0307 	and.w	r3, r3, #7
}
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	2b00      	cmp	r3, #0
 8004684:	db0b      	blt.n	800469e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	f003 021f 	and.w	r2, r3, #31
 800468c:	4907      	ldr	r1, [pc, #28]	; (80046ac <__NVIC_EnableIRQ+0x38>)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2001      	movs	r0, #1
 8004696:	fa00 f202 	lsl.w	r2, r0, r2
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000e100 	.word	0xe000e100

080046b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db0a      	blt.n	80046da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	490c      	ldr	r1, [pc, #48]	; (80046fc <__NVIC_SetPriority+0x4c>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	0112      	lsls	r2, r2, #4
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	440b      	add	r3, r1
 80046d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d8:	e00a      	b.n	80046f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4908      	ldr	r1, [pc, #32]	; (8004700 <__NVIC_SetPriority+0x50>)
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3b04      	subs	r3, #4
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	440b      	add	r3, r1
 80046ee:	761a      	strb	r2, [r3, #24]
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	e000e100 	.word	0xe000e100
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	bf28      	it	cs
 8004722:	2304      	movcs	r3, #4
 8004724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3304      	adds	r3, #4
 800472a:	2b06      	cmp	r3, #6
 800472c:	d902      	bls.n	8004734 <NVIC_EncodePriority+0x30>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3b03      	subs	r3, #3
 8004732:	e000      	b.n	8004736 <NVIC_EncodePriority+0x32>
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	f04f 32ff 	mov.w	r2, #4294967295
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	401a      	ands	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800474c:	f04f 31ff 	mov.w	r1, #4294967295
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43d9      	mvns	r1, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800475c:	4313      	orrs	r3, r2
         );
}
 800475e:	4618      	mov	r0, r3
 8004760:	3724      	adds	r7, #36	; 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800477c:	d301      	bcc.n	8004782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800477e:	2301      	movs	r3, #1
 8004780:	e00f      	b.n	80047a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <SysTick_Config+0x40>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478a:	210f      	movs	r1, #15
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	f7ff ff8e 	bl	80046b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <SysTick_Config+0x40>)
 8004796:	2200      	movs	r2, #0
 8004798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <SysTick_Config+0x40>)
 800479c:	2207      	movs	r2, #7
 800479e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	e000e010 	.word	0xe000e010

080047b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff29 	bl	8004610 <__NVIC_SetPriorityGrouping>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff3e 	bl	8004658 <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff8e 	bl	8004704 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5d 	bl	80046b0 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff31 	bl	8004674 <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffa2 	bl	800476c <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004832:	b480      	push	{r7}
 8004834:	b083      	sub	sp, #12
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d004      	beq.n	8004850 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2280      	movs	r2, #128	; 0x80
 800484a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e00c      	b.n	800486a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2205      	movs	r2, #5
 8004854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	e177      	b.n	8004b84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004894:	2201      	movs	r2, #1
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4013      	ands	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	f040 8166 	bne.w	8004b7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d00b      	beq.n	80048d2 <HAL_GPIO_Init+0x5a>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d007      	beq.n	80048d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048c6:	2b11      	cmp	r3, #17
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b12      	cmp	r3, #18
 80048d0:	d130      	bne.n	8004934 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	2203      	movs	r2, #3
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43db      	mvns	r3, r3
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	4013      	ands	r3, r2
 80048e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	fa02 f303 	lsl.w	r3, r2, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004908:	2201      	movs	r2, #1
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 0201 	and.w	r2, r3, #1
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	2203      	movs	r2, #3
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d003      	beq.n	8004974 <HAL_GPIO_Init+0xfc>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b12      	cmp	r3, #18
 8004972:	d123      	bne.n	80049bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	08da      	lsrs	r2, r3, #3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3208      	adds	r2, #8
 800497c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	220f      	movs	r2, #15
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	08da      	lsrs	r2, r3, #3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3208      	adds	r2, #8
 80049b6:	69b9      	ldr	r1, [r7, #24]
 80049b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	2203      	movs	r2, #3
 80049c8:	fa02 f303 	lsl.w	r3, r2, r3
 80049cc:	43db      	mvns	r3, r3
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4013      	ands	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 0203 	and.w	r2, r3, #3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 80c0 	beq.w	8004b7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049fe:	2300      	movs	r3, #0
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	4b66      	ldr	r3, [pc, #408]	; (8004b9c <HAL_GPIO_Init+0x324>)
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	4a65      	ldr	r2, [pc, #404]	; (8004b9c <HAL_GPIO_Init+0x324>)
 8004a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a0e:	4b63      	ldr	r3, [pc, #396]	; (8004b9c <HAL_GPIO_Init+0x324>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a1a:	4a61      	ldr	r2, [pc, #388]	; (8004ba0 <HAL_GPIO_Init+0x328>)
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	3302      	adds	r3, #2
 8004a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	220f      	movs	r2, #15
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43db      	mvns	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a58      	ldr	r2, [pc, #352]	; (8004ba4 <HAL_GPIO_Init+0x32c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d037      	beq.n	8004ab6 <HAL_GPIO_Init+0x23e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a57      	ldr	r2, [pc, #348]	; (8004ba8 <HAL_GPIO_Init+0x330>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d031      	beq.n	8004ab2 <HAL_GPIO_Init+0x23a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a56      	ldr	r2, [pc, #344]	; (8004bac <HAL_GPIO_Init+0x334>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d02b      	beq.n	8004aae <HAL_GPIO_Init+0x236>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a55      	ldr	r2, [pc, #340]	; (8004bb0 <HAL_GPIO_Init+0x338>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d025      	beq.n	8004aaa <HAL_GPIO_Init+0x232>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a54      	ldr	r2, [pc, #336]	; (8004bb4 <HAL_GPIO_Init+0x33c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01f      	beq.n	8004aa6 <HAL_GPIO_Init+0x22e>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a53      	ldr	r2, [pc, #332]	; (8004bb8 <HAL_GPIO_Init+0x340>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d019      	beq.n	8004aa2 <HAL_GPIO_Init+0x22a>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a52      	ldr	r2, [pc, #328]	; (8004bbc <HAL_GPIO_Init+0x344>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <HAL_GPIO_Init+0x226>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a51      	ldr	r2, [pc, #324]	; (8004bc0 <HAL_GPIO_Init+0x348>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00d      	beq.n	8004a9a <HAL_GPIO_Init+0x222>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a50      	ldr	r2, [pc, #320]	; (8004bc4 <HAL_GPIO_Init+0x34c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d007      	beq.n	8004a96 <HAL_GPIO_Init+0x21e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a4f      	ldr	r2, [pc, #316]	; (8004bc8 <HAL_GPIO_Init+0x350>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d101      	bne.n	8004a92 <HAL_GPIO_Init+0x21a>
 8004a8e:	2309      	movs	r3, #9
 8004a90:	e012      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004a92:	230a      	movs	r3, #10
 8004a94:	e010      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004a96:	2308      	movs	r3, #8
 8004a98:	e00e      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004a9a:	2307      	movs	r3, #7
 8004a9c:	e00c      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004a9e:	2306      	movs	r3, #6
 8004aa0:	e00a      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004aa2:	2305      	movs	r3, #5
 8004aa4:	e008      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	e006      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e004      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e002      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <HAL_GPIO_Init+0x240>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	f002 0203 	and.w	r2, r2, #3
 8004abe:	0092      	lsls	r2, r2, #2
 8004ac0:	4093      	lsls	r3, r2
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ac8:	4935      	ldr	r1, [pc, #212]	; (8004ba0 <HAL_GPIO_Init+0x328>)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	089b      	lsrs	r3, r3, #2
 8004ace:	3302      	adds	r3, #2
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ad6:	4b3d      	ldr	r3, [pc, #244]	; (8004bcc <HAL_GPIO_Init+0x354>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004afa:	4a34      	ldr	r2, [pc, #208]	; (8004bcc <HAL_GPIO_Init+0x354>)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004b00:	4b32      	ldr	r3, [pc, #200]	; (8004bcc <HAL_GPIO_Init+0x354>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	43db      	mvns	r3, r3
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b24:	4a29      	ldr	r2, [pc, #164]	; (8004bcc <HAL_GPIO_Init+0x354>)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b2a:	4b28      	ldr	r3, [pc, #160]	; (8004bcc <HAL_GPIO_Init+0x354>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	4013      	ands	r3, r2
 8004b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	; (8004bcc <HAL_GPIO_Init+0x354>)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b54:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <HAL_GPIO_Init+0x354>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	4013      	ands	r3, r2
 8004b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b78:	4a14      	ldr	r2, [pc, #80]	; (8004bcc <HAL_GPIO_Init+0x354>)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	3301      	adds	r3, #1
 8004b82:	61fb      	str	r3, [r7, #28]
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	2b0f      	cmp	r3, #15
 8004b88:	f67f ae84 	bls.w	8004894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	bf00      	nop
 8004b90:	3724      	adds	r7, #36	; 0x24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	40013800 	.word	0x40013800
 8004ba4:	40020000 	.word	0x40020000
 8004ba8:	40020400 	.word	0x40020400
 8004bac:	40020800 	.word	0x40020800
 8004bb0:	40020c00 	.word	0x40020c00
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	40021400 	.word	0x40021400
 8004bbc:	40021800 	.word	0x40021800
 8004bc0:	40021c00 	.word	0x40021c00
 8004bc4:	40022000 	.word	0x40022000
 8004bc8:	40022400 	.word	0x40022400
 8004bcc:	40013c00 	.word	0x40013c00

08004bd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	887b      	ldrh	r3, [r7, #2]
 8004be2:	4013      	ands	r3, r2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
 8004bec:	e001      	b.n	8004bf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	807b      	strh	r3, [r7, #2]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c10:	787b      	ldrb	r3, [r7, #1]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c1c:	e003      	b.n	8004c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c1e:	887b      	ldrh	r3, [r7, #2]
 8004c20:	041a      	lsls	r2, r3, #16
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	619a      	str	r2, [r3, #24]
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d006      	beq.n	8004c58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c4a:	4a05      	ldr	r2, [pc, #20]	; (8004c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c4c:	88fb      	ldrh	r3, [r7, #6]
 8004c4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c50:	88fb      	ldrh	r3, [r7, #6]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f806 	bl	8004c64 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c58:	bf00      	nop
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40013c00 	.word	0x40013c00

08004c64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e12b      	b.n	8004ee6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fe fc36 	bl	8003514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2224      	movs	r2, #36	; 0x24
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0201 	bic.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f001 fc98 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 8004ce4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	4a81      	ldr	r2, [pc, #516]	; (8004ef0 <HAL_I2C_Init+0x274>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d807      	bhi.n	8004d00 <HAL_I2C_Init+0x84>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a80      	ldr	r2, [pc, #512]	; (8004ef4 <HAL_I2C_Init+0x278>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	bf94      	ite	ls
 8004cf8:	2301      	movls	r3, #1
 8004cfa:	2300      	movhi	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e006      	b.n	8004d0e <HAL_I2C_Init+0x92>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a7d      	ldr	r2, [pc, #500]	; (8004ef8 <HAL_I2C_Init+0x27c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	bf94      	ite	ls
 8004d08:	2301      	movls	r3, #1
 8004d0a:	2300      	movhi	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e0e7      	b.n	8004ee6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a78      	ldr	r2, [pc, #480]	; (8004efc <HAL_I2C_Init+0x280>)
 8004d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1e:	0c9b      	lsrs	r3, r3, #18
 8004d20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a6a      	ldr	r2, [pc, #424]	; (8004ef0 <HAL_I2C_Init+0x274>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d802      	bhi.n	8004d50 <HAL_I2C_Init+0xd4>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	e009      	b.n	8004d64 <HAL_I2C_Init+0xe8>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d56:	fb02 f303 	mul.w	r3, r2, r3
 8004d5a:	4a69      	ldr	r2, [pc, #420]	; (8004f00 <HAL_I2C_Init+0x284>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	3301      	adds	r3, #1
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6812      	ldr	r2, [r2, #0]
 8004d68:	430b      	orrs	r3, r1
 8004d6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	495c      	ldr	r1, [pc, #368]	; (8004ef0 <HAL_I2C_Init+0x274>)
 8004d80:	428b      	cmp	r3, r1
 8004d82:	d819      	bhi.n	8004db8 <HAL_I2C_Init+0x13c>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1e59      	subs	r1, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d92:	1c59      	adds	r1, r3, #1
 8004d94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d98:	400b      	ands	r3, r1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_I2C_Init+0x138>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1e59      	subs	r1, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dac:	3301      	adds	r3, #1
 8004dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db2:	e051      	b.n	8004e58 <HAL_I2C_Init+0x1dc>
 8004db4:	2304      	movs	r3, #4
 8004db6:	e04f      	b.n	8004e58 <HAL_I2C_Init+0x1dc>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d111      	bne.n	8004de4 <HAL_I2C_Init+0x168>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	1e58      	subs	r0, r3, #1
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	440b      	add	r3, r1
 8004dce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	e012      	b.n	8004e0a <HAL_I2C_Init+0x18e>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1e58      	subs	r0, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	0099      	lsls	r1, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_Init+0x196>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e022      	b.n	8004e58 <HAL_I2C_Init+0x1dc>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10e      	bne.n	8004e38 <HAL_I2C_Init+0x1bc>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1e58      	subs	r0, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6859      	ldr	r1, [r3, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	440b      	add	r3, r1
 8004e28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e36:	e00f      	b.n	8004e58 <HAL_I2C_Init+0x1dc>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	1e58      	subs	r0, r3, #1
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6859      	ldr	r1, [r3, #4]
 8004e40:	460b      	mov	r3, r1
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	0099      	lsls	r1, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e4e:	3301      	adds	r3, #1
 8004e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	6809      	ldr	r1, [r1, #0]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6911      	ldr	r1, [r2, #16]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68d2      	ldr	r2, [r2, #12]
 8004e92:	4311      	orrs	r1, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695a      	ldr	r2, [r3, #20]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	000186a0 	.word	0x000186a0
 8004ef4:	001e847f 	.word	0x001e847f
 8004ef8:	003d08ff 	.word	0x003d08ff
 8004efc:	431bde83 	.word	0x431bde83
 8004f00:	10624dd3 	.word	0x10624dd3

08004f04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af02      	add	r7, sp, #8
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	4611      	mov	r1, r2
 8004f10:	461a      	mov	r2, r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	817b      	strh	r3, [r7, #10]
 8004f16:	460b      	mov	r3, r1
 8004f18:	813b      	strh	r3, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f1e:	f7fe ff4b 	bl	8003db8 <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b20      	cmp	r3, #32
 8004f2e:	f040 80d9 	bne.w	80050e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	2319      	movs	r3, #25
 8004f38:	2201      	movs	r2, #1
 8004f3a:	496d      	ldr	r1, [pc, #436]	; (80050f0 <HAL_I2C_Mem_Write+0x1ec>)
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fc7f 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e0cc      	b.n	80050e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_I2C_Mem_Write+0x56>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e0c5      	b.n	80050e6 <HAL_I2C_Mem_Write+0x1e2>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d007      	beq.n	8004f80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2221      	movs	r2, #33	; 0x21
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2240      	movs	r2, #64	; 0x40
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a3a      	ldr	r2, [r7, #32]
 8004faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4a4d      	ldr	r2, [pc, #308]	; (80050f4 <HAL_I2C_Mem_Write+0x1f0>)
 8004fc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004fc2:	88f8      	ldrh	r0, [r7, #6]
 8004fc4:	893a      	ldrh	r2, [r7, #8]
 8004fc6:	8979      	ldrh	r1, [r7, #10]
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	9301      	str	r3, [sp, #4]
 8004fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fce:	9300      	str	r3, [sp, #0]
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fab6 	bl	8005544 <I2C_RequestMemoryWrite>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d052      	beq.n	8005084 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e081      	b.n	80050e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fd00 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00d      	beq.n	800500e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d107      	bne.n	800500a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005008:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e06b      	b.n	80050e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	781a      	ldrb	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	3b01      	subs	r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b04      	cmp	r3, #4
 800504a:	d11b      	bne.n	8005084 <HAL_I2C_Mem_Write+0x180>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005050:	2b00      	cmp	r3, #0
 8005052:	d017      	beq.n	8005084 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	781a      	ldrb	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	3b01      	subs	r3, #1
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1aa      	bne.n	8004fe2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fcec 	bl	8005a6e <I2C_WaitOnBTFFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00d      	beq.n	80050b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d107      	bne.n	80050b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e016      	b.n	80050e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	e000      	b.n	80050e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80050e4:	2302      	movs	r3, #2
  }
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	00100002 	.word	0x00100002
 80050f4:	ffff0000 	.word	0xffff0000

080050f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08c      	sub	sp, #48	; 0x30
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	4608      	mov	r0, r1
 8005102:	4611      	mov	r1, r2
 8005104:	461a      	mov	r2, r3
 8005106:	4603      	mov	r3, r0
 8005108:	817b      	strh	r3, [r7, #10]
 800510a:	460b      	mov	r3, r1
 800510c:	813b      	strh	r3, [r7, #8]
 800510e:	4613      	mov	r3, r2
 8005110:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005112:	f7fe fe51 	bl	8003db8 <HAL_GetTick>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b20      	cmp	r3, #32
 8005122:	f040 8208 	bne.w	8005536 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	2319      	movs	r3, #25
 800512c:	2201      	movs	r2, #1
 800512e:	497b      	ldr	r1, [pc, #492]	; (800531c <HAL_I2C_Mem_Read+0x224>)
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fb85 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800513c:	2302      	movs	r3, #2
 800513e:	e1fb      	b.n	8005538 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_I2C_Mem_Read+0x56>
 800514a:	2302      	movs	r3, #2
 800514c:	e1f4      	b.n	8005538 <HAL_I2C_Mem_Read+0x440>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d007      	beq.n	8005174 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005182:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2222      	movs	r2, #34	; 0x22
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2240      	movs	r2, #64	; 0x40
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80051a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4a5b      	ldr	r2, [pc, #364]	; (8005320 <HAL_I2C_Mem_Read+0x228>)
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051b6:	88f8      	ldrh	r0, [r7, #6]
 80051b8:	893a      	ldrh	r2, [r7, #8]
 80051ba:	8979      	ldrh	r1, [r7, #10]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	4603      	mov	r3, r0
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fa52 	bl	8005670 <I2C_RequestMemoryRead>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e1b0      	b.n	8005538 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d113      	bne.n	8005206 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051de:	2300      	movs	r3, #0
 80051e0:	623b      	str	r3, [r7, #32]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	623b      	str	r3, [r7, #32]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	623b      	str	r3, [r7, #32]
 80051f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e184      	b.n	8005510 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	2b01      	cmp	r3, #1
 800520c:	d11b      	bne.n	8005246 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800521c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	e164      	b.n	8005510 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	2b02      	cmp	r3, #2
 800524c:	d11b      	bne.n	8005286 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800525c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800526e:	2300      	movs	r3, #0
 8005270:	61bb      	str	r3, [r7, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	e144      	b.n	8005510 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800529c:	e138      	b.n	8005510 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	2b03      	cmp	r3, #3
 80052a4:	f200 80f1 	bhi.w	800548a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d123      	bne.n	80052f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fc1b 	bl	8005af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e139      	b.n	8005538 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691a      	ldr	r2, [r3, #16]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052f6:	e10b      	b.n	8005510 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d14e      	bne.n	800539e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	2200      	movs	r2, #0
 8005308:	4906      	ldr	r1, [pc, #24]	; (8005324 <HAL_I2C_Mem_Read+0x22c>)
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 fa98 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e10e      	b.n	8005538 <HAL_I2C_Mem_Read+0x440>
 800531a:	bf00      	nop
 800531c:	00100002 	.word	0x00100002
 8005320:	ffff0000 	.word	0xffff0000
 8005324:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005336:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005354:	3b01      	subs	r3, #1
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691a      	ldr	r2, [r3, #16]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005374:	b2d2      	uxtb	r2, r2
 8005376:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800539c:	e0b8      	b.n	8005510 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	2200      	movs	r2, #0
 80053a6:	4966      	ldr	r1, [pc, #408]	; (8005540 <HAL_I2C_Mem_Read+0x448>)
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fa49 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0bf      	b.n	8005538 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	2200      	movs	r2, #0
 8005402:	494f      	ldr	r1, [pc, #316]	; (8005540 <HAL_I2C_Mem_Read+0x448>)
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 fa1b 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e091      	b.n	8005538 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005440:	3b01      	subs	r3, #1
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544c:	b29b      	uxth	r3, r3
 800544e:	3b01      	subs	r3, #1
 8005450:	b29a      	uxth	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005488:	e042      	b.n	8005510 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 fb2e 	bl	8005af0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e04c      	b.n	8005538 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d118      	bne.n	8005510 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005514:	2b00      	cmp	r3, #0
 8005516:	f47f aec2 	bne.w	800529e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005532:	2300      	movs	r3, #0
 8005534:	e000      	b.n	8005538 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005536:	2302      	movs	r3, #2
  }
}
 8005538:	4618      	mov	r0, r3
 800553a:	3728      	adds	r7, #40	; 0x28
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	00010004 	.word	0x00010004

08005544 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4603      	mov	r3, r0
 8005554:	817b      	strh	r3, [r7, #10]
 8005556:	460b      	mov	r3, r1
 8005558:	813b      	strh	r3, [r7, #8]
 800555a:	4613      	mov	r3, r2
 800555c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800556c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	2200      	movs	r2, #0
 8005576:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 f960 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005594:	d103      	bne.n	800559e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800559c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e05f      	b.n	8005662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055a2:	897b      	ldrh	r3, [r7, #10]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	6a3a      	ldr	r2, [r7, #32]
 80055b6:	492d      	ldr	r1, [pc, #180]	; (800566c <I2C_RequestMemoryWrite+0x128>)
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f998 	bl	80058ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e04c      	b.n	8005662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e0:	6a39      	ldr	r1, [r7, #32]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fa02 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00d      	beq.n	800560a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d107      	bne.n	8005606 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005604:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e02b      	b.n	8005662 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800560a:	88fb      	ldrh	r3, [r7, #6]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d105      	bne.n	800561c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005610:	893b      	ldrh	r3, [r7, #8]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	611a      	str	r2, [r3, #16]
 800561a:	e021      	b.n	8005660 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800561c:	893b      	ldrh	r3, [r7, #8]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	b29b      	uxth	r3, r3
 8005622:	b2da      	uxtb	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	6a39      	ldr	r1, [r7, #32]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f9dc 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00d      	beq.n	8005656 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	2b04      	cmp	r3, #4
 8005640:	d107      	bne.n	8005652 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e005      	b.n	8005662 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005656:	893b      	ldrh	r3, [r7, #8]
 8005658:	b2da      	uxtb	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3718      	adds	r7, #24
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	00010002 	.word	0x00010002

08005670 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af02      	add	r7, sp, #8
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	4608      	mov	r0, r1
 800567a:	4611      	mov	r1, r2
 800567c:	461a      	mov	r2, r3
 800567e:	4603      	mov	r3, r0
 8005680:	817b      	strh	r3, [r7, #10]
 8005682:	460b      	mov	r3, r1
 8005684:	813b      	strh	r3, [r7, #8]
 8005686:	4613      	mov	r3, r2
 8005688:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005698:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	6a3b      	ldr	r3, [r7, #32]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f8c2 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00d      	beq.n	80056de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d0:	d103      	bne.n	80056da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e0aa      	b.n	8005834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056de:	897b      	ldrh	r3, [r7, #10]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	6a3a      	ldr	r2, [r7, #32]
 80056f2:	4952      	ldr	r1, [pc, #328]	; (800583c <I2C_RequestMemoryRead+0x1cc>)
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f8fa 	bl	80058ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e097      	b.n	8005834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005704:	2300      	movs	r3, #0
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800571a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571c:	6a39      	ldr	r1, [r7, #32]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f964 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00d      	beq.n	8005746 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	2b04      	cmp	r3, #4
 8005730:	d107      	bne.n	8005742 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005740:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e076      	b.n	8005834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005746:	88fb      	ldrh	r3, [r7, #6]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d105      	bne.n	8005758 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800574c:	893b      	ldrh	r3, [r7, #8]
 800574e:	b2da      	uxtb	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	611a      	str	r2, [r3, #16]
 8005756:	e021      	b.n	800579c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005758:	893b      	ldrh	r3, [r7, #8]
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	b29b      	uxth	r3, r3
 800575e:	b2da      	uxtb	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005768:	6a39      	ldr	r1, [r7, #32]
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f93e 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00d      	beq.n	8005792 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	2b04      	cmp	r3, #4
 800577c:	d107      	bne.n	800578e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800578c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e050      	b.n	8005834 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005792:	893b      	ldrh	r3, [r7, #8]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800579c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579e:	6a39      	ldr	r1, [r7, #32]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f923 	bl	80059ec <I2C_WaitOnTXEFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00d      	beq.n	80057c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d107      	bne.n	80057c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e035      	b.n	8005834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	2200      	movs	r2, #0
 80057e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f82b 	bl	8005840 <I2C_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d00d      	beq.n	800580c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fe:	d103      	bne.n	8005808 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e013      	b.n	8005834 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800580c:	897b      	ldrh	r3, [r7, #10]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800581c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	4906      	ldr	r1, [pc, #24]	; (800583c <I2C_RequestMemoryRead+0x1cc>)
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 f863 	bl	80058ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e000      	b.n	8005834 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3718      	adds	r7, #24
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	00010002 	.word	0x00010002

08005840 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005850:	e025      	b.n	800589e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d021      	beq.n	800589e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fe faad 	bl	8003db8 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <I2C_WaitOnFlagUntilTimeout+0x30>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d116      	bne.n	800589e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e023      	b.n	80058e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	0c1b      	lsrs	r3, r3, #16
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d10d      	bne.n	80058c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	43da      	mvns	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4013      	ands	r3, r2
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	bf0c      	ite	eq
 80058ba:	2301      	moveq	r3, #1
 80058bc:	2300      	movne	r3, #0
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	e00c      	b.n	80058de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	43da      	mvns	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4013      	ands	r3, r2
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf0c      	ite	eq
 80058d6:	2301      	moveq	r3, #1
 80058d8:	2300      	movne	r3, #0
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	461a      	mov	r2, r3
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d0b6      	beq.n	8005852 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058fc:	e051      	b.n	80059a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590c:	d123      	bne.n	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800591c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005926:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0204 	orr.w	r2, r3, #4
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e046      	b.n	80059e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d021      	beq.n	80059a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595e:	f7fe fa2b 	bl	8003db8 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	429a      	cmp	r2, r3
 800596c:	d302      	bcc.n	8005974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d116      	bne.n	80059a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f043 0220 	orr.w	r2, r3, #32
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e020      	b.n	80059e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d10c      	bne.n	80059c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	43da      	mvns	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4013      	ands	r3, r2
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bf14      	ite	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	2300      	moveq	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	e00b      	b.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	43da      	mvns	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4013      	ands	r3, r2
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d18d      	bne.n	80058fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80059e2:	2300      	movs	r3, #0
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059f8:	e02d      	b.n	8005a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 f8ce 	bl	8005b9c <I2C_IsAcknowledgeFailed>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e02d      	b.n	8005a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d021      	beq.n	8005a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a12:	f7fe f9d1 	bl	8003db8 <HAL_GetTick>
 8005a16:	4602      	mov	r2, r0
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	1ad3      	subs	r3, r2, r3
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d116      	bne.n	8005a56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f043 0220 	orr.w	r2, r3, #32
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e007      	b.n	8005a66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d1ca      	bne.n	80059fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b084      	sub	sp, #16
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a7a:	e02d      	b.n	8005ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f88d 	bl	8005b9c <I2C_IsAcknowledgeFailed>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d001      	beq.n	8005a8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e02d      	b.n	8005ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d021      	beq.n	8005ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a94:	f7fe f990 	bl	8003db8 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d302      	bcc.n	8005aaa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d116      	bne.n	8005ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	f043 0220 	orr.w	r2, r3, #32
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e007      	b.n	8005ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d1ca      	bne.n	8005a7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005afc:	e042      	b.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d119      	bne.n	8005b40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0210 	mvn.w	r2, #16
 8005b14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e029      	b.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b40:	f7fe f93a 	bl	8003db8 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d302      	bcc.n	8005b56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d116      	bne.n	8005b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	f043 0220 	orr.w	r2, r3, #32
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e007      	b.n	8005b94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d1b5      	bne.n	8005afe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb2:	d11b      	bne.n	8005bec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd8:	f043 0204 	orr.w	r2, r3, #4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d129      	bne.n	8005c64 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	; 0x24
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f022 0210 	bic.w	r2, r2, #16
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	e000      	b.n	8005c66 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
  }
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b085      	sub	sp, #20
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	d12a      	bne.n	8005ce2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	; 0x24
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005caa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005cac:	89fb      	ldrh	r3, [r7, #14]
 8005cae:	f023 030f 	bic.w	r3, r3, #15
 8005cb2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	89fa      	ldrh	r2, [r7, #14]
 8005cc4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0201 	orr.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	e000      	b.n	8005ce4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	603b      	str	r3, [r7, #0]
 8005cfe:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d08:	6413      	str	r3, [r2, #64]	; 0x40
 8005d0a:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <HAL_PWREx_EnableOverDrive+0x90>)
 8005d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005d16:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <HAL_PWREx_EnableOverDrive+0x94>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d1c:	f7fe f84c 	bl	8003db8 <HAL_GetTick>
 8005d20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d22:	e009      	b.n	8005d38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d24:	f7fe f848 	bl	8003db8 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d32:	d901      	bls.n	8005d38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e01f      	b.n	8005d78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005d38:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d44:	d1ee      	bne.n	8005d24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005d46:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d4c:	f7fe f834 	bl	8003db8 <HAL_GetTick>
 8005d50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d52:	e009      	b.n	8005d68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d54:	f7fe f830 	bl	8003db8 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d62:	d901      	bls.n	8005d68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e007      	b.n	8005d78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d68:	4b07      	ldr	r3, [pc, #28]	; (8005d88 <HAL_PWREx_EnableOverDrive+0x98>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d74:	d1ee      	bne.n	8005d54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	420e0040 	.word	0x420e0040
 8005d88:	40007000 	.word	0x40007000
 8005d8c:	420e0044 	.word	0x420e0044

08005d90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e25b      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d075      	beq.n	8005e9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dae:	4ba3      	ldr	r3, [pc, #652]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d00c      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dba:	4ba0      	ldr	r3, [pc, #640]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d112      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dc6:	4b9d      	ldr	r3, [pc, #628]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dd2:	d10b      	bne.n	8005dec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd4:	4b99      	ldr	r3, [pc, #612]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d05b      	beq.n	8005e98 <HAL_RCC_OscConfig+0x108>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d157      	bne.n	8005e98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e236      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df4:	d106      	bne.n	8005e04 <HAL_RCC_OscConfig+0x74>
 8005df6:	4b91      	ldr	r3, [pc, #580]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a90      	ldr	r2, [pc, #576]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e01d      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x98>
 8005e0e:	4b8b      	ldr	r3, [pc, #556]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a8a      	ldr	r2, [pc, #552]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e18:	6013      	str	r3, [r2, #0]
 8005e1a:	4b88      	ldr	r3, [pc, #544]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a87      	ldr	r2, [pc, #540]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e00b      	b.n	8005e40 <HAL_RCC_OscConfig+0xb0>
 8005e28:	4b84      	ldr	r3, [pc, #528]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a83      	ldr	r2, [pc, #524]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	4b81      	ldr	r3, [pc, #516]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a80      	ldr	r2, [pc, #512]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d013      	beq.n	8005e70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e48:	f7fd ffb6 	bl	8003db8 <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e50:	f7fd ffb2 	bl	8003db8 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b64      	cmp	r3, #100	; 0x64
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e1fb      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e62:	4b76      	ldr	r3, [pc, #472]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0xc0>
 8005e6e:	e014      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e70:	f7fd ffa2 	bl	8003db8 <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fd ff9e 	bl	8003db8 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e1e7      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e8a:	4b6c      	ldr	r3, [pc, #432]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1f0      	bne.n	8005e78 <HAL_RCC_OscConfig+0xe8>
 8005e96:	e000      	b.n	8005e9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d063      	beq.n	8005f6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ea6:	4b65      	ldr	r3, [pc, #404]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f003 030c 	and.w	r3, r3, #12
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00b      	beq.n	8005eca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eb2:	4b62      	ldr	r3, [pc, #392]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d11c      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ebe:	4b5f      	ldr	r3, [pc, #380]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d116      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eca:	4b5c      	ldr	r3, [pc, #368]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d001      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e1bb      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee2:	4b56      	ldr	r3, [pc, #344]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	4952      	ldr	r1, [pc, #328]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ef6:	e03a      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d020      	beq.n	8005f42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f00:	4b4f      	ldr	r3, [pc, #316]	; (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fd ff57 	bl	8003db8 <HAL_GetTick>
 8005f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f0e:	f7fd ff53 	bl	8003db8 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e19c      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f20:	4b46      	ldr	r3, [pc, #280]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2c:	4b43      	ldr	r3, [pc, #268]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4940      	ldr	r1, [pc, #256]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	600b      	str	r3, [r1, #0]
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f42:	4b3f      	ldr	r3, [pc, #252]	; (8006040 <HAL_RCC_OscConfig+0x2b0>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fd ff36 	bl	8003db8 <HAL_GetTick>
 8005f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f4e:	e008      	b.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f50:	f7fd ff32 	bl	8003db8 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d901      	bls.n	8005f62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e17b      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f62:	4b36      	ldr	r3, [pc, #216]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f0      	bne.n	8005f50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0308 	and.w	r3, r3, #8
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d030      	beq.n	8005fdc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d016      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f82:	4b30      	ldr	r3, [pc, #192]	; (8006044 <HAL_RCC_OscConfig+0x2b4>)
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f88:	f7fd ff16 	bl	8003db8 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f90:	f7fd ff12 	bl	8003db8 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e15b      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fa2:	4b26      	ldr	r3, [pc, #152]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x200>
 8005fae:	e015      	b.n	8005fdc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fb0:	4b24      	ldr	r3, [pc, #144]	; (8006044 <HAL_RCC_OscConfig+0x2b4>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fb6:	f7fd feff 	bl	8003db8 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fbe:	f7fd fefb 	bl	8003db8 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e144      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005fd0:	4b1a      	ldr	r3, [pc, #104]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f0      	bne.n	8005fbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80a0 	beq.w	800612a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fea:	2300      	movs	r3, #0
 8005fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10f      	bne.n	800601a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	4a0e      	ldr	r2, [pc, #56]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 8006004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006008:	6413      	str	r3, [r2, #64]	; 0x40
 800600a:	4b0c      	ldr	r3, [pc, #48]	; (800603c <HAL_RCC_OscConfig+0x2ac>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	60bb      	str	r3, [r7, #8]
 8006014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006016:	2301      	movs	r3, #1
 8006018:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800601a:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_RCC_OscConfig+0x2b8>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d121      	bne.n	800606a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <HAL_RCC_OscConfig+0x2b8>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a07      	ldr	r2, [pc, #28]	; (8006048 <HAL_RCC_OscConfig+0x2b8>)
 800602c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006032:	f7fd fec1 	bl	8003db8 <HAL_GetTick>
 8006036:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006038:	e011      	b.n	800605e <HAL_RCC_OscConfig+0x2ce>
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800
 8006040:	42470000 	.word	0x42470000
 8006044:	42470e80 	.word	0x42470e80
 8006048:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800604c:	f7fd feb4 	bl	8003db8 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b02      	cmp	r3, #2
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e0fd      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800605e:	4b81      	ldr	r3, [pc, #516]	; (8006264 <HAL_RCC_OscConfig+0x4d4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d106      	bne.n	8006080 <HAL_RCC_OscConfig+0x2f0>
 8006072:	4b7d      	ldr	r3, [pc, #500]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 8006074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006076:	4a7c      	ldr	r2, [pc, #496]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	6713      	str	r3, [r2, #112]	; 0x70
 800607e:	e01c      	b.n	80060ba <HAL_RCC_OscConfig+0x32a>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b05      	cmp	r3, #5
 8006086:	d10c      	bne.n	80060a2 <HAL_RCC_OscConfig+0x312>
 8006088:	4b77      	ldr	r3, [pc, #476]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 800608a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800608c:	4a76      	ldr	r2, [pc, #472]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 800608e:	f043 0304 	orr.w	r3, r3, #4
 8006092:	6713      	str	r3, [r2, #112]	; 0x70
 8006094:	4b74      	ldr	r3, [pc, #464]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 8006096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006098:	4a73      	ldr	r2, [pc, #460]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	6713      	str	r3, [r2, #112]	; 0x70
 80060a0:	e00b      	b.n	80060ba <HAL_RCC_OscConfig+0x32a>
 80060a2:	4b71      	ldr	r3, [pc, #452]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	4a70      	ldr	r2, [pc, #448]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	6713      	str	r3, [r2, #112]	; 0x70
 80060ae:	4b6e      	ldr	r3, [pc, #440]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 80060b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b2:	4a6d      	ldr	r2, [pc, #436]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 80060b4:	f023 0304 	bic.w	r3, r3, #4
 80060b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d015      	beq.n	80060ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c2:	f7fd fe79 	bl	8003db8 <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060c8:	e00a      	b.n	80060e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060ca:	f7fd fe75 	bl	8003db8 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e0bc      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060e0:	4b61      	ldr	r3, [pc, #388]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 80060e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d0ee      	beq.n	80060ca <HAL_RCC_OscConfig+0x33a>
 80060ec:	e014      	b.n	8006118 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ee:	f7fd fe63 	bl	8003db8 <HAL_GetTick>
 80060f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060f4:	e00a      	b.n	800610c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060f6:	f7fd fe5f 	bl	8003db8 <HAL_GetTick>
 80060fa:	4602      	mov	r2, r0
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	f241 3288 	movw	r2, #5000	; 0x1388
 8006104:	4293      	cmp	r3, r2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e0a6      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800610c:	4b56      	ldr	r3, [pc, #344]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	f003 0302 	and.w	r3, r3, #2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1ee      	bne.n	80060f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006118:	7dfb      	ldrb	r3, [r7, #23]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d105      	bne.n	800612a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800611e:	4b52      	ldr	r3, [pc, #328]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	4a51      	ldr	r2, [pc, #324]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 8006124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006128:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 8092 	beq.w	8006258 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006134:	4b4c      	ldr	r3, [pc, #304]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 030c 	and.w	r3, r3, #12
 800613c:	2b08      	cmp	r3, #8
 800613e:	d05c      	beq.n	80061fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	2b02      	cmp	r3, #2
 8006146:	d141      	bne.n	80061cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006148:	4b48      	ldr	r3, [pc, #288]	; (800626c <HAL_RCC_OscConfig+0x4dc>)
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800614e:	f7fd fe33 	bl	8003db8 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006156:	f7fd fe2f 	bl	8003db8 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e078      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006168:	4b3f      	ldr	r3, [pc, #252]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f0      	bne.n	8006156 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	431a      	orrs	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	019b      	lsls	r3, r3, #6
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	085b      	lsrs	r3, r3, #1
 800618c:	3b01      	subs	r3, #1
 800618e:	041b      	lsls	r3, r3, #16
 8006190:	431a      	orrs	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	061b      	lsls	r3, r3, #24
 8006198:	4933      	ldr	r1, [pc, #204]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 800619a:	4313      	orrs	r3, r2
 800619c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800619e:	4b33      	ldr	r3, [pc, #204]	; (800626c <HAL_RCC_OscConfig+0x4dc>)
 80061a0:	2201      	movs	r2, #1
 80061a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a4:	f7fd fe08 	bl	8003db8 <HAL_GetTick>
 80061a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ac:	f7fd fe04 	bl	8003db8 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e04d      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061be:	4b2a      	ldr	r3, [pc, #168]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d0f0      	beq.n	80061ac <HAL_RCC_OscConfig+0x41c>
 80061ca:	e045      	b.n	8006258 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061cc:	4b27      	ldr	r3, [pc, #156]	; (800626c <HAL_RCC_OscConfig+0x4dc>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d2:	f7fd fdf1 	bl	8003db8 <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061d8:	e008      	b.n	80061ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061da:	f7fd fded 	bl	8003db8 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e036      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ec:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f0      	bne.n	80061da <HAL_RCC_OscConfig+0x44a>
 80061f8:	e02e      	b.n	8006258 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d101      	bne.n	8006206 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e029      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006206:	4b18      	ldr	r3, [pc, #96]	; (8006268 <HAL_RCC_OscConfig+0x4d8>)
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	429a      	cmp	r2, r3
 8006218:	d11c      	bne.n	8006254 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d115      	bne.n	8006254 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800622e:	4013      	ands	r3, r2
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006234:	4293      	cmp	r3, r2
 8006236:	d10d      	bne.n	8006254 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006242:	429a      	cmp	r2, r3
 8006244:	d106      	bne.n	8006254 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006250:	429a      	cmp	r2, r3
 8006252:	d001      	beq.n	8006258 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40007000 	.word	0x40007000
 8006268:	40023800 	.word	0x40023800
 800626c:	42470060 	.word	0x42470060

08006270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e0cc      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006284:	4b68      	ldr	r3, [pc, #416]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d90c      	bls.n	80062ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006292:	4b65      	ldr	r3, [pc, #404]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800629a:	4b63      	ldr	r3, [pc, #396]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	683a      	ldr	r2, [r7, #0]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d001      	beq.n	80062ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0b8      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d020      	beq.n	80062fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062c4:	4b59      	ldr	r3, [pc, #356]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	4a58      	ldr	r2, [pc, #352]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80062ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d005      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80062dc:	4b53      	ldr	r3, [pc, #332]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	4a52      	ldr	r2, [pc, #328]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80062e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e8:	4b50      	ldr	r3, [pc, #320]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	494d      	ldr	r1, [pc, #308]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d044      	beq.n	8006390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d107      	bne.n	800631e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630e:	4b47      	ldr	r3, [pc, #284]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d119      	bne.n	800634e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e07f      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d003      	beq.n	800632e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800632a:	2b03      	cmp	r3, #3
 800632c:	d107      	bne.n	800633e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800632e:	4b3f      	ldr	r3, [pc, #252]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e06f      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800633e:	4b3b      	ldr	r3, [pc, #236]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e067      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800634e:	4b37      	ldr	r3, [pc, #220]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f023 0203 	bic.w	r2, r3, #3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	4934      	ldr	r1, [pc, #208]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 800635c:	4313      	orrs	r3, r2
 800635e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006360:	f7fd fd2a 	bl	8003db8 <HAL_GetTick>
 8006364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006366:	e00a      	b.n	800637e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006368:	f7fd fd26 	bl	8003db8 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	f241 3288 	movw	r2, #5000	; 0x1388
 8006376:	4293      	cmp	r3, r2
 8006378:	d901      	bls.n	800637e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e04f      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800637e:	4b2b      	ldr	r3, [pc, #172]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 020c 	and.w	r2, r3, #12
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	429a      	cmp	r2, r3
 800638e:	d1eb      	bne.n	8006368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006390:	4b25      	ldr	r3, [pc, #148]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d20c      	bcs.n	80063b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800639e:	4b22      	ldr	r3, [pc, #136]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a6:	4b20      	ldr	r3, [pc, #128]	; (8006428 <HAL_RCC_ClockConfig+0x1b8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 030f 	and.w	r3, r3, #15
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d001      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e032      	b.n	800641e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0304 	and.w	r3, r3, #4
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d008      	beq.n	80063d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063c4:	4b19      	ldr	r3, [pc, #100]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	4916      	ldr	r1, [pc, #88]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0308 	and.w	r3, r3, #8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d009      	beq.n	80063f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	490e      	ldr	r1, [pc, #56]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063f6:	f000 f821 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80063fa:	4602      	mov	r2, r0
 80063fc:	4b0b      	ldr	r3, [pc, #44]	; (800642c <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	091b      	lsrs	r3, r3, #4
 8006402:	f003 030f 	and.w	r3, r3, #15
 8006406:	490a      	ldr	r1, [pc, #40]	; (8006430 <HAL_RCC_ClockConfig+0x1c0>)
 8006408:	5ccb      	ldrb	r3, [r1, r3]
 800640a:	fa22 f303 	lsr.w	r3, r2, r3
 800640e:	4a09      	ldr	r2, [pc, #36]	; (8006434 <HAL_RCC_ClockConfig+0x1c4>)
 8006410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <HAL_RCC_ClockConfig+0x1c8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4618      	mov	r0, r3
 8006418:	f7fd fc8a 	bl	8003d30 <HAL_InitTick>

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40023c00 	.word	0x40023c00
 800642c:	40023800 	.word	0x40023800
 8006430:	080125ac 	.word	0x080125ac
 8006434:	20000000 	.word	0x20000000
 8006438:	20000004 	.word	0x20000004

0800643c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800643c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006440:	b084      	sub	sp, #16
 8006442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	607b      	str	r3, [r7, #4]
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	2300      	movs	r3, #0
 800644e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006454:	4b67      	ldr	r3, [pc, #412]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 030c 	and.w	r3, r3, #12
 800645c:	2b08      	cmp	r3, #8
 800645e:	d00d      	beq.n	800647c <HAL_RCC_GetSysClockFreq+0x40>
 8006460:	2b08      	cmp	r3, #8
 8006462:	f200 80bd 	bhi.w	80065e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d002      	beq.n	8006470 <HAL_RCC_GetSysClockFreq+0x34>
 800646a:	2b04      	cmp	r3, #4
 800646c:	d003      	beq.n	8006476 <HAL_RCC_GetSysClockFreq+0x3a>
 800646e:	e0b7      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006470:	4b61      	ldr	r3, [pc, #388]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006472:	60bb      	str	r3, [r7, #8]
       break;
 8006474:	e0b7      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006476:	4b60      	ldr	r3, [pc, #384]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006478:	60bb      	str	r3, [r7, #8]
      break;
 800647a:	e0b4      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800647c:	4b5d      	ldr	r3, [pc, #372]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006484:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006486:	4b5b      	ldr	r3, [pc, #364]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d04d      	beq.n	800652e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006492:	4b58      	ldr	r3, [pc, #352]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	099b      	lsrs	r3, r3, #6
 8006498:	461a      	mov	r2, r3
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064a2:	f04f 0100 	mov.w	r1, #0
 80064a6:	ea02 0800 	and.w	r8, r2, r0
 80064aa:	ea03 0901 	and.w	r9, r3, r1
 80064ae:	4640      	mov	r0, r8
 80064b0:	4649      	mov	r1, r9
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	f04f 0300 	mov.w	r3, #0
 80064ba:	014b      	lsls	r3, r1, #5
 80064bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80064c0:	0142      	lsls	r2, r0, #5
 80064c2:	4610      	mov	r0, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	ebb0 0008 	subs.w	r0, r0, r8
 80064ca:	eb61 0109 	sbc.w	r1, r1, r9
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	018b      	lsls	r3, r1, #6
 80064d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064dc:	0182      	lsls	r2, r0, #6
 80064de:	1a12      	subs	r2, r2, r0
 80064e0:	eb63 0301 	sbc.w	r3, r3, r1
 80064e4:	f04f 0000 	mov.w	r0, #0
 80064e8:	f04f 0100 	mov.w	r1, #0
 80064ec:	00d9      	lsls	r1, r3, #3
 80064ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064f2:	00d0      	lsls	r0, r2, #3
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	eb12 0208 	adds.w	r2, r2, r8
 80064fc:	eb43 0309 	adc.w	r3, r3, r9
 8006500:	f04f 0000 	mov.w	r0, #0
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	0299      	lsls	r1, r3, #10
 800650a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800650e:	0290      	lsls	r0, r2, #10
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	461a      	mov	r2, r3
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	f7fa fbc2 	bl	8000ca8 <__aeabi_uldivmod>
 8006524:	4602      	mov	r2, r0
 8006526:	460b      	mov	r3, r1
 8006528:	4613      	mov	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
 800652c:	e04a      	b.n	80065c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800652e:	4b31      	ldr	r3, [pc, #196]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	099b      	lsrs	r3, r3, #6
 8006534:	461a      	mov	r2, r3
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800653e:	f04f 0100 	mov.w	r1, #0
 8006542:	ea02 0400 	and.w	r4, r2, r0
 8006546:	ea03 0501 	and.w	r5, r3, r1
 800654a:	4620      	mov	r0, r4
 800654c:	4629      	mov	r1, r5
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	014b      	lsls	r3, r1, #5
 8006558:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800655c:	0142      	lsls	r2, r0, #5
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	1b00      	subs	r0, r0, r4
 8006564:	eb61 0105 	sbc.w	r1, r1, r5
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	018b      	lsls	r3, r1, #6
 8006572:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006576:	0182      	lsls	r2, r0, #6
 8006578:	1a12      	subs	r2, r2, r0
 800657a:	eb63 0301 	sbc.w	r3, r3, r1
 800657e:	f04f 0000 	mov.w	r0, #0
 8006582:	f04f 0100 	mov.w	r1, #0
 8006586:	00d9      	lsls	r1, r3, #3
 8006588:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800658c:	00d0      	lsls	r0, r2, #3
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	1912      	adds	r2, r2, r4
 8006594:	eb45 0303 	adc.w	r3, r5, r3
 8006598:	f04f 0000 	mov.w	r0, #0
 800659c:	f04f 0100 	mov.w	r1, #0
 80065a0:	0299      	lsls	r1, r3, #10
 80065a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80065a6:	0290      	lsls	r0, r2, #10
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	461a      	mov	r2, r3
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	f7fa fb76 	bl	8000ca8 <__aeabi_uldivmod>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4613      	mov	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065c4:	4b0b      	ldr	r3, [pc, #44]	; (80065f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	0c1b      	lsrs	r3, r3, #16
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	3301      	adds	r3, #1
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065dc:	60bb      	str	r3, [r7, #8]
      break;
 80065de:	e002      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80065e2:	60bb      	str	r3, [r7, #8]
      break;
 80065e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065e6:	68bb      	ldr	r3, [r7, #8]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80065f2:	bf00      	nop
 80065f4:	40023800 	.word	0x40023800
 80065f8:	00f42400 	.word	0x00f42400

080065fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006600:	4b03      	ldr	r3, [pc, #12]	; (8006610 <HAL_RCC_GetHCLKFreq+0x14>)
 8006602:	681b      	ldr	r3, [r3, #0]
}
 8006604:	4618      	mov	r0, r3
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20000000 	.word	0x20000000

08006614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006618:	f7ff fff0 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 800661c:	4602      	mov	r2, r0
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	0a9b      	lsrs	r3, r3, #10
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	4903      	ldr	r1, [pc, #12]	; (8006638 <HAL_RCC_GetPCLK1Freq+0x24>)
 800662a:	5ccb      	ldrb	r3, [r1, r3]
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006630:	4618      	mov	r0, r3
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40023800 	.word	0x40023800
 8006638:	080125bc 	.word	0x080125bc

0800663c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006640:	f7ff ffdc 	bl	80065fc <HAL_RCC_GetHCLKFreq>
 8006644:	4602      	mov	r2, r0
 8006646:	4b05      	ldr	r3, [pc, #20]	; (800665c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	0b5b      	lsrs	r3, r3, #13
 800664c:	f003 0307 	and.w	r3, r3, #7
 8006650:	4903      	ldr	r1, [pc, #12]	; (8006660 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006652:	5ccb      	ldrb	r3, [r1, r3]
 8006654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006658:	4618      	mov	r0, r3
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40023800 	.word	0x40023800
 8006660:	080125bc 	.word	0x080125bc

08006664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10b      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006688:	2b00      	cmp	r3, #0
 800668a:	d105      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006694:	2b00      	cmp	r3, #0
 8006696:	d075      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006698:	4bad      	ldr	r3, [pc, #692]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800669e:	f7fd fb8b 	bl	8003db8 <HAL_GetTick>
 80066a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066a4:	e008      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066a6:	f7fd fb87 	bl	8003db8 <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e18b      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066b8:	4ba6      	ldr	r3, [pc, #664]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f0      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d009      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	019a      	lsls	r2, r3, #6
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	071b      	lsls	r3, r3, #28
 80066dc:	499d      	ldr	r1, [pc, #628]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01f      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066f0:	4b98      	ldr	r3, [pc, #608]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f6:	0f1b      	lsrs	r3, r3, #28
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	019a      	lsls	r2, r3, #6
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	061b      	lsls	r3, r3, #24
 800670a:	431a      	orrs	r2, r3
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	071b      	lsls	r3, r3, #28
 8006710:	4990      	ldr	r1, [pc, #576]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006712:	4313      	orrs	r3, r2
 8006714:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006718:	4b8e      	ldr	r3, [pc, #568]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800671a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800671e:	f023 021f 	bic.w	r2, r3, #31
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	3b01      	subs	r3, #1
 8006728:	498a      	ldr	r1, [pc, #552]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800672a:	4313      	orrs	r3, r2
 800672c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00d      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	019a      	lsls	r2, r3, #6
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	061b      	lsls	r3, r3, #24
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	071b      	lsls	r3, r3, #28
 8006750:	4980      	ldr	r1, [pc, #512]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006758:	4b7d      	ldr	r3, [pc, #500]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800675a:	2201      	movs	r2, #1
 800675c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800675e:	f7fd fb2b 	bl	8003db8 <HAL_GetTick>
 8006762:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006764:	e008      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006766:	f7fd fb27 	bl	8003db8 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d901      	bls.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006774:	2303      	movs	r3, #3
 8006776:	e12b      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006778:	4b76      	ldr	r3, [pc, #472]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d0f0      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0304 	and.w	r3, r3, #4
 800678c:	2b00      	cmp	r3, #0
 800678e:	d105      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006798:	2b00      	cmp	r3, #0
 800679a:	d079      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800679c:	4b6e      	ldr	r3, [pc, #440]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067a2:	f7fd fb09 	bl	8003db8 <HAL_GetTick>
 80067a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067a8:	e008      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067aa:	f7fd fb05 	bl	8003db8 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e109      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067bc:	4b65      	ldr	r3, [pc, #404]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067c8:	d0ef      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d020      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067d6:	4b5f      	ldr	r3, [pc, #380]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	0f1b      	lsrs	r3, r3, #28
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	019a      	lsls	r2, r3, #6
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	061b      	lsls	r3, r3, #24
 80067f0:	431a      	orrs	r2, r3
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	071b      	lsls	r3, r3, #28
 80067f6:	4957      	ldr	r1, [pc, #348]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067fe:	4b55      	ldr	r3, [pc, #340]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006804:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a1b      	ldr	r3, [r3, #32]
 800680c:	3b01      	subs	r3, #1
 800680e:	021b      	lsls	r3, r3, #8
 8006810:	4950      	ldr	r1, [pc, #320]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b00      	cmp	r3, #0
 8006822:	d01e      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006824:	4b4b      	ldr	r3, [pc, #300]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682a:	0e1b      	lsrs	r3, r3, #24
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	019a      	lsls	r2, r3, #6
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	061b      	lsls	r3, r3, #24
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	071b      	lsls	r3, r3, #28
 8006844:	4943      	ldr	r1, [pc, #268]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800684c:	4b41      	ldr	r3, [pc, #260]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800684e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006852:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	493e      	ldr	r1, [pc, #248]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006862:	4b3d      	ldr	r3, [pc, #244]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006864:	2201      	movs	r2, #1
 8006866:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006868:	f7fd faa6 	bl	8003db8 <HAL_GetTick>
 800686c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800686e:	e008      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006870:	f7fd faa2 	bl	8003db8 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e0a6      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006882:	4b34      	ldr	r3, [pc, #208]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800688a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800688e:	d1ef      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 808d 	beq.w	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	4a2b      	ldr	r2, [pc, #172]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ac:	6413      	str	r3, [r2, #64]	; 0x40
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068ba:	4b28      	ldr	r3, [pc, #160]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a27      	ldr	r2, [pc, #156]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068c6:	f7fd fa77 	bl	8003db8 <HAL_GetTick>
 80068ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068cc:	e008      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068ce:	f7fd fa73 	bl	8003db8 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e077      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068e0:	4b1e      	ldr	r3, [pc, #120]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068ec:	4b19      	ldr	r3, [pc, #100]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d039      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	429a      	cmp	r2, r3
 8006908:	d032      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006912:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006914:	4b12      	ldr	r3, [pc, #72]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006916:	2201      	movs	r2, #1
 8006918:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800691a:	4b11      	ldr	r3, [pc, #68]	; (8006960 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006920:	4a0c      	ldr	r2, [pc, #48]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b01      	cmp	r3, #1
 8006930:	d11e      	bne.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006932:	f7fd fa41 	bl	8003db8 <HAL_GetTick>
 8006936:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006938:	e014      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800693a:	f7fd fa3d 	bl	8003db8 <HAL_GetTick>
 800693e:	4602      	mov	r2, r0
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	f241 3288 	movw	r2, #5000	; 0x1388
 8006948:	4293      	cmp	r3, r2
 800694a:	d90b      	bls.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e03f      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006950:	42470068 	.word	0x42470068
 8006954:	40023800 	.word	0x40023800
 8006958:	42470070 	.word	0x42470070
 800695c:	40007000 	.word	0x40007000
 8006960:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006964:	4b1c      	ldr	r3, [pc, #112]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0e4      	beq.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800697c:	d10d      	bne.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800697e:	4b16      	ldr	r3, [pc, #88]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800698a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800698e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006992:	4911      	ldr	r1, [pc, #68]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006994:	4313      	orrs	r3, r2
 8006996:	608b      	str	r3, [r1, #8]
 8006998:	e005      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800699a:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	4a0e      	ldr	r2, [pc, #56]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069a4:	6093      	str	r3, [r2, #8]
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b2:	4909      	ldr	r1, [pc, #36]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d004      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80069ca:	4b04      	ldr	r3, [pc, #16]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80069cc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3718      	adds	r7, #24
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40023800 	.word	0x40023800
 80069dc:	424711e0 	.word	0x424711e0

080069e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e083      	b.n	8006afa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	7f5b      	ldrb	r3, [r3, #29]
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7fc fe26 	bl	8003654 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	22ca      	movs	r2, #202	; 0xca
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2253      	movs	r2, #83	; 0x53
 8006a1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 faa8 	bl	8006f74 <RTC_EnterInitMode>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d008      	beq.n	8006a3c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	22ff      	movs	r2, #255	; 0xff
 8006a30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2204      	movs	r2, #4
 8006a36:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e05e      	b.n	8006afa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a4e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6899      	ldr	r1, [r3, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68d2      	ldr	r2, [r2, #12]
 8006a76:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6919      	ldr	r1, [r3, #16]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	041a      	lsls	r2, r3, #16
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a9a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10e      	bne.n	8006ac8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa3a 	bl	8006f24 <HAL_RTC_WaitForSynchro>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d008      	beq.n	8006ac8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	22ff      	movs	r2, #255	; 0xff
 8006abc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e018      	b.n	8006afa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ad6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699a      	ldr	r2, [r3, #24]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	22ff      	movs	r2, #255	; 0xff
 8006af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b02:	b590      	push	{r4, r7, lr}
 8006b04:	b087      	sub	sp, #28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	7f1b      	ldrb	r3, [r3, #28]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_RTC_SetTime+0x1c>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e0aa      	b.n	8006c74 <HAL_RTC_SetTime+0x172>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2202      	movs	r2, #2
 8006b28:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d126      	bne.n	8006b7e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d102      	bne.n	8006b44 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2200      	movs	r2, #0
 8006b42:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fa3f 	bl	8006fcc <RTC_ByteToBcd2>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 fa38 	bl	8006fcc <RTC_ByteToBcd2>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b60:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	789b      	ldrb	r3, [r3, #2]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fa30 	bl	8006fcc <RTC_ByteToBcd2>
 8006b6c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b6e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	78db      	ldrb	r3, [r3, #3]
 8006b76:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	e018      	b.n	8006bb0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d102      	bne.n	8006b92 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	785b      	ldrb	r3, [r3, #1]
 8006b9c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b9e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006ba4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	78db      	ldrb	r3, [r3, #3]
 8006baa:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	22ca      	movs	r2, #202	; 0xca
 8006bb6:	625a      	str	r2, [r3, #36]	; 0x24
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2253      	movs	r2, #83	; 0x53
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f9d7 	bl	8006f74 <RTC_EnterInitMode>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00b      	beq.n	8006be4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	22ff      	movs	r2, #255	; 0xff
 8006bd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e047      	b.n	8006c74 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006bee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006bf2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689a      	ldr	r2, [r3, #8]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6899      	ldr	r1, [r3, #8]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	431a      	orrs	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c2a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689b      	ldr	r3, [r3, #8]
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d111      	bne.n	8006c5e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 f972 	bl	8006f24 <HAL_RTC_WaitForSynchro>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00b      	beq.n	8006c5e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	22ff      	movs	r2, #255	; 0xff
 8006c4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2204      	movs	r2, #4
 8006c52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e00a      	b.n	8006c74 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	22ff      	movs	r2, #255	; 0xff
 8006c64:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006c72:	2300      	movs	r3, #0
  }
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd90      	pop	{r4, r7, pc}

08006c7c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	0c1b      	lsrs	r3, r3, #16
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	0a1b      	lsrs	r3, r3, #8
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	0c1b      	lsrs	r3, r3, #16
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d11a      	bne.n	8006d2e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f983 	bl	8007008 <RTC_Bcd2ToByte>
 8006d02:	4603      	mov	r3, r0
 8006d04:	461a      	mov	r2, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	785b      	ldrb	r3, [r3, #1]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 f97a 	bl	8007008 <RTC_Bcd2ToByte>
 8006d14:	4603      	mov	r3, r0
 8006d16:	461a      	mov	r2, r3
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	789b      	ldrb	r3, [r3, #2]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f971 	bl	8007008 <RTC_Bcd2ToByte>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d38:	b590      	push	{r4, r7, lr}
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	7f1b      	ldrb	r3, [r3, #28]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d101      	bne.n	8006d54 <HAL_RTC_SetDate+0x1c>
 8006d50:	2302      	movs	r3, #2
 8006d52:	e094      	b.n	8006e7e <HAL_RTC_SetDate+0x146>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10e      	bne.n	8006d84 <HAL_RTC_SetDate+0x4c>
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	785b      	ldrb	r3, [r3, #1]
 8006d6a:	f003 0310 	and.w	r3, r3, #16
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d008      	beq.n	8006d84 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	785b      	ldrb	r3, [r3, #1]
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	330a      	adds	r3, #10
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d11c      	bne.n	8006dc4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	78db      	ldrb	r3, [r3, #3]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 f91c 	bl	8006fcc <RTC_ByteToBcd2>
 8006d94:	4603      	mov	r3, r0
 8006d96:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 f915 	bl	8006fcc <RTC_ByteToBcd2>
 8006da2:	4603      	mov	r3, r0
 8006da4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006da6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	789b      	ldrb	r3, [r3, #2]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 f90d 	bl	8006fcc <RTC_ByteToBcd2>
 8006db2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006db4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	617b      	str	r3, [r7, #20]
 8006dc2:	e00e      	b.n	8006de2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	78db      	ldrb	r3, [r3, #3]
 8006dc8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006dd0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006dd6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	22ca      	movs	r2, #202	; 0xca
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2253      	movs	r2, #83	; 0x53
 8006df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 f8be 	bl	8006f74 <RTC_EnterInitMode>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	22ff      	movs	r2, #255	; 0xff
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2204      	movs	r2, #4
 8006e0a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e033      	b.n	8006e7e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e34:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d111      	bne.n	8006e68 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f86d 	bl	8006f24 <HAL_RTC_WaitForSynchro>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00b      	beq.n	8006e68 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	22ff      	movs	r2, #255	; 0xff
 8006e56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2204      	movs	r2, #4
 8006e5c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e00a      	b.n	8006e7e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	22ff      	movs	r2, #255	; 0xff
 8006e6e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2201      	movs	r2, #1
 8006e74:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
  }
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd90      	pop	{r4, r7, pc}

08006e86 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b086      	sub	sp, #24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ea0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	0c1b      	lsrs	r3, r3, #16
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	0b5b      	lsrs	r3, r3, #13
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	b2da      	uxtb	r2, r3
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d11a      	bne.n	8006f1a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	78db      	ldrb	r3, [r3, #3]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 f88d 	bl	8007008 <RTC_Bcd2ToByte>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	785b      	ldrb	r3, [r3, #1]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f884 	bl	8007008 <RTC_Bcd2ToByte>
 8006f00:	4603      	mov	r3, r0
 8006f02:	461a      	mov	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	789b      	ldrb	r3, [r3, #2]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 f87b 	bl	8007008 <RTC_Bcd2ToByte>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f40:	f7fc ff3a 	bl	8003db8 <HAL_GetTick>
 8006f44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006f46:	e009      	b.n	8006f5c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f48:	f7fc ff36 	bl	8003db8 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f56:	d901      	bls.n	8006f5c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e007      	b.n	8006f6c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0ee      	beq.n	8006f48 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
 8006f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d119      	bne.n	8006fc2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f04f 32ff 	mov.w	r2, #4294967295
 8006f96:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f98:	f7fc ff0e 	bl	8003db8 <HAL_GetTick>
 8006f9c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f9e:	e009      	b.n	8006fb4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006fa0:	f7fc ff0a 	bl	8003db8 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fae:	d901      	bls.n	8006fb4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	e007      	b.n	8006fc4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0ee      	beq.n	8006fa0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006fda:	e005      	b.n	8006fe8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	3b0a      	subs	r3, #10
 8006fe6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	2b09      	cmp	r3, #9
 8006fec:	d8f6      	bhi.n	8006fdc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	011b      	lsls	r3, r3, #4
 8006ff4:	b2da      	uxtb	r2, r3
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	b2db      	uxtb	r3, r3
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	091b      	lsrs	r3, r3, #4
 800701a:	b2db      	uxtb	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	f003 030f 	and.w	r3, r3, #15
 800702e:	b2da      	uxtb	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	4413      	add	r3, r2
 8007036:	b2db      	uxtb	r3, r3
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e056      	b.n	8007104 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b00      	cmp	r3, #0
 8007066:	d106      	bne.n	8007076 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fc fb05 	bl	8003680 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800708c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	431a      	orrs	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	431a      	orrs	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	431a      	orrs	r2, r3
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	ea42 0103 	orr.w	r1, r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	430a      	orrs	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	0c1b      	lsrs	r3, r3, #16
 80070d4:	f003 0104 	and.w	r1, r3, #4
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	69da      	ldr	r2, [r3, #28]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3708      	adds	r7, #8
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}

0800710c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b088      	sub	sp, #32
 8007110:	af02      	add	r7, sp, #8
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	603b      	str	r3, [r7, #0]
 8007118:	4613      	mov	r3, r2
 800711a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800711c:	2300      	movs	r3, #0
 800711e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007128:	d112      	bne.n	8007150 <HAL_SPI_Receive+0x44>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10e      	bne.n	8007150 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2204      	movs	r2, #4
 8007136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	4613      	mov	r3, r2
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f000 f8e9 	bl	800731e <HAL_SPI_TransmitReceive>
 800714c:	4603      	mov	r3, r0
 800714e:	e0e2      	b.n	8007316 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_SPI_Receive+0x52>
 800715a:	2302      	movs	r3, #2
 800715c:	e0db      	b.n	8007316 <HAL_SPI_Receive+0x20a>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007166:	f7fc fe27 	bl	8003db8 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b01      	cmp	r3, #1
 8007176:	d002      	beq.n	800717e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007178:	2302      	movs	r3, #2
 800717a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800717c:	e0c2      	b.n	8007304 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_SPI_Receive+0x7e>
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d102      	bne.n	8007190 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800718e:	e0b9      	b.n	8007304 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2204      	movs	r2, #4
 8007194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	88fa      	ldrh	r2, [r7, #6]
 80071ae:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071d6:	d107      	bne.n	80071e8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f2:	2b40      	cmp	r3, #64	; 0x40
 80071f4:	d007      	beq.n	8007206 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007204:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d162      	bne.n	80072d4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800720e:	e02e      	b.n	800726e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b01      	cmp	r3, #1
 800721c:	d115      	bne.n	800724a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f103 020c 	add.w	r2, r3, #12
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	7812      	ldrb	r2, [r2, #0]
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007248:	e011      	b.n	800726e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800724a:	f7fc fdb5 	bl	8003db8 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	683a      	ldr	r2, [r7, #0]
 8007256:	429a      	cmp	r2, r3
 8007258:	d803      	bhi.n	8007262 <HAL_SPI_Receive+0x156>
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d102      	bne.n	8007268 <HAL_SPI_Receive+0x15c>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d102      	bne.n	800726e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800726c:	e04a      	b.n	8007304 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1cb      	bne.n	8007210 <HAL_SPI_Receive+0x104>
 8007278:	e031      	b.n	80072de <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b01      	cmp	r3, #1
 8007286:	d113      	bne.n	80072b0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007292:	b292      	uxth	r2, r2
 8007294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729a:	1c9a      	adds	r2, r3, #2
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	3b01      	subs	r3, #1
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072ae:	e011      	b.n	80072d4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072b0:	f7fc fd82 	bl	8003db8 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d803      	bhi.n	80072c8 <HAL_SPI_Receive+0x1bc>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c6:	d102      	bne.n	80072ce <HAL_SPI_Receive+0x1c2>
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d102      	bne.n	80072d4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80072ce:	2303      	movs	r3, #3
 80072d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80072d2:	e017      	b.n	8007304 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1cd      	bne.n	800727a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fa27 	bl	8007736 <SPI_EndRxTransaction>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	75fb      	strb	r3, [r7, #23]
 8007300:	e000      	b.n	8007304 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007302:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b08c      	sub	sp, #48	; 0x30
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
 800732a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800732c:	2301      	movs	r3, #1
 800732e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007330:	2300      	movs	r3, #0
 8007332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800733c:	2b01      	cmp	r3, #1
 800733e:	d101      	bne.n	8007344 <HAL_SPI_TransmitReceive+0x26>
 8007340:	2302      	movs	r3, #2
 8007342:	e18a      	b.n	800765a <HAL_SPI_TransmitReceive+0x33c>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800734c:	f7fc fd34 	bl	8003db8 <HAL_GetTick>
 8007350:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007358:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007362:	887b      	ldrh	r3, [r7, #2]
 8007364:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007366:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800736a:	2b01      	cmp	r3, #1
 800736c:	d00f      	beq.n	800738e <HAL_SPI_TransmitReceive+0x70>
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007374:	d107      	bne.n	8007386 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <HAL_SPI_TransmitReceive+0x68>
 800737e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007382:	2b04      	cmp	r3, #4
 8007384:	d003      	beq.n	800738e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007386:	2302      	movs	r3, #2
 8007388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800738c:	e15b      	b.n	8007646 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <HAL_SPI_TransmitReceive+0x82>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_SPI_TransmitReceive+0x82>
 800739a:	887b      	ldrh	r3, [r7, #2]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d103      	bne.n	80073a8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80073a6:	e14e      	b.n	8007646 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d003      	beq.n	80073bc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2205      	movs	r2, #5
 80073b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	887a      	ldrh	r2, [r7, #2]
 80073cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	887a      	ldrh	r2, [r7, #2]
 80073d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	887a      	ldrh	r2, [r7, #2]
 80073de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	887a      	ldrh	r2, [r7, #2]
 80073e4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2200      	movs	r2, #0
 80073ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fc:	2b40      	cmp	r3, #64	; 0x40
 80073fe:	d007      	beq.n	8007410 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800740e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007418:	d178      	bne.n	800750c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_SPI_TransmitReceive+0x10a>
 8007422:	8b7b      	ldrh	r3, [r7, #26]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d166      	bne.n	80074f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	881a      	ldrh	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007438:	1c9a      	adds	r2, r3, #2
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007442:	b29b      	uxth	r3, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	b29a      	uxth	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800744c:	e053      	b.n	80074f6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b02      	cmp	r3, #2
 800745a:	d11b      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x176>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007460:	b29b      	uxth	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d016      	beq.n	8007494 <HAL_SPI_TransmitReceive+0x176>
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d113      	bne.n	8007494 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007470:	881a      	ldrh	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	1c9a      	adds	r2, r3, #2
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007486:	b29b      	uxth	r3, r3
 8007488:	3b01      	subs	r3, #1
 800748a:	b29a      	uxth	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d119      	bne.n	80074d6 <HAL_SPI_TransmitReceive+0x1b8>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d014      	beq.n	80074d6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68da      	ldr	r2, [r3, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b6:	b292      	uxth	r2, r2
 80074b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074be:	1c9a      	adds	r2, r3, #2
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074d2:	2301      	movs	r3, #1
 80074d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074d6:	f7fc fc6f 	bl	8003db8 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d807      	bhi.n	80074f6 <HAL_SPI_TransmitReceive+0x1d8>
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ec:	d003      	beq.n	80074f6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074f4:	e0a7      	b.n	8007646 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1a6      	bne.n	800744e <HAL_SPI_TransmitReceive+0x130>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1a1      	bne.n	800744e <HAL_SPI_TransmitReceive+0x130>
 800750a:	e07c      	b.n	8007606 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_SPI_TransmitReceive+0x1fc>
 8007514:	8b7b      	ldrh	r3, [r7, #26]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d16b      	bne.n	80075f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	330c      	adds	r3, #12
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007536:	b29b      	uxth	r3, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007540:	e057      	b.n	80075f2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f003 0302 	and.w	r3, r3, #2
 800754c:	2b02      	cmp	r3, #2
 800754e:	d11c      	bne.n	800758a <HAL_SPI_TransmitReceive+0x26c>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d017      	beq.n	800758a <HAL_SPI_TransmitReceive+0x26c>
 800755a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755c:	2b01      	cmp	r3, #1
 800755e:	d114      	bne.n	800758a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	330c      	adds	r3, #12
 800756a:	7812      	ldrb	r2, [r2, #0]
 800756c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007572:	1c5a      	adds	r2, r3, #1
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b01      	cmp	r3, #1
 8007596:	d119      	bne.n	80075cc <HAL_SPI_TransmitReceive+0x2ae>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d014      	beq.n	80075cc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	b2d2      	uxtb	r2, r2
 80075ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	1c5a      	adds	r2, r3, #1
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075c8:	2301      	movs	r3, #1
 80075ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075cc:	f7fc fbf4 	bl	8003db8 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d8:	429a      	cmp	r2, r3
 80075da:	d803      	bhi.n	80075e4 <HAL_SPI_TransmitReceive+0x2c6>
 80075dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e2:	d102      	bne.n	80075ea <HAL_SPI_TransmitReceive+0x2cc>
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d103      	bne.n	80075f2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075f0:	e029      	b.n	8007646 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1a2      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x224>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d19d      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007608:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 f8f8 	bl	8007800 <SPI_EndRxTxTransaction>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2220      	movs	r2, #32
 8007620:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007622:	e010      	b.n	8007646 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10b      	bne.n	8007644 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	617b      	str	r3, [r7, #20]
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	e000      	b.n	8007646 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007644:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007656:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800765a:	4618      	mov	r0, r3
 800765c:	3730      	adds	r7, #48	; 0x30
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	60b9      	str	r1, [r7, #8]
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007672:	e04c      	b.n	800770e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767a:	d048      	beq.n	800770e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800767c:	f7fc fb9c 	bl	8003db8 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d902      	bls.n	8007692 <SPI_WaitFlagStateUntilTimeout+0x30>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d13d      	bne.n	800770e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80076a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076aa:	d111      	bne.n	80076d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076b4:	d004      	beq.n	80076c0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076be:	d107      	bne.n	80076d0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d8:	d10f      	bne.n	80076fa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e00f      	b.n	800772e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	4013      	ands	r3, r2
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	429a      	cmp	r2, r3
 800771c:	bf0c      	ite	eq
 800771e:	2301      	moveq	r3, #1
 8007720:	2300      	movne	r3, #0
 8007722:	b2db      	uxtb	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	429a      	cmp	r2, r3
 800772a:	d1a3      	bne.n	8007674 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b086      	sub	sp, #24
 800773a:	af02      	add	r7, sp, #8
 800773c:	60f8      	str	r0, [r7, #12]
 800773e:	60b9      	str	r1, [r7, #8]
 8007740:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800774a:	d111      	bne.n	8007770 <SPI_EndRxTransaction+0x3a>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007754:	d004      	beq.n	8007760 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800775e:	d107      	bne.n	8007770 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800776e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007778:	d12a      	bne.n	80077d0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007782:	d012      	beq.n	80077aa <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	2180      	movs	r1, #128	; 0x80
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff ff67 	bl	8007662 <SPI_WaitFlagStateUntilTimeout>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d02d      	beq.n	80077f6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779e:	f043 0220 	orr.w	r2, r3, #32
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e026      	b.n	80077f8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2200      	movs	r2, #0
 80077b2:	2101      	movs	r1, #1
 80077b4:	68f8      	ldr	r0, [r7, #12]
 80077b6:	f7ff ff54 	bl	8007662 <SPI_WaitFlagStateUntilTimeout>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d01a      	beq.n	80077f6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c4:	f043 0220 	orr.w	r2, r3, #32
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e013      	b.n	80077f8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2200      	movs	r2, #0
 80077d8:	2101      	movs	r1, #1
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f7ff ff41 	bl	8007662 <SPI_WaitFlagStateUntilTimeout>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d007      	beq.n	80077f6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ea:	f043 0220 	orr.w	r2, r3, #32
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e000      	b.n	80077f8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af02      	add	r7, sp, #8
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800780c:	4b1b      	ldr	r3, [pc, #108]	; (800787c <SPI_EndRxTxTransaction+0x7c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a1b      	ldr	r2, [pc, #108]	; (8007880 <SPI_EndRxTxTransaction+0x80>)
 8007812:	fba2 2303 	umull	r2, r3, r2, r3
 8007816:	0d5b      	lsrs	r3, r3, #21
 8007818:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800781c:	fb02 f303 	mul.w	r3, r2, r3
 8007820:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800782a:	d112      	bne.n	8007852 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2200      	movs	r2, #0
 8007834:	2180      	movs	r1, #128	; 0x80
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f7ff ff13 	bl	8007662 <SPI_WaitFlagStateUntilTimeout>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007846:	f043 0220 	orr.w	r2, r3, #32
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e00f      	b.n	8007872 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00a      	beq.n	800786e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	3b01      	subs	r3, #1
 800785c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007868:	2b80      	cmp	r3, #128	; 0x80
 800786a:	d0f2      	beq.n	8007852 <SPI_EndRxTxTransaction+0x52>
 800786c:	e000      	b.n	8007870 <SPI_EndRxTxTransaction+0x70>
        break;
 800786e:	bf00      	nop
  }

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	20000000 	.word	0x20000000
 8007880:	165e9f81 	.word	0x165e9f81

08007884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e01d      	b.n	80078d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d106      	bne.n	80078b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fb ff9e 	bl	80037ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	3304      	adds	r3, #4
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f000 fbb2 	bl	800802c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078da:	b480      	push	{r7}
 80078dc:	b085      	sub	sp, #20
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68da      	ldr	r2, [r3, #12]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0201 	orr.w	r2, r2, #1
 80078f0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2b06      	cmp	r3, #6
 8007902:	d007      	beq.n	8007914 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0201 	orr.w	r2, r2, #1
 8007912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e01d      	b.n	8007970 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d106      	bne.n	800794e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 f815 	bl	8007978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	3304      	adds	r3, #4
 800795e:	4619      	mov	r1, r3
 8007960:	4610      	mov	r0, r2
 8007962:	f000 fb63 	bl	800802c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2201      	movs	r2, #1
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fe2e 	bl	8008600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a15      	ldr	r2, [pc, #84]	; (8007a00 <HAL_TIM_PWM_Start+0x74>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_TIM_PWM_Start+0x2c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a14      	ldr	r2, [pc, #80]	; (8007a04 <HAL_TIM_PWM_Start+0x78>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d101      	bne.n	80079bc <HAL_TIM_PWM_Start+0x30>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <HAL_TIM_PWM_Start+0x32>
 80079bc:	2300      	movs	r3, #0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079d0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 0307 	and.w	r3, r3, #7
 80079dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b06      	cmp	r3, #6
 80079e2:	d007      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f042 0201 	orr.w	r2, r2, #1
 80079f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40010400 	.word	0x40010400

08007a08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2200      	movs	r2, #0
 8007a18:	6839      	ldr	r1, [r7, #0]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f000 fdf0 	bl	8008600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a22      	ldr	r2, [pc, #136]	; (8007ab0 <HAL_TIM_PWM_Stop+0xa8>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d004      	beq.n	8007a34 <HAL_TIM_PWM_Stop+0x2c>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a21      	ldr	r2, [pc, #132]	; (8007ab4 <HAL_TIM_PWM_Stop+0xac>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d101      	bne.n	8007a38 <HAL_TIM_PWM_Stop+0x30>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <HAL_TIM_PWM_Stop+0x32>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d017      	beq.n	8007a6e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	6a1a      	ldr	r2, [r3, #32]
 8007a44:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a48:	4013      	ands	r3, r2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10f      	bne.n	8007a6e <HAL_TIM_PWM_Stop+0x66>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6a1a      	ldr	r2, [r3, #32]
 8007a54:	f240 4344 	movw	r3, #1092	; 0x444
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d107      	bne.n	8007a6e <HAL_TIM_PWM_Stop+0x66>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6a1a      	ldr	r2, [r3, #32]
 8007a74:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a78:	4013      	ands	r3, r2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d10f      	bne.n	8007a9e <HAL_TIM_PWM_Stop+0x96>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6a1a      	ldr	r2, [r3, #32]
 8007a84:	f240 4344 	movw	r3, #1092	; 0x444
 8007a88:	4013      	ands	r3, r2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d107      	bne.n	8007a9e <HAL_TIM_PWM_Stop+0x96>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0201 	bic.w	r2, r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40010000 	.word	0x40010000
 8007ab4:	40010400 	.word	0x40010400

08007ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d122      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d11b      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0202 	mvn.w	r2, #2
 8007ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fa78 	bl	8007ff0 <HAL_TIM_IC_CaptureCallback>
 8007b00:	e005      	b.n	8007b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa6a 	bl	8007fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fa7b 	bl	8008004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d122      	bne.n	8007b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d11b      	bne.n	8007b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0204 	mvn.w	r2, #4
 8007b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa4e 	bl	8007ff0 <HAL_TIM_IC_CaptureCallback>
 8007b54:	e005      	b.n	8007b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa40 	bl	8007fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fa51 	bl	8008004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b08      	cmp	r3, #8
 8007b74:	d122      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d11b      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f06f 0208 	mvn.w	r2, #8
 8007b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2204      	movs	r2, #4
 8007b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa24 	bl	8007ff0 <HAL_TIM_IC_CaptureCallback>
 8007ba8:	e005      	b.n	8007bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa16 	bl	8007fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fa27 	bl	8008004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 0310 	and.w	r3, r3, #16
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d122      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	2b10      	cmp	r3, #16
 8007bd6:	d11b      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f06f 0210 	mvn.w	r2, #16
 8007be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2208      	movs	r2, #8
 8007be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f9fa 	bl	8007ff0 <HAL_TIM_IC_CaptureCallback>
 8007bfc:	e005      	b.n	8007c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f9ec 	bl	8007fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f9fd 	bl	8008004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d10e      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d107      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0201 	mvn.w	r2, #1
 8007c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7fb f88a 	bl	8002d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c46:	2b80      	cmp	r3, #128	; 0x80
 8007c48:	d10e      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c54:	2b80      	cmp	r3, #128	; 0x80
 8007c56:	d107      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fd78 	bl	8008758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d10e      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c80:	2b40      	cmp	r3, #64	; 0x40
 8007c82:	d107      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f9c2 	bl	8008018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d10e      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d107      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0220 	mvn.w	r2, #32
 8007cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fd42 	bl	8008744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d101      	bne.n	8007ce2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	e0b4      	b.n	8007e4c <HAL_TIM_PWM_ConfigChannel+0x184>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2202      	movs	r2, #2
 8007cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b0c      	cmp	r3, #12
 8007cf6:	f200 809f 	bhi.w	8007e38 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007cfa:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d35 	.word	0x08007d35
 8007d04:	08007e39 	.word	0x08007e39
 8007d08:	08007e39 	.word	0x08007e39
 8007d0c:	08007e39 	.word	0x08007e39
 8007d10:	08007d75 	.word	0x08007d75
 8007d14:	08007e39 	.word	0x08007e39
 8007d18:	08007e39 	.word	0x08007e39
 8007d1c:	08007e39 	.word	0x08007e39
 8007d20:	08007db7 	.word	0x08007db7
 8007d24:	08007e39 	.word	0x08007e39
 8007d28:	08007e39 	.word	0x08007e39
 8007d2c:	08007e39 	.word	0x08007e39
 8007d30:	08007df7 	.word	0x08007df7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68b9      	ldr	r1, [r7, #8]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fa16 	bl	800816c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0208 	orr.w	r2, r2, #8
 8007d4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0204 	bic.w	r2, r2, #4
 8007d5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6999      	ldr	r1, [r3, #24]
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	691a      	ldr	r2, [r3, #16]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	619a      	str	r2, [r3, #24]
      break;
 8007d72:	e062      	b.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68b9      	ldr	r1, [r7, #8]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fa66 	bl	800824c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	699a      	ldr	r2, [r3, #24]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6999      	ldr	r1, [r3, #24]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	021a      	lsls	r2, r3, #8
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	430a      	orrs	r2, r1
 8007db2:	619a      	str	r2, [r3, #24]
      break;
 8007db4:	e041      	b.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 fabb 	bl	8008338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69da      	ldr	r2, [r3, #28]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0208 	orr.w	r2, r2, #8
 8007dd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0204 	bic.w	r2, r2, #4
 8007de0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69d9      	ldr	r1, [r3, #28]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	691a      	ldr	r2, [r3, #16]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	61da      	str	r2, [r3, #28]
      break;
 8007df4:	e021      	b.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68b9      	ldr	r1, [r7, #8]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 fb0f 	bl	8008420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	69da      	ldr	r2, [r3, #28]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69d9      	ldr	r1, [r3, #28]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	021a      	lsls	r2, r3, #8
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	61da      	str	r2, [r3, #28]
      break;
 8007e36:	e000      	b.n	8007e3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007e38:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d101      	bne.n	8007e6c <HAL_TIM_ConfigClockSource+0x18>
 8007e68:	2302      	movs	r3, #2
 8007e6a:	e0b3      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x180>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ea4:	d03e      	beq.n	8007f24 <HAL_TIM_ConfigClockSource+0xd0>
 8007ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eaa:	f200 8087 	bhi.w	8007fbc <HAL_TIM_ConfigClockSource+0x168>
 8007eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb2:	f000 8085 	beq.w	8007fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8007eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eba:	d87f      	bhi.n	8007fbc <HAL_TIM_ConfigClockSource+0x168>
 8007ebc:	2b70      	cmp	r3, #112	; 0x70
 8007ebe:	d01a      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0xa2>
 8007ec0:	2b70      	cmp	r3, #112	; 0x70
 8007ec2:	d87b      	bhi.n	8007fbc <HAL_TIM_ConfigClockSource+0x168>
 8007ec4:	2b60      	cmp	r3, #96	; 0x60
 8007ec6:	d050      	beq.n	8007f6a <HAL_TIM_ConfigClockSource+0x116>
 8007ec8:	2b60      	cmp	r3, #96	; 0x60
 8007eca:	d877      	bhi.n	8007fbc <HAL_TIM_ConfigClockSource+0x168>
 8007ecc:	2b50      	cmp	r3, #80	; 0x50
 8007ece:	d03c      	beq.n	8007f4a <HAL_TIM_ConfigClockSource+0xf6>
 8007ed0:	2b50      	cmp	r3, #80	; 0x50
 8007ed2:	d873      	bhi.n	8007fbc <HAL_TIM_ConfigClockSource+0x168>
 8007ed4:	2b40      	cmp	r3, #64	; 0x40
 8007ed6:	d058      	beq.n	8007f8a <HAL_TIM_ConfigClockSource+0x136>
 8007ed8:	2b40      	cmp	r3, #64	; 0x40
 8007eda:	d86f      	bhi.n	8007fbc <HAL_TIM_ConfigClockSource+0x168>
 8007edc:	2b30      	cmp	r3, #48	; 0x30
 8007ede:	d064      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0x156>
 8007ee0:	2b30      	cmp	r3, #48	; 0x30
 8007ee2:	d86b      	bhi.n	8007fbc <HAL_TIM_ConfigClockSource+0x168>
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d060      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0x156>
 8007ee8:	2b20      	cmp	r3, #32
 8007eea:	d867      	bhi.n	8007fbc <HAL_TIM_ConfigClockSource+0x168>
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d05c      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0x156>
 8007ef0:	2b10      	cmp	r3, #16
 8007ef2:	d05a      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007ef4:	e062      	b.n	8007fbc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6818      	ldr	r0, [r3, #0]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	6899      	ldr	r1, [r3, #8]
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f000 fb5b 	bl	80085c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	609a      	str	r2, [r3, #8]
      break;
 8007f22:	e04e      	b.n	8007fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	6899      	ldr	r1, [r3, #8]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f000 fb44 	bl	80085c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689a      	ldr	r2, [r3, #8]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f46:	609a      	str	r2, [r3, #8]
      break;
 8007f48:	e03b      	b.n	8007fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6818      	ldr	r0, [r3, #0]
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	6859      	ldr	r1, [r3, #4]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f000 fab8 	bl	80084cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2150      	movs	r1, #80	; 0x50
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 fb11 	bl	800858a <TIM_ITRx_SetConfig>
      break;
 8007f68:	e02b      	b.n	8007fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	6859      	ldr	r1, [r3, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	461a      	mov	r2, r3
 8007f78:	f000 fad7 	bl	800852a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2160      	movs	r1, #96	; 0x60
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fb01 	bl	800858a <TIM_ITRx_SetConfig>
      break;
 8007f88:	e01b      	b.n	8007fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	6859      	ldr	r1, [r3, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f000 fa98 	bl	80084cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2140      	movs	r1, #64	; 0x40
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 faf1 	bl	800858a <TIM_ITRx_SetConfig>
      break;
 8007fa8:	e00b      	b.n	8007fc2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	f000 fae8 	bl	800858a <TIM_ITRx_SetConfig>
      break;
 8007fba:	e002      	b.n	8007fc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e000      	b.n	8007fc2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007fc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ff8:	bf00      	nop
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a40      	ldr	r2, [pc, #256]	; (8008140 <TIM_Base_SetConfig+0x114>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d013      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800804a:	d00f      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a3d      	ldr	r2, [pc, #244]	; (8008144 <TIM_Base_SetConfig+0x118>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00b      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a3c      	ldr	r2, [pc, #240]	; (8008148 <TIM_Base_SetConfig+0x11c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d007      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a3b      	ldr	r2, [pc, #236]	; (800814c <TIM_Base_SetConfig+0x120>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d003      	beq.n	800806c <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a3a      	ldr	r2, [pc, #232]	; (8008150 <TIM_Base_SetConfig+0x124>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d108      	bne.n	800807e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a2f      	ldr	r2, [pc, #188]	; (8008140 <TIM_Base_SetConfig+0x114>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d02b      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808c:	d027      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a2c      	ldr	r2, [pc, #176]	; (8008144 <TIM_Base_SetConfig+0x118>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d023      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2b      	ldr	r2, [pc, #172]	; (8008148 <TIM_Base_SetConfig+0x11c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d01f      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a2a      	ldr	r2, [pc, #168]	; (800814c <TIM_Base_SetConfig+0x120>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d01b      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a29      	ldr	r2, [pc, #164]	; (8008150 <TIM_Base_SetConfig+0x124>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d017      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a28      	ldr	r2, [pc, #160]	; (8008154 <TIM_Base_SetConfig+0x128>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a27      	ldr	r2, [pc, #156]	; (8008158 <TIM_Base_SetConfig+0x12c>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00f      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a26      	ldr	r2, [pc, #152]	; (800815c <TIM_Base_SetConfig+0x130>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00b      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a25      	ldr	r2, [pc, #148]	; (8008160 <TIM_Base_SetConfig+0x134>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d007      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a24      	ldr	r2, [pc, #144]	; (8008164 <TIM_Base_SetConfig+0x138>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a23      	ldr	r2, [pc, #140]	; (8008168 <TIM_Base_SetConfig+0x13c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d108      	bne.n	80080f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a0a      	ldr	r2, [pc, #40]	; (8008140 <TIM_Base_SetConfig+0x114>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d003      	beq.n	8008124 <TIM_Base_SetConfig+0xf8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a0c      	ldr	r2, [pc, #48]	; (8008150 <TIM_Base_SetConfig+0x124>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d103      	bne.n	800812c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	615a      	str	r2, [r3, #20]
}
 8008132:	bf00      	nop
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	40010000 	.word	0x40010000
 8008144:	40000400 	.word	0x40000400
 8008148:	40000800 	.word	0x40000800
 800814c:	40000c00 	.word	0x40000c00
 8008150:	40010400 	.word	0x40010400
 8008154:	40014000 	.word	0x40014000
 8008158:	40014400 	.word	0x40014400
 800815c:	40014800 	.word	0x40014800
 8008160:	40001800 	.word	0x40001800
 8008164:	40001c00 	.word	0x40001c00
 8008168:	40002000 	.word	0x40002000

0800816c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	f023 0201 	bic.w	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800819a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 0303 	bic.w	r3, r3, #3
 80081a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f023 0302 	bic.w	r3, r3, #2
 80081b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a20      	ldr	r2, [pc, #128]	; (8008244 <TIM_OC1_SetConfig+0xd8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d003      	beq.n	80081d0 <TIM_OC1_SetConfig+0x64>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a1f      	ldr	r2, [pc, #124]	; (8008248 <TIM_OC1_SetConfig+0xdc>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10c      	bne.n	80081ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f023 0308 	bic.w	r3, r3, #8
 80081d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f023 0304 	bic.w	r3, r3, #4
 80081e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a15      	ldr	r2, [pc, #84]	; (8008244 <TIM_OC1_SetConfig+0xd8>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d003      	beq.n	80081fa <TIM_OC1_SetConfig+0x8e>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a14      	ldr	r2, [pc, #80]	; (8008248 <TIM_OC1_SetConfig+0xdc>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d111      	bne.n	800821e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	693a      	ldr	r2, [r7, #16]
 800821a:	4313      	orrs	r3, r2
 800821c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	693a      	ldr	r2, [r7, #16]
 8008222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	621a      	str	r2, [r3, #32]
}
 8008238:	bf00      	nop
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	40010000 	.word	0x40010000
 8008248:	40010400 	.word	0x40010400

0800824c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	f023 0210 	bic.w	r2, r3, #16
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f023 0320 	bic.w	r3, r3, #32
 8008296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	697a      	ldr	r2, [r7, #20]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a22      	ldr	r2, [pc, #136]	; (8008330 <TIM_OC2_SetConfig+0xe4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d003      	beq.n	80082b4 <TIM_OC2_SetConfig+0x68>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a21      	ldr	r2, [pc, #132]	; (8008334 <TIM_OC2_SetConfig+0xe8>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d10d      	bne.n	80082d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a17      	ldr	r2, [pc, #92]	; (8008330 <TIM_OC2_SetConfig+0xe4>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d003      	beq.n	80082e0 <TIM_OC2_SetConfig+0x94>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a16      	ldr	r2, [pc, #88]	; (8008334 <TIM_OC2_SetConfig+0xe8>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d113      	bne.n	8008308 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	695b      	ldr	r3, [r3, #20]
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	4313      	orrs	r3, r2
 8008306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	621a      	str	r2, [r3, #32]
}
 8008322:	bf00      	nop
 8008324:	371c      	adds	r7, #28
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40010000 	.word	0x40010000
 8008334:	40010400 	.word	0x40010400

08008338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f023 0303 	bic.w	r3, r3, #3
 800836e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4313      	orrs	r3, r2
 8008378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	021b      	lsls	r3, r3, #8
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	4313      	orrs	r3, r2
 800838c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a21      	ldr	r2, [pc, #132]	; (8008418 <TIM_OC3_SetConfig+0xe0>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d003      	beq.n	800839e <TIM_OC3_SetConfig+0x66>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a20      	ldr	r2, [pc, #128]	; (800841c <TIM_OC3_SetConfig+0xe4>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d10d      	bne.n	80083ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	021b      	lsls	r3, r3, #8
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a16      	ldr	r2, [pc, #88]	; (8008418 <TIM_OC3_SetConfig+0xe0>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d003      	beq.n	80083ca <TIM_OC3_SetConfig+0x92>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a15      	ldr	r2, [pc, #84]	; (800841c <TIM_OC3_SetConfig+0xe4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d113      	bne.n	80083f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80083d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80083d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	011b      	lsls	r3, r3, #4
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	621a      	str	r2, [r3, #32]
}
 800840c:	bf00      	nop
 800840e:	371c      	adds	r7, #28
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr
 8008418:	40010000 	.word	0x40010000
 800841c:	40010400 	.word	0x40010400

08008420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800844e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	021b      	lsls	r3, r3, #8
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800846a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	031b      	lsls	r3, r3, #12
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	4313      	orrs	r3, r2
 8008476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a12      	ldr	r2, [pc, #72]	; (80084c4 <TIM_OC4_SetConfig+0xa4>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d003      	beq.n	8008488 <TIM_OC4_SetConfig+0x68>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a11      	ldr	r2, [pc, #68]	; (80084c8 <TIM_OC4_SetConfig+0xa8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d109      	bne.n	800849c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800848e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	019b      	lsls	r3, r3, #6
 8008496:	697a      	ldr	r2, [r7, #20]
 8008498:	4313      	orrs	r3, r2
 800849a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	621a      	str	r2, [r3, #32]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	40010000 	.word	0x40010000
 80084c8:	40010400 	.word	0x40010400

080084cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	f023 0201 	bic.w	r2, r3, #1
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	4313      	orrs	r3, r2
 8008500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f023 030a 	bic.w	r3, r3, #10
 8008508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4313      	orrs	r3, r2
 8008510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	621a      	str	r2, [r3, #32]
}
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800852a:	b480      	push	{r7}
 800852c:	b087      	sub	sp, #28
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	f023 0210 	bic.w	r2, r3, #16
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	031b      	lsls	r3, r3, #12
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4313      	orrs	r3, r2
 800855e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800858a:	b480      	push	{r7}
 800858c:	b085      	sub	sp, #20
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
 8008592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	f043 0307 	orr.w	r3, r3, #7
 80085ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	609a      	str	r2, [r3, #8]
}
 80085b4:	bf00      	nop
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	021a      	lsls	r2, r3, #8
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	609a      	str	r2, [r3, #8]
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f003 031f 	and.w	r3, r3, #31
 8008612:	2201      	movs	r2, #1
 8008614:	fa02 f303 	lsl.w	r3, r2, r3
 8008618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6a1a      	ldr	r2, [r3, #32]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	43db      	mvns	r3, r3
 8008622:	401a      	ands	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1a      	ldr	r2, [r3, #32]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f003 031f 	and.w	r3, r3, #31
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	fa01 f303 	lsl.w	r3, r1, r3
 8008638:	431a      	orrs	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	621a      	str	r2, [r3, #32]
}
 800863e:	bf00      	nop
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800865c:	2b01      	cmp	r3, #1
 800865e:	d101      	bne.n	8008664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008660:	2302      	movs	r3, #2
 8008662:	e05a      	b.n	800871a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68fa      	ldr	r2, [r7, #12]
 800869c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a21      	ldr	r2, [pc, #132]	; (8008728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d022      	beq.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b0:	d01d      	beq.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a1d      	ldr	r2, [pc, #116]	; (800872c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d018      	beq.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a1b      	ldr	r2, [pc, #108]	; (8008730 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d013      	beq.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a1a      	ldr	r2, [pc, #104]	; (8008734 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d00e      	beq.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a18      	ldr	r2, [pc, #96]	; (8008738 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d009      	beq.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a17      	ldr	r2, [pc, #92]	; (800873c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d004      	beq.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a15      	ldr	r2, [pc, #84]	; (8008740 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d10c      	bne.n	8008708 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	40010000 	.word	0x40010000
 800872c:	40000400 	.word	0x40000400
 8008730:	40000800 	.word	0x40000800
 8008734:	40000c00 	.word	0x40000c00
 8008738:	40010400 	.word	0x40010400
 800873c:	40014000 	.word	0x40014000
 8008740:	40001800 	.word	0x40001800

08008744 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d101      	bne.n	800877e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	e03f      	b.n	80087fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d106      	bne.n	8008798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7fb f89e 	bl	80038d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2224      	movs	r2, #36	; 0x24
 800879c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fb4b 	bl	8008e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	691a      	ldr	r2, [r3, #16]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695a      	ldr	r2, [r3, #20]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b088      	sub	sp, #32
 800880a:	af02      	add	r7, sp, #8
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	603b      	str	r3, [r7, #0]
 8008812:	4613      	mov	r3, r2
 8008814:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b20      	cmp	r3, #32
 8008824:	f040 8083 	bne.w	800892e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <HAL_UART_Transmit+0x2e>
 800882e:	88fb      	ldrh	r3, [r7, #6]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008834:	2301      	movs	r3, #1
 8008836:	e07b      	b.n	8008930 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800883e:	2b01      	cmp	r3, #1
 8008840:	d101      	bne.n	8008846 <HAL_UART_Transmit+0x40>
 8008842:	2302      	movs	r3, #2
 8008844:	e074      	b.n	8008930 <HAL_UART_Transmit+0x12a>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2221      	movs	r2, #33	; 0x21
 8008858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800885c:	f7fb faac 	bl	8003db8 <HAL_GetTick>
 8008860:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	88fa      	ldrh	r2, [r7, #6]
 8008866:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	88fa      	ldrh	r2, [r7, #6]
 800886c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008876:	e042      	b.n	80088fe <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800887c:	b29b      	uxth	r3, r3
 800887e:	3b01      	subs	r3, #1
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800888e:	d122      	bne.n	80088d6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2200      	movs	r2, #0
 8008898:	2180      	movs	r1, #128	; 0x80
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 f96a 	bl	8008b74 <UART_WaitOnFlagUntilTimeout>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e042      	b.n	8008930 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	881b      	ldrh	r3, [r3, #0]
 80088b2:	461a      	mov	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088bc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d103      	bne.n	80088ce <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	3302      	adds	r3, #2
 80088ca:	60bb      	str	r3, [r7, #8]
 80088cc:	e017      	b.n	80088fe <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	3301      	adds	r3, #1
 80088d2:	60bb      	str	r3, [r7, #8]
 80088d4:	e013      	b.n	80088fe <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2200      	movs	r2, #0
 80088de:	2180      	movs	r1, #128	; 0x80
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f947 	bl	8008b74 <UART_WaitOnFlagUntilTimeout>
 80088e6:	4603      	mov	r3, r0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d001      	beq.n	80088f0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80088ec:	2303      	movs	r3, #3
 80088ee:	e01f      	b.n	8008930 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	60ba      	str	r2, [r7, #8]
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1b7      	bne.n	8008878 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	9300      	str	r3, [sp, #0]
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2200      	movs	r2, #0
 8008910:	2140      	movs	r1, #64	; 0x40
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f000 f92e 	bl	8008b74 <UART_WaitOnFlagUntilTimeout>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e006      	b.n	8008930 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2220      	movs	r2, #32
 8008926:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	e000      	b.n	8008930 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800892e:	2302      	movs	r3, #2
  }
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
 8008956:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008958:	2300      	movs	r3, #0
 800895a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800895c:	2300      	movs	r3, #0
 800895e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d10d      	bne.n	800898a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d008      	beq.n	800898a <HAL_UART_IRQHandler+0x52>
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	f003 0320 	and.w	r3, r3, #32
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f9e0 	bl	8008d48 <UART_Receive_IT>
      return;
 8008988:	e0d0      	b.n	8008b2c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 80b0 	beq.w	8008af2 <HAL_UART_IRQHandler+0x1ba>
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d105      	bne.n	80089a8 <HAL_UART_IRQHandler+0x70>
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 80a5 	beq.w	8008af2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <HAL_UART_IRQHandler+0x90>
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c0:	f043 0201 	orr.w	r2, r3, #1
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <HAL_UART_IRQHandler+0xb0>
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d005      	beq.n	80089e8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e0:	f043 0202 	orr.w	r2, r3, #2
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f003 0302 	and.w	r3, r3, #2
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <HAL_UART_IRQHandler+0xd0>
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d005      	beq.n	8008a08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a00:	f043 0204 	orr.w	r2, r3, #4
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00f      	beq.n	8008a32 <HAL_UART_IRQHandler+0xfa>
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <HAL_UART_IRQHandler+0xee>
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d005      	beq.n	8008a32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2a:	f043 0208 	orr.w	r2, r3, #8
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d077      	beq.n	8008b2a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d007      	beq.n	8008a54 <HAL_UART_IRQHandler+0x11c>
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f97a 	bl	8008d48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5e:	2b40      	cmp	r3, #64	; 0x40
 8008a60:	bf0c      	ite	eq
 8008a62:	2301      	moveq	r3, #1
 8008a64:	2300      	movne	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d102      	bne.n	8008a7c <HAL_UART_IRQHandler+0x144>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d031      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f8c3 	bl	8008c08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a8c:	2b40      	cmp	r3, #64	; 0x40
 8008a8e:	d123      	bne.n	8008ad8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695a      	ldr	r2, [r3, #20]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d013      	beq.n	8008ad0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aac:	4a21      	ldr	r2, [pc, #132]	; (8008b34 <HAL_UART_IRQHandler+0x1fc>)
 8008aae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7fb febc 	bl	8004832 <HAL_DMA_Abort_IT>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d016      	beq.n	8008aee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008aca:	4610      	mov	r0, r2
 8008acc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ace:	e00e      	b.n	8008aee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f845 	bl	8008b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad6:	e00a      	b.n	8008aee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f841 	bl	8008b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ade:	e006      	b.n	8008aee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f83d 	bl	8008b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008aec:	e01d      	b.n	8008b2a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aee:	bf00      	nop
    return;
 8008af0:	e01b      	b.n	8008b2a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d008      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f8b0 	bl	8008c6c <UART_Transmit_IT>
    return;
 8008b0c:	e00e      	b.n	8008b2c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d009      	beq.n	8008b2c <HAL_UART_IRQHandler+0x1f4>
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d004      	beq.n	8008b2c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f8f8 	bl	8008d18 <UART_EndTransmit_IT>
    return;
 8008b28:	e000      	b.n	8008b2c <HAL_UART_IRQHandler+0x1f4>
    return;
 8008b2a:	bf00      	nop
  }
}
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	08008c45 	.word	0x08008c45

08008b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b54:	bf00      	nop
 8008b56:	370c      	adds	r7, #12
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	4613      	mov	r3, r2
 8008b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b84:	e02c      	b.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8c:	d028      	beq.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d007      	beq.n	8008ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b94:	f7fb f910 	bl	8003db8 <HAL_GetTick>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	1ad3      	subs	r3, r2, r3
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d21d      	bcs.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008bb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	695a      	ldr	r2, [r3, #20]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0201 	bic.w	r2, r2, #1
 8008bc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e00f      	b.n	8008c00 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	4013      	ands	r3, r2
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	bf0c      	ite	eq
 8008bf0:	2301      	moveq	r3, #1
 8008bf2:	2300      	movne	r3, #0
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	79fb      	ldrb	r3, [r7, #7]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d0c3      	beq.n	8008b86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c1e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695a      	ldr	r2, [r3, #20]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff ff7e 	bl	8008b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c64:	bf00      	nop
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b21      	cmp	r3, #33	; 0x21
 8008c7e:	d144      	bne.n	8008d0a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c88:	d11a      	bne.n	8008cc0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c9e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d105      	bne.n	8008cb4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	1c9a      	adds	r2, r3, #2
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	621a      	str	r2, [r3, #32]
 8008cb2:	e00e      	b.n	8008cd2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	621a      	str	r2, [r3, #32]
 8008cbe:	e008      	b.n	8008cd2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	1c59      	adds	r1, r3, #1
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	6211      	str	r1, [r2, #32]
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10f      	bne.n	8008d06 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	e000      	b.n	8008d0c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008d0a:	2302      	movs	r3, #2
  }
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2220      	movs	r2, #32
 8008d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff fefd 	bl	8008b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b22      	cmp	r3, #34	; 0x22
 8008d5a:	d171      	bne.n	8008e40 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d64:	d123      	bne.n	8008dae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d10e      	bne.n	8008d92 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8a:	1c9a      	adds	r2, r3, #2
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	629a      	str	r2, [r3, #40]	; 0x28
 8008d90:	e029      	b.n	8008de6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	b29a      	uxth	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	629a      	str	r2, [r3, #40]	; 0x28
 8008dac:	e01b      	b.n	8008de6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10a      	bne.n	8008dcc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	6858      	ldr	r0, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc0:	1c59      	adds	r1, r3, #1
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6291      	str	r1, [r2, #40]	; 0x28
 8008dc6:	b2c2      	uxtb	r2, r0
 8008dc8:	701a      	strb	r2, [r3, #0]
 8008dca:	e00c      	b.n	8008de6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	1c58      	adds	r0, r3, #1
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	6288      	str	r0, [r1, #40]	; 0x28
 8008dde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008de2:	b2d2      	uxtb	r2, r2
 8008de4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	3b01      	subs	r3, #1
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4619      	mov	r1, r3
 8008df4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d120      	bne.n	8008e3c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 0220 	bic.w	r2, r2, #32
 8008e08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68da      	ldr	r2, [r3, #12]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	695a      	ldr	r2, [r3, #20]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0201 	bic.w	r2, r2, #1
 8008e28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2220      	movs	r2, #32
 8008e2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff fe8a 	bl	8008b4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e002      	b.n	8008e42 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	e000      	b.n	8008e42 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008e40:	2302      	movs	r3, #2
  }
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
	...

08008e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	b0bd      	sub	sp, #244	; 0xf4
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e68:	68d9      	ldr	r1, [r3, #12]
 8008e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	ea40 0301 	orr.w	r3, r0, r1
 8008e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7a:	689a      	ldr	r2, [r3, #8]
 8008e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	431a      	orrs	r2, r3
 8008e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e88:	695b      	ldr	r3, [r3, #20]
 8008e8a:	431a      	orrs	r2, r3
 8008e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e90:	69db      	ldr	r3, [r3, #28]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008ea4:	f021 010c 	bic.w	r1, r1, #12
 8008ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008eb2:	430b      	orrs	r3, r1
 8008eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec6:	6999      	ldr	r1, [r3, #24]
 8008ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	ea40 0301 	orr.w	r3, r0, r1
 8008ed2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed8:	69db      	ldr	r3, [r3, #28]
 8008eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ede:	f040 81a5 	bne.w	800922c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	4bcd      	ldr	r3, [pc, #820]	; (8009220 <UART_SetConfig+0x3d4>)
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d006      	beq.n	8008efc <UART_SetConfig+0xb0>
 8008eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	4bcb      	ldr	r3, [pc, #812]	; (8009224 <UART_SetConfig+0x3d8>)
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	f040 80cb 	bne.w	8009092 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008efc:	f7fd fb9e 	bl	800663c <HAL_RCC_GetPCLK2Freq>
 8008f00:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f08:	461c      	mov	r4, r3
 8008f0a:	f04f 0500 	mov.w	r5, #0
 8008f0e:	4622      	mov	r2, r4
 8008f10:	462b      	mov	r3, r5
 8008f12:	1891      	adds	r1, r2, r2
 8008f14:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008f18:	415b      	adcs	r3, r3
 8008f1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f1e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008f22:	1912      	adds	r2, r2, r4
 8008f24:	eb45 0303 	adc.w	r3, r5, r3
 8008f28:	f04f 0000 	mov.w	r0, #0
 8008f2c:	f04f 0100 	mov.w	r1, #0
 8008f30:	00d9      	lsls	r1, r3, #3
 8008f32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f36:	00d0      	lsls	r0, r2, #3
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	1911      	adds	r1, r2, r4
 8008f3e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008f42:	416b      	adcs	r3, r5
 8008f44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f04f 0300 	mov.w	r3, #0
 8008f54:	1891      	adds	r1, r2, r2
 8008f56:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008f5a:	415b      	adcs	r3, r3
 8008f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f60:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008f64:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008f68:	f7f7 fe9e 	bl	8000ca8 <__aeabi_uldivmod>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	4bad      	ldr	r3, [pc, #692]	; (8009228 <UART_SetConfig+0x3dc>)
 8008f72:	fba3 2302 	umull	r2, r3, r3, r2
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	011e      	lsls	r6, r3, #4
 8008f7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f7e:	461c      	mov	r4, r3
 8008f80:	f04f 0500 	mov.w	r5, #0
 8008f84:	4622      	mov	r2, r4
 8008f86:	462b      	mov	r3, r5
 8008f88:	1891      	adds	r1, r2, r2
 8008f8a:	67b9      	str	r1, [r7, #120]	; 0x78
 8008f8c:	415b      	adcs	r3, r3
 8008f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f90:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008f94:	1912      	adds	r2, r2, r4
 8008f96:	eb45 0303 	adc.w	r3, r5, r3
 8008f9a:	f04f 0000 	mov.w	r0, #0
 8008f9e:	f04f 0100 	mov.w	r1, #0
 8008fa2:	00d9      	lsls	r1, r3, #3
 8008fa4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fa8:	00d0      	lsls	r0, r2, #3
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	1911      	adds	r1, r2, r4
 8008fb0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008fb4:	416b      	adcs	r3, r5
 8008fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f04f 0300 	mov.w	r3, #0
 8008fc6:	1891      	adds	r1, r2, r2
 8008fc8:	6739      	str	r1, [r7, #112]	; 0x70
 8008fca:	415b      	adcs	r3, r3
 8008fcc:	677b      	str	r3, [r7, #116]	; 0x74
 8008fce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008fd2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008fd6:	f7f7 fe67 	bl	8000ca8 <__aeabi_uldivmod>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4b92      	ldr	r3, [pc, #584]	; (8009228 <UART_SetConfig+0x3dc>)
 8008fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fe4:	095b      	lsrs	r3, r3, #5
 8008fe6:	2164      	movs	r1, #100	; 0x64
 8008fe8:	fb01 f303 	mul.w	r3, r1, r3
 8008fec:	1ad3      	subs	r3, r2, r3
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	3332      	adds	r3, #50	; 0x32
 8008ff2:	4a8d      	ldr	r2, [pc, #564]	; (8009228 <UART_SetConfig+0x3dc>)
 8008ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	005b      	lsls	r3, r3, #1
 8008ffc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009000:	441e      	add	r6, r3
 8009002:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009006:	4618      	mov	r0, r3
 8009008:	f04f 0100 	mov.w	r1, #0
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	1894      	adds	r4, r2, r2
 8009012:	66bc      	str	r4, [r7, #104]	; 0x68
 8009014:	415b      	adcs	r3, r3
 8009016:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009018:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800901c:	1812      	adds	r2, r2, r0
 800901e:	eb41 0303 	adc.w	r3, r1, r3
 8009022:	f04f 0400 	mov.w	r4, #0
 8009026:	f04f 0500 	mov.w	r5, #0
 800902a:	00dd      	lsls	r5, r3, #3
 800902c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009030:	00d4      	lsls	r4, r2, #3
 8009032:	4622      	mov	r2, r4
 8009034:	462b      	mov	r3, r5
 8009036:	1814      	adds	r4, r2, r0
 8009038:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800903c:	414b      	adcs	r3, r1
 800903e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	461a      	mov	r2, r3
 800904a:	f04f 0300 	mov.w	r3, #0
 800904e:	1891      	adds	r1, r2, r2
 8009050:	6639      	str	r1, [r7, #96]	; 0x60
 8009052:	415b      	adcs	r3, r3
 8009054:	667b      	str	r3, [r7, #100]	; 0x64
 8009056:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800905a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800905e:	f7f7 fe23 	bl	8000ca8 <__aeabi_uldivmod>
 8009062:	4602      	mov	r2, r0
 8009064:	460b      	mov	r3, r1
 8009066:	4b70      	ldr	r3, [pc, #448]	; (8009228 <UART_SetConfig+0x3dc>)
 8009068:	fba3 1302 	umull	r1, r3, r3, r2
 800906c:	095b      	lsrs	r3, r3, #5
 800906e:	2164      	movs	r1, #100	; 0x64
 8009070:	fb01 f303 	mul.w	r3, r1, r3
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	3332      	adds	r3, #50	; 0x32
 800907a:	4a6b      	ldr	r2, [pc, #428]	; (8009228 <UART_SetConfig+0x3dc>)
 800907c:	fba2 2303 	umull	r2, r3, r2, r3
 8009080:	095b      	lsrs	r3, r3, #5
 8009082:	f003 0207 	and.w	r2, r3, #7
 8009086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4432      	add	r2, r6
 800908e:	609a      	str	r2, [r3, #8]
 8009090:	e26d      	b.n	800956e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009092:	f7fd fabf 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 8009096:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800909a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800909e:	461c      	mov	r4, r3
 80090a0:	f04f 0500 	mov.w	r5, #0
 80090a4:	4622      	mov	r2, r4
 80090a6:	462b      	mov	r3, r5
 80090a8:	1891      	adds	r1, r2, r2
 80090aa:	65b9      	str	r1, [r7, #88]	; 0x58
 80090ac:	415b      	adcs	r3, r3
 80090ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090b4:	1912      	adds	r2, r2, r4
 80090b6:	eb45 0303 	adc.w	r3, r5, r3
 80090ba:	f04f 0000 	mov.w	r0, #0
 80090be:	f04f 0100 	mov.w	r1, #0
 80090c2:	00d9      	lsls	r1, r3, #3
 80090c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090c8:	00d0      	lsls	r0, r2, #3
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	1911      	adds	r1, r2, r4
 80090d0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80090d4:	416b      	adcs	r3, r5
 80090d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	461a      	mov	r2, r3
 80090e2:	f04f 0300 	mov.w	r3, #0
 80090e6:	1891      	adds	r1, r2, r2
 80090e8:	6539      	str	r1, [r7, #80]	; 0x50
 80090ea:	415b      	adcs	r3, r3
 80090ec:	657b      	str	r3, [r7, #84]	; 0x54
 80090ee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090f2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80090f6:	f7f7 fdd7 	bl	8000ca8 <__aeabi_uldivmod>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4b4a      	ldr	r3, [pc, #296]	; (8009228 <UART_SetConfig+0x3dc>)
 8009100:	fba3 2302 	umull	r2, r3, r3, r2
 8009104:	095b      	lsrs	r3, r3, #5
 8009106:	011e      	lsls	r6, r3, #4
 8009108:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800910c:	461c      	mov	r4, r3
 800910e:	f04f 0500 	mov.w	r5, #0
 8009112:	4622      	mov	r2, r4
 8009114:	462b      	mov	r3, r5
 8009116:	1891      	adds	r1, r2, r2
 8009118:	64b9      	str	r1, [r7, #72]	; 0x48
 800911a:	415b      	adcs	r3, r3
 800911c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800911e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009122:	1912      	adds	r2, r2, r4
 8009124:	eb45 0303 	adc.w	r3, r5, r3
 8009128:	f04f 0000 	mov.w	r0, #0
 800912c:	f04f 0100 	mov.w	r1, #0
 8009130:	00d9      	lsls	r1, r3, #3
 8009132:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009136:	00d0      	lsls	r0, r2, #3
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	1911      	adds	r1, r2, r4
 800913e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8009142:	416b      	adcs	r3, r5
 8009144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	461a      	mov	r2, r3
 8009150:	f04f 0300 	mov.w	r3, #0
 8009154:	1891      	adds	r1, r2, r2
 8009156:	6439      	str	r1, [r7, #64]	; 0x40
 8009158:	415b      	adcs	r3, r3
 800915a:	647b      	str	r3, [r7, #68]	; 0x44
 800915c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009160:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009164:	f7f7 fda0 	bl	8000ca8 <__aeabi_uldivmod>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4b2e      	ldr	r3, [pc, #184]	; (8009228 <UART_SetConfig+0x3dc>)
 800916e:	fba3 1302 	umull	r1, r3, r3, r2
 8009172:	095b      	lsrs	r3, r3, #5
 8009174:	2164      	movs	r1, #100	; 0x64
 8009176:	fb01 f303 	mul.w	r3, r1, r3
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	00db      	lsls	r3, r3, #3
 800917e:	3332      	adds	r3, #50	; 0x32
 8009180:	4a29      	ldr	r2, [pc, #164]	; (8009228 <UART_SetConfig+0x3dc>)
 8009182:	fba2 2303 	umull	r2, r3, r2, r3
 8009186:	095b      	lsrs	r3, r3, #5
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800918e:	441e      	add	r6, r3
 8009190:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009194:	4618      	mov	r0, r3
 8009196:	f04f 0100 	mov.w	r1, #0
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	1894      	adds	r4, r2, r2
 80091a0:	63bc      	str	r4, [r7, #56]	; 0x38
 80091a2:	415b      	adcs	r3, r3
 80091a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80091aa:	1812      	adds	r2, r2, r0
 80091ac:	eb41 0303 	adc.w	r3, r1, r3
 80091b0:	f04f 0400 	mov.w	r4, #0
 80091b4:	f04f 0500 	mov.w	r5, #0
 80091b8:	00dd      	lsls	r5, r3, #3
 80091ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091be:	00d4      	lsls	r4, r2, #3
 80091c0:	4622      	mov	r2, r4
 80091c2:	462b      	mov	r3, r5
 80091c4:	1814      	adds	r4, r2, r0
 80091c6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80091ca:	414b      	adcs	r3, r1
 80091cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	461a      	mov	r2, r3
 80091d8:	f04f 0300 	mov.w	r3, #0
 80091dc:	1891      	adds	r1, r2, r2
 80091de:	6339      	str	r1, [r7, #48]	; 0x30
 80091e0:	415b      	adcs	r3, r3
 80091e2:	637b      	str	r3, [r7, #52]	; 0x34
 80091e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80091e8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80091ec:	f7f7 fd5c 	bl	8000ca8 <__aeabi_uldivmod>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <UART_SetConfig+0x3dc>)
 80091f6:	fba3 1302 	umull	r1, r3, r3, r2
 80091fa:	095b      	lsrs	r3, r3, #5
 80091fc:	2164      	movs	r1, #100	; 0x64
 80091fe:	fb01 f303 	mul.w	r3, r1, r3
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	3332      	adds	r3, #50	; 0x32
 8009208:	4a07      	ldr	r2, [pc, #28]	; (8009228 <UART_SetConfig+0x3dc>)
 800920a:	fba2 2303 	umull	r2, r3, r2, r3
 800920e:	095b      	lsrs	r3, r3, #5
 8009210:	f003 0207 	and.w	r2, r3, #7
 8009214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4432      	add	r2, r6
 800921c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800921e:	e1a6      	b.n	800956e <UART_SetConfig+0x722>
 8009220:	40011000 	.word	0x40011000
 8009224:	40011400 	.word	0x40011400
 8009228:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800922c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	4bd1      	ldr	r3, [pc, #836]	; (8009578 <UART_SetConfig+0x72c>)
 8009234:	429a      	cmp	r2, r3
 8009236:	d006      	beq.n	8009246 <UART_SetConfig+0x3fa>
 8009238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	4bcf      	ldr	r3, [pc, #828]	; (800957c <UART_SetConfig+0x730>)
 8009240:	429a      	cmp	r2, r3
 8009242:	f040 80ca 	bne.w	80093da <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009246:	f7fd f9f9 	bl	800663c <HAL_RCC_GetPCLK2Freq>
 800924a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800924e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009252:	461c      	mov	r4, r3
 8009254:	f04f 0500 	mov.w	r5, #0
 8009258:	4622      	mov	r2, r4
 800925a:	462b      	mov	r3, r5
 800925c:	1891      	adds	r1, r2, r2
 800925e:	62b9      	str	r1, [r7, #40]	; 0x28
 8009260:	415b      	adcs	r3, r3
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009264:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009268:	1912      	adds	r2, r2, r4
 800926a:	eb45 0303 	adc.w	r3, r5, r3
 800926e:	f04f 0000 	mov.w	r0, #0
 8009272:	f04f 0100 	mov.w	r1, #0
 8009276:	00d9      	lsls	r1, r3, #3
 8009278:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800927c:	00d0      	lsls	r0, r2, #3
 800927e:	4602      	mov	r2, r0
 8009280:	460b      	mov	r3, r1
 8009282:	eb12 0a04 	adds.w	sl, r2, r4
 8009286:	eb43 0b05 	adc.w	fp, r3, r5
 800928a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	4618      	mov	r0, r3
 8009292:	f04f 0100 	mov.w	r1, #0
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	f04f 0300 	mov.w	r3, #0
 800929e:	008b      	lsls	r3, r1, #2
 80092a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80092a4:	0082      	lsls	r2, r0, #2
 80092a6:	4650      	mov	r0, sl
 80092a8:	4659      	mov	r1, fp
 80092aa:	f7f7 fcfd 	bl	8000ca8 <__aeabi_uldivmod>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4bb3      	ldr	r3, [pc, #716]	; (8009580 <UART_SetConfig+0x734>)
 80092b4:	fba3 2302 	umull	r2, r3, r3, r2
 80092b8:	095b      	lsrs	r3, r3, #5
 80092ba:	011e      	lsls	r6, r3, #4
 80092bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092c0:	4618      	mov	r0, r3
 80092c2:	f04f 0100 	mov.w	r1, #0
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	1894      	adds	r4, r2, r2
 80092cc:	623c      	str	r4, [r7, #32]
 80092ce:	415b      	adcs	r3, r3
 80092d0:	627b      	str	r3, [r7, #36]	; 0x24
 80092d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092d6:	1812      	adds	r2, r2, r0
 80092d8:	eb41 0303 	adc.w	r3, r1, r3
 80092dc:	f04f 0400 	mov.w	r4, #0
 80092e0:	f04f 0500 	mov.w	r5, #0
 80092e4:	00dd      	lsls	r5, r3, #3
 80092e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092ea:	00d4      	lsls	r4, r2, #3
 80092ec:	4622      	mov	r2, r4
 80092ee:	462b      	mov	r3, r5
 80092f0:	1814      	adds	r4, r2, r0
 80092f2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80092f6:	414b      	adcs	r3, r1
 80092f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	4618      	mov	r0, r3
 8009304:	f04f 0100 	mov.w	r1, #0
 8009308:	f04f 0200 	mov.w	r2, #0
 800930c:	f04f 0300 	mov.w	r3, #0
 8009310:	008b      	lsls	r3, r1, #2
 8009312:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009316:	0082      	lsls	r2, r0, #2
 8009318:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800931c:	f7f7 fcc4 	bl	8000ca8 <__aeabi_uldivmod>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4b96      	ldr	r3, [pc, #600]	; (8009580 <UART_SetConfig+0x734>)
 8009326:	fba3 1302 	umull	r1, r3, r3, r2
 800932a:	095b      	lsrs	r3, r3, #5
 800932c:	2164      	movs	r1, #100	; 0x64
 800932e:	fb01 f303 	mul.w	r3, r1, r3
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	011b      	lsls	r3, r3, #4
 8009336:	3332      	adds	r3, #50	; 0x32
 8009338:	4a91      	ldr	r2, [pc, #580]	; (8009580 <UART_SetConfig+0x734>)
 800933a:	fba2 2303 	umull	r2, r3, r2, r3
 800933e:	095b      	lsrs	r3, r3, #5
 8009340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009344:	441e      	add	r6, r3
 8009346:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800934a:	4618      	mov	r0, r3
 800934c:	f04f 0100 	mov.w	r1, #0
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	1894      	adds	r4, r2, r2
 8009356:	61bc      	str	r4, [r7, #24]
 8009358:	415b      	adcs	r3, r3
 800935a:	61fb      	str	r3, [r7, #28]
 800935c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009360:	1812      	adds	r2, r2, r0
 8009362:	eb41 0303 	adc.w	r3, r1, r3
 8009366:	f04f 0400 	mov.w	r4, #0
 800936a:	f04f 0500 	mov.w	r5, #0
 800936e:	00dd      	lsls	r5, r3, #3
 8009370:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009374:	00d4      	lsls	r4, r2, #3
 8009376:	4622      	mov	r2, r4
 8009378:	462b      	mov	r3, r5
 800937a:	1814      	adds	r4, r2, r0
 800937c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009380:	414b      	adcs	r3, r1
 8009382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	4618      	mov	r0, r3
 800938e:	f04f 0100 	mov.w	r1, #0
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	f04f 0300 	mov.w	r3, #0
 800939a:	008b      	lsls	r3, r1, #2
 800939c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093a0:	0082      	lsls	r2, r0, #2
 80093a2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80093a6:	f7f7 fc7f 	bl	8000ca8 <__aeabi_uldivmod>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4b74      	ldr	r3, [pc, #464]	; (8009580 <UART_SetConfig+0x734>)
 80093b0:	fba3 1302 	umull	r1, r3, r3, r2
 80093b4:	095b      	lsrs	r3, r3, #5
 80093b6:	2164      	movs	r1, #100	; 0x64
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	011b      	lsls	r3, r3, #4
 80093c0:	3332      	adds	r3, #50	; 0x32
 80093c2:	4a6f      	ldr	r2, [pc, #444]	; (8009580 <UART_SetConfig+0x734>)
 80093c4:	fba2 2303 	umull	r2, r3, r2, r3
 80093c8:	095b      	lsrs	r3, r3, #5
 80093ca:	f003 020f 	and.w	r2, r3, #15
 80093ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4432      	add	r2, r6
 80093d6:	609a      	str	r2, [r3, #8]
 80093d8:	e0c9      	b.n	800956e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80093da:	f7fd f91b 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 80093de:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093e6:	461c      	mov	r4, r3
 80093e8:	f04f 0500 	mov.w	r5, #0
 80093ec:	4622      	mov	r2, r4
 80093ee:	462b      	mov	r3, r5
 80093f0:	1891      	adds	r1, r2, r2
 80093f2:	6139      	str	r1, [r7, #16]
 80093f4:	415b      	adcs	r3, r3
 80093f6:	617b      	str	r3, [r7, #20]
 80093f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093fc:	1912      	adds	r2, r2, r4
 80093fe:	eb45 0303 	adc.w	r3, r5, r3
 8009402:	f04f 0000 	mov.w	r0, #0
 8009406:	f04f 0100 	mov.w	r1, #0
 800940a:	00d9      	lsls	r1, r3, #3
 800940c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009410:	00d0      	lsls	r0, r2, #3
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	eb12 0804 	adds.w	r8, r2, r4
 800941a:	eb43 0905 	adc.w	r9, r3, r5
 800941e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4618      	mov	r0, r3
 8009426:	f04f 0100 	mov.w	r1, #0
 800942a:	f04f 0200 	mov.w	r2, #0
 800942e:	f04f 0300 	mov.w	r3, #0
 8009432:	008b      	lsls	r3, r1, #2
 8009434:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009438:	0082      	lsls	r2, r0, #2
 800943a:	4640      	mov	r0, r8
 800943c:	4649      	mov	r1, r9
 800943e:	f7f7 fc33 	bl	8000ca8 <__aeabi_uldivmod>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4b4e      	ldr	r3, [pc, #312]	; (8009580 <UART_SetConfig+0x734>)
 8009448:	fba3 2302 	umull	r2, r3, r3, r2
 800944c:	095b      	lsrs	r3, r3, #5
 800944e:	011e      	lsls	r6, r3, #4
 8009450:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009454:	4618      	mov	r0, r3
 8009456:	f04f 0100 	mov.w	r1, #0
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	1894      	adds	r4, r2, r2
 8009460:	60bc      	str	r4, [r7, #8]
 8009462:	415b      	adcs	r3, r3
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800946a:	1812      	adds	r2, r2, r0
 800946c:	eb41 0303 	adc.w	r3, r1, r3
 8009470:	f04f 0400 	mov.w	r4, #0
 8009474:	f04f 0500 	mov.w	r5, #0
 8009478:	00dd      	lsls	r5, r3, #3
 800947a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800947e:	00d4      	lsls	r4, r2, #3
 8009480:	4622      	mov	r2, r4
 8009482:	462b      	mov	r3, r5
 8009484:	1814      	adds	r4, r2, r0
 8009486:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800948a:	414b      	adcs	r3, r1
 800948c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	4618      	mov	r0, r3
 8009498:	f04f 0100 	mov.w	r1, #0
 800949c:	f04f 0200 	mov.w	r2, #0
 80094a0:	f04f 0300 	mov.w	r3, #0
 80094a4:	008b      	lsls	r3, r1, #2
 80094a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094aa:	0082      	lsls	r2, r0, #2
 80094ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094b0:	f7f7 fbfa 	bl	8000ca8 <__aeabi_uldivmod>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4b31      	ldr	r3, [pc, #196]	; (8009580 <UART_SetConfig+0x734>)
 80094ba:	fba3 1302 	umull	r1, r3, r3, r2
 80094be:	095b      	lsrs	r3, r3, #5
 80094c0:	2164      	movs	r1, #100	; 0x64
 80094c2:	fb01 f303 	mul.w	r3, r1, r3
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	3332      	adds	r3, #50	; 0x32
 80094cc:	4a2c      	ldr	r2, [pc, #176]	; (8009580 <UART_SetConfig+0x734>)
 80094ce:	fba2 2303 	umull	r2, r3, r2, r3
 80094d2:	095b      	lsrs	r3, r3, #5
 80094d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094d8:	441e      	add	r6, r3
 80094da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094de:	4618      	mov	r0, r3
 80094e0:	f04f 0100 	mov.w	r1, #0
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	1894      	adds	r4, r2, r2
 80094ea:	603c      	str	r4, [r7, #0]
 80094ec:	415b      	adcs	r3, r3
 80094ee:	607b      	str	r3, [r7, #4]
 80094f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094f4:	1812      	adds	r2, r2, r0
 80094f6:	eb41 0303 	adc.w	r3, r1, r3
 80094fa:	f04f 0400 	mov.w	r4, #0
 80094fe:	f04f 0500 	mov.w	r5, #0
 8009502:	00dd      	lsls	r5, r3, #3
 8009504:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009508:	00d4      	lsls	r4, r2, #3
 800950a:	4622      	mov	r2, r4
 800950c:	462b      	mov	r3, r5
 800950e:	1814      	adds	r4, r2, r0
 8009510:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8009514:	414b      	adcs	r3, r1
 8009516:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800951a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4618      	mov	r0, r3
 8009522:	f04f 0100 	mov.w	r1, #0
 8009526:	f04f 0200 	mov.w	r2, #0
 800952a:	f04f 0300 	mov.w	r3, #0
 800952e:	008b      	lsls	r3, r1, #2
 8009530:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009534:	0082      	lsls	r2, r0, #2
 8009536:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800953a:	f7f7 fbb5 	bl	8000ca8 <__aeabi_uldivmod>
 800953e:	4602      	mov	r2, r0
 8009540:	460b      	mov	r3, r1
 8009542:	4b0f      	ldr	r3, [pc, #60]	; (8009580 <UART_SetConfig+0x734>)
 8009544:	fba3 1302 	umull	r1, r3, r3, r2
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	2164      	movs	r1, #100	; 0x64
 800954c:	fb01 f303 	mul.w	r3, r1, r3
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	3332      	adds	r3, #50	; 0x32
 8009556:	4a0a      	ldr	r2, [pc, #40]	; (8009580 <UART_SetConfig+0x734>)
 8009558:	fba2 2303 	umull	r2, r3, r2, r3
 800955c:	095b      	lsrs	r3, r3, #5
 800955e:	f003 020f 	and.w	r2, r3, #15
 8009562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4432      	add	r2, r6
 800956a:	609a      	str	r2, [r3, #8]
}
 800956c:	e7ff      	b.n	800956e <UART_SetConfig+0x722>
 800956e:	bf00      	nop
 8009570:	37f4      	adds	r7, #244	; 0xf4
 8009572:	46bd      	mov	sp, r7
 8009574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009578:	40011000 	.word	0x40011000
 800957c:	40011400 	.word	0x40011400
 8009580:	51eb851f 	.word	0x51eb851f

08009584 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009588:	4904      	ldr	r1, [pc, #16]	; (800959c <MX_FATFS_Init+0x18>)
 800958a:	4805      	ldr	r0, [pc, #20]	; (80095a0 <MX_FATFS_Init+0x1c>)
 800958c:	f003 fa92 	bl	800cab4 <FATFS_LinkDriver>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	4b03      	ldr	r3, [pc, #12]	; (80095a4 <MX_FATFS_Init+0x20>)
 8009596:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009598:	bf00      	nop
 800959a:	bd80      	pop	{r7, pc}
 800959c:	200012d0 	.word	0x200012d0
 80095a0:	2000000c 	.word	0x2000000c
 80095a4:	200012d4 	.word	0x200012d4

080095a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80095ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80095c2:	79fb      	ldrb	r3, [r7, #7]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 f9dd 	bl	8009984 <USER_SPI_initialize>
 80095ca:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80095de:	79fb      	ldrb	r3, [r7, #7]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 fab9 	bl	8009b58 <USER_SPI_status>
 80095e6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60b9      	str	r1, [r7, #8]
 80095f8:	607a      	str	r2, [r7, #4]
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009600:	7bf8      	ldrb	r0, [r7, #15]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	68b9      	ldr	r1, [r7, #8]
 8009608:	f000 fabc 	bl	8009b84 <USER_SPI_read>
 800960c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800960e:	4618      	mov	r0, r3
 8009610:	3710      	adds	r7, #16
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b084      	sub	sp, #16
 800961a:	af00      	add	r7, sp, #0
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
 8009620:	603b      	str	r3, [r7, #0]
 8009622:	4603      	mov	r3, r0
 8009624:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8009626:	7bf8      	ldrb	r0, [r7, #15]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	f000 fb0f 	bl	8009c50 <USER_SPI_write>
 8009632:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	603a      	str	r2, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
 8009648:	460b      	mov	r3, r1
 800964a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800964c:	79b9      	ldrb	r1, [r7, #6]
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	683a      	ldr	r2, [r7, #0]
 8009652:	4618      	mov	r0, r3
 8009654:	f000 fb78 	bl	8009d48 <USER_SPI_ioctl>
 8009658:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800966c:	f7fa fba4 	bl	8003db8 <HAL_GetTick>
 8009670:	4603      	mov	r3, r0
 8009672:	4a04      	ldr	r2, [pc, #16]	; (8009684 <SPI_Timer_On+0x20>)
 8009674:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8009676:	4a04      	ldr	r2, [pc, #16]	; (8009688 <SPI_Timer_On+0x24>)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6013      	str	r3, [r2, #0]
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	20001738 	.word	0x20001738
 8009688:	2000173c 	.word	0x2000173c

0800968c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800968c:	b580      	push	{r7, lr}
 800968e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009690:	f7fa fb92 	bl	8003db8 <HAL_GetTick>
 8009694:	4602      	mov	r2, r0
 8009696:	4b06      	ldr	r3, [pc, #24]	; (80096b0 <SPI_Timer_Status+0x24>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	1ad2      	subs	r2, r2, r3
 800969c:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <SPI_Timer_Status+0x28>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	bf34      	ite	cc
 80096a4:	2301      	movcc	r3, #1
 80096a6:	2300      	movcs	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	20001738 	.word	0x20001738
 80096b4:	2000173c 	.word	0x2000173c

080096b8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af02      	add	r7, sp, #8
 80096be:	4603      	mov	r3, r0
 80096c0:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80096c2:	f107 020f 	add.w	r2, r7, #15
 80096c6:	1df9      	adds	r1, r7, #7
 80096c8:	2332      	movs	r3, #50	; 0x32
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	2301      	movs	r3, #1
 80096ce:	4804      	ldr	r0, [pc, #16]	; (80096e0 <xchg_spi+0x28>)
 80096d0:	f7fd fe25 	bl	800731e <HAL_SPI_TransmitReceive>
    return rxDat;
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	200005fc 	.word	0x200005fc

080096e4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80096e4:	b590      	push	{r4, r7, lr}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	e00a      	b.n	800970a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	18d4      	adds	r4, r2, r3
 80096fa:	20ff      	movs	r0, #255	; 0xff
 80096fc:	f7ff ffdc 	bl	80096b8 <xchg_spi>
 8009700:	4603      	mov	r3, r0
 8009702:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3301      	adds	r3, #1
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	429a      	cmp	r2, r3
 8009710:	d3f0      	bcc.n	80096f4 <rcvr_spi_multi+0x10>
	}
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	bd90      	pop	{r4, r7, pc}

0800971c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8009726:	2300      	movs	r3, #0
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	e009      	b.n	8009740 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	4413      	add	r3, r2
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff ffbf 	bl	80096b8 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3301      	adds	r3, #1
 800973e:	60fb      	str	r3, [r7, #12]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d3f1      	bcc.n	800972c <xmit_spi_multi+0x10>
	}
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b086      	sub	sp, #24
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800975a:	f7fa fb2d 	bl	8003db8 <HAL_GetTick>
 800975e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009764:	20ff      	movs	r0, #255	; 0xff
 8009766:	f7ff ffa7 	bl	80096b8 <xchg_spi>
 800976a:	4603      	mov	r3, r0
 800976c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	2bff      	cmp	r3, #255	; 0xff
 8009772:	d007      	beq.n	8009784 <wait_ready+0x32>
 8009774:	f7fa fb20 	bl	8003db8 <HAL_GetTick>
 8009778:	4602      	mov	r2, r0
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	1ad3      	subs	r3, r2, r3
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	429a      	cmp	r2, r3
 8009782:	d8ef      	bhi.n	8009764 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2bff      	cmp	r3, #255	; 0xff
 8009788:	bf0c      	ite	eq
 800978a:	2301      	moveq	r3, #1
 800978c:	2300      	movne	r3, #0
 800978e:	b2db      	uxtb	r3, r3
}
 8009790:	4618      	mov	r0, r3
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800979c:	2201      	movs	r2, #1
 800979e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097a2:	4804      	ldr	r0, [pc, #16]	; (80097b4 <despiselect+0x1c>)
 80097a4:	f7fb fa2c 	bl	8004c00 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80097a8:	20ff      	movs	r0, #255	; 0xff
 80097aa:	f7ff ff85 	bl	80096b8 <xchg_spi>

}
 80097ae:	bf00      	nop
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	40021400 	.word	0x40021400

080097b8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80097bc:	2200      	movs	r2, #0
 80097be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097c2:	480a      	ldr	r0, [pc, #40]	; (80097ec <spiselect+0x34>)
 80097c4:	f7fb fa1c 	bl	8004c00 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80097c8:	20ff      	movs	r0, #255	; 0xff
 80097ca:	f7ff ff75 	bl	80096b8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80097ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80097d2:	f7ff ffbe 	bl	8009752 <wait_ready>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <spiselect+0x28>
 80097dc:	2301      	movs	r3, #1
 80097de:	e002      	b.n	80097e6 <spiselect+0x2e>

	despiselect();
 80097e0:	f7ff ffda 	bl	8009798 <despiselect>
	return 0;	/* Timeout */
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	40021400 	.word	0x40021400

080097f0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80097fa:	20c8      	movs	r0, #200	; 0xc8
 80097fc:	f7ff ff32 	bl	8009664 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009800:	20ff      	movs	r0, #255	; 0xff
 8009802:	f7ff ff59 	bl	80096b8 <xchg_spi>
 8009806:	4603      	mov	r3, r0
 8009808:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	2bff      	cmp	r3, #255	; 0xff
 800980e:	d104      	bne.n	800981a <rcvr_datablock+0x2a>
 8009810:	f7ff ff3c 	bl	800968c <SPI_Timer_Status>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1f2      	bne.n	8009800 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	2bfe      	cmp	r3, #254	; 0xfe
 800981e:	d001      	beq.n	8009824 <rcvr_datablock+0x34>
 8009820:	2300      	movs	r3, #0
 8009822:	e00a      	b.n	800983a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009824:	6839      	ldr	r1, [r7, #0]
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff ff5c 	bl	80096e4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800982c:	20ff      	movs	r0, #255	; 0xff
 800982e:	f7ff ff43 	bl	80096b8 <xchg_spi>
 8009832:	20ff      	movs	r0, #255	; 0xff
 8009834:	f7ff ff40 	bl	80096b8 <xchg_spi>

	return 1;						/* Function succeeded */
 8009838:	2301      	movs	r3, #1
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b084      	sub	sp, #16
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	460b      	mov	r3, r1
 800984c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800984e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009852:	f7ff ff7e 	bl	8009752 <wait_ready>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d101      	bne.n	8009860 <xmit_datablock+0x1e>
 800985c:	2300      	movs	r3, #0
 800985e:	e01e      	b.n	800989e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff ff28 	bl	80096b8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	2bfd      	cmp	r3, #253	; 0xfd
 800986c:	d016      	beq.n	800989c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800986e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff ff52 	bl	800971c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009878:	20ff      	movs	r0, #255	; 0xff
 800987a:	f7ff ff1d 	bl	80096b8 <xchg_spi>
 800987e:	20ff      	movs	r0, #255	; 0xff
 8009880:	f7ff ff1a 	bl	80096b8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009884:	20ff      	movs	r0, #255	; 0xff
 8009886:	f7ff ff17 	bl	80096b8 <xchg_spi>
 800988a:	4603      	mov	r3, r0
 800988c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800988e:	7bfb      	ldrb	r3, [r7, #15]
 8009890:	f003 031f 	and.w	r3, r3, #31
 8009894:	2b05      	cmp	r3, #5
 8009896:	d001      	beq.n	800989c <xmit_datablock+0x5a>
 8009898:	2300      	movs	r3, #0
 800989a:	e000      	b.n	800989e <xmit_datablock+0x5c>
	}
	return 1;
 800989c:	2301      	movs	r3, #1
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	4603      	mov	r3, r0
 80098ae:	6039      	str	r1, [r7, #0]
 80098b0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80098b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	da0e      	bge.n	80098d8 <send_cmd+0x32>
		cmd &= 0x7F;
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80098c2:	2100      	movs	r1, #0
 80098c4:	2037      	movs	r0, #55	; 0x37
 80098c6:	f7ff ffee 	bl	80098a6 <send_cmd>
 80098ca:	4603      	mov	r3, r0
 80098cc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d901      	bls.n	80098d8 <send_cmd+0x32>
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	e051      	b.n	800997c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	2b0c      	cmp	r3, #12
 80098dc:	d008      	beq.n	80098f0 <send_cmd+0x4a>
		despiselect();
 80098de:	f7ff ff5b 	bl	8009798 <despiselect>
		if (!spiselect()) return 0xFF;
 80098e2:	f7ff ff69 	bl	80097b8 <spiselect>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d101      	bne.n	80098f0 <send_cmd+0x4a>
 80098ec:	23ff      	movs	r3, #255	; 0xff
 80098ee:	e045      	b.n	800997c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80098f0:	79fb      	ldrb	r3, [r7, #7]
 80098f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff fedd 	bl	80096b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	0e1b      	lsrs	r3, r3, #24
 8009902:	b2db      	uxtb	r3, r3
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fed7 	bl	80096b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	b2db      	uxtb	r3, r3
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff fed1 	bl	80096b8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	0a1b      	lsrs	r3, r3, #8
 800991a:	b2db      	uxtb	r3, r3
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff fecb 	bl	80096b8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fec6 	bl	80096b8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800992c:	2301      	movs	r3, #1
 800992e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <send_cmd+0x94>
 8009936:	2395      	movs	r3, #149	; 0x95
 8009938:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	2b08      	cmp	r3, #8
 800993e:	d101      	bne.n	8009944 <send_cmd+0x9e>
 8009940:	2387      	movs	r3, #135	; 0x87
 8009942:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff feb6 	bl	80096b8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800994c:	79fb      	ldrb	r3, [r7, #7]
 800994e:	2b0c      	cmp	r3, #12
 8009950:	d102      	bne.n	8009958 <send_cmd+0xb2>
 8009952:	20ff      	movs	r0, #255	; 0xff
 8009954:	f7ff feb0 	bl	80096b8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009958:	230a      	movs	r3, #10
 800995a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800995c:	20ff      	movs	r0, #255	; 0xff
 800995e:	f7ff feab 	bl	80096b8 <xchg_spi>
 8009962:	4603      	mov	r3, r0
 8009964:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009966:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800996a:	2b00      	cmp	r3, #0
 800996c:	da05      	bge.n	800997a <send_cmd+0xd4>
 800996e:	7bfb      	ldrb	r3, [r7, #15]
 8009970:	3b01      	subs	r3, #1
 8009972:	73fb      	strb	r3, [r7, #15]
 8009974:	7bfb      	ldrb	r3, [r7, #15]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d1f0      	bne.n	800995c <send_cmd+0xb6>

	return res;							/* Return received response */
 800997a:	7bbb      	ldrb	r3, [r7, #14]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009984:	b590      	push	{r4, r7, lr}
 8009986:	b085      	sub	sp, #20
 8009988:	af00      	add	r7, sp, #0
 800998a:	4603      	mov	r3, r0
 800998c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <USER_SPI_initialize+0x14>
 8009994:	2301      	movs	r3, #1
 8009996:	e0d4      	b.n	8009b42 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009998:	4b6c      	ldr	r3, [pc, #432]	; (8009b4c <USER_SPI_initialize+0x1c8>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	f003 0302 	and.w	r3, r3, #2
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <USER_SPI_initialize+0x2a>
 80099a6:	4b69      	ldr	r3, [pc, #420]	; (8009b4c <USER_SPI_initialize+0x1c8>)
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	e0c9      	b.n	8009b42 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 80099ae:	4b68      	ldr	r3, [pc, #416]	; (8009b50 <USER_SPI_initialize+0x1cc>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	4b66      	ldr	r3, [pc, #408]	; (8009b50 <USER_SPI_initialize+0x1cc>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80099bc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80099be:	230a      	movs	r3, #10
 80099c0:	73fb      	strb	r3, [r7, #15]
 80099c2:	e005      	b.n	80099d0 <USER_SPI_initialize+0x4c>
 80099c4:	20ff      	movs	r0, #255	; 0xff
 80099c6:	f7ff fe77 	bl	80096b8 <xchg_spi>
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	73fb      	strb	r3, [r7, #15]
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1f6      	bne.n	80099c4 <USER_SPI_initialize+0x40>

	ty = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80099da:	2100      	movs	r1, #0
 80099dc:	2000      	movs	r0, #0
 80099de:	f7ff ff62 	bl	80098a6 <send_cmd>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	f040 808b 	bne.w	8009b00 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80099ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099ee:	f7ff fe39 	bl	8009664 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80099f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099f6:	2008      	movs	r0, #8
 80099f8:	f7ff ff55 	bl	80098a6 <send_cmd>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d151      	bne.n	8009aa6 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]
 8009a06:	e00d      	b.n	8009a24 <USER_SPI_initialize+0xa0>
 8009a08:	7bfc      	ldrb	r4, [r7, #15]
 8009a0a:	20ff      	movs	r0, #255	; 0xff
 8009a0c:	f7ff fe54 	bl	80096b8 <xchg_spi>
 8009a10:	4603      	mov	r3, r0
 8009a12:	461a      	mov	r2, r3
 8009a14:	f107 0310 	add.w	r3, r7, #16
 8009a18:	4423      	add	r3, r4
 8009a1a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	3301      	adds	r3, #1
 8009a22:	73fb      	strb	r3, [r7, #15]
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	2b03      	cmp	r3, #3
 8009a28:	d9ee      	bls.n	8009a08 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009a2a:	7abb      	ldrb	r3, [r7, #10]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d167      	bne.n	8009b00 <USER_SPI_initialize+0x17c>
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	2baa      	cmp	r3, #170	; 0xaa
 8009a34:	d164      	bne.n	8009b00 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009a36:	bf00      	nop
 8009a38:	f7ff fe28 	bl	800968c <SPI_Timer_Status>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d007      	beq.n	8009a52 <USER_SPI_initialize+0xce>
 8009a42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009a46:	20a9      	movs	r0, #169	; 0xa9
 8009a48:	f7ff ff2d 	bl	80098a6 <send_cmd>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1f2      	bne.n	8009a38 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009a52:	f7ff fe1b 	bl	800968c <SPI_Timer_Status>
 8009a56:	4603      	mov	r3, r0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d051      	beq.n	8009b00 <USER_SPI_initialize+0x17c>
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	203a      	movs	r0, #58	; 0x3a
 8009a60:	f7ff ff21 	bl	80098a6 <send_cmd>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d14a      	bne.n	8009b00 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]
 8009a6e:	e00d      	b.n	8009a8c <USER_SPI_initialize+0x108>
 8009a70:	7bfc      	ldrb	r4, [r7, #15]
 8009a72:	20ff      	movs	r0, #255	; 0xff
 8009a74:	f7ff fe20 	bl	80096b8 <xchg_spi>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	f107 0310 	add.w	r3, r7, #16
 8009a80:	4423      	add	r3, r4
 8009a82:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	3301      	adds	r3, #1
 8009a8a:	73fb      	strb	r3, [r7, #15]
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d9ee      	bls.n	8009a70 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009a92:	7a3b      	ldrb	r3, [r7, #8]
 8009a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d001      	beq.n	8009aa0 <USER_SPI_initialize+0x11c>
 8009a9c:	230c      	movs	r3, #12
 8009a9e:	e000      	b.n	8009aa2 <USER_SPI_initialize+0x11e>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	737b      	strb	r3, [r7, #13]
 8009aa4:	e02c      	b.n	8009b00 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	20a9      	movs	r0, #169	; 0xa9
 8009aaa:	f7ff fefc 	bl	80098a6 <send_cmd>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d804      	bhi.n	8009abe <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	737b      	strb	r3, [r7, #13]
 8009ab8:	23a9      	movs	r3, #169	; 0xa9
 8009aba:	73bb      	strb	r3, [r7, #14]
 8009abc:	e003      	b.n	8009ac6 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009abe:	2301      	movs	r3, #1
 8009ac0:	737b      	strb	r3, [r7, #13]
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009ac6:	bf00      	nop
 8009ac8:	f7ff fde0 	bl	800968c <SPI_Timer_Status>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <USER_SPI_initialize+0x15e>
 8009ad2:	7bbb      	ldrb	r3, [r7, #14]
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff fee5 	bl	80098a6 <send_cmd>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1f2      	bne.n	8009ac8 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009ae2:	f7ff fdd3 	bl	800968c <SPI_Timer_Status>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d007      	beq.n	8009afc <USER_SPI_initialize+0x178>
 8009aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009af0:	2010      	movs	r0, #16
 8009af2:	f7ff fed8 	bl	80098a6 <send_cmd>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <USER_SPI_initialize+0x17c>
				ty = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009b00:	4a14      	ldr	r2, [pc, #80]	; (8009b54 <USER_SPI_initialize+0x1d0>)
 8009b02:	7b7b      	ldrb	r3, [r7, #13]
 8009b04:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009b06:	f7ff fe47 	bl	8009798 <despiselect>

	if (ty) {			/* OK */
 8009b0a:	7b7b      	ldrb	r3, [r7, #13]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d012      	beq.n	8009b36 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8009b10:	4b0f      	ldr	r3, [pc, #60]	; (8009b50 <USER_SPI_initialize+0x1cc>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b1a:	4b0d      	ldr	r3, [pc, #52]	; (8009b50 <USER_SPI_initialize+0x1cc>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f042 0220 	orr.w	r2, r2, #32
 8009b22:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009b24:	4b09      	ldr	r3, [pc, #36]	; (8009b4c <USER_SPI_initialize+0x1c8>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	f023 0301 	bic.w	r3, r3, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	4b06      	ldr	r3, [pc, #24]	; (8009b4c <USER_SPI_initialize+0x1c8>)
 8009b32:	701a      	strb	r2, [r3, #0]
 8009b34:	e002      	b.n	8009b3c <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009b36:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <USER_SPI_initialize+0x1c8>)
 8009b38:	2201      	movs	r2, #1
 8009b3a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009b3c:	4b03      	ldr	r3, [pc, #12]	; (8009b4c <USER_SPI_initialize+0x1c8>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	b2db      	uxtb	r3, r3
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3714      	adds	r7, #20
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd90      	pop	{r4, r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	20000020 	.word	0x20000020
 8009b50:	200005fc 	.word	0x200005fc
 8009b54:	200004b0 	.word	0x200004b0

08009b58 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d001      	beq.n	8009b6c <USER_SPI_status+0x14>
 8009b68:	2301      	movs	r3, #1
 8009b6a:	e002      	b.n	8009b72 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009b6c:	4b04      	ldr	r3, [pc, #16]	; (8009b80 <USER_SPI_status+0x28>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	b2db      	uxtb	r3, r3
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	20000020 	.word	0x20000020

08009b84 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60b9      	str	r1, [r7, #8]
 8009b8c:	607a      	str	r2, [r7, #4]
 8009b8e:	603b      	str	r3, [r7, #0]
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009b94:	7bfb      	ldrb	r3, [r7, #15]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d102      	bne.n	8009ba0 <USER_SPI_read+0x1c>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <USER_SPI_read+0x20>
 8009ba0:	2304      	movs	r3, #4
 8009ba2:	e04d      	b.n	8009c40 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009ba4:	4b28      	ldr	r3, [pc, #160]	; (8009c48 <USER_SPI_read+0xc4>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0301 	and.w	r3, r3, #1
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d001      	beq.n	8009bb6 <USER_SPI_read+0x32>
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e044      	b.n	8009c40 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009bb6:	4b25      	ldr	r3, [pc, #148]	; (8009c4c <USER_SPI_read+0xc8>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	f003 0308 	and.w	r3, r3, #8
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d102      	bne.n	8009bc8 <USER_SPI_read+0x44>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	025b      	lsls	r3, r3, #9
 8009bc6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d111      	bne.n	8009bf2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009bce:	6879      	ldr	r1, [r7, #4]
 8009bd0:	2011      	movs	r0, #17
 8009bd2:	f7ff fe68 	bl	80098a6 <send_cmd>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d129      	bne.n	8009c30 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009be0:	68b8      	ldr	r0, [r7, #8]
 8009be2:	f7ff fe05 	bl	80097f0 <rcvr_datablock>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d021      	beq.n	8009c30 <USER_SPI_read+0xac>
			count = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	e01e      	b.n	8009c30 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	2012      	movs	r0, #18
 8009bf6:	f7ff fe56 	bl	80098a6 <send_cmd>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d117      	bne.n	8009c30 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009c04:	68b8      	ldr	r0, [r7, #8]
 8009c06:	f7ff fdf3 	bl	80097f0 <rcvr_datablock>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00a      	beq.n	8009c26 <USER_SPI_read+0xa2>
				buff += 512;
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009c16:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	603b      	str	r3, [r7, #0]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1ed      	bne.n	8009c00 <USER_SPI_read+0x7c>
 8009c24:	e000      	b.n	8009c28 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009c26:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009c28:	2100      	movs	r1, #0
 8009c2a:	200c      	movs	r0, #12
 8009c2c:	f7ff fe3b 	bl	80098a6 <send_cmd>
		}
	}
	despiselect();
 8009c30:	f7ff fdb2 	bl	8009798 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	bf14      	ite	ne
 8009c3a:	2301      	movne	r3, #1
 8009c3c:	2300      	moveq	r3, #0
 8009c3e:	b2db      	uxtb	r3, r3
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	20000020 	.word	0x20000020
 8009c4c:	200004b0 	.word	0x200004b0

08009c50 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60b9      	str	r1, [r7, #8]
 8009c58:	607a      	str	r2, [r7, #4]
 8009c5a:	603b      	str	r3, [r7, #0]
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d102      	bne.n	8009c6c <USER_SPI_write+0x1c>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <USER_SPI_write+0x20>
 8009c6c:	2304      	movs	r3, #4
 8009c6e:	e063      	b.n	8009d38 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009c70:	4b33      	ldr	r3, [pc, #204]	; (8009d40 <USER_SPI_write+0xf0>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <USER_SPI_write+0x32>
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e05a      	b.n	8009d38 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009c82:	4b2f      	ldr	r3, [pc, #188]	; (8009d40 <USER_SPI_write+0xf0>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	f003 0304 	and.w	r3, r3, #4
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <USER_SPI_write+0x44>
 8009c90:	2302      	movs	r3, #2
 8009c92:	e051      	b.n	8009d38 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009c94:	4b2b      	ldr	r3, [pc, #172]	; (8009d44 <USER_SPI_write+0xf4>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	f003 0308 	and.w	r3, r3, #8
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d102      	bne.n	8009ca6 <USER_SPI_write+0x56>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	025b      	lsls	r3, r3, #9
 8009ca4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d110      	bne.n	8009cce <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	2018      	movs	r0, #24
 8009cb0:	f7ff fdf9 	bl	80098a6 <send_cmd>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d136      	bne.n	8009d28 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009cba:	21fe      	movs	r1, #254	; 0xfe
 8009cbc:	68b8      	ldr	r0, [r7, #8]
 8009cbe:	f7ff fdc0 	bl	8009842 <xmit_datablock>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d02f      	beq.n	8009d28 <USER_SPI_write+0xd8>
			count = 0;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	603b      	str	r3, [r7, #0]
 8009ccc:	e02c      	b.n	8009d28 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009cce:	4b1d      	ldr	r3, [pc, #116]	; (8009d44 <USER_SPI_write+0xf4>)
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	f003 0306 	and.w	r3, r3, #6
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <USER_SPI_write+0x92>
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	2097      	movs	r0, #151	; 0x97
 8009cde:	f7ff fde2 	bl	80098a6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	2019      	movs	r0, #25
 8009ce6:	f7ff fdde 	bl	80098a6 <send_cmd>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d11b      	bne.n	8009d28 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009cf0:	21fc      	movs	r1, #252	; 0xfc
 8009cf2:	68b8      	ldr	r0, [r7, #8]
 8009cf4:	f7ff fda5 	bl	8009842 <xmit_datablock>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00a      	beq.n	8009d14 <USER_SPI_write+0xc4>
				buff += 512;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009d04:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	603b      	str	r3, [r7, #0]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d1ee      	bne.n	8009cf0 <USER_SPI_write+0xa0>
 8009d12:	e000      	b.n	8009d16 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009d14:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009d16:	21fd      	movs	r1, #253	; 0xfd
 8009d18:	2000      	movs	r0, #0
 8009d1a:	f7ff fd92 	bl	8009842 <xmit_datablock>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <USER_SPI_write+0xd8>
 8009d24:	2301      	movs	r3, #1
 8009d26:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009d28:	f7ff fd36 	bl	8009798 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	bf14      	ite	ne
 8009d32:	2301      	movne	r3, #1
 8009d34:	2300      	moveq	r3, #0
 8009d36:	b2db      	uxtb	r3, r3
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	20000020 	.word	0x20000020
 8009d44:	200004b0 	.word	0x200004b0

08009d48 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b08c      	sub	sp, #48	; 0x30
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	4603      	mov	r3, r0
 8009d50:	603a      	str	r2, [r7, #0]
 8009d52:	71fb      	strb	r3, [r7, #7]
 8009d54:	460b      	mov	r3, r1
 8009d56:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009d58:	79fb      	ldrb	r3, [r7, #7]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <USER_SPI_ioctl+0x1a>
 8009d5e:	2304      	movs	r3, #4
 8009d60:	e15a      	b.n	800a018 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009d62:	4baf      	ldr	r3, [pc, #700]	; (800a020 <USER_SPI_ioctl+0x2d8>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	f003 0301 	and.w	r3, r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <USER_SPI_ioctl+0x2c>
 8009d70:	2303      	movs	r3, #3
 8009d72:	e151      	b.n	800a018 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8009d7a:	79bb      	ldrb	r3, [r7, #6]
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	f200 8136 	bhi.w	8009fee <USER_SPI_ioctl+0x2a6>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <USER_SPI_ioctl+0x40>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009d9d 	.word	0x08009d9d
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	08009fef 	.word	0x08009fef
 8009d94:	08009e5d 	.word	0x08009e5d
 8009d98:	08009f53 	.word	0x08009f53
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009d9c:	f7ff fd0c 	bl	80097b8 <spiselect>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 8127 	beq.w	8009ff6 <USER_SPI_ioctl+0x2ae>
 8009da8:	2300      	movs	r3, #0
 8009daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009dae:	e122      	b.n	8009ff6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009db0:	2100      	movs	r1, #0
 8009db2:	2009      	movs	r0, #9
 8009db4:	f7ff fd77 	bl	80098a6 <send_cmd>
 8009db8:	4603      	mov	r3, r0
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	f040 811d 	bne.w	8009ffa <USER_SPI_ioctl+0x2b2>
 8009dc0:	f107 030c 	add.w	r3, r7, #12
 8009dc4:	2110      	movs	r1, #16
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff fd12 	bl	80097f0 <rcvr_datablock>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	f000 8113 	beq.w	8009ffa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009dd4:	7b3b      	ldrb	r3, [r7, #12]
 8009dd6:	099b      	lsrs	r3, r3, #6
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d111      	bne.n	8009e02 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009dde:	7d7b      	ldrb	r3, [r7, #21]
 8009de0:	461a      	mov	r2, r3
 8009de2:	7d3b      	ldrb	r3, [r7, #20]
 8009de4:	021b      	lsls	r3, r3, #8
 8009de6:	4413      	add	r3, r2
 8009de8:	461a      	mov	r2, r3
 8009dea:	7cfb      	ldrb	r3, [r7, #19]
 8009dec:	041b      	lsls	r3, r3, #16
 8009dee:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009df2:	4413      	add	r3, r2
 8009df4:	3301      	adds	r3, #1
 8009df6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	029a      	lsls	r2, r3, #10
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	601a      	str	r2, [r3, #0]
 8009e00:	e028      	b.n	8009e54 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009e02:	7c7b      	ldrb	r3, [r7, #17]
 8009e04:	f003 030f 	and.w	r3, r3, #15
 8009e08:	b2da      	uxtb	r2, r3
 8009e0a:	7dbb      	ldrb	r3, [r7, #22]
 8009e0c:	09db      	lsrs	r3, r3, #7
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	4413      	add	r3, r2
 8009e12:	b2da      	uxtb	r2, r3
 8009e14:	7d7b      	ldrb	r3, [r7, #21]
 8009e16:	005b      	lsls	r3, r3, #1
 8009e18:	b2db      	uxtb	r3, r3
 8009e1a:	f003 0306 	and.w	r3, r3, #6
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	4413      	add	r3, r2
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	3302      	adds	r3, #2
 8009e26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009e2a:	7d3b      	ldrb	r3, [r7, #20]
 8009e2c:	099b      	lsrs	r3, r3, #6
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	461a      	mov	r2, r3
 8009e32:	7cfb      	ldrb	r3, [r7, #19]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	441a      	add	r2, r3
 8009e38:	7cbb      	ldrb	r3, [r7, #18]
 8009e3a:	029b      	lsls	r3, r3, #10
 8009e3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009e40:	4413      	add	r3, r2
 8009e42:	3301      	adds	r3, #1
 8009e44:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009e46:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e4a:	3b09      	subs	r3, #9
 8009e4c:	69fa      	ldr	r2, [r7, #28]
 8009e4e:	409a      	lsls	r2, r3
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009e5a:	e0ce      	b.n	8009ffa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009e5c:	4b71      	ldr	r3, [pc, #452]	; (800a024 <USER_SPI_ioctl+0x2dc>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	f003 0304 	and.w	r3, r3, #4
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d031      	beq.n	8009ecc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009e68:	2100      	movs	r1, #0
 8009e6a:	208d      	movs	r0, #141	; 0x8d
 8009e6c:	f7ff fd1b 	bl	80098a6 <send_cmd>
 8009e70:	4603      	mov	r3, r0
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f040 80c3 	bne.w	8009ffe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009e78:	20ff      	movs	r0, #255	; 0xff
 8009e7a:	f7ff fc1d 	bl	80096b8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009e7e:	f107 030c 	add.w	r3, r7, #12
 8009e82:	2110      	movs	r1, #16
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7ff fcb3 	bl	80097f0 <rcvr_datablock>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	f000 80b6 	beq.w	8009ffe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009e92:	2330      	movs	r3, #48	; 0x30
 8009e94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009e98:	e007      	b.n	8009eaa <USER_SPI_ioctl+0x162>
 8009e9a:	20ff      	movs	r0, #255	; 0xff
 8009e9c:	f7ff fc0c 	bl	80096b8 <xchg_spi>
 8009ea0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ea4:	3b01      	subs	r3, #1
 8009ea6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009eaa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1f3      	bne.n	8009e9a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009eb2:	7dbb      	ldrb	r3, [r7, #22]
 8009eb4:	091b      	lsrs	r3, r3, #4
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	2310      	movs	r3, #16
 8009ebc:	fa03 f202 	lsl.w	r2, r3, r2
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009eca:	e098      	b.n	8009ffe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009ecc:	2100      	movs	r1, #0
 8009ece:	2009      	movs	r0, #9
 8009ed0:	f7ff fce9 	bl	80098a6 <send_cmd>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	f040 8091 	bne.w	8009ffe <USER_SPI_ioctl+0x2b6>
 8009edc:	f107 030c 	add.w	r3, r7, #12
 8009ee0:	2110      	movs	r1, #16
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff fc84 	bl	80097f0 <rcvr_datablock>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f000 8087 	beq.w	8009ffe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009ef0:	4b4c      	ldr	r3, [pc, #304]	; (800a024 <USER_SPI_ioctl+0x2dc>)
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	f003 0302 	and.w	r3, r3, #2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d012      	beq.n	8009f22 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009efc:	7dbb      	ldrb	r3, [r7, #22]
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009f04:	7dfa      	ldrb	r2, [r7, #23]
 8009f06:	09d2      	lsrs	r2, r2, #7
 8009f08:	b2d2      	uxtb	r2, r2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	1c5a      	adds	r2, r3, #1
 8009f0e:	7e7b      	ldrb	r3, [r7, #25]
 8009f10:	099b      	lsrs	r3, r3, #6
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	3b01      	subs	r3, #1
 8009f16:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	e013      	b.n	8009f4a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009f22:	7dbb      	ldrb	r3, [r7, #22]
 8009f24:	109b      	asrs	r3, r3, #2
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	f003 031f 	and.w	r3, r3, #31
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	7dfa      	ldrb	r2, [r7, #23]
 8009f30:	00d2      	lsls	r2, r2, #3
 8009f32:	f002 0218 	and.w	r2, r2, #24
 8009f36:	7df9      	ldrb	r1, [r7, #23]
 8009f38:	0949      	lsrs	r1, r1, #5
 8009f3a:	b2c9      	uxtb	r1, r1
 8009f3c:	440a      	add	r2, r1
 8009f3e:	3201      	adds	r2, #1
 8009f40:	fb02 f303 	mul.w	r3, r2, r3
 8009f44:	461a      	mov	r2, r3
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009f50:	e055      	b.n	8009ffe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009f52:	4b34      	ldr	r3, [pc, #208]	; (800a024 <USER_SPI_ioctl+0x2dc>)
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	f003 0306 	and.w	r3, r3, #6
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d051      	beq.n	800a002 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009f5e:	f107 020c 	add.w	r2, r7, #12
 8009f62:	79fb      	ldrb	r3, [r7, #7]
 8009f64:	210b      	movs	r1, #11
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7ff feee 	bl	8009d48 <USER_SPI_ioctl>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d149      	bne.n	800a006 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009f72:	7b3b      	ldrb	r3, [r7, #12]
 8009f74:	099b      	lsrs	r3, r3, #6
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d104      	bne.n	8009f86 <USER_SPI_ioctl+0x23e>
 8009f7c:	7dbb      	ldrb	r3, [r7, #22]
 8009f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d041      	beq.n	800a00a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	623b      	str	r3, [r7, #32]
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009f96:	4b23      	ldr	r3, [pc, #140]	; (800a024 <USER_SPI_ioctl+0x2dc>)
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	f003 0308 	and.w	r3, r3, #8
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d105      	bne.n	8009fae <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	025b      	lsls	r3, r3, #9
 8009fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	025b      	lsls	r3, r3, #9
 8009fac:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fb0:	2020      	movs	r0, #32
 8009fb2:	f7ff fc78 	bl	80098a6 <send_cmd>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d128      	bne.n	800a00e <USER_SPI_ioctl+0x2c6>
 8009fbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fbe:	2021      	movs	r0, #33	; 0x21
 8009fc0:	f7ff fc71 	bl	80098a6 <send_cmd>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d121      	bne.n	800a00e <USER_SPI_ioctl+0x2c6>
 8009fca:	2100      	movs	r1, #0
 8009fcc:	2026      	movs	r0, #38	; 0x26
 8009fce:	f7ff fc6a 	bl	80098a6 <send_cmd>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d11a      	bne.n	800a00e <USER_SPI_ioctl+0x2c6>
 8009fd8:	f247 5030 	movw	r0, #30000	; 0x7530
 8009fdc:	f7ff fbb9 	bl	8009752 <wait_ready>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d013      	beq.n	800a00e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009fec:	e00f      	b.n	800a00e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009fee:	2304      	movs	r3, #4
 8009ff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ff4:	e00c      	b.n	800a010 <USER_SPI_ioctl+0x2c8>
		break;
 8009ff6:	bf00      	nop
 8009ff8:	e00a      	b.n	800a010 <USER_SPI_ioctl+0x2c8>
		break;
 8009ffa:	bf00      	nop
 8009ffc:	e008      	b.n	800a010 <USER_SPI_ioctl+0x2c8>
		break;
 8009ffe:	bf00      	nop
 800a000:	e006      	b.n	800a010 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a002:	bf00      	nop
 800a004:	e004      	b.n	800a010 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a006:	bf00      	nop
 800a008:	e002      	b.n	800a010 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a00a:	bf00      	nop
 800a00c:	e000      	b.n	800a010 <USER_SPI_ioctl+0x2c8>
		break;
 800a00e:	bf00      	nop
	}

	despiselect();
 800a010:	f7ff fbc2 	bl	8009798 <despiselect>

	return res;
 800a014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3730      	adds	r7, #48	; 0x30
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20000020 	.word	0x20000020
 800a024:	200004b0 	.word	0x200004b0

0800a028 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	4a08      	ldr	r2, [pc, #32]	; (800a058 <disk_status+0x30>)
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	79fa      	ldrb	r2, [r7, #7]
 800a040:	4905      	ldr	r1, [pc, #20]	; (800a058 <disk_status+0x30>)
 800a042:	440a      	add	r2, r1
 800a044:	7a12      	ldrb	r2, [r2, #8]
 800a046:	4610      	mov	r0, r2
 800a048:	4798      	blx	r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	200004dc 	.word	0x200004dc

0800a05c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	4a0d      	ldr	r2, [pc, #52]	; (800a0a4 <disk_initialize+0x48>)
 800a06e:	5cd3      	ldrb	r3, [r2, r3]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d111      	bne.n	800a098 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a074:	79fb      	ldrb	r3, [r7, #7]
 800a076:	4a0b      	ldr	r2, [pc, #44]	; (800a0a4 <disk_initialize+0x48>)
 800a078:	2101      	movs	r1, #1
 800a07a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	4a09      	ldr	r2, [pc, #36]	; (800a0a4 <disk_initialize+0x48>)
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	79fa      	ldrb	r2, [r7, #7]
 800a08a:	4906      	ldr	r1, [pc, #24]	; (800a0a4 <disk_initialize+0x48>)
 800a08c:	440a      	add	r2, r1
 800a08e:	7a12      	ldrb	r2, [r2, #8]
 800a090:	4610      	mov	r0, r2
 800a092:	4798      	blx	r3
 800a094:	4603      	mov	r3, r0
 800a096:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a098:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	200004dc 	.word	0x200004dc

0800a0a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a0a8:	b590      	push	{r4, r7, lr}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	4a0a      	ldr	r2, [pc, #40]	; (800a0e4 <disk_read+0x3c>)
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	4413      	add	r3, r2
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	689c      	ldr	r4, [r3, #8]
 800a0c4:	7bfb      	ldrb	r3, [r7, #15]
 800a0c6:	4a07      	ldr	r2, [pc, #28]	; (800a0e4 <disk_read+0x3c>)
 800a0c8:	4413      	add	r3, r2
 800a0ca:	7a18      	ldrb	r0, [r3, #8]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	68b9      	ldr	r1, [r7, #8]
 800a0d2:	47a0      	blx	r4
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	371c      	adds	r7, #28
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd90      	pop	{r4, r7, pc}
 800a0e2:	bf00      	nop
 800a0e4:	200004dc 	.word	0x200004dc

0800a0e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a0e8:	b590      	push	{r4, r7, lr}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60b9      	str	r1, [r7, #8]
 800a0f0:	607a      	str	r2, [r7, #4]
 800a0f2:	603b      	str	r3, [r7, #0]
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	4a0a      	ldr	r2, [pc, #40]	; (800a124 <disk_write+0x3c>)
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4413      	add	r3, r2
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	68dc      	ldr	r4, [r3, #12]
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	4a07      	ldr	r2, [pc, #28]	; (800a124 <disk_write+0x3c>)
 800a108:	4413      	add	r3, r2
 800a10a:	7a18      	ldrb	r0, [r3, #8]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	68b9      	ldr	r1, [r7, #8]
 800a112:	47a0      	blx	r4
 800a114:	4603      	mov	r3, r0
 800a116:	75fb      	strb	r3, [r7, #23]
  return res;
 800a118:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	371c      	adds	r7, #28
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd90      	pop	{r4, r7, pc}
 800a122:	bf00      	nop
 800a124:	200004dc 	.word	0x200004dc

0800a128 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	603a      	str	r2, [r7, #0]
 800a132:	71fb      	strb	r3, [r7, #7]
 800a134:	460b      	mov	r3, r1
 800a136:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a138:	79fb      	ldrb	r3, [r7, #7]
 800a13a:	4a09      	ldr	r2, [pc, #36]	; (800a160 <disk_ioctl+0x38>)
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	79fa      	ldrb	r2, [r7, #7]
 800a146:	4906      	ldr	r1, [pc, #24]	; (800a160 <disk_ioctl+0x38>)
 800a148:	440a      	add	r2, r1
 800a14a:	7a10      	ldrb	r0, [r2, #8]
 800a14c:	79b9      	ldrb	r1, [r7, #6]
 800a14e:	683a      	ldr	r2, [r7, #0]
 800a150:	4798      	blx	r3
 800a152:	4603      	mov	r3, r0
 800a154:	73fb      	strb	r3, [r7, #15]
  return res;
 800a156:	7bfb      	ldrb	r3, [r7, #15]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	200004dc 	.word	0x200004dc

0800a164 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3301      	adds	r3, #1
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a174:	89fb      	ldrh	r3, [r7, #14]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	b21a      	sxth	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	b21b      	sxth	r3, r3
 800a180:	4313      	orrs	r3, r2
 800a182:	b21b      	sxth	r3, r3
 800a184:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a186:	89fb      	ldrh	r3, [r7, #14]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3714      	adds	r7, #20
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a194:	b480      	push	{r7}
 800a196:	b085      	sub	sp, #20
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3303      	adds	r3, #3
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	021b      	lsls	r3, r3, #8
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	3202      	adds	r2, #2
 800a1ac:	7812      	ldrb	r2, [r2, #0]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	021b      	lsls	r3, r3, #8
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	3201      	adds	r2, #1
 800a1ba:	7812      	ldrb	r2, [r2, #0]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	7812      	ldrb	r2, [r2, #0]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	60fb      	str	r3, [r7, #12]
	return rv;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b083      	sub	sp, #12
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	1c5a      	adds	r2, r3, #1
 800a1ea:	607a      	str	r2, [r7, #4]
 800a1ec:	887a      	ldrh	r2, [r7, #2]
 800a1ee:	b2d2      	uxtb	r2, r2
 800a1f0:	701a      	strb	r2, [r3, #0]
 800a1f2:	887b      	ldrh	r3, [r7, #2]
 800a1f4:	0a1b      	lsrs	r3, r3, #8
 800a1f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	1c5a      	adds	r2, r3, #1
 800a1fc:	607a      	str	r2, [r7, #4]
 800a1fe:	887a      	ldrh	r2, [r7, #2]
 800a200:	b2d2      	uxtb	r2, r2
 800a202:	701a      	strb	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr

0800a210 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	1c5a      	adds	r2, r3, #1
 800a21e:	607a      	str	r2, [r7, #4]
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	b2d2      	uxtb	r2, r2
 800a224:	701a      	strb	r2, [r3, #0]
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	0a1b      	lsrs	r3, r3, #8
 800a22a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	1c5a      	adds	r2, r3, #1
 800a230:	607a      	str	r2, [r7, #4]
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	b2d2      	uxtb	r2, r2
 800a236:	701a      	strb	r2, [r3, #0]
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	0a1b      	lsrs	r3, r3, #8
 800a23c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	607a      	str	r2, [r7, #4]
 800a244:	683a      	ldr	r2, [r7, #0]
 800a246:	b2d2      	uxtb	r2, r2
 800a248:	701a      	strb	r2, [r3, #0]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	0a1b      	lsrs	r3, r3, #8
 800a24e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	607a      	str	r2, [r7, #4]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	b2d2      	uxtb	r2, r2
 800a25a:	701a      	strb	r2, [r3, #0]
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00d      	beq.n	800a29e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a282:	693a      	ldr	r2, [r7, #16]
 800a284:	1c53      	adds	r3, r2, #1
 800a286:	613b      	str	r3, [r7, #16]
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	1c59      	adds	r1, r3, #1
 800a28c:	6179      	str	r1, [r7, #20]
 800a28e:	7812      	ldrb	r2, [r2, #0]
 800a290:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3b01      	subs	r3, #1
 800a296:	607b      	str	r3, [r7, #4]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1f1      	bne.n	800a282 <mem_cpy+0x1a>
	}
}
 800a29e:	bf00      	nop
 800a2a0:	371c      	adds	r7, #28
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a2aa:	b480      	push	{r7}
 800a2ac:	b087      	sub	sp, #28
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	60f8      	str	r0, [r7, #12]
 800a2b2:	60b9      	str	r1, [r7, #8]
 800a2b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	617a      	str	r2, [r7, #20]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	b2d2      	uxtb	r2, r2
 800a2c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3b01      	subs	r3, #1
 800a2ca:	607b      	str	r3, [r7, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1f3      	bne.n	800a2ba <mem_set+0x10>
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a2e0:	b480      	push	{r7}
 800a2e2:	b089      	sub	sp, #36	; 0x24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	61fb      	str	r3, [r7, #28]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	61fa      	str	r2, [r7, #28]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	4619      	mov	r1, r3
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	1c5a      	adds	r2, r3, #1
 800a306:	61ba      	str	r2, [r7, #24]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	1acb      	subs	r3, r1, r3
 800a30c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3b01      	subs	r3, #1
 800a312:	607b      	str	r3, [r7, #4]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <mem_cmp+0x40>
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d0eb      	beq.n	800a2f8 <mem_cmp+0x18>

	return r;
 800a320:	697b      	ldr	r3, [r7, #20]
}
 800a322:	4618      	mov	r0, r3
 800a324:	3724      	adds	r7, #36	; 0x24
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a32e:	b480      	push	{r7}
 800a330:	b083      	sub	sp, #12
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a338:	e002      	b.n	800a340 <chk_chr+0x12>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	3301      	adds	r3, #1
 800a33e:	607b      	str	r3, [r7, #4]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d005      	beq.n	800a354 <chk_chr+0x26>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	461a      	mov	r2, r3
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	4293      	cmp	r3, r2
 800a352:	d1f2      	bne.n	800a33a <chk_chr+0xc>
	return *str;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	781b      	ldrb	r3, [r3, #0]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a36e:	2300      	movs	r3, #0
 800a370:	60bb      	str	r3, [r7, #8]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	60fb      	str	r3, [r7, #12]
 800a376:	e029      	b.n	800a3cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a378:	4a27      	ldr	r2, [pc, #156]	; (800a418 <chk_lock+0xb4>)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	011b      	lsls	r3, r3, #4
 800a37e:	4413      	add	r3, r2
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d01d      	beq.n	800a3c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a386:	4a24      	ldr	r2, [pc, #144]	; (800a418 <chk_lock+0xb4>)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	011b      	lsls	r3, r3, #4
 800a38c:	4413      	add	r3, r2
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	429a      	cmp	r2, r3
 800a396:	d116      	bne.n	800a3c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a398:	4a1f      	ldr	r2, [pc, #124]	; (800a418 <chk_lock+0xb4>)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	011b      	lsls	r3, r3, #4
 800a39e:	4413      	add	r3, r2
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d10c      	bne.n	800a3c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3ac:	4a1a      	ldr	r2, [pc, #104]	; (800a418 <chk_lock+0xb4>)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	011b      	lsls	r3, r3, #4
 800a3b2:	4413      	add	r3, r2
 800a3b4:	3308      	adds	r3, #8
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d102      	bne.n	800a3c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3c0:	e007      	b.n	800a3d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d9d2      	bls.n	800a378 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d109      	bne.n	800a3ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d102      	bne.n	800a3e4 <chk_lock+0x80>
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d101      	bne.n	800a3e8 <chk_lock+0x84>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	e010      	b.n	800a40a <chk_lock+0xa6>
 800a3e8:	2312      	movs	r3, #18
 800a3ea:	e00e      	b.n	800a40a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d108      	bne.n	800a404 <chk_lock+0xa0>
 800a3f2:	4a09      	ldr	r2, [pc, #36]	; (800a418 <chk_lock+0xb4>)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	011b      	lsls	r3, r3, #4
 800a3f8:	4413      	add	r3, r2
 800a3fa:	330c      	adds	r3, #12
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a402:	d101      	bne.n	800a408 <chk_lock+0xa4>
 800a404:	2310      	movs	r3, #16
 800a406:	e000      	b.n	800a40a <chk_lock+0xa6>
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	200004bc 	.word	0x200004bc

0800a41c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a422:	2300      	movs	r3, #0
 800a424:	607b      	str	r3, [r7, #4]
 800a426:	e002      	b.n	800a42e <enq_lock+0x12>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3301      	adds	r3, #1
 800a42c:	607b      	str	r3, [r7, #4]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2b01      	cmp	r3, #1
 800a432:	d806      	bhi.n	800a442 <enq_lock+0x26>
 800a434:	4a09      	ldr	r2, [pc, #36]	; (800a45c <enq_lock+0x40>)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	011b      	lsls	r3, r3, #4
 800a43a:	4413      	add	r3, r2
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f2      	bne.n	800a428 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b02      	cmp	r3, #2
 800a446:	bf14      	ite	ne
 800a448:	2301      	movne	r3, #1
 800a44a:	2300      	moveq	r3, #0
 800a44c:	b2db      	uxtb	r3, r3
}
 800a44e:	4618      	mov	r0, r3
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	200004bc 	.word	0x200004bc

0800a460 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a46a:	2300      	movs	r3, #0
 800a46c:	60fb      	str	r3, [r7, #12]
 800a46e:	e01f      	b.n	800a4b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a470:	4a41      	ldr	r2, [pc, #260]	; (800a578 <inc_lock+0x118>)
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	011b      	lsls	r3, r3, #4
 800a476:	4413      	add	r3, r2
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	429a      	cmp	r2, r3
 800a480:	d113      	bne.n	800a4aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a482:	4a3d      	ldr	r2, [pc, #244]	; (800a578 <inc_lock+0x118>)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	4413      	add	r3, r2
 800a48a:	3304      	adds	r3, #4
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a492:	429a      	cmp	r2, r3
 800a494:	d109      	bne.n	800a4aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a496:	4a38      	ldr	r2, [pc, #224]	; (800a578 <inc_lock+0x118>)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	011b      	lsls	r3, r3, #4
 800a49c:	4413      	add	r3, r2
 800a49e:	3308      	adds	r3, #8
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d006      	beq.n	800a4b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	60fb      	str	r3, [r7, #12]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d9dc      	bls.n	800a470 <inc_lock+0x10>
 800a4b6:	e000      	b.n	800a4ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a4b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d132      	bne.n	800a526 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	e002      	b.n	800a4cc <inc_lock+0x6c>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d806      	bhi.n	800a4e0 <inc_lock+0x80>
 800a4d2:	4a29      	ldr	r2, [pc, #164]	; (800a578 <inc_lock+0x118>)
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	011b      	lsls	r3, r3, #4
 800a4d8:	4413      	add	r3, r2
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d1f2      	bne.n	800a4c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	d101      	bne.n	800a4ea <inc_lock+0x8a>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e040      	b.n	800a56c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	4922      	ldr	r1, [pc, #136]	; (800a578 <inc_lock+0x118>)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	011b      	lsls	r3, r3, #4
 800a4f4:	440b      	add	r3, r1
 800a4f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689a      	ldr	r2, [r3, #8]
 800a4fc:	491e      	ldr	r1, [pc, #120]	; (800a578 <inc_lock+0x118>)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	011b      	lsls	r3, r3, #4
 800a502:	440b      	add	r3, r1
 800a504:	3304      	adds	r3, #4
 800a506:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	695a      	ldr	r2, [r3, #20]
 800a50c:	491a      	ldr	r1, [pc, #104]	; (800a578 <inc_lock+0x118>)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	011b      	lsls	r3, r3, #4
 800a512:	440b      	add	r3, r1
 800a514:	3308      	adds	r3, #8
 800a516:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a518:	4a17      	ldr	r2, [pc, #92]	; (800a578 <inc_lock+0x118>)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	011b      	lsls	r3, r3, #4
 800a51e:	4413      	add	r3, r2
 800a520:	330c      	adds	r3, #12
 800a522:	2200      	movs	r2, #0
 800a524:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d009      	beq.n	800a540 <inc_lock+0xe0>
 800a52c:	4a12      	ldr	r2, [pc, #72]	; (800a578 <inc_lock+0x118>)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	011b      	lsls	r3, r3, #4
 800a532:	4413      	add	r3, r2
 800a534:	330c      	adds	r3, #12
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d001      	beq.n	800a540 <inc_lock+0xe0>
 800a53c:	2300      	movs	r3, #0
 800a53e:	e015      	b.n	800a56c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d108      	bne.n	800a558 <inc_lock+0xf8>
 800a546:	4a0c      	ldr	r2, [pc, #48]	; (800a578 <inc_lock+0x118>)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	011b      	lsls	r3, r3, #4
 800a54c:	4413      	add	r3, r2
 800a54e:	330c      	adds	r3, #12
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	3301      	adds	r3, #1
 800a554:	b29a      	uxth	r2, r3
 800a556:	e001      	b.n	800a55c <inc_lock+0xfc>
 800a558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a55c:	4906      	ldr	r1, [pc, #24]	; (800a578 <inc_lock+0x118>)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	011b      	lsls	r3, r3, #4
 800a562:	440b      	add	r3, r1
 800a564:	330c      	adds	r3, #12
 800a566:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3301      	adds	r3, #1
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	200004bc 	.word	0x200004bc

0800a57c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3b01      	subs	r3, #1
 800a588:	607b      	str	r3, [r7, #4]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d825      	bhi.n	800a5dc <dec_lock+0x60>
		n = Files[i].ctr;
 800a590:	4a17      	ldr	r2, [pc, #92]	; (800a5f0 <dec_lock+0x74>)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	011b      	lsls	r3, r3, #4
 800a596:	4413      	add	r3, r2
 800a598:	330c      	adds	r3, #12
 800a59a:	881b      	ldrh	r3, [r3, #0]
 800a59c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a59e:	89fb      	ldrh	r3, [r7, #14]
 800a5a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5a4:	d101      	bne.n	800a5aa <dec_lock+0x2e>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a5aa:	89fb      	ldrh	r3, [r7, #14]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <dec_lock+0x3a>
 800a5b0:	89fb      	ldrh	r3, [r7, #14]
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a5b6:	4a0e      	ldr	r2, [pc, #56]	; (800a5f0 <dec_lock+0x74>)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	4413      	add	r3, r2
 800a5be:	330c      	adds	r3, #12
 800a5c0:	89fa      	ldrh	r2, [r7, #14]
 800a5c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a5c4:	89fb      	ldrh	r3, [r7, #14]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <dec_lock+0x5a>
 800a5ca:	4a09      	ldr	r2, [pc, #36]	; (800a5f0 <dec_lock+0x74>)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	011b      	lsls	r3, r3, #4
 800a5d0:	4413      	add	r3, r2
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	737b      	strb	r3, [r7, #13]
 800a5da:	e001      	b.n	800a5e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a5dc:	2302      	movs	r3, #2
 800a5de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a5e0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3714      	adds	r7, #20
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	200004bc 	.word	0x200004bc

0800a5f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	60fb      	str	r3, [r7, #12]
 800a600:	e010      	b.n	800a624 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a602:	4a0d      	ldr	r2, [pc, #52]	; (800a638 <clear_lock+0x44>)
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	011b      	lsls	r3, r3, #4
 800a608:	4413      	add	r3, r2
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d105      	bne.n	800a61e <clear_lock+0x2a>
 800a612:	4a09      	ldr	r2, [pc, #36]	; (800a638 <clear_lock+0x44>)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	4413      	add	r3, r2
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3301      	adds	r3, #1
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d9eb      	bls.n	800a602 <clear_lock+0xe>
	}
}
 800a62a:	bf00      	nop
 800a62c:	bf00      	nop
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	200004bc 	.word	0x200004bc

0800a63c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	78db      	ldrb	r3, [r3, #3]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d034      	beq.n	800a6ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a654:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	7858      	ldrb	r0, [r3, #1]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a660:	2301      	movs	r3, #1
 800a662:	697a      	ldr	r2, [r7, #20]
 800a664:	f7ff fd40 	bl	800a0e8 <disk_write>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d002      	beq.n	800a674 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a66e:	2301      	movs	r3, #1
 800a670:	73fb      	strb	r3, [r7, #15]
 800a672:	e022      	b.n	800a6ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	1ad2      	subs	r2, r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	429a      	cmp	r2, r3
 800a688:	d217      	bcs.n	800a6ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	789b      	ldrb	r3, [r3, #2]
 800a68e:	613b      	str	r3, [r7, #16]
 800a690:	e010      	b.n	800a6b4 <sync_window+0x78>
					wsect += fs->fsize;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	4413      	add	r3, r2
 800a69a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	7858      	ldrb	r0, [r3, #1]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	f7ff fd1d 	bl	800a0e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	3b01      	subs	r3, #1
 800a6b2:	613b      	str	r3, [r7, #16]
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d8eb      	bhi.n	800a692 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3718      	adds	r7, #24
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d01b      	beq.n	800a714 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff ffad 	bl	800a63c <sync_window>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d113      	bne.n	800a714 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	7858      	ldrb	r0, [r3, #1]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	f7ff fcd5 	bl	800a0a8 <disk_read>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d004      	beq.n	800a70e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a704:	f04f 33ff 	mov.w	r3, #4294967295
 800a708:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a714:	7bfb      	ldrb	r3, [r7, #15]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff ff87 	bl	800a63c <sync_window>
 800a72e:	4603      	mov	r3, r0
 800a730:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d158      	bne.n	800a7ea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b03      	cmp	r3, #3
 800a73e:	d148      	bne.n	800a7d2 <sync_fs+0xb2>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	791b      	ldrb	r3, [r3, #4]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d144      	bne.n	800a7d2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3330      	adds	r3, #48	; 0x30
 800a74c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a750:	2100      	movs	r1, #0
 800a752:	4618      	mov	r0, r3
 800a754:	f7ff fda9 	bl	800a2aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	3330      	adds	r3, #48	; 0x30
 800a75c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a760:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a764:	4618      	mov	r0, r3
 800a766:	f7ff fd38 	bl	800a1da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	3330      	adds	r3, #48	; 0x30
 800a76e:	4921      	ldr	r1, [pc, #132]	; (800a7f4 <sync_fs+0xd4>)
 800a770:	4618      	mov	r0, r3
 800a772:	f7ff fd4d 	bl	800a210 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	3330      	adds	r3, #48	; 0x30
 800a77a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a77e:	491e      	ldr	r1, [pc, #120]	; (800a7f8 <sync_fs+0xd8>)
 800a780:	4618      	mov	r0, r3
 800a782:	f7ff fd45 	bl	800a210 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3330      	adds	r3, #48	; 0x30
 800a78a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	4619      	mov	r1, r3
 800a794:	4610      	mov	r0, r2
 800a796:	f7ff fd3b 	bl	800a210 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	3330      	adds	r3, #48	; 0x30
 800a79e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7ff fd31 	bl	800a210 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	69db      	ldr	r3, [r3, #28]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	7858      	ldrb	r0, [r3, #1]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	f7ff fc8e 	bl	800a0e8 <disk_write>
			fs->fsi_flag = 0;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	785b      	ldrb	r3, [r3, #1]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff fca4 	bl	800a128 <disk_ioctl>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <sync_fs+0xca>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a7ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3710      	adds	r7, #16
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	41615252 	.word	0x41615252
 800a7f8:	61417272 	.word	0x61417272

0800a7fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	3b02      	subs	r3, #2
 800a80a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	695b      	ldr	r3, [r3, #20]
 800a810:	3b02      	subs	r3, #2
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	429a      	cmp	r2, r3
 800a816:	d301      	bcc.n	800a81c <clust2sect+0x20>
 800a818:	2300      	movs	r3, #0
 800a81a:	e008      	b.n	800a82e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	895b      	ldrh	r3, [r3, #10]
 800a820:	461a      	mov	r2, r3
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	fb03 f202 	mul.w	r2, r3, r2
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82c:	4413      	add	r3, r2
}
 800a82e:	4618      	mov	r0, r3
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b086      	sub	sp, #24
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d904      	bls.n	800a85a <get_fat+0x20>
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	429a      	cmp	r2, r3
 800a858:	d302      	bcc.n	800a860 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a85a:	2301      	movs	r3, #1
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	e08f      	b.n	800a980 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a860:	f04f 33ff 	mov.w	r3, #4294967295
 800a864:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d062      	beq.n	800a934 <get_fat+0xfa>
 800a86e:	2b03      	cmp	r3, #3
 800a870:	dc7c      	bgt.n	800a96c <get_fat+0x132>
 800a872:	2b01      	cmp	r3, #1
 800a874:	d002      	beq.n	800a87c <get_fat+0x42>
 800a876:	2b02      	cmp	r3, #2
 800a878:	d042      	beq.n	800a900 <get_fat+0xc6>
 800a87a:	e077      	b.n	800a96c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	085b      	lsrs	r3, r3, #1
 800a884:	68fa      	ldr	r2, [r7, #12]
 800a886:	4413      	add	r3, r2
 800a888:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	6a1a      	ldr	r2, [r3, #32]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	0a5b      	lsrs	r3, r3, #9
 800a892:	4413      	add	r3, r2
 800a894:	4619      	mov	r1, r3
 800a896:	6938      	ldr	r0, [r7, #16]
 800a898:	f7ff ff14 	bl	800a6c4 <move_window>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d167      	bne.n	800a972 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	1c5a      	adds	r2, r3, #1
 800a8a6:	60fa      	str	r2, [r7, #12]
 800a8a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	6a1a      	ldr	r2, [r3, #32]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	0a5b      	lsrs	r3, r3, #9
 800a8be:	4413      	add	r3, r2
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6938      	ldr	r0, [r7, #16]
 800a8c4:	f7ff fefe 	bl	800a6c4 <move_window>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d153      	bne.n	800a976 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8dc:	021b      	lsls	r3, r3, #8
 800a8de:	461a      	mov	r2, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <get_fat+0xbc>
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	091b      	lsrs	r3, r3, #4
 800a8f4:	e002      	b.n	800a8fc <get_fat+0xc2>
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8fc:	617b      	str	r3, [r7, #20]
			break;
 800a8fe:	e03f      	b.n	800a980 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6a1a      	ldr	r2, [r3, #32]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	0a1b      	lsrs	r3, r3, #8
 800a908:	4413      	add	r3, r2
 800a90a:	4619      	mov	r1, r3
 800a90c:	6938      	ldr	r0, [r7, #16]
 800a90e:	f7ff fed9 	bl	800a6c4 <move_window>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d130      	bne.n	800a97a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	005b      	lsls	r3, r3, #1
 800a922:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a926:	4413      	add	r3, r2
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fc1b 	bl	800a164 <ld_word>
 800a92e:	4603      	mov	r3, r0
 800a930:	617b      	str	r3, [r7, #20]
			break;
 800a932:	e025      	b.n	800a980 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	6a1a      	ldr	r2, [r3, #32]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	09db      	lsrs	r3, r3, #7
 800a93c:	4413      	add	r3, r2
 800a93e:	4619      	mov	r1, r3
 800a940:	6938      	ldr	r0, [r7, #16]
 800a942:	f7ff febf 	bl	800a6c4 <move_window>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d118      	bne.n	800a97e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a95a:	4413      	add	r3, r2
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7ff fc19 	bl	800a194 <ld_dword>
 800a962:	4603      	mov	r3, r0
 800a964:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a968:	617b      	str	r3, [r7, #20]
			break;
 800a96a:	e009      	b.n	800a980 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a96c:	2301      	movs	r3, #1
 800a96e:	617b      	str	r3, [r7, #20]
 800a970:	e006      	b.n	800a980 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a972:	bf00      	nop
 800a974:	e004      	b.n	800a980 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a976:	bf00      	nop
 800a978:	e002      	b.n	800a980 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a97a:	bf00      	nop
 800a97c:	e000      	b.n	800a980 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a97e:	bf00      	nop
		}
	}

	return val;
 800a980:	697b      	ldr	r3, [r7, #20]
}
 800a982:	4618      	mov	r0, r3
 800a984:	3718      	adds	r7, #24
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}

0800a98a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a98a:	b590      	push	{r4, r7, lr}
 800a98c:	b089      	sub	sp, #36	; 0x24
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60f8      	str	r0, [r7, #12]
 800a992:	60b9      	str	r1, [r7, #8]
 800a994:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a996:	2302      	movs	r3, #2
 800a998:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	f240 80d2 	bls.w	800ab46 <put_fat+0x1bc>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	429a      	cmp	r2, r3
 800a9aa:	f080 80cc 	bcs.w	800ab46 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	f000 8096 	beq.w	800aae4 <put_fat+0x15a>
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	f300 80cd 	bgt.w	800ab58 <put_fat+0x1ce>
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	d002      	beq.n	800a9c8 <put_fat+0x3e>
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d06e      	beq.n	800aaa4 <put_fat+0x11a>
 800a9c6:	e0c7      	b.n	800ab58 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	61bb      	str	r3, [r7, #24]
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	085b      	lsrs	r3, r3, #1
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6a1a      	ldr	r2, [r3, #32]
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	0a5b      	lsrs	r3, r3, #9
 800a9de:	4413      	add	r3, r2
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f7ff fe6e 	bl	800a6c4 <move_window>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9ec:	7ffb      	ldrb	r3, [r7, #31]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f040 80ab 	bne.w	800ab4a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	1c59      	adds	r1, r3, #1
 800a9fe:	61b9      	str	r1, [r7, #24]
 800aa00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa04:	4413      	add	r3, r2
 800aa06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	f003 0301 	and.w	r3, r3, #1
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00d      	beq.n	800aa2e <put_fat+0xa4>
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	b25b      	sxtb	r3, r3
 800aa18:	f003 030f 	and.w	r3, r3, #15
 800aa1c:	b25a      	sxtb	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	011b      	lsls	r3, r3, #4
 800aa24:	b25b      	sxtb	r3, r3
 800aa26:	4313      	orrs	r3, r2
 800aa28:	b25b      	sxtb	r3, r3
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	e001      	b.n	800aa32 <put_fat+0xa8>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2201      	movs	r2, #1
 800aa3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6a1a      	ldr	r2, [r3, #32]
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	0a5b      	lsrs	r3, r3, #9
 800aa44:	4413      	add	r3, r2
 800aa46:	4619      	mov	r1, r3
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f7ff fe3b 	bl	800a6c4 <move_window>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa52:	7ffb      	ldrb	r3, [r7, #31]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d17a      	bne.n	800ab4e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa64:	4413      	add	r3, r2
 800aa66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f003 0301 	and.w	r3, r3, #1
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <put_fat+0xf0>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	091b      	lsrs	r3, r3, #4
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	e00e      	b.n	800aa98 <put_fat+0x10e>
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b25b      	sxtb	r3, r3
 800aa80:	f023 030f 	bic.w	r3, r3, #15
 800aa84:	b25a      	sxtb	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	0a1b      	lsrs	r3, r3, #8
 800aa8a:	b25b      	sxtb	r3, r3
 800aa8c:	f003 030f 	and.w	r3, r3, #15
 800aa90:	b25b      	sxtb	r3, r3
 800aa92:	4313      	orrs	r3, r2
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	70da      	strb	r2, [r3, #3]
			break;
 800aaa2:	e059      	b.n	800ab58 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6a1a      	ldr	r2, [r3, #32]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	0a1b      	lsrs	r3, r3, #8
 800aaac:	4413      	add	r3, r2
 800aaae:	4619      	mov	r1, r3
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f7ff fe07 	bl	800a6c4 <move_window>
 800aab6:	4603      	mov	r3, r0
 800aab8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aaba:	7ffb      	ldrb	r3, [r7, #31]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d148      	bne.n	800ab52 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	005b      	lsls	r3, r3, #1
 800aaca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aace:	4413      	add	r3, r2
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	b292      	uxth	r2, r2
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff fb7f 	bl	800a1da <st_word>
			fs->wflag = 1;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2201      	movs	r2, #1
 800aae0:	70da      	strb	r2, [r3, #3]
			break;
 800aae2:	e039      	b.n	800ab58 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6a1a      	ldr	r2, [r3, #32]
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	09db      	lsrs	r3, r3, #7
 800aaec:	4413      	add	r3, r2
 800aaee:	4619      	mov	r1, r3
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f7ff fde7 	bl	800a6c4 <move_window>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aafa:	7ffb      	ldrb	r3, [r7, #31]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d12a      	bne.n	800ab56 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ab14:	4413      	add	r3, r2
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff fb3c 	bl	800a194 <ld_dword>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ab22:	4323      	orrs	r3, r4
 800ab24:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ab34:	4413      	add	r3, r2
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff fb69 	bl	800a210 <st_dword>
			fs->wflag = 1;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2201      	movs	r2, #1
 800ab42:	70da      	strb	r2, [r3, #3]
			break;
 800ab44:	e008      	b.n	800ab58 <put_fat+0x1ce>
		}
	}
 800ab46:	bf00      	nop
 800ab48:	e006      	b.n	800ab58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab4a:	bf00      	nop
 800ab4c:	e004      	b.n	800ab58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab4e:	bf00      	nop
 800ab50:	e002      	b.n	800ab58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab52:	bf00      	nop
 800ab54:	e000      	b.n	800ab58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab56:	bf00      	nop
	return res;
 800ab58:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3724      	adds	r7, #36	; 0x24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd90      	pop	{r4, r7, pc}

0800ab62 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b088      	sub	sp, #32
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d904      	bls.n	800ab88 <remove_chain+0x26>
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d301      	bcc.n	800ab8c <remove_chain+0x2a>
 800ab88:	2302      	movs	r3, #2
 800ab8a:	e04b      	b.n	800ac24 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00c      	beq.n	800abac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ab92:	f04f 32ff 	mov.w	r2, #4294967295
 800ab96:	6879      	ldr	r1, [r7, #4]
 800ab98:	69b8      	ldr	r0, [r7, #24]
 800ab9a:	f7ff fef6 	bl	800a98a <put_fat>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800aba2:	7ffb      	ldrb	r3, [r7, #31]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <remove_chain+0x4a>
 800aba8:	7ffb      	ldrb	r3, [r7, #31]
 800abaa:	e03b      	b.n	800ac24 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800abac:	68b9      	ldr	r1, [r7, #8]
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7ff fe43 	bl	800a83a <get_fat>
 800abb4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d031      	beq.n	800ac20 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d101      	bne.n	800abc6 <remove_chain+0x64>
 800abc2:	2302      	movs	r3, #2
 800abc4:	e02e      	b.n	800ac24 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abcc:	d101      	bne.n	800abd2 <remove_chain+0x70>
 800abce:	2301      	movs	r3, #1
 800abd0:	e028      	b.n	800ac24 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800abd2:	2200      	movs	r2, #0
 800abd4:	68b9      	ldr	r1, [r7, #8]
 800abd6:	69b8      	ldr	r0, [r7, #24]
 800abd8:	f7ff fed7 	bl	800a98a <put_fat>
 800abdc:	4603      	mov	r3, r0
 800abde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800abe0:	7ffb      	ldrb	r3, [r7, #31]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <remove_chain+0x88>
 800abe6:	7ffb      	ldrb	r3, [r7, #31]
 800abe8:	e01c      	b.n	800ac24 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	691a      	ldr	r2, [r3, #16]
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	3b02      	subs	r3, #2
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d20b      	bcs.n	800ac10 <remove_chain+0xae>
			fs->free_clst++;
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	691b      	ldr	r3, [r3, #16]
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ac02:	69bb      	ldr	r3, [r7, #24]
 800ac04:	791b      	ldrb	r3, [r3, #4]
 800ac06:	f043 0301 	orr.w	r3, r3, #1
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	695b      	ldr	r3, [r3, #20]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d3c6      	bcc.n	800abac <remove_chain+0x4a>
 800ac1e:	e000      	b.n	800ac22 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ac20:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3720      	adds	r7, #32
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10d      	bne.n	800ac5e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d004      	beq.n	800ac58 <create_chain+0x2c>
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	69ba      	ldr	r2, [r7, #24]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d31b      	bcc.n	800ac90 <create_chain+0x64>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	61bb      	str	r3, [r7, #24]
 800ac5c:	e018      	b.n	800ac90 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f7ff fdea 	bl	800a83a <get_fat>
 800ac66:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d801      	bhi.n	800ac72 <create_chain+0x46>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e070      	b.n	800ad54 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac78:	d101      	bne.n	800ac7e <create_chain+0x52>
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	e06a      	b.n	800ad54 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d201      	bcs.n	800ac8c <create_chain+0x60>
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	e063      	b.n	800ad54 <create_chain+0x128>
		scl = clst;
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	3301      	adds	r3, #1
 800ac98:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	69fa      	ldr	r2, [r7, #28]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d307      	bcc.n	800acb4 <create_chain+0x88>
				ncl = 2;
 800aca4:	2302      	movs	r3, #2
 800aca6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aca8:	69fa      	ldr	r2, [r7, #28]
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	429a      	cmp	r2, r3
 800acae:	d901      	bls.n	800acb4 <create_chain+0x88>
 800acb0:	2300      	movs	r3, #0
 800acb2:	e04f      	b.n	800ad54 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800acb4:	69f9      	ldr	r1, [r7, #28]
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fdbf 	bl	800a83a <get_fat>
 800acbc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00e      	beq.n	800ace2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d003      	beq.n	800acd2 <create_chain+0xa6>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd0:	d101      	bne.n	800acd6 <create_chain+0xaa>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	e03e      	b.n	800ad54 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800acd6:	69fa      	ldr	r2, [r7, #28]
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d1da      	bne.n	800ac94 <create_chain+0x68>
 800acde:	2300      	movs	r3, #0
 800ace0:	e038      	b.n	800ad54 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ace2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295
 800ace8:	69f9      	ldr	r1, [r7, #28]
 800acea:	6938      	ldr	r0, [r7, #16]
 800acec:	f7ff fe4d 	bl	800a98a <put_fat>
 800acf0:	4603      	mov	r3, r0
 800acf2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800acf4:	7dfb      	ldrb	r3, [r7, #23]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d109      	bne.n	800ad0e <create_chain+0xe2>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ad00:	69fa      	ldr	r2, [r7, #28]
 800ad02:	6839      	ldr	r1, [r7, #0]
 800ad04:	6938      	ldr	r0, [r7, #16]
 800ad06:	f7ff fe40 	bl	800a98a <put_fat>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d116      	bne.n	800ad42 <create_chain+0x116>
		fs->last_clst = ncl;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	69fa      	ldr	r2, [r7, #28]
 800ad18:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	691a      	ldr	r2, [r3, #16]
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	695b      	ldr	r3, [r3, #20]
 800ad22:	3b02      	subs	r3, #2
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d804      	bhi.n	800ad32 <create_chain+0x106>
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	1e5a      	subs	r2, r3, #1
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	791b      	ldrb	r3, [r3, #4]
 800ad36:	f043 0301 	orr.w	r3, r3, #1
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	711a      	strb	r2, [r3, #4]
 800ad40:	e007      	b.n	800ad52 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d102      	bne.n	800ad4e <create_chain+0x122>
 800ad48:	f04f 33ff 	mov.w	r3, #4294967295
 800ad4c:	e000      	b.n	800ad50 <create_chain+0x124>
 800ad4e:	2301      	movs	r3, #1
 800ad50:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad52:	69fb      	ldr	r3, [r7, #28]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3720      	adds	r7, #32
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	3304      	adds	r3, #4
 800ad72:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	0a5b      	lsrs	r3, r3, #9
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	8952      	ldrh	r2, [r2, #10]
 800ad7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad80:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	1d1a      	adds	r2, r3, #4
 800ad86:	613a      	str	r2, [r7, #16]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d101      	bne.n	800ad96 <clmt_clust+0x3a>
 800ad92:	2300      	movs	r3, #0
 800ad94:	e010      	b.n	800adb8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d307      	bcc.n	800adae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	1ad3      	subs	r3, r2, r3
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	3304      	adds	r3, #4
 800adaa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800adac:	e7e9      	b.n	800ad82 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800adae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	4413      	add	r3, r2
}
 800adb8:	4618      	mov	r0, r3
 800adba:	371c      	adds	r7, #28
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adda:	d204      	bcs.n	800ade6 <dir_sdi+0x22>
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	f003 031f 	and.w	r3, r3, #31
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <dir_sdi+0x26>
		return FR_INT_ERR;
 800ade6:	2302      	movs	r3, #2
 800ade8:	e063      	b.n	800aeb2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	683a      	ldr	r2, [r7, #0]
 800adee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d106      	bne.n	800ae0a <dir_sdi+0x46>
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d902      	bls.n	800ae0a <dir_sdi+0x46>
		clst = fs->dirbase;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae08:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d10c      	bne.n	800ae2a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	8912      	ldrh	r2, [r2, #8]
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d301      	bcc.n	800ae20 <dir_sdi+0x5c>
 800ae1c:	2302      	movs	r3, #2
 800ae1e:	e048      	b.n	800aeb2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	61da      	str	r2, [r3, #28]
 800ae28:	e029      	b.n	800ae7e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	895b      	ldrh	r3, [r3, #10]
 800ae2e:	025b      	lsls	r3, r3, #9
 800ae30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae32:	e019      	b.n	800ae68 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6979      	ldr	r1, [r7, #20]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7ff fcfe 	bl	800a83a <get_fat>
 800ae3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae46:	d101      	bne.n	800ae4c <dir_sdi+0x88>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e032      	b.n	800aeb2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d904      	bls.n	800ae5c <dir_sdi+0x98>
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	695b      	ldr	r3, [r3, #20]
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d301      	bcc.n	800ae60 <dir_sdi+0x9c>
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	e028      	b.n	800aeb2 <dir_sdi+0xee>
			ofs -= csz;
 800ae60:	683a      	ldr	r2, [r7, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d2e1      	bcs.n	800ae34 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ae70:	6979      	ldr	r1, [r7, #20]
 800ae72:	6938      	ldr	r0, [r7, #16]
 800ae74:	f7ff fcc2 	bl	800a7fc <clust2sect>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	697a      	ldr	r2, [r7, #20]
 800ae82:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d101      	bne.n	800ae90 <dir_sdi+0xcc>
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	e010      	b.n	800aeb2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	69da      	ldr	r2, [r3, #28]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	0a5b      	lsrs	r3, r3, #9
 800ae98:	441a      	add	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeaa:	441a      	add	r2, r3
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3718      	adds	r7, #24
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b086      	sub	sp, #24
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
 800aec2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	3320      	adds	r3, #32
 800aed0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d003      	beq.n	800aee2 <dir_next+0x28>
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aee0:	d301      	bcc.n	800aee6 <dir_next+0x2c>
 800aee2:	2304      	movs	r3, #4
 800aee4:	e0aa      	b.n	800b03c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f040 8098 	bne.w	800b022 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	69db      	ldr	r3, [r3, #28]
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d10b      	bne.n	800af1c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	095b      	lsrs	r3, r3, #5
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	8912      	ldrh	r2, [r2, #8]
 800af0c:	4293      	cmp	r3, r2
 800af0e:	f0c0 8088 	bcc.w	800b022 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	61da      	str	r2, [r3, #28]
 800af18:	2304      	movs	r3, #4
 800af1a:	e08f      	b.n	800b03c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	0a5b      	lsrs	r3, r3, #9
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	8952      	ldrh	r2, [r2, #10]
 800af24:	3a01      	subs	r2, #1
 800af26:	4013      	ands	r3, r2
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d17a      	bne.n	800b022 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	4619      	mov	r1, r3
 800af34:	4610      	mov	r0, r2
 800af36:	f7ff fc80 	bl	800a83a <get_fat>
 800af3a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d801      	bhi.n	800af46 <dir_next+0x8c>
 800af42:	2302      	movs	r3, #2
 800af44:	e07a      	b.n	800b03c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4c:	d101      	bne.n	800af52 <dir_next+0x98>
 800af4e:	2301      	movs	r3, #1
 800af50:	e074      	b.n	800b03c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d358      	bcc.n	800b00e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d104      	bne.n	800af6c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	61da      	str	r2, [r3, #28]
 800af68:	2304      	movs	r3, #4
 800af6a:	e067      	b.n	800b03c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	4619      	mov	r1, r3
 800af74:	4610      	mov	r0, r2
 800af76:	f7ff fe59 	bl	800ac2c <create_chain>
 800af7a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <dir_next+0xcc>
 800af82:	2307      	movs	r3, #7
 800af84:	e05a      	b.n	800b03c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d101      	bne.n	800af90 <dir_next+0xd6>
 800af8c:	2302      	movs	r3, #2
 800af8e:	e055      	b.n	800b03c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af96:	d101      	bne.n	800af9c <dir_next+0xe2>
 800af98:	2301      	movs	r3, #1
 800af9a:	e04f      	b.n	800b03c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800af9c:	68f8      	ldr	r0, [r7, #12]
 800af9e:	f7ff fb4d 	bl	800a63c <sync_window>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <dir_next+0xf2>
 800afa8:	2301      	movs	r3, #1
 800afaa:	e047      	b.n	800b03c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	3330      	adds	r3, #48	; 0x30
 800afb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afb4:	2100      	movs	r1, #0
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7ff f977 	bl	800a2aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afbc:	2300      	movs	r3, #0
 800afbe:	613b      	str	r3, [r7, #16]
 800afc0:	6979      	ldr	r1, [r7, #20]
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f7ff fc1a 	bl	800a7fc <clust2sect>
 800afc8:	4602      	mov	r2, r0
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	62da      	str	r2, [r3, #44]	; 0x2c
 800afce:	e012      	b.n	800aff6 <dir_next+0x13c>
						fs->wflag = 1;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2201      	movs	r2, #1
 800afd4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f7ff fb30 	bl	800a63c <sync_window>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <dir_next+0x12c>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e02a      	b.n	800b03c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	3301      	adds	r3, #1
 800afea:	613b      	str	r3, [r7, #16]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	62da      	str	r2, [r3, #44]	; 0x2c
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	895b      	ldrh	r3, [r3, #10]
 800affa:	461a      	mov	r2, r3
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	4293      	cmp	r3, r2
 800b000:	d3e6      	bcc.n	800afd0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	1ad2      	subs	r2, r2, r3
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b014:	6979      	ldr	r1, [r7, #20]
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	f7ff fbf0 	bl	800a7fc <clust2sect>
 800b01c:	4602      	mov	r2, r0
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	68ba      	ldr	r2, [r7, #8]
 800b026:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b034:	441a      	add	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3718      	adds	r7, #24
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b054:	2100      	movs	r1, #0
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7ff feb4 	bl	800adc4 <dir_sdi>
 800b05c:	4603      	mov	r3, r0
 800b05e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b060:	7dfb      	ldrb	r3, [r7, #23]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d12b      	bne.n	800b0be <dir_alloc+0x7a>
		n = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	69db      	ldr	r3, [r3, #28]
 800b06e:	4619      	mov	r1, r3
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7ff fb27 	bl	800a6c4 <move_window>
 800b076:	4603      	mov	r3, r0
 800b078:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d11d      	bne.n	800b0bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2be5      	cmp	r3, #229	; 0xe5
 800b088:	d004      	beq.n	800b094 <dir_alloc+0x50>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d107      	bne.n	800b0a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	3301      	adds	r3, #1
 800b098:	613b      	str	r3, [r7, #16]
 800b09a:	693a      	ldr	r2, [r7, #16]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d102      	bne.n	800b0a8 <dir_alloc+0x64>
 800b0a2:	e00c      	b.n	800b0be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f7ff ff05 	bl	800aeba <dir_next>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b0b4:	7dfb      	ldrb	r3, [r7, #23]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d0d7      	beq.n	800b06a <dir_alloc+0x26>
 800b0ba:	e000      	b.n	800b0be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b0bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b0be:	7dfb      	ldrb	r3, [r7, #23]
 800b0c0:	2b04      	cmp	r3, #4
 800b0c2:	d101      	bne.n	800b0c8 <dir_alloc+0x84>
 800b0c4:	2307      	movs	r3, #7
 800b0c6:	75fb      	strb	r3, [r7, #23]
	return res;
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	331a      	adds	r3, #26
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff f83f 	bl	800a164 <ld_word>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d109      	bne.n	800b106 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	3314      	adds	r3, #20
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7ff f834 	bl	800a164 <ld_word>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	041b      	lsls	r3, r3, #16
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	4313      	orrs	r3, r2
 800b104:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b106:	68fb      	ldr	r3, [r7, #12]
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	60b9      	str	r1, [r7, #8]
 800b11a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	331a      	adds	r3, #26
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	b292      	uxth	r2, r2
 800b124:	4611      	mov	r1, r2
 800b126:	4618      	mov	r0, r3
 800b128:	f7ff f857 	bl	800a1da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b03      	cmp	r3, #3
 800b132:	d109      	bne.n	800b148 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	f103 0214 	add.w	r2, r3, #20
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	0c1b      	lsrs	r3, r3, #16
 800b13e:	b29b      	uxth	r3, r3
 800b140:	4619      	mov	r1, r3
 800b142:	4610      	mov	r0, r2
 800b144:	f7ff f849 	bl	800a1da <st_word>
	}
}
 800b148:	bf00      	nop
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b15a:	2304      	movs	r3, #4
 800b15c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b164:	e03c      	b.n	800b1e0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	4619      	mov	r1, r3
 800b16c:	6938      	ldr	r0, [r7, #16]
 800b16e:	f7ff faa9 	bl	800a6c4 <move_window>
 800b172:	4603      	mov	r3, r0
 800b174:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b176:	7dfb      	ldrb	r3, [r7, #23]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d136      	bne.n	800b1ea <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a1b      	ldr	r3, [r3, #32]
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b184:	7bfb      	ldrb	r3, [r7, #15]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d102      	bne.n	800b190 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b18a:	2304      	movs	r3, #4
 800b18c:	75fb      	strb	r3, [r7, #23]
 800b18e:	e031      	b.n	800b1f4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a1b      	ldr	r3, [r3, #32]
 800b194:	330b      	adds	r3, #11
 800b196:	781b      	ldrb	r3, [r3, #0]
 800b198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b19c:	73bb      	strb	r3, [r7, #14]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	7bba      	ldrb	r2, [r7, #14]
 800b1a2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	2be5      	cmp	r3, #229	; 0xe5
 800b1a8:	d011      	beq.n	800b1ce <dir_read+0x7e>
 800b1aa:	7bfb      	ldrb	r3, [r7, #15]
 800b1ac:	2b2e      	cmp	r3, #46	; 0x2e
 800b1ae:	d00e      	beq.n	800b1ce <dir_read+0x7e>
 800b1b0:	7bbb      	ldrb	r3, [r7, #14]
 800b1b2:	2b0f      	cmp	r3, #15
 800b1b4:	d00b      	beq.n	800b1ce <dir_read+0x7e>
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	f023 0320 	bic.w	r3, r3, #32
 800b1bc:	2b08      	cmp	r3, #8
 800b1be:	bf0c      	ite	eq
 800b1c0:	2301      	moveq	r3, #1
 800b1c2:	2300      	movne	r3, #0
 800b1c4:	b2db      	uxtb	r3, r3
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d00f      	beq.n	800b1ee <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7ff fe72 	bl	800aeba <dir_next>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d108      	bne.n	800b1f2 <dir_read+0xa2>
	while (dp->sect) {
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	69db      	ldr	r3, [r3, #28]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1be      	bne.n	800b166 <dir_read+0x16>
 800b1e8:	e004      	b.n	800b1f4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b1ea:	bf00      	nop
 800b1ec:	e002      	b.n	800b1f4 <dir_read+0xa4>
				break;
 800b1ee:	bf00      	nop
 800b1f0:	e000      	b.n	800b1f4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b1f2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b1f4:	7dfb      	ldrb	r3, [r7, #23]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d002      	beq.n	800b200 <dir_read+0xb0>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	61da      	str	r2, [r3, #28]
	return res;
 800b200:	7dfb      	ldrb	r3, [r7, #23]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3718      	adds	r7, #24
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b086      	sub	sp, #24
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b218:	2100      	movs	r1, #0
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f7ff fdd2 	bl	800adc4 <dir_sdi>
 800b220:	4603      	mov	r3, r0
 800b222:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d001      	beq.n	800b22e <dir_find+0x24>
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	e03e      	b.n	800b2ac <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	4619      	mov	r1, r3
 800b234:	6938      	ldr	r0, [r7, #16]
 800b236:	f7ff fa45 	bl	800a6c4 <move_window>
 800b23a:	4603      	mov	r3, r0
 800b23c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b23e:	7dfb      	ldrb	r3, [r7, #23]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d12f      	bne.n	800b2a4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6a1b      	ldr	r3, [r3, #32]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d102      	bne.n	800b258 <dir_find+0x4e>
 800b252:	2304      	movs	r3, #4
 800b254:	75fb      	strb	r3, [r7, #23]
 800b256:	e028      	b.n	800b2aa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6a1b      	ldr	r3, [r3, #32]
 800b25c:	330b      	adds	r3, #11
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b264:	b2da      	uxtb	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	330b      	adds	r3, #11
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	f003 0308 	and.w	r3, r3, #8
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10a      	bne.n	800b290 <dir_find+0x86>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a18      	ldr	r0, [r3, #32]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3324      	adds	r3, #36	; 0x24
 800b282:	220b      	movs	r2, #11
 800b284:	4619      	mov	r1, r3
 800b286:	f7ff f82b 	bl	800a2e0 <mem_cmp>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00b      	beq.n	800b2a8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b290:	2100      	movs	r1, #0
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f7ff fe11 	bl	800aeba <dir_next>
 800b298:	4603      	mov	r3, r0
 800b29a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d0c5      	beq.n	800b22e <dir_find+0x24>
 800b2a2:	e002      	b.n	800b2aa <dir_find+0xa0>
		if (res != FR_OK) break;
 800b2a4:	bf00      	nop
 800b2a6:	e000      	b.n	800b2aa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b2a8:	bf00      	nop

	return res;
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b2c2:	2101      	movs	r1, #1
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff febd 	bl	800b044 <dir_alloc>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d11c      	bne.n	800b30e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	69db      	ldr	r3, [r3, #28]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	68b8      	ldr	r0, [r7, #8]
 800b2dc:	f7ff f9f2 	bl	800a6c4 <move_window>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b2e4:	7bfb      	ldrb	r3, [r7, #15]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d111      	bne.n	800b30e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	2220      	movs	r2, #32
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe ffd9 	bl	800a2aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a18      	ldr	r0, [r3, #32]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	3324      	adds	r3, #36	; 0x24
 800b300:	220b      	movs	r2, #11
 800b302:	4619      	mov	r1, r3
 800b304:	f7fe ffb0 	bl	800a268 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2201      	movs	r2, #1
 800b30c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2200      	movs	r2, #0
 800b326:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	69db      	ldr	r3, [r3, #28]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d04e      	beq.n	800b3ce <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	613b      	str	r3, [r7, #16]
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b338:	e021      	b.n	800b37e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a1a      	ldr	r2, [r3, #32]
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	1c59      	adds	r1, r3, #1
 800b342:	6179      	str	r1, [r7, #20]
 800b344:	4413      	add	r3, r2
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b34a:	7bfb      	ldrb	r3, [r7, #15]
 800b34c:	2b20      	cmp	r3, #32
 800b34e:	d100      	bne.n	800b352 <get_fileinfo+0x3a>
 800b350:	e015      	b.n	800b37e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b352:	7bfb      	ldrb	r3, [r7, #15]
 800b354:	2b05      	cmp	r3, #5
 800b356:	d101      	bne.n	800b35c <get_fileinfo+0x44>
 800b358:	23e5      	movs	r3, #229	; 0xe5
 800b35a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	2b09      	cmp	r3, #9
 800b360:	d106      	bne.n	800b370 <get_fileinfo+0x58>
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	613a      	str	r2, [r7, #16]
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	4413      	add	r3, r2
 800b36c:	222e      	movs	r2, #46	; 0x2e
 800b36e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	1c5a      	adds	r2, r3, #1
 800b374:	613a      	str	r2, [r7, #16]
 800b376:	683a      	ldr	r2, [r7, #0]
 800b378:	4413      	add	r3, r2
 800b37a:	7bfa      	ldrb	r2, [r7, #15]
 800b37c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2b0a      	cmp	r3, #10
 800b382:	d9da      	bls.n	800b33a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b384:	683a      	ldr	r2, [r7, #0]
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	4413      	add	r3, r2
 800b38a:	3309      	adds	r3, #9
 800b38c:	2200      	movs	r2, #0
 800b38e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a1b      	ldr	r3, [r3, #32]
 800b394:	7ada      	ldrb	r2, [r3, #11]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a1b      	ldr	r3, [r3, #32]
 800b39e:	331c      	adds	r3, #28
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7fe fef7 	bl	800a194 <ld_dword>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	3316      	adds	r3, #22
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe feee 	bl	800a194 <ld_dword>
 800b3b8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	80da      	strh	r2, [r3, #6]
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	0c1b      	lsrs	r3, r3, #16
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	809a      	strh	r2, [r3, #4]
 800b3cc:	e000      	b.n	800b3d0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b3ce:	bf00      	nop
}
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
	...

0800b3d8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b088      	sub	sp, #32
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3324      	adds	r3, #36	; 0x24
 800b3ec:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b3ee:	220b      	movs	r2, #11
 800b3f0:	2120      	movs	r1, #32
 800b3f2:	68b8      	ldr	r0, [r7, #8]
 800b3f4:	f7fe ff59 	bl	800a2aa <mem_set>
	si = i = 0; ni = 8;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	613b      	str	r3, [r7, #16]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	61fb      	str	r3, [r7, #28]
 800b400:	2308      	movs	r3, #8
 800b402:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	61fa      	str	r2, [r7, #28]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	4413      	add	r3, r2
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b412:	7efb      	ldrb	r3, [r7, #27]
 800b414:	2b20      	cmp	r3, #32
 800b416:	d94e      	bls.n	800b4b6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b418:	7efb      	ldrb	r3, [r7, #27]
 800b41a:	2b2f      	cmp	r3, #47	; 0x2f
 800b41c:	d006      	beq.n	800b42c <create_name+0x54>
 800b41e:	7efb      	ldrb	r3, [r7, #27]
 800b420:	2b5c      	cmp	r3, #92	; 0x5c
 800b422:	d110      	bne.n	800b446 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b424:	e002      	b.n	800b42c <create_name+0x54>
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	3301      	adds	r3, #1
 800b42a:	61fb      	str	r3, [r7, #28]
 800b42c:	68fa      	ldr	r2, [r7, #12]
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	4413      	add	r3, r2
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	2b2f      	cmp	r3, #47	; 0x2f
 800b436:	d0f6      	beq.n	800b426 <create_name+0x4e>
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	4413      	add	r3, r2
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2b5c      	cmp	r3, #92	; 0x5c
 800b442:	d0f0      	beq.n	800b426 <create_name+0x4e>
			break;
 800b444:	e038      	b.n	800b4b8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b446:	7efb      	ldrb	r3, [r7, #27]
 800b448:	2b2e      	cmp	r3, #46	; 0x2e
 800b44a:	d003      	beq.n	800b454 <create_name+0x7c>
 800b44c:	693a      	ldr	r2, [r7, #16]
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	429a      	cmp	r2, r3
 800b452:	d30c      	bcc.n	800b46e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	2b0b      	cmp	r3, #11
 800b458:	d002      	beq.n	800b460 <create_name+0x88>
 800b45a:	7efb      	ldrb	r3, [r7, #27]
 800b45c:	2b2e      	cmp	r3, #46	; 0x2e
 800b45e:	d001      	beq.n	800b464 <create_name+0x8c>
 800b460:	2306      	movs	r3, #6
 800b462:	e044      	b.n	800b4ee <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b464:	2308      	movs	r3, #8
 800b466:	613b      	str	r3, [r7, #16]
 800b468:	230b      	movs	r3, #11
 800b46a:	617b      	str	r3, [r7, #20]
			continue;
 800b46c:	e022      	b.n	800b4b4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b46e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b472:	2b00      	cmp	r3, #0
 800b474:	da04      	bge.n	800b480 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b476:	7efb      	ldrb	r3, [r7, #27]
 800b478:	3b80      	subs	r3, #128	; 0x80
 800b47a:	4a1f      	ldr	r2, [pc, #124]	; (800b4f8 <create_name+0x120>)
 800b47c:	5cd3      	ldrb	r3, [r2, r3]
 800b47e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b480:	7efb      	ldrb	r3, [r7, #27]
 800b482:	4619      	mov	r1, r3
 800b484:	481d      	ldr	r0, [pc, #116]	; (800b4fc <create_name+0x124>)
 800b486:	f7fe ff52 	bl	800a32e <chk_chr>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d001      	beq.n	800b494 <create_name+0xbc>
 800b490:	2306      	movs	r3, #6
 800b492:	e02c      	b.n	800b4ee <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b494:	7efb      	ldrb	r3, [r7, #27]
 800b496:	2b60      	cmp	r3, #96	; 0x60
 800b498:	d905      	bls.n	800b4a6 <create_name+0xce>
 800b49a:	7efb      	ldrb	r3, [r7, #27]
 800b49c:	2b7a      	cmp	r3, #122	; 0x7a
 800b49e:	d802      	bhi.n	800b4a6 <create_name+0xce>
 800b4a0:	7efb      	ldrb	r3, [r7, #27]
 800b4a2:	3b20      	subs	r3, #32
 800b4a4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	1c5a      	adds	r2, r3, #1
 800b4aa:	613a      	str	r2, [r7, #16]
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	7efa      	ldrb	r2, [r7, #27]
 800b4b2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b4b4:	e7a6      	b.n	800b404 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b4b6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	441a      	add	r2, r3
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <create_name+0xf4>
 800b4c8:	2306      	movs	r3, #6
 800b4ca:	e010      	b.n	800b4ee <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2be5      	cmp	r3, #229	; 0xe5
 800b4d2:	d102      	bne.n	800b4da <create_name+0x102>
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2205      	movs	r2, #5
 800b4d8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b4da:	7efb      	ldrb	r3, [r7, #27]
 800b4dc:	2b20      	cmp	r3, #32
 800b4de:	d801      	bhi.n	800b4e4 <create_name+0x10c>
 800b4e0:	2204      	movs	r2, #4
 800b4e2:	e000      	b.n	800b4e6 <create_name+0x10e>
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	330b      	adds	r3, #11
 800b4ea:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b4ec:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3720      	adds	r7, #32
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	080125c4 	.word	0x080125c4
 800b4fc:	08012530 	.word	0x08012530

0800b500 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b514:	e002      	b.n	800b51c <follow_path+0x1c>
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	3301      	adds	r3, #1
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	2b2f      	cmp	r3, #47	; 0x2f
 800b522:	d0f8      	beq.n	800b516 <follow_path+0x16>
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	2b5c      	cmp	r3, #92	; 0x5c
 800b52a:	d0f4      	beq.n	800b516 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	2200      	movs	r2, #0
 800b530:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	2b1f      	cmp	r3, #31
 800b538:	d80a      	bhi.n	800b550 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2280      	movs	r2, #128	; 0x80
 800b53e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b542:	2100      	movs	r1, #0
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff fc3d 	bl	800adc4 <dir_sdi>
 800b54a:	4603      	mov	r3, r0
 800b54c:	75fb      	strb	r3, [r7, #23]
 800b54e:	e043      	b.n	800b5d8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b550:	463b      	mov	r3, r7
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff ff3f 	bl	800b3d8 <create_name>
 800b55a:	4603      	mov	r3, r0
 800b55c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b55e:	7dfb      	ldrb	r3, [r7, #23]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d134      	bne.n	800b5ce <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f7ff fe50 	bl	800b20a <dir_find>
 800b56a:	4603      	mov	r3, r0
 800b56c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b574:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00a      	beq.n	800b592 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b57c:	7dfb      	ldrb	r3, [r7, #23]
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d127      	bne.n	800b5d2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b582:	7afb      	ldrb	r3, [r7, #11]
 800b584:	f003 0304 	and.w	r3, r3, #4
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d122      	bne.n	800b5d2 <follow_path+0xd2>
 800b58c:	2305      	movs	r3, #5
 800b58e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b590:	e01f      	b.n	800b5d2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b592:	7afb      	ldrb	r3, [r7, #11]
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d11c      	bne.n	800b5d6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	799b      	ldrb	r3, [r3, #6]
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b5a8:	2305      	movs	r3, #5
 800b5aa:	75fb      	strb	r3, [r7, #23]
 800b5ac:	e014      	b.n	800b5d8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	695b      	ldr	r3, [r3, #20]
 800b5b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5bc:	4413      	add	r3, r2
 800b5be:	4619      	mov	r1, r3
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f7ff fd86 	bl	800b0d2 <ld_clust>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5cc:	e7c0      	b.n	800b550 <follow_path+0x50>
			if (res != FR_OK) break;
 800b5ce:	bf00      	nop
 800b5d0:	e002      	b.n	800b5d8 <follow_path+0xd8>
				break;
 800b5d2:	bf00      	nop
 800b5d4:	e000      	b.n	800b5d8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5d6:	bf00      	nop
			}
		}
	}

	return res;
 800b5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b087      	sub	sp, #28
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ee:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d031      	beq.n	800b65c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	617b      	str	r3, [r7, #20]
 800b5fe:	e002      	b.n	800b606 <get_ldnumber+0x24>
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	3301      	adds	r3, #1
 800b604:	617b      	str	r3, [r7, #20]
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	2b20      	cmp	r3, #32
 800b60c:	d903      	bls.n	800b616 <get_ldnumber+0x34>
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	2b3a      	cmp	r3, #58	; 0x3a
 800b614:	d1f4      	bne.n	800b600 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	2b3a      	cmp	r3, #58	; 0x3a
 800b61c:	d11c      	bne.n	800b658 <get_ldnumber+0x76>
			tp = *path;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	60fa      	str	r2, [r7, #12]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	3b30      	subs	r3, #48	; 0x30
 800b62e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2b09      	cmp	r3, #9
 800b634:	d80e      	bhi.n	800b654 <get_ldnumber+0x72>
 800b636:	68fa      	ldr	r2, [r7, #12]
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d10a      	bne.n	800b654 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d107      	bne.n	800b654 <get_ldnumber+0x72>
					vol = (int)i;
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	3301      	adds	r3, #1
 800b64c:	617b      	str	r3, [r7, #20]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	e002      	b.n	800b65e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b658:	2300      	movs	r3, #0
 800b65a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b65c:	693b      	ldr	r3, [r7, #16]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	371c      	adds	r7, #28
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr
	...

0800b66c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	70da      	strb	r2, [r3, #3]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f04f 32ff 	mov.w	r2, #4294967295
 800b682:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b684:	6839      	ldr	r1, [r7, #0]
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f7ff f81c 	bl	800a6c4 <move_window>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <check_fs+0x2a>
 800b692:	2304      	movs	r3, #4
 800b694:	e038      	b.n	800b708 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	3330      	adds	r3, #48	; 0x30
 800b69a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe fd60 	bl	800a164 <ld_word>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d001      	beq.n	800b6b4 <check_fs+0x48>
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	e029      	b.n	800b708 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6ba:	2be9      	cmp	r3, #233	; 0xe9
 800b6bc:	d009      	beq.n	800b6d2 <check_fs+0x66>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6c4:	2beb      	cmp	r3, #235	; 0xeb
 800b6c6:	d11e      	bne.n	800b706 <check_fs+0x9a>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b6ce:	2b90      	cmp	r3, #144	; 0x90
 800b6d0:	d119      	bne.n	800b706 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	3330      	adds	r3, #48	; 0x30
 800b6d6:	3336      	adds	r3, #54	; 0x36
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe fd5b 	bl	800a194 <ld_dword>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6e4:	4a0a      	ldr	r2, [pc, #40]	; (800b710 <check_fs+0xa4>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d101      	bne.n	800b6ee <check_fs+0x82>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e00c      	b.n	800b708 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	3330      	adds	r3, #48	; 0x30
 800b6f2:	3352      	adds	r3, #82	; 0x52
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fe fd4d 	bl	800a194 <ld_dword>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	4a05      	ldr	r2, [pc, #20]	; (800b714 <check_fs+0xa8>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d101      	bne.n	800b706 <check_fs+0x9a>
 800b702:	2300      	movs	r3, #0
 800b704:	e000      	b.n	800b708 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b706:	2302      	movs	r3, #2
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	00544146 	.word	0x00544146
 800b714:	33544146 	.word	0x33544146

0800b718 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b096      	sub	sp, #88	; 0x58
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	60f8      	str	r0, [r7, #12]
 800b720:	60b9      	str	r1, [r7, #8]
 800b722:	4613      	mov	r3, r2
 800b724:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7ff ff58 	bl	800b5e2 <get_ldnumber>
 800b732:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b736:	2b00      	cmp	r3, #0
 800b738:	da01      	bge.n	800b73e <find_volume+0x26>
 800b73a:	230b      	movs	r3, #11
 800b73c:	e22e      	b.n	800bb9c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b73e:	4aa8      	ldr	r2, [pc, #672]	; (800b9e0 <find_volume+0x2c8>)
 800b740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b746:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d101      	bne.n	800b752 <find_volume+0x3a>
 800b74e:	230c      	movs	r3, #12
 800b750:	e224      	b.n	800bb9c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b756:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b758:	79fb      	ldrb	r3, [r7, #7]
 800b75a:	f023 0301 	bic.w	r3, r3, #1
 800b75e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d01a      	beq.n	800b79e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76a:	785b      	ldrb	r3, [r3, #1]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fe fc5b 	bl	800a028 <disk_status>
 800b772:	4603      	mov	r3, r0
 800b774:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b778:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b77c:	f003 0301 	and.w	r3, r3, #1
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10c      	bne.n	800b79e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d007      	beq.n	800b79a <find_volume+0x82>
 800b78a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b78e:	f003 0304 	and.w	r3, r3, #4
 800b792:	2b00      	cmp	r3, #0
 800b794:	d001      	beq.n	800b79a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b796:	230a      	movs	r3, #10
 800b798:	e200      	b.n	800bb9c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b79a:	2300      	movs	r3, #0
 800b79c:	e1fe      	b.n	800bb9c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a6:	b2da      	uxtb	r2, r3
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ae:	785b      	ldrb	r3, [r3, #1]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe fc53 	bl	800a05c <disk_initialize>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b7bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d001      	beq.n	800b7cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e1e7      	b.n	800bb9c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b7cc:	79fb      	ldrb	r3, [r7, #7]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d007      	beq.n	800b7e2 <find_volume+0xca>
 800b7d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7d6:	f003 0304 	and.w	r3, r3, #4
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b7de:	230a      	movs	r3, #10
 800b7e0:	e1dc      	b.n	800bb9c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b7e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7ea:	f7ff ff3f 	bl	800b66c <check_fs>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b7f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7f8:	2b02      	cmp	r3, #2
 800b7fa:	d14b      	bne.n	800b894 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b800:	e01f      	b.n	800b842 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b804:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b80a:	011b      	lsls	r3, r3, #4
 800b80c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b810:	4413      	add	r3, r2
 800b812:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b816:	3304      	adds	r3, #4
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d006      	beq.n	800b82c <find_volume+0x114>
 800b81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b820:	3308      	adds	r3, #8
 800b822:	4618      	mov	r0, r3
 800b824:	f7fe fcb6 	bl	800a194 <ld_dword>
 800b828:	4602      	mov	r2, r0
 800b82a:	e000      	b.n	800b82e <find_volume+0x116>
 800b82c:	2200      	movs	r2, #0
 800b82e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b830:	009b      	lsls	r3, r3, #2
 800b832:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b836:	440b      	add	r3, r1
 800b838:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83e:	3301      	adds	r3, #1
 800b840:	643b      	str	r3, [r7, #64]	; 0x40
 800b842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b844:	2b03      	cmp	r3, #3
 800b846:	d9dc      	bls.n	800b802 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b848:	2300      	movs	r3, #0
 800b84a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d002      	beq.n	800b858 <find_volume+0x140>
 800b852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b854:	3b01      	subs	r3, #1
 800b856:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b85a:	009b      	lsls	r3, r3, #2
 800b85c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b860:	4413      	add	r3, r2
 800b862:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b866:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d005      	beq.n	800b87a <find_volume+0x162>
 800b86e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b870:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b872:	f7ff fefb 	bl	800b66c <check_fs>
 800b876:	4603      	mov	r3, r0
 800b878:	e000      	b.n	800b87c <find_volume+0x164>
 800b87a:	2303      	movs	r3, #3
 800b87c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b880:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b884:	2b01      	cmp	r3, #1
 800b886:	d905      	bls.n	800b894 <find_volume+0x17c>
 800b888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b88a:	3301      	adds	r3, #1
 800b88c:	643b      	str	r3, [r7, #64]	; 0x40
 800b88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b890:	2b03      	cmp	r3, #3
 800b892:	d9e1      	bls.n	800b858 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b898:	2b04      	cmp	r3, #4
 800b89a:	d101      	bne.n	800b8a0 <find_volume+0x188>
 800b89c:	2301      	movs	r3, #1
 800b89e:	e17d      	b.n	800bb9c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b8a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8a4:	2b01      	cmp	r3, #1
 800b8a6:	d901      	bls.n	800b8ac <find_volume+0x194>
 800b8a8:	230d      	movs	r3, #13
 800b8aa:	e177      	b.n	800bb9c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	3330      	adds	r3, #48	; 0x30
 800b8b0:	330b      	adds	r3, #11
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fe fc56 	bl	800a164 <ld_word>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8be:	d001      	beq.n	800b8c4 <find_volume+0x1ac>
 800b8c0:	230d      	movs	r3, #13
 800b8c2:	e16b      	b.n	800bb9c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c6:	3330      	adds	r3, #48	; 0x30
 800b8c8:	3316      	adds	r3, #22
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fe fc4a 	bl	800a164 <ld_word>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b8d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d106      	bne.n	800b8e8 <find_volume+0x1d0>
 800b8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8dc:	3330      	adds	r3, #48	; 0x30
 800b8de:	3324      	adds	r3, #36	; 0x24
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7fe fc57 	bl	800a194 <ld_dword>
 800b8e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fa:	789b      	ldrb	r3, [r3, #2]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d005      	beq.n	800b90c <find_volume+0x1f4>
 800b900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b902:	789b      	ldrb	r3, [r3, #2]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d001      	beq.n	800b90c <find_volume+0x1f4>
 800b908:	230d      	movs	r3, #13
 800b90a:	e147      	b.n	800bb9c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90e:	789b      	ldrb	r3, [r3, #2]
 800b910:	461a      	mov	r2, r3
 800b912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b914:	fb02 f303 	mul.w	r3, r2, r3
 800b918:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b920:	b29a      	uxth	r2, r3
 800b922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b924:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b928:	895b      	ldrh	r3, [r3, #10]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d008      	beq.n	800b940 <find_volume+0x228>
 800b92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b930:	895b      	ldrh	r3, [r3, #10]
 800b932:	461a      	mov	r2, r3
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	895b      	ldrh	r3, [r3, #10]
 800b938:	3b01      	subs	r3, #1
 800b93a:	4013      	ands	r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <find_volume+0x22c>
 800b940:	230d      	movs	r3, #13
 800b942:	e12b      	b.n	800bb9c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b946:	3330      	adds	r3, #48	; 0x30
 800b948:	3311      	adds	r3, #17
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7fe fc0a 	bl	800a164 <ld_word>
 800b950:	4603      	mov	r3, r0
 800b952:	461a      	mov	r2, r3
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95a:	891b      	ldrh	r3, [r3, #8]
 800b95c:	f003 030f 	and.w	r3, r3, #15
 800b960:	b29b      	uxth	r3, r3
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <find_volume+0x252>
 800b966:	230d      	movs	r3, #13
 800b968:	e118      	b.n	800bb9c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96c:	3330      	adds	r3, #48	; 0x30
 800b96e:	3313      	adds	r3, #19
 800b970:	4618      	mov	r0, r3
 800b972:	f7fe fbf7 	bl	800a164 <ld_word>
 800b976:	4603      	mov	r3, r0
 800b978:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b97a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d106      	bne.n	800b98e <find_volume+0x276>
 800b980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b982:	3330      	adds	r3, #48	; 0x30
 800b984:	3320      	adds	r3, #32
 800b986:	4618      	mov	r0, r3
 800b988:	f7fe fc04 	bl	800a194 <ld_dword>
 800b98c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	3330      	adds	r3, #48	; 0x30
 800b992:	330e      	adds	r3, #14
 800b994:	4618      	mov	r0, r3
 800b996:	f7fe fbe5 	bl	800a164 <ld_word>
 800b99a:	4603      	mov	r3, r0
 800b99c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b99e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d101      	bne.n	800b9a8 <find_volume+0x290>
 800b9a4:	230d      	movs	r3, #13
 800b9a6:	e0f9      	b.n	800bb9c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b9a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ac:	4413      	add	r3, r2
 800b9ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b0:	8912      	ldrh	r2, [r2, #8]
 800b9b2:	0912      	lsrs	r2, r2, #4
 800b9b4:	b292      	uxth	r2, r2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b9ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d201      	bcs.n	800b9c6 <find_volume+0x2ae>
 800b9c2:	230d      	movs	r3, #13
 800b9c4:	e0ea      	b.n	800bb9c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b9c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9ce:	8952      	ldrh	r2, [r2, #10]
 800b9d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d103      	bne.n	800b9e4 <find_volume+0x2cc>
 800b9dc:	230d      	movs	r3, #13
 800b9de:	e0dd      	b.n	800bb9c <find_volume+0x484>
 800b9e0:	200004b4 	.word	0x200004b4
		fmt = FS_FAT32;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d802      	bhi.n	800b9fa <find_volume+0x2e2>
 800b9f4:	2302      	movs	r3, #2
 800b9f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d802      	bhi.n	800ba0a <find_volume+0x2f2>
 800ba04:	2301      	movs	r3, #1
 800ba06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	1c9a      	adds	r2, r3, #2
 800ba0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba10:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800ba12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba16:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ba18:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba1c:	441a      	add	r2, r3
 800ba1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba20:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ba22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba26:	441a      	add	r2, r3
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ba2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d11e      	bne.n	800ba72 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ba34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba36:	3330      	adds	r3, #48	; 0x30
 800ba38:	332a      	adds	r3, #42	; 0x2a
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe fb92 	bl	800a164 <ld_word>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d001      	beq.n	800ba4a <find_volume+0x332>
 800ba46:	230d      	movs	r3, #13
 800ba48:	e0a8      	b.n	800bb9c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ba4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4c:	891b      	ldrh	r3, [r3, #8]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <find_volume+0x33e>
 800ba52:	230d      	movs	r3, #13
 800ba54:	e0a2      	b.n	800bb9c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ba56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba58:	3330      	adds	r3, #48	; 0x30
 800ba5a:	332c      	adds	r3, #44	; 0x2c
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f7fe fb99 	bl	800a194 <ld_dword>
 800ba62:	4602      	mov	r2, r0
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ba68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6a:	695b      	ldr	r3, [r3, #20]
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ba70:	e01f      	b.n	800bab2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ba72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba74:	891b      	ldrh	r3, [r3, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <find_volume+0x366>
 800ba7a:	230d      	movs	r3, #13
 800ba7c:	e08e      	b.n	800bb9c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ba7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba80:	6a1a      	ldr	r2, [r3, #32]
 800ba82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba84:	441a      	add	r2, r3
 800ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba88:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ba8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d103      	bne.n	800ba9a <find_volume+0x382>
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	695b      	ldr	r3, [r3, #20]
 800ba96:	005b      	lsls	r3, r3, #1
 800ba98:	e00a      	b.n	800bab0 <find_volume+0x398>
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	695a      	ldr	r2, [r3, #20]
 800ba9e:	4613      	mov	r3, r2
 800baa0:	005b      	lsls	r3, r3, #1
 800baa2:	4413      	add	r3, r2
 800baa4:	085a      	lsrs	r2, r3, #1
 800baa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	f003 0301 	and.w	r3, r3, #1
 800baae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bab0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab4:	699a      	ldr	r2, [r3, #24]
 800bab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bab8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800babc:	0a5b      	lsrs	r3, r3, #9
 800babe:	429a      	cmp	r2, r3
 800bac0:	d201      	bcs.n	800bac6 <find_volume+0x3ae>
 800bac2:	230d      	movs	r3, #13
 800bac4:	e06a      	b.n	800bb9c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac8:	f04f 32ff 	mov.w	r2, #4294967295
 800bacc:	611a      	str	r2, [r3, #16]
 800bace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad0:	691a      	ldr	r2, [r3, #16]
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	2280      	movs	r2, #128	; 0x80
 800bada:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800badc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d149      	bne.n	800bb78 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae6:	3330      	adds	r3, #48	; 0x30
 800bae8:	3330      	adds	r3, #48	; 0x30
 800baea:	4618      	mov	r0, r3
 800baec:	f7fe fb3a 	bl	800a164 <ld_word>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d140      	bne.n	800bb78 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800baf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baf8:	3301      	adds	r3, #1
 800bafa:	4619      	mov	r1, r3
 800bafc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bafe:	f7fe fde1 	bl	800a6c4 <move_window>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d137      	bne.n	800bb78 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb10:	3330      	adds	r3, #48	; 0x30
 800bb12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fe fb24 	bl	800a164 <ld_word>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	461a      	mov	r2, r3
 800bb20:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d127      	bne.n	800bb78 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2a:	3330      	adds	r3, #48	; 0x30
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe fb31 	bl	800a194 <ld_dword>
 800bb32:	4603      	mov	r3, r0
 800bb34:	4a1b      	ldr	r2, [pc, #108]	; (800bba4 <find_volume+0x48c>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d11e      	bne.n	800bb78 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	3330      	adds	r3, #48	; 0x30
 800bb3e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fe fb26 	bl	800a194 <ld_dword>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	4a17      	ldr	r2, [pc, #92]	; (800bba8 <find_volume+0x490>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d113      	bne.n	800bb78 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bb50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb52:	3330      	adds	r3, #48	; 0x30
 800bb54:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f7fe fb1b 	bl	800a194 <ld_dword>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	3330      	adds	r3, #48	; 0x30
 800bb68:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	f7fe fb11 	bl	800a194 <ld_dword>
 800bb72:	4602      	mov	r2, r0
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bb7e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bb80:	4b0a      	ldr	r3, [pc, #40]	; (800bbac <find_volume+0x494>)
 800bb82:	881b      	ldrh	r3, [r3, #0]
 800bb84:	3301      	adds	r3, #1
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	4b08      	ldr	r3, [pc, #32]	; (800bbac <find_volume+0x494>)
 800bb8a:	801a      	strh	r2, [r3, #0]
 800bb8c:	4b07      	ldr	r3, [pc, #28]	; (800bbac <find_volume+0x494>)
 800bb8e:	881a      	ldrh	r2, [r3, #0]
 800bb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb92:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bb94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb96:	f7fe fd2d 	bl	800a5f4 <clear_lock>
#endif
	return FR_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3758      	adds	r7, #88	; 0x58
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	41615252 	.word	0x41615252
 800bba8:	61417272 	.word	0x61417272
 800bbac:	200004b8 	.word	0x200004b8

0800bbb0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bbba:	2309      	movs	r3, #9
 800bbbc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d01c      	beq.n	800bbfe <validate+0x4e>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d018      	beq.n	800bbfe <validate+0x4e>
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d013      	beq.n	800bbfe <validate+0x4e>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	889a      	ldrh	r2, [r3, #4]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	88db      	ldrh	r3, [r3, #6]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d10c      	bne.n	800bbfe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	785b      	ldrb	r3, [r3, #1]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe fa1c 	bl	800a028 <disk_status>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <validate+0x4e>
			res = FR_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d102      	bne.n	800bc0a <validate+0x5a>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	e000      	b.n	800bc0c <validate+0x5c>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	683a      	ldr	r2, [r7, #0]
 800bc0e:	6013      	str	r3, [r2, #0]
	return res;
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b088      	sub	sp, #32
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	60b9      	str	r1, [r7, #8]
 800bc26:	4613      	mov	r3, r2
 800bc28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bc2e:	f107 0310 	add.w	r3, r7, #16
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7ff fcd5 	bl	800b5e2 <get_ldnumber>
 800bc38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	da01      	bge.n	800bc44 <f_mount+0x28>
 800bc40:	230b      	movs	r3, #11
 800bc42:	e02b      	b.n	800bc9c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bc44:	4a17      	ldr	r2, [pc, #92]	; (800bca4 <f_mount+0x88>)
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d005      	beq.n	800bc60 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bc54:	69b8      	ldr	r0, [r7, #24]
 800bc56:	f7fe fccd 	bl	800a5f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d002      	beq.n	800bc6c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	490d      	ldr	r1, [pc, #52]	; (800bca4 <f_mount+0x88>)
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <f_mount+0x66>
 800bc7c:	79fb      	ldrb	r3, [r7, #7]
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d001      	beq.n	800bc86 <f_mount+0x6a>
 800bc82:	2300      	movs	r3, #0
 800bc84:	e00a      	b.n	800bc9c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bc86:	f107 010c 	add.w	r1, r7, #12
 800bc8a:	f107 0308 	add.w	r3, r7, #8
 800bc8e:	2200      	movs	r2, #0
 800bc90:	4618      	mov	r0, r3
 800bc92:	f7ff fd41 	bl	800b718 <find_volume>
 800bc96:	4603      	mov	r3, r0
 800bc98:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3720      	adds	r7, #32
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	200004b4 	.word	0x200004b4

0800bca8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b098      	sub	sp, #96	; 0x60
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d101      	bne.n	800bcc0 <f_open+0x18>
 800bcbc:	2309      	movs	r3, #9
 800bcbe:	e1ad      	b.n	800c01c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bcc0:	79fb      	ldrb	r3, [r7, #7]
 800bcc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcc6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bcc8:	79fa      	ldrb	r2, [r7, #7]
 800bcca:	f107 0110 	add.w	r1, r7, #16
 800bcce:	f107 0308 	add.w	r3, r7, #8
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7ff fd20 	bl	800b718 <find_volume>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bcde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f040 8191 	bne.w	800c00a <f_open+0x362>
		dj.obj.fs = fs;
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	f107 0314 	add.w	r3, r7, #20
 800bcf2:	4611      	mov	r1, r2
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7ff fc03 	bl	800b500 <follow_path>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bd00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d11a      	bne.n	800bd3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bd08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bd0c:	b25b      	sxtb	r3, r3
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	da03      	bge.n	800bd1a <f_open+0x72>
				res = FR_INVALID_NAME;
 800bd12:	2306      	movs	r3, #6
 800bd14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd18:	e011      	b.n	800bd3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	f023 0301 	bic.w	r3, r3, #1
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	bf14      	ite	ne
 800bd24:	2301      	movne	r3, #1
 800bd26:	2300      	moveq	r3, #0
 800bd28:	b2db      	uxtb	r3, r3
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	f107 0314 	add.w	r3, r7, #20
 800bd30:	4611      	mov	r1, r2
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7fe fb16 	bl	800a364 <chk_lock>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bd3e:	79fb      	ldrb	r3, [r7, #7]
 800bd40:	f003 031c 	and.w	r3, r3, #28
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d07f      	beq.n	800be48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bd48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d017      	beq.n	800bd80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bd50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	d10e      	bne.n	800bd76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bd58:	f7fe fb60 	bl	800a41c <enq_lock>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d006      	beq.n	800bd70 <f_open+0xc8>
 800bd62:	f107 0314 	add.w	r3, r7, #20
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff faa4 	bl	800b2b4 <dir_register>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	e000      	b.n	800bd72 <f_open+0xca>
 800bd70:	2312      	movs	r3, #18
 800bd72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bd76:	79fb      	ldrb	r3, [r7, #7]
 800bd78:	f043 0308 	orr.w	r3, r3, #8
 800bd7c:	71fb      	strb	r3, [r7, #7]
 800bd7e:	e010      	b.n	800bda2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bd80:	7ebb      	ldrb	r3, [r7, #26]
 800bd82:	f003 0311 	and.w	r3, r3, #17
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d003      	beq.n	800bd92 <f_open+0xea>
					res = FR_DENIED;
 800bd8a:	2307      	movs	r3, #7
 800bd8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd90:	e007      	b.n	800bda2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bd92:	79fb      	ldrb	r3, [r7, #7]
 800bd94:	f003 0304 	and.w	r3, r3, #4
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <f_open+0xfa>
 800bd9c:	2308      	movs	r3, #8
 800bd9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bda2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d168      	bne.n	800be7c <f_open+0x1d4>
 800bdaa:	79fb      	ldrb	r3, [r7, #7]
 800bdac:	f003 0308 	and.w	r3, r3, #8
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d063      	beq.n	800be7c <f_open+0x1d4>
				dw = GET_FATTIME();
 800bdb4:	f7fd fbf8 	bl	80095a8 <get_fattime>
 800bdb8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdbc:	330e      	adds	r3, #14
 800bdbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7fe fa25 	bl	800a210 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	3316      	adds	r3, #22
 800bdca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7fe fa1f 	bl	800a210 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd4:	330b      	adds	r3, #11
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdde:	4611      	mov	r1, r2
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7ff f976 	bl	800b0d2 <ld_clust>
 800bde6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bdec:	2200      	movs	r2, #0
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f7ff f98e 	bl	800b110 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf6:	331c      	adds	r3, #28
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fe fa08 	bl	800a210 <st_dword>
					fs->wflag = 1;
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2201      	movs	r2, #1
 800be04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800be06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d037      	beq.n	800be7c <f_open+0x1d4>
						dw = fs->winsect;
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800be12:	f107 0314 	add.w	r3, r7, #20
 800be16:	2200      	movs	r2, #0
 800be18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe fea1 	bl	800ab62 <remove_chain>
 800be20:	4603      	mov	r3, r0
 800be22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800be26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d126      	bne.n	800be7c <f_open+0x1d4>
							res = move_window(fs, dw);
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe fc46 	bl	800a6c4 <move_window>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be42:	3a01      	subs	r2, #1
 800be44:	60da      	str	r2, [r3, #12]
 800be46:	e019      	b.n	800be7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800be48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d115      	bne.n	800be7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800be50:	7ebb      	ldrb	r3, [r7, #26]
 800be52:	f003 0310 	and.w	r3, r3, #16
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <f_open+0x1ba>
					res = FR_NO_FILE;
 800be5a:	2304      	movs	r3, #4
 800be5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be60:	e00c      	b.n	800be7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800be62:	79fb      	ldrb	r3, [r7, #7]
 800be64:	f003 0302 	and.w	r3, r3, #2
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d007      	beq.n	800be7c <f_open+0x1d4>
 800be6c:	7ebb      	ldrb	r3, [r7, #26]
 800be6e:	f003 0301 	and.w	r3, r3, #1
 800be72:	2b00      	cmp	r3, #0
 800be74:	d002      	beq.n	800be7c <f_open+0x1d4>
						res = FR_DENIED;
 800be76:	2307      	movs	r3, #7
 800be78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800be7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be80:	2b00      	cmp	r3, #0
 800be82:	d128      	bne.n	800bed6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800be84:	79fb      	ldrb	r3, [r7, #7]
 800be86:	f003 0308 	and.w	r3, r3, #8
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d003      	beq.n	800be96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800be8e:	79fb      	ldrb	r3, [r7, #7]
 800be90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800be9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	f023 0301 	bic.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	bf14      	ite	ne
 800beae:	2301      	movne	r3, #1
 800beb0:	2300      	moveq	r3, #0
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	461a      	mov	r2, r3
 800beb6:	f107 0314 	add.w	r3, r7, #20
 800beba:	4611      	mov	r1, r2
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7fe facf 	bl	800a460 <inc_lock>
 800bec2:	4602      	mov	r2, r0
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d102      	bne.n	800bed6 <f_open+0x22e>
 800bed0:	2302      	movs	r3, #2
 800bed2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bed6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f040 8095 	bne.w	800c00a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7ff f8f3 	bl	800b0d2 <ld_clust>
 800beec:	4602      	mov	r2, r0
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bef4:	331c      	adds	r3, #28
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe f94c 	bl	800a194 <ld_dword>
 800befc:	4602      	mov	r2, r0
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	2200      	movs	r2, #0
 800bf06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bf08:	693a      	ldr	r2, [r7, #16]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	88da      	ldrh	r2, [r3, #6]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	79fa      	ldrb	r2, [r7, #7]
 800bf1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2200      	movs	r2, #0
 800bf26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3330      	adds	r3, #48	; 0x30
 800bf32:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf36:	2100      	movs	r1, #0
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7fe f9b6 	bl	800a2aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	f003 0320 	and.w	r3, r3, #32
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d060      	beq.n	800c00a <f_open+0x362>
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d05c      	beq.n	800c00a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	68da      	ldr	r2, [r3, #12]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	895b      	ldrh	r3, [r3, #10]
 800bf5c:	025b      	lsls	r3, r3, #9
 800bf5e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	657b      	str	r3, [r7, #84]	; 0x54
 800bf6c:	e016      	b.n	800bf9c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe fc61 	bl	800a83a <get_fat>
 800bf78:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bf7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d802      	bhi.n	800bf86 <f_open+0x2de>
 800bf80:	2302      	movs	r3, #2
 800bf82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bf86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8c:	d102      	bne.n	800bf94 <f_open+0x2ec>
 800bf8e:	2301      	movs	r3, #1
 800bf90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	657b      	str	r3, [r7, #84]	; 0x54
 800bf9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d103      	bne.n	800bfac <f_open+0x304>
 800bfa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d8e0      	bhi.n	800bf6e <f_open+0x2c6>
				}
				fp->clust = clst;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfb0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bfb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d127      	bne.n	800c00a <f_open+0x362>
 800bfba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d022      	beq.n	800c00a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f7fe fc17 	bl	800a7fc <clust2sect>
 800bfce:	6478      	str	r0, [r7, #68]	; 0x44
 800bfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d103      	bne.n	800bfde <f_open+0x336>
						res = FR_INT_ERR;
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bfdc:	e015      	b.n	800c00a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bfde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfe0:	0a5a      	lsrs	r2, r3, #9
 800bfe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfe4:	441a      	add	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	7858      	ldrb	r0, [r3, #1]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6a1a      	ldr	r2, [r3, #32]
 800bff8:	2301      	movs	r3, #1
 800bffa:	f7fe f855 	bl	800a0a8 <disk_read>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <f_open+0x362>
 800c004:	2301      	movs	r3, #1
 800c006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c00a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d002      	beq.n	800c018 <f_open+0x370>
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c018:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3760      	adds	r7, #96	; 0x60
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}

0800c024 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08c      	sub	sp, #48	; 0x30
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	607a      	str	r2, [r7, #4]
 800c030:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2200      	movs	r2, #0
 800c03a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f107 0210 	add.w	r2, r7, #16
 800c042:	4611      	mov	r1, r2
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fdb3 	bl	800bbb0 <validate>
 800c04a:	4603      	mov	r3, r0
 800c04c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c054:	2b00      	cmp	r3, #0
 800c056:	d107      	bne.n	800c068 <f_write+0x44>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	7d5b      	ldrb	r3, [r3, #21]
 800c05c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c060:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <f_write+0x4a>
 800c068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c06c:	e14b      	b.n	800c306 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	7d1b      	ldrb	r3, [r3, #20]
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <f_write+0x5a>
 800c07a:	2307      	movs	r3, #7
 800c07c:	e143      	b.n	800c306 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	699a      	ldr	r2, [r3, #24]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	441a      	add	r2, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	699b      	ldr	r3, [r3, #24]
 800c08a:	429a      	cmp	r2, r3
 800c08c:	f080 812d 	bcs.w	800c2ea <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	43db      	mvns	r3, r3
 800c096:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c098:	e127      	b.n	800c2ea <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f040 80e3 	bne.w	800c26e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	0a5b      	lsrs	r3, r3, #9
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	8952      	ldrh	r2, [r2, #10]
 800c0b2:	3a01      	subs	r2, #1
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d143      	bne.n	800c146 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	699b      	ldr	r3, [r3, #24]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d10c      	bne.n	800c0e0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d11a      	bne.n	800c108 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fe fda8 	bl	800ac2c <create_chain>
 800c0dc:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0de:	e013      	b.n	800c108 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d007      	beq.n	800c0f8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f7fe fe34 	bl	800ad5c <clmt_clust>
 800c0f4:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0f6:	e007      	b.n	800c108 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	69db      	ldr	r3, [r3, #28]
 800c0fe:	4619      	mov	r1, r3
 800c100:	4610      	mov	r0, r2
 800c102:	f7fe fd93 	bl	800ac2c <create_chain>
 800c106:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f000 80f2 	beq.w	800c2f4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c112:	2b01      	cmp	r3, #1
 800c114:	d104      	bne.n	800c120 <f_write+0xfc>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2202      	movs	r2, #2
 800c11a:	755a      	strb	r2, [r3, #21]
 800c11c:	2302      	movs	r3, #2
 800c11e:	e0f2      	b.n	800c306 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c122:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c126:	d104      	bne.n	800c132 <f_write+0x10e>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2201      	movs	r2, #1
 800c12c:	755a      	strb	r2, [r3, #21]
 800c12e:	2301      	movs	r3, #1
 800c130:	e0e9      	b.n	800c306 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c136:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d102      	bne.n	800c146 <f_write+0x122>
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c144:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	7d1b      	ldrb	r3, [r3, #20]
 800c14a:	b25b      	sxtb	r3, r3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	da18      	bge.n	800c182 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	7858      	ldrb	r0, [r3, #1]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6a1a      	ldr	r2, [r3, #32]
 800c15e:	2301      	movs	r3, #1
 800c160:	f7fd ffc2 	bl	800a0e8 <disk_write>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d004      	beq.n	800c174 <f_write+0x150>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	755a      	strb	r2, [r3, #21]
 800c170:	2301      	movs	r3, #1
 800c172:	e0c8      	b.n	800c306 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	7d1b      	ldrb	r3, [r3, #20]
 800c178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c17c:	b2da      	uxtb	r2, r3
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	69db      	ldr	r3, [r3, #28]
 800c188:	4619      	mov	r1, r3
 800c18a:	4610      	mov	r0, r2
 800c18c:	f7fe fb36 	bl	800a7fc <clust2sect>
 800c190:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d104      	bne.n	800c1a2 <f_write+0x17e>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2202      	movs	r2, #2
 800c19c:	755a      	strb	r2, [r3, #21]
 800c19e:	2302      	movs	r3, #2
 800c1a0:	e0b1      	b.n	800c306 <f_write+0x2e2>
			sect += csect;
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	0a5b      	lsrs	r3, r3, #9
 800c1ae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c1b0:	6a3b      	ldr	r3, [r7, #32]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d03c      	beq.n	800c230 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c1b6:	69ba      	ldr	r2, [r7, #24]
 800c1b8:	6a3b      	ldr	r3, [r7, #32]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	8952      	ldrh	r2, [r2, #10]
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d905      	bls.n	800c1d0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	895b      	ldrh	r3, [r3, #10]
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	7858      	ldrb	r0, [r3, #1]
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	69f9      	ldr	r1, [r7, #28]
 800c1da:	f7fd ff85 	bl	800a0e8 <disk_write>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d004      	beq.n	800c1ee <f_write+0x1ca>
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	755a      	strb	r2, [r3, #21]
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e08b      	b.n	800c306 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6a1a      	ldr	r2, [r3, #32]
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	1ad3      	subs	r3, r2, r3
 800c1f6:	6a3a      	ldr	r2, [r7, #32]
 800c1f8:	429a      	cmp	r2, r3
 800c1fa:	d915      	bls.n	800c228 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6a1a      	ldr	r2, [r3, #32]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	025b      	lsls	r3, r3, #9
 800c20c:	69fa      	ldr	r2, [r7, #28]
 800c20e:	4413      	add	r3, r2
 800c210:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c214:	4619      	mov	r1, r3
 800c216:	f7fe f827 	bl	800a268 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	7d1b      	ldrb	r3, [r3, #20]
 800c21e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c222:	b2da      	uxtb	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	025b      	lsls	r3, r3, #9
 800c22c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c22e:	e03f      	b.n	800c2b0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	6a1b      	ldr	r3, [r3, #32]
 800c234:	697a      	ldr	r2, [r7, #20]
 800c236:	429a      	cmp	r2, r3
 800c238:	d016      	beq.n	800c268 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	699a      	ldr	r2, [r3, #24]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c242:	429a      	cmp	r2, r3
 800c244:	d210      	bcs.n	800c268 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	7858      	ldrb	r0, [r3, #1]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c250:	2301      	movs	r3, #1
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	f7fd ff28 	bl	800a0a8 <disk_read>
 800c258:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d004      	beq.n	800c268 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	2201      	movs	r2, #1
 800c262:	755a      	strb	r2, [r3, #21]
 800c264:	2301      	movs	r3, #1
 800c266:	e04e      	b.n	800c306 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	697a      	ldr	r2, [r7, #20]
 800c26c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	699b      	ldr	r3, [r3, #24]
 800c272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c276:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c27a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c27c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	429a      	cmp	r2, r3
 800c282:	d901      	bls.n	800c288 <f_write+0x264>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c296:	4413      	add	r3, r2
 800c298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c29a:	69f9      	ldr	r1, [r7, #28]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fd ffe3 	bl	800a268 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	7d1b      	ldrb	r3, [r3, #20]
 800c2a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c2aa:	b2da      	uxtb	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c2b0:	69fa      	ldr	r2, [r7, #28]
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	4413      	add	r3, r2
 800c2b6:	61fb      	str	r3, [r7, #28]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	699a      	ldr	r2, [r3, #24]
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	441a      	add	r2, r3
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	619a      	str	r2, [r3, #24]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	68da      	ldr	r2, [r3, #12]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	bf38      	it	cc
 800c2d0:	461a      	movcc	r2, r3
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	60da      	str	r2, [r3, #12]
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2dc:	441a      	add	r2, r3
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	601a      	str	r2, [r3, #0]
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e6:	1ad3      	subs	r3, r2, r3
 800c2e8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f47f aed4 	bne.w	800c09a <f_write+0x76>
 800c2f2:	e000      	b.n	800c2f6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c2f4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	7d1b      	ldrb	r3, [r3, #20]
 800c2fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2fe:	b2da      	uxtb	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3730      	adds	r7, #48	; 0x30
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c30e:	b580      	push	{r7, lr}
 800c310:	b086      	sub	sp, #24
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f107 0208 	add.w	r2, r7, #8
 800c31c:	4611      	mov	r1, r2
 800c31e:	4618      	mov	r0, r3
 800c320:	f7ff fc46 	bl	800bbb0 <validate>
 800c324:	4603      	mov	r3, r0
 800c326:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c328:	7dfb      	ldrb	r3, [r7, #23]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d168      	bne.n	800c400 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	7d1b      	ldrb	r3, [r3, #20]
 800c332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c336:	2b00      	cmp	r3, #0
 800c338:	d062      	beq.n	800c400 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	7d1b      	ldrb	r3, [r3, #20]
 800c33e:	b25b      	sxtb	r3, r3
 800c340:	2b00      	cmp	r3, #0
 800c342:	da15      	bge.n	800c370 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	7858      	ldrb	r0, [r3, #1]
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6a1a      	ldr	r2, [r3, #32]
 800c352:	2301      	movs	r3, #1
 800c354:	f7fd fec8 	bl	800a0e8 <disk_write>
 800c358:	4603      	mov	r3, r0
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d001      	beq.n	800c362 <f_sync+0x54>
 800c35e:	2301      	movs	r3, #1
 800c360:	e04f      	b.n	800c402 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	7d1b      	ldrb	r3, [r3, #20]
 800c366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c370:	f7fd f91a 	bl	80095a8 <get_fattime>
 800c374:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c376:	68ba      	ldr	r2, [r7, #8]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c37c:	4619      	mov	r1, r3
 800c37e:	4610      	mov	r0, r2
 800c380:	f7fe f9a0 	bl	800a6c4 <move_window>
 800c384:	4603      	mov	r3, r0
 800c386:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c388:	7dfb      	ldrb	r3, [r7, #23]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d138      	bne.n	800c400 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c392:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	330b      	adds	r3, #11
 800c398:	781a      	ldrb	r2, [r3, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	330b      	adds	r3, #11
 800c39e:	f042 0220 	orr.w	r2, r2, #32
 800c3a2:	b2d2      	uxtb	r2, r2
 800c3a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	68f9      	ldr	r1, [r7, #12]
 800c3b2:	f7fe fead 	bl	800b110 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f103 021c 	add.w	r2, r3, #28
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	f7fd ff24 	bl	800a210 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3316      	adds	r3, #22
 800c3cc:	6939      	ldr	r1, [r7, #16]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fd ff1e 	bl	800a210 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3312      	adds	r3, #18
 800c3d8:	2100      	movs	r1, #0
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f7fd fefd 	bl	800a1da <st_word>
					fs->wflag = 1;
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fe f999 	bl	800a720 <sync_fs>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7d1b      	ldrb	r3, [r3, #20]
 800c3f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3fa:	b2da      	uxtb	r2, r3
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c400:	7dfb      	ldrb	r3, [r7, #23]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b084      	sub	sp, #16
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7ff ff7b 	bl	800c30e <f_sync>
 800c418:	4603      	mov	r3, r0
 800c41a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d118      	bne.n	800c454 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f107 0208 	add.w	r2, r7, #8
 800c428:	4611      	mov	r1, r2
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7ff fbc0 	bl	800bbb0 <validate>
 800c430:	4603      	mov	r3, r0
 800c432:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c434:	7bfb      	ldrb	r3, [r7, #15]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10c      	bne.n	800c454 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fe f89c 	bl	800a57c <dec_lock>
 800c444:	4603      	mov	r3, r0
 800c446:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d102      	bne.n	800c454 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b090      	sub	sp, #64	; 0x40
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f107 0208 	add.w	r2, r7, #8
 800c46e:	4611      	mov	r1, r2
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff fb9d 	bl	800bbb0 <validate>
 800c476:	4603      	mov	r3, r0
 800c478:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c47c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c480:	2b00      	cmp	r3, #0
 800c482:	d103      	bne.n	800c48c <f_lseek+0x2e>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	7d5b      	ldrb	r3, [r3, #21]
 800c488:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c48c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c490:	2b00      	cmp	r3, #0
 800c492:	d002      	beq.n	800c49a <f_lseek+0x3c>
 800c494:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c498:	e1e6      	b.n	800c868 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	f000 80d1 	beq.w	800c646 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4aa:	d15a      	bne.n	800c562 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	1d1a      	adds	r2, r3, #4
 800c4b6:	627a      	str	r2, [r7, #36]	; 0x24
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	617b      	str	r3, [r7, #20]
 800c4bc:	2302      	movs	r3, #2
 800c4be:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	689b      	ldr	r3, [r3, #8]
 800c4c4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d03a      	beq.n	800c542 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ce:	613b      	str	r3, [r7, #16]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	3302      	adds	r3, #2
 800c4d8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	60fb      	str	r3, [r7, #12]
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fe f9a6 	bl	800a83a <get_fat>
 800c4ee:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d804      	bhi.n	800c500 <f_lseek+0xa2>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2202      	movs	r2, #2
 800c4fa:	755a      	strb	r2, [r3, #21]
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	e1b3      	b.n	800c868 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c502:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c506:	d104      	bne.n	800c512 <f_lseek+0xb4>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2201      	movs	r2, #1
 800c50c:	755a      	strb	r2, [r3, #21]
 800c50e:	2301      	movs	r3, #1
 800c510:	e1aa      	b.n	800c868 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	3301      	adds	r3, #1
 800c516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c518:	429a      	cmp	r2, r3
 800c51a:	d0de      	beq.n	800c4da <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	429a      	cmp	r2, r3
 800c522:	d809      	bhi.n	800c538 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	1d1a      	adds	r2, r3, #4
 800c528:	627a      	str	r2, [r7, #36]	; 0x24
 800c52a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c52c:	601a      	str	r2, [r3, #0]
 800c52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c530:	1d1a      	adds	r2, r3, #4
 800c532:	627a      	str	r2, [r7, #36]	; 0x24
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	695b      	ldr	r3, [r3, #20]
 800c53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c53e:	429a      	cmp	r2, r3
 800c540:	d3c4      	bcc.n	800c4cc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c548:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c54a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d803      	bhi.n	800c55a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c554:	2200      	movs	r2, #0
 800c556:	601a      	str	r2, [r3, #0]
 800c558:	e184      	b.n	800c864 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c55a:	2311      	movs	r3, #17
 800c55c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c560:	e180      	b.n	800c864 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d902      	bls.n	800c572 <f_lseek+0x114>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f000 8172 	beq.w	800c864 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	3b01      	subs	r3, #1
 800c584:	4619      	mov	r1, r3
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7fe fbe8 	bl	800ad5c <clmt_clust>
 800c58c:	4602      	mov	r2, r0
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	69db      	ldr	r3, [r3, #28]
 800c598:	4619      	mov	r1, r3
 800c59a:	4610      	mov	r0, r2
 800c59c:	f7fe f92e 	bl	800a7fc <clust2sect>
 800c5a0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c5a2:	69bb      	ldr	r3, [r7, #24]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d104      	bne.n	800c5b2 <f_lseek+0x154>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	755a      	strb	r2, [r3, #21]
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	e15a      	b.n	800c868 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	0a5b      	lsrs	r3, r3, #9
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	8952      	ldrh	r2, [r2, #10]
 800c5bc:	3a01      	subs	r2, #1
 800c5be:	4013      	ands	r3, r2
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	4413      	add	r3, r2
 800c5c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	699b      	ldr	r3, [r3, #24]
 800c5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f000 8148 	beq.w	800c864 <f_lseek+0x406>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a1b      	ldr	r3, [r3, #32]
 800c5d8:	69ba      	ldr	r2, [r7, #24]
 800c5da:	429a      	cmp	r2, r3
 800c5dc:	f000 8142 	beq.w	800c864 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	7d1b      	ldrb	r3, [r3, #20]
 800c5e4:	b25b      	sxtb	r3, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	da18      	bge.n	800c61c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	7858      	ldrb	r0, [r3, #1]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6a1a      	ldr	r2, [r3, #32]
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	f7fd fd75 	bl	800a0e8 <disk_write>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d004      	beq.n	800c60e <f_lseek+0x1b0>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	755a      	strb	r2, [r3, #21]
 800c60a:	2301      	movs	r3, #1
 800c60c:	e12c      	b.n	800c868 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	7d1b      	ldrb	r3, [r3, #20]
 800c612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c616:	b2da      	uxtb	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	7858      	ldrb	r0, [r3, #1]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c626:	2301      	movs	r3, #1
 800c628:	69ba      	ldr	r2, [r7, #24]
 800c62a:	f7fd fd3d 	bl	800a0a8 <disk_read>
 800c62e:	4603      	mov	r3, r0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d004      	beq.n	800c63e <f_lseek+0x1e0>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	755a      	strb	r2, [r3, #21]
 800c63a:	2301      	movs	r3, #1
 800c63c:	e114      	b.n	800c868 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	69ba      	ldr	r2, [r7, #24]
 800c642:	621a      	str	r2, [r3, #32]
 800c644:	e10e      	b.n	800c864 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	68db      	ldr	r3, [r3, #12]
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d908      	bls.n	800c662 <f_lseek+0x204>
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	7d1b      	ldrb	r3, [r3, #20]
 800c654:	f003 0302 	and.w	r3, r3, #2
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d102      	bne.n	800c662 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	699b      	ldr	r3, [r3, #24]
 800c666:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c668:	2300      	movs	r3, #0
 800c66a:	637b      	str	r3, [r7, #52]	; 0x34
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c670:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	f000 80a7 	beq.w	800c7c8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	895b      	ldrh	r3, [r3, #10]
 800c67e:	025b      	lsls	r3, r3, #9
 800c680:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01b      	beq.n	800c6c0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	1e5a      	subs	r2, r3, #1
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	fbb2 f2f3 	udiv	r2, r2, r3
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	1e59      	subs	r1, r3, #1
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d30f      	bcc.n	800c6c0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c6a0:	6a3b      	ldr	r3, [r7, #32]
 800c6a2:	1e5a      	subs	r2, r3, #1
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	425b      	negs	r3, r3
 800c6a8:	401a      	ands	r2, r3
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	1ad3      	subs	r3, r2, r3
 800c6b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	69db      	ldr	r3, [r3, #28]
 800c6bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6be:	e022      	b.n	800c706 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d119      	bne.n	800c700 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7fe faab 	bl	800ac2c <create_chain>
 800c6d6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d104      	bne.n	800c6e8 <f_lseek+0x28a>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	755a      	strb	r2, [r3, #21]
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	e0bf      	b.n	800c868 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ee:	d104      	bne.n	800c6fa <f_lseek+0x29c>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	755a      	strb	r2, [r3, #21]
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e0b6      	b.n	800c868 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c704:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d05d      	beq.n	800c7c8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c70c:	e03a      	b.n	800c784 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	603b      	str	r3, [r7, #0]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	699a      	ldr	r2, [r3, #24]
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	441a      	add	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	7d1b      	ldrb	r3, [r3, #20]
 800c726:	f003 0302 	and.w	r3, r3, #2
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00b      	beq.n	800c746 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe fa7a 	bl	800ac2c <create_chain>
 800c738:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d108      	bne.n	800c752 <f_lseek+0x2f4>
							ofs = 0; break;
 800c740:	2300      	movs	r3, #0
 800c742:	603b      	str	r3, [r7, #0]
 800c744:	e022      	b.n	800c78c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fe f875 	bl	800a83a <get_fat>
 800c750:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c754:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c758:	d104      	bne.n	800c764 <f_lseek+0x306>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	755a      	strb	r2, [r3, #21]
 800c760:	2301      	movs	r3, #1
 800c762:	e081      	b.n	800c868 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c766:	2b01      	cmp	r3, #1
 800c768:	d904      	bls.n	800c774 <f_lseek+0x316>
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	695b      	ldr	r3, [r3, #20]
 800c76e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c770:	429a      	cmp	r2, r3
 800c772:	d304      	bcc.n	800c77e <f_lseek+0x320>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2202      	movs	r2, #2
 800c778:	755a      	strb	r2, [r3, #21]
 800c77a:	2302      	movs	r3, #2
 800c77c:	e074      	b.n	800c868 <f_lseek+0x40a>
					fp->clust = clst;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c782:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d8c0      	bhi.n	800c70e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699a      	ldr	r2, [r3, #24]
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	441a      	add	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d012      	beq.n	800c7c8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe f828 	bl	800a7fc <clust2sect>
 800c7ac:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d104      	bne.n	800c7be <f_lseek+0x360>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	755a      	strb	r2, [r3, #21]
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	e054      	b.n	800c868 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	0a5b      	lsrs	r3, r3, #9
 800c7c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7c4:	4413      	add	r3, r2
 800c7c6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	699a      	ldr	r2, [r3, #24]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d90a      	bls.n	800c7ea <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	699a      	ldr	r2, [r3, #24]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	7d1b      	ldrb	r3, [r3, #20]
 800c7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	699b      	ldr	r3, [r3, #24]
 800c7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d036      	beq.n	800c864 <f_lseek+0x406>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6a1b      	ldr	r3, [r3, #32]
 800c7fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d031      	beq.n	800c864 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	7d1b      	ldrb	r3, [r3, #20]
 800c804:	b25b      	sxtb	r3, r3
 800c806:	2b00      	cmp	r3, #0
 800c808:	da18      	bge.n	800c83c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	7858      	ldrb	r0, [r3, #1]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6a1a      	ldr	r2, [r3, #32]
 800c818:	2301      	movs	r3, #1
 800c81a:	f7fd fc65 	bl	800a0e8 <disk_write>
 800c81e:	4603      	mov	r3, r0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d004      	beq.n	800c82e <f_lseek+0x3d0>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	755a      	strb	r2, [r3, #21]
 800c82a:	2301      	movs	r3, #1
 800c82c:	e01c      	b.n	800c868 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	7d1b      	ldrb	r3, [r3, #20]
 800c832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c836:	b2da      	uxtb	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	7858      	ldrb	r0, [r3, #1]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c846:	2301      	movs	r3, #1
 800c848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c84a:	f7fd fc2d 	bl	800a0a8 <disk_read>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d004      	beq.n	800c85e <f_lseek+0x400>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2201      	movs	r2, #1
 800c858:	755a      	strb	r2, [r3, #21]
 800c85a:	2301      	movs	r3, #1
 800c85c:	e004      	b.n	800c868 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c862:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c864:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3740      	adds	r7, #64	; 0x40
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b086      	sub	sp, #24
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d101      	bne.n	800c884 <f_opendir+0x14>
 800c880:	2309      	movs	r3, #9
 800c882:	e064      	b.n	800c94e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c888:	f107 010c 	add.w	r1, r7, #12
 800c88c:	463b      	mov	r3, r7
 800c88e:	2200      	movs	r2, #0
 800c890:	4618      	mov	r0, r3
 800c892:	f7fe ff41 	bl	800b718 <find_volume>
 800c896:	4603      	mov	r3, r0
 800c898:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c89a:	7dfb      	ldrb	r3, [r7, #23]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d14f      	bne.n	800c940 <f_opendir+0xd0>
		obj->fs = fs;
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7fe fe28 	bl	800b500 <follow_path>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d13d      	bne.n	800c936 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c8c0:	b25b      	sxtb	r3, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	db12      	blt.n	800c8ec <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	799b      	ldrb	r3, [r3, #6]
 800c8ca:	f003 0310 	and.w	r3, r3, #16
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00a      	beq.n	800c8e8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a1b      	ldr	r3, [r3, #32]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	4610      	mov	r0, r2
 800c8dc:	f7fe fbf9 	bl	800b0d2 <ld_clust>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	609a      	str	r2, [r3, #8]
 800c8e6:	e001      	b.n	800c8ec <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c8e8:	2305      	movs	r3, #5
 800c8ea:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c8ec:	7dfb      	ldrb	r3, [r7, #23]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d121      	bne.n	800c936 <f_opendir+0xc6>
				obj->id = fs->id;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	88da      	ldrh	r2, [r3, #6]
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7fe fa61 	bl	800adc4 <dir_sdi>
 800c902:	4603      	mov	r3, r0
 800c904:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d114      	bne.n	800c936 <f_opendir+0xc6>
					if (obj->sclust) {
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00d      	beq.n	800c930 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c914:	2100      	movs	r1, #0
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7fd fda2 	bl	800a460 <inc_lock>
 800c91c:	4602      	mov	r2, r0
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d105      	bne.n	800c936 <f_opendir+0xc6>
 800c92a:	2312      	movs	r3, #18
 800c92c:	75fb      	strb	r3, [r7, #23]
 800c92e:	e002      	b.n	800c936 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	2200      	movs	r2, #0
 800c934:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c936:	7dfb      	ldrb	r3, [r7, #23]
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d101      	bne.n	800c940 <f_opendir+0xd0>
 800c93c:	2305      	movs	r3, #5
 800c93e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c940:	7dfb      	ldrb	r3, [r7, #23]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d002      	beq.n	800c94c <f_opendir+0xdc>
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	2200      	movs	r2, #0
 800c94a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3718      	adds	r7, #24
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b084      	sub	sp, #16
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f107 0208 	add.w	r2, r7, #8
 800c964:	4611      	mov	r1, r2
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff f922 	bl	800bbb0 <validate>
 800c96c:	4603      	mov	r3, r0
 800c96e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c970:	7bfb      	ldrb	r3, [r7, #15]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d110      	bne.n	800c998 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d006      	beq.n	800c98c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	4618      	mov	r0, r3
 800c984:	f7fd fdfa 	bl	800a57c <dec_lock>
 800c988:	4603      	mov	r3, r0
 800c98a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c998:	7bfb      	ldrb	r3, [r7, #15]
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	6078      	str	r0, [r7, #4]
 800c9aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f107 0208 	add.w	r2, r7, #8
 800c9b2:	4611      	mov	r1, r2
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff f8fb 	bl	800bbb0 <validate>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d126      	bne.n	800ca12 <f_readdir+0x70>
		if (!fno) {
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d106      	bne.n	800c9d8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7fe f9f9 	bl	800adc4 <dir_sdi>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	73fb      	strb	r3, [r7, #15]
 800c9d6:	e01c      	b.n	800ca12 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c9d8:	2100      	movs	r1, #0
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f7fe fbb8 	bl	800b150 <dir_read>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	2b04      	cmp	r3, #4
 800c9e8:	d101      	bne.n	800c9ee <f_readdir+0x4c>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10e      	bne.n	800ca12 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7fe fc8e 	bl	800b318 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7fe fa5b 	bl	800aeba <dir_next>
 800ca04:	4603      	mov	r3, r0
 800ca06:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ca08:	7bfb      	ldrb	r3, [r7, #15]
 800ca0a:	2b04      	cmp	r3, #4
 800ca0c:	d101      	bne.n	800ca12 <f_readdir+0x70>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ca12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b087      	sub	sp, #28
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	60f8      	str	r0, [r7, #12]
 800ca24:	60b9      	str	r1, [r7, #8]
 800ca26:	4613      	mov	r3, r2
 800ca28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca32:	4b1f      	ldr	r3, [pc, #124]	; (800cab0 <FATFS_LinkDriverEx+0x94>)
 800ca34:	7a5b      	ldrb	r3, [r3, #9]
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d131      	bne.n	800caa0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca3c:	4b1c      	ldr	r3, [pc, #112]	; (800cab0 <FATFS_LinkDriverEx+0x94>)
 800ca3e:	7a5b      	ldrb	r3, [r3, #9]
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	461a      	mov	r2, r3
 800ca44:	4b1a      	ldr	r3, [pc, #104]	; (800cab0 <FATFS_LinkDriverEx+0x94>)
 800ca46:	2100      	movs	r1, #0
 800ca48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca4a:	4b19      	ldr	r3, [pc, #100]	; (800cab0 <FATFS_LinkDriverEx+0x94>)
 800ca4c:	7a5b      	ldrb	r3, [r3, #9]
 800ca4e:	b2db      	uxtb	r3, r3
 800ca50:	4a17      	ldr	r2, [pc, #92]	; (800cab0 <FATFS_LinkDriverEx+0x94>)
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca5a:	4b15      	ldr	r3, [pc, #84]	; (800cab0 <FATFS_LinkDriverEx+0x94>)
 800ca5c:	7a5b      	ldrb	r3, [r3, #9]
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	461a      	mov	r2, r3
 800ca62:	4b13      	ldr	r3, [pc, #76]	; (800cab0 <FATFS_LinkDriverEx+0x94>)
 800ca64:	4413      	add	r3, r2
 800ca66:	79fa      	ldrb	r2, [r7, #7]
 800ca68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca6a:	4b11      	ldr	r3, [pc, #68]	; (800cab0 <FATFS_LinkDriverEx+0x94>)
 800ca6c:	7a5b      	ldrb	r3, [r3, #9]
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	b2d1      	uxtb	r1, r2
 800ca74:	4a0e      	ldr	r2, [pc, #56]	; (800cab0 <FATFS_LinkDriverEx+0x94>)
 800ca76:	7251      	strb	r1, [r2, #9]
 800ca78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca7a:	7dbb      	ldrb	r3, [r7, #22]
 800ca7c:	3330      	adds	r3, #48	; 0x30
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	3301      	adds	r3, #1
 800ca88:	223a      	movs	r2, #58	; 0x3a
 800ca8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	3302      	adds	r3, #2
 800ca90:	222f      	movs	r2, #47	; 0x2f
 800ca92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	3303      	adds	r3, #3
 800ca98:	2200      	movs	r2, #0
 800ca9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800caa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	371c      	adds	r7, #28
 800caa6:	46bd      	mov	sp, r7
 800caa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	200004dc 	.word	0x200004dc

0800cab4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cabe:	2200      	movs	r2, #0
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f7ff ffaa 	bl	800ca1c <FATFS_LinkDriverEx>
 800cac8:	4603      	mov	r3, r0
}
 800caca:	4618      	mov	r0, r3
 800cacc:	3708      	adds	r7, #8
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
	...

0800cad4 <__errno>:
 800cad4:	4b01      	ldr	r3, [pc, #4]	; (800cadc <__errno+0x8>)
 800cad6:	6818      	ldr	r0, [r3, #0]
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	20000024 	.word	0x20000024

0800cae0 <__libc_init_array>:
 800cae0:	b570      	push	{r4, r5, r6, lr}
 800cae2:	4d0d      	ldr	r5, [pc, #52]	; (800cb18 <__libc_init_array+0x38>)
 800cae4:	4c0d      	ldr	r4, [pc, #52]	; (800cb1c <__libc_init_array+0x3c>)
 800cae6:	1b64      	subs	r4, r4, r5
 800cae8:	10a4      	asrs	r4, r4, #2
 800caea:	2600      	movs	r6, #0
 800caec:	42a6      	cmp	r6, r4
 800caee:	d109      	bne.n	800cb04 <__libc_init_array+0x24>
 800caf0:	4d0b      	ldr	r5, [pc, #44]	; (800cb20 <__libc_init_array+0x40>)
 800caf2:	4c0c      	ldr	r4, [pc, #48]	; (800cb24 <__libc_init_array+0x44>)
 800caf4:	f005 fc3a 	bl	801236c <_init>
 800caf8:	1b64      	subs	r4, r4, r5
 800cafa:	10a4      	asrs	r4, r4, #2
 800cafc:	2600      	movs	r6, #0
 800cafe:	42a6      	cmp	r6, r4
 800cb00:	d105      	bne.n	800cb0e <__libc_init_array+0x2e>
 800cb02:	bd70      	pop	{r4, r5, r6, pc}
 800cb04:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb08:	4798      	blx	r3
 800cb0a:	3601      	adds	r6, #1
 800cb0c:	e7ee      	b.n	800caec <__libc_init_array+0xc>
 800cb0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb12:	4798      	blx	r3
 800cb14:	3601      	adds	r6, #1
 800cb16:	e7f2      	b.n	800cafe <__libc_init_array+0x1e>
 800cb18:	08012b48 	.word	0x08012b48
 800cb1c:	08012b48 	.word	0x08012b48
 800cb20:	08012b48 	.word	0x08012b48
 800cb24:	08012b4c 	.word	0x08012b4c

0800cb28 <malloc>:
 800cb28:	4b02      	ldr	r3, [pc, #8]	; (800cb34 <malloc+0xc>)
 800cb2a:	4601      	mov	r1, r0
 800cb2c:	6818      	ldr	r0, [r3, #0]
 800cb2e:	f000 b869 	b.w	800cc04 <_malloc_r>
 800cb32:	bf00      	nop
 800cb34:	20000024 	.word	0x20000024

0800cb38 <memcpy>:
 800cb38:	440a      	add	r2, r1
 800cb3a:	4291      	cmp	r1, r2
 800cb3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb40:	d100      	bne.n	800cb44 <memcpy+0xc>
 800cb42:	4770      	bx	lr
 800cb44:	b510      	push	{r4, lr}
 800cb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb4e:	4291      	cmp	r1, r2
 800cb50:	d1f9      	bne.n	800cb46 <memcpy+0xe>
 800cb52:	bd10      	pop	{r4, pc}

0800cb54 <memset>:
 800cb54:	4402      	add	r2, r0
 800cb56:	4603      	mov	r3, r0
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d100      	bne.n	800cb5e <memset+0xa>
 800cb5c:	4770      	bx	lr
 800cb5e:	f803 1b01 	strb.w	r1, [r3], #1
 800cb62:	e7f9      	b.n	800cb58 <memset+0x4>

0800cb64 <_free_r>:
 800cb64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb66:	2900      	cmp	r1, #0
 800cb68:	d048      	beq.n	800cbfc <_free_r+0x98>
 800cb6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb6e:	9001      	str	r0, [sp, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f1a1 0404 	sub.w	r4, r1, #4
 800cb76:	bfb8      	it	lt
 800cb78:	18e4      	addlt	r4, r4, r3
 800cb7a:	f003 fbb3 	bl	80102e4 <__malloc_lock>
 800cb7e:	4a20      	ldr	r2, [pc, #128]	; (800cc00 <_free_r+0x9c>)
 800cb80:	9801      	ldr	r0, [sp, #4]
 800cb82:	6813      	ldr	r3, [r2, #0]
 800cb84:	4615      	mov	r5, r2
 800cb86:	b933      	cbnz	r3, 800cb96 <_free_r+0x32>
 800cb88:	6063      	str	r3, [r4, #4]
 800cb8a:	6014      	str	r4, [r2, #0]
 800cb8c:	b003      	add	sp, #12
 800cb8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb92:	f003 bbad 	b.w	80102f0 <__malloc_unlock>
 800cb96:	42a3      	cmp	r3, r4
 800cb98:	d90b      	bls.n	800cbb2 <_free_r+0x4e>
 800cb9a:	6821      	ldr	r1, [r4, #0]
 800cb9c:	1862      	adds	r2, r4, r1
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	bf04      	itt	eq
 800cba2:	681a      	ldreq	r2, [r3, #0]
 800cba4:	685b      	ldreq	r3, [r3, #4]
 800cba6:	6063      	str	r3, [r4, #4]
 800cba8:	bf04      	itt	eq
 800cbaa:	1852      	addeq	r2, r2, r1
 800cbac:	6022      	streq	r2, [r4, #0]
 800cbae:	602c      	str	r4, [r5, #0]
 800cbb0:	e7ec      	b.n	800cb8c <_free_r+0x28>
 800cbb2:	461a      	mov	r2, r3
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	b10b      	cbz	r3, 800cbbc <_free_r+0x58>
 800cbb8:	42a3      	cmp	r3, r4
 800cbba:	d9fa      	bls.n	800cbb2 <_free_r+0x4e>
 800cbbc:	6811      	ldr	r1, [r2, #0]
 800cbbe:	1855      	adds	r5, r2, r1
 800cbc0:	42a5      	cmp	r5, r4
 800cbc2:	d10b      	bne.n	800cbdc <_free_r+0x78>
 800cbc4:	6824      	ldr	r4, [r4, #0]
 800cbc6:	4421      	add	r1, r4
 800cbc8:	1854      	adds	r4, r2, r1
 800cbca:	42a3      	cmp	r3, r4
 800cbcc:	6011      	str	r1, [r2, #0]
 800cbce:	d1dd      	bne.n	800cb8c <_free_r+0x28>
 800cbd0:	681c      	ldr	r4, [r3, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	6053      	str	r3, [r2, #4]
 800cbd6:	4421      	add	r1, r4
 800cbd8:	6011      	str	r1, [r2, #0]
 800cbda:	e7d7      	b.n	800cb8c <_free_r+0x28>
 800cbdc:	d902      	bls.n	800cbe4 <_free_r+0x80>
 800cbde:	230c      	movs	r3, #12
 800cbe0:	6003      	str	r3, [r0, #0]
 800cbe2:	e7d3      	b.n	800cb8c <_free_r+0x28>
 800cbe4:	6825      	ldr	r5, [r4, #0]
 800cbe6:	1961      	adds	r1, r4, r5
 800cbe8:	428b      	cmp	r3, r1
 800cbea:	bf04      	itt	eq
 800cbec:	6819      	ldreq	r1, [r3, #0]
 800cbee:	685b      	ldreq	r3, [r3, #4]
 800cbf0:	6063      	str	r3, [r4, #4]
 800cbf2:	bf04      	itt	eq
 800cbf4:	1949      	addeq	r1, r1, r5
 800cbf6:	6021      	streq	r1, [r4, #0]
 800cbf8:	6054      	str	r4, [r2, #4]
 800cbfa:	e7c7      	b.n	800cb8c <_free_r+0x28>
 800cbfc:	b003      	add	sp, #12
 800cbfe:	bd30      	pop	{r4, r5, pc}
 800cc00:	200004e8 	.word	0x200004e8

0800cc04 <_malloc_r>:
 800cc04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc06:	1ccd      	adds	r5, r1, #3
 800cc08:	f025 0503 	bic.w	r5, r5, #3
 800cc0c:	3508      	adds	r5, #8
 800cc0e:	2d0c      	cmp	r5, #12
 800cc10:	bf38      	it	cc
 800cc12:	250c      	movcc	r5, #12
 800cc14:	2d00      	cmp	r5, #0
 800cc16:	4606      	mov	r6, r0
 800cc18:	db01      	blt.n	800cc1e <_malloc_r+0x1a>
 800cc1a:	42a9      	cmp	r1, r5
 800cc1c:	d903      	bls.n	800cc26 <_malloc_r+0x22>
 800cc1e:	230c      	movs	r3, #12
 800cc20:	6033      	str	r3, [r6, #0]
 800cc22:	2000      	movs	r0, #0
 800cc24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc26:	f003 fb5d 	bl	80102e4 <__malloc_lock>
 800cc2a:	4921      	ldr	r1, [pc, #132]	; (800ccb0 <_malloc_r+0xac>)
 800cc2c:	680a      	ldr	r2, [r1, #0]
 800cc2e:	4614      	mov	r4, r2
 800cc30:	b99c      	cbnz	r4, 800cc5a <_malloc_r+0x56>
 800cc32:	4f20      	ldr	r7, [pc, #128]	; (800ccb4 <_malloc_r+0xb0>)
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	b923      	cbnz	r3, 800cc42 <_malloc_r+0x3e>
 800cc38:	4621      	mov	r1, r4
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f000 feb6 	bl	800d9ac <_sbrk_r>
 800cc40:	6038      	str	r0, [r7, #0]
 800cc42:	4629      	mov	r1, r5
 800cc44:	4630      	mov	r0, r6
 800cc46:	f000 feb1 	bl	800d9ac <_sbrk_r>
 800cc4a:	1c43      	adds	r3, r0, #1
 800cc4c:	d123      	bne.n	800cc96 <_malloc_r+0x92>
 800cc4e:	230c      	movs	r3, #12
 800cc50:	6033      	str	r3, [r6, #0]
 800cc52:	4630      	mov	r0, r6
 800cc54:	f003 fb4c 	bl	80102f0 <__malloc_unlock>
 800cc58:	e7e3      	b.n	800cc22 <_malloc_r+0x1e>
 800cc5a:	6823      	ldr	r3, [r4, #0]
 800cc5c:	1b5b      	subs	r3, r3, r5
 800cc5e:	d417      	bmi.n	800cc90 <_malloc_r+0x8c>
 800cc60:	2b0b      	cmp	r3, #11
 800cc62:	d903      	bls.n	800cc6c <_malloc_r+0x68>
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	441c      	add	r4, r3
 800cc68:	6025      	str	r5, [r4, #0]
 800cc6a:	e004      	b.n	800cc76 <_malloc_r+0x72>
 800cc6c:	6863      	ldr	r3, [r4, #4]
 800cc6e:	42a2      	cmp	r2, r4
 800cc70:	bf0c      	ite	eq
 800cc72:	600b      	streq	r3, [r1, #0]
 800cc74:	6053      	strne	r3, [r2, #4]
 800cc76:	4630      	mov	r0, r6
 800cc78:	f003 fb3a 	bl	80102f0 <__malloc_unlock>
 800cc7c:	f104 000b 	add.w	r0, r4, #11
 800cc80:	1d23      	adds	r3, r4, #4
 800cc82:	f020 0007 	bic.w	r0, r0, #7
 800cc86:	1ac2      	subs	r2, r0, r3
 800cc88:	d0cc      	beq.n	800cc24 <_malloc_r+0x20>
 800cc8a:	1a1b      	subs	r3, r3, r0
 800cc8c:	50a3      	str	r3, [r4, r2]
 800cc8e:	e7c9      	b.n	800cc24 <_malloc_r+0x20>
 800cc90:	4622      	mov	r2, r4
 800cc92:	6864      	ldr	r4, [r4, #4]
 800cc94:	e7cc      	b.n	800cc30 <_malloc_r+0x2c>
 800cc96:	1cc4      	adds	r4, r0, #3
 800cc98:	f024 0403 	bic.w	r4, r4, #3
 800cc9c:	42a0      	cmp	r0, r4
 800cc9e:	d0e3      	beq.n	800cc68 <_malloc_r+0x64>
 800cca0:	1a21      	subs	r1, r4, r0
 800cca2:	4630      	mov	r0, r6
 800cca4:	f000 fe82 	bl	800d9ac <_sbrk_r>
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d1dd      	bne.n	800cc68 <_malloc_r+0x64>
 800ccac:	e7cf      	b.n	800cc4e <_malloc_r+0x4a>
 800ccae:	bf00      	nop
 800ccb0:	200004e8 	.word	0x200004e8
 800ccb4:	200004ec 	.word	0x200004ec

0800ccb8 <__cvt>:
 800ccb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccbc:	ec55 4b10 	vmov	r4, r5, d0
 800ccc0:	2d00      	cmp	r5, #0
 800ccc2:	460e      	mov	r6, r1
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	462b      	mov	r3, r5
 800ccc8:	bfbb      	ittet	lt
 800ccca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ccce:	461d      	movlt	r5, r3
 800ccd0:	2300      	movge	r3, #0
 800ccd2:	232d      	movlt	r3, #45	; 0x2d
 800ccd4:	700b      	strb	r3, [r1, #0]
 800ccd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ccdc:	4691      	mov	r9, r2
 800ccde:	f023 0820 	bic.w	r8, r3, #32
 800cce2:	bfbc      	itt	lt
 800cce4:	4622      	movlt	r2, r4
 800cce6:	4614      	movlt	r4, r2
 800cce8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ccec:	d005      	beq.n	800ccfa <__cvt+0x42>
 800ccee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ccf2:	d100      	bne.n	800ccf6 <__cvt+0x3e>
 800ccf4:	3601      	adds	r6, #1
 800ccf6:	2102      	movs	r1, #2
 800ccf8:	e000      	b.n	800ccfc <__cvt+0x44>
 800ccfa:	2103      	movs	r1, #3
 800ccfc:	ab03      	add	r3, sp, #12
 800ccfe:	9301      	str	r3, [sp, #4]
 800cd00:	ab02      	add	r3, sp, #8
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	ec45 4b10 	vmov	d0, r4, r5
 800cd08:	4653      	mov	r3, sl
 800cd0a:	4632      	mov	r2, r6
 800cd0c:	f001 ff48 	bl	800eba0 <_dtoa_r>
 800cd10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cd14:	4607      	mov	r7, r0
 800cd16:	d102      	bne.n	800cd1e <__cvt+0x66>
 800cd18:	f019 0f01 	tst.w	r9, #1
 800cd1c:	d022      	beq.n	800cd64 <__cvt+0xac>
 800cd1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd22:	eb07 0906 	add.w	r9, r7, r6
 800cd26:	d110      	bne.n	800cd4a <__cvt+0x92>
 800cd28:	783b      	ldrb	r3, [r7, #0]
 800cd2a:	2b30      	cmp	r3, #48	; 0x30
 800cd2c:	d10a      	bne.n	800cd44 <__cvt+0x8c>
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2300      	movs	r3, #0
 800cd32:	4620      	mov	r0, r4
 800cd34:	4629      	mov	r1, r5
 800cd36:	f7f3 fed7 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd3a:	b918      	cbnz	r0, 800cd44 <__cvt+0x8c>
 800cd3c:	f1c6 0601 	rsb	r6, r6, #1
 800cd40:	f8ca 6000 	str.w	r6, [sl]
 800cd44:	f8da 3000 	ldr.w	r3, [sl]
 800cd48:	4499      	add	r9, r3
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	4620      	mov	r0, r4
 800cd50:	4629      	mov	r1, r5
 800cd52:	f7f3 fec9 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd56:	b108      	cbz	r0, 800cd5c <__cvt+0xa4>
 800cd58:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd5c:	2230      	movs	r2, #48	; 0x30
 800cd5e:	9b03      	ldr	r3, [sp, #12]
 800cd60:	454b      	cmp	r3, r9
 800cd62:	d307      	bcc.n	800cd74 <__cvt+0xbc>
 800cd64:	9b03      	ldr	r3, [sp, #12]
 800cd66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd68:	1bdb      	subs	r3, r3, r7
 800cd6a:	4638      	mov	r0, r7
 800cd6c:	6013      	str	r3, [r2, #0]
 800cd6e:	b004      	add	sp, #16
 800cd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd74:	1c59      	adds	r1, r3, #1
 800cd76:	9103      	str	r1, [sp, #12]
 800cd78:	701a      	strb	r2, [r3, #0]
 800cd7a:	e7f0      	b.n	800cd5e <__cvt+0xa6>

0800cd7c <__exponent>:
 800cd7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd7e:	4603      	mov	r3, r0
 800cd80:	2900      	cmp	r1, #0
 800cd82:	bfb8      	it	lt
 800cd84:	4249      	neglt	r1, r1
 800cd86:	f803 2b02 	strb.w	r2, [r3], #2
 800cd8a:	bfb4      	ite	lt
 800cd8c:	222d      	movlt	r2, #45	; 0x2d
 800cd8e:	222b      	movge	r2, #43	; 0x2b
 800cd90:	2909      	cmp	r1, #9
 800cd92:	7042      	strb	r2, [r0, #1]
 800cd94:	dd2a      	ble.n	800cdec <__exponent+0x70>
 800cd96:	f10d 0407 	add.w	r4, sp, #7
 800cd9a:	46a4      	mov	ip, r4
 800cd9c:	270a      	movs	r7, #10
 800cd9e:	46a6      	mov	lr, r4
 800cda0:	460a      	mov	r2, r1
 800cda2:	fb91 f6f7 	sdiv	r6, r1, r7
 800cda6:	fb07 1516 	mls	r5, r7, r6, r1
 800cdaa:	3530      	adds	r5, #48	; 0x30
 800cdac:	2a63      	cmp	r2, #99	; 0x63
 800cdae:	f104 34ff 	add.w	r4, r4, #4294967295
 800cdb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cdb6:	4631      	mov	r1, r6
 800cdb8:	dcf1      	bgt.n	800cd9e <__exponent+0x22>
 800cdba:	3130      	adds	r1, #48	; 0x30
 800cdbc:	f1ae 0502 	sub.w	r5, lr, #2
 800cdc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cdc4:	1c44      	adds	r4, r0, #1
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	4561      	cmp	r1, ip
 800cdca:	d30a      	bcc.n	800cde2 <__exponent+0x66>
 800cdcc:	f10d 0209 	add.w	r2, sp, #9
 800cdd0:	eba2 020e 	sub.w	r2, r2, lr
 800cdd4:	4565      	cmp	r5, ip
 800cdd6:	bf88      	it	hi
 800cdd8:	2200      	movhi	r2, #0
 800cdda:	4413      	add	r3, r2
 800cddc:	1a18      	subs	r0, r3, r0
 800cdde:	b003      	add	sp, #12
 800cde0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cde2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cde6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cdea:	e7ed      	b.n	800cdc8 <__exponent+0x4c>
 800cdec:	2330      	movs	r3, #48	; 0x30
 800cdee:	3130      	adds	r1, #48	; 0x30
 800cdf0:	7083      	strb	r3, [r0, #2]
 800cdf2:	70c1      	strb	r1, [r0, #3]
 800cdf4:	1d03      	adds	r3, r0, #4
 800cdf6:	e7f1      	b.n	800cddc <__exponent+0x60>

0800cdf8 <_printf_float>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	ed2d 8b02 	vpush	{d8}
 800ce00:	b08d      	sub	sp, #52	; 0x34
 800ce02:	460c      	mov	r4, r1
 800ce04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ce08:	4616      	mov	r6, r2
 800ce0a:	461f      	mov	r7, r3
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	f003 f9d9 	bl	80101c4 <_localeconv_r>
 800ce12:	f8d0 a000 	ldr.w	sl, [r0]
 800ce16:	4650      	mov	r0, sl
 800ce18:	f7f3 f9ea 	bl	80001f0 <strlen>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	9305      	str	r3, [sp, #20]
 800ce24:	f8d8 3000 	ldr.w	r3, [r8]
 800ce28:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ce2c:	3307      	adds	r3, #7
 800ce2e:	f023 0307 	bic.w	r3, r3, #7
 800ce32:	f103 0208 	add.w	r2, r3, #8
 800ce36:	f8c8 2000 	str.w	r2, [r8]
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ce42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ce46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce4a:	9307      	str	r3, [sp, #28]
 800ce4c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce50:	ee08 0a10 	vmov	s16, r0
 800ce54:	4b9f      	ldr	r3, [pc, #636]	; (800d0d4 <_printf_float+0x2dc>)
 800ce56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5e:	f7f3 fe75 	bl	8000b4c <__aeabi_dcmpun>
 800ce62:	bb88      	cbnz	r0, 800cec8 <_printf_float+0xd0>
 800ce64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce68:	4b9a      	ldr	r3, [pc, #616]	; (800d0d4 <_printf_float+0x2dc>)
 800ce6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce6e:	f7f3 fe4f 	bl	8000b10 <__aeabi_dcmple>
 800ce72:	bb48      	cbnz	r0, 800cec8 <_printf_float+0xd0>
 800ce74:	2200      	movs	r2, #0
 800ce76:	2300      	movs	r3, #0
 800ce78:	4640      	mov	r0, r8
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	f7f3 fe3e 	bl	8000afc <__aeabi_dcmplt>
 800ce80:	b110      	cbz	r0, 800ce88 <_printf_float+0x90>
 800ce82:	232d      	movs	r3, #45	; 0x2d
 800ce84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce88:	4b93      	ldr	r3, [pc, #588]	; (800d0d8 <_printf_float+0x2e0>)
 800ce8a:	4894      	ldr	r0, [pc, #592]	; (800d0dc <_printf_float+0x2e4>)
 800ce8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ce90:	bf94      	ite	ls
 800ce92:	4698      	movls	r8, r3
 800ce94:	4680      	movhi	r8, r0
 800ce96:	2303      	movs	r3, #3
 800ce98:	6123      	str	r3, [r4, #16]
 800ce9a:	9b05      	ldr	r3, [sp, #20]
 800ce9c:	f023 0204 	bic.w	r2, r3, #4
 800cea0:	6022      	str	r2, [r4, #0]
 800cea2:	f04f 0900 	mov.w	r9, #0
 800cea6:	9700      	str	r7, [sp, #0]
 800cea8:	4633      	mov	r3, r6
 800ceaa:	aa0b      	add	r2, sp, #44	; 0x2c
 800ceac:	4621      	mov	r1, r4
 800ceae:	4628      	mov	r0, r5
 800ceb0:	f000 f9d8 	bl	800d264 <_printf_common>
 800ceb4:	3001      	adds	r0, #1
 800ceb6:	f040 8090 	bne.w	800cfda <_printf_float+0x1e2>
 800ceba:	f04f 30ff 	mov.w	r0, #4294967295
 800cebe:	b00d      	add	sp, #52	; 0x34
 800cec0:	ecbd 8b02 	vpop	{d8}
 800cec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec8:	4642      	mov	r2, r8
 800ceca:	464b      	mov	r3, r9
 800cecc:	4640      	mov	r0, r8
 800cece:	4649      	mov	r1, r9
 800ced0:	f7f3 fe3c 	bl	8000b4c <__aeabi_dcmpun>
 800ced4:	b140      	cbz	r0, 800cee8 <_printf_float+0xf0>
 800ced6:	464b      	mov	r3, r9
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	bfbc      	itt	lt
 800cedc:	232d      	movlt	r3, #45	; 0x2d
 800cede:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cee2:	487f      	ldr	r0, [pc, #508]	; (800d0e0 <_printf_float+0x2e8>)
 800cee4:	4b7f      	ldr	r3, [pc, #508]	; (800d0e4 <_printf_float+0x2ec>)
 800cee6:	e7d1      	b.n	800ce8c <_printf_float+0x94>
 800cee8:	6863      	ldr	r3, [r4, #4]
 800ceea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ceee:	9206      	str	r2, [sp, #24]
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	d13f      	bne.n	800cf74 <_printf_float+0x17c>
 800cef4:	2306      	movs	r3, #6
 800cef6:	6063      	str	r3, [r4, #4]
 800cef8:	9b05      	ldr	r3, [sp, #20]
 800cefa:	6861      	ldr	r1, [r4, #4]
 800cefc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cf00:	2300      	movs	r3, #0
 800cf02:	9303      	str	r3, [sp, #12]
 800cf04:	ab0a      	add	r3, sp, #40	; 0x28
 800cf06:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cf0a:	ab09      	add	r3, sp, #36	; 0x24
 800cf0c:	ec49 8b10 	vmov	d0, r8, r9
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	6022      	str	r2, [r4, #0]
 800cf14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f7ff fecd 	bl	800ccb8 <__cvt>
 800cf1e:	9b06      	ldr	r3, [sp, #24]
 800cf20:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf22:	2b47      	cmp	r3, #71	; 0x47
 800cf24:	4680      	mov	r8, r0
 800cf26:	d108      	bne.n	800cf3a <_printf_float+0x142>
 800cf28:	1cc8      	adds	r0, r1, #3
 800cf2a:	db02      	blt.n	800cf32 <_printf_float+0x13a>
 800cf2c:	6863      	ldr	r3, [r4, #4]
 800cf2e:	4299      	cmp	r1, r3
 800cf30:	dd41      	ble.n	800cfb6 <_printf_float+0x1be>
 800cf32:	f1ab 0b02 	sub.w	fp, fp, #2
 800cf36:	fa5f fb8b 	uxtb.w	fp, fp
 800cf3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf3e:	d820      	bhi.n	800cf82 <_printf_float+0x18a>
 800cf40:	3901      	subs	r1, #1
 800cf42:	465a      	mov	r2, fp
 800cf44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf48:	9109      	str	r1, [sp, #36]	; 0x24
 800cf4a:	f7ff ff17 	bl	800cd7c <__exponent>
 800cf4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf50:	1813      	adds	r3, r2, r0
 800cf52:	2a01      	cmp	r2, #1
 800cf54:	4681      	mov	r9, r0
 800cf56:	6123      	str	r3, [r4, #16]
 800cf58:	dc02      	bgt.n	800cf60 <_printf_float+0x168>
 800cf5a:	6822      	ldr	r2, [r4, #0]
 800cf5c:	07d2      	lsls	r2, r2, #31
 800cf5e:	d501      	bpl.n	800cf64 <_printf_float+0x16c>
 800cf60:	3301      	adds	r3, #1
 800cf62:	6123      	str	r3, [r4, #16]
 800cf64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d09c      	beq.n	800cea6 <_printf_float+0xae>
 800cf6c:	232d      	movs	r3, #45	; 0x2d
 800cf6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf72:	e798      	b.n	800cea6 <_printf_float+0xae>
 800cf74:	9a06      	ldr	r2, [sp, #24]
 800cf76:	2a47      	cmp	r2, #71	; 0x47
 800cf78:	d1be      	bne.n	800cef8 <_printf_float+0x100>
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1bc      	bne.n	800cef8 <_printf_float+0x100>
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e7b9      	b.n	800cef6 <_printf_float+0xfe>
 800cf82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cf86:	d118      	bne.n	800cfba <_printf_float+0x1c2>
 800cf88:	2900      	cmp	r1, #0
 800cf8a:	6863      	ldr	r3, [r4, #4]
 800cf8c:	dd0b      	ble.n	800cfa6 <_printf_float+0x1ae>
 800cf8e:	6121      	str	r1, [r4, #16]
 800cf90:	b913      	cbnz	r3, 800cf98 <_printf_float+0x1a0>
 800cf92:	6822      	ldr	r2, [r4, #0]
 800cf94:	07d0      	lsls	r0, r2, #31
 800cf96:	d502      	bpl.n	800cf9e <_printf_float+0x1a6>
 800cf98:	3301      	adds	r3, #1
 800cf9a:	440b      	add	r3, r1
 800cf9c:	6123      	str	r3, [r4, #16]
 800cf9e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cfa0:	f04f 0900 	mov.w	r9, #0
 800cfa4:	e7de      	b.n	800cf64 <_printf_float+0x16c>
 800cfa6:	b913      	cbnz	r3, 800cfae <_printf_float+0x1b6>
 800cfa8:	6822      	ldr	r2, [r4, #0]
 800cfaa:	07d2      	lsls	r2, r2, #31
 800cfac:	d501      	bpl.n	800cfb2 <_printf_float+0x1ba>
 800cfae:	3302      	adds	r3, #2
 800cfb0:	e7f4      	b.n	800cf9c <_printf_float+0x1a4>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e7f2      	b.n	800cf9c <_printf_float+0x1a4>
 800cfb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cfba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfbc:	4299      	cmp	r1, r3
 800cfbe:	db05      	blt.n	800cfcc <_printf_float+0x1d4>
 800cfc0:	6823      	ldr	r3, [r4, #0]
 800cfc2:	6121      	str	r1, [r4, #16]
 800cfc4:	07d8      	lsls	r0, r3, #31
 800cfc6:	d5ea      	bpl.n	800cf9e <_printf_float+0x1a6>
 800cfc8:	1c4b      	adds	r3, r1, #1
 800cfca:	e7e7      	b.n	800cf9c <_printf_float+0x1a4>
 800cfcc:	2900      	cmp	r1, #0
 800cfce:	bfd4      	ite	le
 800cfd0:	f1c1 0202 	rsble	r2, r1, #2
 800cfd4:	2201      	movgt	r2, #1
 800cfd6:	4413      	add	r3, r2
 800cfd8:	e7e0      	b.n	800cf9c <_printf_float+0x1a4>
 800cfda:	6823      	ldr	r3, [r4, #0]
 800cfdc:	055a      	lsls	r2, r3, #21
 800cfde:	d407      	bmi.n	800cff0 <_printf_float+0x1f8>
 800cfe0:	6923      	ldr	r3, [r4, #16]
 800cfe2:	4642      	mov	r2, r8
 800cfe4:	4631      	mov	r1, r6
 800cfe6:	4628      	mov	r0, r5
 800cfe8:	47b8      	blx	r7
 800cfea:	3001      	adds	r0, #1
 800cfec:	d12c      	bne.n	800d048 <_printf_float+0x250>
 800cfee:	e764      	b.n	800ceba <_printf_float+0xc2>
 800cff0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cff4:	f240 80e0 	bls.w	800d1b8 <_printf_float+0x3c0>
 800cff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cffc:	2200      	movs	r2, #0
 800cffe:	2300      	movs	r3, #0
 800d000:	f7f3 fd72 	bl	8000ae8 <__aeabi_dcmpeq>
 800d004:	2800      	cmp	r0, #0
 800d006:	d034      	beq.n	800d072 <_printf_float+0x27a>
 800d008:	4a37      	ldr	r2, [pc, #220]	; (800d0e8 <_printf_float+0x2f0>)
 800d00a:	2301      	movs	r3, #1
 800d00c:	4631      	mov	r1, r6
 800d00e:	4628      	mov	r0, r5
 800d010:	47b8      	blx	r7
 800d012:	3001      	adds	r0, #1
 800d014:	f43f af51 	beq.w	800ceba <_printf_float+0xc2>
 800d018:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d01c:	429a      	cmp	r2, r3
 800d01e:	db02      	blt.n	800d026 <_printf_float+0x22e>
 800d020:	6823      	ldr	r3, [r4, #0]
 800d022:	07d8      	lsls	r0, r3, #31
 800d024:	d510      	bpl.n	800d048 <_printf_float+0x250>
 800d026:	ee18 3a10 	vmov	r3, s16
 800d02a:	4652      	mov	r2, sl
 800d02c:	4631      	mov	r1, r6
 800d02e:	4628      	mov	r0, r5
 800d030:	47b8      	blx	r7
 800d032:	3001      	adds	r0, #1
 800d034:	f43f af41 	beq.w	800ceba <_printf_float+0xc2>
 800d038:	f04f 0800 	mov.w	r8, #0
 800d03c:	f104 091a 	add.w	r9, r4, #26
 800d040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d042:	3b01      	subs	r3, #1
 800d044:	4543      	cmp	r3, r8
 800d046:	dc09      	bgt.n	800d05c <_printf_float+0x264>
 800d048:	6823      	ldr	r3, [r4, #0]
 800d04a:	079b      	lsls	r3, r3, #30
 800d04c:	f100 8105 	bmi.w	800d25a <_printf_float+0x462>
 800d050:	68e0      	ldr	r0, [r4, #12]
 800d052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d054:	4298      	cmp	r0, r3
 800d056:	bfb8      	it	lt
 800d058:	4618      	movlt	r0, r3
 800d05a:	e730      	b.n	800cebe <_printf_float+0xc6>
 800d05c:	2301      	movs	r3, #1
 800d05e:	464a      	mov	r2, r9
 800d060:	4631      	mov	r1, r6
 800d062:	4628      	mov	r0, r5
 800d064:	47b8      	blx	r7
 800d066:	3001      	adds	r0, #1
 800d068:	f43f af27 	beq.w	800ceba <_printf_float+0xc2>
 800d06c:	f108 0801 	add.w	r8, r8, #1
 800d070:	e7e6      	b.n	800d040 <_printf_float+0x248>
 800d072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d074:	2b00      	cmp	r3, #0
 800d076:	dc39      	bgt.n	800d0ec <_printf_float+0x2f4>
 800d078:	4a1b      	ldr	r2, [pc, #108]	; (800d0e8 <_printf_float+0x2f0>)
 800d07a:	2301      	movs	r3, #1
 800d07c:	4631      	mov	r1, r6
 800d07e:	4628      	mov	r0, r5
 800d080:	47b8      	blx	r7
 800d082:	3001      	adds	r0, #1
 800d084:	f43f af19 	beq.w	800ceba <_printf_float+0xc2>
 800d088:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d08c:	4313      	orrs	r3, r2
 800d08e:	d102      	bne.n	800d096 <_printf_float+0x29e>
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	07d9      	lsls	r1, r3, #31
 800d094:	d5d8      	bpl.n	800d048 <_printf_float+0x250>
 800d096:	ee18 3a10 	vmov	r3, s16
 800d09a:	4652      	mov	r2, sl
 800d09c:	4631      	mov	r1, r6
 800d09e:	4628      	mov	r0, r5
 800d0a0:	47b8      	blx	r7
 800d0a2:	3001      	adds	r0, #1
 800d0a4:	f43f af09 	beq.w	800ceba <_printf_float+0xc2>
 800d0a8:	f04f 0900 	mov.w	r9, #0
 800d0ac:	f104 0a1a 	add.w	sl, r4, #26
 800d0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0b2:	425b      	negs	r3, r3
 800d0b4:	454b      	cmp	r3, r9
 800d0b6:	dc01      	bgt.n	800d0bc <_printf_float+0x2c4>
 800d0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0ba:	e792      	b.n	800cfe2 <_printf_float+0x1ea>
 800d0bc:	2301      	movs	r3, #1
 800d0be:	4652      	mov	r2, sl
 800d0c0:	4631      	mov	r1, r6
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	47b8      	blx	r7
 800d0c6:	3001      	adds	r0, #1
 800d0c8:	f43f aef7 	beq.w	800ceba <_printf_float+0xc2>
 800d0cc:	f109 0901 	add.w	r9, r9, #1
 800d0d0:	e7ee      	b.n	800d0b0 <_printf_float+0x2b8>
 800d0d2:	bf00      	nop
 800d0d4:	7fefffff 	.word	0x7fefffff
 800d0d8:	0801274c 	.word	0x0801274c
 800d0dc:	08012750 	.word	0x08012750
 800d0e0:	08012758 	.word	0x08012758
 800d0e4:	08012754 	.word	0x08012754
 800d0e8:	0801275c 	.word	0x0801275c
 800d0ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	bfa8      	it	ge
 800d0f4:	461a      	movge	r2, r3
 800d0f6:	2a00      	cmp	r2, #0
 800d0f8:	4691      	mov	r9, r2
 800d0fa:	dc37      	bgt.n	800d16c <_printf_float+0x374>
 800d0fc:	f04f 0b00 	mov.w	fp, #0
 800d100:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d104:	f104 021a 	add.w	r2, r4, #26
 800d108:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d10a:	9305      	str	r3, [sp, #20]
 800d10c:	eba3 0309 	sub.w	r3, r3, r9
 800d110:	455b      	cmp	r3, fp
 800d112:	dc33      	bgt.n	800d17c <_printf_float+0x384>
 800d114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d118:	429a      	cmp	r2, r3
 800d11a:	db3b      	blt.n	800d194 <_printf_float+0x39c>
 800d11c:	6823      	ldr	r3, [r4, #0]
 800d11e:	07da      	lsls	r2, r3, #31
 800d120:	d438      	bmi.n	800d194 <_printf_float+0x39c>
 800d122:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d124:	9b05      	ldr	r3, [sp, #20]
 800d126:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	eba2 0901 	sub.w	r9, r2, r1
 800d12e:	4599      	cmp	r9, r3
 800d130:	bfa8      	it	ge
 800d132:	4699      	movge	r9, r3
 800d134:	f1b9 0f00 	cmp.w	r9, #0
 800d138:	dc35      	bgt.n	800d1a6 <_printf_float+0x3ae>
 800d13a:	f04f 0800 	mov.w	r8, #0
 800d13e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d142:	f104 0a1a 	add.w	sl, r4, #26
 800d146:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d14a:	1a9b      	subs	r3, r3, r2
 800d14c:	eba3 0309 	sub.w	r3, r3, r9
 800d150:	4543      	cmp	r3, r8
 800d152:	f77f af79 	ble.w	800d048 <_printf_float+0x250>
 800d156:	2301      	movs	r3, #1
 800d158:	4652      	mov	r2, sl
 800d15a:	4631      	mov	r1, r6
 800d15c:	4628      	mov	r0, r5
 800d15e:	47b8      	blx	r7
 800d160:	3001      	adds	r0, #1
 800d162:	f43f aeaa 	beq.w	800ceba <_printf_float+0xc2>
 800d166:	f108 0801 	add.w	r8, r8, #1
 800d16a:	e7ec      	b.n	800d146 <_printf_float+0x34e>
 800d16c:	4613      	mov	r3, r2
 800d16e:	4631      	mov	r1, r6
 800d170:	4642      	mov	r2, r8
 800d172:	4628      	mov	r0, r5
 800d174:	47b8      	blx	r7
 800d176:	3001      	adds	r0, #1
 800d178:	d1c0      	bne.n	800d0fc <_printf_float+0x304>
 800d17a:	e69e      	b.n	800ceba <_printf_float+0xc2>
 800d17c:	2301      	movs	r3, #1
 800d17e:	4631      	mov	r1, r6
 800d180:	4628      	mov	r0, r5
 800d182:	9205      	str	r2, [sp, #20]
 800d184:	47b8      	blx	r7
 800d186:	3001      	adds	r0, #1
 800d188:	f43f ae97 	beq.w	800ceba <_printf_float+0xc2>
 800d18c:	9a05      	ldr	r2, [sp, #20]
 800d18e:	f10b 0b01 	add.w	fp, fp, #1
 800d192:	e7b9      	b.n	800d108 <_printf_float+0x310>
 800d194:	ee18 3a10 	vmov	r3, s16
 800d198:	4652      	mov	r2, sl
 800d19a:	4631      	mov	r1, r6
 800d19c:	4628      	mov	r0, r5
 800d19e:	47b8      	blx	r7
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d1be      	bne.n	800d122 <_printf_float+0x32a>
 800d1a4:	e689      	b.n	800ceba <_printf_float+0xc2>
 800d1a6:	9a05      	ldr	r2, [sp, #20]
 800d1a8:	464b      	mov	r3, r9
 800d1aa:	4442      	add	r2, r8
 800d1ac:	4631      	mov	r1, r6
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	47b8      	blx	r7
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	d1c1      	bne.n	800d13a <_printf_float+0x342>
 800d1b6:	e680      	b.n	800ceba <_printf_float+0xc2>
 800d1b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1ba:	2a01      	cmp	r2, #1
 800d1bc:	dc01      	bgt.n	800d1c2 <_printf_float+0x3ca>
 800d1be:	07db      	lsls	r3, r3, #31
 800d1c0:	d538      	bpl.n	800d234 <_printf_float+0x43c>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	4642      	mov	r2, r8
 800d1c6:	4631      	mov	r1, r6
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	47b8      	blx	r7
 800d1cc:	3001      	adds	r0, #1
 800d1ce:	f43f ae74 	beq.w	800ceba <_printf_float+0xc2>
 800d1d2:	ee18 3a10 	vmov	r3, s16
 800d1d6:	4652      	mov	r2, sl
 800d1d8:	4631      	mov	r1, r6
 800d1da:	4628      	mov	r0, r5
 800d1dc:	47b8      	blx	r7
 800d1de:	3001      	adds	r0, #1
 800d1e0:	f43f ae6b 	beq.w	800ceba <_printf_float+0xc2>
 800d1e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f7f3 fc7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1f0:	b9d8      	cbnz	r0, 800d22a <_printf_float+0x432>
 800d1f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f4:	f108 0201 	add.w	r2, r8, #1
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	47b8      	blx	r7
 800d200:	3001      	adds	r0, #1
 800d202:	d10e      	bne.n	800d222 <_printf_float+0x42a>
 800d204:	e659      	b.n	800ceba <_printf_float+0xc2>
 800d206:	2301      	movs	r3, #1
 800d208:	4652      	mov	r2, sl
 800d20a:	4631      	mov	r1, r6
 800d20c:	4628      	mov	r0, r5
 800d20e:	47b8      	blx	r7
 800d210:	3001      	adds	r0, #1
 800d212:	f43f ae52 	beq.w	800ceba <_printf_float+0xc2>
 800d216:	f108 0801 	add.w	r8, r8, #1
 800d21a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d21c:	3b01      	subs	r3, #1
 800d21e:	4543      	cmp	r3, r8
 800d220:	dcf1      	bgt.n	800d206 <_printf_float+0x40e>
 800d222:	464b      	mov	r3, r9
 800d224:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d228:	e6dc      	b.n	800cfe4 <_printf_float+0x1ec>
 800d22a:	f04f 0800 	mov.w	r8, #0
 800d22e:	f104 0a1a 	add.w	sl, r4, #26
 800d232:	e7f2      	b.n	800d21a <_printf_float+0x422>
 800d234:	2301      	movs	r3, #1
 800d236:	4642      	mov	r2, r8
 800d238:	e7df      	b.n	800d1fa <_printf_float+0x402>
 800d23a:	2301      	movs	r3, #1
 800d23c:	464a      	mov	r2, r9
 800d23e:	4631      	mov	r1, r6
 800d240:	4628      	mov	r0, r5
 800d242:	47b8      	blx	r7
 800d244:	3001      	adds	r0, #1
 800d246:	f43f ae38 	beq.w	800ceba <_printf_float+0xc2>
 800d24a:	f108 0801 	add.w	r8, r8, #1
 800d24e:	68e3      	ldr	r3, [r4, #12]
 800d250:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d252:	1a5b      	subs	r3, r3, r1
 800d254:	4543      	cmp	r3, r8
 800d256:	dcf0      	bgt.n	800d23a <_printf_float+0x442>
 800d258:	e6fa      	b.n	800d050 <_printf_float+0x258>
 800d25a:	f04f 0800 	mov.w	r8, #0
 800d25e:	f104 0919 	add.w	r9, r4, #25
 800d262:	e7f4      	b.n	800d24e <_printf_float+0x456>

0800d264 <_printf_common>:
 800d264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d268:	4616      	mov	r6, r2
 800d26a:	4699      	mov	r9, r3
 800d26c:	688a      	ldr	r2, [r1, #8]
 800d26e:	690b      	ldr	r3, [r1, #16]
 800d270:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d274:	4293      	cmp	r3, r2
 800d276:	bfb8      	it	lt
 800d278:	4613      	movlt	r3, r2
 800d27a:	6033      	str	r3, [r6, #0]
 800d27c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d280:	4607      	mov	r7, r0
 800d282:	460c      	mov	r4, r1
 800d284:	b10a      	cbz	r2, 800d28a <_printf_common+0x26>
 800d286:	3301      	adds	r3, #1
 800d288:	6033      	str	r3, [r6, #0]
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	0699      	lsls	r1, r3, #26
 800d28e:	bf42      	ittt	mi
 800d290:	6833      	ldrmi	r3, [r6, #0]
 800d292:	3302      	addmi	r3, #2
 800d294:	6033      	strmi	r3, [r6, #0]
 800d296:	6825      	ldr	r5, [r4, #0]
 800d298:	f015 0506 	ands.w	r5, r5, #6
 800d29c:	d106      	bne.n	800d2ac <_printf_common+0x48>
 800d29e:	f104 0a19 	add.w	sl, r4, #25
 800d2a2:	68e3      	ldr	r3, [r4, #12]
 800d2a4:	6832      	ldr	r2, [r6, #0]
 800d2a6:	1a9b      	subs	r3, r3, r2
 800d2a8:	42ab      	cmp	r3, r5
 800d2aa:	dc26      	bgt.n	800d2fa <_printf_common+0x96>
 800d2ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2b0:	1e13      	subs	r3, r2, #0
 800d2b2:	6822      	ldr	r2, [r4, #0]
 800d2b4:	bf18      	it	ne
 800d2b6:	2301      	movne	r3, #1
 800d2b8:	0692      	lsls	r2, r2, #26
 800d2ba:	d42b      	bmi.n	800d314 <_printf_common+0xb0>
 800d2bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2c0:	4649      	mov	r1, r9
 800d2c2:	4638      	mov	r0, r7
 800d2c4:	47c0      	blx	r8
 800d2c6:	3001      	adds	r0, #1
 800d2c8:	d01e      	beq.n	800d308 <_printf_common+0xa4>
 800d2ca:	6823      	ldr	r3, [r4, #0]
 800d2cc:	68e5      	ldr	r5, [r4, #12]
 800d2ce:	6832      	ldr	r2, [r6, #0]
 800d2d0:	f003 0306 	and.w	r3, r3, #6
 800d2d4:	2b04      	cmp	r3, #4
 800d2d6:	bf08      	it	eq
 800d2d8:	1aad      	subeq	r5, r5, r2
 800d2da:	68a3      	ldr	r3, [r4, #8]
 800d2dc:	6922      	ldr	r2, [r4, #16]
 800d2de:	bf0c      	ite	eq
 800d2e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2e4:	2500      	movne	r5, #0
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	bfc4      	itt	gt
 800d2ea:	1a9b      	subgt	r3, r3, r2
 800d2ec:	18ed      	addgt	r5, r5, r3
 800d2ee:	2600      	movs	r6, #0
 800d2f0:	341a      	adds	r4, #26
 800d2f2:	42b5      	cmp	r5, r6
 800d2f4:	d11a      	bne.n	800d32c <_printf_common+0xc8>
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	e008      	b.n	800d30c <_printf_common+0xa8>
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	4652      	mov	r2, sl
 800d2fe:	4649      	mov	r1, r9
 800d300:	4638      	mov	r0, r7
 800d302:	47c0      	blx	r8
 800d304:	3001      	adds	r0, #1
 800d306:	d103      	bne.n	800d310 <_printf_common+0xac>
 800d308:	f04f 30ff 	mov.w	r0, #4294967295
 800d30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d310:	3501      	adds	r5, #1
 800d312:	e7c6      	b.n	800d2a2 <_printf_common+0x3e>
 800d314:	18e1      	adds	r1, r4, r3
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	2030      	movs	r0, #48	; 0x30
 800d31a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d31e:	4422      	add	r2, r4
 800d320:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d324:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d328:	3302      	adds	r3, #2
 800d32a:	e7c7      	b.n	800d2bc <_printf_common+0x58>
 800d32c:	2301      	movs	r3, #1
 800d32e:	4622      	mov	r2, r4
 800d330:	4649      	mov	r1, r9
 800d332:	4638      	mov	r0, r7
 800d334:	47c0      	blx	r8
 800d336:	3001      	adds	r0, #1
 800d338:	d0e6      	beq.n	800d308 <_printf_common+0xa4>
 800d33a:	3601      	adds	r6, #1
 800d33c:	e7d9      	b.n	800d2f2 <_printf_common+0x8e>
	...

0800d340 <_printf_i>:
 800d340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d344:	460c      	mov	r4, r1
 800d346:	4691      	mov	r9, r2
 800d348:	7e27      	ldrb	r7, [r4, #24]
 800d34a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d34c:	2f78      	cmp	r7, #120	; 0x78
 800d34e:	4680      	mov	r8, r0
 800d350:	469a      	mov	sl, r3
 800d352:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d356:	d807      	bhi.n	800d368 <_printf_i+0x28>
 800d358:	2f62      	cmp	r7, #98	; 0x62
 800d35a:	d80a      	bhi.n	800d372 <_printf_i+0x32>
 800d35c:	2f00      	cmp	r7, #0
 800d35e:	f000 80d8 	beq.w	800d512 <_printf_i+0x1d2>
 800d362:	2f58      	cmp	r7, #88	; 0x58
 800d364:	f000 80a3 	beq.w	800d4ae <_printf_i+0x16e>
 800d368:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d36c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d370:	e03a      	b.n	800d3e8 <_printf_i+0xa8>
 800d372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d376:	2b15      	cmp	r3, #21
 800d378:	d8f6      	bhi.n	800d368 <_printf_i+0x28>
 800d37a:	a001      	add	r0, pc, #4	; (adr r0, 800d380 <_printf_i+0x40>)
 800d37c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d380:	0800d3d9 	.word	0x0800d3d9
 800d384:	0800d3ed 	.word	0x0800d3ed
 800d388:	0800d369 	.word	0x0800d369
 800d38c:	0800d369 	.word	0x0800d369
 800d390:	0800d369 	.word	0x0800d369
 800d394:	0800d369 	.word	0x0800d369
 800d398:	0800d3ed 	.word	0x0800d3ed
 800d39c:	0800d369 	.word	0x0800d369
 800d3a0:	0800d369 	.word	0x0800d369
 800d3a4:	0800d369 	.word	0x0800d369
 800d3a8:	0800d369 	.word	0x0800d369
 800d3ac:	0800d4f9 	.word	0x0800d4f9
 800d3b0:	0800d41d 	.word	0x0800d41d
 800d3b4:	0800d4db 	.word	0x0800d4db
 800d3b8:	0800d369 	.word	0x0800d369
 800d3bc:	0800d369 	.word	0x0800d369
 800d3c0:	0800d51b 	.word	0x0800d51b
 800d3c4:	0800d369 	.word	0x0800d369
 800d3c8:	0800d41d 	.word	0x0800d41d
 800d3cc:	0800d369 	.word	0x0800d369
 800d3d0:	0800d369 	.word	0x0800d369
 800d3d4:	0800d4e3 	.word	0x0800d4e3
 800d3d8:	680b      	ldr	r3, [r1, #0]
 800d3da:	1d1a      	adds	r2, r3, #4
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	600a      	str	r2, [r1, #0]
 800d3e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d3e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e0a3      	b.n	800d534 <_printf_i+0x1f4>
 800d3ec:	6825      	ldr	r5, [r4, #0]
 800d3ee:	6808      	ldr	r0, [r1, #0]
 800d3f0:	062e      	lsls	r6, r5, #24
 800d3f2:	f100 0304 	add.w	r3, r0, #4
 800d3f6:	d50a      	bpl.n	800d40e <_printf_i+0xce>
 800d3f8:	6805      	ldr	r5, [r0, #0]
 800d3fa:	600b      	str	r3, [r1, #0]
 800d3fc:	2d00      	cmp	r5, #0
 800d3fe:	da03      	bge.n	800d408 <_printf_i+0xc8>
 800d400:	232d      	movs	r3, #45	; 0x2d
 800d402:	426d      	negs	r5, r5
 800d404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d408:	485e      	ldr	r0, [pc, #376]	; (800d584 <_printf_i+0x244>)
 800d40a:	230a      	movs	r3, #10
 800d40c:	e019      	b.n	800d442 <_printf_i+0x102>
 800d40e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d412:	6805      	ldr	r5, [r0, #0]
 800d414:	600b      	str	r3, [r1, #0]
 800d416:	bf18      	it	ne
 800d418:	b22d      	sxthne	r5, r5
 800d41a:	e7ef      	b.n	800d3fc <_printf_i+0xbc>
 800d41c:	680b      	ldr	r3, [r1, #0]
 800d41e:	6825      	ldr	r5, [r4, #0]
 800d420:	1d18      	adds	r0, r3, #4
 800d422:	6008      	str	r0, [r1, #0]
 800d424:	0628      	lsls	r0, r5, #24
 800d426:	d501      	bpl.n	800d42c <_printf_i+0xec>
 800d428:	681d      	ldr	r5, [r3, #0]
 800d42a:	e002      	b.n	800d432 <_printf_i+0xf2>
 800d42c:	0669      	lsls	r1, r5, #25
 800d42e:	d5fb      	bpl.n	800d428 <_printf_i+0xe8>
 800d430:	881d      	ldrh	r5, [r3, #0]
 800d432:	4854      	ldr	r0, [pc, #336]	; (800d584 <_printf_i+0x244>)
 800d434:	2f6f      	cmp	r7, #111	; 0x6f
 800d436:	bf0c      	ite	eq
 800d438:	2308      	moveq	r3, #8
 800d43a:	230a      	movne	r3, #10
 800d43c:	2100      	movs	r1, #0
 800d43e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d442:	6866      	ldr	r6, [r4, #4]
 800d444:	60a6      	str	r6, [r4, #8]
 800d446:	2e00      	cmp	r6, #0
 800d448:	bfa2      	ittt	ge
 800d44a:	6821      	ldrge	r1, [r4, #0]
 800d44c:	f021 0104 	bicge.w	r1, r1, #4
 800d450:	6021      	strge	r1, [r4, #0]
 800d452:	b90d      	cbnz	r5, 800d458 <_printf_i+0x118>
 800d454:	2e00      	cmp	r6, #0
 800d456:	d04d      	beq.n	800d4f4 <_printf_i+0x1b4>
 800d458:	4616      	mov	r6, r2
 800d45a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d45e:	fb03 5711 	mls	r7, r3, r1, r5
 800d462:	5dc7      	ldrb	r7, [r0, r7]
 800d464:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d468:	462f      	mov	r7, r5
 800d46a:	42bb      	cmp	r3, r7
 800d46c:	460d      	mov	r5, r1
 800d46e:	d9f4      	bls.n	800d45a <_printf_i+0x11a>
 800d470:	2b08      	cmp	r3, #8
 800d472:	d10b      	bne.n	800d48c <_printf_i+0x14c>
 800d474:	6823      	ldr	r3, [r4, #0]
 800d476:	07df      	lsls	r7, r3, #31
 800d478:	d508      	bpl.n	800d48c <_printf_i+0x14c>
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	6861      	ldr	r1, [r4, #4]
 800d47e:	4299      	cmp	r1, r3
 800d480:	bfde      	ittt	le
 800d482:	2330      	movle	r3, #48	; 0x30
 800d484:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d488:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d48c:	1b92      	subs	r2, r2, r6
 800d48e:	6122      	str	r2, [r4, #16]
 800d490:	f8cd a000 	str.w	sl, [sp]
 800d494:	464b      	mov	r3, r9
 800d496:	aa03      	add	r2, sp, #12
 800d498:	4621      	mov	r1, r4
 800d49a:	4640      	mov	r0, r8
 800d49c:	f7ff fee2 	bl	800d264 <_printf_common>
 800d4a0:	3001      	adds	r0, #1
 800d4a2:	d14c      	bne.n	800d53e <_printf_i+0x1fe>
 800d4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a8:	b004      	add	sp, #16
 800d4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4ae:	4835      	ldr	r0, [pc, #212]	; (800d584 <_printf_i+0x244>)
 800d4b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	680e      	ldr	r6, [r1, #0]
 800d4b8:	061f      	lsls	r7, r3, #24
 800d4ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800d4be:	600e      	str	r6, [r1, #0]
 800d4c0:	d514      	bpl.n	800d4ec <_printf_i+0x1ac>
 800d4c2:	07d9      	lsls	r1, r3, #31
 800d4c4:	bf44      	itt	mi
 800d4c6:	f043 0320 	orrmi.w	r3, r3, #32
 800d4ca:	6023      	strmi	r3, [r4, #0]
 800d4cc:	b91d      	cbnz	r5, 800d4d6 <_printf_i+0x196>
 800d4ce:	6823      	ldr	r3, [r4, #0]
 800d4d0:	f023 0320 	bic.w	r3, r3, #32
 800d4d4:	6023      	str	r3, [r4, #0]
 800d4d6:	2310      	movs	r3, #16
 800d4d8:	e7b0      	b.n	800d43c <_printf_i+0xfc>
 800d4da:	6823      	ldr	r3, [r4, #0]
 800d4dc:	f043 0320 	orr.w	r3, r3, #32
 800d4e0:	6023      	str	r3, [r4, #0]
 800d4e2:	2378      	movs	r3, #120	; 0x78
 800d4e4:	4828      	ldr	r0, [pc, #160]	; (800d588 <_printf_i+0x248>)
 800d4e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4ea:	e7e3      	b.n	800d4b4 <_printf_i+0x174>
 800d4ec:	065e      	lsls	r6, r3, #25
 800d4ee:	bf48      	it	mi
 800d4f0:	b2ad      	uxthmi	r5, r5
 800d4f2:	e7e6      	b.n	800d4c2 <_printf_i+0x182>
 800d4f4:	4616      	mov	r6, r2
 800d4f6:	e7bb      	b.n	800d470 <_printf_i+0x130>
 800d4f8:	680b      	ldr	r3, [r1, #0]
 800d4fa:	6826      	ldr	r6, [r4, #0]
 800d4fc:	6960      	ldr	r0, [r4, #20]
 800d4fe:	1d1d      	adds	r5, r3, #4
 800d500:	600d      	str	r5, [r1, #0]
 800d502:	0635      	lsls	r5, r6, #24
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	d501      	bpl.n	800d50c <_printf_i+0x1cc>
 800d508:	6018      	str	r0, [r3, #0]
 800d50a:	e002      	b.n	800d512 <_printf_i+0x1d2>
 800d50c:	0671      	lsls	r1, r6, #25
 800d50e:	d5fb      	bpl.n	800d508 <_printf_i+0x1c8>
 800d510:	8018      	strh	r0, [r3, #0]
 800d512:	2300      	movs	r3, #0
 800d514:	6123      	str	r3, [r4, #16]
 800d516:	4616      	mov	r6, r2
 800d518:	e7ba      	b.n	800d490 <_printf_i+0x150>
 800d51a:	680b      	ldr	r3, [r1, #0]
 800d51c:	1d1a      	adds	r2, r3, #4
 800d51e:	600a      	str	r2, [r1, #0]
 800d520:	681e      	ldr	r6, [r3, #0]
 800d522:	6862      	ldr	r2, [r4, #4]
 800d524:	2100      	movs	r1, #0
 800d526:	4630      	mov	r0, r6
 800d528:	f7f2 fe6a 	bl	8000200 <memchr>
 800d52c:	b108      	cbz	r0, 800d532 <_printf_i+0x1f2>
 800d52e:	1b80      	subs	r0, r0, r6
 800d530:	6060      	str	r0, [r4, #4]
 800d532:	6863      	ldr	r3, [r4, #4]
 800d534:	6123      	str	r3, [r4, #16]
 800d536:	2300      	movs	r3, #0
 800d538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d53c:	e7a8      	b.n	800d490 <_printf_i+0x150>
 800d53e:	6923      	ldr	r3, [r4, #16]
 800d540:	4632      	mov	r2, r6
 800d542:	4649      	mov	r1, r9
 800d544:	4640      	mov	r0, r8
 800d546:	47d0      	blx	sl
 800d548:	3001      	adds	r0, #1
 800d54a:	d0ab      	beq.n	800d4a4 <_printf_i+0x164>
 800d54c:	6823      	ldr	r3, [r4, #0]
 800d54e:	079b      	lsls	r3, r3, #30
 800d550:	d413      	bmi.n	800d57a <_printf_i+0x23a>
 800d552:	68e0      	ldr	r0, [r4, #12]
 800d554:	9b03      	ldr	r3, [sp, #12]
 800d556:	4298      	cmp	r0, r3
 800d558:	bfb8      	it	lt
 800d55a:	4618      	movlt	r0, r3
 800d55c:	e7a4      	b.n	800d4a8 <_printf_i+0x168>
 800d55e:	2301      	movs	r3, #1
 800d560:	4632      	mov	r2, r6
 800d562:	4649      	mov	r1, r9
 800d564:	4640      	mov	r0, r8
 800d566:	47d0      	blx	sl
 800d568:	3001      	adds	r0, #1
 800d56a:	d09b      	beq.n	800d4a4 <_printf_i+0x164>
 800d56c:	3501      	adds	r5, #1
 800d56e:	68e3      	ldr	r3, [r4, #12]
 800d570:	9903      	ldr	r1, [sp, #12]
 800d572:	1a5b      	subs	r3, r3, r1
 800d574:	42ab      	cmp	r3, r5
 800d576:	dcf2      	bgt.n	800d55e <_printf_i+0x21e>
 800d578:	e7eb      	b.n	800d552 <_printf_i+0x212>
 800d57a:	2500      	movs	r5, #0
 800d57c:	f104 0619 	add.w	r6, r4, #25
 800d580:	e7f5      	b.n	800d56e <_printf_i+0x22e>
 800d582:	bf00      	nop
 800d584:	0801275e 	.word	0x0801275e
 800d588:	0801276f 	.word	0x0801276f

0800d58c <_scanf_float>:
 800d58c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d590:	b087      	sub	sp, #28
 800d592:	4617      	mov	r7, r2
 800d594:	9303      	str	r3, [sp, #12]
 800d596:	688b      	ldr	r3, [r1, #8]
 800d598:	1e5a      	subs	r2, r3, #1
 800d59a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d59e:	bf83      	ittte	hi
 800d5a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d5a4:	195b      	addhi	r3, r3, r5
 800d5a6:	9302      	strhi	r3, [sp, #8]
 800d5a8:	2300      	movls	r3, #0
 800d5aa:	bf86      	itte	hi
 800d5ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d5b0:	608b      	strhi	r3, [r1, #8]
 800d5b2:	9302      	strls	r3, [sp, #8]
 800d5b4:	680b      	ldr	r3, [r1, #0]
 800d5b6:	468b      	mov	fp, r1
 800d5b8:	2500      	movs	r5, #0
 800d5ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d5be:	f84b 3b1c 	str.w	r3, [fp], #28
 800d5c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d5c6:	4680      	mov	r8, r0
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	465e      	mov	r6, fp
 800d5cc:	46aa      	mov	sl, r5
 800d5ce:	46a9      	mov	r9, r5
 800d5d0:	9501      	str	r5, [sp, #4]
 800d5d2:	68a2      	ldr	r2, [r4, #8]
 800d5d4:	b152      	cbz	r2, 800d5ec <_scanf_float+0x60>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	2b4e      	cmp	r3, #78	; 0x4e
 800d5dc:	d864      	bhi.n	800d6a8 <_scanf_float+0x11c>
 800d5de:	2b40      	cmp	r3, #64	; 0x40
 800d5e0:	d83c      	bhi.n	800d65c <_scanf_float+0xd0>
 800d5e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d5e6:	b2c8      	uxtb	r0, r1
 800d5e8:	280e      	cmp	r0, #14
 800d5ea:	d93a      	bls.n	800d662 <_scanf_float+0xd6>
 800d5ec:	f1b9 0f00 	cmp.w	r9, #0
 800d5f0:	d003      	beq.n	800d5fa <_scanf_float+0x6e>
 800d5f2:	6823      	ldr	r3, [r4, #0]
 800d5f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5f8:	6023      	str	r3, [r4, #0]
 800d5fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5fe:	f1ba 0f01 	cmp.w	sl, #1
 800d602:	f200 8113 	bhi.w	800d82c <_scanf_float+0x2a0>
 800d606:	455e      	cmp	r6, fp
 800d608:	f200 8105 	bhi.w	800d816 <_scanf_float+0x28a>
 800d60c:	2501      	movs	r5, #1
 800d60e:	4628      	mov	r0, r5
 800d610:	b007      	add	sp, #28
 800d612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d616:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d61a:	2a0d      	cmp	r2, #13
 800d61c:	d8e6      	bhi.n	800d5ec <_scanf_float+0x60>
 800d61e:	a101      	add	r1, pc, #4	; (adr r1, 800d624 <_scanf_float+0x98>)
 800d620:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d624:	0800d763 	.word	0x0800d763
 800d628:	0800d5ed 	.word	0x0800d5ed
 800d62c:	0800d5ed 	.word	0x0800d5ed
 800d630:	0800d5ed 	.word	0x0800d5ed
 800d634:	0800d7c3 	.word	0x0800d7c3
 800d638:	0800d79b 	.word	0x0800d79b
 800d63c:	0800d5ed 	.word	0x0800d5ed
 800d640:	0800d5ed 	.word	0x0800d5ed
 800d644:	0800d771 	.word	0x0800d771
 800d648:	0800d5ed 	.word	0x0800d5ed
 800d64c:	0800d5ed 	.word	0x0800d5ed
 800d650:	0800d5ed 	.word	0x0800d5ed
 800d654:	0800d5ed 	.word	0x0800d5ed
 800d658:	0800d729 	.word	0x0800d729
 800d65c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d660:	e7db      	b.n	800d61a <_scanf_float+0x8e>
 800d662:	290e      	cmp	r1, #14
 800d664:	d8c2      	bhi.n	800d5ec <_scanf_float+0x60>
 800d666:	a001      	add	r0, pc, #4	; (adr r0, 800d66c <_scanf_float+0xe0>)
 800d668:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d66c:	0800d71b 	.word	0x0800d71b
 800d670:	0800d5ed 	.word	0x0800d5ed
 800d674:	0800d71b 	.word	0x0800d71b
 800d678:	0800d7af 	.word	0x0800d7af
 800d67c:	0800d5ed 	.word	0x0800d5ed
 800d680:	0800d6c9 	.word	0x0800d6c9
 800d684:	0800d705 	.word	0x0800d705
 800d688:	0800d705 	.word	0x0800d705
 800d68c:	0800d705 	.word	0x0800d705
 800d690:	0800d705 	.word	0x0800d705
 800d694:	0800d705 	.word	0x0800d705
 800d698:	0800d705 	.word	0x0800d705
 800d69c:	0800d705 	.word	0x0800d705
 800d6a0:	0800d705 	.word	0x0800d705
 800d6a4:	0800d705 	.word	0x0800d705
 800d6a8:	2b6e      	cmp	r3, #110	; 0x6e
 800d6aa:	d809      	bhi.n	800d6c0 <_scanf_float+0x134>
 800d6ac:	2b60      	cmp	r3, #96	; 0x60
 800d6ae:	d8b2      	bhi.n	800d616 <_scanf_float+0x8a>
 800d6b0:	2b54      	cmp	r3, #84	; 0x54
 800d6b2:	d077      	beq.n	800d7a4 <_scanf_float+0x218>
 800d6b4:	2b59      	cmp	r3, #89	; 0x59
 800d6b6:	d199      	bne.n	800d5ec <_scanf_float+0x60>
 800d6b8:	2d07      	cmp	r5, #7
 800d6ba:	d197      	bne.n	800d5ec <_scanf_float+0x60>
 800d6bc:	2508      	movs	r5, #8
 800d6be:	e029      	b.n	800d714 <_scanf_float+0x188>
 800d6c0:	2b74      	cmp	r3, #116	; 0x74
 800d6c2:	d06f      	beq.n	800d7a4 <_scanf_float+0x218>
 800d6c4:	2b79      	cmp	r3, #121	; 0x79
 800d6c6:	e7f6      	b.n	800d6b6 <_scanf_float+0x12a>
 800d6c8:	6821      	ldr	r1, [r4, #0]
 800d6ca:	05c8      	lsls	r0, r1, #23
 800d6cc:	d51a      	bpl.n	800d704 <_scanf_float+0x178>
 800d6ce:	9b02      	ldr	r3, [sp, #8]
 800d6d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d6d4:	6021      	str	r1, [r4, #0]
 800d6d6:	f109 0901 	add.w	r9, r9, #1
 800d6da:	b11b      	cbz	r3, 800d6e4 <_scanf_float+0x158>
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	3201      	adds	r2, #1
 800d6e0:	9302      	str	r3, [sp, #8]
 800d6e2:	60a2      	str	r2, [r4, #8]
 800d6e4:	68a3      	ldr	r3, [r4, #8]
 800d6e6:	3b01      	subs	r3, #1
 800d6e8:	60a3      	str	r3, [r4, #8]
 800d6ea:	6923      	ldr	r3, [r4, #16]
 800d6ec:	3301      	adds	r3, #1
 800d6ee:	6123      	str	r3, [r4, #16]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	607b      	str	r3, [r7, #4]
 800d6f8:	f340 8084 	ble.w	800d804 <_scanf_float+0x278>
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	3301      	adds	r3, #1
 800d700:	603b      	str	r3, [r7, #0]
 800d702:	e766      	b.n	800d5d2 <_scanf_float+0x46>
 800d704:	eb1a 0f05 	cmn.w	sl, r5
 800d708:	f47f af70 	bne.w	800d5ec <_scanf_float+0x60>
 800d70c:	6822      	ldr	r2, [r4, #0]
 800d70e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d712:	6022      	str	r2, [r4, #0]
 800d714:	f806 3b01 	strb.w	r3, [r6], #1
 800d718:	e7e4      	b.n	800d6e4 <_scanf_float+0x158>
 800d71a:	6822      	ldr	r2, [r4, #0]
 800d71c:	0610      	lsls	r0, r2, #24
 800d71e:	f57f af65 	bpl.w	800d5ec <_scanf_float+0x60>
 800d722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d726:	e7f4      	b.n	800d712 <_scanf_float+0x186>
 800d728:	f1ba 0f00 	cmp.w	sl, #0
 800d72c:	d10e      	bne.n	800d74c <_scanf_float+0x1c0>
 800d72e:	f1b9 0f00 	cmp.w	r9, #0
 800d732:	d10e      	bne.n	800d752 <_scanf_float+0x1c6>
 800d734:	6822      	ldr	r2, [r4, #0]
 800d736:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d73a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d73e:	d108      	bne.n	800d752 <_scanf_float+0x1c6>
 800d740:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d744:	6022      	str	r2, [r4, #0]
 800d746:	f04f 0a01 	mov.w	sl, #1
 800d74a:	e7e3      	b.n	800d714 <_scanf_float+0x188>
 800d74c:	f1ba 0f02 	cmp.w	sl, #2
 800d750:	d055      	beq.n	800d7fe <_scanf_float+0x272>
 800d752:	2d01      	cmp	r5, #1
 800d754:	d002      	beq.n	800d75c <_scanf_float+0x1d0>
 800d756:	2d04      	cmp	r5, #4
 800d758:	f47f af48 	bne.w	800d5ec <_scanf_float+0x60>
 800d75c:	3501      	adds	r5, #1
 800d75e:	b2ed      	uxtb	r5, r5
 800d760:	e7d8      	b.n	800d714 <_scanf_float+0x188>
 800d762:	f1ba 0f01 	cmp.w	sl, #1
 800d766:	f47f af41 	bne.w	800d5ec <_scanf_float+0x60>
 800d76a:	f04f 0a02 	mov.w	sl, #2
 800d76e:	e7d1      	b.n	800d714 <_scanf_float+0x188>
 800d770:	b97d      	cbnz	r5, 800d792 <_scanf_float+0x206>
 800d772:	f1b9 0f00 	cmp.w	r9, #0
 800d776:	f47f af3c 	bne.w	800d5f2 <_scanf_float+0x66>
 800d77a:	6822      	ldr	r2, [r4, #0]
 800d77c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d780:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d784:	f47f af39 	bne.w	800d5fa <_scanf_float+0x6e>
 800d788:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d78c:	6022      	str	r2, [r4, #0]
 800d78e:	2501      	movs	r5, #1
 800d790:	e7c0      	b.n	800d714 <_scanf_float+0x188>
 800d792:	2d03      	cmp	r5, #3
 800d794:	d0e2      	beq.n	800d75c <_scanf_float+0x1d0>
 800d796:	2d05      	cmp	r5, #5
 800d798:	e7de      	b.n	800d758 <_scanf_float+0x1cc>
 800d79a:	2d02      	cmp	r5, #2
 800d79c:	f47f af26 	bne.w	800d5ec <_scanf_float+0x60>
 800d7a0:	2503      	movs	r5, #3
 800d7a2:	e7b7      	b.n	800d714 <_scanf_float+0x188>
 800d7a4:	2d06      	cmp	r5, #6
 800d7a6:	f47f af21 	bne.w	800d5ec <_scanf_float+0x60>
 800d7aa:	2507      	movs	r5, #7
 800d7ac:	e7b2      	b.n	800d714 <_scanf_float+0x188>
 800d7ae:	6822      	ldr	r2, [r4, #0]
 800d7b0:	0591      	lsls	r1, r2, #22
 800d7b2:	f57f af1b 	bpl.w	800d5ec <_scanf_float+0x60>
 800d7b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d7ba:	6022      	str	r2, [r4, #0]
 800d7bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800d7c0:	e7a8      	b.n	800d714 <_scanf_float+0x188>
 800d7c2:	6822      	ldr	r2, [r4, #0]
 800d7c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d7c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d7cc:	d006      	beq.n	800d7dc <_scanf_float+0x250>
 800d7ce:	0550      	lsls	r0, r2, #21
 800d7d0:	f57f af0c 	bpl.w	800d5ec <_scanf_float+0x60>
 800d7d4:	f1b9 0f00 	cmp.w	r9, #0
 800d7d8:	f43f af0f 	beq.w	800d5fa <_scanf_float+0x6e>
 800d7dc:	0591      	lsls	r1, r2, #22
 800d7de:	bf58      	it	pl
 800d7e0:	9901      	ldrpl	r1, [sp, #4]
 800d7e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d7e6:	bf58      	it	pl
 800d7e8:	eba9 0101 	subpl.w	r1, r9, r1
 800d7ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d7f0:	bf58      	it	pl
 800d7f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d7f6:	6022      	str	r2, [r4, #0]
 800d7f8:	f04f 0900 	mov.w	r9, #0
 800d7fc:	e78a      	b.n	800d714 <_scanf_float+0x188>
 800d7fe:	f04f 0a03 	mov.w	sl, #3
 800d802:	e787      	b.n	800d714 <_scanf_float+0x188>
 800d804:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d808:	4639      	mov	r1, r7
 800d80a:	4640      	mov	r0, r8
 800d80c:	4798      	blx	r3
 800d80e:	2800      	cmp	r0, #0
 800d810:	f43f aedf 	beq.w	800d5d2 <_scanf_float+0x46>
 800d814:	e6ea      	b.n	800d5ec <_scanf_float+0x60>
 800d816:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d81a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d81e:	463a      	mov	r2, r7
 800d820:	4640      	mov	r0, r8
 800d822:	4798      	blx	r3
 800d824:	6923      	ldr	r3, [r4, #16]
 800d826:	3b01      	subs	r3, #1
 800d828:	6123      	str	r3, [r4, #16]
 800d82a:	e6ec      	b.n	800d606 <_scanf_float+0x7a>
 800d82c:	1e6b      	subs	r3, r5, #1
 800d82e:	2b06      	cmp	r3, #6
 800d830:	d825      	bhi.n	800d87e <_scanf_float+0x2f2>
 800d832:	2d02      	cmp	r5, #2
 800d834:	d836      	bhi.n	800d8a4 <_scanf_float+0x318>
 800d836:	455e      	cmp	r6, fp
 800d838:	f67f aee8 	bls.w	800d60c <_scanf_float+0x80>
 800d83c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d840:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d844:	463a      	mov	r2, r7
 800d846:	4640      	mov	r0, r8
 800d848:	4798      	blx	r3
 800d84a:	6923      	ldr	r3, [r4, #16]
 800d84c:	3b01      	subs	r3, #1
 800d84e:	6123      	str	r3, [r4, #16]
 800d850:	e7f1      	b.n	800d836 <_scanf_float+0x2aa>
 800d852:	9802      	ldr	r0, [sp, #8]
 800d854:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d858:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d85c:	9002      	str	r0, [sp, #8]
 800d85e:	463a      	mov	r2, r7
 800d860:	4640      	mov	r0, r8
 800d862:	4798      	blx	r3
 800d864:	6923      	ldr	r3, [r4, #16]
 800d866:	3b01      	subs	r3, #1
 800d868:	6123      	str	r3, [r4, #16]
 800d86a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d86e:	fa5f fa8a 	uxtb.w	sl, sl
 800d872:	f1ba 0f02 	cmp.w	sl, #2
 800d876:	d1ec      	bne.n	800d852 <_scanf_float+0x2c6>
 800d878:	3d03      	subs	r5, #3
 800d87a:	b2ed      	uxtb	r5, r5
 800d87c:	1b76      	subs	r6, r6, r5
 800d87e:	6823      	ldr	r3, [r4, #0]
 800d880:	05da      	lsls	r2, r3, #23
 800d882:	d52f      	bpl.n	800d8e4 <_scanf_float+0x358>
 800d884:	055b      	lsls	r3, r3, #21
 800d886:	d510      	bpl.n	800d8aa <_scanf_float+0x31e>
 800d888:	455e      	cmp	r6, fp
 800d88a:	f67f aebf 	bls.w	800d60c <_scanf_float+0x80>
 800d88e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d892:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d896:	463a      	mov	r2, r7
 800d898:	4640      	mov	r0, r8
 800d89a:	4798      	blx	r3
 800d89c:	6923      	ldr	r3, [r4, #16]
 800d89e:	3b01      	subs	r3, #1
 800d8a0:	6123      	str	r3, [r4, #16]
 800d8a2:	e7f1      	b.n	800d888 <_scanf_float+0x2fc>
 800d8a4:	46aa      	mov	sl, r5
 800d8a6:	9602      	str	r6, [sp, #8]
 800d8a8:	e7df      	b.n	800d86a <_scanf_float+0x2de>
 800d8aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d8ae:	6923      	ldr	r3, [r4, #16]
 800d8b0:	2965      	cmp	r1, #101	; 0x65
 800d8b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800d8b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800d8ba:	6123      	str	r3, [r4, #16]
 800d8bc:	d00c      	beq.n	800d8d8 <_scanf_float+0x34c>
 800d8be:	2945      	cmp	r1, #69	; 0x45
 800d8c0:	d00a      	beq.n	800d8d8 <_scanf_float+0x34c>
 800d8c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d8c6:	463a      	mov	r2, r7
 800d8c8:	4640      	mov	r0, r8
 800d8ca:	4798      	blx	r3
 800d8cc:	6923      	ldr	r3, [r4, #16]
 800d8ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	1eb5      	subs	r5, r6, #2
 800d8d6:	6123      	str	r3, [r4, #16]
 800d8d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d8dc:	463a      	mov	r2, r7
 800d8de:	4640      	mov	r0, r8
 800d8e0:	4798      	blx	r3
 800d8e2:	462e      	mov	r6, r5
 800d8e4:	6825      	ldr	r5, [r4, #0]
 800d8e6:	f015 0510 	ands.w	r5, r5, #16
 800d8ea:	d158      	bne.n	800d99e <_scanf_float+0x412>
 800d8ec:	7035      	strb	r5, [r6, #0]
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d8f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8f8:	d11c      	bne.n	800d934 <_scanf_float+0x3a8>
 800d8fa:	9b01      	ldr	r3, [sp, #4]
 800d8fc:	454b      	cmp	r3, r9
 800d8fe:	eba3 0209 	sub.w	r2, r3, r9
 800d902:	d124      	bne.n	800d94e <_scanf_float+0x3c2>
 800d904:	2200      	movs	r2, #0
 800d906:	4659      	mov	r1, fp
 800d908:	4640      	mov	r0, r8
 800d90a:	f000 ff0b 	bl	800e724 <_strtod_r>
 800d90e:	9b03      	ldr	r3, [sp, #12]
 800d910:	6821      	ldr	r1, [r4, #0]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f011 0f02 	tst.w	r1, #2
 800d918:	ec57 6b10 	vmov	r6, r7, d0
 800d91c:	f103 0204 	add.w	r2, r3, #4
 800d920:	d020      	beq.n	800d964 <_scanf_float+0x3d8>
 800d922:	9903      	ldr	r1, [sp, #12]
 800d924:	600a      	str	r2, [r1, #0]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	e9c3 6700 	strd	r6, r7, [r3]
 800d92c:	68e3      	ldr	r3, [r4, #12]
 800d92e:	3301      	adds	r3, #1
 800d930:	60e3      	str	r3, [r4, #12]
 800d932:	e66c      	b.n	800d60e <_scanf_float+0x82>
 800d934:	9b04      	ldr	r3, [sp, #16]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d0e4      	beq.n	800d904 <_scanf_float+0x378>
 800d93a:	9905      	ldr	r1, [sp, #20]
 800d93c:	230a      	movs	r3, #10
 800d93e:	462a      	mov	r2, r5
 800d940:	3101      	adds	r1, #1
 800d942:	4640      	mov	r0, r8
 800d944:	f000 ff78 	bl	800e838 <_strtol_r>
 800d948:	9b04      	ldr	r3, [sp, #16]
 800d94a:	9e05      	ldr	r6, [sp, #20]
 800d94c:	1ac2      	subs	r2, r0, r3
 800d94e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d952:	429e      	cmp	r6, r3
 800d954:	bf28      	it	cs
 800d956:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d95a:	4912      	ldr	r1, [pc, #72]	; (800d9a4 <_scanf_float+0x418>)
 800d95c:	4630      	mov	r0, r6
 800d95e:	f000 f83b 	bl	800d9d8 <siprintf>
 800d962:	e7cf      	b.n	800d904 <_scanf_float+0x378>
 800d964:	f011 0f04 	tst.w	r1, #4
 800d968:	9903      	ldr	r1, [sp, #12]
 800d96a:	600a      	str	r2, [r1, #0]
 800d96c:	d1db      	bne.n	800d926 <_scanf_float+0x39a>
 800d96e:	f8d3 8000 	ldr.w	r8, [r3]
 800d972:	ee10 2a10 	vmov	r2, s0
 800d976:	ee10 0a10 	vmov	r0, s0
 800d97a:	463b      	mov	r3, r7
 800d97c:	4639      	mov	r1, r7
 800d97e:	f7f3 f8e5 	bl	8000b4c <__aeabi_dcmpun>
 800d982:	b128      	cbz	r0, 800d990 <_scanf_float+0x404>
 800d984:	4808      	ldr	r0, [pc, #32]	; (800d9a8 <_scanf_float+0x41c>)
 800d986:	f000 f821 	bl	800d9cc <nanf>
 800d98a:	ed88 0a00 	vstr	s0, [r8]
 800d98e:	e7cd      	b.n	800d92c <_scanf_float+0x3a0>
 800d990:	4630      	mov	r0, r6
 800d992:	4639      	mov	r1, r7
 800d994:	f7f3 f938 	bl	8000c08 <__aeabi_d2f>
 800d998:	f8c8 0000 	str.w	r0, [r8]
 800d99c:	e7c6      	b.n	800d92c <_scanf_float+0x3a0>
 800d99e:	2500      	movs	r5, #0
 800d9a0:	e635      	b.n	800d60e <_scanf_float+0x82>
 800d9a2:	bf00      	nop
 800d9a4:	08012780 	.word	0x08012780
 800d9a8:	08012af8 	.word	0x08012af8

0800d9ac <_sbrk_r>:
 800d9ac:	b538      	push	{r3, r4, r5, lr}
 800d9ae:	4d06      	ldr	r5, [pc, #24]	; (800d9c8 <_sbrk_r+0x1c>)
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	4608      	mov	r0, r1
 800d9b6:	602b      	str	r3, [r5, #0]
 800d9b8:	f7f6 f922 	bl	8003c00 <_sbrk>
 800d9bc:	1c43      	adds	r3, r0, #1
 800d9be:	d102      	bne.n	800d9c6 <_sbrk_r+0x1a>
 800d9c0:	682b      	ldr	r3, [r5, #0]
 800d9c2:	b103      	cbz	r3, 800d9c6 <_sbrk_r+0x1a>
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	bd38      	pop	{r3, r4, r5, pc}
 800d9c8:	2000174c 	.word	0x2000174c

0800d9cc <nanf>:
 800d9cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d9d4 <nanf+0x8>
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	7fc00000 	.word	0x7fc00000

0800d9d8 <siprintf>:
 800d9d8:	b40e      	push	{r1, r2, r3}
 800d9da:	b500      	push	{lr}
 800d9dc:	b09c      	sub	sp, #112	; 0x70
 800d9de:	ab1d      	add	r3, sp, #116	; 0x74
 800d9e0:	9002      	str	r0, [sp, #8]
 800d9e2:	9006      	str	r0, [sp, #24]
 800d9e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d9e8:	4809      	ldr	r0, [pc, #36]	; (800da10 <siprintf+0x38>)
 800d9ea:	9107      	str	r1, [sp, #28]
 800d9ec:	9104      	str	r1, [sp, #16]
 800d9ee:	4909      	ldr	r1, [pc, #36]	; (800da14 <siprintf+0x3c>)
 800d9f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9f4:	9105      	str	r1, [sp, #20]
 800d9f6:	6800      	ldr	r0, [r0, #0]
 800d9f8:	9301      	str	r3, [sp, #4]
 800d9fa:	a902      	add	r1, sp, #8
 800d9fc:	f003 f9a4 	bl	8010d48 <_svfiprintf_r>
 800da00:	9b02      	ldr	r3, [sp, #8]
 800da02:	2200      	movs	r2, #0
 800da04:	701a      	strb	r2, [r3, #0]
 800da06:	b01c      	add	sp, #112	; 0x70
 800da08:	f85d eb04 	ldr.w	lr, [sp], #4
 800da0c:	b003      	add	sp, #12
 800da0e:	4770      	bx	lr
 800da10:	20000024 	.word	0x20000024
 800da14:	ffff0208 	.word	0xffff0208

0800da18 <__sread>:
 800da18:	b510      	push	{r4, lr}
 800da1a:	460c      	mov	r4, r1
 800da1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da20:	f003 fbec 	bl	80111fc <_read_r>
 800da24:	2800      	cmp	r0, #0
 800da26:	bfab      	itete	ge
 800da28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800da2a:	89a3      	ldrhlt	r3, [r4, #12]
 800da2c:	181b      	addge	r3, r3, r0
 800da2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800da32:	bfac      	ite	ge
 800da34:	6563      	strge	r3, [r4, #84]	; 0x54
 800da36:	81a3      	strhlt	r3, [r4, #12]
 800da38:	bd10      	pop	{r4, pc}

0800da3a <__swrite>:
 800da3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da3e:	461f      	mov	r7, r3
 800da40:	898b      	ldrh	r3, [r1, #12]
 800da42:	05db      	lsls	r3, r3, #23
 800da44:	4605      	mov	r5, r0
 800da46:	460c      	mov	r4, r1
 800da48:	4616      	mov	r6, r2
 800da4a:	d505      	bpl.n	800da58 <__swrite+0x1e>
 800da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da50:	2302      	movs	r3, #2
 800da52:	2200      	movs	r2, #0
 800da54:	f002 fbbe 	bl	80101d4 <_lseek_r>
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	4632      	mov	r2, r6
 800da66:	463b      	mov	r3, r7
 800da68:	4628      	mov	r0, r5
 800da6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da6e:	f000 bf7b 	b.w	800e968 <_write_r>

0800da72 <__sseek>:
 800da72:	b510      	push	{r4, lr}
 800da74:	460c      	mov	r4, r1
 800da76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da7a:	f002 fbab 	bl	80101d4 <_lseek_r>
 800da7e:	1c43      	adds	r3, r0, #1
 800da80:	89a3      	ldrh	r3, [r4, #12]
 800da82:	bf15      	itete	ne
 800da84:	6560      	strne	r0, [r4, #84]	; 0x54
 800da86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da8e:	81a3      	strheq	r3, [r4, #12]
 800da90:	bf18      	it	ne
 800da92:	81a3      	strhne	r3, [r4, #12]
 800da94:	bd10      	pop	{r4, pc}

0800da96 <__sclose>:
 800da96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da9a:	f000 bfe5 	b.w	800ea68 <_close_r>

0800da9e <strcpy>:
 800da9e:	4603      	mov	r3, r0
 800daa0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800daa4:	f803 2b01 	strb.w	r2, [r3], #1
 800daa8:	2a00      	cmp	r2, #0
 800daaa:	d1f9      	bne.n	800daa0 <strcpy+0x2>
 800daac:	4770      	bx	lr

0800daae <strncmp>:
 800daae:	b510      	push	{r4, lr}
 800dab0:	b16a      	cbz	r2, 800dace <strncmp+0x20>
 800dab2:	3901      	subs	r1, #1
 800dab4:	1884      	adds	r4, r0, r2
 800dab6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800daba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d103      	bne.n	800daca <strncmp+0x1c>
 800dac2:	42a0      	cmp	r0, r4
 800dac4:	d001      	beq.n	800daca <strncmp+0x1c>
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1f5      	bne.n	800dab6 <strncmp+0x8>
 800daca:	1a98      	subs	r0, r3, r2
 800dacc:	bd10      	pop	{r4, pc}
 800dace:	4610      	mov	r0, r2
 800dad0:	e7fc      	b.n	800dacc <strncmp+0x1e>

0800dad2 <sulp>:
 800dad2:	b570      	push	{r4, r5, r6, lr}
 800dad4:	4604      	mov	r4, r0
 800dad6:	460d      	mov	r5, r1
 800dad8:	ec45 4b10 	vmov	d0, r4, r5
 800dadc:	4616      	mov	r6, r2
 800dade:	f002 ff79 	bl	80109d4 <__ulp>
 800dae2:	ec51 0b10 	vmov	r0, r1, d0
 800dae6:	b17e      	cbz	r6, 800db08 <sulp+0x36>
 800dae8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800daec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	dd09      	ble.n	800db08 <sulp+0x36>
 800daf4:	051b      	lsls	r3, r3, #20
 800daf6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dafa:	2400      	movs	r4, #0
 800dafc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800db00:	4622      	mov	r2, r4
 800db02:	462b      	mov	r3, r5
 800db04:	f7f2 fd88 	bl	8000618 <__aeabi_dmul>
 800db08:	bd70      	pop	{r4, r5, r6, pc}
 800db0a:	0000      	movs	r0, r0
 800db0c:	0000      	movs	r0, r0
	...

0800db10 <_strtod_l>:
 800db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db14:	b0a3      	sub	sp, #140	; 0x8c
 800db16:	461f      	mov	r7, r3
 800db18:	2300      	movs	r3, #0
 800db1a:	931e      	str	r3, [sp, #120]	; 0x78
 800db1c:	4ba4      	ldr	r3, [pc, #656]	; (800ddb0 <_strtod_l+0x2a0>)
 800db1e:	9219      	str	r2, [sp, #100]	; 0x64
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	9307      	str	r3, [sp, #28]
 800db24:	4604      	mov	r4, r0
 800db26:	4618      	mov	r0, r3
 800db28:	4688      	mov	r8, r1
 800db2a:	f7f2 fb61 	bl	80001f0 <strlen>
 800db2e:	f04f 0a00 	mov.w	sl, #0
 800db32:	4605      	mov	r5, r0
 800db34:	f04f 0b00 	mov.w	fp, #0
 800db38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800db3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800db3e:	781a      	ldrb	r2, [r3, #0]
 800db40:	2a2b      	cmp	r2, #43	; 0x2b
 800db42:	d04c      	beq.n	800dbde <_strtod_l+0xce>
 800db44:	d839      	bhi.n	800dbba <_strtod_l+0xaa>
 800db46:	2a0d      	cmp	r2, #13
 800db48:	d832      	bhi.n	800dbb0 <_strtod_l+0xa0>
 800db4a:	2a08      	cmp	r2, #8
 800db4c:	d832      	bhi.n	800dbb4 <_strtod_l+0xa4>
 800db4e:	2a00      	cmp	r2, #0
 800db50:	d03c      	beq.n	800dbcc <_strtod_l+0xbc>
 800db52:	2300      	movs	r3, #0
 800db54:	930e      	str	r3, [sp, #56]	; 0x38
 800db56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800db58:	7833      	ldrb	r3, [r6, #0]
 800db5a:	2b30      	cmp	r3, #48	; 0x30
 800db5c:	f040 80b4 	bne.w	800dcc8 <_strtod_l+0x1b8>
 800db60:	7873      	ldrb	r3, [r6, #1]
 800db62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db66:	2b58      	cmp	r3, #88	; 0x58
 800db68:	d16c      	bne.n	800dc44 <_strtod_l+0x134>
 800db6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	ab1e      	add	r3, sp, #120	; 0x78
 800db70:	9702      	str	r7, [sp, #8]
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	4a8f      	ldr	r2, [pc, #572]	; (800ddb4 <_strtod_l+0x2a4>)
 800db76:	ab1f      	add	r3, sp, #124	; 0x7c
 800db78:	a91d      	add	r1, sp, #116	; 0x74
 800db7a:	4620      	mov	r0, r4
 800db7c:	f002 f81a 	bl	800fbb4 <__gethex>
 800db80:	f010 0707 	ands.w	r7, r0, #7
 800db84:	4605      	mov	r5, r0
 800db86:	d005      	beq.n	800db94 <_strtod_l+0x84>
 800db88:	2f06      	cmp	r7, #6
 800db8a:	d12a      	bne.n	800dbe2 <_strtod_l+0xd2>
 800db8c:	3601      	adds	r6, #1
 800db8e:	2300      	movs	r3, #0
 800db90:	961d      	str	r6, [sp, #116]	; 0x74
 800db92:	930e      	str	r3, [sp, #56]	; 0x38
 800db94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db96:	2b00      	cmp	r3, #0
 800db98:	f040 8596 	bne.w	800e6c8 <_strtod_l+0xbb8>
 800db9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db9e:	b1db      	cbz	r3, 800dbd8 <_strtod_l+0xc8>
 800dba0:	4652      	mov	r2, sl
 800dba2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dba6:	ec43 2b10 	vmov	d0, r2, r3
 800dbaa:	b023      	add	sp, #140	; 0x8c
 800dbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbb0:	2a20      	cmp	r2, #32
 800dbb2:	d1ce      	bne.n	800db52 <_strtod_l+0x42>
 800dbb4:	3301      	adds	r3, #1
 800dbb6:	931d      	str	r3, [sp, #116]	; 0x74
 800dbb8:	e7c0      	b.n	800db3c <_strtod_l+0x2c>
 800dbba:	2a2d      	cmp	r2, #45	; 0x2d
 800dbbc:	d1c9      	bne.n	800db52 <_strtod_l+0x42>
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	920e      	str	r2, [sp, #56]	; 0x38
 800dbc2:	1c5a      	adds	r2, r3, #1
 800dbc4:	921d      	str	r2, [sp, #116]	; 0x74
 800dbc6:	785b      	ldrb	r3, [r3, #1]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d1c4      	bne.n	800db56 <_strtod_l+0x46>
 800dbcc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dbce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f040 8576 	bne.w	800e6c4 <_strtod_l+0xbb4>
 800dbd8:	4652      	mov	r2, sl
 800dbda:	465b      	mov	r3, fp
 800dbdc:	e7e3      	b.n	800dba6 <_strtod_l+0x96>
 800dbde:	2200      	movs	r2, #0
 800dbe0:	e7ee      	b.n	800dbc0 <_strtod_l+0xb0>
 800dbe2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dbe4:	b13a      	cbz	r2, 800dbf6 <_strtod_l+0xe6>
 800dbe6:	2135      	movs	r1, #53	; 0x35
 800dbe8:	a820      	add	r0, sp, #128	; 0x80
 800dbea:	f002 fffe 	bl	8010bea <__copybits>
 800dbee:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f002 fbc3 	bl	801037c <_Bfree>
 800dbf6:	3f01      	subs	r7, #1
 800dbf8:	2f05      	cmp	r7, #5
 800dbfa:	d807      	bhi.n	800dc0c <_strtod_l+0xfc>
 800dbfc:	e8df f007 	tbb	[pc, r7]
 800dc00:	1d180b0e 	.word	0x1d180b0e
 800dc04:	030e      	.short	0x030e
 800dc06:	f04f 0b00 	mov.w	fp, #0
 800dc0a:	46da      	mov	sl, fp
 800dc0c:	0728      	lsls	r0, r5, #28
 800dc0e:	d5c1      	bpl.n	800db94 <_strtod_l+0x84>
 800dc10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dc14:	e7be      	b.n	800db94 <_strtod_l+0x84>
 800dc16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800dc1a:	e7f7      	b.n	800dc0c <_strtod_l+0xfc>
 800dc1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800dc20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dc22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dc26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dc2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dc2e:	e7ed      	b.n	800dc0c <_strtod_l+0xfc>
 800dc30:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ddb8 <_strtod_l+0x2a8>
 800dc34:	f04f 0a00 	mov.w	sl, #0
 800dc38:	e7e8      	b.n	800dc0c <_strtod_l+0xfc>
 800dc3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dc3e:	f04f 3aff 	mov.w	sl, #4294967295
 800dc42:	e7e3      	b.n	800dc0c <_strtod_l+0xfc>
 800dc44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc46:	1c5a      	adds	r2, r3, #1
 800dc48:	921d      	str	r2, [sp, #116]	; 0x74
 800dc4a:	785b      	ldrb	r3, [r3, #1]
 800dc4c:	2b30      	cmp	r3, #48	; 0x30
 800dc4e:	d0f9      	beq.n	800dc44 <_strtod_l+0x134>
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d09f      	beq.n	800db94 <_strtod_l+0x84>
 800dc54:	2301      	movs	r3, #1
 800dc56:	f04f 0900 	mov.w	r9, #0
 800dc5a:	9304      	str	r3, [sp, #16]
 800dc5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc5e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dc64:	464f      	mov	r7, r9
 800dc66:	220a      	movs	r2, #10
 800dc68:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dc6a:	7806      	ldrb	r6, [r0, #0]
 800dc6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dc70:	b2d9      	uxtb	r1, r3
 800dc72:	2909      	cmp	r1, #9
 800dc74:	d92a      	bls.n	800dccc <_strtod_l+0x1bc>
 800dc76:	9907      	ldr	r1, [sp, #28]
 800dc78:	462a      	mov	r2, r5
 800dc7a:	f7ff ff18 	bl	800daae <strncmp>
 800dc7e:	b398      	cbz	r0, 800dce8 <_strtod_l+0x1d8>
 800dc80:	2000      	movs	r0, #0
 800dc82:	4633      	mov	r3, r6
 800dc84:	463d      	mov	r5, r7
 800dc86:	9007      	str	r0, [sp, #28]
 800dc88:	4602      	mov	r2, r0
 800dc8a:	2b65      	cmp	r3, #101	; 0x65
 800dc8c:	d001      	beq.n	800dc92 <_strtod_l+0x182>
 800dc8e:	2b45      	cmp	r3, #69	; 0x45
 800dc90:	d118      	bne.n	800dcc4 <_strtod_l+0x1b4>
 800dc92:	b91d      	cbnz	r5, 800dc9c <_strtod_l+0x18c>
 800dc94:	9b04      	ldr	r3, [sp, #16]
 800dc96:	4303      	orrs	r3, r0
 800dc98:	d098      	beq.n	800dbcc <_strtod_l+0xbc>
 800dc9a:	2500      	movs	r5, #0
 800dc9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800dca0:	f108 0301 	add.w	r3, r8, #1
 800dca4:	931d      	str	r3, [sp, #116]	; 0x74
 800dca6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dcaa:	2b2b      	cmp	r3, #43	; 0x2b
 800dcac:	d075      	beq.n	800dd9a <_strtod_l+0x28a>
 800dcae:	2b2d      	cmp	r3, #45	; 0x2d
 800dcb0:	d07b      	beq.n	800ddaa <_strtod_l+0x29a>
 800dcb2:	f04f 0c00 	mov.w	ip, #0
 800dcb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dcba:	2909      	cmp	r1, #9
 800dcbc:	f240 8082 	bls.w	800ddc4 <_strtod_l+0x2b4>
 800dcc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dcc4:	2600      	movs	r6, #0
 800dcc6:	e09d      	b.n	800de04 <_strtod_l+0x2f4>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	e7c4      	b.n	800dc56 <_strtod_l+0x146>
 800dccc:	2f08      	cmp	r7, #8
 800dcce:	bfd8      	it	le
 800dcd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dcd2:	f100 0001 	add.w	r0, r0, #1
 800dcd6:	bfda      	itte	le
 800dcd8:	fb02 3301 	mlale	r3, r2, r1, r3
 800dcdc:	9309      	strle	r3, [sp, #36]	; 0x24
 800dcde:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dce2:	3701      	adds	r7, #1
 800dce4:	901d      	str	r0, [sp, #116]	; 0x74
 800dce6:	e7bf      	b.n	800dc68 <_strtod_l+0x158>
 800dce8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dcea:	195a      	adds	r2, r3, r5
 800dcec:	921d      	str	r2, [sp, #116]	; 0x74
 800dcee:	5d5b      	ldrb	r3, [r3, r5]
 800dcf0:	2f00      	cmp	r7, #0
 800dcf2:	d037      	beq.n	800dd64 <_strtod_l+0x254>
 800dcf4:	9007      	str	r0, [sp, #28]
 800dcf6:	463d      	mov	r5, r7
 800dcf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dcfc:	2a09      	cmp	r2, #9
 800dcfe:	d912      	bls.n	800dd26 <_strtod_l+0x216>
 800dd00:	2201      	movs	r2, #1
 800dd02:	e7c2      	b.n	800dc8a <_strtod_l+0x17a>
 800dd04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd06:	1c5a      	adds	r2, r3, #1
 800dd08:	921d      	str	r2, [sp, #116]	; 0x74
 800dd0a:	785b      	ldrb	r3, [r3, #1]
 800dd0c:	3001      	adds	r0, #1
 800dd0e:	2b30      	cmp	r3, #48	; 0x30
 800dd10:	d0f8      	beq.n	800dd04 <_strtod_l+0x1f4>
 800dd12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800dd16:	2a08      	cmp	r2, #8
 800dd18:	f200 84db 	bhi.w	800e6d2 <_strtod_l+0xbc2>
 800dd1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dd1e:	9007      	str	r0, [sp, #28]
 800dd20:	2000      	movs	r0, #0
 800dd22:	920a      	str	r2, [sp, #40]	; 0x28
 800dd24:	4605      	mov	r5, r0
 800dd26:	3b30      	subs	r3, #48	; 0x30
 800dd28:	f100 0201 	add.w	r2, r0, #1
 800dd2c:	d014      	beq.n	800dd58 <_strtod_l+0x248>
 800dd2e:	9907      	ldr	r1, [sp, #28]
 800dd30:	4411      	add	r1, r2
 800dd32:	9107      	str	r1, [sp, #28]
 800dd34:	462a      	mov	r2, r5
 800dd36:	eb00 0e05 	add.w	lr, r0, r5
 800dd3a:	210a      	movs	r1, #10
 800dd3c:	4572      	cmp	r2, lr
 800dd3e:	d113      	bne.n	800dd68 <_strtod_l+0x258>
 800dd40:	182a      	adds	r2, r5, r0
 800dd42:	2a08      	cmp	r2, #8
 800dd44:	f105 0501 	add.w	r5, r5, #1
 800dd48:	4405      	add	r5, r0
 800dd4a:	dc1c      	bgt.n	800dd86 <_strtod_l+0x276>
 800dd4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd4e:	220a      	movs	r2, #10
 800dd50:	fb02 3301 	mla	r3, r2, r1, r3
 800dd54:	9309      	str	r3, [sp, #36]	; 0x24
 800dd56:	2200      	movs	r2, #0
 800dd58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd5a:	1c59      	adds	r1, r3, #1
 800dd5c:	911d      	str	r1, [sp, #116]	; 0x74
 800dd5e:	785b      	ldrb	r3, [r3, #1]
 800dd60:	4610      	mov	r0, r2
 800dd62:	e7c9      	b.n	800dcf8 <_strtod_l+0x1e8>
 800dd64:	4638      	mov	r0, r7
 800dd66:	e7d2      	b.n	800dd0e <_strtod_l+0x1fe>
 800dd68:	2a08      	cmp	r2, #8
 800dd6a:	dc04      	bgt.n	800dd76 <_strtod_l+0x266>
 800dd6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dd6e:	434e      	muls	r6, r1
 800dd70:	9609      	str	r6, [sp, #36]	; 0x24
 800dd72:	3201      	adds	r2, #1
 800dd74:	e7e2      	b.n	800dd3c <_strtod_l+0x22c>
 800dd76:	f102 0c01 	add.w	ip, r2, #1
 800dd7a:	f1bc 0f10 	cmp.w	ip, #16
 800dd7e:	bfd8      	it	le
 800dd80:	fb01 f909 	mulle.w	r9, r1, r9
 800dd84:	e7f5      	b.n	800dd72 <_strtod_l+0x262>
 800dd86:	2d10      	cmp	r5, #16
 800dd88:	bfdc      	itt	le
 800dd8a:	220a      	movle	r2, #10
 800dd8c:	fb02 3909 	mlale	r9, r2, r9, r3
 800dd90:	e7e1      	b.n	800dd56 <_strtod_l+0x246>
 800dd92:	2300      	movs	r3, #0
 800dd94:	9307      	str	r3, [sp, #28]
 800dd96:	2201      	movs	r2, #1
 800dd98:	e77c      	b.n	800dc94 <_strtod_l+0x184>
 800dd9a:	f04f 0c00 	mov.w	ip, #0
 800dd9e:	f108 0302 	add.w	r3, r8, #2
 800dda2:	931d      	str	r3, [sp, #116]	; 0x74
 800dda4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dda8:	e785      	b.n	800dcb6 <_strtod_l+0x1a6>
 800ddaa:	f04f 0c01 	mov.w	ip, #1
 800ddae:	e7f6      	b.n	800dd9e <_strtod_l+0x28e>
 800ddb0:	08012938 	.word	0x08012938
 800ddb4:	08012788 	.word	0x08012788
 800ddb8:	7ff00000 	.word	0x7ff00000
 800ddbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddbe:	1c59      	adds	r1, r3, #1
 800ddc0:	911d      	str	r1, [sp, #116]	; 0x74
 800ddc2:	785b      	ldrb	r3, [r3, #1]
 800ddc4:	2b30      	cmp	r3, #48	; 0x30
 800ddc6:	d0f9      	beq.n	800ddbc <_strtod_l+0x2ac>
 800ddc8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ddcc:	2908      	cmp	r1, #8
 800ddce:	f63f af79 	bhi.w	800dcc4 <_strtod_l+0x1b4>
 800ddd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ddd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddd8:	9308      	str	r3, [sp, #32]
 800ddda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dddc:	1c59      	adds	r1, r3, #1
 800ddde:	911d      	str	r1, [sp, #116]	; 0x74
 800dde0:	785b      	ldrb	r3, [r3, #1]
 800dde2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800dde6:	2e09      	cmp	r6, #9
 800dde8:	d937      	bls.n	800de5a <_strtod_l+0x34a>
 800ddea:	9e08      	ldr	r6, [sp, #32]
 800ddec:	1b89      	subs	r1, r1, r6
 800ddee:	2908      	cmp	r1, #8
 800ddf0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ddf4:	dc02      	bgt.n	800ddfc <_strtod_l+0x2ec>
 800ddf6:	4576      	cmp	r6, lr
 800ddf8:	bfa8      	it	ge
 800ddfa:	4676      	movge	r6, lr
 800ddfc:	f1bc 0f00 	cmp.w	ip, #0
 800de00:	d000      	beq.n	800de04 <_strtod_l+0x2f4>
 800de02:	4276      	negs	r6, r6
 800de04:	2d00      	cmp	r5, #0
 800de06:	d14f      	bne.n	800dea8 <_strtod_l+0x398>
 800de08:	9904      	ldr	r1, [sp, #16]
 800de0a:	4301      	orrs	r1, r0
 800de0c:	f47f aec2 	bne.w	800db94 <_strtod_l+0x84>
 800de10:	2a00      	cmp	r2, #0
 800de12:	f47f aedb 	bne.w	800dbcc <_strtod_l+0xbc>
 800de16:	2b69      	cmp	r3, #105	; 0x69
 800de18:	d027      	beq.n	800de6a <_strtod_l+0x35a>
 800de1a:	dc24      	bgt.n	800de66 <_strtod_l+0x356>
 800de1c:	2b49      	cmp	r3, #73	; 0x49
 800de1e:	d024      	beq.n	800de6a <_strtod_l+0x35a>
 800de20:	2b4e      	cmp	r3, #78	; 0x4e
 800de22:	f47f aed3 	bne.w	800dbcc <_strtod_l+0xbc>
 800de26:	499e      	ldr	r1, [pc, #632]	; (800e0a0 <_strtod_l+0x590>)
 800de28:	a81d      	add	r0, sp, #116	; 0x74
 800de2a:	f002 f91b 	bl	8010064 <__match>
 800de2e:	2800      	cmp	r0, #0
 800de30:	f43f aecc 	beq.w	800dbcc <_strtod_l+0xbc>
 800de34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	2b28      	cmp	r3, #40	; 0x28
 800de3a:	d12d      	bne.n	800de98 <_strtod_l+0x388>
 800de3c:	4999      	ldr	r1, [pc, #612]	; (800e0a4 <_strtod_l+0x594>)
 800de3e:	aa20      	add	r2, sp, #128	; 0x80
 800de40:	a81d      	add	r0, sp, #116	; 0x74
 800de42:	f002 f923 	bl	801008c <__hexnan>
 800de46:	2805      	cmp	r0, #5
 800de48:	d126      	bne.n	800de98 <_strtod_l+0x388>
 800de4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800de50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800de54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800de58:	e69c      	b.n	800db94 <_strtod_l+0x84>
 800de5a:	210a      	movs	r1, #10
 800de5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800de60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800de64:	e7b9      	b.n	800ddda <_strtod_l+0x2ca>
 800de66:	2b6e      	cmp	r3, #110	; 0x6e
 800de68:	e7db      	b.n	800de22 <_strtod_l+0x312>
 800de6a:	498f      	ldr	r1, [pc, #572]	; (800e0a8 <_strtod_l+0x598>)
 800de6c:	a81d      	add	r0, sp, #116	; 0x74
 800de6e:	f002 f8f9 	bl	8010064 <__match>
 800de72:	2800      	cmp	r0, #0
 800de74:	f43f aeaa 	beq.w	800dbcc <_strtod_l+0xbc>
 800de78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de7a:	498c      	ldr	r1, [pc, #560]	; (800e0ac <_strtod_l+0x59c>)
 800de7c:	3b01      	subs	r3, #1
 800de7e:	a81d      	add	r0, sp, #116	; 0x74
 800de80:	931d      	str	r3, [sp, #116]	; 0x74
 800de82:	f002 f8ef 	bl	8010064 <__match>
 800de86:	b910      	cbnz	r0, 800de8e <_strtod_l+0x37e>
 800de88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de8a:	3301      	adds	r3, #1
 800de8c:	931d      	str	r3, [sp, #116]	; 0x74
 800de8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e0bc <_strtod_l+0x5ac>
 800de92:	f04f 0a00 	mov.w	sl, #0
 800de96:	e67d      	b.n	800db94 <_strtod_l+0x84>
 800de98:	4885      	ldr	r0, [pc, #532]	; (800e0b0 <_strtod_l+0x5a0>)
 800de9a:	f003 f9c1 	bl	8011220 <nan>
 800de9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dea2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dea6:	e675      	b.n	800db94 <_strtod_l+0x84>
 800dea8:	9b07      	ldr	r3, [sp, #28]
 800deaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deac:	1af3      	subs	r3, r6, r3
 800deae:	2f00      	cmp	r7, #0
 800deb0:	bf08      	it	eq
 800deb2:	462f      	moveq	r7, r5
 800deb4:	2d10      	cmp	r5, #16
 800deb6:	9308      	str	r3, [sp, #32]
 800deb8:	46a8      	mov	r8, r5
 800deba:	bfa8      	it	ge
 800debc:	f04f 0810 	movge.w	r8, #16
 800dec0:	f7f2 fb30 	bl	8000524 <__aeabi_ui2d>
 800dec4:	2d09      	cmp	r5, #9
 800dec6:	4682      	mov	sl, r0
 800dec8:	468b      	mov	fp, r1
 800deca:	dd13      	ble.n	800def4 <_strtod_l+0x3e4>
 800decc:	4b79      	ldr	r3, [pc, #484]	; (800e0b4 <_strtod_l+0x5a4>)
 800dece:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ded2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ded6:	f7f2 fb9f 	bl	8000618 <__aeabi_dmul>
 800deda:	4682      	mov	sl, r0
 800dedc:	4648      	mov	r0, r9
 800dede:	468b      	mov	fp, r1
 800dee0:	f7f2 fb20 	bl	8000524 <__aeabi_ui2d>
 800dee4:	4602      	mov	r2, r0
 800dee6:	460b      	mov	r3, r1
 800dee8:	4650      	mov	r0, sl
 800deea:	4659      	mov	r1, fp
 800deec:	f7f2 f9de 	bl	80002ac <__adddf3>
 800def0:	4682      	mov	sl, r0
 800def2:	468b      	mov	fp, r1
 800def4:	2d0f      	cmp	r5, #15
 800def6:	dc38      	bgt.n	800df6a <_strtod_l+0x45a>
 800def8:	9b08      	ldr	r3, [sp, #32]
 800defa:	2b00      	cmp	r3, #0
 800defc:	f43f ae4a 	beq.w	800db94 <_strtod_l+0x84>
 800df00:	dd24      	ble.n	800df4c <_strtod_l+0x43c>
 800df02:	2b16      	cmp	r3, #22
 800df04:	dc0b      	bgt.n	800df1e <_strtod_l+0x40e>
 800df06:	4d6b      	ldr	r5, [pc, #428]	; (800e0b4 <_strtod_l+0x5a4>)
 800df08:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800df0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800df10:	4652      	mov	r2, sl
 800df12:	465b      	mov	r3, fp
 800df14:	f7f2 fb80 	bl	8000618 <__aeabi_dmul>
 800df18:	4682      	mov	sl, r0
 800df1a:	468b      	mov	fp, r1
 800df1c:	e63a      	b.n	800db94 <_strtod_l+0x84>
 800df1e:	9a08      	ldr	r2, [sp, #32]
 800df20:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800df24:	4293      	cmp	r3, r2
 800df26:	db20      	blt.n	800df6a <_strtod_l+0x45a>
 800df28:	4c62      	ldr	r4, [pc, #392]	; (800e0b4 <_strtod_l+0x5a4>)
 800df2a:	f1c5 050f 	rsb	r5, r5, #15
 800df2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800df32:	4652      	mov	r2, sl
 800df34:	465b      	mov	r3, fp
 800df36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df3a:	f7f2 fb6d 	bl	8000618 <__aeabi_dmul>
 800df3e:	9b08      	ldr	r3, [sp, #32]
 800df40:	1b5d      	subs	r5, r3, r5
 800df42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800df46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800df4a:	e7e3      	b.n	800df14 <_strtod_l+0x404>
 800df4c:	9b08      	ldr	r3, [sp, #32]
 800df4e:	3316      	adds	r3, #22
 800df50:	db0b      	blt.n	800df6a <_strtod_l+0x45a>
 800df52:	9b07      	ldr	r3, [sp, #28]
 800df54:	4a57      	ldr	r2, [pc, #348]	; (800e0b4 <_strtod_l+0x5a4>)
 800df56:	1b9e      	subs	r6, r3, r6
 800df58:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800df5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df60:	4650      	mov	r0, sl
 800df62:	4659      	mov	r1, fp
 800df64:	f7f2 fc82 	bl	800086c <__aeabi_ddiv>
 800df68:	e7d6      	b.n	800df18 <_strtod_l+0x408>
 800df6a:	9b08      	ldr	r3, [sp, #32]
 800df6c:	eba5 0808 	sub.w	r8, r5, r8
 800df70:	4498      	add	r8, r3
 800df72:	f1b8 0f00 	cmp.w	r8, #0
 800df76:	dd71      	ble.n	800e05c <_strtod_l+0x54c>
 800df78:	f018 030f 	ands.w	r3, r8, #15
 800df7c:	d00a      	beq.n	800df94 <_strtod_l+0x484>
 800df7e:	494d      	ldr	r1, [pc, #308]	; (800e0b4 <_strtod_l+0x5a4>)
 800df80:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df84:	4652      	mov	r2, sl
 800df86:	465b      	mov	r3, fp
 800df88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df8c:	f7f2 fb44 	bl	8000618 <__aeabi_dmul>
 800df90:	4682      	mov	sl, r0
 800df92:	468b      	mov	fp, r1
 800df94:	f038 080f 	bics.w	r8, r8, #15
 800df98:	d04d      	beq.n	800e036 <_strtod_l+0x526>
 800df9a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800df9e:	dd22      	ble.n	800dfe6 <_strtod_l+0x4d6>
 800dfa0:	2500      	movs	r5, #0
 800dfa2:	462e      	mov	r6, r5
 800dfa4:	9509      	str	r5, [sp, #36]	; 0x24
 800dfa6:	9507      	str	r5, [sp, #28]
 800dfa8:	2322      	movs	r3, #34	; 0x22
 800dfaa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e0bc <_strtod_l+0x5ac>
 800dfae:	6023      	str	r3, [r4, #0]
 800dfb0:	f04f 0a00 	mov.w	sl, #0
 800dfb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f43f adec 	beq.w	800db94 <_strtod_l+0x84>
 800dfbc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f002 f9dc 	bl	801037c <_Bfree>
 800dfc4:	9907      	ldr	r1, [sp, #28]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f002 f9d8 	bl	801037c <_Bfree>
 800dfcc:	4631      	mov	r1, r6
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f002 f9d4 	bl	801037c <_Bfree>
 800dfd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f002 f9d0 	bl	801037c <_Bfree>
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f002 f9cc 	bl	801037c <_Bfree>
 800dfe4:	e5d6      	b.n	800db94 <_strtod_l+0x84>
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dfec:	4650      	mov	r0, sl
 800dfee:	4659      	mov	r1, fp
 800dff0:	4699      	mov	r9, r3
 800dff2:	f1b8 0f01 	cmp.w	r8, #1
 800dff6:	dc21      	bgt.n	800e03c <_strtod_l+0x52c>
 800dff8:	b10b      	cbz	r3, 800dffe <_strtod_l+0x4ee>
 800dffa:	4682      	mov	sl, r0
 800dffc:	468b      	mov	fp, r1
 800dffe:	4b2e      	ldr	r3, [pc, #184]	; (800e0b8 <_strtod_l+0x5a8>)
 800e000:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e004:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e008:	4652      	mov	r2, sl
 800e00a:	465b      	mov	r3, fp
 800e00c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e010:	f7f2 fb02 	bl	8000618 <__aeabi_dmul>
 800e014:	4b29      	ldr	r3, [pc, #164]	; (800e0bc <_strtod_l+0x5ac>)
 800e016:	460a      	mov	r2, r1
 800e018:	400b      	ands	r3, r1
 800e01a:	4929      	ldr	r1, [pc, #164]	; (800e0c0 <_strtod_l+0x5b0>)
 800e01c:	428b      	cmp	r3, r1
 800e01e:	4682      	mov	sl, r0
 800e020:	d8be      	bhi.n	800dfa0 <_strtod_l+0x490>
 800e022:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e026:	428b      	cmp	r3, r1
 800e028:	bf86      	itte	hi
 800e02a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e0c4 <_strtod_l+0x5b4>
 800e02e:	f04f 3aff 	movhi.w	sl, #4294967295
 800e032:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e036:	2300      	movs	r3, #0
 800e038:	9304      	str	r3, [sp, #16]
 800e03a:	e081      	b.n	800e140 <_strtod_l+0x630>
 800e03c:	f018 0f01 	tst.w	r8, #1
 800e040:	d007      	beq.n	800e052 <_strtod_l+0x542>
 800e042:	4b1d      	ldr	r3, [pc, #116]	; (800e0b8 <_strtod_l+0x5a8>)
 800e044:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04c:	f7f2 fae4 	bl	8000618 <__aeabi_dmul>
 800e050:	2301      	movs	r3, #1
 800e052:	f109 0901 	add.w	r9, r9, #1
 800e056:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e05a:	e7ca      	b.n	800dff2 <_strtod_l+0x4e2>
 800e05c:	d0eb      	beq.n	800e036 <_strtod_l+0x526>
 800e05e:	f1c8 0800 	rsb	r8, r8, #0
 800e062:	f018 020f 	ands.w	r2, r8, #15
 800e066:	d00a      	beq.n	800e07e <_strtod_l+0x56e>
 800e068:	4b12      	ldr	r3, [pc, #72]	; (800e0b4 <_strtod_l+0x5a4>)
 800e06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e06e:	4650      	mov	r0, sl
 800e070:	4659      	mov	r1, fp
 800e072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e076:	f7f2 fbf9 	bl	800086c <__aeabi_ddiv>
 800e07a:	4682      	mov	sl, r0
 800e07c:	468b      	mov	fp, r1
 800e07e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e082:	d0d8      	beq.n	800e036 <_strtod_l+0x526>
 800e084:	f1b8 0f1f 	cmp.w	r8, #31
 800e088:	dd1e      	ble.n	800e0c8 <_strtod_l+0x5b8>
 800e08a:	2500      	movs	r5, #0
 800e08c:	462e      	mov	r6, r5
 800e08e:	9509      	str	r5, [sp, #36]	; 0x24
 800e090:	9507      	str	r5, [sp, #28]
 800e092:	2322      	movs	r3, #34	; 0x22
 800e094:	f04f 0a00 	mov.w	sl, #0
 800e098:	f04f 0b00 	mov.w	fp, #0
 800e09c:	6023      	str	r3, [r4, #0]
 800e09e:	e789      	b.n	800dfb4 <_strtod_l+0x4a4>
 800e0a0:	08012759 	.word	0x08012759
 800e0a4:	0801279c 	.word	0x0801279c
 800e0a8:	08012751 	.word	0x08012751
 800e0ac:	080127db 	.word	0x080127db
 800e0b0:	08012af8 	.word	0x08012af8
 800e0b4:	080129d8 	.word	0x080129d8
 800e0b8:	080129b0 	.word	0x080129b0
 800e0bc:	7ff00000 	.word	0x7ff00000
 800e0c0:	7ca00000 	.word	0x7ca00000
 800e0c4:	7fefffff 	.word	0x7fefffff
 800e0c8:	f018 0310 	ands.w	r3, r8, #16
 800e0cc:	bf18      	it	ne
 800e0ce:	236a      	movne	r3, #106	; 0x6a
 800e0d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e488 <_strtod_l+0x978>
 800e0d4:	9304      	str	r3, [sp, #16]
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	4659      	mov	r1, fp
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f018 0f01 	tst.w	r8, #1
 800e0e0:	d004      	beq.n	800e0ec <_strtod_l+0x5dc>
 800e0e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e0e6:	f7f2 fa97 	bl	8000618 <__aeabi_dmul>
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e0f0:	f109 0908 	add.w	r9, r9, #8
 800e0f4:	d1f2      	bne.n	800e0dc <_strtod_l+0x5cc>
 800e0f6:	b10b      	cbz	r3, 800e0fc <_strtod_l+0x5ec>
 800e0f8:	4682      	mov	sl, r0
 800e0fa:	468b      	mov	fp, r1
 800e0fc:	9b04      	ldr	r3, [sp, #16]
 800e0fe:	b1bb      	cbz	r3, 800e130 <_strtod_l+0x620>
 800e100:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e104:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e108:	2b00      	cmp	r3, #0
 800e10a:	4659      	mov	r1, fp
 800e10c:	dd10      	ble.n	800e130 <_strtod_l+0x620>
 800e10e:	2b1f      	cmp	r3, #31
 800e110:	f340 8128 	ble.w	800e364 <_strtod_l+0x854>
 800e114:	2b34      	cmp	r3, #52	; 0x34
 800e116:	bfde      	ittt	le
 800e118:	3b20      	suble	r3, #32
 800e11a:	f04f 32ff 	movle.w	r2, #4294967295
 800e11e:	fa02 f303 	lslle.w	r3, r2, r3
 800e122:	f04f 0a00 	mov.w	sl, #0
 800e126:	bfcc      	ite	gt
 800e128:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e12c:	ea03 0b01 	andle.w	fp, r3, r1
 800e130:	2200      	movs	r2, #0
 800e132:	2300      	movs	r3, #0
 800e134:	4650      	mov	r0, sl
 800e136:	4659      	mov	r1, fp
 800e138:	f7f2 fcd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800e13c:	2800      	cmp	r0, #0
 800e13e:	d1a4      	bne.n	800e08a <_strtod_l+0x57a>
 800e140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e146:	462b      	mov	r3, r5
 800e148:	463a      	mov	r2, r7
 800e14a:	4620      	mov	r0, r4
 800e14c:	f002 f982 	bl	8010454 <__s2b>
 800e150:	9009      	str	r0, [sp, #36]	; 0x24
 800e152:	2800      	cmp	r0, #0
 800e154:	f43f af24 	beq.w	800dfa0 <_strtod_l+0x490>
 800e158:	9b07      	ldr	r3, [sp, #28]
 800e15a:	1b9e      	subs	r6, r3, r6
 800e15c:	9b08      	ldr	r3, [sp, #32]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	bfb4      	ite	lt
 800e162:	4633      	movlt	r3, r6
 800e164:	2300      	movge	r3, #0
 800e166:	9310      	str	r3, [sp, #64]	; 0x40
 800e168:	9b08      	ldr	r3, [sp, #32]
 800e16a:	2500      	movs	r5, #0
 800e16c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e170:	9318      	str	r3, [sp, #96]	; 0x60
 800e172:	462e      	mov	r6, r5
 800e174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e176:	4620      	mov	r0, r4
 800e178:	6859      	ldr	r1, [r3, #4]
 800e17a:	f002 f8bf 	bl	80102fc <_Balloc>
 800e17e:	9007      	str	r0, [sp, #28]
 800e180:	2800      	cmp	r0, #0
 800e182:	f43f af11 	beq.w	800dfa8 <_strtod_l+0x498>
 800e186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e188:	691a      	ldr	r2, [r3, #16]
 800e18a:	3202      	adds	r2, #2
 800e18c:	f103 010c 	add.w	r1, r3, #12
 800e190:	0092      	lsls	r2, r2, #2
 800e192:	300c      	adds	r0, #12
 800e194:	f7fe fcd0 	bl	800cb38 <memcpy>
 800e198:	ec4b ab10 	vmov	d0, sl, fp
 800e19c:	aa20      	add	r2, sp, #128	; 0x80
 800e19e:	a91f      	add	r1, sp, #124	; 0x7c
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e1a6:	f002 fc91 	bl	8010acc <__d2b>
 800e1aa:	901e      	str	r0, [sp, #120]	; 0x78
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	f43f aefb 	beq.w	800dfa8 <_strtod_l+0x498>
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f002 f9e7 	bl	8010588 <__i2b>
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	f43f aef3 	beq.w	800dfa8 <_strtod_l+0x498>
 800e1c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e1c4:	9904      	ldr	r1, [sp, #16]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	bfab      	itete	ge
 800e1ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e1cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e1ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e1d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e1d4:	bfac      	ite	ge
 800e1d6:	eb03 0902 	addge.w	r9, r3, r2
 800e1da:	1ad7      	sublt	r7, r2, r3
 800e1dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e1de:	eba3 0801 	sub.w	r8, r3, r1
 800e1e2:	4490      	add	r8, r2
 800e1e4:	4ba3      	ldr	r3, [pc, #652]	; (800e474 <_strtod_l+0x964>)
 800e1e6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e1ea:	4598      	cmp	r8, r3
 800e1ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e1f0:	f280 80cc 	bge.w	800e38c <_strtod_l+0x87c>
 800e1f4:	eba3 0308 	sub.w	r3, r3, r8
 800e1f8:	2b1f      	cmp	r3, #31
 800e1fa:	eba2 0203 	sub.w	r2, r2, r3
 800e1fe:	f04f 0101 	mov.w	r1, #1
 800e202:	f300 80b6 	bgt.w	800e372 <_strtod_l+0x862>
 800e206:	fa01 f303 	lsl.w	r3, r1, r3
 800e20a:	9311      	str	r3, [sp, #68]	; 0x44
 800e20c:	2300      	movs	r3, #0
 800e20e:	930c      	str	r3, [sp, #48]	; 0x30
 800e210:	eb09 0802 	add.w	r8, r9, r2
 800e214:	9b04      	ldr	r3, [sp, #16]
 800e216:	45c1      	cmp	r9, r8
 800e218:	4417      	add	r7, r2
 800e21a:	441f      	add	r7, r3
 800e21c:	464b      	mov	r3, r9
 800e21e:	bfa8      	it	ge
 800e220:	4643      	movge	r3, r8
 800e222:	42bb      	cmp	r3, r7
 800e224:	bfa8      	it	ge
 800e226:	463b      	movge	r3, r7
 800e228:	2b00      	cmp	r3, #0
 800e22a:	bfc2      	ittt	gt
 800e22c:	eba8 0803 	subgt.w	r8, r8, r3
 800e230:	1aff      	subgt	r7, r7, r3
 800e232:	eba9 0903 	subgt.w	r9, r9, r3
 800e236:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e238:	2b00      	cmp	r3, #0
 800e23a:	dd17      	ble.n	800e26c <_strtod_l+0x75c>
 800e23c:	4631      	mov	r1, r6
 800e23e:	461a      	mov	r2, r3
 800e240:	4620      	mov	r0, r4
 800e242:	f002 fa5d 	bl	8010700 <__pow5mult>
 800e246:	4606      	mov	r6, r0
 800e248:	2800      	cmp	r0, #0
 800e24a:	f43f aead 	beq.w	800dfa8 <_strtod_l+0x498>
 800e24e:	4601      	mov	r1, r0
 800e250:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e252:	4620      	mov	r0, r4
 800e254:	f002 f9ae 	bl	80105b4 <__multiply>
 800e258:	900f      	str	r0, [sp, #60]	; 0x3c
 800e25a:	2800      	cmp	r0, #0
 800e25c:	f43f aea4 	beq.w	800dfa8 <_strtod_l+0x498>
 800e260:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e262:	4620      	mov	r0, r4
 800e264:	f002 f88a 	bl	801037c <_Bfree>
 800e268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e26a:	931e      	str	r3, [sp, #120]	; 0x78
 800e26c:	f1b8 0f00 	cmp.w	r8, #0
 800e270:	f300 8091 	bgt.w	800e396 <_strtod_l+0x886>
 800e274:	9b08      	ldr	r3, [sp, #32]
 800e276:	2b00      	cmp	r3, #0
 800e278:	dd08      	ble.n	800e28c <_strtod_l+0x77c>
 800e27a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e27c:	9907      	ldr	r1, [sp, #28]
 800e27e:	4620      	mov	r0, r4
 800e280:	f002 fa3e 	bl	8010700 <__pow5mult>
 800e284:	9007      	str	r0, [sp, #28]
 800e286:	2800      	cmp	r0, #0
 800e288:	f43f ae8e 	beq.w	800dfa8 <_strtod_l+0x498>
 800e28c:	2f00      	cmp	r7, #0
 800e28e:	dd08      	ble.n	800e2a2 <_strtod_l+0x792>
 800e290:	9907      	ldr	r1, [sp, #28]
 800e292:	463a      	mov	r2, r7
 800e294:	4620      	mov	r0, r4
 800e296:	f002 fa8d 	bl	80107b4 <__lshift>
 800e29a:	9007      	str	r0, [sp, #28]
 800e29c:	2800      	cmp	r0, #0
 800e29e:	f43f ae83 	beq.w	800dfa8 <_strtod_l+0x498>
 800e2a2:	f1b9 0f00 	cmp.w	r9, #0
 800e2a6:	dd08      	ble.n	800e2ba <_strtod_l+0x7aa>
 800e2a8:	4631      	mov	r1, r6
 800e2aa:	464a      	mov	r2, r9
 800e2ac:	4620      	mov	r0, r4
 800e2ae:	f002 fa81 	bl	80107b4 <__lshift>
 800e2b2:	4606      	mov	r6, r0
 800e2b4:	2800      	cmp	r0, #0
 800e2b6:	f43f ae77 	beq.w	800dfa8 <_strtod_l+0x498>
 800e2ba:	9a07      	ldr	r2, [sp, #28]
 800e2bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f002 fb00 	bl	80108c4 <__mdiff>
 800e2c4:	4605      	mov	r5, r0
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	f43f ae6e 	beq.w	800dfa8 <_strtod_l+0x498>
 800e2cc:	68c3      	ldr	r3, [r0, #12]
 800e2ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	60c3      	str	r3, [r0, #12]
 800e2d4:	4631      	mov	r1, r6
 800e2d6:	f002 fad9 	bl	801088c <__mcmp>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	da65      	bge.n	800e3aa <_strtod_l+0x89a>
 800e2de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e2e0:	ea53 030a 	orrs.w	r3, r3, sl
 800e2e4:	f040 8087 	bne.w	800e3f6 <_strtod_l+0x8e6>
 800e2e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f040 8082 	bne.w	800e3f6 <_strtod_l+0x8e6>
 800e2f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e2f6:	0d1b      	lsrs	r3, r3, #20
 800e2f8:	051b      	lsls	r3, r3, #20
 800e2fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e2fe:	d97a      	bls.n	800e3f6 <_strtod_l+0x8e6>
 800e300:	696b      	ldr	r3, [r5, #20]
 800e302:	b913      	cbnz	r3, 800e30a <_strtod_l+0x7fa>
 800e304:	692b      	ldr	r3, [r5, #16]
 800e306:	2b01      	cmp	r3, #1
 800e308:	dd75      	ble.n	800e3f6 <_strtod_l+0x8e6>
 800e30a:	4629      	mov	r1, r5
 800e30c:	2201      	movs	r2, #1
 800e30e:	4620      	mov	r0, r4
 800e310:	f002 fa50 	bl	80107b4 <__lshift>
 800e314:	4631      	mov	r1, r6
 800e316:	4605      	mov	r5, r0
 800e318:	f002 fab8 	bl	801088c <__mcmp>
 800e31c:	2800      	cmp	r0, #0
 800e31e:	dd6a      	ble.n	800e3f6 <_strtod_l+0x8e6>
 800e320:	9904      	ldr	r1, [sp, #16]
 800e322:	4a55      	ldr	r2, [pc, #340]	; (800e478 <_strtod_l+0x968>)
 800e324:	465b      	mov	r3, fp
 800e326:	2900      	cmp	r1, #0
 800e328:	f000 8085 	beq.w	800e436 <_strtod_l+0x926>
 800e32c:	ea02 010b 	and.w	r1, r2, fp
 800e330:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e334:	dc7f      	bgt.n	800e436 <_strtod_l+0x926>
 800e336:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e33a:	f77f aeaa 	ble.w	800e092 <_strtod_l+0x582>
 800e33e:	4a4f      	ldr	r2, [pc, #316]	; (800e47c <_strtod_l+0x96c>)
 800e340:	2300      	movs	r3, #0
 800e342:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e346:	4650      	mov	r0, sl
 800e348:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e34c:	4659      	mov	r1, fp
 800e34e:	f7f2 f963 	bl	8000618 <__aeabi_dmul>
 800e352:	460b      	mov	r3, r1
 800e354:	4303      	orrs	r3, r0
 800e356:	bf08      	it	eq
 800e358:	2322      	moveq	r3, #34	; 0x22
 800e35a:	4682      	mov	sl, r0
 800e35c:	468b      	mov	fp, r1
 800e35e:	bf08      	it	eq
 800e360:	6023      	streq	r3, [r4, #0]
 800e362:	e62b      	b.n	800dfbc <_strtod_l+0x4ac>
 800e364:	f04f 32ff 	mov.w	r2, #4294967295
 800e368:	fa02 f303 	lsl.w	r3, r2, r3
 800e36c:	ea03 0a0a 	and.w	sl, r3, sl
 800e370:	e6de      	b.n	800e130 <_strtod_l+0x620>
 800e372:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e376:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e37a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e37e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e382:	fa01 f308 	lsl.w	r3, r1, r8
 800e386:	930c      	str	r3, [sp, #48]	; 0x30
 800e388:	9111      	str	r1, [sp, #68]	; 0x44
 800e38a:	e741      	b.n	800e210 <_strtod_l+0x700>
 800e38c:	2300      	movs	r3, #0
 800e38e:	930c      	str	r3, [sp, #48]	; 0x30
 800e390:	2301      	movs	r3, #1
 800e392:	9311      	str	r3, [sp, #68]	; 0x44
 800e394:	e73c      	b.n	800e210 <_strtod_l+0x700>
 800e396:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e398:	4642      	mov	r2, r8
 800e39a:	4620      	mov	r0, r4
 800e39c:	f002 fa0a 	bl	80107b4 <__lshift>
 800e3a0:	901e      	str	r0, [sp, #120]	; 0x78
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	f47f af66 	bne.w	800e274 <_strtod_l+0x764>
 800e3a8:	e5fe      	b.n	800dfa8 <_strtod_l+0x498>
 800e3aa:	465f      	mov	r7, fp
 800e3ac:	d16e      	bne.n	800e48c <_strtod_l+0x97c>
 800e3ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e3b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3b4:	b342      	cbz	r2, 800e408 <_strtod_l+0x8f8>
 800e3b6:	4a32      	ldr	r2, [pc, #200]	; (800e480 <_strtod_l+0x970>)
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	d128      	bne.n	800e40e <_strtod_l+0x8fe>
 800e3bc:	9b04      	ldr	r3, [sp, #16]
 800e3be:	4650      	mov	r0, sl
 800e3c0:	b1eb      	cbz	r3, 800e3fe <_strtod_l+0x8ee>
 800e3c2:	4a2d      	ldr	r2, [pc, #180]	; (800e478 <_strtod_l+0x968>)
 800e3c4:	403a      	ands	r2, r7
 800e3c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e3ca:	f04f 31ff 	mov.w	r1, #4294967295
 800e3ce:	d819      	bhi.n	800e404 <_strtod_l+0x8f4>
 800e3d0:	0d12      	lsrs	r2, r2, #20
 800e3d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e3d6:	fa01 f303 	lsl.w	r3, r1, r3
 800e3da:	4298      	cmp	r0, r3
 800e3dc:	d117      	bne.n	800e40e <_strtod_l+0x8fe>
 800e3de:	4b29      	ldr	r3, [pc, #164]	; (800e484 <_strtod_l+0x974>)
 800e3e0:	429f      	cmp	r7, r3
 800e3e2:	d102      	bne.n	800e3ea <_strtod_l+0x8da>
 800e3e4:	3001      	adds	r0, #1
 800e3e6:	f43f addf 	beq.w	800dfa8 <_strtod_l+0x498>
 800e3ea:	4b23      	ldr	r3, [pc, #140]	; (800e478 <_strtod_l+0x968>)
 800e3ec:	403b      	ands	r3, r7
 800e3ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e3f2:	f04f 0a00 	mov.w	sl, #0
 800e3f6:	9b04      	ldr	r3, [sp, #16]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d1a0      	bne.n	800e33e <_strtod_l+0x82e>
 800e3fc:	e5de      	b.n	800dfbc <_strtod_l+0x4ac>
 800e3fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e402:	e7ea      	b.n	800e3da <_strtod_l+0x8ca>
 800e404:	460b      	mov	r3, r1
 800e406:	e7e8      	b.n	800e3da <_strtod_l+0x8ca>
 800e408:	ea53 030a 	orrs.w	r3, r3, sl
 800e40c:	d088      	beq.n	800e320 <_strtod_l+0x810>
 800e40e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e410:	b1db      	cbz	r3, 800e44a <_strtod_l+0x93a>
 800e412:	423b      	tst	r3, r7
 800e414:	d0ef      	beq.n	800e3f6 <_strtod_l+0x8e6>
 800e416:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e418:	9a04      	ldr	r2, [sp, #16]
 800e41a:	4650      	mov	r0, sl
 800e41c:	4659      	mov	r1, fp
 800e41e:	b1c3      	cbz	r3, 800e452 <_strtod_l+0x942>
 800e420:	f7ff fb57 	bl	800dad2 <sulp>
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e42c:	f7f1 ff3e 	bl	80002ac <__adddf3>
 800e430:	4682      	mov	sl, r0
 800e432:	468b      	mov	fp, r1
 800e434:	e7df      	b.n	800e3f6 <_strtod_l+0x8e6>
 800e436:	4013      	ands	r3, r2
 800e438:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e43c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e440:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e444:	f04f 3aff 	mov.w	sl, #4294967295
 800e448:	e7d5      	b.n	800e3f6 <_strtod_l+0x8e6>
 800e44a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e44c:	ea13 0f0a 	tst.w	r3, sl
 800e450:	e7e0      	b.n	800e414 <_strtod_l+0x904>
 800e452:	f7ff fb3e 	bl	800dad2 <sulp>
 800e456:	4602      	mov	r2, r0
 800e458:	460b      	mov	r3, r1
 800e45a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e45e:	f7f1 ff23 	bl	80002a8 <__aeabi_dsub>
 800e462:	2200      	movs	r2, #0
 800e464:	2300      	movs	r3, #0
 800e466:	4682      	mov	sl, r0
 800e468:	468b      	mov	fp, r1
 800e46a:	f7f2 fb3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800e46e:	2800      	cmp	r0, #0
 800e470:	d0c1      	beq.n	800e3f6 <_strtod_l+0x8e6>
 800e472:	e60e      	b.n	800e092 <_strtod_l+0x582>
 800e474:	fffffc02 	.word	0xfffffc02
 800e478:	7ff00000 	.word	0x7ff00000
 800e47c:	39500000 	.word	0x39500000
 800e480:	000fffff 	.word	0x000fffff
 800e484:	7fefffff 	.word	0x7fefffff
 800e488:	080127b0 	.word	0x080127b0
 800e48c:	4631      	mov	r1, r6
 800e48e:	4628      	mov	r0, r5
 800e490:	f002 fb78 	bl	8010b84 <__ratio>
 800e494:	ec59 8b10 	vmov	r8, r9, d0
 800e498:	ee10 0a10 	vmov	r0, s0
 800e49c:	2200      	movs	r2, #0
 800e49e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e4a2:	4649      	mov	r1, r9
 800e4a4:	f7f2 fb34 	bl	8000b10 <__aeabi_dcmple>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d07c      	beq.n	800e5a6 <_strtod_l+0xa96>
 800e4ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d04c      	beq.n	800e54c <_strtod_l+0xa3c>
 800e4b2:	4b95      	ldr	r3, [pc, #596]	; (800e708 <_strtod_l+0xbf8>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e4ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e708 <_strtod_l+0xbf8>
 800e4be:	f04f 0800 	mov.w	r8, #0
 800e4c2:	4b92      	ldr	r3, [pc, #584]	; (800e70c <_strtod_l+0xbfc>)
 800e4c4:	403b      	ands	r3, r7
 800e4c6:	9311      	str	r3, [sp, #68]	; 0x44
 800e4c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4ca:	4b91      	ldr	r3, [pc, #580]	; (800e710 <_strtod_l+0xc00>)
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	f040 80b2 	bne.w	800e636 <_strtod_l+0xb26>
 800e4d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e4d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e4da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e4de:	ec4b ab10 	vmov	d0, sl, fp
 800e4e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e4e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e4ea:	f002 fa73 	bl	80109d4 <__ulp>
 800e4ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e4f2:	ec53 2b10 	vmov	r2, r3, d0
 800e4f6:	f7f2 f88f 	bl	8000618 <__aeabi_dmul>
 800e4fa:	4652      	mov	r2, sl
 800e4fc:	465b      	mov	r3, fp
 800e4fe:	f7f1 fed5 	bl	80002ac <__adddf3>
 800e502:	460b      	mov	r3, r1
 800e504:	4981      	ldr	r1, [pc, #516]	; (800e70c <_strtod_l+0xbfc>)
 800e506:	4a83      	ldr	r2, [pc, #524]	; (800e714 <_strtod_l+0xc04>)
 800e508:	4019      	ands	r1, r3
 800e50a:	4291      	cmp	r1, r2
 800e50c:	4682      	mov	sl, r0
 800e50e:	d95e      	bls.n	800e5ce <_strtod_l+0xabe>
 800e510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e512:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e516:	4293      	cmp	r3, r2
 800e518:	d103      	bne.n	800e522 <_strtod_l+0xa12>
 800e51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e51c:	3301      	adds	r3, #1
 800e51e:	f43f ad43 	beq.w	800dfa8 <_strtod_l+0x498>
 800e522:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e720 <_strtod_l+0xc10>
 800e526:	f04f 3aff 	mov.w	sl, #4294967295
 800e52a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e52c:	4620      	mov	r0, r4
 800e52e:	f001 ff25 	bl	801037c <_Bfree>
 800e532:	9907      	ldr	r1, [sp, #28]
 800e534:	4620      	mov	r0, r4
 800e536:	f001 ff21 	bl	801037c <_Bfree>
 800e53a:	4631      	mov	r1, r6
 800e53c:	4620      	mov	r0, r4
 800e53e:	f001 ff1d 	bl	801037c <_Bfree>
 800e542:	4629      	mov	r1, r5
 800e544:	4620      	mov	r0, r4
 800e546:	f001 ff19 	bl	801037c <_Bfree>
 800e54a:	e613      	b.n	800e174 <_strtod_l+0x664>
 800e54c:	f1ba 0f00 	cmp.w	sl, #0
 800e550:	d11b      	bne.n	800e58a <_strtod_l+0xa7a>
 800e552:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e556:	b9f3      	cbnz	r3, 800e596 <_strtod_l+0xa86>
 800e558:	4b6b      	ldr	r3, [pc, #428]	; (800e708 <_strtod_l+0xbf8>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	4640      	mov	r0, r8
 800e55e:	4649      	mov	r1, r9
 800e560:	f7f2 facc 	bl	8000afc <__aeabi_dcmplt>
 800e564:	b9d0      	cbnz	r0, 800e59c <_strtod_l+0xa8c>
 800e566:	4640      	mov	r0, r8
 800e568:	4649      	mov	r1, r9
 800e56a:	4b6b      	ldr	r3, [pc, #428]	; (800e718 <_strtod_l+0xc08>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	f7f2 f853 	bl	8000618 <__aeabi_dmul>
 800e572:	4680      	mov	r8, r0
 800e574:	4689      	mov	r9, r1
 800e576:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e57a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e57e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e580:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e584:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e588:	e79b      	b.n	800e4c2 <_strtod_l+0x9b2>
 800e58a:	f1ba 0f01 	cmp.w	sl, #1
 800e58e:	d102      	bne.n	800e596 <_strtod_l+0xa86>
 800e590:	2f00      	cmp	r7, #0
 800e592:	f43f ad7e 	beq.w	800e092 <_strtod_l+0x582>
 800e596:	4b61      	ldr	r3, [pc, #388]	; (800e71c <_strtod_l+0xc0c>)
 800e598:	2200      	movs	r2, #0
 800e59a:	e78c      	b.n	800e4b6 <_strtod_l+0x9a6>
 800e59c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e718 <_strtod_l+0xc08>
 800e5a0:	f04f 0800 	mov.w	r8, #0
 800e5a4:	e7e7      	b.n	800e576 <_strtod_l+0xa66>
 800e5a6:	4b5c      	ldr	r3, [pc, #368]	; (800e718 <_strtod_l+0xc08>)
 800e5a8:	4640      	mov	r0, r8
 800e5aa:	4649      	mov	r1, r9
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f7f2 f833 	bl	8000618 <__aeabi_dmul>
 800e5b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	4689      	mov	r9, r1
 800e5b8:	b933      	cbnz	r3, 800e5c8 <_strtod_l+0xab8>
 800e5ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5be:	9012      	str	r0, [sp, #72]	; 0x48
 800e5c0:	9313      	str	r3, [sp, #76]	; 0x4c
 800e5c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e5c6:	e7dd      	b.n	800e584 <_strtod_l+0xa74>
 800e5c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e5cc:	e7f9      	b.n	800e5c2 <_strtod_l+0xab2>
 800e5ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e5d2:	9b04      	ldr	r3, [sp, #16]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d1a8      	bne.n	800e52a <_strtod_l+0xa1a>
 800e5d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e5dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e5de:	0d1b      	lsrs	r3, r3, #20
 800e5e0:	051b      	lsls	r3, r3, #20
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d1a1      	bne.n	800e52a <_strtod_l+0xa1a>
 800e5e6:	4640      	mov	r0, r8
 800e5e8:	4649      	mov	r1, r9
 800e5ea:	f7f2 fb75 	bl	8000cd8 <__aeabi_d2lz>
 800e5ee:	f7f1 ffe5 	bl	80005bc <__aeabi_l2d>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	f7f1 fe55 	bl	80002a8 <__aeabi_dsub>
 800e5fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e600:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e604:	ea43 030a 	orr.w	r3, r3, sl
 800e608:	4313      	orrs	r3, r2
 800e60a:	4680      	mov	r8, r0
 800e60c:	4689      	mov	r9, r1
 800e60e:	d053      	beq.n	800e6b8 <_strtod_l+0xba8>
 800e610:	a335      	add	r3, pc, #212	; (adr r3, 800e6e8 <_strtod_l+0xbd8>)
 800e612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e616:	f7f2 fa71 	bl	8000afc <__aeabi_dcmplt>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	f47f acce 	bne.w	800dfbc <_strtod_l+0x4ac>
 800e620:	a333      	add	r3, pc, #204	; (adr r3, 800e6f0 <_strtod_l+0xbe0>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	4640      	mov	r0, r8
 800e628:	4649      	mov	r1, r9
 800e62a:	f7f2 fa85 	bl	8000b38 <__aeabi_dcmpgt>
 800e62e:	2800      	cmp	r0, #0
 800e630:	f43f af7b 	beq.w	800e52a <_strtod_l+0xa1a>
 800e634:	e4c2      	b.n	800dfbc <_strtod_l+0x4ac>
 800e636:	9b04      	ldr	r3, [sp, #16]
 800e638:	b333      	cbz	r3, 800e688 <_strtod_l+0xb78>
 800e63a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e63c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e640:	d822      	bhi.n	800e688 <_strtod_l+0xb78>
 800e642:	a32d      	add	r3, pc, #180	; (adr r3, 800e6f8 <_strtod_l+0xbe8>)
 800e644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e648:	4640      	mov	r0, r8
 800e64a:	4649      	mov	r1, r9
 800e64c:	f7f2 fa60 	bl	8000b10 <__aeabi_dcmple>
 800e650:	b1a0      	cbz	r0, 800e67c <_strtod_l+0xb6c>
 800e652:	4649      	mov	r1, r9
 800e654:	4640      	mov	r0, r8
 800e656:	f7f2 fab7 	bl	8000bc8 <__aeabi_d2uiz>
 800e65a:	2801      	cmp	r0, #1
 800e65c:	bf38      	it	cc
 800e65e:	2001      	movcc	r0, #1
 800e660:	f7f1 ff60 	bl	8000524 <__aeabi_ui2d>
 800e664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e666:	4680      	mov	r8, r0
 800e668:	4689      	mov	r9, r1
 800e66a:	bb13      	cbnz	r3, 800e6b2 <_strtod_l+0xba2>
 800e66c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e670:	9014      	str	r0, [sp, #80]	; 0x50
 800e672:	9315      	str	r3, [sp, #84]	; 0x54
 800e674:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e678:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e67c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e67e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e680:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e684:	1a9b      	subs	r3, r3, r2
 800e686:	930d      	str	r3, [sp, #52]	; 0x34
 800e688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e68c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e690:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e694:	f002 f99e 	bl	80109d4 <__ulp>
 800e698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e69c:	ec53 2b10 	vmov	r2, r3, d0
 800e6a0:	f7f1 ffba 	bl	8000618 <__aeabi_dmul>
 800e6a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e6a8:	f7f1 fe00 	bl	80002ac <__adddf3>
 800e6ac:	4682      	mov	sl, r0
 800e6ae:	468b      	mov	fp, r1
 800e6b0:	e78f      	b.n	800e5d2 <_strtod_l+0xac2>
 800e6b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e6b6:	e7dd      	b.n	800e674 <_strtod_l+0xb64>
 800e6b8:	a311      	add	r3, pc, #68	; (adr r3, 800e700 <_strtod_l+0xbf0>)
 800e6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6be:	f7f2 fa1d 	bl	8000afc <__aeabi_dcmplt>
 800e6c2:	e7b4      	b.n	800e62e <_strtod_l+0xb1e>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	930e      	str	r3, [sp, #56]	; 0x38
 800e6c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e6ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	f7ff ba65 	b.w	800db9c <_strtod_l+0x8c>
 800e6d2:	2b65      	cmp	r3, #101	; 0x65
 800e6d4:	f43f ab5d 	beq.w	800dd92 <_strtod_l+0x282>
 800e6d8:	2b45      	cmp	r3, #69	; 0x45
 800e6da:	f43f ab5a 	beq.w	800dd92 <_strtod_l+0x282>
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f7ff bb92 	b.w	800de08 <_strtod_l+0x2f8>
 800e6e4:	f3af 8000 	nop.w
 800e6e8:	94a03595 	.word	0x94a03595
 800e6ec:	3fdfffff 	.word	0x3fdfffff
 800e6f0:	35afe535 	.word	0x35afe535
 800e6f4:	3fe00000 	.word	0x3fe00000
 800e6f8:	ffc00000 	.word	0xffc00000
 800e6fc:	41dfffff 	.word	0x41dfffff
 800e700:	94a03595 	.word	0x94a03595
 800e704:	3fcfffff 	.word	0x3fcfffff
 800e708:	3ff00000 	.word	0x3ff00000
 800e70c:	7ff00000 	.word	0x7ff00000
 800e710:	7fe00000 	.word	0x7fe00000
 800e714:	7c9fffff 	.word	0x7c9fffff
 800e718:	3fe00000 	.word	0x3fe00000
 800e71c:	bff00000 	.word	0xbff00000
 800e720:	7fefffff 	.word	0x7fefffff

0800e724 <_strtod_r>:
 800e724:	4b01      	ldr	r3, [pc, #4]	; (800e72c <_strtod_r+0x8>)
 800e726:	f7ff b9f3 	b.w	800db10 <_strtod_l>
 800e72a:	bf00      	nop
 800e72c:	2000008c 	.word	0x2000008c

0800e730 <_strtol_l.isra.0>:
 800e730:	2b01      	cmp	r3, #1
 800e732:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e736:	d001      	beq.n	800e73c <_strtol_l.isra.0+0xc>
 800e738:	2b24      	cmp	r3, #36	; 0x24
 800e73a:	d906      	bls.n	800e74a <_strtol_l.isra.0+0x1a>
 800e73c:	f7fe f9ca 	bl	800cad4 <__errno>
 800e740:	2316      	movs	r3, #22
 800e742:	6003      	str	r3, [r0, #0]
 800e744:	2000      	movs	r0, #0
 800e746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e74a:	4f3a      	ldr	r7, [pc, #232]	; (800e834 <_strtol_l.isra.0+0x104>)
 800e74c:	468e      	mov	lr, r1
 800e74e:	4676      	mov	r6, lr
 800e750:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e754:	5de5      	ldrb	r5, [r4, r7]
 800e756:	f015 0508 	ands.w	r5, r5, #8
 800e75a:	d1f8      	bne.n	800e74e <_strtol_l.isra.0+0x1e>
 800e75c:	2c2d      	cmp	r4, #45	; 0x2d
 800e75e:	d134      	bne.n	800e7ca <_strtol_l.isra.0+0x9a>
 800e760:	f89e 4000 	ldrb.w	r4, [lr]
 800e764:	f04f 0801 	mov.w	r8, #1
 800e768:	f106 0e02 	add.w	lr, r6, #2
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d05c      	beq.n	800e82a <_strtol_l.isra.0+0xfa>
 800e770:	2b10      	cmp	r3, #16
 800e772:	d10c      	bne.n	800e78e <_strtol_l.isra.0+0x5e>
 800e774:	2c30      	cmp	r4, #48	; 0x30
 800e776:	d10a      	bne.n	800e78e <_strtol_l.isra.0+0x5e>
 800e778:	f89e 4000 	ldrb.w	r4, [lr]
 800e77c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e780:	2c58      	cmp	r4, #88	; 0x58
 800e782:	d14d      	bne.n	800e820 <_strtol_l.isra.0+0xf0>
 800e784:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e788:	2310      	movs	r3, #16
 800e78a:	f10e 0e02 	add.w	lr, lr, #2
 800e78e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e792:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e796:	2600      	movs	r6, #0
 800e798:	fbbc f9f3 	udiv	r9, ip, r3
 800e79c:	4635      	mov	r5, r6
 800e79e:	fb03 ca19 	mls	sl, r3, r9, ip
 800e7a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e7a6:	2f09      	cmp	r7, #9
 800e7a8:	d818      	bhi.n	800e7dc <_strtol_l.isra.0+0xac>
 800e7aa:	463c      	mov	r4, r7
 800e7ac:	42a3      	cmp	r3, r4
 800e7ae:	dd24      	ble.n	800e7fa <_strtol_l.isra.0+0xca>
 800e7b0:	2e00      	cmp	r6, #0
 800e7b2:	db1f      	blt.n	800e7f4 <_strtol_l.isra.0+0xc4>
 800e7b4:	45a9      	cmp	r9, r5
 800e7b6:	d31d      	bcc.n	800e7f4 <_strtol_l.isra.0+0xc4>
 800e7b8:	d101      	bne.n	800e7be <_strtol_l.isra.0+0x8e>
 800e7ba:	45a2      	cmp	sl, r4
 800e7bc:	db1a      	blt.n	800e7f4 <_strtol_l.isra.0+0xc4>
 800e7be:	fb05 4503 	mla	r5, r5, r3, r4
 800e7c2:	2601      	movs	r6, #1
 800e7c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e7c8:	e7eb      	b.n	800e7a2 <_strtol_l.isra.0+0x72>
 800e7ca:	2c2b      	cmp	r4, #43	; 0x2b
 800e7cc:	bf08      	it	eq
 800e7ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e7d2:	46a8      	mov	r8, r5
 800e7d4:	bf08      	it	eq
 800e7d6:	f106 0e02 	addeq.w	lr, r6, #2
 800e7da:	e7c7      	b.n	800e76c <_strtol_l.isra.0+0x3c>
 800e7dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e7e0:	2f19      	cmp	r7, #25
 800e7e2:	d801      	bhi.n	800e7e8 <_strtol_l.isra.0+0xb8>
 800e7e4:	3c37      	subs	r4, #55	; 0x37
 800e7e6:	e7e1      	b.n	800e7ac <_strtol_l.isra.0+0x7c>
 800e7e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e7ec:	2f19      	cmp	r7, #25
 800e7ee:	d804      	bhi.n	800e7fa <_strtol_l.isra.0+0xca>
 800e7f0:	3c57      	subs	r4, #87	; 0x57
 800e7f2:	e7db      	b.n	800e7ac <_strtol_l.isra.0+0x7c>
 800e7f4:	f04f 36ff 	mov.w	r6, #4294967295
 800e7f8:	e7e4      	b.n	800e7c4 <_strtol_l.isra.0+0x94>
 800e7fa:	2e00      	cmp	r6, #0
 800e7fc:	da05      	bge.n	800e80a <_strtol_l.isra.0+0xda>
 800e7fe:	2322      	movs	r3, #34	; 0x22
 800e800:	6003      	str	r3, [r0, #0]
 800e802:	4665      	mov	r5, ip
 800e804:	b942      	cbnz	r2, 800e818 <_strtol_l.isra.0+0xe8>
 800e806:	4628      	mov	r0, r5
 800e808:	e79d      	b.n	800e746 <_strtol_l.isra.0+0x16>
 800e80a:	f1b8 0f00 	cmp.w	r8, #0
 800e80e:	d000      	beq.n	800e812 <_strtol_l.isra.0+0xe2>
 800e810:	426d      	negs	r5, r5
 800e812:	2a00      	cmp	r2, #0
 800e814:	d0f7      	beq.n	800e806 <_strtol_l.isra.0+0xd6>
 800e816:	b10e      	cbz	r6, 800e81c <_strtol_l.isra.0+0xec>
 800e818:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e81c:	6011      	str	r1, [r2, #0]
 800e81e:	e7f2      	b.n	800e806 <_strtol_l.isra.0+0xd6>
 800e820:	2430      	movs	r4, #48	; 0x30
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1b3      	bne.n	800e78e <_strtol_l.isra.0+0x5e>
 800e826:	2308      	movs	r3, #8
 800e828:	e7b1      	b.n	800e78e <_strtol_l.isra.0+0x5e>
 800e82a:	2c30      	cmp	r4, #48	; 0x30
 800e82c:	d0a4      	beq.n	800e778 <_strtol_l.isra.0+0x48>
 800e82e:	230a      	movs	r3, #10
 800e830:	e7ad      	b.n	800e78e <_strtol_l.isra.0+0x5e>
 800e832:	bf00      	nop
 800e834:	08012645 	.word	0x08012645

0800e838 <_strtol_r>:
 800e838:	f7ff bf7a 	b.w	800e730 <_strtol_l.isra.0>

0800e83c <strtol>:
 800e83c:	4613      	mov	r3, r2
 800e83e:	460a      	mov	r2, r1
 800e840:	4601      	mov	r1, r0
 800e842:	4802      	ldr	r0, [pc, #8]	; (800e84c <strtol+0x10>)
 800e844:	6800      	ldr	r0, [r0, #0]
 800e846:	f7ff bf73 	b.w	800e730 <_strtol_l.isra.0>
 800e84a:	bf00      	nop
 800e84c:	20000024 	.word	0x20000024

0800e850 <_vsniprintf_r>:
 800e850:	b530      	push	{r4, r5, lr}
 800e852:	1e14      	subs	r4, r2, #0
 800e854:	4605      	mov	r5, r0
 800e856:	b09b      	sub	sp, #108	; 0x6c
 800e858:	4618      	mov	r0, r3
 800e85a:	da05      	bge.n	800e868 <_vsniprintf_r+0x18>
 800e85c:	238b      	movs	r3, #139	; 0x8b
 800e85e:	602b      	str	r3, [r5, #0]
 800e860:	f04f 30ff 	mov.w	r0, #4294967295
 800e864:	b01b      	add	sp, #108	; 0x6c
 800e866:	bd30      	pop	{r4, r5, pc}
 800e868:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e86c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e870:	bf14      	ite	ne
 800e872:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e876:	4623      	moveq	r3, r4
 800e878:	9302      	str	r3, [sp, #8]
 800e87a:	9305      	str	r3, [sp, #20]
 800e87c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e880:	9100      	str	r1, [sp, #0]
 800e882:	9104      	str	r1, [sp, #16]
 800e884:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e888:	4602      	mov	r2, r0
 800e88a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e88c:	4669      	mov	r1, sp
 800e88e:	4628      	mov	r0, r5
 800e890:	f002 fa5a 	bl	8010d48 <_svfiprintf_r>
 800e894:	1c43      	adds	r3, r0, #1
 800e896:	bfbc      	itt	lt
 800e898:	238b      	movlt	r3, #139	; 0x8b
 800e89a:	602b      	strlt	r3, [r5, #0]
 800e89c:	2c00      	cmp	r4, #0
 800e89e:	d0e1      	beq.n	800e864 <_vsniprintf_r+0x14>
 800e8a0:	9b00      	ldr	r3, [sp, #0]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	701a      	strb	r2, [r3, #0]
 800e8a6:	e7dd      	b.n	800e864 <_vsniprintf_r+0x14>

0800e8a8 <vsniprintf>:
 800e8a8:	b507      	push	{r0, r1, r2, lr}
 800e8aa:	9300      	str	r3, [sp, #0]
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	460a      	mov	r2, r1
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	4803      	ldr	r0, [pc, #12]	; (800e8c0 <vsniprintf+0x18>)
 800e8b4:	6800      	ldr	r0, [r0, #0]
 800e8b6:	f7ff ffcb 	bl	800e850 <_vsniprintf_r>
 800e8ba:	b003      	add	sp, #12
 800e8bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e8c0:	20000024 	.word	0x20000024

0800e8c4 <__swbuf_r>:
 800e8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8c6:	460e      	mov	r6, r1
 800e8c8:	4614      	mov	r4, r2
 800e8ca:	4605      	mov	r5, r0
 800e8cc:	b118      	cbz	r0, 800e8d6 <__swbuf_r+0x12>
 800e8ce:	6983      	ldr	r3, [r0, #24]
 800e8d0:	b90b      	cbnz	r3, 800e8d6 <__swbuf_r+0x12>
 800e8d2:	f001 f86b 	bl	800f9ac <__sinit>
 800e8d6:	4b21      	ldr	r3, [pc, #132]	; (800e95c <__swbuf_r+0x98>)
 800e8d8:	429c      	cmp	r4, r3
 800e8da:	d12b      	bne.n	800e934 <__swbuf_r+0x70>
 800e8dc:	686c      	ldr	r4, [r5, #4]
 800e8de:	69a3      	ldr	r3, [r4, #24]
 800e8e0:	60a3      	str	r3, [r4, #8]
 800e8e2:	89a3      	ldrh	r3, [r4, #12]
 800e8e4:	071a      	lsls	r2, r3, #28
 800e8e6:	d52f      	bpl.n	800e948 <__swbuf_r+0x84>
 800e8e8:	6923      	ldr	r3, [r4, #16]
 800e8ea:	b36b      	cbz	r3, 800e948 <__swbuf_r+0x84>
 800e8ec:	6923      	ldr	r3, [r4, #16]
 800e8ee:	6820      	ldr	r0, [r4, #0]
 800e8f0:	1ac0      	subs	r0, r0, r3
 800e8f2:	6963      	ldr	r3, [r4, #20]
 800e8f4:	b2f6      	uxtb	r6, r6
 800e8f6:	4283      	cmp	r3, r0
 800e8f8:	4637      	mov	r7, r6
 800e8fa:	dc04      	bgt.n	800e906 <__swbuf_r+0x42>
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	4628      	mov	r0, r5
 800e900:	f000 ffc0 	bl	800f884 <_fflush_r>
 800e904:	bb30      	cbnz	r0, 800e954 <__swbuf_r+0x90>
 800e906:	68a3      	ldr	r3, [r4, #8]
 800e908:	3b01      	subs	r3, #1
 800e90a:	60a3      	str	r3, [r4, #8]
 800e90c:	6823      	ldr	r3, [r4, #0]
 800e90e:	1c5a      	adds	r2, r3, #1
 800e910:	6022      	str	r2, [r4, #0]
 800e912:	701e      	strb	r6, [r3, #0]
 800e914:	6963      	ldr	r3, [r4, #20]
 800e916:	3001      	adds	r0, #1
 800e918:	4283      	cmp	r3, r0
 800e91a:	d004      	beq.n	800e926 <__swbuf_r+0x62>
 800e91c:	89a3      	ldrh	r3, [r4, #12]
 800e91e:	07db      	lsls	r3, r3, #31
 800e920:	d506      	bpl.n	800e930 <__swbuf_r+0x6c>
 800e922:	2e0a      	cmp	r6, #10
 800e924:	d104      	bne.n	800e930 <__swbuf_r+0x6c>
 800e926:	4621      	mov	r1, r4
 800e928:	4628      	mov	r0, r5
 800e92a:	f000 ffab 	bl	800f884 <_fflush_r>
 800e92e:	b988      	cbnz	r0, 800e954 <__swbuf_r+0x90>
 800e930:	4638      	mov	r0, r7
 800e932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e934:	4b0a      	ldr	r3, [pc, #40]	; (800e960 <__swbuf_r+0x9c>)
 800e936:	429c      	cmp	r4, r3
 800e938:	d101      	bne.n	800e93e <__swbuf_r+0x7a>
 800e93a:	68ac      	ldr	r4, [r5, #8]
 800e93c:	e7cf      	b.n	800e8de <__swbuf_r+0x1a>
 800e93e:	4b09      	ldr	r3, [pc, #36]	; (800e964 <__swbuf_r+0xa0>)
 800e940:	429c      	cmp	r4, r3
 800e942:	bf08      	it	eq
 800e944:	68ec      	ldreq	r4, [r5, #12]
 800e946:	e7ca      	b.n	800e8de <__swbuf_r+0x1a>
 800e948:	4621      	mov	r1, r4
 800e94a:	4628      	mov	r0, r5
 800e94c:	f000 f81e 	bl	800e98c <__swsetup_r>
 800e950:	2800      	cmp	r0, #0
 800e952:	d0cb      	beq.n	800e8ec <__swbuf_r+0x28>
 800e954:	f04f 37ff 	mov.w	r7, #4294967295
 800e958:	e7ea      	b.n	800e930 <__swbuf_r+0x6c>
 800e95a:	bf00      	nop
 800e95c:	0801288c 	.word	0x0801288c
 800e960:	080128ac 	.word	0x080128ac
 800e964:	0801286c 	.word	0x0801286c

0800e968 <_write_r>:
 800e968:	b538      	push	{r3, r4, r5, lr}
 800e96a:	4d07      	ldr	r5, [pc, #28]	; (800e988 <_write_r+0x20>)
 800e96c:	4604      	mov	r4, r0
 800e96e:	4608      	mov	r0, r1
 800e970:	4611      	mov	r1, r2
 800e972:	2200      	movs	r2, #0
 800e974:	602a      	str	r2, [r5, #0]
 800e976:	461a      	mov	r2, r3
 800e978:	f7f5 f8f1 	bl	8003b5e <_write>
 800e97c:	1c43      	adds	r3, r0, #1
 800e97e:	d102      	bne.n	800e986 <_write_r+0x1e>
 800e980:	682b      	ldr	r3, [r5, #0]
 800e982:	b103      	cbz	r3, 800e986 <_write_r+0x1e>
 800e984:	6023      	str	r3, [r4, #0]
 800e986:	bd38      	pop	{r3, r4, r5, pc}
 800e988:	2000174c 	.word	0x2000174c

0800e98c <__swsetup_r>:
 800e98c:	4b32      	ldr	r3, [pc, #200]	; (800ea58 <__swsetup_r+0xcc>)
 800e98e:	b570      	push	{r4, r5, r6, lr}
 800e990:	681d      	ldr	r5, [r3, #0]
 800e992:	4606      	mov	r6, r0
 800e994:	460c      	mov	r4, r1
 800e996:	b125      	cbz	r5, 800e9a2 <__swsetup_r+0x16>
 800e998:	69ab      	ldr	r3, [r5, #24]
 800e99a:	b913      	cbnz	r3, 800e9a2 <__swsetup_r+0x16>
 800e99c:	4628      	mov	r0, r5
 800e99e:	f001 f805 	bl	800f9ac <__sinit>
 800e9a2:	4b2e      	ldr	r3, [pc, #184]	; (800ea5c <__swsetup_r+0xd0>)
 800e9a4:	429c      	cmp	r4, r3
 800e9a6:	d10f      	bne.n	800e9c8 <__swsetup_r+0x3c>
 800e9a8:	686c      	ldr	r4, [r5, #4]
 800e9aa:	89a3      	ldrh	r3, [r4, #12]
 800e9ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9b0:	0719      	lsls	r1, r3, #28
 800e9b2:	d42c      	bmi.n	800ea0e <__swsetup_r+0x82>
 800e9b4:	06dd      	lsls	r5, r3, #27
 800e9b6:	d411      	bmi.n	800e9dc <__swsetup_r+0x50>
 800e9b8:	2309      	movs	r3, #9
 800e9ba:	6033      	str	r3, [r6, #0]
 800e9bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e9c0:	81a3      	strh	r3, [r4, #12]
 800e9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e9c6:	e03e      	b.n	800ea46 <__swsetup_r+0xba>
 800e9c8:	4b25      	ldr	r3, [pc, #148]	; (800ea60 <__swsetup_r+0xd4>)
 800e9ca:	429c      	cmp	r4, r3
 800e9cc:	d101      	bne.n	800e9d2 <__swsetup_r+0x46>
 800e9ce:	68ac      	ldr	r4, [r5, #8]
 800e9d0:	e7eb      	b.n	800e9aa <__swsetup_r+0x1e>
 800e9d2:	4b24      	ldr	r3, [pc, #144]	; (800ea64 <__swsetup_r+0xd8>)
 800e9d4:	429c      	cmp	r4, r3
 800e9d6:	bf08      	it	eq
 800e9d8:	68ec      	ldreq	r4, [r5, #12]
 800e9da:	e7e6      	b.n	800e9aa <__swsetup_r+0x1e>
 800e9dc:	0758      	lsls	r0, r3, #29
 800e9de:	d512      	bpl.n	800ea06 <__swsetup_r+0x7a>
 800e9e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e9e2:	b141      	cbz	r1, 800e9f6 <__swsetup_r+0x6a>
 800e9e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e9e8:	4299      	cmp	r1, r3
 800e9ea:	d002      	beq.n	800e9f2 <__swsetup_r+0x66>
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	f7fe f8b9 	bl	800cb64 <_free_r>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	6363      	str	r3, [r4, #52]	; 0x34
 800e9f6:	89a3      	ldrh	r3, [r4, #12]
 800e9f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9fc:	81a3      	strh	r3, [r4, #12]
 800e9fe:	2300      	movs	r3, #0
 800ea00:	6063      	str	r3, [r4, #4]
 800ea02:	6923      	ldr	r3, [r4, #16]
 800ea04:	6023      	str	r3, [r4, #0]
 800ea06:	89a3      	ldrh	r3, [r4, #12]
 800ea08:	f043 0308 	orr.w	r3, r3, #8
 800ea0c:	81a3      	strh	r3, [r4, #12]
 800ea0e:	6923      	ldr	r3, [r4, #16]
 800ea10:	b94b      	cbnz	r3, 800ea26 <__swsetup_r+0x9a>
 800ea12:	89a3      	ldrh	r3, [r4, #12]
 800ea14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ea18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea1c:	d003      	beq.n	800ea26 <__swsetup_r+0x9a>
 800ea1e:	4621      	mov	r1, r4
 800ea20:	4630      	mov	r0, r6
 800ea22:	f001 fc0d 	bl	8010240 <__smakebuf_r>
 800ea26:	89a0      	ldrh	r0, [r4, #12]
 800ea28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ea2c:	f010 0301 	ands.w	r3, r0, #1
 800ea30:	d00a      	beq.n	800ea48 <__swsetup_r+0xbc>
 800ea32:	2300      	movs	r3, #0
 800ea34:	60a3      	str	r3, [r4, #8]
 800ea36:	6963      	ldr	r3, [r4, #20]
 800ea38:	425b      	negs	r3, r3
 800ea3a:	61a3      	str	r3, [r4, #24]
 800ea3c:	6923      	ldr	r3, [r4, #16]
 800ea3e:	b943      	cbnz	r3, 800ea52 <__swsetup_r+0xc6>
 800ea40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ea44:	d1ba      	bne.n	800e9bc <__swsetup_r+0x30>
 800ea46:	bd70      	pop	{r4, r5, r6, pc}
 800ea48:	0781      	lsls	r1, r0, #30
 800ea4a:	bf58      	it	pl
 800ea4c:	6963      	ldrpl	r3, [r4, #20]
 800ea4e:	60a3      	str	r3, [r4, #8]
 800ea50:	e7f4      	b.n	800ea3c <__swsetup_r+0xb0>
 800ea52:	2000      	movs	r0, #0
 800ea54:	e7f7      	b.n	800ea46 <__swsetup_r+0xba>
 800ea56:	bf00      	nop
 800ea58:	20000024 	.word	0x20000024
 800ea5c:	0801288c 	.word	0x0801288c
 800ea60:	080128ac 	.word	0x080128ac
 800ea64:	0801286c 	.word	0x0801286c

0800ea68 <_close_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4d06      	ldr	r5, [pc, #24]	; (800ea84 <_close_r+0x1c>)
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	4604      	mov	r4, r0
 800ea70:	4608      	mov	r0, r1
 800ea72:	602b      	str	r3, [r5, #0]
 800ea74:	f7f5 f88f 	bl	8003b96 <_close>
 800ea78:	1c43      	adds	r3, r0, #1
 800ea7a:	d102      	bne.n	800ea82 <_close_r+0x1a>
 800ea7c:	682b      	ldr	r3, [r5, #0]
 800ea7e:	b103      	cbz	r3, 800ea82 <_close_r+0x1a>
 800ea80:	6023      	str	r3, [r4, #0]
 800ea82:	bd38      	pop	{r3, r4, r5, pc}
 800ea84:	2000174c 	.word	0x2000174c

0800ea88 <quorem>:
 800ea88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8c:	6903      	ldr	r3, [r0, #16]
 800ea8e:	690c      	ldr	r4, [r1, #16]
 800ea90:	42a3      	cmp	r3, r4
 800ea92:	4607      	mov	r7, r0
 800ea94:	f2c0 8081 	blt.w	800eb9a <quorem+0x112>
 800ea98:	3c01      	subs	r4, #1
 800ea9a:	f101 0814 	add.w	r8, r1, #20
 800ea9e:	f100 0514 	add.w	r5, r0, #20
 800eaa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eaa6:	9301      	str	r3, [sp, #4]
 800eaa8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eaac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eab0:	3301      	adds	r3, #1
 800eab2:	429a      	cmp	r2, r3
 800eab4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eab8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eabc:	fbb2 f6f3 	udiv	r6, r2, r3
 800eac0:	d331      	bcc.n	800eb26 <quorem+0x9e>
 800eac2:	f04f 0e00 	mov.w	lr, #0
 800eac6:	4640      	mov	r0, r8
 800eac8:	46ac      	mov	ip, r5
 800eaca:	46f2      	mov	sl, lr
 800eacc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ead0:	b293      	uxth	r3, r2
 800ead2:	fb06 e303 	mla	r3, r6, r3, lr
 800ead6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eada:	b29b      	uxth	r3, r3
 800eadc:	ebaa 0303 	sub.w	r3, sl, r3
 800eae0:	0c12      	lsrs	r2, r2, #16
 800eae2:	f8dc a000 	ldr.w	sl, [ip]
 800eae6:	fb06 e202 	mla	r2, r6, r2, lr
 800eaea:	fa13 f38a 	uxtah	r3, r3, sl
 800eaee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eaf2:	fa1f fa82 	uxth.w	sl, r2
 800eaf6:	f8dc 2000 	ldr.w	r2, [ip]
 800eafa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800eafe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb08:	4581      	cmp	r9, r0
 800eb0a:	f84c 3b04 	str.w	r3, [ip], #4
 800eb0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eb12:	d2db      	bcs.n	800eacc <quorem+0x44>
 800eb14:	f855 300b 	ldr.w	r3, [r5, fp]
 800eb18:	b92b      	cbnz	r3, 800eb26 <quorem+0x9e>
 800eb1a:	9b01      	ldr	r3, [sp, #4]
 800eb1c:	3b04      	subs	r3, #4
 800eb1e:	429d      	cmp	r5, r3
 800eb20:	461a      	mov	r2, r3
 800eb22:	d32e      	bcc.n	800eb82 <quorem+0xfa>
 800eb24:	613c      	str	r4, [r7, #16]
 800eb26:	4638      	mov	r0, r7
 800eb28:	f001 feb0 	bl	801088c <__mcmp>
 800eb2c:	2800      	cmp	r0, #0
 800eb2e:	db24      	blt.n	800eb7a <quorem+0xf2>
 800eb30:	3601      	adds	r6, #1
 800eb32:	4628      	mov	r0, r5
 800eb34:	f04f 0c00 	mov.w	ip, #0
 800eb38:	f858 2b04 	ldr.w	r2, [r8], #4
 800eb3c:	f8d0 e000 	ldr.w	lr, [r0]
 800eb40:	b293      	uxth	r3, r2
 800eb42:	ebac 0303 	sub.w	r3, ip, r3
 800eb46:	0c12      	lsrs	r2, r2, #16
 800eb48:	fa13 f38e 	uxtah	r3, r3, lr
 800eb4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eb50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb54:	b29b      	uxth	r3, r3
 800eb56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb5a:	45c1      	cmp	r9, r8
 800eb5c:	f840 3b04 	str.w	r3, [r0], #4
 800eb60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eb64:	d2e8      	bcs.n	800eb38 <quorem+0xb0>
 800eb66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb6e:	b922      	cbnz	r2, 800eb7a <quorem+0xf2>
 800eb70:	3b04      	subs	r3, #4
 800eb72:	429d      	cmp	r5, r3
 800eb74:	461a      	mov	r2, r3
 800eb76:	d30a      	bcc.n	800eb8e <quorem+0x106>
 800eb78:	613c      	str	r4, [r7, #16]
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	b003      	add	sp, #12
 800eb7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb82:	6812      	ldr	r2, [r2, #0]
 800eb84:	3b04      	subs	r3, #4
 800eb86:	2a00      	cmp	r2, #0
 800eb88:	d1cc      	bne.n	800eb24 <quorem+0x9c>
 800eb8a:	3c01      	subs	r4, #1
 800eb8c:	e7c7      	b.n	800eb1e <quorem+0x96>
 800eb8e:	6812      	ldr	r2, [r2, #0]
 800eb90:	3b04      	subs	r3, #4
 800eb92:	2a00      	cmp	r2, #0
 800eb94:	d1f0      	bne.n	800eb78 <quorem+0xf0>
 800eb96:	3c01      	subs	r4, #1
 800eb98:	e7eb      	b.n	800eb72 <quorem+0xea>
 800eb9a:	2000      	movs	r0, #0
 800eb9c:	e7ee      	b.n	800eb7c <quorem+0xf4>
	...

0800eba0 <_dtoa_r>:
 800eba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba4:	ed2d 8b02 	vpush	{d8}
 800eba8:	ec57 6b10 	vmov	r6, r7, d0
 800ebac:	b095      	sub	sp, #84	; 0x54
 800ebae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ebb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ebb4:	9105      	str	r1, [sp, #20]
 800ebb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ebba:	4604      	mov	r4, r0
 800ebbc:	9209      	str	r2, [sp, #36]	; 0x24
 800ebbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebc0:	b975      	cbnz	r5, 800ebe0 <_dtoa_r+0x40>
 800ebc2:	2010      	movs	r0, #16
 800ebc4:	f7fd ffb0 	bl	800cb28 <malloc>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	6260      	str	r0, [r4, #36]	; 0x24
 800ebcc:	b920      	cbnz	r0, 800ebd8 <_dtoa_r+0x38>
 800ebce:	4bb2      	ldr	r3, [pc, #712]	; (800ee98 <_dtoa_r+0x2f8>)
 800ebd0:	21ea      	movs	r1, #234	; 0xea
 800ebd2:	48b2      	ldr	r0, [pc, #712]	; (800ee9c <_dtoa_r+0x2fc>)
 800ebd4:	f002 fb3a 	bl	801124c <__assert_func>
 800ebd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ebdc:	6005      	str	r5, [r0, #0]
 800ebde:	60c5      	str	r5, [r0, #12]
 800ebe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebe2:	6819      	ldr	r1, [r3, #0]
 800ebe4:	b151      	cbz	r1, 800ebfc <_dtoa_r+0x5c>
 800ebe6:	685a      	ldr	r2, [r3, #4]
 800ebe8:	604a      	str	r2, [r1, #4]
 800ebea:	2301      	movs	r3, #1
 800ebec:	4093      	lsls	r3, r2
 800ebee:	608b      	str	r3, [r1, #8]
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f001 fbc3 	bl	801037c <_Bfree>
 800ebf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	601a      	str	r2, [r3, #0]
 800ebfc:	1e3b      	subs	r3, r7, #0
 800ebfe:	bfb9      	ittee	lt
 800ec00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ec04:	9303      	strlt	r3, [sp, #12]
 800ec06:	2300      	movge	r3, #0
 800ec08:	f8c8 3000 	strge.w	r3, [r8]
 800ec0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ec10:	4ba3      	ldr	r3, [pc, #652]	; (800eea0 <_dtoa_r+0x300>)
 800ec12:	bfbc      	itt	lt
 800ec14:	2201      	movlt	r2, #1
 800ec16:	f8c8 2000 	strlt.w	r2, [r8]
 800ec1a:	ea33 0309 	bics.w	r3, r3, r9
 800ec1e:	d11b      	bne.n	800ec58 <_dtoa_r+0xb8>
 800ec20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec22:	f242 730f 	movw	r3, #9999	; 0x270f
 800ec26:	6013      	str	r3, [r2, #0]
 800ec28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec2c:	4333      	orrs	r3, r6
 800ec2e:	f000 857a 	beq.w	800f726 <_dtoa_r+0xb86>
 800ec32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec34:	b963      	cbnz	r3, 800ec50 <_dtoa_r+0xb0>
 800ec36:	4b9b      	ldr	r3, [pc, #620]	; (800eea4 <_dtoa_r+0x304>)
 800ec38:	e024      	b.n	800ec84 <_dtoa_r+0xe4>
 800ec3a:	4b9b      	ldr	r3, [pc, #620]	; (800eea8 <_dtoa_r+0x308>)
 800ec3c:	9300      	str	r3, [sp, #0]
 800ec3e:	3308      	adds	r3, #8
 800ec40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ec42:	6013      	str	r3, [r2, #0]
 800ec44:	9800      	ldr	r0, [sp, #0]
 800ec46:	b015      	add	sp, #84	; 0x54
 800ec48:	ecbd 8b02 	vpop	{d8}
 800ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec50:	4b94      	ldr	r3, [pc, #592]	; (800eea4 <_dtoa_r+0x304>)
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	3303      	adds	r3, #3
 800ec56:	e7f3      	b.n	800ec40 <_dtoa_r+0xa0>
 800ec58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	ec51 0b17 	vmov	r0, r1, d7
 800ec62:	2300      	movs	r3, #0
 800ec64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ec68:	f7f1 ff3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec6c:	4680      	mov	r8, r0
 800ec6e:	b158      	cbz	r0, 800ec88 <_dtoa_r+0xe8>
 800ec70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec72:	2301      	movs	r3, #1
 800ec74:	6013      	str	r3, [r2, #0]
 800ec76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f000 8551 	beq.w	800f720 <_dtoa_r+0xb80>
 800ec7e:	488b      	ldr	r0, [pc, #556]	; (800eeac <_dtoa_r+0x30c>)
 800ec80:	6018      	str	r0, [r3, #0]
 800ec82:	1e43      	subs	r3, r0, #1
 800ec84:	9300      	str	r3, [sp, #0]
 800ec86:	e7dd      	b.n	800ec44 <_dtoa_r+0xa4>
 800ec88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ec8c:	aa12      	add	r2, sp, #72	; 0x48
 800ec8e:	a913      	add	r1, sp, #76	; 0x4c
 800ec90:	4620      	mov	r0, r4
 800ec92:	f001 ff1b 	bl	8010acc <__d2b>
 800ec96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec9a:	4683      	mov	fp, r0
 800ec9c:	2d00      	cmp	r5, #0
 800ec9e:	d07c      	beq.n	800ed9a <_dtoa_r+0x1fa>
 800eca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eca2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800eca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecaa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ecae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ecb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ecb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ecba:	4b7d      	ldr	r3, [pc, #500]	; (800eeb0 <_dtoa_r+0x310>)
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	4630      	mov	r0, r6
 800ecc0:	4639      	mov	r1, r7
 800ecc2:	f7f1 faf1 	bl	80002a8 <__aeabi_dsub>
 800ecc6:	a36e      	add	r3, pc, #440	; (adr r3, 800ee80 <_dtoa_r+0x2e0>)
 800ecc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eccc:	f7f1 fca4 	bl	8000618 <__aeabi_dmul>
 800ecd0:	a36d      	add	r3, pc, #436	; (adr r3, 800ee88 <_dtoa_r+0x2e8>)
 800ecd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd6:	f7f1 fae9 	bl	80002ac <__adddf3>
 800ecda:	4606      	mov	r6, r0
 800ecdc:	4628      	mov	r0, r5
 800ecde:	460f      	mov	r7, r1
 800ece0:	f7f1 fc30 	bl	8000544 <__aeabi_i2d>
 800ece4:	a36a      	add	r3, pc, #424	; (adr r3, 800ee90 <_dtoa_r+0x2f0>)
 800ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecea:	f7f1 fc95 	bl	8000618 <__aeabi_dmul>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	4639      	mov	r1, r7
 800ecf6:	f7f1 fad9 	bl	80002ac <__adddf3>
 800ecfa:	4606      	mov	r6, r0
 800ecfc:	460f      	mov	r7, r1
 800ecfe:	f7f1 ff3b 	bl	8000b78 <__aeabi_d2iz>
 800ed02:	2200      	movs	r2, #0
 800ed04:	4682      	mov	sl, r0
 800ed06:	2300      	movs	r3, #0
 800ed08:	4630      	mov	r0, r6
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	f7f1 fef6 	bl	8000afc <__aeabi_dcmplt>
 800ed10:	b148      	cbz	r0, 800ed26 <_dtoa_r+0x186>
 800ed12:	4650      	mov	r0, sl
 800ed14:	f7f1 fc16 	bl	8000544 <__aeabi_i2d>
 800ed18:	4632      	mov	r2, r6
 800ed1a:	463b      	mov	r3, r7
 800ed1c:	f7f1 fee4 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed20:	b908      	cbnz	r0, 800ed26 <_dtoa_r+0x186>
 800ed22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed26:	f1ba 0f16 	cmp.w	sl, #22
 800ed2a:	d854      	bhi.n	800edd6 <_dtoa_r+0x236>
 800ed2c:	4b61      	ldr	r3, [pc, #388]	; (800eeb4 <_dtoa_r+0x314>)
 800ed2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ed32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed3a:	f7f1 fedf 	bl	8000afc <__aeabi_dcmplt>
 800ed3e:	2800      	cmp	r0, #0
 800ed40:	d04b      	beq.n	800edda <_dtoa_r+0x23a>
 800ed42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ed46:	2300      	movs	r3, #0
 800ed48:	930e      	str	r3, [sp, #56]	; 0x38
 800ed4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed4c:	1b5d      	subs	r5, r3, r5
 800ed4e:	1e6b      	subs	r3, r5, #1
 800ed50:	9304      	str	r3, [sp, #16]
 800ed52:	bf43      	ittte	mi
 800ed54:	2300      	movmi	r3, #0
 800ed56:	f1c5 0801 	rsbmi	r8, r5, #1
 800ed5a:	9304      	strmi	r3, [sp, #16]
 800ed5c:	f04f 0800 	movpl.w	r8, #0
 800ed60:	f1ba 0f00 	cmp.w	sl, #0
 800ed64:	db3b      	blt.n	800edde <_dtoa_r+0x23e>
 800ed66:	9b04      	ldr	r3, [sp, #16]
 800ed68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ed6c:	4453      	add	r3, sl
 800ed6e:	9304      	str	r3, [sp, #16]
 800ed70:	2300      	movs	r3, #0
 800ed72:	9306      	str	r3, [sp, #24]
 800ed74:	9b05      	ldr	r3, [sp, #20]
 800ed76:	2b09      	cmp	r3, #9
 800ed78:	d869      	bhi.n	800ee4e <_dtoa_r+0x2ae>
 800ed7a:	2b05      	cmp	r3, #5
 800ed7c:	bfc4      	itt	gt
 800ed7e:	3b04      	subgt	r3, #4
 800ed80:	9305      	strgt	r3, [sp, #20]
 800ed82:	9b05      	ldr	r3, [sp, #20]
 800ed84:	f1a3 0302 	sub.w	r3, r3, #2
 800ed88:	bfcc      	ite	gt
 800ed8a:	2500      	movgt	r5, #0
 800ed8c:	2501      	movle	r5, #1
 800ed8e:	2b03      	cmp	r3, #3
 800ed90:	d869      	bhi.n	800ee66 <_dtoa_r+0x2c6>
 800ed92:	e8df f003 	tbb	[pc, r3]
 800ed96:	4e2c      	.short	0x4e2c
 800ed98:	5a4c      	.short	0x5a4c
 800ed9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ed9e:	441d      	add	r5, r3
 800eda0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eda4:	2b20      	cmp	r3, #32
 800eda6:	bfc1      	itttt	gt
 800eda8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800edac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800edb0:	fa09 f303 	lslgt.w	r3, r9, r3
 800edb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800edb8:	bfda      	itte	le
 800edba:	f1c3 0320 	rsble	r3, r3, #32
 800edbe:	fa06 f003 	lslle.w	r0, r6, r3
 800edc2:	4318      	orrgt	r0, r3
 800edc4:	f7f1 fbae 	bl	8000524 <__aeabi_ui2d>
 800edc8:	2301      	movs	r3, #1
 800edca:	4606      	mov	r6, r0
 800edcc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800edd0:	3d01      	subs	r5, #1
 800edd2:	9310      	str	r3, [sp, #64]	; 0x40
 800edd4:	e771      	b.n	800ecba <_dtoa_r+0x11a>
 800edd6:	2301      	movs	r3, #1
 800edd8:	e7b6      	b.n	800ed48 <_dtoa_r+0x1a8>
 800edda:	900e      	str	r0, [sp, #56]	; 0x38
 800eddc:	e7b5      	b.n	800ed4a <_dtoa_r+0x1aa>
 800edde:	f1ca 0300 	rsb	r3, sl, #0
 800ede2:	9306      	str	r3, [sp, #24]
 800ede4:	2300      	movs	r3, #0
 800ede6:	eba8 080a 	sub.w	r8, r8, sl
 800edea:	930d      	str	r3, [sp, #52]	; 0x34
 800edec:	e7c2      	b.n	800ed74 <_dtoa_r+0x1d4>
 800edee:	2300      	movs	r3, #0
 800edf0:	9308      	str	r3, [sp, #32]
 800edf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	dc39      	bgt.n	800ee6c <_dtoa_r+0x2cc>
 800edf8:	f04f 0901 	mov.w	r9, #1
 800edfc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ee00:	464b      	mov	r3, r9
 800ee02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ee06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ee08:	2200      	movs	r2, #0
 800ee0a:	6042      	str	r2, [r0, #4]
 800ee0c:	2204      	movs	r2, #4
 800ee0e:	f102 0614 	add.w	r6, r2, #20
 800ee12:	429e      	cmp	r6, r3
 800ee14:	6841      	ldr	r1, [r0, #4]
 800ee16:	d92f      	bls.n	800ee78 <_dtoa_r+0x2d8>
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f001 fa6f 	bl	80102fc <_Balloc>
 800ee1e:	9000      	str	r0, [sp, #0]
 800ee20:	2800      	cmp	r0, #0
 800ee22:	d14b      	bne.n	800eebc <_dtoa_r+0x31c>
 800ee24:	4b24      	ldr	r3, [pc, #144]	; (800eeb8 <_dtoa_r+0x318>)
 800ee26:	4602      	mov	r2, r0
 800ee28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ee2c:	e6d1      	b.n	800ebd2 <_dtoa_r+0x32>
 800ee2e:	2301      	movs	r3, #1
 800ee30:	e7de      	b.n	800edf0 <_dtoa_r+0x250>
 800ee32:	2300      	movs	r3, #0
 800ee34:	9308      	str	r3, [sp, #32]
 800ee36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee38:	eb0a 0903 	add.w	r9, sl, r3
 800ee3c:	f109 0301 	add.w	r3, r9, #1
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	9301      	str	r3, [sp, #4]
 800ee44:	bfb8      	it	lt
 800ee46:	2301      	movlt	r3, #1
 800ee48:	e7dd      	b.n	800ee06 <_dtoa_r+0x266>
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e7f2      	b.n	800ee34 <_dtoa_r+0x294>
 800ee4e:	2501      	movs	r5, #1
 800ee50:	2300      	movs	r3, #0
 800ee52:	9305      	str	r3, [sp, #20]
 800ee54:	9508      	str	r5, [sp, #32]
 800ee56:	f04f 39ff 	mov.w	r9, #4294967295
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ee60:	2312      	movs	r3, #18
 800ee62:	9209      	str	r2, [sp, #36]	; 0x24
 800ee64:	e7cf      	b.n	800ee06 <_dtoa_r+0x266>
 800ee66:	2301      	movs	r3, #1
 800ee68:	9308      	str	r3, [sp, #32]
 800ee6a:	e7f4      	b.n	800ee56 <_dtoa_r+0x2b6>
 800ee6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ee70:	f8cd 9004 	str.w	r9, [sp, #4]
 800ee74:	464b      	mov	r3, r9
 800ee76:	e7c6      	b.n	800ee06 <_dtoa_r+0x266>
 800ee78:	3101      	adds	r1, #1
 800ee7a:	6041      	str	r1, [r0, #4]
 800ee7c:	0052      	lsls	r2, r2, #1
 800ee7e:	e7c6      	b.n	800ee0e <_dtoa_r+0x26e>
 800ee80:	636f4361 	.word	0x636f4361
 800ee84:	3fd287a7 	.word	0x3fd287a7
 800ee88:	8b60c8b3 	.word	0x8b60c8b3
 800ee8c:	3fc68a28 	.word	0x3fc68a28
 800ee90:	509f79fb 	.word	0x509f79fb
 800ee94:	3fd34413 	.word	0x3fd34413
 800ee98:	080127e5 	.word	0x080127e5
 800ee9c:	080127fc 	.word	0x080127fc
 800eea0:	7ff00000 	.word	0x7ff00000
 800eea4:	080127e1 	.word	0x080127e1
 800eea8:	080127d8 	.word	0x080127d8
 800eeac:	0801275d 	.word	0x0801275d
 800eeb0:	3ff80000 	.word	0x3ff80000
 800eeb4:	080129d8 	.word	0x080129d8
 800eeb8:	0801285b 	.word	0x0801285b
 800eebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eebe:	9a00      	ldr	r2, [sp, #0]
 800eec0:	601a      	str	r2, [r3, #0]
 800eec2:	9b01      	ldr	r3, [sp, #4]
 800eec4:	2b0e      	cmp	r3, #14
 800eec6:	f200 80ad 	bhi.w	800f024 <_dtoa_r+0x484>
 800eeca:	2d00      	cmp	r5, #0
 800eecc:	f000 80aa 	beq.w	800f024 <_dtoa_r+0x484>
 800eed0:	f1ba 0f00 	cmp.w	sl, #0
 800eed4:	dd36      	ble.n	800ef44 <_dtoa_r+0x3a4>
 800eed6:	4ac3      	ldr	r2, [pc, #780]	; (800f1e4 <_dtoa_r+0x644>)
 800eed8:	f00a 030f 	and.w	r3, sl, #15
 800eedc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eee0:	ed93 7b00 	vldr	d7, [r3]
 800eee4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800eee8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800eeec:	eeb0 8a47 	vmov.f32	s16, s14
 800eef0:	eef0 8a67 	vmov.f32	s17, s15
 800eef4:	d016      	beq.n	800ef24 <_dtoa_r+0x384>
 800eef6:	4bbc      	ldr	r3, [pc, #752]	; (800f1e8 <_dtoa_r+0x648>)
 800eef8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eefc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef00:	f7f1 fcb4 	bl	800086c <__aeabi_ddiv>
 800ef04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef08:	f007 070f 	and.w	r7, r7, #15
 800ef0c:	2503      	movs	r5, #3
 800ef0e:	4eb6      	ldr	r6, [pc, #728]	; (800f1e8 <_dtoa_r+0x648>)
 800ef10:	b957      	cbnz	r7, 800ef28 <_dtoa_r+0x388>
 800ef12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef16:	ec53 2b18 	vmov	r2, r3, d8
 800ef1a:	f7f1 fca7 	bl	800086c <__aeabi_ddiv>
 800ef1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef22:	e029      	b.n	800ef78 <_dtoa_r+0x3d8>
 800ef24:	2502      	movs	r5, #2
 800ef26:	e7f2      	b.n	800ef0e <_dtoa_r+0x36e>
 800ef28:	07f9      	lsls	r1, r7, #31
 800ef2a:	d508      	bpl.n	800ef3e <_dtoa_r+0x39e>
 800ef2c:	ec51 0b18 	vmov	r0, r1, d8
 800ef30:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ef34:	f7f1 fb70 	bl	8000618 <__aeabi_dmul>
 800ef38:	ec41 0b18 	vmov	d8, r0, r1
 800ef3c:	3501      	adds	r5, #1
 800ef3e:	107f      	asrs	r7, r7, #1
 800ef40:	3608      	adds	r6, #8
 800ef42:	e7e5      	b.n	800ef10 <_dtoa_r+0x370>
 800ef44:	f000 80a6 	beq.w	800f094 <_dtoa_r+0x4f4>
 800ef48:	f1ca 0600 	rsb	r6, sl, #0
 800ef4c:	4ba5      	ldr	r3, [pc, #660]	; (800f1e4 <_dtoa_r+0x644>)
 800ef4e:	4fa6      	ldr	r7, [pc, #664]	; (800f1e8 <_dtoa_r+0x648>)
 800ef50:	f006 020f 	and.w	r2, r6, #15
 800ef54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef60:	f7f1 fb5a 	bl	8000618 <__aeabi_dmul>
 800ef64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef68:	1136      	asrs	r6, r6, #4
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	2502      	movs	r5, #2
 800ef6e:	2e00      	cmp	r6, #0
 800ef70:	f040 8085 	bne.w	800f07e <_dtoa_r+0x4de>
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1d2      	bne.n	800ef1e <_dtoa_r+0x37e>
 800ef78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 808c 	beq.w	800f098 <_dtoa_r+0x4f8>
 800ef80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ef84:	4b99      	ldr	r3, [pc, #612]	; (800f1ec <_dtoa_r+0x64c>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	4630      	mov	r0, r6
 800ef8a:	4639      	mov	r1, r7
 800ef8c:	f7f1 fdb6 	bl	8000afc <__aeabi_dcmplt>
 800ef90:	2800      	cmp	r0, #0
 800ef92:	f000 8081 	beq.w	800f098 <_dtoa_r+0x4f8>
 800ef96:	9b01      	ldr	r3, [sp, #4]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d07d      	beq.n	800f098 <_dtoa_r+0x4f8>
 800ef9c:	f1b9 0f00 	cmp.w	r9, #0
 800efa0:	dd3c      	ble.n	800f01c <_dtoa_r+0x47c>
 800efa2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800efa6:	9307      	str	r3, [sp, #28]
 800efa8:	2200      	movs	r2, #0
 800efaa:	4b91      	ldr	r3, [pc, #580]	; (800f1f0 <_dtoa_r+0x650>)
 800efac:	4630      	mov	r0, r6
 800efae:	4639      	mov	r1, r7
 800efb0:	f7f1 fb32 	bl	8000618 <__aeabi_dmul>
 800efb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efb8:	3501      	adds	r5, #1
 800efba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800efbe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800efc2:	4628      	mov	r0, r5
 800efc4:	f7f1 fabe 	bl	8000544 <__aeabi_i2d>
 800efc8:	4632      	mov	r2, r6
 800efca:	463b      	mov	r3, r7
 800efcc:	f7f1 fb24 	bl	8000618 <__aeabi_dmul>
 800efd0:	4b88      	ldr	r3, [pc, #544]	; (800f1f4 <_dtoa_r+0x654>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	f7f1 f96a 	bl	80002ac <__adddf3>
 800efd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800efdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efe0:	9303      	str	r3, [sp, #12]
 800efe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d15c      	bne.n	800f0a2 <_dtoa_r+0x502>
 800efe8:	4b83      	ldr	r3, [pc, #524]	; (800f1f8 <_dtoa_r+0x658>)
 800efea:	2200      	movs	r2, #0
 800efec:	4630      	mov	r0, r6
 800efee:	4639      	mov	r1, r7
 800eff0:	f7f1 f95a 	bl	80002a8 <__aeabi_dsub>
 800eff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eff8:	4606      	mov	r6, r0
 800effa:	460f      	mov	r7, r1
 800effc:	f7f1 fd9c 	bl	8000b38 <__aeabi_dcmpgt>
 800f000:	2800      	cmp	r0, #0
 800f002:	f040 8296 	bne.w	800f532 <_dtoa_r+0x992>
 800f006:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f00a:	4630      	mov	r0, r6
 800f00c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f010:	4639      	mov	r1, r7
 800f012:	f7f1 fd73 	bl	8000afc <__aeabi_dcmplt>
 800f016:	2800      	cmp	r0, #0
 800f018:	f040 8288 	bne.w	800f52c <_dtoa_r+0x98c>
 800f01c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f020:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f026:	2b00      	cmp	r3, #0
 800f028:	f2c0 8158 	blt.w	800f2dc <_dtoa_r+0x73c>
 800f02c:	f1ba 0f0e 	cmp.w	sl, #14
 800f030:	f300 8154 	bgt.w	800f2dc <_dtoa_r+0x73c>
 800f034:	4b6b      	ldr	r3, [pc, #428]	; (800f1e4 <_dtoa_r+0x644>)
 800f036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f03a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f040:	2b00      	cmp	r3, #0
 800f042:	f280 80e3 	bge.w	800f20c <_dtoa_r+0x66c>
 800f046:	9b01      	ldr	r3, [sp, #4]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	f300 80df 	bgt.w	800f20c <_dtoa_r+0x66c>
 800f04e:	f040 826d 	bne.w	800f52c <_dtoa_r+0x98c>
 800f052:	4b69      	ldr	r3, [pc, #420]	; (800f1f8 <_dtoa_r+0x658>)
 800f054:	2200      	movs	r2, #0
 800f056:	4640      	mov	r0, r8
 800f058:	4649      	mov	r1, r9
 800f05a:	f7f1 fadd 	bl	8000618 <__aeabi_dmul>
 800f05e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f062:	f7f1 fd5f 	bl	8000b24 <__aeabi_dcmpge>
 800f066:	9e01      	ldr	r6, [sp, #4]
 800f068:	4637      	mov	r7, r6
 800f06a:	2800      	cmp	r0, #0
 800f06c:	f040 8243 	bne.w	800f4f6 <_dtoa_r+0x956>
 800f070:	9d00      	ldr	r5, [sp, #0]
 800f072:	2331      	movs	r3, #49	; 0x31
 800f074:	f805 3b01 	strb.w	r3, [r5], #1
 800f078:	f10a 0a01 	add.w	sl, sl, #1
 800f07c:	e23f      	b.n	800f4fe <_dtoa_r+0x95e>
 800f07e:	07f2      	lsls	r2, r6, #31
 800f080:	d505      	bpl.n	800f08e <_dtoa_r+0x4ee>
 800f082:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f086:	f7f1 fac7 	bl	8000618 <__aeabi_dmul>
 800f08a:	3501      	adds	r5, #1
 800f08c:	2301      	movs	r3, #1
 800f08e:	1076      	asrs	r6, r6, #1
 800f090:	3708      	adds	r7, #8
 800f092:	e76c      	b.n	800ef6e <_dtoa_r+0x3ce>
 800f094:	2502      	movs	r5, #2
 800f096:	e76f      	b.n	800ef78 <_dtoa_r+0x3d8>
 800f098:	9b01      	ldr	r3, [sp, #4]
 800f09a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f09e:	930c      	str	r3, [sp, #48]	; 0x30
 800f0a0:	e78d      	b.n	800efbe <_dtoa_r+0x41e>
 800f0a2:	9900      	ldr	r1, [sp, #0]
 800f0a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f0a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0a8:	4b4e      	ldr	r3, [pc, #312]	; (800f1e4 <_dtoa_r+0x644>)
 800f0aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0ae:	4401      	add	r1, r0
 800f0b0:	9102      	str	r1, [sp, #8]
 800f0b2:	9908      	ldr	r1, [sp, #32]
 800f0b4:	eeb0 8a47 	vmov.f32	s16, s14
 800f0b8:	eef0 8a67 	vmov.f32	s17, s15
 800f0bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f0c4:	2900      	cmp	r1, #0
 800f0c6:	d045      	beq.n	800f154 <_dtoa_r+0x5b4>
 800f0c8:	494c      	ldr	r1, [pc, #304]	; (800f1fc <_dtoa_r+0x65c>)
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	f7f1 fbce 	bl	800086c <__aeabi_ddiv>
 800f0d0:	ec53 2b18 	vmov	r2, r3, d8
 800f0d4:	f7f1 f8e8 	bl	80002a8 <__aeabi_dsub>
 800f0d8:	9d00      	ldr	r5, [sp, #0]
 800f0da:	ec41 0b18 	vmov	d8, r0, r1
 800f0de:	4639      	mov	r1, r7
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f7f1 fd49 	bl	8000b78 <__aeabi_d2iz>
 800f0e6:	900c      	str	r0, [sp, #48]	; 0x30
 800f0e8:	f7f1 fa2c 	bl	8000544 <__aeabi_i2d>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	4639      	mov	r1, r7
 800f0f4:	f7f1 f8d8 	bl	80002a8 <__aeabi_dsub>
 800f0f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0fa:	3330      	adds	r3, #48	; 0x30
 800f0fc:	f805 3b01 	strb.w	r3, [r5], #1
 800f100:	ec53 2b18 	vmov	r2, r3, d8
 800f104:	4606      	mov	r6, r0
 800f106:	460f      	mov	r7, r1
 800f108:	f7f1 fcf8 	bl	8000afc <__aeabi_dcmplt>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	d165      	bne.n	800f1dc <_dtoa_r+0x63c>
 800f110:	4632      	mov	r2, r6
 800f112:	463b      	mov	r3, r7
 800f114:	4935      	ldr	r1, [pc, #212]	; (800f1ec <_dtoa_r+0x64c>)
 800f116:	2000      	movs	r0, #0
 800f118:	f7f1 f8c6 	bl	80002a8 <__aeabi_dsub>
 800f11c:	ec53 2b18 	vmov	r2, r3, d8
 800f120:	f7f1 fcec 	bl	8000afc <__aeabi_dcmplt>
 800f124:	2800      	cmp	r0, #0
 800f126:	f040 80b9 	bne.w	800f29c <_dtoa_r+0x6fc>
 800f12a:	9b02      	ldr	r3, [sp, #8]
 800f12c:	429d      	cmp	r5, r3
 800f12e:	f43f af75 	beq.w	800f01c <_dtoa_r+0x47c>
 800f132:	4b2f      	ldr	r3, [pc, #188]	; (800f1f0 <_dtoa_r+0x650>)
 800f134:	ec51 0b18 	vmov	r0, r1, d8
 800f138:	2200      	movs	r2, #0
 800f13a:	f7f1 fa6d 	bl	8000618 <__aeabi_dmul>
 800f13e:	4b2c      	ldr	r3, [pc, #176]	; (800f1f0 <_dtoa_r+0x650>)
 800f140:	ec41 0b18 	vmov	d8, r0, r1
 800f144:	2200      	movs	r2, #0
 800f146:	4630      	mov	r0, r6
 800f148:	4639      	mov	r1, r7
 800f14a:	f7f1 fa65 	bl	8000618 <__aeabi_dmul>
 800f14e:	4606      	mov	r6, r0
 800f150:	460f      	mov	r7, r1
 800f152:	e7c4      	b.n	800f0de <_dtoa_r+0x53e>
 800f154:	ec51 0b17 	vmov	r0, r1, d7
 800f158:	f7f1 fa5e 	bl	8000618 <__aeabi_dmul>
 800f15c:	9b02      	ldr	r3, [sp, #8]
 800f15e:	9d00      	ldr	r5, [sp, #0]
 800f160:	930c      	str	r3, [sp, #48]	; 0x30
 800f162:	ec41 0b18 	vmov	d8, r0, r1
 800f166:	4639      	mov	r1, r7
 800f168:	4630      	mov	r0, r6
 800f16a:	f7f1 fd05 	bl	8000b78 <__aeabi_d2iz>
 800f16e:	9011      	str	r0, [sp, #68]	; 0x44
 800f170:	f7f1 f9e8 	bl	8000544 <__aeabi_i2d>
 800f174:	4602      	mov	r2, r0
 800f176:	460b      	mov	r3, r1
 800f178:	4630      	mov	r0, r6
 800f17a:	4639      	mov	r1, r7
 800f17c:	f7f1 f894 	bl	80002a8 <__aeabi_dsub>
 800f180:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f182:	3330      	adds	r3, #48	; 0x30
 800f184:	f805 3b01 	strb.w	r3, [r5], #1
 800f188:	9b02      	ldr	r3, [sp, #8]
 800f18a:	429d      	cmp	r5, r3
 800f18c:	4606      	mov	r6, r0
 800f18e:	460f      	mov	r7, r1
 800f190:	f04f 0200 	mov.w	r2, #0
 800f194:	d134      	bne.n	800f200 <_dtoa_r+0x660>
 800f196:	4b19      	ldr	r3, [pc, #100]	; (800f1fc <_dtoa_r+0x65c>)
 800f198:	ec51 0b18 	vmov	r0, r1, d8
 800f19c:	f7f1 f886 	bl	80002ac <__adddf3>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	4630      	mov	r0, r6
 800f1a6:	4639      	mov	r1, r7
 800f1a8:	f7f1 fcc6 	bl	8000b38 <__aeabi_dcmpgt>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d175      	bne.n	800f29c <_dtoa_r+0x6fc>
 800f1b0:	ec53 2b18 	vmov	r2, r3, d8
 800f1b4:	4911      	ldr	r1, [pc, #68]	; (800f1fc <_dtoa_r+0x65c>)
 800f1b6:	2000      	movs	r0, #0
 800f1b8:	f7f1 f876 	bl	80002a8 <__aeabi_dsub>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	4639      	mov	r1, r7
 800f1c4:	f7f1 fc9a 	bl	8000afc <__aeabi_dcmplt>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	f43f af27 	beq.w	800f01c <_dtoa_r+0x47c>
 800f1ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f1d0:	1e6b      	subs	r3, r5, #1
 800f1d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f1d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f1d8:	2b30      	cmp	r3, #48	; 0x30
 800f1da:	d0f8      	beq.n	800f1ce <_dtoa_r+0x62e>
 800f1dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f1e0:	e04a      	b.n	800f278 <_dtoa_r+0x6d8>
 800f1e2:	bf00      	nop
 800f1e4:	080129d8 	.word	0x080129d8
 800f1e8:	080129b0 	.word	0x080129b0
 800f1ec:	3ff00000 	.word	0x3ff00000
 800f1f0:	40240000 	.word	0x40240000
 800f1f4:	401c0000 	.word	0x401c0000
 800f1f8:	40140000 	.word	0x40140000
 800f1fc:	3fe00000 	.word	0x3fe00000
 800f200:	4baf      	ldr	r3, [pc, #700]	; (800f4c0 <_dtoa_r+0x920>)
 800f202:	f7f1 fa09 	bl	8000618 <__aeabi_dmul>
 800f206:	4606      	mov	r6, r0
 800f208:	460f      	mov	r7, r1
 800f20a:	e7ac      	b.n	800f166 <_dtoa_r+0x5c6>
 800f20c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f210:	9d00      	ldr	r5, [sp, #0]
 800f212:	4642      	mov	r2, r8
 800f214:	464b      	mov	r3, r9
 800f216:	4630      	mov	r0, r6
 800f218:	4639      	mov	r1, r7
 800f21a:	f7f1 fb27 	bl	800086c <__aeabi_ddiv>
 800f21e:	f7f1 fcab 	bl	8000b78 <__aeabi_d2iz>
 800f222:	9002      	str	r0, [sp, #8]
 800f224:	f7f1 f98e 	bl	8000544 <__aeabi_i2d>
 800f228:	4642      	mov	r2, r8
 800f22a:	464b      	mov	r3, r9
 800f22c:	f7f1 f9f4 	bl	8000618 <__aeabi_dmul>
 800f230:	4602      	mov	r2, r0
 800f232:	460b      	mov	r3, r1
 800f234:	4630      	mov	r0, r6
 800f236:	4639      	mov	r1, r7
 800f238:	f7f1 f836 	bl	80002a8 <__aeabi_dsub>
 800f23c:	9e02      	ldr	r6, [sp, #8]
 800f23e:	9f01      	ldr	r7, [sp, #4]
 800f240:	3630      	adds	r6, #48	; 0x30
 800f242:	f805 6b01 	strb.w	r6, [r5], #1
 800f246:	9e00      	ldr	r6, [sp, #0]
 800f248:	1bae      	subs	r6, r5, r6
 800f24a:	42b7      	cmp	r7, r6
 800f24c:	4602      	mov	r2, r0
 800f24e:	460b      	mov	r3, r1
 800f250:	d137      	bne.n	800f2c2 <_dtoa_r+0x722>
 800f252:	f7f1 f82b 	bl	80002ac <__adddf3>
 800f256:	4642      	mov	r2, r8
 800f258:	464b      	mov	r3, r9
 800f25a:	4606      	mov	r6, r0
 800f25c:	460f      	mov	r7, r1
 800f25e:	f7f1 fc6b 	bl	8000b38 <__aeabi_dcmpgt>
 800f262:	b9c8      	cbnz	r0, 800f298 <_dtoa_r+0x6f8>
 800f264:	4642      	mov	r2, r8
 800f266:	464b      	mov	r3, r9
 800f268:	4630      	mov	r0, r6
 800f26a:	4639      	mov	r1, r7
 800f26c:	f7f1 fc3c 	bl	8000ae8 <__aeabi_dcmpeq>
 800f270:	b110      	cbz	r0, 800f278 <_dtoa_r+0x6d8>
 800f272:	9b02      	ldr	r3, [sp, #8]
 800f274:	07d9      	lsls	r1, r3, #31
 800f276:	d40f      	bmi.n	800f298 <_dtoa_r+0x6f8>
 800f278:	4620      	mov	r0, r4
 800f27a:	4659      	mov	r1, fp
 800f27c:	f001 f87e 	bl	801037c <_Bfree>
 800f280:	2300      	movs	r3, #0
 800f282:	702b      	strb	r3, [r5, #0]
 800f284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f286:	f10a 0001 	add.w	r0, sl, #1
 800f28a:	6018      	str	r0, [r3, #0]
 800f28c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f43f acd8 	beq.w	800ec44 <_dtoa_r+0xa4>
 800f294:	601d      	str	r5, [r3, #0]
 800f296:	e4d5      	b.n	800ec44 <_dtoa_r+0xa4>
 800f298:	f8cd a01c 	str.w	sl, [sp, #28]
 800f29c:	462b      	mov	r3, r5
 800f29e:	461d      	mov	r5, r3
 800f2a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2a4:	2a39      	cmp	r2, #57	; 0x39
 800f2a6:	d108      	bne.n	800f2ba <_dtoa_r+0x71a>
 800f2a8:	9a00      	ldr	r2, [sp, #0]
 800f2aa:	429a      	cmp	r2, r3
 800f2ac:	d1f7      	bne.n	800f29e <_dtoa_r+0x6fe>
 800f2ae:	9a07      	ldr	r2, [sp, #28]
 800f2b0:	9900      	ldr	r1, [sp, #0]
 800f2b2:	3201      	adds	r2, #1
 800f2b4:	9207      	str	r2, [sp, #28]
 800f2b6:	2230      	movs	r2, #48	; 0x30
 800f2b8:	700a      	strb	r2, [r1, #0]
 800f2ba:	781a      	ldrb	r2, [r3, #0]
 800f2bc:	3201      	adds	r2, #1
 800f2be:	701a      	strb	r2, [r3, #0]
 800f2c0:	e78c      	b.n	800f1dc <_dtoa_r+0x63c>
 800f2c2:	4b7f      	ldr	r3, [pc, #508]	; (800f4c0 <_dtoa_r+0x920>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	f7f1 f9a7 	bl	8000618 <__aeabi_dmul>
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	4606      	mov	r6, r0
 800f2d0:	460f      	mov	r7, r1
 800f2d2:	f7f1 fc09 	bl	8000ae8 <__aeabi_dcmpeq>
 800f2d6:	2800      	cmp	r0, #0
 800f2d8:	d09b      	beq.n	800f212 <_dtoa_r+0x672>
 800f2da:	e7cd      	b.n	800f278 <_dtoa_r+0x6d8>
 800f2dc:	9a08      	ldr	r2, [sp, #32]
 800f2de:	2a00      	cmp	r2, #0
 800f2e0:	f000 80c4 	beq.w	800f46c <_dtoa_r+0x8cc>
 800f2e4:	9a05      	ldr	r2, [sp, #20]
 800f2e6:	2a01      	cmp	r2, #1
 800f2e8:	f300 80a8 	bgt.w	800f43c <_dtoa_r+0x89c>
 800f2ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f2ee:	2a00      	cmp	r2, #0
 800f2f0:	f000 80a0 	beq.w	800f434 <_dtoa_r+0x894>
 800f2f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f2f8:	9e06      	ldr	r6, [sp, #24]
 800f2fa:	4645      	mov	r5, r8
 800f2fc:	9a04      	ldr	r2, [sp, #16]
 800f2fe:	2101      	movs	r1, #1
 800f300:	441a      	add	r2, r3
 800f302:	4620      	mov	r0, r4
 800f304:	4498      	add	r8, r3
 800f306:	9204      	str	r2, [sp, #16]
 800f308:	f001 f93e 	bl	8010588 <__i2b>
 800f30c:	4607      	mov	r7, r0
 800f30e:	2d00      	cmp	r5, #0
 800f310:	dd0b      	ble.n	800f32a <_dtoa_r+0x78a>
 800f312:	9b04      	ldr	r3, [sp, #16]
 800f314:	2b00      	cmp	r3, #0
 800f316:	dd08      	ble.n	800f32a <_dtoa_r+0x78a>
 800f318:	42ab      	cmp	r3, r5
 800f31a:	9a04      	ldr	r2, [sp, #16]
 800f31c:	bfa8      	it	ge
 800f31e:	462b      	movge	r3, r5
 800f320:	eba8 0803 	sub.w	r8, r8, r3
 800f324:	1aed      	subs	r5, r5, r3
 800f326:	1ad3      	subs	r3, r2, r3
 800f328:	9304      	str	r3, [sp, #16]
 800f32a:	9b06      	ldr	r3, [sp, #24]
 800f32c:	b1fb      	cbz	r3, 800f36e <_dtoa_r+0x7ce>
 800f32e:	9b08      	ldr	r3, [sp, #32]
 800f330:	2b00      	cmp	r3, #0
 800f332:	f000 809f 	beq.w	800f474 <_dtoa_r+0x8d4>
 800f336:	2e00      	cmp	r6, #0
 800f338:	dd11      	ble.n	800f35e <_dtoa_r+0x7be>
 800f33a:	4639      	mov	r1, r7
 800f33c:	4632      	mov	r2, r6
 800f33e:	4620      	mov	r0, r4
 800f340:	f001 f9de 	bl	8010700 <__pow5mult>
 800f344:	465a      	mov	r2, fp
 800f346:	4601      	mov	r1, r0
 800f348:	4607      	mov	r7, r0
 800f34a:	4620      	mov	r0, r4
 800f34c:	f001 f932 	bl	80105b4 <__multiply>
 800f350:	4659      	mov	r1, fp
 800f352:	9007      	str	r0, [sp, #28]
 800f354:	4620      	mov	r0, r4
 800f356:	f001 f811 	bl	801037c <_Bfree>
 800f35a:	9b07      	ldr	r3, [sp, #28]
 800f35c:	469b      	mov	fp, r3
 800f35e:	9b06      	ldr	r3, [sp, #24]
 800f360:	1b9a      	subs	r2, r3, r6
 800f362:	d004      	beq.n	800f36e <_dtoa_r+0x7ce>
 800f364:	4659      	mov	r1, fp
 800f366:	4620      	mov	r0, r4
 800f368:	f001 f9ca 	bl	8010700 <__pow5mult>
 800f36c:	4683      	mov	fp, r0
 800f36e:	2101      	movs	r1, #1
 800f370:	4620      	mov	r0, r4
 800f372:	f001 f909 	bl	8010588 <__i2b>
 800f376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f378:	2b00      	cmp	r3, #0
 800f37a:	4606      	mov	r6, r0
 800f37c:	dd7c      	ble.n	800f478 <_dtoa_r+0x8d8>
 800f37e:	461a      	mov	r2, r3
 800f380:	4601      	mov	r1, r0
 800f382:	4620      	mov	r0, r4
 800f384:	f001 f9bc 	bl	8010700 <__pow5mult>
 800f388:	9b05      	ldr	r3, [sp, #20]
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	4606      	mov	r6, r0
 800f38e:	dd76      	ble.n	800f47e <_dtoa_r+0x8de>
 800f390:	2300      	movs	r3, #0
 800f392:	9306      	str	r3, [sp, #24]
 800f394:	6933      	ldr	r3, [r6, #16]
 800f396:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f39a:	6918      	ldr	r0, [r3, #16]
 800f39c:	f001 f8a4 	bl	80104e8 <__hi0bits>
 800f3a0:	f1c0 0020 	rsb	r0, r0, #32
 800f3a4:	9b04      	ldr	r3, [sp, #16]
 800f3a6:	4418      	add	r0, r3
 800f3a8:	f010 001f 	ands.w	r0, r0, #31
 800f3ac:	f000 8086 	beq.w	800f4bc <_dtoa_r+0x91c>
 800f3b0:	f1c0 0320 	rsb	r3, r0, #32
 800f3b4:	2b04      	cmp	r3, #4
 800f3b6:	dd7f      	ble.n	800f4b8 <_dtoa_r+0x918>
 800f3b8:	f1c0 001c 	rsb	r0, r0, #28
 800f3bc:	9b04      	ldr	r3, [sp, #16]
 800f3be:	4403      	add	r3, r0
 800f3c0:	4480      	add	r8, r0
 800f3c2:	4405      	add	r5, r0
 800f3c4:	9304      	str	r3, [sp, #16]
 800f3c6:	f1b8 0f00 	cmp.w	r8, #0
 800f3ca:	dd05      	ble.n	800f3d8 <_dtoa_r+0x838>
 800f3cc:	4659      	mov	r1, fp
 800f3ce:	4642      	mov	r2, r8
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f001 f9ef 	bl	80107b4 <__lshift>
 800f3d6:	4683      	mov	fp, r0
 800f3d8:	9b04      	ldr	r3, [sp, #16]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	dd05      	ble.n	800f3ea <_dtoa_r+0x84a>
 800f3de:	4631      	mov	r1, r6
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	4620      	mov	r0, r4
 800f3e4:	f001 f9e6 	bl	80107b4 <__lshift>
 800f3e8:	4606      	mov	r6, r0
 800f3ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d069      	beq.n	800f4c4 <_dtoa_r+0x924>
 800f3f0:	4631      	mov	r1, r6
 800f3f2:	4658      	mov	r0, fp
 800f3f4:	f001 fa4a 	bl	801088c <__mcmp>
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	da63      	bge.n	800f4c4 <_dtoa_r+0x924>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	4659      	mov	r1, fp
 800f400:	220a      	movs	r2, #10
 800f402:	4620      	mov	r0, r4
 800f404:	f000 ffdc 	bl	80103c0 <__multadd>
 800f408:	9b08      	ldr	r3, [sp, #32]
 800f40a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f40e:	4683      	mov	fp, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	f000 818f 	beq.w	800f734 <_dtoa_r+0xb94>
 800f416:	4639      	mov	r1, r7
 800f418:	2300      	movs	r3, #0
 800f41a:	220a      	movs	r2, #10
 800f41c:	4620      	mov	r0, r4
 800f41e:	f000 ffcf 	bl	80103c0 <__multadd>
 800f422:	f1b9 0f00 	cmp.w	r9, #0
 800f426:	4607      	mov	r7, r0
 800f428:	f300 808e 	bgt.w	800f548 <_dtoa_r+0x9a8>
 800f42c:	9b05      	ldr	r3, [sp, #20]
 800f42e:	2b02      	cmp	r3, #2
 800f430:	dc50      	bgt.n	800f4d4 <_dtoa_r+0x934>
 800f432:	e089      	b.n	800f548 <_dtoa_r+0x9a8>
 800f434:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f43a:	e75d      	b.n	800f2f8 <_dtoa_r+0x758>
 800f43c:	9b01      	ldr	r3, [sp, #4]
 800f43e:	1e5e      	subs	r6, r3, #1
 800f440:	9b06      	ldr	r3, [sp, #24]
 800f442:	42b3      	cmp	r3, r6
 800f444:	bfbf      	itttt	lt
 800f446:	9b06      	ldrlt	r3, [sp, #24]
 800f448:	9606      	strlt	r6, [sp, #24]
 800f44a:	1af2      	sublt	r2, r6, r3
 800f44c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f44e:	bfb6      	itet	lt
 800f450:	189b      	addlt	r3, r3, r2
 800f452:	1b9e      	subge	r6, r3, r6
 800f454:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f456:	9b01      	ldr	r3, [sp, #4]
 800f458:	bfb8      	it	lt
 800f45a:	2600      	movlt	r6, #0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	bfb5      	itete	lt
 800f460:	eba8 0503 	sublt.w	r5, r8, r3
 800f464:	9b01      	ldrge	r3, [sp, #4]
 800f466:	2300      	movlt	r3, #0
 800f468:	4645      	movge	r5, r8
 800f46a:	e747      	b.n	800f2fc <_dtoa_r+0x75c>
 800f46c:	9e06      	ldr	r6, [sp, #24]
 800f46e:	9f08      	ldr	r7, [sp, #32]
 800f470:	4645      	mov	r5, r8
 800f472:	e74c      	b.n	800f30e <_dtoa_r+0x76e>
 800f474:	9a06      	ldr	r2, [sp, #24]
 800f476:	e775      	b.n	800f364 <_dtoa_r+0x7c4>
 800f478:	9b05      	ldr	r3, [sp, #20]
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	dc18      	bgt.n	800f4b0 <_dtoa_r+0x910>
 800f47e:	9b02      	ldr	r3, [sp, #8]
 800f480:	b9b3      	cbnz	r3, 800f4b0 <_dtoa_r+0x910>
 800f482:	9b03      	ldr	r3, [sp, #12]
 800f484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f488:	b9a3      	cbnz	r3, 800f4b4 <_dtoa_r+0x914>
 800f48a:	9b03      	ldr	r3, [sp, #12]
 800f48c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f490:	0d1b      	lsrs	r3, r3, #20
 800f492:	051b      	lsls	r3, r3, #20
 800f494:	b12b      	cbz	r3, 800f4a2 <_dtoa_r+0x902>
 800f496:	9b04      	ldr	r3, [sp, #16]
 800f498:	3301      	adds	r3, #1
 800f49a:	9304      	str	r3, [sp, #16]
 800f49c:	f108 0801 	add.w	r8, r8, #1
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	9306      	str	r3, [sp, #24]
 800f4a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f47f af74 	bne.w	800f394 <_dtoa_r+0x7f4>
 800f4ac:	2001      	movs	r0, #1
 800f4ae:	e779      	b.n	800f3a4 <_dtoa_r+0x804>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	e7f6      	b.n	800f4a2 <_dtoa_r+0x902>
 800f4b4:	9b02      	ldr	r3, [sp, #8]
 800f4b6:	e7f4      	b.n	800f4a2 <_dtoa_r+0x902>
 800f4b8:	d085      	beq.n	800f3c6 <_dtoa_r+0x826>
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	301c      	adds	r0, #28
 800f4be:	e77d      	b.n	800f3bc <_dtoa_r+0x81c>
 800f4c0:	40240000 	.word	0x40240000
 800f4c4:	9b01      	ldr	r3, [sp, #4]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	dc38      	bgt.n	800f53c <_dtoa_r+0x99c>
 800f4ca:	9b05      	ldr	r3, [sp, #20]
 800f4cc:	2b02      	cmp	r3, #2
 800f4ce:	dd35      	ble.n	800f53c <_dtoa_r+0x99c>
 800f4d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f4d4:	f1b9 0f00 	cmp.w	r9, #0
 800f4d8:	d10d      	bne.n	800f4f6 <_dtoa_r+0x956>
 800f4da:	4631      	mov	r1, r6
 800f4dc:	464b      	mov	r3, r9
 800f4de:	2205      	movs	r2, #5
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f000 ff6d 	bl	80103c0 <__multadd>
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	4606      	mov	r6, r0
 800f4ea:	4658      	mov	r0, fp
 800f4ec:	f001 f9ce 	bl	801088c <__mcmp>
 800f4f0:	2800      	cmp	r0, #0
 800f4f2:	f73f adbd 	bgt.w	800f070 <_dtoa_r+0x4d0>
 800f4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4f8:	9d00      	ldr	r5, [sp, #0]
 800f4fa:	ea6f 0a03 	mvn.w	sl, r3
 800f4fe:	f04f 0800 	mov.w	r8, #0
 800f502:	4631      	mov	r1, r6
 800f504:	4620      	mov	r0, r4
 800f506:	f000 ff39 	bl	801037c <_Bfree>
 800f50a:	2f00      	cmp	r7, #0
 800f50c:	f43f aeb4 	beq.w	800f278 <_dtoa_r+0x6d8>
 800f510:	f1b8 0f00 	cmp.w	r8, #0
 800f514:	d005      	beq.n	800f522 <_dtoa_r+0x982>
 800f516:	45b8      	cmp	r8, r7
 800f518:	d003      	beq.n	800f522 <_dtoa_r+0x982>
 800f51a:	4641      	mov	r1, r8
 800f51c:	4620      	mov	r0, r4
 800f51e:	f000 ff2d 	bl	801037c <_Bfree>
 800f522:	4639      	mov	r1, r7
 800f524:	4620      	mov	r0, r4
 800f526:	f000 ff29 	bl	801037c <_Bfree>
 800f52a:	e6a5      	b.n	800f278 <_dtoa_r+0x6d8>
 800f52c:	2600      	movs	r6, #0
 800f52e:	4637      	mov	r7, r6
 800f530:	e7e1      	b.n	800f4f6 <_dtoa_r+0x956>
 800f532:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f534:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f538:	4637      	mov	r7, r6
 800f53a:	e599      	b.n	800f070 <_dtoa_r+0x4d0>
 800f53c:	9b08      	ldr	r3, [sp, #32]
 800f53e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	f000 80fd 	beq.w	800f742 <_dtoa_r+0xba2>
 800f548:	2d00      	cmp	r5, #0
 800f54a:	dd05      	ble.n	800f558 <_dtoa_r+0x9b8>
 800f54c:	4639      	mov	r1, r7
 800f54e:	462a      	mov	r2, r5
 800f550:	4620      	mov	r0, r4
 800f552:	f001 f92f 	bl	80107b4 <__lshift>
 800f556:	4607      	mov	r7, r0
 800f558:	9b06      	ldr	r3, [sp, #24]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d05c      	beq.n	800f618 <_dtoa_r+0xa78>
 800f55e:	6879      	ldr	r1, [r7, #4]
 800f560:	4620      	mov	r0, r4
 800f562:	f000 fecb 	bl	80102fc <_Balloc>
 800f566:	4605      	mov	r5, r0
 800f568:	b928      	cbnz	r0, 800f576 <_dtoa_r+0x9d6>
 800f56a:	4b80      	ldr	r3, [pc, #512]	; (800f76c <_dtoa_r+0xbcc>)
 800f56c:	4602      	mov	r2, r0
 800f56e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f572:	f7ff bb2e 	b.w	800ebd2 <_dtoa_r+0x32>
 800f576:	693a      	ldr	r2, [r7, #16]
 800f578:	3202      	adds	r2, #2
 800f57a:	0092      	lsls	r2, r2, #2
 800f57c:	f107 010c 	add.w	r1, r7, #12
 800f580:	300c      	adds	r0, #12
 800f582:	f7fd fad9 	bl	800cb38 <memcpy>
 800f586:	2201      	movs	r2, #1
 800f588:	4629      	mov	r1, r5
 800f58a:	4620      	mov	r0, r4
 800f58c:	f001 f912 	bl	80107b4 <__lshift>
 800f590:	9b00      	ldr	r3, [sp, #0]
 800f592:	3301      	adds	r3, #1
 800f594:	9301      	str	r3, [sp, #4]
 800f596:	9b00      	ldr	r3, [sp, #0]
 800f598:	444b      	add	r3, r9
 800f59a:	9307      	str	r3, [sp, #28]
 800f59c:	9b02      	ldr	r3, [sp, #8]
 800f59e:	f003 0301 	and.w	r3, r3, #1
 800f5a2:	46b8      	mov	r8, r7
 800f5a4:	9306      	str	r3, [sp, #24]
 800f5a6:	4607      	mov	r7, r0
 800f5a8:	9b01      	ldr	r3, [sp, #4]
 800f5aa:	4631      	mov	r1, r6
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	4658      	mov	r0, fp
 800f5b0:	9302      	str	r3, [sp, #8]
 800f5b2:	f7ff fa69 	bl	800ea88 <quorem>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	3330      	adds	r3, #48	; 0x30
 800f5ba:	9004      	str	r0, [sp, #16]
 800f5bc:	4641      	mov	r1, r8
 800f5be:	4658      	mov	r0, fp
 800f5c0:	9308      	str	r3, [sp, #32]
 800f5c2:	f001 f963 	bl	801088c <__mcmp>
 800f5c6:	463a      	mov	r2, r7
 800f5c8:	4681      	mov	r9, r0
 800f5ca:	4631      	mov	r1, r6
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	f001 f979 	bl	80108c4 <__mdiff>
 800f5d2:	68c2      	ldr	r2, [r0, #12]
 800f5d4:	9b08      	ldr	r3, [sp, #32]
 800f5d6:	4605      	mov	r5, r0
 800f5d8:	bb02      	cbnz	r2, 800f61c <_dtoa_r+0xa7c>
 800f5da:	4601      	mov	r1, r0
 800f5dc:	4658      	mov	r0, fp
 800f5de:	f001 f955 	bl	801088c <__mcmp>
 800f5e2:	9b08      	ldr	r3, [sp, #32]
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	4620      	mov	r0, r4
 800f5ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f5ee:	f000 fec5 	bl	801037c <_Bfree>
 800f5f2:	9b05      	ldr	r3, [sp, #20]
 800f5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5f6:	9d01      	ldr	r5, [sp, #4]
 800f5f8:	ea43 0102 	orr.w	r1, r3, r2
 800f5fc:	9b06      	ldr	r3, [sp, #24]
 800f5fe:	430b      	orrs	r3, r1
 800f600:	9b08      	ldr	r3, [sp, #32]
 800f602:	d10d      	bne.n	800f620 <_dtoa_r+0xa80>
 800f604:	2b39      	cmp	r3, #57	; 0x39
 800f606:	d029      	beq.n	800f65c <_dtoa_r+0xabc>
 800f608:	f1b9 0f00 	cmp.w	r9, #0
 800f60c:	dd01      	ble.n	800f612 <_dtoa_r+0xa72>
 800f60e:	9b04      	ldr	r3, [sp, #16]
 800f610:	3331      	adds	r3, #49	; 0x31
 800f612:	9a02      	ldr	r2, [sp, #8]
 800f614:	7013      	strb	r3, [r2, #0]
 800f616:	e774      	b.n	800f502 <_dtoa_r+0x962>
 800f618:	4638      	mov	r0, r7
 800f61a:	e7b9      	b.n	800f590 <_dtoa_r+0x9f0>
 800f61c:	2201      	movs	r2, #1
 800f61e:	e7e2      	b.n	800f5e6 <_dtoa_r+0xa46>
 800f620:	f1b9 0f00 	cmp.w	r9, #0
 800f624:	db06      	blt.n	800f634 <_dtoa_r+0xa94>
 800f626:	9905      	ldr	r1, [sp, #20]
 800f628:	ea41 0909 	orr.w	r9, r1, r9
 800f62c:	9906      	ldr	r1, [sp, #24]
 800f62e:	ea59 0101 	orrs.w	r1, r9, r1
 800f632:	d120      	bne.n	800f676 <_dtoa_r+0xad6>
 800f634:	2a00      	cmp	r2, #0
 800f636:	ddec      	ble.n	800f612 <_dtoa_r+0xa72>
 800f638:	4659      	mov	r1, fp
 800f63a:	2201      	movs	r2, #1
 800f63c:	4620      	mov	r0, r4
 800f63e:	9301      	str	r3, [sp, #4]
 800f640:	f001 f8b8 	bl	80107b4 <__lshift>
 800f644:	4631      	mov	r1, r6
 800f646:	4683      	mov	fp, r0
 800f648:	f001 f920 	bl	801088c <__mcmp>
 800f64c:	2800      	cmp	r0, #0
 800f64e:	9b01      	ldr	r3, [sp, #4]
 800f650:	dc02      	bgt.n	800f658 <_dtoa_r+0xab8>
 800f652:	d1de      	bne.n	800f612 <_dtoa_r+0xa72>
 800f654:	07da      	lsls	r2, r3, #31
 800f656:	d5dc      	bpl.n	800f612 <_dtoa_r+0xa72>
 800f658:	2b39      	cmp	r3, #57	; 0x39
 800f65a:	d1d8      	bne.n	800f60e <_dtoa_r+0xa6e>
 800f65c:	9a02      	ldr	r2, [sp, #8]
 800f65e:	2339      	movs	r3, #57	; 0x39
 800f660:	7013      	strb	r3, [r2, #0]
 800f662:	462b      	mov	r3, r5
 800f664:	461d      	mov	r5, r3
 800f666:	3b01      	subs	r3, #1
 800f668:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f66c:	2a39      	cmp	r2, #57	; 0x39
 800f66e:	d050      	beq.n	800f712 <_dtoa_r+0xb72>
 800f670:	3201      	adds	r2, #1
 800f672:	701a      	strb	r2, [r3, #0]
 800f674:	e745      	b.n	800f502 <_dtoa_r+0x962>
 800f676:	2a00      	cmp	r2, #0
 800f678:	dd03      	ble.n	800f682 <_dtoa_r+0xae2>
 800f67a:	2b39      	cmp	r3, #57	; 0x39
 800f67c:	d0ee      	beq.n	800f65c <_dtoa_r+0xabc>
 800f67e:	3301      	adds	r3, #1
 800f680:	e7c7      	b.n	800f612 <_dtoa_r+0xa72>
 800f682:	9a01      	ldr	r2, [sp, #4]
 800f684:	9907      	ldr	r1, [sp, #28]
 800f686:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f68a:	428a      	cmp	r2, r1
 800f68c:	d02a      	beq.n	800f6e4 <_dtoa_r+0xb44>
 800f68e:	4659      	mov	r1, fp
 800f690:	2300      	movs	r3, #0
 800f692:	220a      	movs	r2, #10
 800f694:	4620      	mov	r0, r4
 800f696:	f000 fe93 	bl	80103c0 <__multadd>
 800f69a:	45b8      	cmp	r8, r7
 800f69c:	4683      	mov	fp, r0
 800f69e:	f04f 0300 	mov.w	r3, #0
 800f6a2:	f04f 020a 	mov.w	r2, #10
 800f6a6:	4641      	mov	r1, r8
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	d107      	bne.n	800f6bc <_dtoa_r+0xb1c>
 800f6ac:	f000 fe88 	bl	80103c0 <__multadd>
 800f6b0:	4680      	mov	r8, r0
 800f6b2:	4607      	mov	r7, r0
 800f6b4:	9b01      	ldr	r3, [sp, #4]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	9301      	str	r3, [sp, #4]
 800f6ba:	e775      	b.n	800f5a8 <_dtoa_r+0xa08>
 800f6bc:	f000 fe80 	bl	80103c0 <__multadd>
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	4680      	mov	r8, r0
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	220a      	movs	r2, #10
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f000 fe79 	bl	80103c0 <__multadd>
 800f6ce:	4607      	mov	r7, r0
 800f6d0:	e7f0      	b.n	800f6b4 <_dtoa_r+0xb14>
 800f6d2:	f1b9 0f00 	cmp.w	r9, #0
 800f6d6:	9a00      	ldr	r2, [sp, #0]
 800f6d8:	bfcc      	ite	gt
 800f6da:	464d      	movgt	r5, r9
 800f6dc:	2501      	movle	r5, #1
 800f6de:	4415      	add	r5, r2
 800f6e0:	f04f 0800 	mov.w	r8, #0
 800f6e4:	4659      	mov	r1, fp
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	9301      	str	r3, [sp, #4]
 800f6ec:	f001 f862 	bl	80107b4 <__lshift>
 800f6f0:	4631      	mov	r1, r6
 800f6f2:	4683      	mov	fp, r0
 800f6f4:	f001 f8ca 	bl	801088c <__mcmp>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	dcb2      	bgt.n	800f662 <_dtoa_r+0xac2>
 800f6fc:	d102      	bne.n	800f704 <_dtoa_r+0xb64>
 800f6fe:	9b01      	ldr	r3, [sp, #4]
 800f700:	07db      	lsls	r3, r3, #31
 800f702:	d4ae      	bmi.n	800f662 <_dtoa_r+0xac2>
 800f704:	462b      	mov	r3, r5
 800f706:	461d      	mov	r5, r3
 800f708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f70c:	2a30      	cmp	r2, #48	; 0x30
 800f70e:	d0fa      	beq.n	800f706 <_dtoa_r+0xb66>
 800f710:	e6f7      	b.n	800f502 <_dtoa_r+0x962>
 800f712:	9a00      	ldr	r2, [sp, #0]
 800f714:	429a      	cmp	r2, r3
 800f716:	d1a5      	bne.n	800f664 <_dtoa_r+0xac4>
 800f718:	f10a 0a01 	add.w	sl, sl, #1
 800f71c:	2331      	movs	r3, #49	; 0x31
 800f71e:	e779      	b.n	800f614 <_dtoa_r+0xa74>
 800f720:	4b13      	ldr	r3, [pc, #76]	; (800f770 <_dtoa_r+0xbd0>)
 800f722:	f7ff baaf 	b.w	800ec84 <_dtoa_r+0xe4>
 800f726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f47f aa86 	bne.w	800ec3a <_dtoa_r+0x9a>
 800f72e:	4b11      	ldr	r3, [pc, #68]	; (800f774 <_dtoa_r+0xbd4>)
 800f730:	f7ff baa8 	b.w	800ec84 <_dtoa_r+0xe4>
 800f734:	f1b9 0f00 	cmp.w	r9, #0
 800f738:	dc03      	bgt.n	800f742 <_dtoa_r+0xba2>
 800f73a:	9b05      	ldr	r3, [sp, #20]
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	f73f aec9 	bgt.w	800f4d4 <_dtoa_r+0x934>
 800f742:	9d00      	ldr	r5, [sp, #0]
 800f744:	4631      	mov	r1, r6
 800f746:	4658      	mov	r0, fp
 800f748:	f7ff f99e 	bl	800ea88 <quorem>
 800f74c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f750:	f805 3b01 	strb.w	r3, [r5], #1
 800f754:	9a00      	ldr	r2, [sp, #0]
 800f756:	1aaa      	subs	r2, r5, r2
 800f758:	4591      	cmp	r9, r2
 800f75a:	ddba      	ble.n	800f6d2 <_dtoa_r+0xb32>
 800f75c:	4659      	mov	r1, fp
 800f75e:	2300      	movs	r3, #0
 800f760:	220a      	movs	r2, #10
 800f762:	4620      	mov	r0, r4
 800f764:	f000 fe2c 	bl	80103c0 <__multadd>
 800f768:	4683      	mov	fp, r0
 800f76a:	e7eb      	b.n	800f744 <_dtoa_r+0xba4>
 800f76c:	0801285b 	.word	0x0801285b
 800f770:	0801275c 	.word	0x0801275c
 800f774:	080127d8 	.word	0x080127d8

0800f778 <__sflush_r>:
 800f778:	898a      	ldrh	r2, [r1, #12]
 800f77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f77e:	4605      	mov	r5, r0
 800f780:	0710      	lsls	r0, r2, #28
 800f782:	460c      	mov	r4, r1
 800f784:	d458      	bmi.n	800f838 <__sflush_r+0xc0>
 800f786:	684b      	ldr	r3, [r1, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	dc05      	bgt.n	800f798 <__sflush_r+0x20>
 800f78c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f78e:	2b00      	cmp	r3, #0
 800f790:	dc02      	bgt.n	800f798 <__sflush_r+0x20>
 800f792:	2000      	movs	r0, #0
 800f794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f79a:	2e00      	cmp	r6, #0
 800f79c:	d0f9      	beq.n	800f792 <__sflush_r+0x1a>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f7a4:	682f      	ldr	r7, [r5, #0]
 800f7a6:	602b      	str	r3, [r5, #0]
 800f7a8:	d032      	beq.n	800f810 <__sflush_r+0x98>
 800f7aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f7ac:	89a3      	ldrh	r3, [r4, #12]
 800f7ae:	075a      	lsls	r2, r3, #29
 800f7b0:	d505      	bpl.n	800f7be <__sflush_r+0x46>
 800f7b2:	6863      	ldr	r3, [r4, #4]
 800f7b4:	1ac0      	subs	r0, r0, r3
 800f7b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7b8:	b10b      	cbz	r3, 800f7be <__sflush_r+0x46>
 800f7ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7bc:	1ac0      	subs	r0, r0, r3
 800f7be:	2300      	movs	r3, #0
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7c4:	6a21      	ldr	r1, [r4, #32]
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	47b0      	blx	r6
 800f7ca:	1c43      	adds	r3, r0, #1
 800f7cc:	89a3      	ldrh	r3, [r4, #12]
 800f7ce:	d106      	bne.n	800f7de <__sflush_r+0x66>
 800f7d0:	6829      	ldr	r1, [r5, #0]
 800f7d2:	291d      	cmp	r1, #29
 800f7d4:	d82c      	bhi.n	800f830 <__sflush_r+0xb8>
 800f7d6:	4a2a      	ldr	r2, [pc, #168]	; (800f880 <__sflush_r+0x108>)
 800f7d8:	40ca      	lsrs	r2, r1
 800f7da:	07d6      	lsls	r6, r2, #31
 800f7dc:	d528      	bpl.n	800f830 <__sflush_r+0xb8>
 800f7de:	2200      	movs	r2, #0
 800f7e0:	6062      	str	r2, [r4, #4]
 800f7e2:	04d9      	lsls	r1, r3, #19
 800f7e4:	6922      	ldr	r2, [r4, #16]
 800f7e6:	6022      	str	r2, [r4, #0]
 800f7e8:	d504      	bpl.n	800f7f4 <__sflush_r+0x7c>
 800f7ea:	1c42      	adds	r2, r0, #1
 800f7ec:	d101      	bne.n	800f7f2 <__sflush_r+0x7a>
 800f7ee:	682b      	ldr	r3, [r5, #0]
 800f7f0:	b903      	cbnz	r3, 800f7f4 <__sflush_r+0x7c>
 800f7f2:	6560      	str	r0, [r4, #84]	; 0x54
 800f7f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7f6:	602f      	str	r7, [r5, #0]
 800f7f8:	2900      	cmp	r1, #0
 800f7fa:	d0ca      	beq.n	800f792 <__sflush_r+0x1a>
 800f7fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f800:	4299      	cmp	r1, r3
 800f802:	d002      	beq.n	800f80a <__sflush_r+0x92>
 800f804:	4628      	mov	r0, r5
 800f806:	f7fd f9ad 	bl	800cb64 <_free_r>
 800f80a:	2000      	movs	r0, #0
 800f80c:	6360      	str	r0, [r4, #52]	; 0x34
 800f80e:	e7c1      	b.n	800f794 <__sflush_r+0x1c>
 800f810:	6a21      	ldr	r1, [r4, #32]
 800f812:	2301      	movs	r3, #1
 800f814:	4628      	mov	r0, r5
 800f816:	47b0      	blx	r6
 800f818:	1c41      	adds	r1, r0, #1
 800f81a:	d1c7      	bne.n	800f7ac <__sflush_r+0x34>
 800f81c:	682b      	ldr	r3, [r5, #0]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d0c4      	beq.n	800f7ac <__sflush_r+0x34>
 800f822:	2b1d      	cmp	r3, #29
 800f824:	d001      	beq.n	800f82a <__sflush_r+0xb2>
 800f826:	2b16      	cmp	r3, #22
 800f828:	d101      	bne.n	800f82e <__sflush_r+0xb6>
 800f82a:	602f      	str	r7, [r5, #0]
 800f82c:	e7b1      	b.n	800f792 <__sflush_r+0x1a>
 800f82e:	89a3      	ldrh	r3, [r4, #12]
 800f830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f834:	81a3      	strh	r3, [r4, #12]
 800f836:	e7ad      	b.n	800f794 <__sflush_r+0x1c>
 800f838:	690f      	ldr	r7, [r1, #16]
 800f83a:	2f00      	cmp	r7, #0
 800f83c:	d0a9      	beq.n	800f792 <__sflush_r+0x1a>
 800f83e:	0793      	lsls	r3, r2, #30
 800f840:	680e      	ldr	r6, [r1, #0]
 800f842:	bf08      	it	eq
 800f844:	694b      	ldreq	r3, [r1, #20]
 800f846:	600f      	str	r7, [r1, #0]
 800f848:	bf18      	it	ne
 800f84a:	2300      	movne	r3, #0
 800f84c:	eba6 0807 	sub.w	r8, r6, r7
 800f850:	608b      	str	r3, [r1, #8]
 800f852:	f1b8 0f00 	cmp.w	r8, #0
 800f856:	dd9c      	ble.n	800f792 <__sflush_r+0x1a>
 800f858:	6a21      	ldr	r1, [r4, #32]
 800f85a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f85c:	4643      	mov	r3, r8
 800f85e:	463a      	mov	r2, r7
 800f860:	4628      	mov	r0, r5
 800f862:	47b0      	blx	r6
 800f864:	2800      	cmp	r0, #0
 800f866:	dc06      	bgt.n	800f876 <__sflush_r+0xfe>
 800f868:	89a3      	ldrh	r3, [r4, #12]
 800f86a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f86e:	81a3      	strh	r3, [r4, #12]
 800f870:	f04f 30ff 	mov.w	r0, #4294967295
 800f874:	e78e      	b.n	800f794 <__sflush_r+0x1c>
 800f876:	4407      	add	r7, r0
 800f878:	eba8 0800 	sub.w	r8, r8, r0
 800f87c:	e7e9      	b.n	800f852 <__sflush_r+0xda>
 800f87e:	bf00      	nop
 800f880:	20400001 	.word	0x20400001

0800f884 <_fflush_r>:
 800f884:	b538      	push	{r3, r4, r5, lr}
 800f886:	690b      	ldr	r3, [r1, #16]
 800f888:	4605      	mov	r5, r0
 800f88a:	460c      	mov	r4, r1
 800f88c:	b913      	cbnz	r3, 800f894 <_fflush_r+0x10>
 800f88e:	2500      	movs	r5, #0
 800f890:	4628      	mov	r0, r5
 800f892:	bd38      	pop	{r3, r4, r5, pc}
 800f894:	b118      	cbz	r0, 800f89e <_fflush_r+0x1a>
 800f896:	6983      	ldr	r3, [r0, #24]
 800f898:	b90b      	cbnz	r3, 800f89e <_fflush_r+0x1a>
 800f89a:	f000 f887 	bl	800f9ac <__sinit>
 800f89e:	4b14      	ldr	r3, [pc, #80]	; (800f8f0 <_fflush_r+0x6c>)
 800f8a0:	429c      	cmp	r4, r3
 800f8a2:	d11b      	bne.n	800f8dc <_fflush_r+0x58>
 800f8a4:	686c      	ldr	r4, [r5, #4]
 800f8a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d0ef      	beq.n	800f88e <_fflush_r+0xa>
 800f8ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8b0:	07d0      	lsls	r0, r2, #31
 800f8b2:	d404      	bmi.n	800f8be <_fflush_r+0x3a>
 800f8b4:	0599      	lsls	r1, r3, #22
 800f8b6:	d402      	bmi.n	800f8be <_fflush_r+0x3a>
 800f8b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8ba:	f000 fc88 	bl	80101ce <__retarget_lock_acquire_recursive>
 800f8be:	4628      	mov	r0, r5
 800f8c0:	4621      	mov	r1, r4
 800f8c2:	f7ff ff59 	bl	800f778 <__sflush_r>
 800f8c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8c8:	07da      	lsls	r2, r3, #31
 800f8ca:	4605      	mov	r5, r0
 800f8cc:	d4e0      	bmi.n	800f890 <_fflush_r+0xc>
 800f8ce:	89a3      	ldrh	r3, [r4, #12]
 800f8d0:	059b      	lsls	r3, r3, #22
 800f8d2:	d4dd      	bmi.n	800f890 <_fflush_r+0xc>
 800f8d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8d6:	f000 fc7b 	bl	80101d0 <__retarget_lock_release_recursive>
 800f8da:	e7d9      	b.n	800f890 <_fflush_r+0xc>
 800f8dc:	4b05      	ldr	r3, [pc, #20]	; (800f8f4 <_fflush_r+0x70>)
 800f8de:	429c      	cmp	r4, r3
 800f8e0:	d101      	bne.n	800f8e6 <_fflush_r+0x62>
 800f8e2:	68ac      	ldr	r4, [r5, #8]
 800f8e4:	e7df      	b.n	800f8a6 <_fflush_r+0x22>
 800f8e6:	4b04      	ldr	r3, [pc, #16]	; (800f8f8 <_fflush_r+0x74>)
 800f8e8:	429c      	cmp	r4, r3
 800f8ea:	bf08      	it	eq
 800f8ec:	68ec      	ldreq	r4, [r5, #12]
 800f8ee:	e7da      	b.n	800f8a6 <_fflush_r+0x22>
 800f8f0:	0801288c 	.word	0x0801288c
 800f8f4:	080128ac 	.word	0x080128ac
 800f8f8:	0801286c 	.word	0x0801286c

0800f8fc <std>:
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	b510      	push	{r4, lr}
 800f900:	4604      	mov	r4, r0
 800f902:	e9c0 3300 	strd	r3, r3, [r0]
 800f906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f90a:	6083      	str	r3, [r0, #8]
 800f90c:	8181      	strh	r1, [r0, #12]
 800f90e:	6643      	str	r3, [r0, #100]	; 0x64
 800f910:	81c2      	strh	r2, [r0, #14]
 800f912:	6183      	str	r3, [r0, #24]
 800f914:	4619      	mov	r1, r3
 800f916:	2208      	movs	r2, #8
 800f918:	305c      	adds	r0, #92	; 0x5c
 800f91a:	f7fd f91b 	bl	800cb54 <memset>
 800f91e:	4b05      	ldr	r3, [pc, #20]	; (800f934 <std+0x38>)
 800f920:	6263      	str	r3, [r4, #36]	; 0x24
 800f922:	4b05      	ldr	r3, [pc, #20]	; (800f938 <std+0x3c>)
 800f924:	62a3      	str	r3, [r4, #40]	; 0x28
 800f926:	4b05      	ldr	r3, [pc, #20]	; (800f93c <std+0x40>)
 800f928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f92a:	4b05      	ldr	r3, [pc, #20]	; (800f940 <std+0x44>)
 800f92c:	6224      	str	r4, [r4, #32]
 800f92e:	6323      	str	r3, [r4, #48]	; 0x30
 800f930:	bd10      	pop	{r4, pc}
 800f932:	bf00      	nop
 800f934:	0800da19 	.word	0x0800da19
 800f938:	0800da3b 	.word	0x0800da3b
 800f93c:	0800da73 	.word	0x0800da73
 800f940:	0800da97 	.word	0x0800da97

0800f944 <_cleanup_r>:
 800f944:	4901      	ldr	r1, [pc, #4]	; (800f94c <_cleanup_r+0x8>)
 800f946:	f000 b8af 	b.w	800faa8 <_fwalk_reent>
 800f94a:	bf00      	nop
 800f94c:	0800f885 	.word	0x0800f885

0800f950 <__sfmoreglue>:
 800f950:	b570      	push	{r4, r5, r6, lr}
 800f952:	1e4a      	subs	r2, r1, #1
 800f954:	2568      	movs	r5, #104	; 0x68
 800f956:	4355      	muls	r5, r2
 800f958:	460e      	mov	r6, r1
 800f95a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f95e:	f7fd f951 	bl	800cc04 <_malloc_r>
 800f962:	4604      	mov	r4, r0
 800f964:	b140      	cbz	r0, 800f978 <__sfmoreglue+0x28>
 800f966:	2100      	movs	r1, #0
 800f968:	e9c0 1600 	strd	r1, r6, [r0]
 800f96c:	300c      	adds	r0, #12
 800f96e:	60a0      	str	r0, [r4, #8]
 800f970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f974:	f7fd f8ee 	bl	800cb54 <memset>
 800f978:	4620      	mov	r0, r4
 800f97a:	bd70      	pop	{r4, r5, r6, pc}

0800f97c <__sfp_lock_acquire>:
 800f97c:	4801      	ldr	r0, [pc, #4]	; (800f984 <__sfp_lock_acquire+0x8>)
 800f97e:	f000 bc26 	b.w	80101ce <__retarget_lock_acquire_recursive>
 800f982:	bf00      	nop
 800f984:	20001748 	.word	0x20001748

0800f988 <__sfp_lock_release>:
 800f988:	4801      	ldr	r0, [pc, #4]	; (800f990 <__sfp_lock_release+0x8>)
 800f98a:	f000 bc21 	b.w	80101d0 <__retarget_lock_release_recursive>
 800f98e:	bf00      	nop
 800f990:	20001748 	.word	0x20001748

0800f994 <__sinit_lock_acquire>:
 800f994:	4801      	ldr	r0, [pc, #4]	; (800f99c <__sinit_lock_acquire+0x8>)
 800f996:	f000 bc1a 	b.w	80101ce <__retarget_lock_acquire_recursive>
 800f99a:	bf00      	nop
 800f99c:	20001743 	.word	0x20001743

0800f9a0 <__sinit_lock_release>:
 800f9a0:	4801      	ldr	r0, [pc, #4]	; (800f9a8 <__sinit_lock_release+0x8>)
 800f9a2:	f000 bc15 	b.w	80101d0 <__retarget_lock_release_recursive>
 800f9a6:	bf00      	nop
 800f9a8:	20001743 	.word	0x20001743

0800f9ac <__sinit>:
 800f9ac:	b510      	push	{r4, lr}
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	f7ff fff0 	bl	800f994 <__sinit_lock_acquire>
 800f9b4:	69a3      	ldr	r3, [r4, #24]
 800f9b6:	b11b      	cbz	r3, 800f9c0 <__sinit+0x14>
 800f9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9bc:	f7ff bff0 	b.w	800f9a0 <__sinit_lock_release>
 800f9c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f9c4:	6523      	str	r3, [r4, #80]	; 0x50
 800f9c6:	4b13      	ldr	r3, [pc, #76]	; (800fa14 <__sinit+0x68>)
 800f9c8:	4a13      	ldr	r2, [pc, #76]	; (800fa18 <__sinit+0x6c>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	62a2      	str	r2, [r4, #40]	; 0x28
 800f9ce:	42a3      	cmp	r3, r4
 800f9d0:	bf04      	itt	eq
 800f9d2:	2301      	moveq	r3, #1
 800f9d4:	61a3      	streq	r3, [r4, #24]
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f000 f820 	bl	800fa1c <__sfp>
 800f9dc:	6060      	str	r0, [r4, #4]
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f000 f81c 	bl	800fa1c <__sfp>
 800f9e4:	60a0      	str	r0, [r4, #8]
 800f9e6:	4620      	mov	r0, r4
 800f9e8:	f000 f818 	bl	800fa1c <__sfp>
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	60e0      	str	r0, [r4, #12]
 800f9f0:	2104      	movs	r1, #4
 800f9f2:	6860      	ldr	r0, [r4, #4]
 800f9f4:	f7ff ff82 	bl	800f8fc <std>
 800f9f8:	68a0      	ldr	r0, [r4, #8]
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	2109      	movs	r1, #9
 800f9fe:	f7ff ff7d 	bl	800f8fc <std>
 800fa02:	68e0      	ldr	r0, [r4, #12]
 800fa04:	2202      	movs	r2, #2
 800fa06:	2112      	movs	r1, #18
 800fa08:	f7ff ff78 	bl	800f8fc <std>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	61a3      	str	r3, [r4, #24]
 800fa10:	e7d2      	b.n	800f9b8 <__sinit+0xc>
 800fa12:	bf00      	nop
 800fa14:	08012748 	.word	0x08012748
 800fa18:	0800f945 	.word	0x0800f945

0800fa1c <__sfp>:
 800fa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1e:	4607      	mov	r7, r0
 800fa20:	f7ff ffac 	bl	800f97c <__sfp_lock_acquire>
 800fa24:	4b1e      	ldr	r3, [pc, #120]	; (800faa0 <__sfp+0x84>)
 800fa26:	681e      	ldr	r6, [r3, #0]
 800fa28:	69b3      	ldr	r3, [r6, #24]
 800fa2a:	b913      	cbnz	r3, 800fa32 <__sfp+0x16>
 800fa2c:	4630      	mov	r0, r6
 800fa2e:	f7ff ffbd 	bl	800f9ac <__sinit>
 800fa32:	3648      	adds	r6, #72	; 0x48
 800fa34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa38:	3b01      	subs	r3, #1
 800fa3a:	d503      	bpl.n	800fa44 <__sfp+0x28>
 800fa3c:	6833      	ldr	r3, [r6, #0]
 800fa3e:	b30b      	cbz	r3, 800fa84 <__sfp+0x68>
 800fa40:	6836      	ldr	r6, [r6, #0]
 800fa42:	e7f7      	b.n	800fa34 <__sfp+0x18>
 800fa44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa48:	b9d5      	cbnz	r5, 800fa80 <__sfp+0x64>
 800fa4a:	4b16      	ldr	r3, [pc, #88]	; (800faa4 <__sfp+0x88>)
 800fa4c:	60e3      	str	r3, [r4, #12]
 800fa4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa52:	6665      	str	r5, [r4, #100]	; 0x64
 800fa54:	f000 fbba 	bl	80101cc <__retarget_lock_init_recursive>
 800fa58:	f7ff ff96 	bl	800f988 <__sfp_lock_release>
 800fa5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa64:	6025      	str	r5, [r4, #0]
 800fa66:	61a5      	str	r5, [r4, #24]
 800fa68:	2208      	movs	r2, #8
 800fa6a:	4629      	mov	r1, r5
 800fa6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa70:	f7fd f870 	bl	800cb54 <memset>
 800fa74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa80:	3468      	adds	r4, #104	; 0x68
 800fa82:	e7d9      	b.n	800fa38 <__sfp+0x1c>
 800fa84:	2104      	movs	r1, #4
 800fa86:	4638      	mov	r0, r7
 800fa88:	f7ff ff62 	bl	800f950 <__sfmoreglue>
 800fa8c:	4604      	mov	r4, r0
 800fa8e:	6030      	str	r0, [r6, #0]
 800fa90:	2800      	cmp	r0, #0
 800fa92:	d1d5      	bne.n	800fa40 <__sfp+0x24>
 800fa94:	f7ff ff78 	bl	800f988 <__sfp_lock_release>
 800fa98:	230c      	movs	r3, #12
 800fa9a:	603b      	str	r3, [r7, #0]
 800fa9c:	e7ee      	b.n	800fa7c <__sfp+0x60>
 800fa9e:	bf00      	nop
 800faa0:	08012748 	.word	0x08012748
 800faa4:	ffff0001 	.word	0xffff0001

0800faa8 <_fwalk_reent>:
 800faa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800faac:	4606      	mov	r6, r0
 800faae:	4688      	mov	r8, r1
 800fab0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fab4:	2700      	movs	r7, #0
 800fab6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800faba:	f1b9 0901 	subs.w	r9, r9, #1
 800fabe:	d505      	bpl.n	800facc <_fwalk_reent+0x24>
 800fac0:	6824      	ldr	r4, [r4, #0]
 800fac2:	2c00      	cmp	r4, #0
 800fac4:	d1f7      	bne.n	800fab6 <_fwalk_reent+0xe>
 800fac6:	4638      	mov	r0, r7
 800fac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800facc:	89ab      	ldrh	r3, [r5, #12]
 800face:	2b01      	cmp	r3, #1
 800fad0:	d907      	bls.n	800fae2 <_fwalk_reent+0x3a>
 800fad2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fad6:	3301      	adds	r3, #1
 800fad8:	d003      	beq.n	800fae2 <_fwalk_reent+0x3a>
 800fada:	4629      	mov	r1, r5
 800fadc:	4630      	mov	r0, r6
 800fade:	47c0      	blx	r8
 800fae0:	4307      	orrs	r7, r0
 800fae2:	3568      	adds	r5, #104	; 0x68
 800fae4:	e7e9      	b.n	800faba <_fwalk_reent+0x12>

0800fae6 <rshift>:
 800fae6:	6903      	ldr	r3, [r0, #16]
 800fae8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800faec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faf0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800faf4:	f100 0414 	add.w	r4, r0, #20
 800faf8:	dd45      	ble.n	800fb86 <rshift+0xa0>
 800fafa:	f011 011f 	ands.w	r1, r1, #31
 800fafe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fb02:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fb06:	d10c      	bne.n	800fb22 <rshift+0x3c>
 800fb08:	f100 0710 	add.w	r7, r0, #16
 800fb0c:	4629      	mov	r1, r5
 800fb0e:	42b1      	cmp	r1, r6
 800fb10:	d334      	bcc.n	800fb7c <rshift+0x96>
 800fb12:	1a9b      	subs	r3, r3, r2
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	1eea      	subs	r2, r5, #3
 800fb18:	4296      	cmp	r6, r2
 800fb1a:	bf38      	it	cc
 800fb1c:	2300      	movcc	r3, #0
 800fb1e:	4423      	add	r3, r4
 800fb20:	e015      	b.n	800fb4e <rshift+0x68>
 800fb22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fb26:	f1c1 0820 	rsb	r8, r1, #32
 800fb2a:	40cf      	lsrs	r7, r1
 800fb2c:	f105 0e04 	add.w	lr, r5, #4
 800fb30:	46a1      	mov	r9, r4
 800fb32:	4576      	cmp	r6, lr
 800fb34:	46f4      	mov	ip, lr
 800fb36:	d815      	bhi.n	800fb64 <rshift+0x7e>
 800fb38:	1a9b      	subs	r3, r3, r2
 800fb3a:	009a      	lsls	r2, r3, #2
 800fb3c:	3a04      	subs	r2, #4
 800fb3e:	3501      	adds	r5, #1
 800fb40:	42ae      	cmp	r6, r5
 800fb42:	bf38      	it	cc
 800fb44:	2200      	movcc	r2, #0
 800fb46:	18a3      	adds	r3, r4, r2
 800fb48:	50a7      	str	r7, [r4, r2]
 800fb4a:	b107      	cbz	r7, 800fb4e <rshift+0x68>
 800fb4c:	3304      	adds	r3, #4
 800fb4e:	1b1a      	subs	r2, r3, r4
 800fb50:	42a3      	cmp	r3, r4
 800fb52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb56:	bf08      	it	eq
 800fb58:	2300      	moveq	r3, #0
 800fb5a:	6102      	str	r2, [r0, #16]
 800fb5c:	bf08      	it	eq
 800fb5e:	6143      	streq	r3, [r0, #20]
 800fb60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb64:	f8dc c000 	ldr.w	ip, [ip]
 800fb68:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb6c:	ea4c 0707 	orr.w	r7, ip, r7
 800fb70:	f849 7b04 	str.w	r7, [r9], #4
 800fb74:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb78:	40cf      	lsrs	r7, r1
 800fb7a:	e7da      	b.n	800fb32 <rshift+0x4c>
 800fb7c:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb80:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb84:	e7c3      	b.n	800fb0e <rshift+0x28>
 800fb86:	4623      	mov	r3, r4
 800fb88:	e7e1      	b.n	800fb4e <rshift+0x68>

0800fb8a <__hexdig_fun>:
 800fb8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fb8e:	2b09      	cmp	r3, #9
 800fb90:	d802      	bhi.n	800fb98 <__hexdig_fun+0xe>
 800fb92:	3820      	subs	r0, #32
 800fb94:	b2c0      	uxtb	r0, r0
 800fb96:	4770      	bx	lr
 800fb98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fb9c:	2b05      	cmp	r3, #5
 800fb9e:	d801      	bhi.n	800fba4 <__hexdig_fun+0x1a>
 800fba0:	3847      	subs	r0, #71	; 0x47
 800fba2:	e7f7      	b.n	800fb94 <__hexdig_fun+0xa>
 800fba4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fba8:	2b05      	cmp	r3, #5
 800fbaa:	d801      	bhi.n	800fbb0 <__hexdig_fun+0x26>
 800fbac:	3827      	subs	r0, #39	; 0x27
 800fbae:	e7f1      	b.n	800fb94 <__hexdig_fun+0xa>
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	4770      	bx	lr

0800fbb4 <__gethex>:
 800fbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb8:	ed2d 8b02 	vpush	{d8}
 800fbbc:	b089      	sub	sp, #36	; 0x24
 800fbbe:	ee08 0a10 	vmov	s16, r0
 800fbc2:	9304      	str	r3, [sp, #16]
 800fbc4:	4bbc      	ldr	r3, [pc, #752]	; (800feb8 <__gethex+0x304>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	9301      	str	r3, [sp, #4]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	468b      	mov	fp, r1
 800fbce:	4690      	mov	r8, r2
 800fbd0:	f7f0 fb0e 	bl	80001f0 <strlen>
 800fbd4:	9b01      	ldr	r3, [sp, #4]
 800fbd6:	f8db 2000 	ldr.w	r2, [fp]
 800fbda:	4403      	add	r3, r0
 800fbdc:	4682      	mov	sl, r0
 800fbde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fbe2:	9305      	str	r3, [sp, #20]
 800fbe4:	1c93      	adds	r3, r2, #2
 800fbe6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fbea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fbee:	32fe      	adds	r2, #254	; 0xfe
 800fbf0:	18d1      	adds	r1, r2, r3
 800fbf2:	461f      	mov	r7, r3
 800fbf4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fbf8:	9100      	str	r1, [sp, #0]
 800fbfa:	2830      	cmp	r0, #48	; 0x30
 800fbfc:	d0f8      	beq.n	800fbf0 <__gethex+0x3c>
 800fbfe:	f7ff ffc4 	bl	800fb8a <__hexdig_fun>
 800fc02:	4604      	mov	r4, r0
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d13a      	bne.n	800fc7e <__gethex+0xca>
 800fc08:	9901      	ldr	r1, [sp, #4]
 800fc0a:	4652      	mov	r2, sl
 800fc0c:	4638      	mov	r0, r7
 800fc0e:	f7fd ff4e 	bl	800daae <strncmp>
 800fc12:	4605      	mov	r5, r0
 800fc14:	2800      	cmp	r0, #0
 800fc16:	d168      	bne.n	800fcea <__gethex+0x136>
 800fc18:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fc1c:	eb07 060a 	add.w	r6, r7, sl
 800fc20:	f7ff ffb3 	bl	800fb8a <__hexdig_fun>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	d062      	beq.n	800fcee <__gethex+0x13a>
 800fc28:	4633      	mov	r3, r6
 800fc2a:	7818      	ldrb	r0, [r3, #0]
 800fc2c:	2830      	cmp	r0, #48	; 0x30
 800fc2e:	461f      	mov	r7, r3
 800fc30:	f103 0301 	add.w	r3, r3, #1
 800fc34:	d0f9      	beq.n	800fc2a <__gethex+0x76>
 800fc36:	f7ff ffa8 	bl	800fb8a <__hexdig_fun>
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	fab0 f480 	clz	r4, r0
 800fc40:	0964      	lsrs	r4, r4, #5
 800fc42:	4635      	mov	r5, r6
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	463a      	mov	r2, r7
 800fc48:	4616      	mov	r6, r2
 800fc4a:	3201      	adds	r2, #1
 800fc4c:	7830      	ldrb	r0, [r6, #0]
 800fc4e:	f7ff ff9c 	bl	800fb8a <__hexdig_fun>
 800fc52:	2800      	cmp	r0, #0
 800fc54:	d1f8      	bne.n	800fc48 <__gethex+0x94>
 800fc56:	9901      	ldr	r1, [sp, #4]
 800fc58:	4652      	mov	r2, sl
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	f7fd ff27 	bl	800daae <strncmp>
 800fc60:	b980      	cbnz	r0, 800fc84 <__gethex+0xd0>
 800fc62:	b94d      	cbnz	r5, 800fc78 <__gethex+0xc4>
 800fc64:	eb06 050a 	add.w	r5, r6, sl
 800fc68:	462a      	mov	r2, r5
 800fc6a:	4616      	mov	r6, r2
 800fc6c:	3201      	adds	r2, #1
 800fc6e:	7830      	ldrb	r0, [r6, #0]
 800fc70:	f7ff ff8b 	bl	800fb8a <__hexdig_fun>
 800fc74:	2800      	cmp	r0, #0
 800fc76:	d1f8      	bne.n	800fc6a <__gethex+0xb6>
 800fc78:	1bad      	subs	r5, r5, r6
 800fc7a:	00ad      	lsls	r5, r5, #2
 800fc7c:	e004      	b.n	800fc88 <__gethex+0xd4>
 800fc7e:	2400      	movs	r4, #0
 800fc80:	4625      	mov	r5, r4
 800fc82:	e7e0      	b.n	800fc46 <__gethex+0x92>
 800fc84:	2d00      	cmp	r5, #0
 800fc86:	d1f7      	bne.n	800fc78 <__gethex+0xc4>
 800fc88:	7833      	ldrb	r3, [r6, #0]
 800fc8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fc8e:	2b50      	cmp	r3, #80	; 0x50
 800fc90:	d13b      	bne.n	800fd0a <__gethex+0x156>
 800fc92:	7873      	ldrb	r3, [r6, #1]
 800fc94:	2b2b      	cmp	r3, #43	; 0x2b
 800fc96:	d02c      	beq.n	800fcf2 <__gethex+0x13e>
 800fc98:	2b2d      	cmp	r3, #45	; 0x2d
 800fc9a:	d02e      	beq.n	800fcfa <__gethex+0x146>
 800fc9c:	1c71      	adds	r1, r6, #1
 800fc9e:	f04f 0900 	mov.w	r9, #0
 800fca2:	7808      	ldrb	r0, [r1, #0]
 800fca4:	f7ff ff71 	bl	800fb8a <__hexdig_fun>
 800fca8:	1e43      	subs	r3, r0, #1
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	2b18      	cmp	r3, #24
 800fcae:	d82c      	bhi.n	800fd0a <__gethex+0x156>
 800fcb0:	f1a0 0210 	sub.w	r2, r0, #16
 800fcb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fcb8:	f7ff ff67 	bl	800fb8a <__hexdig_fun>
 800fcbc:	1e43      	subs	r3, r0, #1
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b18      	cmp	r3, #24
 800fcc2:	d91d      	bls.n	800fd00 <__gethex+0x14c>
 800fcc4:	f1b9 0f00 	cmp.w	r9, #0
 800fcc8:	d000      	beq.n	800fccc <__gethex+0x118>
 800fcca:	4252      	negs	r2, r2
 800fccc:	4415      	add	r5, r2
 800fcce:	f8cb 1000 	str.w	r1, [fp]
 800fcd2:	b1e4      	cbz	r4, 800fd0e <__gethex+0x15a>
 800fcd4:	9b00      	ldr	r3, [sp, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	bf14      	ite	ne
 800fcda:	2700      	movne	r7, #0
 800fcdc:	2706      	moveq	r7, #6
 800fcde:	4638      	mov	r0, r7
 800fce0:	b009      	add	sp, #36	; 0x24
 800fce2:	ecbd 8b02 	vpop	{d8}
 800fce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcea:	463e      	mov	r6, r7
 800fcec:	4625      	mov	r5, r4
 800fcee:	2401      	movs	r4, #1
 800fcf0:	e7ca      	b.n	800fc88 <__gethex+0xd4>
 800fcf2:	f04f 0900 	mov.w	r9, #0
 800fcf6:	1cb1      	adds	r1, r6, #2
 800fcf8:	e7d3      	b.n	800fca2 <__gethex+0xee>
 800fcfa:	f04f 0901 	mov.w	r9, #1
 800fcfe:	e7fa      	b.n	800fcf6 <__gethex+0x142>
 800fd00:	230a      	movs	r3, #10
 800fd02:	fb03 0202 	mla	r2, r3, r2, r0
 800fd06:	3a10      	subs	r2, #16
 800fd08:	e7d4      	b.n	800fcb4 <__gethex+0x100>
 800fd0a:	4631      	mov	r1, r6
 800fd0c:	e7df      	b.n	800fcce <__gethex+0x11a>
 800fd0e:	1bf3      	subs	r3, r6, r7
 800fd10:	3b01      	subs	r3, #1
 800fd12:	4621      	mov	r1, r4
 800fd14:	2b07      	cmp	r3, #7
 800fd16:	dc0b      	bgt.n	800fd30 <__gethex+0x17c>
 800fd18:	ee18 0a10 	vmov	r0, s16
 800fd1c:	f000 faee 	bl	80102fc <_Balloc>
 800fd20:	4604      	mov	r4, r0
 800fd22:	b940      	cbnz	r0, 800fd36 <__gethex+0x182>
 800fd24:	4b65      	ldr	r3, [pc, #404]	; (800febc <__gethex+0x308>)
 800fd26:	4602      	mov	r2, r0
 800fd28:	21de      	movs	r1, #222	; 0xde
 800fd2a:	4865      	ldr	r0, [pc, #404]	; (800fec0 <__gethex+0x30c>)
 800fd2c:	f001 fa8e 	bl	801124c <__assert_func>
 800fd30:	3101      	adds	r1, #1
 800fd32:	105b      	asrs	r3, r3, #1
 800fd34:	e7ee      	b.n	800fd14 <__gethex+0x160>
 800fd36:	f100 0914 	add.w	r9, r0, #20
 800fd3a:	f04f 0b00 	mov.w	fp, #0
 800fd3e:	f1ca 0301 	rsb	r3, sl, #1
 800fd42:	f8cd 9008 	str.w	r9, [sp, #8]
 800fd46:	f8cd b000 	str.w	fp, [sp]
 800fd4a:	9306      	str	r3, [sp, #24]
 800fd4c:	42b7      	cmp	r7, r6
 800fd4e:	d340      	bcc.n	800fdd2 <__gethex+0x21e>
 800fd50:	9802      	ldr	r0, [sp, #8]
 800fd52:	9b00      	ldr	r3, [sp, #0]
 800fd54:	f840 3b04 	str.w	r3, [r0], #4
 800fd58:	eba0 0009 	sub.w	r0, r0, r9
 800fd5c:	1080      	asrs	r0, r0, #2
 800fd5e:	0146      	lsls	r6, r0, #5
 800fd60:	6120      	str	r0, [r4, #16]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f000 fbc0 	bl	80104e8 <__hi0bits>
 800fd68:	1a30      	subs	r0, r6, r0
 800fd6a:	f8d8 6000 	ldr.w	r6, [r8]
 800fd6e:	42b0      	cmp	r0, r6
 800fd70:	dd63      	ble.n	800fe3a <__gethex+0x286>
 800fd72:	1b87      	subs	r7, r0, r6
 800fd74:	4639      	mov	r1, r7
 800fd76:	4620      	mov	r0, r4
 800fd78:	f000 ff5a 	bl	8010c30 <__any_on>
 800fd7c:	4682      	mov	sl, r0
 800fd7e:	b1a8      	cbz	r0, 800fdac <__gethex+0x1f8>
 800fd80:	1e7b      	subs	r3, r7, #1
 800fd82:	1159      	asrs	r1, r3, #5
 800fd84:	f003 021f 	and.w	r2, r3, #31
 800fd88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fd8c:	f04f 0a01 	mov.w	sl, #1
 800fd90:	fa0a f202 	lsl.w	r2, sl, r2
 800fd94:	420a      	tst	r2, r1
 800fd96:	d009      	beq.n	800fdac <__gethex+0x1f8>
 800fd98:	4553      	cmp	r3, sl
 800fd9a:	dd05      	ble.n	800fda8 <__gethex+0x1f4>
 800fd9c:	1eb9      	subs	r1, r7, #2
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f000 ff46 	bl	8010c30 <__any_on>
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d145      	bne.n	800fe34 <__gethex+0x280>
 800fda8:	f04f 0a02 	mov.w	sl, #2
 800fdac:	4639      	mov	r1, r7
 800fdae:	4620      	mov	r0, r4
 800fdb0:	f7ff fe99 	bl	800fae6 <rshift>
 800fdb4:	443d      	add	r5, r7
 800fdb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fdba:	42ab      	cmp	r3, r5
 800fdbc:	da4c      	bge.n	800fe58 <__gethex+0x2a4>
 800fdbe:	ee18 0a10 	vmov	r0, s16
 800fdc2:	4621      	mov	r1, r4
 800fdc4:	f000 fada 	bl	801037c <_Bfree>
 800fdc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fdca:	2300      	movs	r3, #0
 800fdcc:	6013      	str	r3, [r2, #0]
 800fdce:	27a3      	movs	r7, #163	; 0xa3
 800fdd0:	e785      	b.n	800fcde <__gethex+0x12a>
 800fdd2:	1e73      	subs	r3, r6, #1
 800fdd4:	9a05      	ldr	r2, [sp, #20]
 800fdd6:	9303      	str	r3, [sp, #12]
 800fdd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d019      	beq.n	800fe14 <__gethex+0x260>
 800fde0:	f1bb 0f20 	cmp.w	fp, #32
 800fde4:	d107      	bne.n	800fdf6 <__gethex+0x242>
 800fde6:	9b02      	ldr	r3, [sp, #8]
 800fde8:	9a00      	ldr	r2, [sp, #0]
 800fdea:	f843 2b04 	str.w	r2, [r3], #4
 800fdee:	9302      	str	r3, [sp, #8]
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	9300      	str	r3, [sp, #0]
 800fdf4:	469b      	mov	fp, r3
 800fdf6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fdfa:	f7ff fec6 	bl	800fb8a <__hexdig_fun>
 800fdfe:	9b00      	ldr	r3, [sp, #0]
 800fe00:	f000 000f 	and.w	r0, r0, #15
 800fe04:	fa00 f00b 	lsl.w	r0, r0, fp
 800fe08:	4303      	orrs	r3, r0
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	f10b 0b04 	add.w	fp, fp, #4
 800fe10:	9b03      	ldr	r3, [sp, #12]
 800fe12:	e00d      	b.n	800fe30 <__gethex+0x27c>
 800fe14:	9b03      	ldr	r3, [sp, #12]
 800fe16:	9a06      	ldr	r2, [sp, #24]
 800fe18:	4413      	add	r3, r2
 800fe1a:	42bb      	cmp	r3, r7
 800fe1c:	d3e0      	bcc.n	800fde0 <__gethex+0x22c>
 800fe1e:	4618      	mov	r0, r3
 800fe20:	9901      	ldr	r1, [sp, #4]
 800fe22:	9307      	str	r3, [sp, #28]
 800fe24:	4652      	mov	r2, sl
 800fe26:	f7fd fe42 	bl	800daae <strncmp>
 800fe2a:	9b07      	ldr	r3, [sp, #28]
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d1d7      	bne.n	800fde0 <__gethex+0x22c>
 800fe30:	461e      	mov	r6, r3
 800fe32:	e78b      	b.n	800fd4c <__gethex+0x198>
 800fe34:	f04f 0a03 	mov.w	sl, #3
 800fe38:	e7b8      	b.n	800fdac <__gethex+0x1f8>
 800fe3a:	da0a      	bge.n	800fe52 <__gethex+0x29e>
 800fe3c:	1a37      	subs	r7, r6, r0
 800fe3e:	4621      	mov	r1, r4
 800fe40:	ee18 0a10 	vmov	r0, s16
 800fe44:	463a      	mov	r2, r7
 800fe46:	f000 fcb5 	bl	80107b4 <__lshift>
 800fe4a:	1bed      	subs	r5, r5, r7
 800fe4c:	4604      	mov	r4, r0
 800fe4e:	f100 0914 	add.w	r9, r0, #20
 800fe52:	f04f 0a00 	mov.w	sl, #0
 800fe56:	e7ae      	b.n	800fdb6 <__gethex+0x202>
 800fe58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fe5c:	42a8      	cmp	r0, r5
 800fe5e:	dd72      	ble.n	800ff46 <__gethex+0x392>
 800fe60:	1b45      	subs	r5, r0, r5
 800fe62:	42ae      	cmp	r6, r5
 800fe64:	dc36      	bgt.n	800fed4 <__gethex+0x320>
 800fe66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	d02a      	beq.n	800fec4 <__gethex+0x310>
 800fe6e:	2b03      	cmp	r3, #3
 800fe70:	d02c      	beq.n	800fecc <__gethex+0x318>
 800fe72:	2b01      	cmp	r3, #1
 800fe74:	d115      	bne.n	800fea2 <__gethex+0x2ee>
 800fe76:	42ae      	cmp	r6, r5
 800fe78:	d113      	bne.n	800fea2 <__gethex+0x2ee>
 800fe7a:	2e01      	cmp	r6, #1
 800fe7c:	d10b      	bne.n	800fe96 <__gethex+0x2e2>
 800fe7e:	9a04      	ldr	r2, [sp, #16]
 800fe80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	2301      	movs	r3, #1
 800fe88:	6123      	str	r3, [r4, #16]
 800fe8a:	f8c9 3000 	str.w	r3, [r9]
 800fe8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe90:	2762      	movs	r7, #98	; 0x62
 800fe92:	601c      	str	r4, [r3, #0]
 800fe94:	e723      	b.n	800fcde <__gethex+0x12a>
 800fe96:	1e71      	subs	r1, r6, #1
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f000 fec9 	bl	8010c30 <__any_on>
 800fe9e:	2800      	cmp	r0, #0
 800fea0:	d1ed      	bne.n	800fe7e <__gethex+0x2ca>
 800fea2:	ee18 0a10 	vmov	r0, s16
 800fea6:	4621      	mov	r1, r4
 800fea8:	f000 fa68 	bl	801037c <_Bfree>
 800feac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800feae:	2300      	movs	r3, #0
 800feb0:	6013      	str	r3, [r2, #0]
 800feb2:	2750      	movs	r7, #80	; 0x50
 800feb4:	e713      	b.n	800fcde <__gethex+0x12a>
 800feb6:	bf00      	nop
 800feb8:	08012938 	.word	0x08012938
 800febc:	0801285b 	.word	0x0801285b
 800fec0:	080128cc 	.word	0x080128cc
 800fec4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1eb      	bne.n	800fea2 <__gethex+0x2ee>
 800feca:	e7d8      	b.n	800fe7e <__gethex+0x2ca>
 800fecc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1d5      	bne.n	800fe7e <__gethex+0x2ca>
 800fed2:	e7e6      	b.n	800fea2 <__gethex+0x2ee>
 800fed4:	1e6f      	subs	r7, r5, #1
 800fed6:	f1ba 0f00 	cmp.w	sl, #0
 800feda:	d131      	bne.n	800ff40 <__gethex+0x38c>
 800fedc:	b127      	cbz	r7, 800fee8 <__gethex+0x334>
 800fede:	4639      	mov	r1, r7
 800fee0:	4620      	mov	r0, r4
 800fee2:	f000 fea5 	bl	8010c30 <__any_on>
 800fee6:	4682      	mov	sl, r0
 800fee8:	117b      	asrs	r3, r7, #5
 800feea:	2101      	movs	r1, #1
 800feec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fef0:	f007 071f 	and.w	r7, r7, #31
 800fef4:	fa01 f707 	lsl.w	r7, r1, r7
 800fef8:	421f      	tst	r7, r3
 800fefa:	4629      	mov	r1, r5
 800fefc:	4620      	mov	r0, r4
 800fefe:	bf18      	it	ne
 800ff00:	f04a 0a02 	orrne.w	sl, sl, #2
 800ff04:	1b76      	subs	r6, r6, r5
 800ff06:	f7ff fdee 	bl	800fae6 <rshift>
 800ff0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ff0e:	2702      	movs	r7, #2
 800ff10:	f1ba 0f00 	cmp.w	sl, #0
 800ff14:	d048      	beq.n	800ffa8 <__gethex+0x3f4>
 800ff16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff1a:	2b02      	cmp	r3, #2
 800ff1c:	d015      	beq.n	800ff4a <__gethex+0x396>
 800ff1e:	2b03      	cmp	r3, #3
 800ff20:	d017      	beq.n	800ff52 <__gethex+0x39e>
 800ff22:	2b01      	cmp	r3, #1
 800ff24:	d109      	bne.n	800ff3a <__gethex+0x386>
 800ff26:	f01a 0f02 	tst.w	sl, #2
 800ff2a:	d006      	beq.n	800ff3a <__gethex+0x386>
 800ff2c:	f8d9 0000 	ldr.w	r0, [r9]
 800ff30:	ea4a 0a00 	orr.w	sl, sl, r0
 800ff34:	f01a 0f01 	tst.w	sl, #1
 800ff38:	d10e      	bne.n	800ff58 <__gethex+0x3a4>
 800ff3a:	f047 0710 	orr.w	r7, r7, #16
 800ff3e:	e033      	b.n	800ffa8 <__gethex+0x3f4>
 800ff40:	f04f 0a01 	mov.w	sl, #1
 800ff44:	e7d0      	b.n	800fee8 <__gethex+0x334>
 800ff46:	2701      	movs	r7, #1
 800ff48:	e7e2      	b.n	800ff10 <__gethex+0x35c>
 800ff4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff4c:	f1c3 0301 	rsb	r3, r3, #1
 800ff50:	9315      	str	r3, [sp, #84]	; 0x54
 800ff52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d0f0      	beq.n	800ff3a <__gethex+0x386>
 800ff58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff5c:	f104 0314 	add.w	r3, r4, #20
 800ff60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ff64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ff68:	f04f 0c00 	mov.w	ip, #0
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff72:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff76:	d01c      	beq.n	800ffb2 <__gethex+0x3fe>
 800ff78:	3201      	adds	r2, #1
 800ff7a:	6002      	str	r2, [r0, #0]
 800ff7c:	2f02      	cmp	r7, #2
 800ff7e:	f104 0314 	add.w	r3, r4, #20
 800ff82:	d13f      	bne.n	8010004 <__gethex+0x450>
 800ff84:	f8d8 2000 	ldr.w	r2, [r8]
 800ff88:	3a01      	subs	r2, #1
 800ff8a:	42b2      	cmp	r2, r6
 800ff8c:	d10a      	bne.n	800ffa4 <__gethex+0x3f0>
 800ff8e:	1171      	asrs	r1, r6, #5
 800ff90:	2201      	movs	r2, #1
 800ff92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff96:	f006 061f 	and.w	r6, r6, #31
 800ff9a:	fa02 f606 	lsl.w	r6, r2, r6
 800ff9e:	421e      	tst	r6, r3
 800ffa0:	bf18      	it	ne
 800ffa2:	4617      	movne	r7, r2
 800ffa4:	f047 0720 	orr.w	r7, r7, #32
 800ffa8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ffaa:	601c      	str	r4, [r3, #0]
 800ffac:	9b04      	ldr	r3, [sp, #16]
 800ffae:	601d      	str	r5, [r3, #0]
 800ffb0:	e695      	b.n	800fcde <__gethex+0x12a>
 800ffb2:	4299      	cmp	r1, r3
 800ffb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ffb8:	d8d8      	bhi.n	800ff6c <__gethex+0x3b8>
 800ffba:	68a3      	ldr	r3, [r4, #8]
 800ffbc:	459b      	cmp	fp, r3
 800ffbe:	db19      	blt.n	800fff4 <__gethex+0x440>
 800ffc0:	6861      	ldr	r1, [r4, #4]
 800ffc2:	ee18 0a10 	vmov	r0, s16
 800ffc6:	3101      	adds	r1, #1
 800ffc8:	f000 f998 	bl	80102fc <_Balloc>
 800ffcc:	4681      	mov	r9, r0
 800ffce:	b918      	cbnz	r0, 800ffd8 <__gethex+0x424>
 800ffd0:	4b1a      	ldr	r3, [pc, #104]	; (801003c <__gethex+0x488>)
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	2184      	movs	r1, #132	; 0x84
 800ffd6:	e6a8      	b.n	800fd2a <__gethex+0x176>
 800ffd8:	6922      	ldr	r2, [r4, #16]
 800ffda:	3202      	adds	r2, #2
 800ffdc:	f104 010c 	add.w	r1, r4, #12
 800ffe0:	0092      	lsls	r2, r2, #2
 800ffe2:	300c      	adds	r0, #12
 800ffe4:	f7fc fda8 	bl	800cb38 <memcpy>
 800ffe8:	4621      	mov	r1, r4
 800ffea:	ee18 0a10 	vmov	r0, s16
 800ffee:	f000 f9c5 	bl	801037c <_Bfree>
 800fff2:	464c      	mov	r4, r9
 800fff4:	6923      	ldr	r3, [r4, #16]
 800fff6:	1c5a      	adds	r2, r3, #1
 800fff8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fffc:	6122      	str	r2, [r4, #16]
 800fffe:	2201      	movs	r2, #1
 8010000:	615a      	str	r2, [r3, #20]
 8010002:	e7bb      	b.n	800ff7c <__gethex+0x3c8>
 8010004:	6922      	ldr	r2, [r4, #16]
 8010006:	455a      	cmp	r2, fp
 8010008:	dd0b      	ble.n	8010022 <__gethex+0x46e>
 801000a:	2101      	movs	r1, #1
 801000c:	4620      	mov	r0, r4
 801000e:	f7ff fd6a 	bl	800fae6 <rshift>
 8010012:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010016:	3501      	adds	r5, #1
 8010018:	42ab      	cmp	r3, r5
 801001a:	f6ff aed0 	blt.w	800fdbe <__gethex+0x20a>
 801001e:	2701      	movs	r7, #1
 8010020:	e7c0      	b.n	800ffa4 <__gethex+0x3f0>
 8010022:	f016 061f 	ands.w	r6, r6, #31
 8010026:	d0fa      	beq.n	801001e <__gethex+0x46a>
 8010028:	449a      	add	sl, r3
 801002a:	f1c6 0620 	rsb	r6, r6, #32
 801002e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010032:	f000 fa59 	bl	80104e8 <__hi0bits>
 8010036:	42b0      	cmp	r0, r6
 8010038:	dbe7      	blt.n	801000a <__gethex+0x456>
 801003a:	e7f0      	b.n	801001e <__gethex+0x46a>
 801003c:	0801285b 	.word	0x0801285b

08010040 <L_shift>:
 8010040:	f1c2 0208 	rsb	r2, r2, #8
 8010044:	0092      	lsls	r2, r2, #2
 8010046:	b570      	push	{r4, r5, r6, lr}
 8010048:	f1c2 0620 	rsb	r6, r2, #32
 801004c:	6843      	ldr	r3, [r0, #4]
 801004e:	6804      	ldr	r4, [r0, #0]
 8010050:	fa03 f506 	lsl.w	r5, r3, r6
 8010054:	432c      	orrs	r4, r5
 8010056:	40d3      	lsrs	r3, r2
 8010058:	6004      	str	r4, [r0, #0]
 801005a:	f840 3f04 	str.w	r3, [r0, #4]!
 801005e:	4288      	cmp	r0, r1
 8010060:	d3f4      	bcc.n	801004c <L_shift+0xc>
 8010062:	bd70      	pop	{r4, r5, r6, pc}

08010064 <__match>:
 8010064:	b530      	push	{r4, r5, lr}
 8010066:	6803      	ldr	r3, [r0, #0]
 8010068:	3301      	adds	r3, #1
 801006a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801006e:	b914      	cbnz	r4, 8010076 <__match+0x12>
 8010070:	6003      	str	r3, [r0, #0]
 8010072:	2001      	movs	r0, #1
 8010074:	bd30      	pop	{r4, r5, pc}
 8010076:	f813 2b01 	ldrb.w	r2, [r3], #1
 801007a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801007e:	2d19      	cmp	r5, #25
 8010080:	bf98      	it	ls
 8010082:	3220      	addls	r2, #32
 8010084:	42a2      	cmp	r2, r4
 8010086:	d0f0      	beq.n	801006a <__match+0x6>
 8010088:	2000      	movs	r0, #0
 801008a:	e7f3      	b.n	8010074 <__match+0x10>

0801008c <__hexnan>:
 801008c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010090:	680b      	ldr	r3, [r1, #0]
 8010092:	6801      	ldr	r1, [r0, #0]
 8010094:	115e      	asrs	r6, r3, #5
 8010096:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801009a:	f013 031f 	ands.w	r3, r3, #31
 801009e:	b087      	sub	sp, #28
 80100a0:	bf18      	it	ne
 80100a2:	3604      	addne	r6, #4
 80100a4:	2500      	movs	r5, #0
 80100a6:	1f37      	subs	r7, r6, #4
 80100a8:	4682      	mov	sl, r0
 80100aa:	4690      	mov	r8, r2
 80100ac:	9301      	str	r3, [sp, #4]
 80100ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80100b2:	46b9      	mov	r9, r7
 80100b4:	463c      	mov	r4, r7
 80100b6:	9502      	str	r5, [sp, #8]
 80100b8:	46ab      	mov	fp, r5
 80100ba:	784a      	ldrb	r2, [r1, #1]
 80100bc:	1c4b      	adds	r3, r1, #1
 80100be:	9303      	str	r3, [sp, #12]
 80100c0:	b342      	cbz	r2, 8010114 <__hexnan+0x88>
 80100c2:	4610      	mov	r0, r2
 80100c4:	9105      	str	r1, [sp, #20]
 80100c6:	9204      	str	r2, [sp, #16]
 80100c8:	f7ff fd5f 	bl	800fb8a <__hexdig_fun>
 80100cc:	2800      	cmp	r0, #0
 80100ce:	d14f      	bne.n	8010170 <__hexnan+0xe4>
 80100d0:	9a04      	ldr	r2, [sp, #16]
 80100d2:	9905      	ldr	r1, [sp, #20]
 80100d4:	2a20      	cmp	r2, #32
 80100d6:	d818      	bhi.n	801010a <__hexnan+0x7e>
 80100d8:	9b02      	ldr	r3, [sp, #8]
 80100da:	459b      	cmp	fp, r3
 80100dc:	dd13      	ble.n	8010106 <__hexnan+0x7a>
 80100de:	454c      	cmp	r4, r9
 80100e0:	d206      	bcs.n	80100f0 <__hexnan+0x64>
 80100e2:	2d07      	cmp	r5, #7
 80100e4:	dc04      	bgt.n	80100f0 <__hexnan+0x64>
 80100e6:	462a      	mov	r2, r5
 80100e8:	4649      	mov	r1, r9
 80100ea:	4620      	mov	r0, r4
 80100ec:	f7ff ffa8 	bl	8010040 <L_shift>
 80100f0:	4544      	cmp	r4, r8
 80100f2:	d950      	bls.n	8010196 <__hexnan+0x10a>
 80100f4:	2300      	movs	r3, #0
 80100f6:	f1a4 0904 	sub.w	r9, r4, #4
 80100fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80100fe:	f8cd b008 	str.w	fp, [sp, #8]
 8010102:	464c      	mov	r4, r9
 8010104:	461d      	mov	r5, r3
 8010106:	9903      	ldr	r1, [sp, #12]
 8010108:	e7d7      	b.n	80100ba <__hexnan+0x2e>
 801010a:	2a29      	cmp	r2, #41	; 0x29
 801010c:	d156      	bne.n	80101bc <__hexnan+0x130>
 801010e:	3102      	adds	r1, #2
 8010110:	f8ca 1000 	str.w	r1, [sl]
 8010114:	f1bb 0f00 	cmp.w	fp, #0
 8010118:	d050      	beq.n	80101bc <__hexnan+0x130>
 801011a:	454c      	cmp	r4, r9
 801011c:	d206      	bcs.n	801012c <__hexnan+0xa0>
 801011e:	2d07      	cmp	r5, #7
 8010120:	dc04      	bgt.n	801012c <__hexnan+0xa0>
 8010122:	462a      	mov	r2, r5
 8010124:	4649      	mov	r1, r9
 8010126:	4620      	mov	r0, r4
 8010128:	f7ff ff8a 	bl	8010040 <L_shift>
 801012c:	4544      	cmp	r4, r8
 801012e:	d934      	bls.n	801019a <__hexnan+0x10e>
 8010130:	f1a8 0204 	sub.w	r2, r8, #4
 8010134:	4623      	mov	r3, r4
 8010136:	f853 1b04 	ldr.w	r1, [r3], #4
 801013a:	f842 1f04 	str.w	r1, [r2, #4]!
 801013e:	429f      	cmp	r7, r3
 8010140:	d2f9      	bcs.n	8010136 <__hexnan+0xaa>
 8010142:	1b3b      	subs	r3, r7, r4
 8010144:	f023 0303 	bic.w	r3, r3, #3
 8010148:	3304      	adds	r3, #4
 801014a:	3401      	adds	r4, #1
 801014c:	3e03      	subs	r6, #3
 801014e:	42b4      	cmp	r4, r6
 8010150:	bf88      	it	hi
 8010152:	2304      	movhi	r3, #4
 8010154:	4443      	add	r3, r8
 8010156:	2200      	movs	r2, #0
 8010158:	f843 2b04 	str.w	r2, [r3], #4
 801015c:	429f      	cmp	r7, r3
 801015e:	d2fb      	bcs.n	8010158 <__hexnan+0xcc>
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	b91b      	cbnz	r3, 801016c <__hexnan+0xe0>
 8010164:	4547      	cmp	r7, r8
 8010166:	d127      	bne.n	80101b8 <__hexnan+0x12c>
 8010168:	2301      	movs	r3, #1
 801016a:	603b      	str	r3, [r7, #0]
 801016c:	2005      	movs	r0, #5
 801016e:	e026      	b.n	80101be <__hexnan+0x132>
 8010170:	3501      	adds	r5, #1
 8010172:	2d08      	cmp	r5, #8
 8010174:	f10b 0b01 	add.w	fp, fp, #1
 8010178:	dd06      	ble.n	8010188 <__hexnan+0xfc>
 801017a:	4544      	cmp	r4, r8
 801017c:	d9c3      	bls.n	8010106 <__hexnan+0x7a>
 801017e:	2300      	movs	r3, #0
 8010180:	f844 3c04 	str.w	r3, [r4, #-4]
 8010184:	2501      	movs	r5, #1
 8010186:	3c04      	subs	r4, #4
 8010188:	6822      	ldr	r2, [r4, #0]
 801018a:	f000 000f 	and.w	r0, r0, #15
 801018e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010192:	6022      	str	r2, [r4, #0]
 8010194:	e7b7      	b.n	8010106 <__hexnan+0x7a>
 8010196:	2508      	movs	r5, #8
 8010198:	e7b5      	b.n	8010106 <__hexnan+0x7a>
 801019a:	9b01      	ldr	r3, [sp, #4]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d0df      	beq.n	8010160 <__hexnan+0xd4>
 80101a0:	f04f 32ff 	mov.w	r2, #4294967295
 80101a4:	f1c3 0320 	rsb	r3, r3, #32
 80101a8:	fa22 f303 	lsr.w	r3, r2, r3
 80101ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80101b0:	401a      	ands	r2, r3
 80101b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80101b6:	e7d3      	b.n	8010160 <__hexnan+0xd4>
 80101b8:	3f04      	subs	r7, #4
 80101ba:	e7d1      	b.n	8010160 <__hexnan+0xd4>
 80101bc:	2004      	movs	r0, #4
 80101be:	b007      	add	sp, #28
 80101c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101c4 <_localeconv_r>:
 80101c4:	4800      	ldr	r0, [pc, #0]	; (80101c8 <_localeconv_r+0x4>)
 80101c6:	4770      	bx	lr
 80101c8:	2000017c 	.word	0x2000017c

080101cc <__retarget_lock_init_recursive>:
 80101cc:	4770      	bx	lr

080101ce <__retarget_lock_acquire_recursive>:
 80101ce:	4770      	bx	lr

080101d0 <__retarget_lock_release_recursive>:
 80101d0:	4770      	bx	lr
	...

080101d4 <_lseek_r>:
 80101d4:	b538      	push	{r3, r4, r5, lr}
 80101d6:	4d07      	ldr	r5, [pc, #28]	; (80101f4 <_lseek_r+0x20>)
 80101d8:	4604      	mov	r4, r0
 80101da:	4608      	mov	r0, r1
 80101dc:	4611      	mov	r1, r2
 80101de:	2200      	movs	r2, #0
 80101e0:	602a      	str	r2, [r5, #0]
 80101e2:	461a      	mov	r2, r3
 80101e4:	f7f3 fcfe 	bl	8003be4 <_lseek>
 80101e8:	1c43      	adds	r3, r0, #1
 80101ea:	d102      	bne.n	80101f2 <_lseek_r+0x1e>
 80101ec:	682b      	ldr	r3, [r5, #0]
 80101ee:	b103      	cbz	r3, 80101f2 <_lseek_r+0x1e>
 80101f0:	6023      	str	r3, [r4, #0]
 80101f2:	bd38      	pop	{r3, r4, r5, pc}
 80101f4:	2000174c 	.word	0x2000174c

080101f8 <__swhatbuf_r>:
 80101f8:	b570      	push	{r4, r5, r6, lr}
 80101fa:	460e      	mov	r6, r1
 80101fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010200:	2900      	cmp	r1, #0
 8010202:	b096      	sub	sp, #88	; 0x58
 8010204:	4614      	mov	r4, r2
 8010206:	461d      	mov	r5, r3
 8010208:	da07      	bge.n	801021a <__swhatbuf_r+0x22>
 801020a:	2300      	movs	r3, #0
 801020c:	602b      	str	r3, [r5, #0]
 801020e:	89b3      	ldrh	r3, [r6, #12]
 8010210:	061a      	lsls	r2, r3, #24
 8010212:	d410      	bmi.n	8010236 <__swhatbuf_r+0x3e>
 8010214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010218:	e00e      	b.n	8010238 <__swhatbuf_r+0x40>
 801021a:	466a      	mov	r2, sp
 801021c:	f001 f846 	bl	80112ac <_fstat_r>
 8010220:	2800      	cmp	r0, #0
 8010222:	dbf2      	blt.n	801020a <__swhatbuf_r+0x12>
 8010224:	9a01      	ldr	r2, [sp, #4]
 8010226:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801022a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801022e:	425a      	negs	r2, r3
 8010230:	415a      	adcs	r2, r3
 8010232:	602a      	str	r2, [r5, #0]
 8010234:	e7ee      	b.n	8010214 <__swhatbuf_r+0x1c>
 8010236:	2340      	movs	r3, #64	; 0x40
 8010238:	2000      	movs	r0, #0
 801023a:	6023      	str	r3, [r4, #0]
 801023c:	b016      	add	sp, #88	; 0x58
 801023e:	bd70      	pop	{r4, r5, r6, pc}

08010240 <__smakebuf_r>:
 8010240:	898b      	ldrh	r3, [r1, #12]
 8010242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010244:	079d      	lsls	r5, r3, #30
 8010246:	4606      	mov	r6, r0
 8010248:	460c      	mov	r4, r1
 801024a:	d507      	bpl.n	801025c <__smakebuf_r+0x1c>
 801024c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010250:	6023      	str	r3, [r4, #0]
 8010252:	6123      	str	r3, [r4, #16]
 8010254:	2301      	movs	r3, #1
 8010256:	6163      	str	r3, [r4, #20]
 8010258:	b002      	add	sp, #8
 801025a:	bd70      	pop	{r4, r5, r6, pc}
 801025c:	ab01      	add	r3, sp, #4
 801025e:	466a      	mov	r2, sp
 8010260:	f7ff ffca 	bl	80101f8 <__swhatbuf_r>
 8010264:	9900      	ldr	r1, [sp, #0]
 8010266:	4605      	mov	r5, r0
 8010268:	4630      	mov	r0, r6
 801026a:	f7fc fccb 	bl	800cc04 <_malloc_r>
 801026e:	b948      	cbnz	r0, 8010284 <__smakebuf_r+0x44>
 8010270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010274:	059a      	lsls	r2, r3, #22
 8010276:	d4ef      	bmi.n	8010258 <__smakebuf_r+0x18>
 8010278:	f023 0303 	bic.w	r3, r3, #3
 801027c:	f043 0302 	orr.w	r3, r3, #2
 8010280:	81a3      	strh	r3, [r4, #12]
 8010282:	e7e3      	b.n	801024c <__smakebuf_r+0xc>
 8010284:	4b0d      	ldr	r3, [pc, #52]	; (80102bc <__smakebuf_r+0x7c>)
 8010286:	62b3      	str	r3, [r6, #40]	; 0x28
 8010288:	89a3      	ldrh	r3, [r4, #12]
 801028a:	6020      	str	r0, [r4, #0]
 801028c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010290:	81a3      	strh	r3, [r4, #12]
 8010292:	9b00      	ldr	r3, [sp, #0]
 8010294:	6163      	str	r3, [r4, #20]
 8010296:	9b01      	ldr	r3, [sp, #4]
 8010298:	6120      	str	r0, [r4, #16]
 801029a:	b15b      	cbz	r3, 80102b4 <__smakebuf_r+0x74>
 801029c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102a0:	4630      	mov	r0, r6
 80102a2:	f001 f815 	bl	80112d0 <_isatty_r>
 80102a6:	b128      	cbz	r0, 80102b4 <__smakebuf_r+0x74>
 80102a8:	89a3      	ldrh	r3, [r4, #12]
 80102aa:	f023 0303 	bic.w	r3, r3, #3
 80102ae:	f043 0301 	orr.w	r3, r3, #1
 80102b2:	81a3      	strh	r3, [r4, #12]
 80102b4:	89a0      	ldrh	r0, [r4, #12]
 80102b6:	4305      	orrs	r5, r0
 80102b8:	81a5      	strh	r5, [r4, #12]
 80102ba:	e7cd      	b.n	8010258 <__smakebuf_r+0x18>
 80102bc:	0800f945 	.word	0x0800f945

080102c0 <__ascii_mbtowc>:
 80102c0:	b082      	sub	sp, #8
 80102c2:	b901      	cbnz	r1, 80102c6 <__ascii_mbtowc+0x6>
 80102c4:	a901      	add	r1, sp, #4
 80102c6:	b142      	cbz	r2, 80102da <__ascii_mbtowc+0x1a>
 80102c8:	b14b      	cbz	r3, 80102de <__ascii_mbtowc+0x1e>
 80102ca:	7813      	ldrb	r3, [r2, #0]
 80102cc:	600b      	str	r3, [r1, #0]
 80102ce:	7812      	ldrb	r2, [r2, #0]
 80102d0:	1e10      	subs	r0, r2, #0
 80102d2:	bf18      	it	ne
 80102d4:	2001      	movne	r0, #1
 80102d6:	b002      	add	sp, #8
 80102d8:	4770      	bx	lr
 80102da:	4610      	mov	r0, r2
 80102dc:	e7fb      	b.n	80102d6 <__ascii_mbtowc+0x16>
 80102de:	f06f 0001 	mvn.w	r0, #1
 80102e2:	e7f8      	b.n	80102d6 <__ascii_mbtowc+0x16>

080102e4 <__malloc_lock>:
 80102e4:	4801      	ldr	r0, [pc, #4]	; (80102ec <__malloc_lock+0x8>)
 80102e6:	f7ff bf72 	b.w	80101ce <__retarget_lock_acquire_recursive>
 80102ea:	bf00      	nop
 80102ec:	20001744 	.word	0x20001744

080102f0 <__malloc_unlock>:
 80102f0:	4801      	ldr	r0, [pc, #4]	; (80102f8 <__malloc_unlock+0x8>)
 80102f2:	f7ff bf6d 	b.w	80101d0 <__retarget_lock_release_recursive>
 80102f6:	bf00      	nop
 80102f8:	20001744 	.word	0x20001744

080102fc <_Balloc>:
 80102fc:	b570      	push	{r4, r5, r6, lr}
 80102fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010300:	4604      	mov	r4, r0
 8010302:	460d      	mov	r5, r1
 8010304:	b976      	cbnz	r6, 8010324 <_Balloc+0x28>
 8010306:	2010      	movs	r0, #16
 8010308:	f7fc fc0e 	bl	800cb28 <malloc>
 801030c:	4602      	mov	r2, r0
 801030e:	6260      	str	r0, [r4, #36]	; 0x24
 8010310:	b920      	cbnz	r0, 801031c <_Balloc+0x20>
 8010312:	4b18      	ldr	r3, [pc, #96]	; (8010374 <_Balloc+0x78>)
 8010314:	4818      	ldr	r0, [pc, #96]	; (8010378 <_Balloc+0x7c>)
 8010316:	2166      	movs	r1, #102	; 0x66
 8010318:	f000 ff98 	bl	801124c <__assert_func>
 801031c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010320:	6006      	str	r6, [r0, #0]
 8010322:	60c6      	str	r6, [r0, #12]
 8010324:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010326:	68f3      	ldr	r3, [r6, #12]
 8010328:	b183      	cbz	r3, 801034c <_Balloc+0x50>
 801032a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010332:	b9b8      	cbnz	r0, 8010364 <_Balloc+0x68>
 8010334:	2101      	movs	r1, #1
 8010336:	fa01 f605 	lsl.w	r6, r1, r5
 801033a:	1d72      	adds	r2, r6, #5
 801033c:	0092      	lsls	r2, r2, #2
 801033e:	4620      	mov	r0, r4
 8010340:	f000 fc97 	bl	8010c72 <_calloc_r>
 8010344:	b160      	cbz	r0, 8010360 <_Balloc+0x64>
 8010346:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801034a:	e00e      	b.n	801036a <_Balloc+0x6e>
 801034c:	2221      	movs	r2, #33	; 0x21
 801034e:	2104      	movs	r1, #4
 8010350:	4620      	mov	r0, r4
 8010352:	f000 fc8e 	bl	8010c72 <_calloc_r>
 8010356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010358:	60f0      	str	r0, [r6, #12]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1e4      	bne.n	801032a <_Balloc+0x2e>
 8010360:	2000      	movs	r0, #0
 8010362:	bd70      	pop	{r4, r5, r6, pc}
 8010364:	6802      	ldr	r2, [r0, #0]
 8010366:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801036a:	2300      	movs	r3, #0
 801036c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010370:	e7f7      	b.n	8010362 <_Balloc+0x66>
 8010372:	bf00      	nop
 8010374:	080127e5 	.word	0x080127e5
 8010378:	0801294c 	.word	0x0801294c

0801037c <_Bfree>:
 801037c:	b570      	push	{r4, r5, r6, lr}
 801037e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010380:	4605      	mov	r5, r0
 8010382:	460c      	mov	r4, r1
 8010384:	b976      	cbnz	r6, 80103a4 <_Bfree+0x28>
 8010386:	2010      	movs	r0, #16
 8010388:	f7fc fbce 	bl	800cb28 <malloc>
 801038c:	4602      	mov	r2, r0
 801038e:	6268      	str	r0, [r5, #36]	; 0x24
 8010390:	b920      	cbnz	r0, 801039c <_Bfree+0x20>
 8010392:	4b09      	ldr	r3, [pc, #36]	; (80103b8 <_Bfree+0x3c>)
 8010394:	4809      	ldr	r0, [pc, #36]	; (80103bc <_Bfree+0x40>)
 8010396:	218a      	movs	r1, #138	; 0x8a
 8010398:	f000 ff58 	bl	801124c <__assert_func>
 801039c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103a0:	6006      	str	r6, [r0, #0]
 80103a2:	60c6      	str	r6, [r0, #12]
 80103a4:	b13c      	cbz	r4, 80103b6 <_Bfree+0x3a>
 80103a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80103a8:	6862      	ldr	r2, [r4, #4]
 80103aa:	68db      	ldr	r3, [r3, #12]
 80103ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103b0:	6021      	str	r1, [r4, #0]
 80103b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80103b6:	bd70      	pop	{r4, r5, r6, pc}
 80103b8:	080127e5 	.word	0x080127e5
 80103bc:	0801294c 	.word	0x0801294c

080103c0 <__multadd>:
 80103c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c4:	690e      	ldr	r6, [r1, #16]
 80103c6:	4607      	mov	r7, r0
 80103c8:	4698      	mov	r8, r3
 80103ca:	460c      	mov	r4, r1
 80103cc:	f101 0014 	add.w	r0, r1, #20
 80103d0:	2300      	movs	r3, #0
 80103d2:	6805      	ldr	r5, [r0, #0]
 80103d4:	b2a9      	uxth	r1, r5
 80103d6:	fb02 8101 	mla	r1, r2, r1, r8
 80103da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80103de:	0c2d      	lsrs	r5, r5, #16
 80103e0:	fb02 c505 	mla	r5, r2, r5, ip
 80103e4:	b289      	uxth	r1, r1
 80103e6:	3301      	adds	r3, #1
 80103e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80103ec:	429e      	cmp	r6, r3
 80103ee:	f840 1b04 	str.w	r1, [r0], #4
 80103f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80103f6:	dcec      	bgt.n	80103d2 <__multadd+0x12>
 80103f8:	f1b8 0f00 	cmp.w	r8, #0
 80103fc:	d022      	beq.n	8010444 <__multadd+0x84>
 80103fe:	68a3      	ldr	r3, [r4, #8]
 8010400:	42b3      	cmp	r3, r6
 8010402:	dc19      	bgt.n	8010438 <__multadd+0x78>
 8010404:	6861      	ldr	r1, [r4, #4]
 8010406:	4638      	mov	r0, r7
 8010408:	3101      	adds	r1, #1
 801040a:	f7ff ff77 	bl	80102fc <_Balloc>
 801040e:	4605      	mov	r5, r0
 8010410:	b928      	cbnz	r0, 801041e <__multadd+0x5e>
 8010412:	4602      	mov	r2, r0
 8010414:	4b0d      	ldr	r3, [pc, #52]	; (801044c <__multadd+0x8c>)
 8010416:	480e      	ldr	r0, [pc, #56]	; (8010450 <__multadd+0x90>)
 8010418:	21b5      	movs	r1, #181	; 0xb5
 801041a:	f000 ff17 	bl	801124c <__assert_func>
 801041e:	6922      	ldr	r2, [r4, #16]
 8010420:	3202      	adds	r2, #2
 8010422:	f104 010c 	add.w	r1, r4, #12
 8010426:	0092      	lsls	r2, r2, #2
 8010428:	300c      	adds	r0, #12
 801042a:	f7fc fb85 	bl	800cb38 <memcpy>
 801042e:	4621      	mov	r1, r4
 8010430:	4638      	mov	r0, r7
 8010432:	f7ff ffa3 	bl	801037c <_Bfree>
 8010436:	462c      	mov	r4, r5
 8010438:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801043c:	3601      	adds	r6, #1
 801043e:	f8c3 8014 	str.w	r8, [r3, #20]
 8010442:	6126      	str	r6, [r4, #16]
 8010444:	4620      	mov	r0, r4
 8010446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801044a:	bf00      	nop
 801044c:	0801285b 	.word	0x0801285b
 8010450:	0801294c 	.word	0x0801294c

08010454 <__s2b>:
 8010454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010458:	460c      	mov	r4, r1
 801045a:	4615      	mov	r5, r2
 801045c:	461f      	mov	r7, r3
 801045e:	2209      	movs	r2, #9
 8010460:	3308      	adds	r3, #8
 8010462:	4606      	mov	r6, r0
 8010464:	fb93 f3f2 	sdiv	r3, r3, r2
 8010468:	2100      	movs	r1, #0
 801046a:	2201      	movs	r2, #1
 801046c:	429a      	cmp	r2, r3
 801046e:	db09      	blt.n	8010484 <__s2b+0x30>
 8010470:	4630      	mov	r0, r6
 8010472:	f7ff ff43 	bl	80102fc <_Balloc>
 8010476:	b940      	cbnz	r0, 801048a <__s2b+0x36>
 8010478:	4602      	mov	r2, r0
 801047a:	4b19      	ldr	r3, [pc, #100]	; (80104e0 <__s2b+0x8c>)
 801047c:	4819      	ldr	r0, [pc, #100]	; (80104e4 <__s2b+0x90>)
 801047e:	21ce      	movs	r1, #206	; 0xce
 8010480:	f000 fee4 	bl	801124c <__assert_func>
 8010484:	0052      	lsls	r2, r2, #1
 8010486:	3101      	adds	r1, #1
 8010488:	e7f0      	b.n	801046c <__s2b+0x18>
 801048a:	9b08      	ldr	r3, [sp, #32]
 801048c:	6143      	str	r3, [r0, #20]
 801048e:	2d09      	cmp	r5, #9
 8010490:	f04f 0301 	mov.w	r3, #1
 8010494:	6103      	str	r3, [r0, #16]
 8010496:	dd16      	ble.n	80104c6 <__s2b+0x72>
 8010498:	f104 0909 	add.w	r9, r4, #9
 801049c:	46c8      	mov	r8, r9
 801049e:	442c      	add	r4, r5
 80104a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80104a4:	4601      	mov	r1, r0
 80104a6:	3b30      	subs	r3, #48	; 0x30
 80104a8:	220a      	movs	r2, #10
 80104aa:	4630      	mov	r0, r6
 80104ac:	f7ff ff88 	bl	80103c0 <__multadd>
 80104b0:	45a0      	cmp	r8, r4
 80104b2:	d1f5      	bne.n	80104a0 <__s2b+0x4c>
 80104b4:	f1a5 0408 	sub.w	r4, r5, #8
 80104b8:	444c      	add	r4, r9
 80104ba:	1b2d      	subs	r5, r5, r4
 80104bc:	1963      	adds	r3, r4, r5
 80104be:	42bb      	cmp	r3, r7
 80104c0:	db04      	blt.n	80104cc <__s2b+0x78>
 80104c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104c6:	340a      	adds	r4, #10
 80104c8:	2509      	movs	r5, #9
 80104ca:	e7f6      	b.n	80104ba <__s2b+0x66>
 80104cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80104d0:	4601      	mov	r1, r0
 80104d2:	3b30      	subs	r3, #48	; 0x30
 80104d4:	220a      	movs	r2, #10
 80104d6:	4630      	mov	r0, r6
 80104d8:	f7ff ff72 	bl	80103c0 <__multadd>
 80104dc:	e7ee      	b.n	80104bc <__s2b+0x68>
 80104de:	bf00      	nop
 80104e0:	0801285b 	.word	0x0801285b
 80104e4:	0801294c 	.word	0x0801294c

080104e8 <__hi0bits>:
 80104e8:	0c03      	lsrs	r3, r0, #16
 80104ea:	041b      	lsls	r3, r3, #16
 80104ec:	b9d3      	cbnz	r3, 8010524 <__hi0bits+0x3c>
 80104ee:	0400      	lsls	r0, r0, #16
 80104f0:	2310      	movs	r3, #16
 80104f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80104f6:	bf04      	itt	eq
 80104f8:	0200      	lsleq	r0, r0, #8
 80104fa:	3308      	addeq	r3, #8
 80104fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010500:	bf04      	itt	eq
 8010502:	0100      	lsleq	r0, r0, #4
 8010504:	3304      	addeq	r3, #4
 8010506:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801050a:	bf04      	itt	eq
 801050c:	0080      	lsleq	r0, r0, #2
 801050e:	3302      	addeq	r3, #2
 8010510:	2800      	cmp	r0, #0
 8010512:	db05      	blt.n	8010520 <__hi0bits+0x38>
 8010514:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010518:	f103 0301 	add.w	r3, r3, #1
 801051c:	bf08      	it	eq
 801051e:	2320      	moveq	r3, #32
 8010520:	4618      	mov	r0, r3
 8010522:	4770      	bx	lr
 8010524:	2300      	movs	r3, #0
 8010526:	e7e4      	b.n	80104f2 <__hi0bits+0xa>

08010528 <__lo0bits>:
 8010528:	6803      	ldr	r3, [r0, #0]
 801052a:	f013 0207 	ands.w	r2, r3, #7
 801052e:	4601      	mov	r1, r0
 8010530:	d00b      	beq.n	801054a <__lo0bits+0x22>
 8010532:	07da      	lsls	r2, r3, #31
 8010534:	d424      	bmi.n	8010580 <__lo0bits+0x58>
 8010536:	0798      	lsls	r0, r3, #30
 8010538:	bf49      	itett	mi
 801053a:	085b      	lsrmi	r3, r3, #1
 801053c:	089b      	lsrpl	r3, r3, #2
 801053e:	2001      	movmi	r0, #1
 8010540:	600b      	strmi	r3, [r1, #0]
 8010542:	bf5c      	itt	pl
 8010544:	600b      	strpl	r3, [r1, #0]
 8010546:	2002      	movpl	r0, #2
 8010548:	4770      	bx	lr
 801054a:	b298      	uxth	r0, r3
 801054c:	b9b0      	cbnz	r0, 801057c <__lo0bits+0x54>
 801054e:	0c1b      	lsrs	r3, r3, #16
 8010550:	2010      	movs	r0, #16
 8010552:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010556:	bf04      	itt	eq
 8010558:	0a1b      	lsreq	r3, r3, #8
 801055a:	3008      	addeq	r0, #8
 801055c:	071a      	lsls	r2, r3, #28
 801055e:	bf04      	itt	eq
 8010560:	091b      	lsreq	r3, r3, #4
 8010562:	3004      	addeq	r0, #4
 8010564:	079a      	lsls	r2, r3, #30
 8010566:	bf04      	itt	eq
 8010568:	089b      	lsreq	r3, r3, #2
 801056a:	3002      	addeq	r0, #2
 801056c:	07da      	lsls	r2, r3, #31
 801056e:	d403      	bmi.n	8010578 <__lo0bits+0x50>
 8010570:	085b      	lsrs	r3, r3, #1
 8010572:	f100 0001 	add.w	r0, r0, #1
 8010576:	d005      	beq.n	8010584 <__lo0bits+0x5c>
 8010578:	600b      	str	r3, [r1, #0]
 801057a:	4770      	bx	lr
 801057c:	4610      	mov	r0, r2
 801057e:	e7e8      	b.n	8010552 <__lo0bits+0x2a>
 8010580:	2000      	movs	r0, #0
 8010582:	4770      	bx	lr
 8010584:	2020      	movs	r0, #32
 8010586:	4770      	bx	lr

08010588 <__i2b>:
 8010588:	b510      	push	{r4, lr}
 801058a:	460c      	mov	r4, r1
 801058c:	2101      	movs	r1, #1
 801058e:	f7ff feb5 	bl	80102fc <_Balloc>
 8010592:	4602      	mov	r2, r0
 8010594:	b928      	cbnz	r0, 80105a2 <__i2b+0x1a>
 8010596:	4b05      	ldr	r3, [pc, #20]	; (80105ac <__i2b+0x24>)
 8010598:	4805      	ldr	r0, [pc, #20]	; (80105b0 <__i2b+0x28>)
 801059a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801059e:	f000 fe55 	bl	801124c <__assert_func>
 80105a2:	2301      	movs	r3, #1
 80105a4:	6144      	str	r4, [r0, #20]
 80105a6:	6103      	str	r3, [r0, #16]
 80105a8:	bd10      	pop	{r4, pc}
 80105aa:	bf00      	nop
 80105ac:	0801285b 	.word	0x0801285b
 80105b0:	0801294c 	.word	0x0801294c

080105b4 <__multiply>:
 80105b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b8:	4614      	mov	r4, r2
 80105ba:	690a      	ldr	r2, [r1, #16]
 80105bc:	6923      	ldr	r3, [r4, #16]
 80105be:	429a      	cmp	r2, r3
 80105c0:	bfb8      	it	lt
 80105c2:	460b      	movlt	r3, r1
 80105c4:	460d      	mov	r5, r1
 80105c6:	bfbc      	itt	lt
 80105c8:	4625      	movlt	r5, r4
 80105ca:	461c      	movlt	r4, r3
 80105cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80105d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80105d4:	68ab      	ldr	r3, [r5, #8]
 80105d6:	6869      	ldr	r1, [r5, #4]
 80105d8:	eb0a 0709 	add.w	r7, sl, r9
 80105dc:	42bb      	cmp	r3, r7
 80105de:	b085      	sub	sp, #20
 80105e0:	bfb8      	it	lt
 80105e2:	3101      	addlt	r1, #1
 80105e4:	f7ff fe8a 	bl	80102fc <_Balloc>
 80105e8:	b930      	cbnz	r0, 80105f8 <__multiply+0x44>
 80105ea:	4602      	mov	r2, r0
 80105ec:	4b42      	ldr	r3, [pc, #264]	; (80106f8 <__multiply+0x144>)
 80105ee:	4843      	ldr	r0, [pc, #268]	; (80106fc <__multiply+0x148>)
 80105f0:	f240 115d 	movw	r1, #349	; 0x15d
 80105f4:	f000 fe2a 	bl	801124c <__assert_func>
 80105f8:	f100 0614 	add.w	r6, r0, #20
 80105fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010600:	4633      	mov	r3, r6
 8010602:	2200      	movs	r2, #0
 8010604:	4543      	cmp	r3, r8
 8010606:	d31e      	bcc.n	8010646 <__multiply+0x92>
 8010608:	f105 0c14 	add.w	ip, r5, #20
 801060c:	f104 0314 	add.w	r3, r4, #20
 8010610:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010614:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010618:	9202      	str	r2, [sp, #8]
 801061a:	ebac 0205 	sub.w	r2, ip, r5
 801061e:	3a15      	subs	r2, #21
 8010620:	f022 0203 	bic.w	r2, r2, #3
 8010624:	3204      	adds	r2, #4
 8010626:	f105 0115 	add.w	r1, r5, #21
 801062a:	458c      	cmp	ip, r1
 801062c:	bf38      	it	cc
 801062e:	2204      	movcc	r2, #4
 8010630:	9201      	str	r2, [sp, #4]
 8010632:	9a02      	ldr	r2, [sp, #8]
 8010634:	9303      	str	r3, [sp, #12]
 8010636:	429a      	cmp	r2, r3
 8010638:	d808      	bhi.n	801064c <__multiply+0x98>
 801063a:	2f00      	cmp	r7, #0
 801063c:	dc55      	bgt.n	80106ea <__multiply+0x136>
 801063e:	6107      	str	r7, [r0, #16]
 8010640:	b005      	add	sp, #20
 8010642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010646:	f843 2b04 	str.w	r2, [r3], #4
 801064a:	e7db      	b.n	8010604 <__multiply+0x50>
 801064c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010650:	f1ba 0f00 	cmp.w	sl, #0
 8010654:	d020      	beq.n	8010698 <__multiply+0xe4>
 8010656:	f105 0e14 	add.w	lr, r5, #20
 801065a:	46b1      	mov	r9, r6
 801065c:	2200      	movs	r2, #0
 801065e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010662:	f8d9 b000 	ldr.w	fp, [r9]
 8010666:	b2a1      	uxth	r1, r4
 8010668:	fa1f fb8b 	uxth.w	fp, fp
 801066c:	fb0a b101 	mla	r1, sl, r1, fp
 8010670:	4411      	add	r1, r2
 8010672:	f8d9 2000 	ldr.w	r2, [r9]
 8010676:	0c24      	lsrs	r4, r4, #16
 8010678:	0c12      	lsrs	r2, r2, #16
 801067a:	fb0a 2404 	mla	r4, sl, r4, r2
 801067e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010682:	b289      	uxth	r1, r1
 8010684:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010688:	45f4      	cmp	ip, lr
 801068a:	f849 1b04 	str.w	r1, [r9], #4
 801068e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010692:	d8e4      	bhi.n	801065e <__multiply+0xaa>
 8010694:	9901      	ldr	r1, [sp, #4]
 8010696:	5072      	str	r2, [r6, r1]
 8010698:	9a03      	ldr	r2, [sp, #12]
 801069a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801069e:	3304      	adds	r3, #4
 80106a0:	f1b9 0f00 	cmp.w	r9, #0
 80106a4:	d01f      	beq.n	80106e6 <__multiply+0x132>
 80106a6:	6834      	ldr	r4, [r6, #0]
 80106a8:	f105 0114 	add.w	r1, r5, #20
 80106ac:	46b6      	mov	lr, r6
 80106ae:	f04f 0a00 	mov.w	sl, #0
 80106b2:	880a      	ldrh	r2, [r1, #0]
 80106b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80106b8:	fb09 b202 	mla	r2, r9, r2, fp
 80106bc:	4492      	add	sl, r2
 80106be:	b2a4      	uxth	r4, r4
 80106c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80106c4:	f84e 4b04 	str.w	r4, [lr], #4
 80106c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80106cc:	f8be 2000 	ldrh.w	r2, [lr]
 80106d0:	0c24      	lsrs	r4, r4, #16
 80106d2:	fb09 2404 	mla	r4, r9, r4, r2
 80106d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80106da:	458c      	cmp	ip, r1
 80106dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80106e0:	d8e7      	bhi.n	80106b2 <__multiply+0xfe>
 80106e2:	9a01      	ldr	r2, [sp, #4]
 80106e4:	50b4      	str	r4, [r6, r2]
 80106e6:	3604      	adds	r6, #4
 80106e8:	e7a3      	b.n	8010632 <__multiply+0x7e>
 80106ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1a5      	bne.n	801063e <__multiply+0x8a>
 80106f2:	3f01      	subs	r7, #1
 80106f4:	e7a1      	b.n	801063a <__multiply+0x86>
 80106f6:	bf00      	nop
 80106f8:	0801285b 	.word	0x0801285b
 80106fc:	0801294c 	.word	0x0801294c

08010700 <__pow5mult>:
 8010700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010704:	4615      	mov	r5, r2
 8010706:	f012 0203 	ands.w	r2, r2, #3
 801070a:	4606      	mov	r6, r0
 801070c:	460f      	mov	r7, r1
 801070e:	d007      	beq.n	8010720 <__pow5mult+0x20>
 8010710:	4c25      	ldr	r4, [pc, #148]	; (80107a8 <__pow5mult+0xa8>)
 8010712:	3a01      	subs	r2, #1
 8010714:	2300      	movs	r3, #0
 8010716:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801071a:	f7ff fe51 	bl	80103c0 <__multadd>
 801071e:	4607      	mov	r7, r0
 8010720:	10ad      	asrs	r5, r5, #2
 8010722:	d03d      	beq.n	80107a0 <__pow5mult+0xa0>
 8010724:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010726:	b97c      	cbnz	r4, 8010748 <__pow5mult+0x48>
 8010728:	2010      	movs	r0, #16
 801072a:	f7fc f9fd 	bl	800cb28 <malloc>
 801072e:	4602      	mov	r2, r0
 8010730:	6270      	str	r0, [r6, #36]	; 0x24
 8010732:	b928      	cbnz	r0, 8010740 <__pow5mult+0x40>
 8010734:	4b1d      	ldr	r3, [pc, #116]	; (80107ac <__pow5mult+0xac>)
 8010736:	481e      	ldr	r0, [pc, #120]	; (80107b0 <__pow5mult+0xb0>)
 8010738:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801073c:	f000 fd86 	bl	801124c <__assert_func>
 8010740:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010744:	6004      	str	r4, [r0, #0]
 8010746:	60c4      	str	r4, [r0, #12]
 8010748:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801074c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010750:	b94c      	cbnz	r4, 8010766 <__pow5mult+0x66>
 8010752:	f240 2171 	movw	r1, #625	; 0x271
 8010756:	4630      	mov	r0, r6
 8010758:	f7ff ff16 	bl	8010588 <__i2b>
 801075c:	2300      	movs	r3, #0
 801075e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010762:	4604      	mov	r4, r0
 8010764:	6003      	str	r3, [r0, #0]
 8010766:	f04f 0900 	mov.w	r9, #0
 801076a:	07eb      	lsls	r3, r5, #31
 801076c:	d50a      	bpl.n	8010784 <__pow5mult+0x84>
 801076e:	4639      	mov	r1, r7
 8010770:	4622      	mov	r2, r4
 8010772:	4630      	mov	r0, r6
 8010774:	f7ff ff1e 	bl	80105b4 <__multiply>
 8010778:	4639      	mov	r1, r7
 801077a:	4680      	mov	r8, r0
 801077c:	4630      	mov	r0, r6
 801077e:	f7ff fdfd 	bl	801037c <_Bfree>
 8010782:	4647      	mov	r7, r8
 8010784:	106d      	asrs	r5, r5, #1
 8010786:	d00b      	beq.n	80107a0 <__pow5mult+0xa0>
 8010788:	6820      	ldr	r0, [r4, #0]
 801078a:	b938      	cbnz	r0, 801079c <__pow5mult+0x9c>
 801078c:	4622      	mov	r2, r4
 801078e:	4621      	mov	r1, r4
 8010790:	4630      	mov	r0, r6
 8010792:	f7ff ff0f 	bl	80105b4 <__multiply>
 8010796:	6020      	str	r0, [r4, #0]
 8010798:	f8c0 9000 	str.w	r9, [r0]
 801079c:	4604      	mov	r4, r0
 801079e:	e7e4      	b.n	801076a <__pow5mult+0x6a>
 80107a0:	4638      	mov	r0, r7
 80107a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107a6:	bf00      	nop
 80107a8:	08012aa0 	.word	0x08012aa0
 80107ac:	080127e5 	.word	0x080127e5
 80107b0:	0801294c 	.word	0x0801294c

080107b4 <__lshift>:
 80107b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107b8:	460c      	mov	r4, r1
 80107ba:	6849      	ldr	r1, [r1, #4]
 80107bc:	6923      	ldr	r3, [r4, #16]
 80107be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80107c2:	68a3      	ldr	r3, [r4, #8]
 80107c4:	4607      	mov	r7, r0
 80107c6:	4691      	mov	r9, r2
 80107c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80107cc:	f108 0601 	add.w	r6, r8, #1
 80107d0:	42b3      	cmp	r3, r6
 80107d2:	db0b      	blt.n	80107ec <__lshift+0x38>
 80107d4:	4638      	mov	r0, r7
 80107d6:	f7ff fd91 	bl	80102fc <_Balloc>
 80107da:	4605      	mov	r5, r0
 80107dc:	b948      	cbnz	r0, 80107f2 <__lshift+0x3e>
 80107de:	4602      	mov	r2, r0
 80107e0:	4b28      	ldr	r3, [pc, #160]	; (8010884 <__lshift+0xd0>)
 80107e2:	4829      	ldr	r0, [pc, #164]	; (8010888 <__lshift+0xd4>)
 80107e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80107e8:	f000 fd30 	bl	801124c <__assert_func>
 80107ec:	3101      	adds	r1, #1
 80107ee:	005b      	lsls	r3, r3, #1
 80107f0:	e7ee      	b.n	80107d0 <__lshift+0x1c>
 80107f2:	2300      	movs	r3, #0
 80107f4:	f100 0114 	add.w	r1, r0, #20
 80107f8:	f100 0210 	add.w	r2, r0, #16
 80107fc:	4618      	mov	r0, r3
 80107fe:	4553      	cmp	r3, sl
 8010800:	db33      	blt.n	801086a <__lshift+0xb6>
 8010802:	6920      	ldr	r0, [r4, #16]
 8010804:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010808:	f104 0314 	add.w	r3, r4, #20
 801080c:	f019 091f 	ands.w	r9, r9, #31
 8010810:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010814:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010818:	d02b      	beq.n	8010872 <__lshift+0xbe>
 801081a:	f1c9 0e20 	rsb	lr, r9, #32
 801081e:	468a      	mov	sl, r1
 8010820:	2200      	movs	r2, #0
 8010822:	6818      	ldr	r0, [r3, #0]
 8010824:	fa00 f009 	lsl.w	r0, r0, r9
 8010828:	4302      	orrs	r2, r0
 801082a:	f84a 2b04 	str.w	r2, [sl], #4
 801082e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010832:	459c      	cmp	ip, r3
 8010834:	fa22 f20e 	lsr.w	r2, r2, lr
 8010838:	d8f3      	bhi.n	8010822 <__lshift+0x6e>
 801083a:	ebac 0304 	sub.w	r3, ip, r4
 801083e:	3b15      	subs	r3, #21
 8010840:	f023 0303 	bic.w	r3, r3, #3
 8010844:	3304      	adds	r3, #4
 8010846:	f104 0015 	add.w	r0, r4, #21
 801084a:	4584      	cmp	ip, r0
 801084c:	bf38      	it	cc
 801084e:	2304      	movcc	r3, #4
 8010850:	50ca      	str	r2, [r1, r3]
 8010852:	b10a      	cbz	r2, 8010858 <__lshift+0xa4>
 8010854:	f108 0602 	add.w	r6, r8, #2
 8010858:	3e01      	subs	r6, #1
 801085a:	4638      	mov	r0, r7
 801085c:	612e      	str	r6, [r5, #16]
 801085e:	4621      	mov	r1, r4
 8010860:	f7ff fd8c 	bl	801037c <_Bfree>
 8010864:	4628      	mov	r0, r5
 8010866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801086a:	f842 0f04 	str.w	r0, [r2, #4]!
 801086e:	3301      	adds	r3, #1
 8010870:	e7c5      	b.n	80107fe <__lshift+0x4a>
 8010872:	3904      	subs	r1, #4
 8010874:	f853 2b04 	ldr.w	r2, [r3], #4
 8010878:	f841 2f04 	str.w	r2, [r1, #4]!
 801087c:	459c      	cmp	ip, r3
 801087e:	d8f9      	bhi.n	8010874 <__lshift+0xc0>
 8010880:	e7ea      	b.n	8010858 <__lshift+0xa4>
 8010882:	bf00      	nop
 8010884:	0801285b 	.word	0x0801285b
 8010888:	0801294c 	.word	0x0801294c

0801088c <__mcmp>:
 801088c:	b530      	push	{r4, r5, lr}
 801088e:	6902      	ldr	r2, [r0, #16]
 8010890:	690c      	ldr	r4, [r1, #16]
 8010892:	1b12      	subs	r2, r2, r4
 8010894:	d10e      	bne.n	80108b4 <__mcmp+0x28>
 8010896:	f100 0314 	add.w	r3, r0, #20
 801089a:	3114      	adds	r1, #20
 801089c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80108a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80108a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80108a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80108ac:	42a5      	cmp	r5, r4
 80108ae:	d003      	beq.n	80108b8 <__mcmp+0x2c>
 80108b0:	d305      	bcc.n	80108be <__mcmp+0x32>
 80108b2:	2201      	movs	r2, #1
 80108b4:	4610      	mov	r0, r2
 80108b6:	bd30      	pop	{r4, r5, pc}
 80108b8:	4283      	cmp	r3, r0
 80108ba:	d3f3      	bcc.n	80108a4 <__mcmp+0x18>
 80108bc:	e7fa      	b.n	80108b4 <__mcmp+0x28>
 80108be:	f04f 32ff 	mov.w	r2, #4294967295
 80108c2:	e7f7      	b.n	80108b4 <__mcmp+0x28>

080108c4 <__mdiff>:
 80108c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108c8:	460c      	mov	r4, r1
 80108ca:	4606      	mov	r6, r0
 80108cc:	4611      	mov	r1, r2
 80108ce:	4620      	mov	r0, r4
 80108d0:	4617      	mov	r7, r2
 80108d2:	f7ff ffdb 	bl	801088c <__mcmp>
 80108d6:	1e05      	subs	r5, r0, #0
 80108d8:	d110      	bne.n	80108fc <__mdiff+0x38>
 80108da:	4629      	mov	r1, r5
 80108dc:	4630      	mov	r0, r6
 80108de:	f7ff fd0d 	bl	80102fc <_Balloc>
 80108e2:	b930      	cbnz	r0, 80108f2 <__mdiff+0x2e>
 80108e4:	4b39      	ldr	r3, [pc, #228]	; (80109cc <__mdiff+0x108>)
 80108e6:	4602      	mov	r2, r0
 80108e8:	f240 2132 	movw	r1, #562	; 0x232
 80108ec:	4838      	ldr	r0, [pc, #224]	; (80109d0 <__mdiff+0x10c>)
 80108ee:	f000 fcad 	bl	801124c <__assert_func>
 80108f2:	2301      	movs	r3, #1
 80108f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80108f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108fc:	bfa4      	itt	ge
 80108fe:	463b      	movge	r3, r7
 8010900:	4627      	movge	r7, r4
 8010902:	4630      	mov	r0, r6
 8010904:	6879      	ldr	r1, [r7, #4]
 8010906:	bfa6      	itte	ge
 8010908:	461c      	movge	r4, r3
 801090a:	2500      	movge	r5, #0
 801090c:	2501      	movlt	r5, #1
 801090e:	f7ff fcf5 	bl	80102fc <_Balloc>
 8010912:	b920      	cbnz	r0, 801091e <__mdiff+0x5a>
 8010914:	4b2d      	ldr	r3, [pc, #180]	; (80109cc <__mdiff+0x108>)
 8010916:	4602      	mov	r2, r0
 8010918:	f44f 7110 	mov.w	r1, #576	; 0x240
 801091c:	e7e6      	b.n	80108ec <__mdiff+0x28>
 801091e:	693e      	ldr	r6, [r7, #16]
 8010920:	60c5      	str	r5, [r0, #12]
 8010922:	6925      	ldr	r5, [r4, #16]
 8010924:	f107 0114 	add.w	r1, r7, #20
 8010928:	f104 0914 	add.w	r9, r4, #20
 801092c:	f100 0e14 	add.w	lr, r0, #20
 8010930:	f107 0210 	add.w	r2, r7, #16
 8010934:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010938:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801093c:	46f2      	mov	sl, lr
 801093e:	2700      	movs	r7, #0
 8010940:	f859 3b04 	ldr.w	r3, [r9], #4
 8010944:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010948:	fa1f f883 	uxth.w	r8, r3
 801094c:	fa17 f78b 	uxtah	r7, r7, fp
 8010950:	0c1b      	lsrs	r3, r3, #16
 8010952:	eba7 0808 	sub.w	r8, r7, r8
 8010956:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801095a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801095e:	fa1f f888 	uxth.w	r8, r8
 8010962:	141f      	asrs	r7, r3, #16
 8010964:	454d      	cmp	r5, r9
 8010966:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801096a:	f84a 3b04 	str.w	r3, [sl], #4
 801096e:	d8e7      	bhi.n	8010940 <__mdiff+0x7c>
 8010970:	1b2b      	subs	r3, r5, r4
 8010972:	3b15      	subs	r3, #21
 8010974:	f023 0303 	bic.w	r3, r3, #3
 8010978:	3304      	adds	r3, #4
 801097a:	3415      	adds	r4, #21
 801097c:	42a5      	cmp	r5, r4
 801097e:	bf38      	it	cc
 8010980:	2304      	movcc	r3, #4
 8010982:	4419      	add	r1, r3
 8010984:	4473      	add	r3, lr
 8010986:	469e      	mov	lr, r3
 8010988:	460d      	mov	r5, r1
 801098a:	4565      	cmp	r5, ip
 801098c:	d30e      	bcc.n	80109ac <__mdiff+0xe8>
 801098e:	f10c 0203 	add.w	r2, ip, #3
 8010992:	1a52      	subs	r2, r2, r1
 8010994:	f022 0203 	bic.w	r2, r2, #3
 8010998:	3903      	subs	r1, #3
 801099a:	458c      	cmp	ip, r1
 801099c:	bf38      	it	cc
 801099e:	2200      	movcc	r2, #0
 80109a0:	441a      	add	r2, r3
 80109a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80109a6:	b17b      	cbz	r3, 80109c8 <__mdiff+0x104>
 80109a8:	6106      	str	r6, [r0, #16]
 80109aa:	e7a5      	b.n	80108f8 <__mdiff+0x34>
 80109ac:	f855 8b04 	ldr.w	r8, [r5], #4
 80109b0:	fa17 f488 	uxtah	r4, r7, r8
 80109b4:	1422      	asrs	r2, r4, #16
 80109b6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80109ba:	b2a4      	uxth	r4, r4
 80109bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80109c0:	f84e 4b04 	str.w	r4, [lr], #4
 80109c4:	1417      	asrs	r7, r2, #16
 80109c6:	e7e0      	b.n	801098a <__mdiff+0xc6>
 80109c8:	3e01      	subs	r6, #1
 80109ca:	e7ea      	b.n	80109a2 <__mdiff+0xde>
 80109cc:	0801285b 	.word	0x0801285b
 80109d0:	0801294c 	.word	0x0801294c

080109d4 <__ulp>:
 80109d4:	b082      	sub	sp, #8
 80109d6:	ed8d 0b00 	vstr	d0, [sp]
 80109da:	9b01      	ldr	r3, [sp, #4]
 80109dc:	4912      	ldr	r1, [pc, #72]	; (8010a28 <__ulp+0x54>)
 80109de:	4019      	ands	r1, r3
 80109e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80109e4:	2900      	cmp	r1, #0
 80109e6:	dd05      	ble.n	80109f4 <__ulp+0x20>
 80109e8:	2200      	movs	r2, #0
 80109ea:	460b      	mov	r3, r1
 80109ec:	ec43 2b10 	vmov	d0, r2, r3
 80109f0:	b002      	add	sp, #8
 80109f2:	4770      	bx	lr
 80109f4:	4249      	negs	r1, r1
 80109f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80109fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80109fe:	f04f 0200 	mov.w	r2, #0
 8010a02:	f04f 0300 	mov.w	r3, #0
 8010a06:	da04      	bge.n	8010a12 <__ulp+0x3e>
 8010a08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010a0c:	fa41 f300 	asr.w	r3, r1, r0
 8010a10:	e7ec      	b.n	80109ec <__ulp+0x18>
 8010a12:	f1a0 0114 	sub.w	r1, r0, #20
 8010a16:	291e      	cmp	r1, #30
 8010a18:	bfda      	itte	le
 8010a1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010a1e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010a22:	2101      	movgt	r1, #1
 8010a24:	460a      	mov	r2, r1
 8010a26:	e7e1      	b.n	80109ec <__ulp+0x18>
 8010a28:	7ff00000 	.word	0x7ff00000

08010a2c <__b2d>:
 8010a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a2e:	6905      	ldr	r5, [r0, #16]
 8010a30:	f100 0714 	add.w	r7, r0, #20
 8010a34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010a38:	1f2e      	subs	r6, r5, #4
 8010a3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010a3e:	4620      	mov	r0, r4
 8010a40:	f7ff fd52 	bl	80104e8 <__hi0bits>
 8010a44:	f1c0 0320 	rsb	r3, r0, #32
 8010a48:	280a      	cmp	r0, #10
 8010a4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010ac8 <__b2d+0x9c>
 8010a4e:	600b      	str	r3, [r1, #0]
 8010a50:	dc14      	bgt.n	8010a7c <__b2d+0x50>
 8010a52:	f1c0 0e0b 	rsb	lr, r0, #11
 8010a56:	fa24 f10e 	lsr.w	r1, r4, lr
 8010a5a:	42b7      	cmp	r7, r6
 8010a5c:	ea41 030c 	orr.w	r3, r1, ip
 8010a60:	bf34      	ite	cc
 8010a62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010a66:	2100      	movcs	r1, #0
 8010a68:	3015      	adds	r0, #21
 8010a6a:	fa04 f000 	lsl.w	r0, r4, r0
 8010a6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010a72:	ea40 0201 	orr.w	r2, r0, r1
 8010a76:	ec43 2b10 	vmov	d0, r2, r3
 8010a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a7c:	42b7      	cmp	r7, r6
 8010a7e:	bf3a      	itte	cc
 8010a80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010a84:	f1a5 0608 	subcc.w	r6, r5, #8
 8010a88:	2100      	movcs	r1, #0
 8010a8a:	380b      	subs	r0, #11
 8010a8c:	d017      	beq.n	8010abe <__b2d+0x92>
 8010a8e:	f1c0 0c20 	rsb	ip, r0, #32
 8010a92:	fa04 f500 	lsl.w	r5, r4, r0
 8010a96:	42be      	cmp	r6, r7
 8010a98:	fa21 f40c 	lsr.w	r4, r1, ip
 8010a9c:	ea45 0504 	orr.w	r5, r5, r4
 8010aa0:	bf8c      	ite	hi
 8010aa2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010aa6:	2400      	movls	r4, #0
 8010aa8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010aac:	fa01 f000 	lsl.w	r0, r1, r0
 8010ab0:	fa24 f40c 	lsr.w	r4, r4, ip
 8010ab4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010ab8:	ea40 0204 	orr.w	r2, r0, r4
 8010abc:	e7db      	b.n	8010a76 <__b2d+0x4a>
 8010abe:	ea44 030c 	orr.w	r3, r4, ip
 8010ac2:	460a      	mov	r2, r1
 8010ac4:	e7d7      	b.n	8010a76 <__b2d+0x4a>
 8010ac6:	bf00      	nop
 8010ac8:	3ff00000 	.word	0x3ff00000

08010acc <__d2b>:
 8010acc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010ad0:	4689      	mov	r9, r1
 8010ad2:	2101      	movs	r1, #1
 8010ad4:	ec57 6b10 	vmov	r6, r7, d0
 8010ad8:	4690      	mov	r8, r2
 8010ada:	f7ff fc0f 	bl	80102fc <_Balloc>
 8010ade:	4604      	mov	r4, r0
 8010ae0:	b930      	cbnz	r0, 8010af0 <__d2b+0x24>
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	4b25      	ldr	r3, [pc, #148]	; (8010b7c <__d2b+0xb0>)
 8010ae6:	4826      	ldr	r0, [pc, #152]	; (8010b80 <__d2b+0xb4>)
 8010ae8:	f240 310a 	movw	r1, #778	; 0x30a
 8010aec:	f000 fbae 	bl	801124c <__assert_func>
 8010af0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010af4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010af8:	bb35      	cbnz	r5, 8010b48 <__d2b+0x7c>
 8010afa:	2e00      	cmp	r6, #0
 8010afc:	9301      	str	r3, [sp, #4]
 8010afe:	d028      	beq.n	8010b52 <__d2b+0x86>
 8010b00:	4668      	mov	r0, sp
 8010b02:	9600      	str	r6, [sp, #0]
 8010b04:	f7ff fd10 	bl	8010528 <__lo0bits>
 8010b08:	9900      	ldr	r1, [sp, #0]
 8010b0a:	b300      	cbz	r0, 8010b4e <__d2b+0x82>
 8010b0c:	9a01      	ldr	r2, [sp, #4]
 8010b0e:	f1c0 0320 	rsb	r3, r0, #32
 8010b12:	fa02 f303 	lsl.w	r3, r2, r3
 8010b16:	430b      	orrs	r3, r1
 8010b18:	40c2      	lsrs	r2, r0
 8010b1a:	6163      	str	r3, [r4, #20]
 8010b1c:	9201      	str	r2, [sp, #4]
 8010b1e:	9b01      	ldr	r3, [sp, #4]
 8010b20:	61a3      	str	r3, [r4, #24]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	bf14      	ite	ne
 8010b26:	2202      	movne	r2, #2
 8010b28:	2201      	moveq	r2, #1
 8010b2a:	6122      	str	r2, [r4, #16]
 8010b2c:	b1d5      	cbz	r5, 8010b64 <__d2b+0x98>
 8010b2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010b32:	4405      	add	r5, r0
 8010b34:	f8c9 5000 	str.w	r5, [r9]
 8010b38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010b3c:	f8c8 0000 	str.w	r0, [r8]
 8010b40:	4620      	mov	r0, r4
 8010b42:	b003      	add	sp, #12
 8010b44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b4c:	e7d5      	b.n	8010afa <__d2b+0x2e>
 8010b4e:	6161      	str	r1, [r4, #20]
 8010b50:	e7e5      	b.n	8010b1e <__d2b+0x52>
 8010b52:	a801      	add	r0, sp, #4
 8010b54:	f7ff fce8 	bl	8010528 <__lo0bits>
 8010b58:	9b01      	ldr	r3, [sp, #4]
 8010b5a:	6163      	str	r3, [r4, #20]
 8010b5c:	2201      	movs	r2, #1
 8010b5e:	6122      	str	r2, [r4, #16]
 8010b60:	3020      	adds	r0, #32
 8010b62:	e7e3      	b.n	8010b2c <__d2b+0x60>
 8010b64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010b6c:	f8c9 0000 	str.w	r0, [r9]
 8010b70:	6918      	ldr	r0, [r3, #16]
 8010b72:	f7ff fcb9 	bl	80104e8 <__hi0bits>
 8010b76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b7a:	e7df      	b.n	8010b3c <__d2b+0x70>
 8010b7c:	0801285b 	.word	0x0801285b
 8010b80:	0801294c 	.word	0x0801294c

08010b84 <__ratio>:
 8010b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b88:	4688      	mov	r8, r1
 8010b8a:	4669      	mov	r1, sp
 8010b8c:	4681      	mov	r9, r0
 8010b8e:	f7ff ff4d 	bl	8010a2c <__b2d>
 8010b92:	a901      	add	r1, sp, #4
 8010b94:	4640      	mov	r0, r8
 8010b96:	ec55 4b10 	vmov	r4, r5, d0
 8010b9a:	f7ff ff47 	bl	8010a2c <__b2d>
 8010b9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ba2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010ba6:	eba3 0c02 	sub.w	ip, r3, r2
 8010baa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010bae:	1a9b      	subs	r3, r3, r2
 8010bb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010bb4:	ec51 0b10 	vmov	r0, r1, d0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	bfd6      	itet	le
 8010bbc:	460a      	movle	r2, r1
 8010bbe:	462a      	movgt	r2, r5
 8010bc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010bc4:	468b      	mov	fp, r1
 8010bc6:	462f      	mov	r7, r5
 8010bc8:	bfd4      	ite	le
 8010bca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010bce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010bd2:	4620      	mov	r0, r4
 8010bd4:	ee10 2a10 	vmov	r2, s0
 8010bd8:	465b      	mov	r3, fp
 8010bda:	4639      	mov	r1, r7
 8010bdc:	f7ef fe46 	bl	800086c <__aeabi_ddiv>
 8010be0:	ec41 0b10 	vmov	d0, r0, r1
 8010be4:	b003      	add	sp, #12
 8010be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010bea <__copybits>:
 8010bea:	3901      	subs	r1, #1
 8010bec:	b570      	push	{r4, r5, r6, lr}
 8010bee:	1149      	asrs	r1, r1, #5
 8010bf0:	6914      	ldr	r4, [r2, #16]
 8010bf2:	3101      	adds	r1, #1
 8010bf4:	f102 0314 	add.w	r3, r2, #20
 8010bf8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010bfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c00:	1f05      	subs	r5, r0, #4
 8010c02:	42a3      	cmp	r3, r4
 8010c04:	d30c      	bcc.n	8010c20 <__copybits+0x36>
 8010c06:	1aa3      	subs	r3, r4, r2
 8010c08:	3b11      	subs	r3, #17
 8010c0a:	f023 0303 	bic.w	r3, r3, #3
 8010c0e:	3211      	adds	r2, #17
 8010c10:	42a2      	cmp	r2, r4
 8010c12:	bf88      	it	hi
 8010c14:	2300      	movhi	r3, #0
 8010c16:	4418      	add	r0, r3
 8010c18:	2300      	movs	r3, #0
 8010c1a:	4288      	cmp	r0, r1
 8010c1c:	d305      	bcc.n	8010c2a <__copybits+0x40>
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}
 8010c20:	f853 6b04 	ldr.w	r6, [r3], #4
 8010c24:	f845 6f04 	str.w	r6, [r5, #4]!
 8010c28:	e7eb      	b.n	8010c02 <__copybits+0x18>
 8010c2a:	f840 3b04 	str.w	r3, [r0], #4
 8010c2e:	e7f4      	b.n	8010c1a <__copybits+0x30>

08010c30 <__any_on>:
 8010c30:	f100 0214 	add.w	r2, r0, #20
 8010c34:	6900      	ldr	r0, [r0, #16]
 8010c36:	114b      	asrs	r3, r1, #5
 8010c38:	4298      	cmp	r0, r3
 8010c3a:	b510      	push	{r4, lr}
 8010c3c:	db11      	blt.n	8010c62 <__any_on+0x32>
 8010c3e:	dd0a      	ble.n	8010c56 <__any_on+0x26>
 8010c40:	f011 011f 	ands.w	r1, r1, #31
 8010c44:	d007      	beq.n	8010c56 <__any_on+0x26>
 8010c46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010c4a:	fa24 f001 	lsr.w	r0, r4, r1
 8010c4e:	fa00 f101 	lsl.w	r1, r0, r1
 8010c52:	428c      	cmp	r4, r1
 8010c54:	d10b      	bne.n	8010c6e <__any_on+0x3e>
 8010c56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d803      	bhi.n	8010c66 <__any_on+0x36>
 8010c5e:	2000      	movs	r0, #0
 8010c60:	bd10      	pop	{r4, pc}
 8010c62:	4603      	mov	r3, r0
 8010c64:	e7f7      	b.n	8010c56 <__any_on+0x26>
 8010c66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010c6a:	2900      	cmp	r1, #0
 8010c6c:	d0f5      	beq.n	8010c5a <__any_on+0x2a>
 8010c6e:	2001      	movs	r0, #1
 8010c70:	e7f6      	b.n	8010c60 <__any_on+0x30>

08010c72 <_calloc_r>:
 8010c72:	b513      	push	{r0, r1, r4, lr}
 8010c74:	434a      	muls	r2, r1
 8010c76:	4611      	mov	r1, r2
 8010c78:	9201      	str	r2, [sp, #4]
 8010c7a:	f7fb ffc3 	bl	800cc04 <_malloc_r>
 8010c7e:	4604      	mov	r4, r0
 8010c80:	b118      	cbz	r0, 8010c8a <_calloc_r+0x18>
 8010c82:	9a01      	ldr	r2, [sp, #4]
 8010c84:	2100      	movs	r1, #0
 8010c86:	f7fb ff65 	bl	800cb54 <memset>
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	b002      	add	sp, #8
 8010c8e:	bd10      	pop	{r4, pc}

08010c90 <__ssputs_r>:
 8010c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c94:	688e      	ldr	r6, [r1, #8]
 8010c96:	429e      	cmp	r6, r3
 8010c98:	4682      	mov	sl, r0
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	4690      	mov	r8, r2
 8010c9e:	461f      	mov	r7, r3
 8010ca0:	d838      	bhi.n	8010d14 <__ssputs_r+0x84>
 8010ca2:	898a      	ldrh	r2, [r1, #12]
 8010ca4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010ca8:	d032      	beq.n	8010d10 <__ssputs_r+0x80>
 8010caa:	6825      	ldr	r5, [r4, #0]
 8010cac:	6909      	ldr	r1, [r1, #16]
 8010cae:	eba5 0901 	sub.w	r9, r5, r1
 8010cb2:	6965      	ldr	r5, [r4, #20]
 8010cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010cb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	444b      	add	r3, r9
 8010cc0:	106d      	asrs	r5, r5, #1
 8010cc2:	429d      	cmp	r5, r3
 8010cc4:	bf38      	it	cc
 8010cc6:	461d      	movcc	r5, r3
 8010cc8:	0553      	lsls	r3, r2, #21
 8010cca:	d531      	bpl.n	8010d30 <__ssputs_r+0xa0>
 8010ccc:	4629      	mov	r1, r5
 8010cce:	f7fb ff99 	bl	800cc04 <_malloc_r>
 8010cd2:	4606      	mov	r6, r0
 8010cd4:	b950      	cbnz	r0, 8010cec <__ssputs_r+0x5c>
 8010cd6:	230c      	movs	r3, #12
 8010cd8:	f8ca 3000 	str.w	r3, [sl]
 8010cdc:	89a3      	ldrh	r3, [r4, #12]
 8010cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ce2:	81a3      	strh	r3, [r4, #12]
 8010ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cec:	6921      	ldr	r1, [r4, #16]
 8010cee:	464a      	mov	r2, r9
 8010cf0:	f7fb ff22 	bl	800cb38 <memcpy>
 8010cf4:	89a3      	ldrh	r3, [r4, #12]
 8010cf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cfe:	81a3      	strh	r3, [r4, #12]
 8010d00:	6126      	str	r6, [r4, #16]
 8010d02:	6165      	str	r5, [r4, #20]
 8010d04:	444e      	add	r6, r9
 8010d06:	eba5 0509 	sub.w	r5, r5, r9
 8010d0a:	6026      	str	r6, [r4, #0]
 8010d0c:	60a5      	str	r5, [r4, #8]
 8010d0e:	463e      	mov	r6, r7
 8010d10:	42be      	cmp	r6, r7
 8010d12:	d900      	bls.n	8010d16 <__ssputs_r+0x86>
 8010d14:	463e      	mov	r6, r7
 8010d16:	4632      	mov	r2, r6
 8010d18:	6820      	ldr	r0, [r4, #0]
 8010d1a:	4641      	mov	r1, r8
 8010d1c:	f000 fae8 	bl	80112f0 <memmove>
 8010d20:	68a3      	ldr	r3, [r4, #8]
 8010d22:	6822      	ldr	r2, [r4, #0]
 8010d24:	1b9b      	subs	r3, r3, r6
 8010d26:	4432      	add	r2, r6
 8010d28:	60a3      	str	r3, [r4, #8]
 8010d2a:	6022      	str	r2, [r4, #0]
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	e7db      	b.n	8010ce8 <__ssputs_r+0x58>
 8010d30:	462a      	mov	r2, r5
 8010d32:	f000 faf7 	bl	8011324 <_realloc_r>
 8010d36:	4606      	mov	r6, r0
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d1e1      	bne.n	8010d00 <__ssputs_r+0x70>
 8010d3c:	6921      	ldr	r1, [r4, #16]
 8010d3e:	4650      	mov	r0, sl
 8010d40:	f7fb ff10 	bl	800cb64 <_free_r>
 8010d44:	e7c7      	b.n	8010cd6 <__ssputs_r+0x46>
	...

08010d48 <_svfiprintf_r>:
 8010d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d4c:	4698      	mov	r8, r3
 8010d4e:	898b      	ldrh	r3, [r1, #12]
 8010d50:	061b      	lsls	r3, r3, #24
 8010d52:	b09d      	sub	sp, #116	; 0x74
 8010d54:	4607      	mov	r7, r0
 8010d56:	460d      	mov	r5, r1
 8010d58:	4614      	mov	r4, r2
 8010d5a:	d50e      	bpl.n	8010d7a <_svfiprintf_r+0x32>
 8010d5c:	690b      	ldr	r3, [r1, #16]
 8010d5e:	b963      	cbnz	r3, 8010d7a <_svfiprintf_r+0x32>
 8010d60:	2140      	movs	r1, #64	; 0x40
 8010d62:	f7fb ff4f 	bl	800cc04 <_malloc_r>
 8010d66:	6028      	str	r0, [r5, #0]
 8010d68:	6128      	str	r0, [r5, #16]
 8010d6a:	b920      	cbnz	r0, 8010d76 <_svfiprintf_r+0x2e>
 8010d6c:	230c      	movs	r3, #12
 8010d6e:	603b      	str	r3, [r7, #0]
 8010d70:	f04f 30ff 	mov.w	r0, #4294967295
 8010d74:	e0d1      	b.n	8010f1a <_svfiprintf_r+0x1d2>
 8010d76:	2340      	movs	r3, #64	; 0x40
 8010d78:	616b      	str	r3, [r5, #20]
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8010d7e:	2320      	movs	r3, #32
 8010d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d88:	2330      	movs	r3, #48	; 0x30
 8010d8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010f34 <_svfiprintf_r+0x1ec>
 8010d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d92:	f04f 0901 	mov.w	r9, #1
 8010d96:	4623      	mov	r3, r4
 8010d98:	469a      	mov	sl, r3
 8010d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d9e:	b10a      	cbz	r2, 8010da4 <_svfiprintf_r+0x5c>
 8010da0:	2a25      	cmp	r2, #37	; 0x25
 8010da2:	d1f9      	bne.n	8010d98 <_svfiprintf_r+0x50>
 8010da4:	ebba 0b04 	subs.w	fp, sl, r4
 8010da8:	d00b      	beq.n	8010dc2 <_svfiprintf_r+0x7a>
 8010daa:	465b      	mov	r3, fp
 8010dac:	4622      	mov	r2, r4
 8010dae:	4629      	mov	r1, r5
 8010db0:	4638      	mov	r0, r7
 8010db2:	f7ff ff6d 	bl	8010c90 <__ssputs_r>
 8010db6:	3001      	adds	r0, #1
 8010db8:	f000 80aa 	beq.w	8010f10 <_svfiprintf_r+0x1c8>
 8010dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010dbe:	445a      	add	r2, fp
 8010dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8010dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	f000 80a2 	beq.w	8010f10 <_svfiprintf_r+0x1c8>
 8010dcc:	2300      	movs	r3, #0
 8010dce:	f04f 32ff 	mov.w	r2, #4294967295
 8010dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dd6:	f10a 0a01 	add.w	sl, sl, #1
 8010dda:	9304      	str	r3, [sp, #16]
 8010ddc:	9307      	str	r3, [sp, #28]
 8010dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010de2:	931a      	str	r3, [sp, #104]	; 0x68
 8010de4:	4654      	mov	r4, sl
 8010de6:	2205      	movs	r2, #5
 8010de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dec:	4851      	ldr	r0, [pc, #324]	; (8010f34 <_svfiprintf_r+0x1ec>)
 8010dee:	f7ef fa07 	bl	8000200 <memchr>
 8010df2:	9a04      	ldr	r2, [sp, #16]
 8010df4:	b9d8      	cbnz	r0, 8010e2e <_svfiprintf_r+0xe6>
 8010df6:	06d0      	lsls	r0, r2, #27
 8010df8:	bf44      	itt	mi
 8010dfa:	2320      	movmi	r3, #32
 8010dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e00:	0711      	lsls	r1, r2, #28
 8010e02:	bf44      	itt	mi
 8010e04:	232b      	movmi	r3, #43	; 0x2b
 8010e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8010e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8010e10:	d015      	beq.n	8010e3e <_svfiprintf_r+0xf6>
 8010e12:	9a07      	ldr	r2, [sp, #28]
 8010e14:	4654      	mov	r4, sl
 8010e16:	2000      	movs	r0, #0
 8010e18:	f04f 0c0a 	mov.w	ip, #10
 8010e1c:	4621      	mov	r1, r4
 8010e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e22:	3b30      	subs	r3, #48	; 0x30
 8010e24:	2b09      	cmp	r3, #9
 8010e26:	d94e      	bls.n	8010ec6 <_svfiprintf_r+0x17e>
 8010e28:	b1b0      	cbz	r0, 8010e58 <_svfiprintf_r+0x110>
 8010e2a:	9207      	str	r2, [sp, #28]
 8010e2c:	e014      	b.n	8010e58 <_svfiprintf_r+0x110>
 8010e2e:	eba0 0308 	sub.w	r3, r0, r8
 8010e32:	fa09 f303 	lsl.w	r3, r9, r3
 8010e36:	4313      	orrs	r3, r2
 8010e38:	9304      	str	r3, [sp, #16]
 8010e3a:	46a2      	mov	sl, r4
 8010e3c:	e7d2      	b.n	8010de4 <_svfiprintf_r+0x9c>
 8010e3e:	9b03      	ldr	r3, [sp, #12]
 8010e40:	1d19      	adds	r1, r3, #4
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	9103      	str	r1, [sp, #12]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	bfbb      	ittet	lt
 8010e4a:	425b      	neglt	r3, r3
 8010e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8010e50:	9307      	strge	r3, [sp, #28]
 8010e52:	9307      	strlt	r3, [sp, #28]
 8010e54:	bfb8      	it	lt
 8010e56:	9204      	strlt	r2, [sp, #16]
 8010e58:	7823      	ldrb	r3, [r4, #0]
 8010e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8010e5c:	d10c      	bne.n	8010e78 <_svfiprintf_r+0x130>
 8010e5e:	7863      	ldrb	r3, [r4, #1]
 8010e60:	2b2a      	cmp	r3, #42	; 0x2a
 8010e62:	d135      	bne.n	8010ed0 <_svfiprintf_r+0x188>
 8010e64:	9b03      	ldr	r3, [sp, #12]
 8010e66:	1d1a      	adds	r2, r3, #4
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	9203      	str	r2, [sp, #12]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	bfb8      	it	lt
 8010e70:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e74:	3402      	adds	r4, #2
 8010e76:	9305      	str	r3, [sp, #20]
 8010e78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010f44 <_svfiprintf_r+0x1fc>
 8010e7c:	7821      	ldrb	r1, [r4, #0]
 8010e7e:	2203      	movs	r2, #3
 8010e80:	4650      	mov	r0, sl
 8010e82:	f7ef f9bd 	bl	8000200 <memchr>
 8010e86:	b140      	cbz	r0, 8010e9a <_svfiprintf_r+0x152>
 8010e88:	2340      	movs	r3, #64	; 0x40
 8010e8a:	eba0 000a 	sub.w	r0, r0, sl
 8010e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8010e92:	9b04      	ldr	r3, [sp, #16]
 8010e94:	4303      	orrs	r3, r0
 8010e96:	3401      	adds	r4, #1
 8010e98:	9304      	str	r3, [sp, #16]
 8010e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e9e:	4826      	ldr	r0, [pc, #152]	; (8010f38 <_svfiprintf_r+0x1f0>)
 8010ea0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ea4:	2206      	movs	r2, #6
 8010ea6:	f7ef f9ab 	bl	8000200 <memchr>
 8010eaa:	2800      	cmp	r0, #0
 8010eac:	d038      	beq.n	8010f20 <_svfiprintf_r+0x1d8>
 8010eae:	4b23      	ldr	r3, [pc, #140]	; (8010f3c <_svfiprintf_r+0x1f4>)
 8010eb0:	bb1b      	cbnz	r3, 8010efa <_svfiprintf_r+0x1b2>
 8010eb2:	9b03      	ldr	r3, [sp, #12]
 8010eb4:	3307      	adds	r3, #7
 8010eb6:	f023 0307 	bic.w	r3, r3, #7
 8010eba:	3308      	adds	r3, #8
 8010ebc:	9303      	str	r3, [sp, #12]
 8010ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ec0:	4433      	add	r3, r6
 8010ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ec4:	e767      	b.n	8010d96 <_svfiprintf_r+0x4e>
 8010ec6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010eca:	460c      	mov	r4, r1
 8010ecc:	2001      	movs	r0, #1
 8010ece:	e7a5      	b.n	8010e1c <_svfiprintf_r+0xd4>
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	3401      	adds	r4, #1
 8010ed4:	9305      	str	r3, [sp, #20]
 8010ed6:	4619      	mov	r1, r3
 8010ed8:	f04f 0c0a 	mov.w	ip, #10
 8010edc:	4620      	mov	r0, r4
 8010ede:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ee2:	3a30      	subs	r2, #48	; 0x30
 8010ee4:	2a09      	cmp	r2, #9
 8010ee6:	d903      	bls.n	8010ef0 <_svfiprintf_r+0x1a8>
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d0c5      	beq.n	8010e78 <_svfiprintf_r+0x130>
 8010eec:	9105      	str	r1, [sp, #20]
 8010eee:	e7c3      	b.n	8010e78 <_svfiprintf_r+0x130>
 8010ef0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	e7f0      	b.n	8010edc <_svfiprintf_r+0x194>
 8010efa:	ab03      	add	r3, sp, #12
 8010efc:	9300      	str	r3, [sp, #0]
 8010efe:	462a      	mov	r2, r5
 8010f00:	4b0f      	ldr	r3, [pc, #60]	; (8010f40 <_svfiprintf_r+0x1f8>)
 8010f02:	a904      	add	r1, sp, #16
 8010f04:	4638      	mov	r0, r7
 8010f06:	f7fb ff77 	bl	800cdf8 <_printf_float>
 8010f0a:	1c42      	adds	r2, r0, #1
 8010f0c:	4606      	mov	r6, r0
 8010f0e:	d1d6      	bne.n	8010ebe <_svfiprintf_r+0x176>
 8010f10:	89ab      	ldrh	r3, [r5, #12]
 8010f12:	065b      	lsls	r3, r3, #25
 8010f14:	f53f af2c 	bmi.w	8010d70 <_svfiprintf_r+0x28>
 8010f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f1a:	b01d      	add	sp, #116	; 0x74
 8010f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f20:	ab03      	add	r3, sp, #12
 8010f22:	9300      	str	r3, [sp, #0]
 8010f24:	462a      	mov	r2, r5
 8010f26:	4b06      	ldr	r3, [pc, #24]	; (8010f40 <_svfiprintf_r+0x1f8>)
 8010f28:	a904      	add	r1, sp, #16
 8010f2a:	4638      	mov	r0, r7
 8010f2c:	f7fc fa08 	bl	800d340 <_printf_i>
 8010f30:	e7eb      	b.n	8010f0a <_svfiprintf_r+0x1c2>
 8010f32:	bf00      	nop
 8010f34:	08012aac 	.word	0x08012aac
 8010f38:	08012ab6 	.word	0x08012ab6
 8010f3c:	0800cdf9 	.word	0x0800cdf9
 8010f40:	08010c91 	.word	0x08010c91
 8010f44:	08012ab2 	.word	0x08012ab2

08010f48 <__sfputc_r>:
 8010f48:	6893      	ldr	r3, [r2, #8]
 8010f4a:	3b01      	subs	r3, #1
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	b410      	push	{r4}
 8010f50:	6093      	str	r3, [r2, #8]
 8010f52:	da08      	bge.n	8010f66 <__sfputc_r+0x1e>
 8010f54:	6994      	ldr	r4, [r2, #24]
 8010f56:	42a3      	cmp	r3, r4
 8010f58:	db01      	blt.n	8010f5e <__sfputc_r+0x16>
 8010f5a:	290a      	cmp	r1, #10
 8010f5c:	d103      	bne.n	8010f66 <__sfputc_r+0x1e>
 8010f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f62:	f7fd bcaf 	b.w	800e8c4 <__swbuf_r>
 8010f66:	6813      	ldr	r3, [r2, #0]
 8010f68:	1c58      	adds	r0, r3, #1
 8010f6a:	6010      	str	r0, [r2, #0]
 8010f6c:	7019      	strb	r1, [r3, #0]
 8010f6e:	4608      	mov	r0, r1
 8010f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f74:	4770      	bx	lr

08010f76 <__sfputs_r>:
 8010f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f78:	4606      	mov	r6, r0
 8010f7a:	460f      	mov	r7, r1
 8010f7c:	4614      	mov	r4, r2
 8010f7e:	18d5      	adds	r5, r2, r3
 8010f80:	42ac      	cmp	r4, r5
 8010f82:	d101      	bne.n	8010f88 <__sfputs_r+0x12>
 8010f84:	2000      	movs	r0, #0
 8010f86:	e007      	b.n	8010f98 <__sfputs_r+0x22>
 8010f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f8c:	463a      	mov	r2, r7
 8010f8e:	4630      	mov	r0, r6
 8010f90:	f7ff ffda 	bl	8010f48 <__sfputc_r>
 8010f94:	1c43      	adds	r3, r0, #1
 8010f96:	d1f3      	bne.n	8010f80 <__sfputs_r+0xa>
 8010f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f9c <_vfiprintf_r>:
 8010f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fa0:	460d      	mov	r5, r1
 8010fa2:	b09d      	sub	sp, #116	; 0x74
 8010fa4:	4614      	mov	r4, r2
 8010fa6:	4698      	mov	r8, r3
 8010fa8:	4606      	mov	r6, r0
 8010faa:	b118      	cbz	r0, 8010fb4 <_vfiprintf_r+0x18>
 8010fac:	6983      	ldr	r3, [r0, #24]
 8010fae:	b90b      	cbnz	r3, 8010fb4 <_vfiprintf_r+0x18>
 8010fb0:	f7fe fcfc 	bl	800f9ac <__sinit>
 8010fb4:	4b89      	ldr	r3, [pc, #548]	; (80111dc <_vfiprintf_r+0x240>)
 8010fb6:	429d      	cmp	r5, r3
 8010fb8:	d11b      	bne.n	8010ff2 <_vfiprintf_r+0x56>
 8010fba:	6875      	ldr	r5, [r6, #4]
 8010fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fbe:	07d9      	lsls	r1, r3, #31
 8010fc0:	d405      	bmi.n	8010fce <_vfiprintf_r+0x32>
 8010fc2:	89ab      	ldrh	r3, [r5, #12]
 8010fc4:	059a      	lsls	r2, r3, #22
 8010fc6:	d402      	bmi.n	8010fce <_vfiprintf_r+0x32>
 8010fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fca:	f7ff f900 	bl	80101ce <__retarget_lock_acquire_recursive>
 8010fce:	89ab      	ldrh	r3, [r5, #12]
 8010fd0:	071b      	lsls	r3, r3, #28
 8010fd2:	d501      	bpl.n	8010fd8 <_vfiprintf_r+0x3c>
 8010fd4:	692b      	ldr	r3, [r5, #16]
 8010fd6:	b9eb      	cbnz	r3, 8011014 <_vfiprintf_r+0x78>
 8010fd8:	4629      	mov	r1, r5
 8010fda:	4630      	mov	r0, r6
 8010fdc:	f7fd fcd6 	bl	800e98c <__swsetup_r>
 8010fe0:	b1c0      	cbz	r0, 8011014 <_vfiprintf_r+0x78>
 8010fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fe4:	07dc      	lsls	r4, r3, #31
 8010fe6:	d50e      	bpl.n	8011006 <_vfiprintf_r+0x6a>
 8010fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8010fec:	b01d      	add	sp, #116	; 0x74
 8010fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff2:	4b7b      	ldr	r3, [pc, #492]	; (80111e0 <_vfiprintf_r+0x244>)
 8010ff4:	429d      	cmp	r5, r3
 8010ff6:	d101      	bne.n	8010ffc <_vfiprintf_r+0x60>
 8010ff8:	68b5      	ldr	r5, [r6, #8]
 8010ffa:	e7df      	b.n	8010fbc <_vfiprintf_r+0x20>
 8010ffc:	4b79      	ldr	r3, [pc, #484]	; (80111e4 <_vfiprintf_r+0x248>)
 8010ffe:	429d      	cmp	r5, r3
 8011000:	bf08      	it	eq
 8011002:	68f5      	ldreq	r5, [r6, #12]
 8011004:	e7da      	b.n	8010fbc <_vfiprintf_r+0x20>
 8011006:	89ab      	ldrh	r3, [r5, #12]
 8011008:	0598      	lsls	r0, r3, #22
 801100a:	d4ed      	bmi.n	8010fe8 <_vfiprintf_r+0x4c>
 801100c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801100e:	f7ff f8df 	bl	80101d0 <__retarget_lock_release_recursive>
 8011012:	e7e9      	b.n	8010fe8 <_vfiprintf_r+0x4c>
 8011014:	2300      	movs	r3, #0
 8011016:	9309      	str	r3, [sp, #36]	; 0x24
 8011018:	2320      	movs	r3, #32
 801101a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801101e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011022:	2330      	movs	r3, #48	; 0x30
 8011024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80111e8 <_vfiprintf_r+0x24c>
 8011028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801102c:	f04f 0901 	mov.w	r9, #1
 8011030:	4623      	mov	r3, r4
 8011032:	469a      	mov	sl, r3
 8011034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011038:	b10a      	cbz	r2, 801103e <_vfiprintf_r+0xa2>
 801103a:	2a25      	cmp	r2, #37	; 0x25
 801103c:	d1f9      	bne.n	8011032 <_vfiprintf_r+0x96>
 801103e:	ebba 0b04 	subs.w	fp, sl, r4
 8011042:	d00b      	beq.n	801105c <_vfiprintf_r+0xc0>
 8011044:	465b      	mov	r3, fp
 8011046:	4622      	mov	r2, r4
 8011048:	4629      	mov	r1, r5
 801104a:	4630      	mov	r0, r6
 801104c:	f7ff ff93 	bl	8010f76 <__sfputs_r>
 8011050:	3001      	adds	r0, #1
 8011052:	f000 80aa 	beq.w	80111aa <_vfiprintf_r+0x20e>
 8011056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011058:	445a      	add	r2, fp
 801105a:	9209      	str	r2, [sp, #36]	; 0x24
 801105c:	f89a 3000 	ldrb.w	r3, [sl]
 8011060:	2b00      	cmp	r3, #0
 8011062:	f000 80a2 	beq.w	80111aa <_vfiprintf_r+0x20e>
 8011066:	2300      	movs	r3, #0
 8011068:	f04f 32ff 	mov.w	r2, #4294967295
 801106c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011070:	f10a 0a01 	add.w	sl, sl, #1
 8011074:	9304      	str	r3, [sp, #16]
 8011076:	9307      	str	r3, [sp, #28]
 8011078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801107c:	931a      	str	r3, [sp, #104]	; 0x68
 801107e:	4654      	mov	r4, sl
 8011080:	2205      	movs	r2, #5
 8011082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011086:	4858      	ldr	r0, [pc, #352]	; (80111e8 <_vfiprintf_r+0x24c>)
 8011088:	f7ef f8ba 	bl	8000200 <memchr>
 801108c:	9a04      	ldr	r2, [sp, #16]
 801108e:	b9d8      	cbnz	r0, 80110c8 <_vfiprintf_r+0x12c>
 8011090:	06d1      	lsls	r1, r2, #27
 8011092:	bf44      	itt	mi
 8011094:	2320      	movmi	r3, #32
 8011096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801109a:	0713      	lsls	r3, r2, #28
 801109c:	bf44      	itt	mi
 801109e:	232b      	movmi	r3, #43	; 0x2b
 80110a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80110a4:	f89a 3000 	ldrb.w	r3, [sl]
 80110a8:	2b2a      	cmp	r3, #42	; 0x2a
 80110aa:	d015      	beq.n	80110d8 <_vfiprintf_r+0x13c>
 80110ac:	9a07      	ldr	r2, [sp, #28]
 80110ae:	4654      	mov	r4, sl
 80110b0:	2000      	movs	r0, #0
 80110b2:	f04f 0c0a 	mov.w	ip, #10
 80110b6:	4621      	mov	r1, r4
 80110b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110bc:	3b30      	subs	r3, #48	; 0x30
 80110be:	2b09      	cmp	r3, #9
 80110c0:	d94e      	bls.n	8011160 <_vfiprintf_r+0x1c4>
 80110c2:	b1b0      	cbz	r0, 80110f2 <_vfiprintf_r+0x156>
 80110c4:	9207      	str	r2, [sp, #28]
 80110c6:	e014      	b.n	80110f2 <_vfiprintf_r+0x156>
 80110c8:	eba0 0308 	sub.w	r3, r0, r8
 80110cc:	fa09 f303 	lsl.w	r3, r9, r3
 80110d0:	4313      	orrs	r3, r2
 80110d2:	9304      	str	r3, [sp, #16]
 80110d4:	46a2      	mov	sl, r4
 80110d6:	e7d2      	b.n	801107e <_vfiprintf_r+0xe2>
 80110d8:	9b03      	ldr	r3, [sp, #12]
 80110da:	1d19      	adds	r1, r3, #4
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	9103      	str	r1, [sp, #12]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	bfbb      	ittet	lt
 80110e4:	425b      	neglt	r3, r3
 80110e6:	f042 0202 	orrlt.w	r2, r2, #2
 80110ea:	9307      	strge	r3, [sp, #28]
 80110ec:	9307      	strlt	r3, [sp, #28]
 80110ee:	bfb8      	it	lt
 80110f0:	9204      	strlt	r2, [sp, #16]
 80110f2:	7823      	ldrb	r3, [r4, #0]
 80110f4:	2b2e      	cmp	r3, #46	; 0x2e
 80110f6:	d10c      	bne.n	8011112 <_vfiprintf_r+0x176>
 80110f8:	7863      	ldrb	r3, [r4, #1]
 80110fa:	2b2a      	cmp	r3, #42	; 0x2a
 80110fc:	d135      	bne.n	801116a <_vfiprintf_r+0x1ce>
 80110fe:	9b03      	ldr	r3, [sp, #12]
 8011100:	1d1a      	adds	r2, r3, #4
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	9203      	str	r2, [sp, #12]
 8011106:	2b00      	cmp	r3, #0
 8011108:	bfb8      	it	lt
 801110a:	f04f 33ff 	movlt.w	r3, #4294967295
 801110e:	3402      	adds	r4, #2
 8011110:	9305      	str	r3, [sp, #20]
 8011112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80111f8 <_vfiprintf_r+0x25c>
 8011116:	7821      	ldrb	r1, [r4, #0]
 8011118:	2203      	movs	r2, #3
 801111a:	4650      	mov	r0, sl
 801111c:	f7ef f870 	bl	8000200 <memchr>
 8011120:	b140      	cbz	r0, 8011134 <_vfiprintf_r+0x198>
 8011122:	2340      	movs	r3, #64	; 0x40
 8011124:	eba0 000a 	sub.w	r0, r0, sl
 8011128:	fa03 f000 	lsl.w	r0, r3, r0
 801112c:	9b04      	ldr	r3, [sp, #16]
 801112e:	4303      	orrs	r3, r0
 8011130:	3401      	adds	r4, #1
 8011132:	9304      	str	r3, [sp, #16]
 8011134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011138:	482c      	ldr	r0, [pc, #176]	; (80111ec <_vfiprintf_r+0x250>)
 801113a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801113e:	2206      	movs	r2, #6
 8011140:	f7ef f85e 	bl	8000200 <memchr>
 8011144:	2800      	cmp	r0, #0
 8011146:	d03f      	beq.n	80111c8 <_vfiprintf_r+0x22c>
 8011148:	4b29      	ldr	r3, [pc, #164]	; (80111f0 <_vfiprintf_r+0x254>)
 801114a:	bb1b      	cbnz	r3, 8011194 <_vfiprintf_r+0x1f8>
 801114c:	9b03      	ldr	r3, [sp, #12]
 801114e:	3307      	adds	r3, #7
 8011150:	f023 0307 	bic.w	r3, r3, #7
 8011154:	3308      	adds	r3, #8
 8011156:	9303      	str	r3, [sp, #12]
 8011158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801115a:	443b      	add	r3, r7
 801115c:	9309      	str	r3, [sp, #36]	; 0x24
 801115e:	e767      	b.n	8011030 <_vfiprintf_r+0x94>
 8011160:	fb0c 3202 	mla	r2, ip, r2, r3
 8011164:	460c      	mov	r4, r1
 8011166:	2001      	movs	r0, #1
 8011168:	e7a5      	b.n	80110b6 <_vfiprintf_r+0x11a>
 801116a:	2300      	movs	r3, #0
 801116c:	3401      	adds	r4, #1
 801116e:	9305      	str	r3, [sp, #20]
 8011170:	4619      	mov	r1, r3
 8011172:	f04f 0c0a 	mov.w	ip, #10
 8011176:	4620      	mov	r0, r4
 8011178:	f810 2b01 	ldrb.w	r2, [r0], #1
 801117c:	3a30      	subs	r2, #48	; 0x30
 801117e:	2a09      	cmp	r2, #9
 8011180:	d903      	bls.n	801118a <_vfiprintf_r+0x1ee>
 8011182:	2b00      	cmp	r3, #0
 8011184:	d0c5      	beq.n	8011112 <_vfiprintf_r+0x176>
 8011186:	9105      	str	r1, [sp, #20]
 8011188:	e7c3      	b.n	8011112 <_vfiprintf_r+0x176>
 801118a:	fb0c 2101 	mla	r1, ip, r1, r2
 801118e:	4604      	mov	r4, r0
 8011190:	2301      	movs	r3, #1
 8011192:	e7f0      	b.n	8011176 <_vfiprintf_r+0x1da>
 8011194:	ab03      	add	r3, sp, #12
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	462a      	mov	r2, r5
 801119a:	4b16      	ldr	r3, [pc, #88]	; (80111f4 <_vfiprintf_r+0x258>)
 801119c:	a904      	add	r1, sp, #16
 801119e:	4630      	mov	r0, r6
 80111a0:	f7fb fe2a 	bl	800cdf8 <_printf_float>
 80111a4:	4607      	mov	r7, r0
 80111a6:	1c78      	adds	r0, r7, #1
 80111a8:	d1d6      	bne.n	8011158 <_vfiprintf_r+0x1bc>
 80111aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111ac:	07d9      	lsls	r1, r3, #31
 80111ae:	d405      	bmi.n	80111bc <_vfiprintf_r+0x220>
 80111b0:	89ab      	ldrh	r3, [r5, #12]
 80111b2:	059a      	lsls	r2, r3, #22
 80111b4:	d402      	bmi.n	80111bc <_vfiprintf_r+0x220>
 80111b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111b8:	f7ff f80a 	bl	80101d0 <__retarget_lock_release_recursive>
 80111bc:	89ab      	ldrh	r3, [r5, #12]
 80111be:	065b      	lsls	r3, r3, #25
 80111c0:	f53f af12 	bmi.w	8010fe8 <_vfiprintf_r+0x4c>
 80111c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111c6:	e711      	b.n	8010fec <_vfiprintf_r+0x50>
 80111c8:	ab03      	add	r3, sp, #12
 80111ca:	9300      	str	r3, [sp, #0]
 80111cc:	462a      	mov	r2, r5
 80111ce:	4b09      	ldr	r3, [pc, #36]	; (80111f4 <_vfiprintf_r+0x258>)
 80111d0:	a904      	add	r1, sp, #16
 80111d2:	4630      	mov	r0, r6
 80111d4:	f7fc f8b4 	bl	800d340 <_printf_i>
 80111d8:	e7e4      	b.n	80111a4 <_vfiprintf_r+0x208>
 80111da:	bf00      	nop
 80111dc:	0801288c 	.word	0x0801288c
 80111e0:	080128ac 	.word	0x080128ac
 80111e4:	0801286c 	.word	0x0801286c
 80111e8:	08012aac 	.word	0x08012aac
 80111ec:	08012ab6 	.word	0x08012ab6
 80111f0:	0800cdf9 	.word	0x0800cdf9
 80111f4:	08010f77 	.word	0x08010f77
 80111f8:	08012ab2 	.word	0x08012ab2

080111fc <_read_r>:
 80111fc:	b538      	push	{r3, r4, r5, lr}
 80111fe:	4d07      	ldr	r5, [pc, #28]	; (801121c <_read_r+0x20>)
 8011200:	4604      	mov	r4, r0
 8011202:	4608      	mov	r0, r1
 8011204:	4611      	mov	r1, r2
 8011206:	2200      	movs	r2, #0
 8011208:	602a      	str	r2, [r5, #0]
 801120a:	461a      	mov	r2, r3
 801120c:	f7f2 fc8a 	bl	8003b24 <_read>
 8011210:	1c43      	adds	r3, r0, #1
 8011212:	d102      	bne.n	801121a <_read_r+0x1e>
 8011214:	682b      	ldr	r3, [r5, #0]
 8011216:	b103      	cbz	r3, 801121a <_read_r+0x1e>
 8011218:	6023      	str	r3, [r4, #0]
 801121a:	bd38      	pop	{r3, r4, r5, pc}
 801121c:	2000174c 	.word	0x2000174c

08011220 <nan>:
 8011220:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011228 <nan+0x8>
 8011224:	4770      	bx	lr
 8011226:	bf00      	nop
 8011228:	00000000 	.word	0x00000000
 801122c:	7ff80000 	.word	0x7ff80000

08011230 <__ascii_wctomb>:
 8011230:	b149      	cbz	r1, 8011246 <__ascii_wctomb+0x16>
 8011232:	2aff      	cmp	r2, #255	; 0xff
 8011234:	bf85      	ittet	hi
 8011236:	238a      	movhi	r3, #138	; 0x8a
 8011238:	6003      	strhi	r3, [r0, #0]
 801123a:	700a      	strbls	r2, [r1, #0]
 801123c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011240:	bf98      	it	ls
 8011242:	2001      	movls	r0, #1
 8011244:	4770      	bx	lr
 8011246:	4608      	mov	r0, r1
 8011248:	4770      	bx	lr
	...

0801124c <__assert_func>:
 801124c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801124e:	4614      	mov	r4, r2
 8011250:	461a      	mov	r2, r3
 8011252:	4b09      	ldr	r3, [pc, #36]	; (8011278 <__assert_func+0x2c>)
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4605      	mov	r5, r0
 8011258:	68d8      	ldr	r0, [r3, #12]
 801125a:	b14c      	cbz	r4, 8011270 <__assert_func+0x24>
 801125c:	4b07      	ldr	r3, [pc, #28]	; (801127c <__assert_func+0x30>)
 801125e:	9100      	str	r1, [sp, #0]
 8011260:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011264:	4906      	ldr	r1, [pc, #24]	; (8011280 <__assert_func+0x34>)
 8011266:	462b      	mov	r3, r5
 8011268:	f000 f80e 	bl	8011288 <fiprintf>
 801126c:	f000 f880 	bl	8011370 <abort>
 8011270:	4b04      	ldr	r3, [pc, #16]	; (8011284 <__assert_func+0x38>)
 8011272:	461c      	mov	r4, r3
 8011274:	e7f3      	b.n	801125e <__assert_func+0x12>
 8011276:	bf00      	nop
 8011278:	20000024 	.word	0x20000024
 801127c:	08012abd 	.word	0x08012abd
 8011280:	08012aca 	.word	0x08012aca
 8011284:	08012af8 	.word	0x08012af8

08011288 <fiprintf>:
 8011288:	b40e      	push	{r1, r2, r3}
 801128a:	b503      	push	{r0, r1, lr}
 801128c:	4601      	mov	r1, r0
 801128e:	ab03      	add	r3, sp, #12
 8011290:	4805      	ldr	r0, [pc, #20]	; (80112a8 <fiprintf+0x20>)
 8011292:	f853 2b04 	ldr.w	r2, [r3], #4
 8011296:	6800      	ldr	r0, [r0, #0]
 8011298:	9301      	str	r3, [sp, #4]
 801129a:	f7ff fe7f 	bl	8010f9c <_vfiprintf_r>
 801129e:	b002      	add	sp, #8
 80112a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80112a4:	b003      	add	sp, #12
 80112a6:	4770      	bx	lr
 80112a8:	20000024 	.word	0x20000024

080112ac <_fstat_r>:
 80112ac:	b538      	push	{r3, r4, r5, lr}
 80112ae:	4d07      	ldr	r5, [pc, #28]	; (80112cc <_fstat_r+0x20>)
 80112b0:	2300      	movs	r3, #0
 80112b2:	4604      	mov	r4, r0
 80112b4:	4608      	mov	r0, r1
 80112b6:	4611      	mov	r1, r2
 80112b8:	602b      	str	r3, [r5, #0]
 80112ba:	f7f2 fc78 	bl	8003bae <_fstat>
 80112be:	1c43      	adds	r3, r0, #1
 80112c0:	d102      	bne.n	80112c8 <_fstat_r+0x1c>
 80112c2:	682b      	ldr	r3, [r5, #0]
 80112c4:	b103      	cbz	r3, 80112c8 <_fstat_r+0x1c>
 80112c6:	6023      	str	r3, [r4, #0]
 80112c8:	bd38      	pop	{r3, r4, r5, pc}
 80112ca:	bf00      	nop
 80112cc:	2000174c 	.word	0x2000174c

080112d0 <_isatty_r>:
 80112d0:	b538      	push	{r3, r4, r5, lr}
 80112d2:	4d06      	ldr	r5, [pc, #24]	; (80112ec <_isatty_r+0x1c>)
 80112d4:	2300      	movs	r3, #0
 80112d6:	4604      	mov	r4, r0
 80112d8:	4608      	mov	r0, r1
 80112da:	602b      	str	r3, [r5, #0]
 80112dc:	f7f2 fc77 	bl	8003bce <_isatty>
 80112e0:	1c43      	adds	r3, r0, #1
 80112e2:	d102      	bne.n	80112ea <_isatty_r+0x1a>
 80112e4:	682b      	ldr	r3, [r5, #0]
 80112e6:	b103      	cbz	r3, 80112ea <_isatty_r+0x1a>
 80112e8:	6023      	str	r3, [r4, #0]
 80112ea:	bd38      	pop	{r3, r4, r5, pc}
 80112ec:	2000174c 	.word	0x2000174c

080112f0 <memmove>:
 80112f0:	4288      	cmp	r0, r1
 80112f2:	b510      	push	{r4, lr}
 80112f4:	eb01 0402 	add.w	r4, r1, r2
 80112f8:	d902      	bls.n	8011300 <memmove+0x10>
 80112fa:	4284      	cmp	r4, r0
 80112fc:	4623      	mov	r3, r4
 80112fe:	d807      	bhi.n	8011310 <memmove+0x20>
 8011300:	1e43      	subs	r3, r0, #1
 8011302:	42a1      	cmp	r1, r4
 8011304:	d008      	beq.n	8011318 <memmove+0x28>
 8011306:	f811 2b01 	ldrb.w	r2, [r1], #1
 801130a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801130e:	e7f8      	b.n	8011302 <memmove+0x12>
 8011310:	4402      	add	r2, r0
 8011312:	4601      	mov	r1, r0
 8011314:	428a      	cmp	r2, r1
 8011316:	d100      	bne.n	801131a <memmove+0x2a>
 8011318:	bd10      	pop	{r4, pc}
 801131a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801131e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011322:	e7f7      	b.n	8011314 <memmove+0x24>

08011324 <_realloc_r>:
 8011324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011326:	4607      	mov	r7, r0
 8011328:	4614      	mov	r4, r2
 801132a:	460e      	mov	r6, r1
 801132c:	b921      	cbnz	r1, 8011338 <_realloc_r+0x14>
 801132e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011332:	4611      	mov	r1, r2
 8011334:	f7fb bc66 	b.w	800cc04 <_malloc_r>
 8011338:	b922      	cbnz	r2, 8011344 <_realloc_r+0x20>
 801133a:	f7fb fc13 	bl	800cb64 <_free_r>
 801133e:	4625      	mov	r5, r4
 8011340:	4628      	mov	r0, r5
 8011342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011344:	f000 f81b 	bl	801137e <_malloc_usable_size_r>
 8011348:	42a0      	cmp	r0, r4
 801134a:	d20f      	bcs.n	801136c <_realloc_r+0x48>
 801134c:	4621      	mov	r1, r4
 801134e:	4638      	mov	r0, r7
 8011350:	f7fb fc58 	bl	800cc04 <_malloc_r>
 8011354:	4605      	mov	r5, r0
 8011356:	2800      	cmp	r0, #0
 8011358:	d0f2      	beq.n	8011340 <_realloc_r+0x1c>
 801135a:	4631      	mov	r1, r6
 801135c:	4622      	mov	r2, r4
 801135e:	f7fb fbeb 	bl	800cb38 <memcpy>
 8011362:	4631      	mov	r1, r6
 8011364:	4638      	mov	r0, r7
 8011366:	f7fb fbfd 	bl	800cb64 <_free_r>
 801136a:	e7e9      	b.n	8011340 <_realloc_r+0x1c>
 801136c:	4635      	mov	r5, r6
 801136e:	e7e7      	b.n	8011340 <_realloc_r+0x1c>

08011370 <abort>:
 8011370:	b508      	push	{r3, lr}
 8011372:	2006      	movs	r0, #6
 8011374:	f000 f834 	bl	80113e0 <raise>
 8011378:	2001      	movs	r0, #1
 801137a:	f7f2 fbc9 	bl	8003b10 <_exit>

0801137e <_malloc_usable_size_r>:
 801137e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011382:	1f18      	subs	r0, r3, #4
 8011384:	2b00      	cmp	r3, #0
 8011386:	bfbc      	itt	lt
 8011388:	580b      	ldrlt	r3, [r1, r0]
 801138a:	18c0      	addlt	r0, r0, r3
 801138c:	4770      	bx	lr

0801138e <_raise_r>:
 801138e:	291f      	cmp	r1, #31
 8011390:	b538      	push	{r3, r4, r5, lr}
 8011392:	4604      	mov	r4, r0
 8011394:	460d      	mov	r5, r1
 8011396:	d904      	bls.n	80113a2 <_raise_r+0x14>
 8011398:	2316      	movs	r3, #22
 801139a:	6003      	str	r3, [r0, #0]
 801139c:	f04f 30ff 	mov.w	r0, #4294967295
 80113a0:	bd38      	pop	{r3, r4, r5, pc}
 80113a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80113a4:	b112      	cbz	r2, 80113ac <_raise_r+0x1e>
 80113a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80113aa:	b94b      	cbnz	r3, 80113c0 <_raise_r+0x32>
 80113ac:	4620      	mov	r0, r4
 80113ae:	f000 f831 	bl	8011414 <_getpid_r>
 80113b2:	462a      	mov	r2, r5
 80113b4:	4601      	mov	r1, r0
 80113b6:	4620      	mov	r0, r4
 80113b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80113bc:	f000 b818 	b.w	80113f0 <_kill_r>
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d00a      	beq.n	80113da <_raise_r+0x4c>
 80113c4:	1c59      	adds	r1, r3, #1
 80113c6:	d103      	bne.n	80113d0 <_raise_r+0x42>
 80113c8:	2316      	movs	r3, #22
 80113ca:	6003      	str	r3, [r0, #0]
 80113cc:	2001      	movs	r0, #1
 80113ce:	e7e7      	b.n	80113a0 <_raise_r+0x12>
 80113d0:	2400      	movs	r4, #0
 80113d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80113d6:	4628      	mov	r0, r5
 80113d8:	4798      	blx	r3
 80113da:	2000      	movs	r0, #0
 80113dc:	e7e0      	b.n	80113a0 <_raise_r+0x12>
	...

080113e0 <raise>:
 80113e0:	4b02      	ldr	r3, [pc, #8]	; (80113ec <raise+0xc>)
 80113e2:	4601      	mov	r1, r0
 80113e4:	6818      	ldr	r0, [r3, #0]
 80113e6:	f7ff bfd2 	b.w	801138e <_raise_r>
 80113ea:	bf00      	nop
 80113ec:	20000024 	.word	0x20000024

080113f0 <_kill_r>:
 80113f0:	b538      	push	{r3, r4, r5, lr}
 80113f2:	4d07      	ldr	r5, [pc, #28]	; (8011410 <_kill_r+0x20>)
 80113f4:	2300      	movs	r3, #0
 80113f6:	4604      	mov	r4, r0
 80113f8:	4608      	mov	r0, r1
 80113fa:	4611      	mov	r1, r2
 80113fc:	602b      	str	r3, [r5, #0]
 80113fe:	f7f2 fb77 	bl	8003af0 <_kill>
 8011402:	1c43      	adds	r3, r0, #1
 8011404:	d102      	bne.n	801140c <_kill_r+0x1c>
 8011406:	682b      	ldr	r3, [r5, #0]
 8011408:	b103      	cbz	r3, 801140c <_kill_r+0x1c>
 801140a:	6023      	str	r3, [r4, #0]
 801140c:	bd38      	pop	{r3, r4, r5, pc}
 801140e:	bf00      	nop
 8011410:	2000174c 	.word	0x2000174c

08011414 <_getpid_r>:
 8011414:	f7f2 bb64 	b.w	8003ae0 <_getpid>

08011418 <pow>:
 8011418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801141c:	ec59 8b10 	vmov	r8, r9, d0
 8011420:	ec57 6b11 	vmov	r6, r7, d1
 8011424:	f000 f8a8 	bl	8011578 <__ieee754_pow>
 8011428:	4b4e      	ldr	r3, [pc, #312]	; (8011564 <pow+0x14c>)
 801142a:	f993 3000 	ldrsb.w	r3, [r3]
 801142e:	3301      	adds	r3, #1
 8011430:	ec55 4b10 	vmov	r4, r5, d0
 8011434:	d015      	beq.n	8011462 <pow+0x4a>
 8011436:	4632      	mov	r2, r6
 8011438:	463b      	mov	r3, r7
 801143a:	4630      	mov	r0, r6
 801143c:	4639      	mov	r1, r7
 801143e:	f7ef fb85 	bl	8000b4c <__aeabi_dcmpun>
 8011442:	b970      	cbnz	r0, 8011462 <pow+0x4a>
 8011444:	4642      	mov	r2, r8
 8011446:	464b      	mov	r3, r9
 8011448:	4640      	mov	r0, r8
 801144a:	4649      	mov	r1, r9
 801144c:	f7ef fb7e 	bl	8000b4c <__aeabi_dcmpun>
 8011450:	2200      	movs	r2, #0
 8011452:	2300      	movs	r3, #0
 8011454:	b148      	cbz	r0, 801146a <pow+0x52>
 8011456:	4630      	mov	r0, r6
 8011458:	4639      	mov	r1, r7
 801145a:	f7ef fb45 	bl	8000ae8 <__aeabi_dcmpeq>
 801145e:	2800      	cmp	r0, #0
 8011460:	d17d      	bne.n	801155e <pow+0x146>
 8011462:	ec45 4b10 	vmov	d0, r4, r5
 8011466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801146a:	4640      	mov	r0, r8
 801146c:	4649      	mov	r1, r9
 801146e:	f7ef fb3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8011472:	b1e0      	cbz	r0, 80114ae <pow+0x96>
 8011474:	2200      	movs	r2, #0
 8011476:	2300      	movs	r3, #0
 8011478:	4630      	mov	r0, r6
 801147a:	4639      	mov	r1, r7
 801147c:	f7ef fb34 	bl	8000ae8 <__aeabi_dcmpeq>
 8011480:	2800      	cmp	r0, #0
 8011482:	d16c      	bne.n	801155e <pow+0x146>
 8011484:	ec47 6b10 	vmov	d0, r6, r7
 8011488:	f000 fe55 	bl	8012136 <finite>
 801148c:	2800      	cmp	r0, #0
 801148e:	d0e8      	beq.n	8011462 <pow+0x4a>
 8011490:	2200      	movs	r2, #0
 8011492:	2300      	movs	r3, #0
 8011494:	4630      	mov	r0, r6
 8011496:	4639      	mov	r1, r7
 8011498:	f7ef fb30 	bl	8000afc <__aeabi_dcmplt>
 801149c:	2800      	cmp	r0, #0
 801149e:	d0e0      	beq.n	8011462 <pow+0x4a>
 80114a0:	f7fb fb18 	bl	800cad4 <__errno>
 80114a4:	2321      	movs	r3, #33	; 0x21
 80114a6:	6003      	str	r3, [r0, #0]
 80114a8:	2400      	movs	r4, #0
 80114aa:	4d2f      	ldr	r5, [pc, #188]	; (8011568 <pow+0x150>)
 80114ac:	e7d9      	b.n	8011462 <pow+0x4a>
 80114ae:	ec45 4b10 	vmov	d0, r4, r5
 80114b2:	f000 fe40 	bl	8012136 <finite>
 80114b6:	bbb8      	cbnz	r0, 8011528 <pow+0x110>
 80114b8:	ec49 8b10 	vmov	d0, r8, r9
 80114bc:	f000 fe3b 	bl	8012136 <finite>
 80114c0:	b390      	cbz	r0, 8011528 <pow+0x110>
 80114c2:	ec47 6b10 	vmov	d0, r6, r7
 80114c6:	f000 fe36 	bl	8012136 <finite>
 80114ca:	b368      	cbz	r0, 8011528 <pow+0x110>
 80114cc:	4622      	mov	r2, r4
 80114ce:	462b      	mov	r3, r5
 80114d0:	4620      	mov	r0, r4
 80114d2:	4629      	mov	r1, r5
 80114d4:	f7ef fb3a 	bl	8000b4c <__aeabi_dcmpun>
 80114d8:	b160      	cbz	r0, 80114f4 <pow+0xdc>
 80114da:	f7fb fafb 	bl	800cad4 <__errno>
 80114de:	2321      	movs	r3, #33	; 0x21
 80114e0:	6003      	str	r3, [r0, #0]
 80114e2:	2200      	movs	r2, #0
 80114e4:	2300      	movs	r3, #0
 80114e6:	4610      	mov	r0, r2
 80114e8:	4619      	mov	r1, r3
 80114ea:	f7ef f9bf 	bl	800086c <__aeabi_ddiv>
 80114ee:	4604      	mov	r4, r0
 80114f0:	460d      	mov	r5, r1
 80114f2:	e7b6      	b.n	8011462 <pow+0x4a>
 80114f4:	f7fb faee 	bl	800cad4 <__errno>
 80114f8:	2322      	movs	r3, #34	; 0x22
 80114fa:	6003      	str	r3, [r0, #0]
 80114fc:	2200      	movs	r2, #0
 80114fe:	2300      	movs	r3, #0
 8011500:	4640      	mov	r0, r8
 8011502:	4649      	mov	r1, r9
 8011504:	f7ef fafa 	bl	8000afc <__aeabi_dcmplt>
 8011508:	2400      	movs	r4, #0
 801150a:	b158      	cbz	r0, 8011524 <pow+0x10c>
 801150c:	ec47 6b10 	vmov	d0, r6, r7
 8011510:	f000 fe1c 	bl	801214c <rint>
 8011514:	4632      	mov	r2, r6
 8011516:	ec51 0b10 	vmov	r0, r1, d0
 801151a:	463b      	mov	r3, r7
 801151c:	f7ef fae4 	bl	8000ae8 <__aeabi_dcmpeq>
 8011520:	2800      	cmp	r0, #0
 8011522:	d0c2      	beq.n	80114aa <pow+0x92>
 8011524:	4d11      	ldr	r5, [pc, #68]	; (801156c <pow+0x154>)
 8011526:	e79c      	b.n	8011462 <pow+0x4a>
 8011528:	2200      	movs	r2, #0
 801152a:	2300      	movs	r3, #0
 801152c:	4620      	mov	r0, r4
 801152e:	4629      	mov	r1, r5
 8011530:	f7ef fada 	bl	8000ae8 <__aeabi_dcmpeq>
 8011534:	2800      	cmp	r0, #0
 8011536:	d094      	beq.n	8011462 <pow+0x4a>
 8011538:	ec49 8b10 	vmov	d0, r8, r9
 801153c:	f000 fdfb 	bl	8012136 <finite>
 8011540:	2800      	cmp	r0, #0
 8011542:	d08e      	beq.n	8011462 <pow+0x4a>
 8011544:	ec47 6b10 	vmov	d0, r6, r7
 8011548:	f000 fdf5 	bl	8012136 <finite>
 801154c:	2800      	cmp	r0, #0
 801154e:	d088      	beq.n	8011462 <pow+0x4a>
 8011550:	f7fb fac0 	bl	800cad4 <__errno>
 8011554:	2322      	movs	r3, #34	; 0x22
 8011556:	6003      	str	r3, [r0, #0]
 8011558:	2400      	movs	r4, #0
 801155a:	2500      	movs	r5, #0
 801155c:	e781      	b.n	8011462 <pow+0x4a>
 801155e:	4d04      	ldr	r5, [pc, #16]	; (8011570 <pow+0x158>)
 8011560:	2400      	movs	r4, #0
 8011562:	e77e      	b.n	8011462 <pow+0x4a>
 8011564:	200001f8 	.word	0x200001f8
 8011568:	fff00000 	.word	0xfff00000
 801156c:	7ff00000 	.word	0x7ff00000
 8011570:	3ff00000 	.word	0x3ff00000
 8011574:	00000000 	.word	0x00000000

08011578 <__ieee754_pow>:
 8011578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801157c:	ed2d 8b06 	vpush	{d8-d10}
 8011580:	b08d      	sub	sp, #52	; 0x34
 8011582:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011586:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801158a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801158e:	ea56 0100 	orrs.w	r1, r6, r0
 8011592:	ec53 2b10 	vmov	r2, r3, d0
 8011596:	f000 84d1 	beq.w	8011f3c <__ieee754_pow+0x9c4>
 801159a:	497f      	ldr	r1, [pc, #508]	; (8011798 <__ieee754_pow+0x220>)
 801159c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80115a0:	428c      	cmp	r4, r1
 80115a2:	ee10 8a10 	vmov	r8, s0
 80115a6:	4699      	mov	r9, r3
 80115a8:	dc09      	bgt.n	80115be <__ieee754_pow+0x46>
 80115aa:	d103      	bne.n	80115b4 <__ieee754_pow+0x3c>
 80115ac:	b97a      	cbnz	r2, 80115ce <__ieee754_pow+0x56>
 80115ae:	42a6      	cmp	r6, r4
 80115b0:	dd02      	ble.n	80115b8 <__ieee754_pow+0x40>
 80115b2:	e00c      	b.n	80115ce <__ieee754_pow+0x56>
 80115b4:	428e      	cmp	r6, r1
 80115b6:	dc02      	bgt.n	80115be <__ieee754_pow+0x46>
 80115b8:	428e      	cmp	r6, r1
 80115ba:	d110      	bne.n	80115de <__ieee754_pow+0x66>
 80115bc:	b178      	cbz	r0, 80115de <__ieee754_pow+0x66>
 80115be:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80115c2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80115c6:	ea54 0308 	orrs.w	r3, r4, r8
 80115ca:	f000 84b7 	beq.w	8011f3c <__ieee754_pow+0x9c4>
 80115ce:	4873      	ldr	r0, [pc, #460]	; (801179c <__ieee754_pow+0x224>)
 80115d0:	b00d      	add	sp, #52	; 0x34
 80115d2:	ecbd 8b06 	vpop	{d8-d10}
 80115d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115da:	f7ff be21 	b.w	8011220 <nan>
 80115de:	f1b9 0f00 	cmp.w	r9, #0
 80115e2:	da36      	bge.n	8011652 <__ieee754_pow+0xda>
 80115e4:	496e      	ldr	r1, [pc, #440]	; (80117a0 <__ieee754_pow+0x228>)
 80115e6:	428e      	cmp	r6, r1
 80115e8:	dc51      	bgt.n	801168e <__ieee754_pow+0x116>
 80115ea:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80115ee:	428e      	cmp	r6, r1
 80115f0:	f340 84af 	ble.w	8011f52 <__ieee754_pow+0x9da>
 80115f4:	1531      	asrs	r1, r6, #20
 80115f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80115fa:	2914      	cmp	r1, #20
 80115fc:	dd0f      	ble.n	801161e <__ieee754_pow+0xa6>
 80115fe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8011602:	fa20 fc01 	lsr.w	ip, r0, r1
 8011606:	fa0c f101 	lsl.w	r1, ip, r1
 801160a:	4281      	cmp	r1, r0
 801160c:	f040 84a1 	bne.w	8011f52 <__ieee754_pow+0x9da>
 8011610:	f00c 0c01 	and.w	ip, ip, #1
 8011614:	f1cc 0102 	rsb	r1, ip, #2
 8011618:	9100      	str	r1, [sp, #0]
 801161a:	b180      	cbz	r0, 801163e <__ieee754_pow+0xc6>
 801161c:	e059      	b.n	80116d2 <__ieee754_pow+0x15a>
 801161e:	2800      	cmp	r0, #0
 8011620:	d155      	bne.n	80116ce <__ieee754_pow+0x156>
 8011622:	f1c1 0114 	rsb	r1, r1, #20
 8011626:	fa46 fc01 	asr.w	ip, r6, r1
 801162a:	fa0c f101 	lsl.w	r1, ip, r1
 801162e:	42b1      	cmp	r1, r6
 8011630:	f040 848c 	bne.w	8011f4c <__ieee754_pow+0x9d4>
 8011634:	f00c 0c01 	and.w	ip, ip, #1
 8011638:	f1cc 0102 	rsb	r1, ip, #2
 801163c:	9100      	str	r1, [sp, #0]
 801163e:	4959      	ldr	r1, [pc, #356]	; (80117a4 <__ieee754_pow+0x22c>)
 8011640:	428e      	cmp	r6, r1
 8011642:	d12d      	bne.n	80116a0 <__ieee754_pow+0x128>
 8011644:	2f00      	cmp	r7, #0
 8011646:	da79      	bge.n	801173c <__ieee754_pow+0x1c4>
 8011648:	4956      	ldr	r1, [pc, #344]	; (80117a4 <__ieee754_pow+0x22c>)
 801164a:	2000      	movs	r0, #0
 801164c:	f7ef f90e 	bl	800086c <__aeabi_ddiv>
 8011650:	e016      	b.n	8011680 <__ieee754_pow+0x108>
 8011652:	2100      	movs	r1, #0
 8011654:	9100      	str	r1, [sp, #0]
 8011656:	2800      	cmp	r0, #0
 8011658:	d13b      	bne.n	80116d2 <__ieee754_pow+0x15a>
 801165a:	494f      	ldr	r1, [pc, #316]	; (8011798 <__ieee754_pow+0x220>)
 801165c:	428e      	cmp	r6, r1
 801165e:	d1ee      	bne.n	801163e <__ieee754_pow+0xc6>
 8011660:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011664:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011668:	ea53 0308 	orrs.w	r3, r3, r8
 801166c:	f000 8466 	beq.w	8011f3c <__ieee754_pow+0x9c4>
 8011670:	4b4d      	ldr	r3, [pc, #308]	; (80117a8 <__ieee754_pow+0x230>)
 8011672:	429c      	cmp	r4, r3
 8011674:	dd0d      	ble.n	8011692 <__ieee754_pow+0x11a>
 8011676:	2f00      	cmp	r7, #0
 8011678:	f280 8464 	bge.w	8011f44 <__ieee754_pow+0x9cc>
 801167c:	2000      	movs	r0, #0
 801167e:	2100      	movs	r1, #0
 8011680:	ec41 0b10 	vmov	d0, r0, r1
 8011684:	b00d      	add	sp, #52	; 0x34
 8011686:	ecbd 8b06 	vpop	{d8-d10}
 801168a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801168e:	2102      	movs	r1, #2
 8011690:	e7e0      	b.n	8011654 <__ieee754_pow+0xdc>
 8011692:	2f00      	cmp	r7, #0
 8011694:	daf2      	bge.n	801167c <__ieee754_pow+0x104>
 8011696:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801169a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801169e:	e7ef      	b.n	8011680 <__ieee754_pow+0x108>
 80116a0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80116a4:	d104      	bne.n	80116b0 <__ieee754_pow+0x138>
 80116a6:	4610      	mov	r0, r2
 80116a8:	4619      	mov	r1, r3
 80116aa:	f7ee ffb5 	bl	8000618 <__aeabi_dmul>
 80116ae:	e7e7      	b.n	8011680 <__ieee754_pow+0x108>
 80116b0:	493e      	ldr	r1, [pc, #248]	; (80117ac <__ieee754_pow+0x234>)
 80116b2:	428f      	cmp	r7, r1
 80116b4:	d10d      	bne.n	80116d2 <__ieee754_pow+0x15a>
 80116b6:	f1b9 0f00 	cmp.w	r9, #0
 80116ba:	db0a      	blt.n	80116d2 <__ieee754_pow+0x15a>
 80116bc:	ec43 2b10 	vmov	d0, r2, r3
 80116c0:	b00d      	add	sp, #52	; 0x34
 80116c2:	ecbd 8b06 	vpop	{d8-d10}
 80116c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ca:	f000 bc77 	b.w	8011fbc <__ieee754_sqrt>
 80116ce:	2100      	movs	r1, #0
 80116d0:	9100      	str	r1, [sp, #0]
 80116d2:	ec43 2b10 	vmov	d0, r2, r3
 80116d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80116da:	f000 fd23 	bl	8012124 <fabs>
 80116de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116e2:	ec51 0b10 	vmov	r0, r1, d0
 80116e6:	f1b8 0f00 	cmp.w	r8, #0
 80116ea:	d12a      	bne.n	8011742 <__ieee754_pow+0x1ca>
 80116ec:	b12c      	cbz	r4, 80116fa <__ieee754_pow+0x182>
 80116ee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80117a4 <__ieee754_pow+0x22c>
 80116f2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80116f6:	45e6      	cmp	lr, ip
 80116f8:	d123      	bne.n	8011742 <__ieee754_pow+0x1ca>
 80116fa:	2f00      	cmp	r7, #0
 80116fc:	da05      	bge.n	801170a <__ieee754_pow+0x192>
 80116fe:	4602      	mov	r2, r0
 8011700:	460b      	mov	r3, r1
 8011702:	2000      	movs	r0, #0
 8011704:	4927      	ldr	r1, [pc, #156]	; (80117a4 <__ieee754_pow+0x22c>)
 8011706:	f7ef f8b1 	bl	800086c <__aeabi_ddiv>
 801170a:	f1b9 0f00 	cmp.w	r9, #0
 801170e:	dab7      	bge.n	8011680 <__ieee754_pow+0x108>
 8011710:	9b00      	ldr	r3, [sp, #0]
 8011712:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011716:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801171a:	4323      	orrs	r3, r4
 801171c:	d108      	bne.n	8011730 <__ieee754_pow+0x1b8>
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	4610      	mov	r0, r2
 8011724:	4619      	mov	r1, r3
 8011726:	f7ee fdbf 	bl	80002a8 <__aeabi_dsub>
 801172a:	4602      	mov	r2, r0
 801172c:	460b      	mov	r3, r1
 801172e:	e78d      	b.n	801164c <__ieee754_pow+0xd4>
 8011730:	9b00      	ldr	r3, [sp, #0]
 8011732:	2b01      	cmp	r3, #1
 8011734:	d1a4      	bne.n	8011680 <__ieee754_pow+0x108>
 8011736:	4602      	mov	r2, r0
 8011738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801173c:	4610      	mov	r0, r2
 801173e:	4619      	mov	r1, r3
 8011740:	e79e      	b.n	8011680 <__ieee754_pow+0x108>
 8011742:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8011746:	f10c 35ff 	add.w	r5, ip, #4294967295
 801174a:	950a      	str	r5, [sp, #40]	; 0x28
 801174c:	9d00      	ldr	r5, [sp, #0]
 801174e:	46ac      	mov	ip, r5
 8011750:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8011752:	ea5c 0505 	orrs.w	r5, ip, r5
 8011756:	d0e4      	beq.n	8011722 <__ieee754_pow+0x1aa>
 8011758:	4b15      	ldr	r3, [pc, #84]	; (80117b0 <__ieee754_pow+0x238>)
 801175a:	429e      	cmp	r6, r3
 801175c:	f340 80fc 	ble.w	8011958 <__ieee754_pow+0x3e0>
 8011760:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011764:	429e      	cmp	r6, r3
 8011766:	4b10      	ldr	r3, [pc, #64]	; (80117a8 <__ieee754_pow+0x230>)
 8011768:	dd07      	ble.n	801177a <__ieee754_pow+0x202>
 801176a:	429c      	cmp	r4, r3
 801176c:	dc0a      	bgt.n	8011784 <__ieee754_pow+0x20c>
 801176e:	2f00      	cmp	r7, #0
 8011770:	da84      	bge.n	801167c <__ieee754_pow+0x104>
 8011772:	a307      	add	r3, pc, #28	; (adr r3, 8011790 <__ieee754_pow+0x218>)
 8011774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011778:	e795      	b.n	80116a6 <__ieee754_pow+0x12e>
 801177a:	429c      	cmp	r4, r3
 801177c:	dbf7      	blt.n	801176e <__ieee754_pow+0x1f6>
 801177e:	4b09      	ldr	r3, [pc, #36]	; (80117a4 <__ieee754_pow+0x22c>)
 8011780:	429c      	cmp	r4, r3
 8011782:	dd17      	ble.n	80117b4 <__ieee754_pow+0x23c>
 8011784:	2f00      	cmp	r7, #0
 8011786:	dcf4      	bgt.n	8011772 <__ieee754_pow+0x1fa>
 8011788:	e778      	b.n	801167c <__ieee754_pow+0x104>
 801178a:	bf00      	nop
 801178c:	f3af 8000 	nop.w
 8011790:	8800759c 	.word	0x8800759c
 8011794:	7e37e43c 	.word	0x7e37e43c
 8011798:	7ff00000 	.word	0x7ff00000
 801179c:	08012af8 	.word	0x08012af8
 80117a0:	433fffff 	.word	0x433fffff
 80117a4:	3ff00000 	.word	0x3ff00000
 80117a8:	3fefffff 	.word	0x3fefffff
 80117ac:	3fe00000 	.word	0x3fe00000
 80117b0:	41e00000 	.word	0x41e00000
 80117b4:	4b64      	ldr	r3, [pc, #400]	; (8011948 <__ieee754_pow+0x3d0>)
 80117b6:	2200      	movs	r2, #0
 80117b8:	f7ee fd76 	bl	80002a8 <__aeabi_dsub>
 80117bc:	a356      	add	r3, pc, #344	; (adr r3, 8011918 <__ieee754_pow+0x3a0>)
 80117be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c2:	4604      	mov	r4, r0
 80117c4:	460d      	mov	r5, r1
 80117c6:	f7ee ff27 	bl	8000618 <__aeabi_dmul>
 80117ca:	a355      	add	r3, pc, #340	; (adr r3, 8011920 <__ieee754_pow+0x3a8>)
 80117cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d0:	4606      	mov	r6, r0
 80117d2:	460f      	mov	r7, r1
 80117d4:	4620      	mov	r0, r4
 80117d6:	4629      	mov	r1, r5
 80117d8:	f7ee ff1e 	bl	8000618 <__aeabi_dmul>
 80117dc:	4b5b      	ldr	r3, [pc, #364]	; (801194c <__ieee754_pow+0x3d4>)
 80117de:	4682      	mov	sl, r0
 80117e0:	468b      	mov	fp, r1
 80117e2:	2200      	movs	r2, #0
 80117e4:	4620      	mov	r0, r4
 80117e6:	4629      	mov	r1, r5
 80117e8:	f7ee ff16 	bl	8000618 <__aeabi_dmul>
 80117ec:	4602      	mov	r2, r0
 80117ee:	460b      	mov	r3, r1
 80117f0:	a14d      	add	r1, pc, #308	; (adr r1, 8011928 <__ieee754_pow+0x3b0>)
 80117f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80117f6:	f7ee fd57 	bl	80002a8 <__aeabi_dsub>
 80117fa:	4622      	mov	r2, r4
 80117fc:	462b      	mov	r3, r5
 80117fe:	f7ee ff0b 	bl	8000618 <__aeabi_dmul>
 8011802:	4602      	mov	r2, r0
 8011804:	460b      	mov	r3, r1
 8011806:	2000      	movs	r0, #0
 8011808:	4951      	ldr	r1, [pc, #324]	; (8011950 <__ieee754_pow+0x3d8>)
 801180a:	f7ee fd4d 	bl	80002a8 <__aeabi_dsub>
 801180e:	4622      	mov	r2, r4
 8011810:	4680      	mov	r8, r0
 8011812:	4689      	mov	r9, r1
 8011814:	462b      	mov	r3, r5
 8011816:	4620      	mov	r0, r4
 8011818:	4629      	mov	r1, r5
 801181a:	f7ee fefd 	bl	8000618 <__aeabi_dmul>
 801181e:	4602      	mov	r2, r0
 8011820:	460b      	mov	r3, r1
 8011822:	4640      	mov	r0, r8
 8011824:	4649      	mov	r1, r9
 8011826:	f7ee fef7 	bl	8000618 <__aeabi_dmul>
 801182a:	a341      	add	r3, pc, #260	; (adr r3, 8011930 <__ieee754_pow+0x3b8>)
 801182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011830:	f7ee fef2 	bl	8000618 <__aeabi_dmul>
 8011834:	4602      	mov	r2, r0
 8011836:	460b      	mov	r3, r1
 8011838:	4650      	mov	r0, sl
 801183a:	4659      	mov	r1, fp
 801183c:	f7ee fd34 	bl	80002a8 <__aeabi_dsub>
 8011840:	4602      	mov	r2, r0
 8011842:	460b      	mov	r3, r1
 8011844:	4680      	mov	r8, r0
 8011846:	4689      	mov	r9, r1
 8011848:	4630      	mov	r0, r6
 801184a:	4639      	mov	r1, r7
 801184c:	f7ee fd2e 	bl	80002ac <__adddf3>
 8011850:	2400      	movs	r4, #0
 8011852:	4632      	mov	r2, r6
 8011854:	463b      	mov	r3, r7
 8011856:	4620      	mov	r0, r4
 8011858:	460d      	mov	r5, r1
 801185a:	f7ee fd25 	bl	80002a8 <__aeabi_dsub>
 801185e:	4602      	mov	r2, r0
 8011860:	460b      	mov	r3, r1
 8011862:	4640      	mov	r0, r8
 8011864:	4649      	mov	r1, r9
 8011866:	f7ee fd1f 	bl	80002a8 <__aeabi_dsub>
 801186a:	9b00      	ldr	r3, [sp, #0]
 801186c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801186e:	3b01      	subs	r3, #1
 8011870:	4313      	orrs	r3, r2
 8011872:	4682      	mov	sl, r0
 8011874:	468b      	mov	fp, r1
 8011876:	f040 81f1 	bne.w	8011c5c <__ieee754_pow+0x6e4>
 801187a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011938 <__ieee754_pow+0x3c0>
 801187e:	eeb0 8a47 	vmov.f32	s16, s14
 8011882:	eef0 8a67 	vmov.f32	s17, s15
 8011886:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801188a:	2600      	movs	r6, #0
 801188c:	4632      	mov	r2, r6
 801188e:	463b      	mov	r3, r7
 8011890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011894:	f7ee fd08 	bl	80002a8 <__aeabi_dsub>
 8011898:	4622      	mov	r2, r4
 801189a:	462b      	mov	r3, r5
 801189c:	f7ee febc 	bl	8000618 <__aeabi_dmul>
 80118a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118a4:	4680      	mov	r8, r0
 80118a6:	4689      	mov	r9, r1
 80118a8:	4650      	mov	r0, sl
 80118aa:	4659      	mov	r1, fp
 80118ac:	f7ee feb4 	bl	8000618 <__aeabi_dmul>
 80118b0:	4602      	mov	r2, r0
 80118b2:	460b      	mov	r3, r1
 80118b4:	4640      	mov	r0, r8
 80118b6:	4649      	mov	r1, r9
 80118b8:	f7ee fcf8 	bl	80002ac <__adddf3>
 80118bc:	4632      	mov	r2, r6
 80118be:	463b      	mov	r3, r7
 80118c0:	4680      	mov	r8, r0
 80118c2:	4689      	mov	r9, r1
 80118c4:	4620      	mov	r0, r4
 80118c6:	4629      	mov	r1, r5
 80118c8:	f7ee fea6 	bl	8000618 <__aeabi_dmul>
 80118cc:	460b      	mov	r3, r1
 80118ce:	4604      	mov	r4, r0
 80118d0:	460d      	mov	r5, r1
 80118d2:	4602      	mov	r2, r0
 80118d4:	4649      	mov	r1, r9
 80118d6:	4640      	mov	r0, r8
 80118d8:	f7ee fce8 	bl	80002ac <__adddf3>
 80118dc:	4b1d      	ldr	r3, [pc, #116]	; (8011954 <__ieee754_pow+0x3dc>)
 80118de:	4299      	cmp	r1, r3
 80118e0:	ec45 4b19 	vmov	d9, r4, r5
 80118e4:	4606      	mov	r6, r0
 80118e6:	460f      	mov	r7, r1
 80118e8:	468b      	mov	fp, r1
 80118ea:	f340 82fe 	ble.w	8011eea <__ieee754_pow+0x972>
 80118ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80118f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80118f6:	4303      	orrs	r3, r0
 80118f8:	f000 81f0 	beq.w	8011cdc <__ieee754_pow+0x764>
 80118fc:	a310      	add	r3, pc, #64	; (adr r3, 8011940 <__ieee754_pow+0x3c8>)
 80118fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011902:	ec51 0b18 	vmov	r0, r1, d8
 8011906:	f7ee fe87 	bl	8000618 <__aeabi_dmul>
 801190a:	a30d      	add	r3, pc, #52	; (adr r3, 8011940 <__ieee754_pow+0x3c8>)
 801190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011910:	e6cb      	b.n	80116aa <__ieee754_pow+0x132>
 8011912:	bf00      	nop
 8011914:	f3af 8000 	nop.w
 8011918:	60000000 	.word	0x60000000
 801191c:	3ff71547 	.word	0x3ff71547
 8011920:	f85ddf44 	.word	0xf85ddf44
 8011924:	3e54ae0b 	.word	0x3e54ae0b
 8011928:	55555555 	.word	0x55555555
 801192c:	3fd55555 	.word	0x3fd55555
 8011930:	652b82fe 	.word	0x652b82fe
 8011934:	3ff71547 	.word	0x3ff71547
 8011938:	00000000 	.word	0x00000000
 801193c:	bff00000 	.word	0xbff00000
 8011940:	8800759c 	.word	0x8800759c
 8011944:	7e37e43c 	.word	0x7e37e43c
 8011948:	3ff00000 	.word	0x3ff00000
 801194c:	3fd00000 	.word	0x3fd00000
 8011950:	3fe00000 	.word	0x3fe00000
 8011954:	408fffff 	.word	0x408fffff
 8011958:	4bd7      	ldr	r3, [pc, #860]	; (8011cb8 <__ieee754_pow+0x740>)
 801195a:	ea03 0309 	and.w	r3, r3, r9
 801195e:	2200      	movs	r2, #0
 8011960:	b92b      	cbnz	r3, 801196e <__ieee754_pow+0x3f6>
 8011962:	4bd6      	ldr	r3, [pc, #856]	; (8011cbc <__ieee754_pow+0x744>)
 8011964:	f7ee fe58 	bl	8000618 <__aeabi_dmul>
 8011968:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801196c:	460c      	mov	r4, r1
 801196e:	1523      	asrs	r3, r4, #20
 8011970:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011974:	4413      	add	r3, r2
 8011976:	9309      	str	r3, [sp, #36]	; 0x24
 8011978:	4bd1      	ldr	r3, [pc, #836]	; (8011cc0 <__ieee754_pow+0x748>)
 801197a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801197e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011982:	429c      	cmp	r4, r3
 8011984:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011988:	dd08      	ble.n	801199c <__ieee754_pow+0x424>
 801198a:	4bce      	ldr	r3, [pc, #824]	; (8011cc4 <__ieee754_pow+0x74c>)
 801198c:	429c      	cmp	r4, r3
 801198e:	f340 8163 	ble.w	8011c58 <__ieee754_pow+0x6e0>
 8011992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011994:	3301      	adds	r3, #1
 8011996:	9309      	str	r3, [sp, #36]	; 0x24
 8011998:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801199c:	2400      	movs	r4, #0
 801199e:	00e3      	lsls	r3, r4, #3
 80119a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80119a2:	4bc9      	ldr	r3, [pc, #804]	; (8011cc8 <__ieee754_pow+0x750>)
 80119a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80119a8:	ed93 7b00 	vldr	d7, [r3]
 80119ac:	4629      	mov	r1, r5
 80119ae:	ec53 2b17 	vmov	r2, r3, d7
 80119b2:	eeb0 8a47 	vmov.f32	s16, s14
 80119b6:	eef0 8a67 	vmov.f32	s17, s15
 80119ba:	4682      	mov	sl, r0
 80119bc:	f7ee fc74 	bl	80002a8 <__aeabi_dsub>
 80119c0:	4652      	mov	r2, sl
 80119c2:	4606      	mov	r6, r0
 80119c4:	460f      	mov	r7, r1
 80119c6:	462b      	mov	r3, r5
 80119c8:	ec51 0b18 	vmov	r0, r1, d8
 80119cc:	f7ee fc6e 	bl	80002ac <__adddf3>
 80119d0:	4602      	mov	r2, r0
 80119d2:	460b      	mov	r3, r1
 80119d4:	2000      	movs	r0, #0
 80119d6:	49bd      	ldr	r1, [pc, #756]	; (8011ccc <__ieee754_pow+0x754>)
 80119d8:	f7ee ff48 	bl	800086c <__aeabi_ddiv>
 80119dc:	ec41 0b19 	vmov	d9, r0, r1
 80119e0:	4602      	mov	r2, r0
 80119e2:	460b      	mov	r3, r1
 80119e4:	4630      	mov	r0, r6
 80119e6:	4639      	mov	r1, r7
 80119e8:	f7ee fe16 	bl	8000618 <__aeabi_dmul>
 80119ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80119f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80119f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80119f8:	2300      	movs	r3, #0
 80119fa:	9304      	str	r3, [sp, #16]
 80119fc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8011a00:	46ab      	mov	fp, r5
 8011a02:	106d      	asrs	r5, r5, #1
 8011a04:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011a08:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011a0c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011a10:	2200      	movs	r2, #0
 8011a12:	4640      	mov	r0, r8
 8011a14:	4649      	mov	r1, r9
 8011a16:	4614      	mov	r4, r2
 8011a18:	461d      	mov	r5, r3
 8011a1a:	f7ee fdfd 	bl	8000618 <__aeabi_dmul>
 8011a1e:	4602      	mov	r2, r0
 8011a20:	460b      	mov	r3, r1
 8011a22:	4630      	mov	r0, r6
 8011a24:	4639      	mov	r1, r7
 8011a26:	f7ee fc3f 	bl	80002a8 <__aeabi_dsub>
 8011a2a:	ec53 2b18 	vmov	r2, r3, d8
 8011a2e:	4606      	mov	r6, r0
 8011a30:	460f      	mov	r7, r1
 8011a32:	4620      	mov	r0, r4
 8011a34:	4629      	mov	r1, r5
 8011a36:	f7ee fc37 	bl	80002a8 <__aeabi_dsub>
 8011a3a:	4602      	mov	r2, r0
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	4650      	mov	r0, sl
 8011a40:	4659      	mov	r1, fp
 8011a42:	f7ee fc31 	bl	80002a8 <__aeabi_dsub>
 8011a46:	4642      	mov	r2, r8
 8011a48:	464b      	mov	r3, r9
 8011a4a:	f7ee fde5 	bl	8000618 <__aeabi_dmul>
 8011a4e:	4602      	mov	r2, r0
 8011a50:	460b      	mov	r3, r1
 8011a52:	4630      	mov	r0, r6
 8011a54:	4639      	mov	r1, r7
 8011a56:	f7ee fc27 	bl	80002a8 <__aeabi_dsub>
 8011a5a:	ec53 2b19 	vmov	r2, r3, d9
 8011a5e:	f7ee fddb 	bl	8000618 <__aeabi_dmul>
 8011a62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a66:	ec41 0b18 	vmov	d8, r0, r1
 8011a6a:	4610      	mov	r0, r2
 8011a6c:	4619      	mov	r1, r3
 8011a6e:	f7ee fdd3 	bl	8000618 <__aeabi_dmul>
 8011a72:	a37d      	add	r3, pc, #500	; (adr r3, 8011c68 <__ieee754_pow+0x6f0>)
 8011a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a78:	4604      	mov	r4, r0
 8011a7a:	460d      	mov	r5, r1
 8011a7c:	f7ee fdcc 	bl	8000618 <__aeabi_dmul>
 8011a80:	a37b      	add	r3, pc, #492	; (adr r3, 8011c70 <__ieee754_pow+0x6f8>)
 8011a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a86:	f7ee fc11 	bl	80002ac <__adddf3>
 8011a8a:	4622      	mov	r2, r4
 8011a8c:	462b      	mov	r3, r5
 8011a8e:	f7ee fdc3 	bl	8000618 <__aeabi_dmul>
 8011a92:	a379      	add	r3, pc, #484	; (adr r3, 8011c78 <__ieee754_pow+0x700>)
 8011a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a98:	f7ee fc08 	bl	80002ac <__adddf3>
 8011a9c:	4622      	mov	r2, r4
 8011a9e:	462b      	mov	r3, r5
 8011aa0:	f7ee fdba 	bl	8000618 <__aeabi_dmul>
 8011aa4:	a376      	add	r3, pc, #472	; (adr r3, 8011c80 <__ieee754_pow+0x708>)
 8011aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aaa:	f7ee fbff 	bl	80002ac <__adddf3>
 8011aae:	4622      	mov	r2, r4
 8011ab0:	462b      	mov	r3, r5
 8011ab2:	f7ee fdb1 	bl	8000618 <__aeabi_dmul>
 8011ab6:	a374      	add	r3, pc, #464	; (adr r3, 8011c88 <__ieee754_pow+0x710>)
 8011ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abc:	f7ee fbf6 	bl	80002ac <__adddf3>
 8011ac0:	4622      	mov	r2, r4
 8011ac2:	462b      	mov	r3, r5
 8011ac4:	f7ee fda8 	bl	8000618 <__aeabi_dmul>
 8011ac8:	a371      	add	r3, pc, #452	; (adr r3, 8011c90 <__ieee754_pow+0x718>)
 8011aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ace:	f7ee fbed 	bl	80002ac <__adddf3>
 8011ad2:	4622      	mov	r2, r4
 8011ad4:	4606      	mov	r6, r0
 8011ad6:	460f      	mov	r7, r1
 8011ad8:	462b      	mov	r3, r5
 8011ada:	4620      	mov	r0, r4
 8011adc:	4629      	mov	r1, r5
 8011ade:	f7ee fd9b 	bl	8000618 <__aeabi_dmul>
 8011ae2:	4602      	mov	r2, r0
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	4639      	mov	r1, r7
 8011aea:	f7ee fd95 	bl	8000618 <__aeabi_dmul>
 8011aee:	4642      	mov	r2, r8
 8011af0:	4604      	mov	r4, r0
 8011af2:	460d      	mov	r5, r1
 8011af4:	464b      	mov	r3, r9
 8011af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011afa:	f7ee fbd7 	bl	80002ac <__adddf3>
 8011afe:	ec53 2b18 	vmov	r2, r3, d8
 8011b02:	f7ee fd89 	bl	8000618 <__aeabi_dmul>
 8011b06:	4622      	mov	r2, r4
 8011b08:	462b      	mov	r3, r5
 8011b0a:	f7ee fbcf 	bl	80002ac <__adddf3>
 8011b0e:	4642      	mov	r2, r8
 8011b10:	4682      	mov	sl, r0
 8011b12:	468b      	mov	fp, r1
 8011b14:	464b      	mov	r3, r9
 8011b16:	4640      	mov	r0, r8
 8011b18:	4649      	mov	r1, r9
 8011b1a:	f7ee fd7d 	bl	8000618 <__aeabi_dmul>
 8011b1e:	4b6c      	ldr	r3, [pc, #432]	; (8011cd0 <__ieee754_pow+0x758>)
 8011b20:	2200      	movs	r2, #0
 8011b22:	4606      	mov	r6, r0
 8011b24:	460f      	mov	r7, r1
 8011b26:	f7ee fbc1 	bl	80002ac <__adddf3>
 8011b2a:	4652      	mov	r2, sl
 8011b2c:	465b      	mov	r3, fp
 8011b2e:	f7ee fbbd 	bl	80002ac <__adddf3>
 8011b32:	9c04      	ldr	r4, [sp, #16]
 8011b34:	460d      	mov	r5, r1
 8011b36:	4622      	mov	r2, r4
 8011b38:	460b      	mov	r3, r1
 8011b3a:	4640      	mov	r0, r8
 8011b3c:	4649      	mov	r1, r9
 8011b3e:	f7ee fd6b 	bl	8000618 <__aeabi_dmul>
 8011b42:	4b63      	ldr	r3, [pc, #396]	; (8011cd0 <__ieee754_pow+0x758>)
 8011b44:	4680      	mov	r8, r0
 8011b46:	4689      	mov	r9, r1
 8011b48:	2200      	movs	r2, #0
 8011b4a:	4620      	mov	r0, r4
 8011b4c:	4629      	mov	r1, r5
 8011b4e:	f7ee fbab 	bl	80002a8 <__aeabi_dsub>
 8011b52:	4632      	mov	r2, r6
 8011b54:	463b      	mov	r3, r7
 8011b56:	f7ee fba7 	bl	80002a8 <__aeabi_dsub>
 8011b5a:	4602      	mov	r2, r0
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	4650      	mov	r0, sl
 8011b60:	4659      	mov	r1, fp
 8011b62:	f7ee fba1 	bl	80002a8 <__aeabi_dsub>
 8011b66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b6a:	f7ee fd55 	bl	8000618 <__aeabi_dmul>
 8011b6e:	4622      	mov	r2, r4
 8011b70:	4606      	mov	r6, r0
 8011b72:	460f      	mov	r7, r1
 8011b74:	462b      	mov	r3, r5
 8011b76:	ec51 0b18 	vmov	r0, r1, d8
 8011b7a:	f7ee fd4d 	bl	8000618 <__aeabi_dmul>
 8011b7e:	4602      	mov	r2, r0
 8011b80:	460b      	mov	r3, r1
 8011b82:	4630      	mov	r0, r6
 8011b84:	4639      	mov	r1, r7
 8011b86:	f7ee fb91 	bl	80002ac <__adddf3>
 8011b8a:	4606      	mov	r6, r0
 8011b8c:	460f      	mov	r7, r1
 8011b8e:	4602      	mov	r2, r0
 8011b90:	460b      	mov	r3, r1
 8011b92:	4640      	mov	r0, r8
 8011b94:	4649      	mov	r1, r9
 8011b96:	f7ee fb89 	bl	80002ac <__adddf3>
 8011b9a:	9c04      	ldr	r4, [sp, #16]
 8011b9c:	a33e      	add	r3, pc, #248	; (adr r3, 8011c98 <__ieee754_pow+0x720>)
 8011b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba2:	4620      	mov	r0, r4
 8011ba4:	460d      	mov	r5, r1
 8011ba6:	f7ee fd37 	bl	8000618 <__aeabi_dmul>
 8011baa:	4642      	mov	r2, r8
 8011bac:	ec41 0b18 	vmov	d8, r0, r1
 8011bb0:	464b      	mov	r3, r9
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	4629      	mov	r1, r5
 8011bb6:	f7ee fb77 	bl	80002a8 <__aeabi_dsub>
 8011bba:	4602      	mov	r2, r0
 8011bbc:	460b      	mov	r3, r1
 8011bbe:	4630      	mov	r0, r6
 8011bc0:	4639      	mov	r1, r7
 8011bc2:	f7ee fb71 	bl	80002a8 <__aeabi_dsub>
 8011bc6:	a336      	add	r3, pc, #216	; (adr r3, 8011ca0 <__ieee754_pow+0x728>)
 8011bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bcc:	f7ee fd24 	bl	8000618 <__aeabi_dmul>
 8011bd0:	a335      	add	r3, pc, #212	; (adr r3, 8011ca8 <__ieee754_pow+0x730>)
 8011bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd6:	4606      	mov	r6, r0
 8011bd8:	460f      	mov	r7, r1
 8011bda:	4620      	mov	r0, r4
 8011bdc:	4629      	mov	r1, r5
 8011bde:	f7ee fd1b 	bl	8000618 <__aeabi_dmul>
 8011be2:	4602      	mov	r2, r0
 8011be4:	460b      	mov	r3, r1
 8011be6:	4630      	mov	r0, r6
 8011be8:	4639      	mov	r1, r7
 8011bea:	f7ee fb5f 	bl	80002ac <__adddf3>
 8011bee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011bf0:	4b38      	ldr	r3, [pc, #224]	; (8011cd4 <__ieee754_pow+0x75c>)
 8011bf2:	4413      	add	r3, r2
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	f7ee fb58 	bl	80002ac <__adddf3>
 8011bfc:	4682      	mov	sl, r0
 8011bfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c00:	468b      	mov	fp, r1
 8011c02:	f7ee fc9f 	bl	8000544 <__aeabi_i2d>
 8011c06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c08:	4b33      	ldr	r3, [pc, #204]	; (8011cd8 <__ieee754_pow+0x760>)
 8011c0a:	4413      	add	r3, r2
 8011c0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011c10:	4606      	mov	r6, r0
 8011c12:	460f      	mov	r7, r1
 8011c14:	4652      	mov	r2, sl
 8011c16:	465b      	mov	r3, fp
 8011c18:	ec51 0b18 	vmov	r0, r1, d8
 8011c1c:	f7ee fb46 	bl	80002ac <__adddf3>
 8011c20:	4642      	mov	r2, r8
 8011c22:	464b      	mov	r3, r9
 8011c24:	f7ee fb42 	bl	80002ac <__adddf3>
 8011c28:	4632      	mov	r2, r6
 8011c2a:	463b      	mov	r3, r7
 8011c2c:	f7ee fb3e 	bl	80002ac <__adddf3>
 8011c30:	9c04      	ldr	r4, [sp, #16]
 8011c32:	4632      	mov	r2, r6
 8011c34:	463b      	mov	r3, r7
 8011c36:	4620      	mov	r0, r4
 8011c38:	460d      	mov	r5, r1
 8011c3a:	f7ee fb35 	bl	80002a8 <__aeabi_dsub>
 8011c3e:	4642      	mov	r2, r8
 8011c40:	464b      	mov	r3, r9
 8011c42:	f7ee fb31 	bl	80002a8 <__aeabi_dsub>
 8011c46:	ec53 2b18 	vmov	r2, r3, d8
 8011c4a:	f7ee fb2d 	bl	80002a8 <__aeabi_dsub>
 8011c4e:	4602      	mov	r2, r0
 8011c50:	460b      	mov	r3, r1
 8011c52:	4650      	mov	r0, sl
 8011c54:	4659      	mov	r1, fp
 8011c56:	e606      	b.n	8011866 <__ieee754_pow+0x2ee>
 8011c58:	2401      	movs	r4, #1
 8011c5a:	e6a0      	b.n	801199e <__ieee754_pow+0x426>
 8011c5c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011cb0 <__ieee754_pow+0x738>
 8011c60:	e60d      	b.n	801187e <__ieee754_pow+0x306>
 8011c62:	bf00      	nop
 8011c64:	f3af 8000 	nop.w
 8011c68:	4a454eef 	.word	0x4a454eef
 8011c6c:	3fca7e28 	.word	0x3fca7e28
 8011c70:	93c9db65 	.word	0x93c9db65
 8011c74:	3fcd864a 	.word	0x3fcd864a
 8011c78:	a91d4101 	.word	0xa91d4101
 8011c7c:	3fd17460 	.word	0x3fd17460
 8011c80:	518f264d 	.word	0x518f264d
 8011c84:	3fd55555 	.word	0x3fd55555
 8011c88:	db6fabff 	.word	0xdb6fabff
 8011c8c:	3fdb6db6 	.word	0x3fdb6db6
 8011c90:	33333303 	.word	0x33333303
 8011c94:	3fe33333 	.word	0x3fe33333
 8011c98:	e0000000 	.word	0xe0000000
 8011c9c:	3feec709 	.word	0x3feec709
 8011ca0:	dc3a03fd 	.word	0xdc3a03fd
 8011ca4:	3feec709 	.word	0x3feec709
 8011ca8:	145b01f5 	.word	0x145b01f5
 8011cac:	be3e2fe0 	.word	0xbe3e2fe0
 8011cb0:	00000000 	.word	0x00000000
 8011cb4:	3ff00000 	.word	0x3ff00000
 8011cb8:	7ff00000 	.word	0x7ff00000
 8011cbc:	43400000 	.word	0x43400000
 8011cc0:	0003988e 	.word	0x0003988e
 8011cc4:	000bb679 	.word	0x000bb679
 8011cc8:	08012b00 	.word	0x08012b00
 8011ccc:	3ff00000 	.word	0x3ff00000
 8011cd0:	40080000 	.word	0x40080000
 8011cd4:	08012b20 	.word	0x08012b20
 8011cd8:	08012b10 	.word	0x08012b10
 8011cdc:	a3b5      	add	r3, pc, #724	; (adr r3, 8011fb4 <__ieee754_pow+0xa3c>)
 8011cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce2:	4640      	mov	r0, r8
 8011ce4:	4649      	mov	r1, r9
 8011ce6:	f7ee fae1 	bl	80002ac <__adddf3>
 8011cea:	4622      	mov	r2, r4
 8011cec:	ec41 0b1a 	vmov	d10, r0, r1
 8011cf0:	462b      	mov	r3, r5
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	4639      	mov	r1, r7
 8011cf6:	f7ee fad7 	bl	80002a8 <__aeabi_dsub>
 8011cfa:	4602      	mov	r2, r0
 8011cfc:	460b      	mov	r3, r1
 8011cfe:	ec51 0b1a 	vmov	r0, r1, d10
 8011d02:	f7ee ff19 	bl	8000b38 <__aeabi_dcmpgt>
 8011d06:	2800      	cmp	r0, #0
 8011d08:	f47f adf8 	bne.w	80118fc <__ieee754_pow+0x384>
 8011d0c:	4aa4      	ldr	r2, [pc, #656]	; (8011fa0 <__ieee754_pow+0xa28>)
 8011d0e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011d12:	4293      	cmp	r3, r2
 8011d14:	f340 810b 	ble.w	8011f2e <__ieee754_pow+0x9b6>
 8011d18:	151b      	asrs	r3, r3, #20
 8011d1a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011d1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011d22:	fa4a f303 	asr.w	r3, sl, r3
 8011d26:	445b      	add	r3, fp
 8011d28:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011d2c:	4e9d      	ldr	r6, [pc, #628]	; (8011fa4 <__ieee754_pow+0xa2c>)
 8011d2e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011d32:	4116      	asrs	r6, r2
 8011d34:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011d38:	2000      	movs	r0, #0
 8011d3a:	ea23 0106 	bic.w	r1, r3, r6
 8011d3e:	f1c2 0214 	rsb	r2, r2, #20
 8011d42:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011d46:	fa4a fa02 	asr.w	sl, sl, r2
 8011d4a:	f1bb 0f00 	cmp.w	fp, #0
 8011d4e:	4602      	mov	r2, r0
 8011d50:	460b      	mov	r3, r1
 8011d52:	4620      	mov	r0, r4
 8011d54:	4629      	mov	r1, r5
 8011d56:	bfb8      	it	lt
 8011d58:	f1ca 0a00 	rsblt	sl, sl, #0
 8011d5c:	f7ee faa4 	bl	80002a8 <__aeabi_dsub>
 8011d60:	ec41 0b19 	vmov	d9, r0, r1
 8011d64:	4642      	mov	r2, r8
 8011d66:	464b      	mov	r3, r9
 8011d68:	ec51 0b19 	vmov	r0, r1, d9
 8011d6c:	f7ee fa9e 	bl	80002ac <__adddf3>
 8011d70:	2400      	movs	r4, #0
 8011d72:	a379      	add	r3, pc, #484	; (adr r3, 8011f58 <__ieee754_pow+0x9e0>)
 8011d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d78:	4620      	mov	r0, r4
 8011d7a:	460d      	mov	r5, r1
 8011d7c:	f7ee fc4c 	bl	8000618 <__aeabi_dmul>
 8011d80:	ec53 2b19 	vmov	r2, r3, d9
 8011d84:	4606      	mov	r6, r0
 8011d86:	460f      	mov	r7, r1
 8011d88:	4620      	mov	r0, r4
 8011d8a:	4629      	mov	r1, r5
 8011d8c:	f7ee fa8c 	bl	80002a8 <__aeabi_dsub>
 8011d90:	4602      	mov	r2, r0
 8011d92:	460b      	mov	r3, r1
 8011d94:	4640      	mov	r0, r8
 8011d96:	4649      	mov	r1, r9
 8011d98:	f7ee fa86 	bl	80002a8 <__aeabi_dsub>
 8011d9c:	a370      	add	r3, pc, #448	; (adr r3, 8011f60 <__ieee754_pow+0x9e8>)
 8011d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da2:	f7ee fc39 	bl	8000618 <__aeabi_dmul>
 8011da6:	a370      	add	r3, pc, #448	; (adr r3, 8011f68 <__ieee754_pow+0x9f0>)
 8011da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dac:	4680      	mov	r8, r0
 8011dae:	4689      	mov	r9, r1
 8011db0:	4620      	mov	r0, r4
 8011db2:	4629      	mov	r1, r5
 8011db4:	f7ee fc30 	bl	8000618 <__aeabi_dmul>
 8011db8:	4602      	mov	r2, r0
 8011dba:	460b      	mov	r3, r1
 8011dbc:	4640      	mov	r0, r8
 8011dbe:	4649      	mov	r1, r9
 8011dc0:	f7ee fa74 	bl	80002ac <__adddf3>
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	460d      	mov	r5, r1
 8011dc8:	4602      	mov	r2, r0
 8011dca:	460b      	mov	r3, r1
 8011dcc:	4630      	mov	r0, r6
 8011dce:	4639      	mov	r1, r7
 8011dd0:	f7ee fa6c 	bl	80002ac <__adddf3>
 8011dd4:	4632      	mov	r2, r6
 8011dd6:	463b      	mov	r3, r7
 8011dd8:	4680      	mov	r8, r0
 8011dda:	4689      	mov	r9, r1
 8011ddc:	f7ee fa64 	bl	80002a8 <__aeabi_dsub>
 8011de0:	4602      	mov	r2, r0
 8011de2:	460b      	mov	r3, r1
 8011de4:	4620      	mov	r0, r4
 8011de6:	4629      	mov	r1, r5
 8011de8:	f7ee fa5e 	bl	80002a8 <__aeabi_dsub>
 8011dec:	4642      	mov	r2, r8
 8011dee:	4606      	mov	r6, r0
 8011df0:	460f      	mov	r7, r1
 8011df2:	464b      	mov	r3, r9
 8011df4:	4640      	mov	r0, r8
 8011df6:	4649      	mov	r1, r9
 8011df8:	f7ee fc0e 	bl	8000618 <__aeabi_dmul>
 8011dfc:	a35c      	add	r3, pc, #368	; (adr r3, 8011f70 <__ieee754_pow+0x9f8>)
 8011dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e02:	4604      	mov	r4, r0
 8011e04:	460d      	mov	r5, r1
 8011e06:	f7ee fc07 	bl	8000618 <__aeabi_dmul>
 8011e0a:	a35b      	add	r3, pc, #364	; (adr r3, 8011f78 <__ieee754_pow+0xa00>)
 8011e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e10:	f7ee fa4a 	bl	80002a8 <__aeabi_dsub>
 8011e14:	4622      	mov	r2, r4
 8011e16:	462b      	mov	r3, r5
 8011e18:	f7ee fbfe 	bl	8000618 <__aeabi_dmul>
 8011e1c:	a358      	add	r3, pc, #352	; (adr r3, 8011f80 <__ieee754_pow+0xa08>)
 8011e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e22:	f7ee fa43 	bl	80002ac <__adddf3>
 8011e26:	4622      	mov	r2, r4
 8011e28:	462b      	mov	r3, r5
 8011e2a:	f7ee fbf5 	bl	8000618 <__aeabi_dmul>
 8011e2e:	a356      	add	r3, pc, #344	; (adr r3, 8011f88 <__ieee754_pow+0xa10>)
 8011e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e34:	f7ee fa38 	bl	80002a8 <__aeabi_dsub>
 8011e38:	4622      	mov	r2, r4
 8011e3a:	462b      	mov	r3, r5
 8011e3c:	f7ee fbec 	bl	8000618 <__aeabi_dmul>
 8011e40:	a353      	add	r3, pc, #332	; (adr r3, 8011f90 <__ieee754_pow+0xa18>)
 8011e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e46:	f7ee fa31 	bl	80002ac <__adddf3>
 8011e4a:	4622      	mov	r2, r4
 8011e4c:	462b      	mov	r3, r5
 8011e4e:	f7ee fbe3 	bl	8000618 <__aeabi_dmul>
 8011e52:	4602      	mov	r2, r0
 8011e54:	460b      	mov	r3, r1
 8011e56:	4640      	mov	r0, r8
 8011e58:	4649      	mov	r1, r9
 8011e5a:	f7ee fa25 	bl	80002a8 <__aeabi_dsub>
 8011e5e:	4604      	mov	r4, r0
 8011e60:	460d      	mov	r5, r1
 8011e62:	4602      	mov	r2, r0
 8011e64:	460b      	mov	r3, r1
 8011e66:	4640      	mov	r0, r8
 8011e68:	4649      	mov	r1, r9
 8011e6a:	f7ee fbd5 	bl	8000618 <__aeabi_dmul>
 8011e6e:	2200      	movs	r2, #0
 8011e70:	ec41 0b19 	vmov	d9, r0, r1
 8011e74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e78:	4620      	mov	r0, r4
 8011e7a:	4629      	mov	r1, r5
 8011e7c:	f7ee fa14 	bl	80002a8 <__aeabi_dsub>
 8011e80:	4602      	mov	r2, r0
 8011e82:	460b      	mov	r3, r1
 8011e84:	ec51 0b19 	vmov	r0, r1, d9
 8011e88:	f7ee fcf0 	bl	800086c <__aeabi_ddiv>
 8011e8c:	4632      	mov	r2, r6
 8011e8e:	4604      	mov	r4, r0
 8011e90:	460d      	mov	r5, r1
 8011e92:	463b      	mov	r3, r7
 8011e94:	4640      	mov	r0, r8
 8011e96:	4649      	mov	r1, r9
 8011e98:	f7ee fbbe 	bl	8000618 <__aeabi_dmul>
 8011e9c:	4632      	mov	r2, r6
 8011e9e:	463b      	mov	r3, r7
 8011ea0:	f7ee fa04 	bl	80002ac <__adddf3>
 8011ea4:	4602      	mov	r2, r0
 8011ea6:	460b      	mov	r3, r1
 8011ea8:	4620      	mov	r0, r4
 8011eaa:	4629      	mov	r1, r5
 8011eac:	f7ee f9fc 	bl	80002a8 <__aeabi_dsub>
 8011eb0:	4642      	mov	r2, r8
 8011eb2:	464b      	mov	r3, r9
 8011eb4:	f7ee f9f8 	bl	80002a8 <__aeabi_dsub>
 8011eb8:	460b      	mov	r3, r1
 8011eba:	4602      	mov	r2, r0
 8011ebc:	493a      	ldr	r1, [pc, #232]	; (8011fa8 <__ieee754_pow+0xa30>)
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	f7ee f9f2 	bl	80002a8 <__aeabi_dsub>
 8011ec4:	e9cd 0100 	strd	r0, r1, [sp]
 8011ec8:	9b01      	ldr	r3, [sp, #4]
 8011eca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ed2:	da2f      	bge.n	8011f34 <__ieee754_pow+0x9bc>
 8011ed4:	4650      	mov	r0, sl
 8011ed6:	ed9d 0b00 	vldr	d0, [sp]
 8011eda:	f000 f9c1 	bl	8012260 <scalbn>
 8011ede:	ec51 0b10 	vmov	r0, r1, d0
 8011ee2:	ec53 2b18 	vmov	r2, r3, d8
 8011ee6:	f7ff bbe0 	b.w	80116aa <__ieee754_pow+0x132>
 8011eea:	4b30      	ldr	r3, [pc, #192]	; (8011fac <__ieee754_pow+0xa34>)
 8011eec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011ef0:	429e      	cmp	r6, r3
 8011ef2:	f77f af0b 	ble.w	8011d0c <__ieee754_pow+0x794>
 8011ef6:	4b2e      	ldr	r3, [pc, #184]	; (8011fb0 <__ieee754_pow+0xa38>)
 8011ef8:	440b      	add	r3, r1
 8011efa:	4303      	orrs	r3, r0
 8011efc:	d00b      	beq.n	8011f16 <__ieee754_pow+0x99e>
 8011efe:	a326      	add	r3, pc, #152	; (adr r3, 8011f98 <__ieee754_pow+0xa20>)
 8011f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f04:	ec51 0b18 	vmov	r0, r1, d8
 8011f08:	f7ee fb86 	bl	8000618 <__aeabi_dmul>
 8011f0c:	a322      	add	r3, pc, #136	; (adr r3, 8011f98 <__ieee754_pow+0xa20>)
 8011f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f12:	f7ff bbca 	b.w	80116aa <__ieee754_pow+0x132>
 8011f16:	4622      	mov	r2, r4
 8011f18:	462b      	mov	r3, r5
 8011f1a:	f7ee f9c5 	bl	80002a8 <__aeabi_dsub>
 8011f1e:	4642      	mov	r2, r8
 8011f20:	464b      	mov	r3, r9
 8011f22:	f7ee fdff 	bl	8000b24 <__aeabi_dcmpge>
 8011f26:	2800      	cmp	r0, #0
 8011f28:	f43f aef0 	beq.w	8011d0c <__ieee754_pow+0x794>
 8011f2c:	e7e7      	b.n	8011efe <__ieee754_pow+0x986>
 8011f2e:	f04f 0a00 	mov.w	sl, #0
 8011f32:	e717      	b.n	8011d64 <__ieee754_pow+0x7ec>
 8011f34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f38:	4619      	mov	r1, r3
 8011f3a:	e7d2      	b.n	8011ee2 <__ieee754_pow+0x96a>
 8011f3c:	491a      	ldr	r1, [pc, #104]	; (8011fa8 <__ieee754_pow+0xa30>)
 8011f3e:	2000      	movs	r0, #0
 8011f40:	f7ff bb9e 	b.w	8011680 <__ieee754_pow+0x108>
 8011f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f48:	f7ff bb9a 	b.w	8011680 <__ieee754_pow+0x108>
 8011f4c:	9000      	str	r0, [sp, #0]
 8011f4e:	f7ff bb76 	b.w	801163e <__ieee754_pow+0xc6>
 8011f52:	2100      	movs	r1, #0
 8011f54:	f7ff bb60 	b.w	8011618 <__ieee754_pow+0xa0>
 8011f58:	00000000 	.word	0x00000000
 8011f5c:	3fe62e43 	.word	0x3fe62e43
 8011f60:	fefa39ef 	.word	0xfefa39ef
 8011f64:	3fe62e42 	.word	0x3fe62e42
 8011f68:	0ca86c39 	.word	0x0ca86c39
 8011f6c:	be205c61 	.word	0xbe205c61
 8011f70:	72bea4d0 	.word	0x72bea4d0
 8011f74:	3e663769 	.word	0x3e663769
 8011f78:	c5d26bf1 	.word	0xc5d26bf1
 8011f7c:	3ebbbd41 	.word	0x3ebbbd41
 8011f80:	af25de2c 	.word	0xaf25de2c
 8011f84:	3f11566a 	.word	0x3f11566a
 8011f88:	16bebd93 	.word	0x16bebd93
 8011f8c:	3f66c16c 	.word	0x3f66c16c
 8011f90:	5555553e 	.word	0x5555553e
 8011f94:	3fc55555 	.word	0x3fc55555
 8011f98:	c2f8f359 	.word	0xc2f8f359
 8011f9c:	01a56e1f 	.word	0x01a56e1f
 8011fa0:	3fe00000 	.word	0x3fe00000
 8011fa4:	000fffff 	.word	0x000fffff
 8011fa8:	3ff00000 	.word	0x3ff00000
 8011fac:	4090cbff 	.word	0x4090cbff
 8011fb0:	3f6f3400 	.word	0x3f6f3400
 8011fb4:	652b82fe 	.word	0x652b82fe
 8011fb8:	3c971547 	.word	0x3c971547

08011fbc <__ieee754_sqrt>:
 8011fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc0:	ec55 4b10 	vmov	r4, r5, d0
 8011fc4:	4e56      	ldr	r6, [pc, #344]	; (8012120 <__ieee754_sqrt+0x164>)
 8011fc6:	43ae      	bics	r6, r5
 8011fc8:	ee10 0a10 	vmov	r0, s0
 8011fcc:	ee10 3a10 	vmov	r3, s0
 8011fd0:	4629      	mov	r1, r5
 8011fd2:	462a      	mov	r2, r5
 8011fd4:	d110      	bne.n	8011ff8 <__ieee754_sqrt+0x3c>
 8011fd6:	ee10 2a10 	vmov	r2, s0
 8011fda:	462b      	mov	r3, r5
 8011fdc:	f7ee fb1c 	bl	8000618 <__aeabi_dmul>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	4629      	mov	r1, r5
 8011fe8:	f7ee f960 	bl	80002ac <__adddf3>
 8011fec:	4604      	mov	r4, r0
 8011fee:	460d      	mov	r5, r1
 8011ff0:	ec45 4b10 	vmov	d0, r4, r5
 8011ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ff8:	2d00      	cmp	r5, #0
 8011ffa:	dc10      	bgt.n	801201e <__ieee754_sqrt+0x62>
 8011ffc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012000:	4330      	orrs	r0, r6
 8012002:	d0f5      	beq.n	8011ff0 <__ieee754_sqrt+0x34>
 8012004:	b15d      	cbz	r5, 801201e <__ieee754_sqrt+0x62>
 8012006:	ee10 2a10 	vmov	r2, s0
 801200a:	462b      	mov	r3, r5
 801200c:	ee10 0a10 	vmov	r0, s0
 8012010:	f7ee f94a 	bl	80002a8 <__aeabi_dsub>
 8012014:	4602      	mov	r2, r0
 8012016:	460b      	mov	r3, r1
 8012018:	f7ee fc28 	bl	800086c <__aeabi_ddiv>
 801201c:	e7e6      	b.n	8011fec <__ieee754_sqrt+0x30>
 801201e:	1509      	asrs	r1, r1, #20
 8012020:	d076      	beq.n	8012110 <__ieee754_sqrt+0x154>
 8012022:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012026:	07ce      	lsls	r6, r1, #31
 8012028:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801202c:	bf5e      	ittt	pl
 801202e:	0fda      	lsrpl	r2, r3, #31
 8012030:	005b      	lslpl	r3, r3, #1
 8012032:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8012036:	0fda      	lsrs	r2, r3, #31
 8012038:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801203c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8012040:	2000      	movs	r0, #0
 8012042:	106d      	asrs	r5, r5, #1
 8012044:	005b      	lsls	r3, r3, #1
 8012046:	f04f 0e16 	mov.w	lr, #22
 801204a:	4684      	mov	ip, r0
 801204c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012050:	eb0c 0401 	add.w	r4, ip, r1
 8012054:	4294      	cmp	r4, r2
 8012056:	bfde      	ittt	le
 8012058:	1b12      	suble	r2, r2, r4
 801205a:	eb04 0c01 	addle.w	ip, r4, r1
 801205e:	1840      	addle	r0, r0, r1
 8012060:	0052      	lsls	r2, r2, #1
 8012062:	f1be 0e01 	subs.w	lr, lr, #1
 8012066:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801206a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801206e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012072:	d1ed      	bne.n	8012050 <__ieee754_sqrt+0x94>
 8012074:	4671      	mov	r1, lr
 8012076:	2720      	movs	r7, #32
 8012078:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801207c:	4562      	cmp	r2, ip
 801207e:	eb04 060e 	add.w	r6, r4, lr
 8012082:	dc02      	bgt.n	801208a <__ieee754_sqrt+0xce>
 8012084:	d113      	bne.n	80120ae <__ieee754_sqrt+0xf2>
 8012086:	429e      	cmp	r6, r3
 8012088:	d811      	bhi.n	80120ae <__ieee754_sqrt+0xf2>
 801208a:	2e00      	cmp	r6, #0
 801208c:	eb06 0e04 	add.w	lr, r6, r4
 8012090:	da43      	bge.n	801211a <__ieee754_sqrt+0x15e>
 8012092:	f1be 0f00 	cmp.w	lr, #0
 8012096:	db40      	blt.n	801211a <__ieee754_sqrt+0x15e>
 8012098:	f10c 0801 	add.w	r8, ip, #1
 801209c:	eba2 020c 	sub.w	r2, r2, ip
 80120a0:	429e      	cmp	r6, r3
 80120a2:	bf88      	it	hi
 80120a4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80120a8:	1b9b      	subs	r3, r3, r6
 80120aa:	4421      	add	r1, r4
 80120ac:	46c4      	mov	ip, r8
 80120ae:	0052      	lsls	r2, r2, #1
 80120b0:	3f01      	subs	r7, #1
 80120b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80120b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80120ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80120be:	d1dd      	bne.n	801207c <__ieee754_sqrt+0xc0>
 80120c0:	4313      	orrs	r3, r2
 80120c2:	d006      	beq.n	80120d2 <__ieee754_sqrt+0x116>
 80120c4:	1c4c      	adds	r4, r1, #1
 80120c6:	bf13      	iteet	ne
 80120c8:	3101      	addne	r1, #1
 80120ca:	3001      	addeq	r0, #1
 80120cc:	4639      	moveq	r1, r7
 80120ce:	f021 0101 	bicne.w	r1, r1, #1
 80120d2:	1043      	asrs	r3, r0, #1
 80120d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80120d8:	0849      	lsrs	r1, r1, #1
 80120da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80120de:	07c2      	lsls	r2, r0, #31
 80120e0:	bf48      	it	mi
 80120e2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80120e6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80120ea:	460c      	mov	r4, r1
 80120ec:	463d      	mov	r5, r7
 80120ee:	e77f      	b.n	8011ff0 <__ieee754_sqrt+0x34>
 80120f0:	0ada      	lsrs	r2, r3, #11
 80120f2:	3815      	subs	r0, #21
 80120f4:	055b      	lsls	r3, r3, #21
 80120f6:	2a00      	cmp	r2, #0
 80120f8:	d0fa      	beq.n	80120f0 <__ieee754_sqrt+0x134>
 80120fa:	02d7      	lsls	r7, r2, #11
 80120fc:	d50a      	bpl.n	8012114 <__ieee754_sqrt+0x158>
 80120fe:	f1c1 0420 	rsb	r4, r1, #32
 8012102:	fa23 f404 	lsr.w	r4, r3, r4
 8012106:	1e4d      	subs	r5, r1, #1
 8012108:	408b      	lsls	r3, r1
 801210a:	4322      	orrs	r2, r4
 801210c:	1b41      	subs	r1, r0, r5
 801210e:	e788      	b.n	8012022 <__ieee754_sqrt+0x66>
 8012110:	4608      	mov	r0, r1
 8012112:	e7f0      	b.n	80120f6 <__ieee754_sqrt+0x13a>
 8012114:	0052      	lsls	r2, r2, #1
 8012116:	3101      	adds	r1, #1
 8012118:	e7ef      	b.n	80120fa <__ieee754_sqrt+0x13e>
 801211a:	46e0      	mov	r8, ip
 801211c:	e7be      	b.n	801209c <__ieee754_sqrt+0xe0>
 801211e:	bf00      	nop
 8012120:	7ff00000 	.word	0x7ff00000

08012124 <fabs>:
 8012124:	ec51 0b10 	vmov	r0, r1, d0
 8012128:	ee10 2a10 	vmov	r2, s0
 801212c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012130:	ec43 2b10 	vmov	d0, r2, r3
 8012134:	4770      	bx	lr

08012136 <finite>:
 8012136:	b082      	sub	sp, #8
 8012138:	ed8d 0b00 	vstr	d0, [sp]
 801213c:	9801      	ldr	r0, [sp, #4]
 801213e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012142:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012146:	0fc0      	lsrs	r0, r0, #31
 8012148:	b002      	add	sp, #8
 801214a:	4770      	bx	lr

0801214c <rint>:
 801214c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801214e:	ec51 0b10 	vmov	r0, r1, d0
 8012152:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012156:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801215a:	2e13      	cmp	r6, #19
 801215c:	ee10 4a10 	vmov	r4, s0
 8012160:	460b      	mov	r3, r1
 8012162:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012166:	dc58      	bgt.n	801221a <rint+0xce>
 8012168:	2e00      	cmp	r6, #0
 801216a:	da2b      	bge.n	80121c4 <rint+0x78>
 801216c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012170:	4302      	orrs	r2, r0
 8012172:	d023      	beq.n	80121bc <rint+0x70>
 8012174:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012178:	4302      	orrs	r2, r0
 801217a:	4254      	negs	r4, r2
 801217c:	4314      	orrs	r4, r2
 801217e:	0c4b      	lsrs	r3, r1, #17
 8012180:	0b24      	lsrs	r4, r4, #12
 8012182:	045b      	lsls	r3, r3, #17
 8012184:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012188:	ea44 0103 	orr.w	r1, r4, r3
 801218c:	4b32      	ldr	r3, [pc, #200]	; (8012258 <rint+0x10c>)
 801218e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012192:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012196:	4602      	mov	r2, r0
 8012198:	460b      	mov	r3, r1
 801219a:	4630      	mov	r0, r6
 801219c:	4639      	mov	r1, r7
 801219e:	f7ee f885 	bl	80002ac <__adddf3>
 80121a2:	e9cd 0100 	strd	r0, r1, [sp]
 80121a6:	463b      	mov	r3, r7
 80121a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121ac:	4632      	mov	r2, r6
 80121ae:	f7ee f87b 	bl	80002a8 <__aeabi_dsub>
 80121b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80121b6:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80121ba:	4639      	mov	r1, r7
 80121bc:	ec41 0b10 	vmov	d0, r0, r1
 80121c0:	b003      	add	sp, #12
 80121c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c4:	4a25      	ldr	r2, [pc, #148]	; (801225c <rint+0x110>)
 80121c6:	4132      	asrs	r2, r6
 80121c8:	ea01 0702 	and.w	r7, r1, r2
 80121cc:	4307      	orrs	r7, r0
 80121ce:	d0f5      	beq.n	80121bc <rint+0x70>
 80121d0:	0851      	lsrs	r1, r2, #1
 80121d2:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80121d6:	4314      	orrs	r4, r2
 80121d8:	d00c      	beq.n	80121f4 <rint+0xa8>
 80121da:	ea23 0201 	bic.w	r2, r3, r1
 80121de:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80121e2:	2e13      	cmp	r6, #19
 80121e4:	fa43 f606 	asr.w	r6, r3, r6
 80121e8:	bf0c      	ite	eq
 80121ea:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80121ee:	2400      	movne	r4, #0
 80121f0:	ea42 0306 	orr.w	r3, r2, r6
 80121f4:	4918      	ldr	r1, [pc, #96]	; (8012258 <rint+0x10c>)
 80121f6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80121fa:	4622      	mov	r2, r4
 80121fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012200:	4620      	mov	r0, r4
 8012202:	4629      	mov	r1, r5
 8012204:	f7ee f852 	bl	80002ac <__adddf3>
 8012208:	e9cd 0100 	strd	r0, r1, [sp]
 801220c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012210:	4622      	mov	r2, r4
 8012212:	462b      	mov	r3, r5
 8012214:	f7ee f848 	bl	80002a8 <__aeabi_dsub>
 8012218:	e7d0      	b.n	80121bc <rint+0x70>
 801221a:	2e33      	cmp	r6, #51	; 0x33
 801221c:	dd07      	ble.n	801222e <rint+0xe2>
 801221e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012222:	d1cb      	bne.n	80121bc <rint+0x70>
 8012224:	ee10 2a10 	vmov	r2, s0
 8012228:	f7ee f840 	bl	80002ac <__adddf3>
 801222c:	e7c6      	b.n	80121bc <rint+0x70>
 801222e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8012232:	f04f 36ff 	mov.w	r6, #4294967295
 8012236:	40d6      	lsrs	r6, r2
 8012238:	4230      	tst	r0, r6
 801223a:	d0bf      	beq.n	80121bc <rint+0x70>
 801223c:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8012240:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8012244:	bf1f      	itttt	ne
 8012246:	ea24 0101 	bicne.w	r1, r4, r1
 801224a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801224e:	fa44 f202 	asrne.w	r2, r4, r2
 8012252:	ea41 0402 	orrne.w	r4, r1, r2
 8012256:	e7cd      	b.n	80121f4 <rint+0xa8>
 8012258:	08012b30 	.word	0x08012b30
 801225c:	000fffff 	.word	0x000fffff

08012260 <scalbn>:
 8012260:	b570      	push	{r4, r5, r6, lr}
 8012262:	ec55 4b10 	vmov	r4, r5, d0
 8012266:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801226a:	4606      	mov	r6, r0
 801226c:	462b      	mov	r3, r5
 801226e:	b99a      	cbnz	r2, 8012298 <scalbn+0x38>
 8012270:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012274:	4323      	orrs	r3, r4
 8012276:	d036      	beq.n	80122e6 <scalbn+0x86>
 8012278:	4b39      	ldr	r3, [pc, #228]	; (8012360 <scalbn+0x100>)
 801227a:	4629      	mov	r1, r5
 801227c:	ee10 0a10 	vmov	r0, s0
 8012280:	2200      	movs	r2, #0
 8012282:	f7ee f9c9 	bl	8000618 <__aeabi_dmul>
 8012286:	4b37      	ldr	r3, [pc, #220]	; (8012364 <scalbn+0x104>)
 8012288:	429e      	cmp	r6, r3
 801228a:	4604      	mov	r4, r0
 801228c:	460d      	mov	r5, r1
 801228e:	da10      	bge.n	80122b2 <scalbn+0x52>
 8012290:	a32b      	add	r3, pc, #172	; (adr r3, 8012340 <scalbn+0xe0>)
 8012292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012296:	e03a      	b.n	801230e <scalbn+0xae>
 8012298:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801229c:	428a      	cmp	r2, r1
 801229e:	d10c      	bne.n	80122ba <scalbn+0x5a>
 80122a0:	ee10 2a10 	vmov	r2, s0
 80122a4:	4620      	mov	r0, r4
 80122a6:	4629      	mov	r1, r5
 80122a8:	f7ee f800 	bl	80002ac <__adddf3>
 80122ac:	4604      	mov	r4, r0
 80122ae:	460d      	mov	r5, r1
 80122b0:	e019      	b.n	80122e6 <scalbn+0x86>
 80122b2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80122b6:	460b      	mov	r3, r1
 80122b8:	3a36      	subs	r2, #54	; 0x36
 80122ba:	4432      	add	r2, r6
 80122bc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80122c0:	428a      	cmp	r2, r1
 80122c2:	dd08      	ble.n	80122d6 <scalbn+0x76>
 80122c4:	2d00      	cmp	r5, #0
 80122c6:	a120      	add	r1, pc, #128	; (adr r1, 8012348 <scalbn+0xe8>)
 80122c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122cc:	da1c      	bge.n	8012308 <scalbn+0xa8>
 80122ce:	a120      	add	r1, pc, #128	; (adr r1, 8012350 <scalbn+0xf0>)
 80122d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80122d4:	e018      	b.n	8012308 <scalbn+0xa8>
 80122d6:	2a00      	cmp	r2, #0
 80122d8:	dd08      	ble.n	80122ec <scalbn+0x8c>
 80122da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80122de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80122e2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80122e6:	ec45 4b10 	vmov	d0, r4, r5
 80122ea:	bd70      	pop	{r4, r5, r6, pc}
 80122ec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80122f0:	da19      	bge.n	8012326 <scalbn+0xc6>
 80122f2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80122f6:	429e      	cmp	r6, r3
 80122f8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80122fc:	dd0a      	ble.n	8012314 <scalbn+0xb4>
 80122fe:	a112      	add	r1, pc, #72	; (adr r1, 8012348 <scalbn+0xe8>)
 8012300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d1e2      	bne.n	80122ce <scalbn+0x6e>
 8012308:	a30f      	add	r3, pc, #60	; (adr r3, 8012348 <scalbn+0xe8>)
 801230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230e:	f7ee f983 	bl	8000618 <__aeabi_dmul>
 8012312:	e7cb      	b.n	80122ac <scalbn+0x4c>
 8012314:	a10a      	add	r1, pc, #40	; (adr r1, 8012340 <scalbn+0xe0>)
 8012316:	e9d1 0100 	ldrd	r0, r1, [r1]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d0b8      	beq.n	8012290 <scalbn+0x30>
 801231e:	a10e      	add	r1, pc, #56	; (adr r1, 8012358 <scalbn+0xf8>)
 8012320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012324:	e7b4      	b.n	8012290 <scalbn+0x30>
 8012326:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801232a:	3236      	adds	r2, #54	; 0x36
 801232c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012330:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012334:	4620      	mov	r0, r4
 8012336:	4b0c      	ldr	r3, [pc, #48]	; (8012368 <scalbn+0x108>)
 8012338:	2200      	movs	r2, #0
 801233a:	e7e8      	b.n	801230e <scalbn+0xae>
 801233c:	f3af 8000 	nop.w
 8012340:	c2f8f359 	.word	0xc2f8f359
 8012344:	01a56e1f 	.word	0x01a56e1f
 8012348:	8800759c 	.word	0x8800759c
 801234c:	7e37e43c 	.word	0x7e37e43c
 8012350:	8800759c 	.word	0x8800759c
 8012354:	fe37e43c 	.word	0xfe37e43c
 8012358:	c2f8f359 	.word	0xc2f8f359
 801235c:	81a56e1f 	.word	0x81a56e1f
 8012360:	43500000 	.word	0x43500000
 8012364:	ffff3cb0 	.word	0xffff3cb0
 8012368:	3c900000 	.word	0x3c900000

0801236c <_init>:
 801236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801236e:	bf00      	nop
 8012370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012372:	bc08      	pop	{r3}
 8012374:	469e      	mov	lr, r3
 8012376:	4770      	bx	lr

08012378 <_fini>:
 8012378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801237a:	bf00      	nop
 801237c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801237e:	bc08      	pop	{r3}
 8012380:	469e      	mov	lr, r3
 8012382:	4770      	bx	lr
