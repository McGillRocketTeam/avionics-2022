
f437_fc_v4.3_megaloop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011230  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  080113e0  080113e0  000213e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011b5c  08011b5c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011b5c  08011b5c  00021b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011b64  08011b64  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011b64  08011b64  00021b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b68  08011b68  00021b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08011b6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          000015a0  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001798  20001798  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032645  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c75  00000000  00000000  0006286d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002328  00000000  00000000  000674e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002138  00000000  00000000  00069810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299c5  00000000  00000000  0006b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024350  00000000  00000000  0009530d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f44a8  00000000  00000000  000b965d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001adb05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000abb8  00000000  00000000  001adb58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080113c8 	.word	0x080113c8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	080113c8 	.word	0x080113c8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <Max31855_Read_Temp>:
uint8_t Error=0;                                      // Thermocouple Connection acknowledge Flag
uint32_t sign=0;									  // Sign bit
uint8_t DATARX[4];                                    // Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};                                    // Raw Data from MAX6675
// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
	int Temp = 0;                                        // Temperature Variable
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); // Low State for SPI Communication
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800101c:	482c      	ldr	r0, [pc, #176]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 800101e:	f003 fdc9 	bl	8004bb4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);                // DATA Transfer
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	2204      	movs	r2, #4
 8001028:	492a      	ldr	r1, [pc, #168]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 800102a:	482b      	ldr	r0, [pc, #172]	; (80010d8 <Max31855_Read_Temp+0xcc>)
 800102c:	f006 f848 	bl	80070c0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET); // High State for SPI Communication
 8001030:	2201      	movs	r2, #1
 8001032:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001036:	4826      	ldr	r0, [pc, #152]	; (80010d0 <Max31855_Read_Temp+0xc4>)
 8001038:	f003 fdbc 	bl	8004bb4 <HAL_GPIO_WritePin>


	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 800103c:	4b25      	ldr	r3, [pc, #148]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 800103e:	78db      	ldrb	r3, [r3, #3]
 8001040:	461a      	mov	r2, r3
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	431a      	orrs	r2, r3
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 800104c:	785b      	ldrb	r3, [r3, #1]
 800104e:	041b      	lsls	r3, r3, #16
 8001050:	431a      	orrs	r2, r3
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <Max31855_Read_Temp+0xc8>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	061b      	lsls	r3, r3, #24
 8001058:	4313      	orrs	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

	Error = v & 0x07;								  // Error Detection
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <Max31855_Read_Temp+0xd0>)
 8001068:	701a      	strb	r2, [r3, #0]

	if (v & 0x7) {
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <Max31855_Read_Temp+0x6c>
		// uh oh, a serious problem!
		return -99999;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <Max31855_Read_Temp+0xd4>)
 8001076:	e024      	b.n	80010c2 <Max31855_Read_Temp+0xb6>
	}

	if (v & 0x80000000) {
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	da07      	bge.n	800108e <Max31855_Read_Temp+0x82>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		v = 0xFFFFC000 | ((v >> 18) & 0x00003FFF);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	0c9b      	lsrs	r3, r3, #18
 8001082:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8001086:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	e002      	b.n	8001094 <Max31855_Read_Temp+0x88>
	} else {
		// Positive value, just drop the lower 18 bits.
		v >>= 18;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	0c9b      	lsrs	r3, r3, #18
 8001092:	60fb      	str	r3, [r7, #12]
	}
	// Serial.println(v, HEX);

	double centigrade = v;
 8001094:	68f8      	ldr	r0, [r7, #12]
 8001096:	f7ff fa45 	bl	8000524 <__aeabi_ui2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	e9c7 2300 	strd	r2, r3, [r7]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <Max31855_Read_Temp+0xd8>)
 80010a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010ac:	f7ff fab4 	bl	8000618 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	e9c7 2300 	strd	r2, r3, [r7]
	return centigrade;
 80010b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010bc:	f7ff fda4 	bl	8000c08 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	ee07 3a90 	vmov	s15, r3
}
 80010c6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021000 	.word	0x40021000
 80010d4:	200004e0 	.word	0x200004e0
 80010d8:	200004e4 	.word	0x200004e4
 80010dc:	20000214 	.word	0x20000214
 80010e0:	c7c34f80 	.word	0xc7c34f80
 80010e4:	3fd00000 	.word	0x3fd00000

080010e8 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <lsm6dsl_init+0xc8>)
 80010f2:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 80010f4:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <lsm6dsl_init+0xcc>)
 80010f6:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 80010f8:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <lsm6dsl_init+0xd0>)
 80010fa:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f000 fa13 	bl	8001528 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	492d      	ldr	r1, [pc, #180]	; (80011bc <lsm6dsl_init+0xd4>)
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fd71 	bl	8001bf0 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <lsm6dsl_init+0xd4>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b6a      	cmp	r3, #106	; 0x6a
 8001114:	d005      	beq.n	8001122 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2102      	movs	r1, #2
 800111a:	4829      	ldr	r0, [pc, #164]	; (80011c0 <lsm6dsl_init+0xd8>)
 800111c:	f003 fd4a 	bl	8004bb4 <HAL_GPIO_WritePin>
		__BKPT();
 8001120:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2101      	movs	r1, #1
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fd72 	bl	8001c12 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	4924      	ldr	r1, [pc, #144]	; (80011c4 <lsm6dsl_init+0xdc>)
 8001134:	4618      	mov	r0, r3
 8001136:	f000 fd92 	bl	8001c5e <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <lsm6dsl_init+0xdc>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f5      	bne.n	800112e <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001142:	f107 030c 	add.w	r3, r7, #12
 8001146:	2101      	movs	r1, #1
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fc63 	bl	8001a14 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 800114e:	f107 030c 	add.w	r3, r7, #12
 8001152:	2104      	movs	r1, #4
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fbeb 	bl	8001930 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2104      	movs	r1, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f000 fc31 	bl	80019c8 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	2103      	movs	r1, #3
 800116c:	4618      	mov	r0, r3
 800116e:	f000 fbb9 	bl	80018e4 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2106      	movs	r1, #6
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fbff 	bl	800197c <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2111      	movs	r1, #17
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fd83 	bl	8001c90 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	21a8      	movs	r1, #168	; 0xa8
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fdb4 	bl	8001cfe <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	461c      	mov	r4, r3
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80011a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd90      	pop	{r4, r7, pc}
 80011ae:	bf00      	nop
 80011b0:	08001441 	.word	0x08001441
 80011b4:	0800147b 	.word	0x0800147b
 80011b8:	20000540 	.word	0x20000540
 80011bc:	20000228 	.word	0x20000228
 80011c0:	40020800 	.word	0x40020800
 80011c4:	20000229 	.word	0x20000229

080011c8 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 80011c8:	b590      	push	{r4, r7, lr}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	1d3c      	adds	r4, r7, #4
 80011d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80011d4:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80011d6:	f107 0217 	add.w	r2, r7, #23
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fc3e 	bl	8001a60 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 80011e4:	7dfb      	ldrb	r3, [r7, #23]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d02d      	beq.n	8001246 <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80011ea:	2206      	movs	r2, #6
 80011ec:	2100      	movs	r1, #0
 80011ee:	4818      	ldr	r0, [pc, #96]	; (8001250 <get_acceleration+0x88>)
 80011f0:	f00b fc8a 	bl	800cb08 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4916      	ldr	r1, [pc, #88]	; (8001250 <get_acceleration+0x88>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fcae 	bl	8001b5a <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <get_acceleration+0x88>)
 8001200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001204:	4618      	mov	r0, r3
 8001206:	f000 fb3d 	bl	8001884 <lsm6dsl_from_fs8g_to_mg>
 800120a:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <get_acceleration+0x88>)
 8001216:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 800121e:	4610      	mov	r0, r2
 8001220:	f000 fb30 	bl	8001884 <lsm6dsl_from_fs8g_to_mg>
 8001224:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001228:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <get_acceleration+0x88>)
 800122e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001238:	4610      	mov	r0, r2
 800123a:	f000 fb23 	bl	8001884 <lsm6dsl_from_fs8g_to_mg>
 800123e:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001242:	edc4 7a00 	vstr	s15, [r4]
	}

}
 8001246:	bf00      	nop
 8001248:	371c      	adds	r7, #28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	bf00      	nop
 8001250:	20000218 	.word	0x20000218

08001254 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	1d3c      	adds	r4, r7, #4
 800125c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001260:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001262:	f107 0217 	add.w	r2, r7, #23
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fc11 	bl	8001a92 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d02d      	beq.n	80012d2 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001276:	2206      	movs	r2, #6
 8001278:	2100      	movs	r1, #0
 800127a:	4818      	ldr	r0, [pc, #96]	; (80012dc <get_angvelocity+0x88>)
 800127c:	f00b fc44 	bl	800cb08 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4916      	ldr	r1, [pc, #88]	; (80012dc <get_angvelocity+0x88>)
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fc1d 	bl	8001ac4 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <get_angvelocity+0x88>)
 800128c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fb0f 	bl	80018b4 <lsm6dsl_from_fs2000dps_to_mdps>
 8001296:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <get_angvelocity+0x88>)
 80012a2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80012aa:	4610      	mov	r0, r2
 80012ac:	f000 fb02 	bl	80018b4 <lsm6dsl_from_fs2000dps_to_mdps>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 80012b4:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <get_angvelocity+0x88>)
 80012ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80012c4:	4610      	mov	r0, r2
 80012c6:	f000 faf5 	bl	80018b4 <lsm6dsl_from_fs2000dps_to_mdps>
 80012ca:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 80012ce:	edc4 7a00 	vstr	s15, [r4]
	}
}
 80012d2:	bf00      	nop
 80012d4:	371c      	adds	r7, #28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd90      	pop	{r4, r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000220 	.word	0x20000220

080012e0 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <lps22hh_init+0x94>)
 80012ea:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 80012ec:	4b22      	ldr	r3, [pc, #136]	; (8001378 <lps22hh_init+0x98>)
 80012ee:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <lps22hh_init+0x9c>)
 80012f2:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 80012f4:	200a      	movs	r0, #10
 80012f6:	f000 f917 	bl	8001528 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <lps22hh_init+0xa0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	491e      	ldr	r1, [pc, #120]	; (8001380 <lps22hh_init+0xa0>)
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fa3c 	bl	8001784 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 800130c:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <lps22hh_init+0xa0>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2bb3      	cmp	r3, #179	; 0xb3
 8001312:	d007      	beq.n	8001324 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2104      	movs	r1, #4
 8001318:	481a      	ldr	r0, [pc, #104]	; (8001384 <lps22hh_init+0xa4>)
 800131a:	f003 fc4b 	bl	8004bb4 <HAL_GPIO_WritePin>
		__BKPT();
 800131e:	be00      	bkpt	0x0000
		Error_Handler();
 8001320:	f001 fdd8 	bl	8002ed4 <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	2101      	movs	r1, #1
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fa3b 	bl	80017a6 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	4914      	ldr	r1, [pc, #80]	; (8001388 <lps22hh_init+0xa8>)
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fa5b 	bl	80017f2 <lps22hh_reset_get>
	} while (rst_lps22hh);
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <lps22hh_init+0xa8>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f5      	bne.n	8001330 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2101      	movs	r1, #1
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f95a 	bl	8001604 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2115      	movs	r1, #21
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f97a 	bl	8001650 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	461c      	mov	r4, r3
 8001360:	f107 030c 	add.w	r3, r7, #12
 8001364:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	371c      	adds	r7, #28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd90      	pop	{r4, r7, pc}
 8001374:	080014b5 	.word	0x080014b5
 8001378:	080014ef 	.word	0x080014ef
 800137c:	20000540 	.word	0x20000540
 8001380:	20000230 	.word	0x20000230
 8001384:	40020800 	.word	0x40020800
 8001388:	20000231 	.word	0x20000231

0800138c <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	1d3c      	adds	r4, r7, #4
 8001394:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001398:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800139a:	f107 0214 	add.w	r2, r7, #20
 800139e:	1d38      	adds	r0, r7, #4
 80013a0:	2301      	movs	r3, #1
 80013a2:	2127      	movs	r1, #39	; 0x27
 80013a4:	f000 f8cb 	bl	800153e <lps22hh_read_reg>

	if (reg.status.p_da) {
 80013a8:	7d3b      	ldrb	r3, [r7, #20]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d011      	beq.n	80013d8 <get_pressure+0x4c>
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <get_pressure+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4908      	ldr	r1, [pc, #32]	; (80013e0 <get_pressure+0x54>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f994 	bl	80016ec <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <get_pressure+0x54>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f8e9 	bl	80015a0 <lps22hh_from_lsb_to_hpa>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	2000022c 	.word	0x2000022c

080013e4 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b087      	sub	sp, #28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	1d3c      	adds	r4, r7, #4
 80013ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80013f0:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80013f2:	f107 0214 	add.w	r2, r7, #20
 80013f6:	1d38      	adds	r0, r7, #4
 80013f8:	2301      	movs	r3, #1
 80013fa:	2127      	movs	r1, #39	; 0x27
 80013fc:	f000 f89f 	bl	800153e <lps22hh_read_reg>

	if (reg.status.t_da) {
 8001400:	7d3b      	ldrb	r3, [r7, #20]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d012      	beq.n	8001432 <get_temperature+0x4e>
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <get_temperature+0x58>)
 800140e:	2200      	movs	r2, #0
 8001410:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 8001412:	1d3b      	adds	r3, r7, #4
 8001414:	4909      	ldr	r1, [pc, #36]	; (800143c <get_temperature+0x58>)
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f991 	bl	800173e <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <get_temperature+0x58>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 f8d4 	bl	80015d0 <lps22hh_from_lsb_to_celsius>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001432:	bf00      	nop
 8001434:	371c      	adds	r7, #28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd90      	pop	{r4, r7, pc}
 800143a:	bf00      	nop
 800143c:	20000226 	.word	0x20000226

08001440 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af04      	add	r7, sp, #16
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	461a      	mov	r2, r3
 800144c:	460b      	mov	r3, r1
 800144e:	72fb      	strb	r3, [r7, #11]
 8001450:	4613      	mov	r3, r2
 8001452:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 8001454:	7afb      	ldrb	r3, [r7, #11]
 8001456:	b29a      	uxth	r2, r3
 8001458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145c:	9302      	str	r3, [sp, #8]
 800145e:	893b      	ldrh	r3, [r7, #8]
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2301      	movs	r3, #1
 8001468:	21d5      	movs	r1, #213	; 0xd5
 800146a:	68f8      	ldr	r0, [r7, #12]
 800146c:	f003 fd24 	bl	8004eb8 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af04      	add	r7, sp, #16
 8001480:	60f8      	str	r0, [r7, #12]
 8001482:	607a      	str	r2, [r7, #4]
 8001484:	461a      	mov	r2, r3
 8001486:	460b      	mov	r3, r1
 8001488:	72fb      	strb	r3, [r7, #11]
 800148a:	4613      	mov	r3, r2
 800148c:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 800148e:	7afb      	ldrb	r3, [r7, #11]
 8001490:	b29a      	uxth	r2, r3
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	893b      	ldrh	r3, [r7, #8]
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	21d5      	movs	r1, #213	; 0xd5
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f003 fe01 	bl	80050ac <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af04      	add	r7, sp, #16
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	461a      	mov	r2, r3
 80014c0:	460b      	mov	r3, r1
 80014c2:	72fb      	strb	r3, [r7, #11]
 80014c4:	4613      	mov	r3, r2
 80014c6:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 80014c8:	7afb      	ldrb	r3, [r7, #11]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	893b      	ldrh	r3, [r7, #8]
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	21b9      	movs	r1, #185	; 0xb9
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	f003 fcea 	bl	8004eb8 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b088      	sub	sp, #32
 80014f2:	af04      	add	r7, sp, #16
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	461a      	mov	r2, r3
 80014fa:	460b      	mov	r3, r1
 80014fc:	72fb      	strb	r3, [r7, #11]
 80014fe:	4613      	mov	r3, r2
 8001500:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	b29a      	uxth	r2, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	893b      	ldrh	r3, [r7, #8]
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	21b9      	movs	r1, #185	; 0xb9
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f003 fdc7 	bl	80050ac <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f002 fc27 	bl	8003d84 <HAL_Delay>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800153e:	b590      	push	{r4, r7, lr}
 8001540:	b087      	sub	sp, #28
 8001542:	af00      	add	r7, sp, #0
 8001544:	60f8      	str	r0, [r7, #12]
 8001546:	607a      	str	r2, [r7, #4]
 8001548:	461a      	mov	r2, r3
 800154a:	460b      	mov	r3, r1
 800154c:	72fb      	strb	r3, [r7, #11]
 800154e:	4613      	mov	r3, r2
 8001550:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	685c      	ldr	r4, [r3, #4]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6898      	ldr	r0, [r3, #8]
 800155a:	893b      	ldrh	r3, [r7, #8]
 800155c:	7af9      	ldrb	r1, [r7, #11]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	47a0      	blx	r4
 8001562:	6178      	str	r0, [r7, #20]

  return ret;
 8001564:	697b      	ldr	r3, [r7, #20]
}
 8001566:	4618      	mov	r0, r3
 8001568:	371c      	adds	r7, #28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd90      	pop	{r4, r7, pc}

0800156e <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800156e:	b590      	push	{r4, r7, lr}
 8001570:	b087      	sub	sp, #28
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	461a      	mov	r2, r3
 800157a:	460b      	mov	r3, r1
 800157c:	72fb      	strb	r3, [r7, #11]
 800157e:	4613      	mov	r3, r2
 8001580:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681c      	ldr	r4, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6898      	ldr	r0, [r3, #8]
 800158a:	893b      	ldrh	r3, [r7, #8]
 800158c:	7af9      	ldrb	r1, [r7, #11]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	47a0      	blx	r4
 8001592:	6178      	str	r0, [r7, #20]

  return ret;
 8001594:	697b      	ldr	r3, [r7, #20]
}
 8001596:	4618      	mov	r0, r3
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}
	...

080015a0 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80015cc <lps22hh_from_lsb_to_hpa+0x2c>
 80015b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ba:	eef0 7a66 	vmov.f32	s15, s13
}
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	49800000 	.word	0x49800000

080015d0 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001600 <lps22hh_from_lsb_to_celsius+0x30>
 80015ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015ee:	eef0 7a66 	vmov.f32	s15, s13
}
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	42c80000 	.word	0x42c80000

08001604 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001610:	f107 0208 	add.w	r2, r7, #8
 8001614:	2301      	movs	r3, #1
 8001616:	2110      	movs	r1, #16
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff90 	bl	800153e <lps22hh_read_reg>
 800161e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	7a3b      	ldrb	r3, [r7, #8]
 8001630:	f362 0341 	bfi	r3, r2, #1, #1
 8001634:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001636:	f107 0208 	add.w	r2, r7, #8
 800163a:	2301      	movs	r3, #1
 800163c:	2110      	movs	r1, #16
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff ff95 	bl	800156e <lps22hh_write_reg>
 8001644:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800165c:	f107 0210 	add.w	r2, r7, #16
 8001660:	2301      	movs	r3, #1
 8001662:	2110      	movs	r1, #16
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff6a 	bl	800153e <lps22hh_read_reg>
 800166a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d107      	bne.n	8001682 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001672:	f107 020c 	add.w	r2, r7, #12
 8001676:	2301      	movs	r3, #1
 8001678:	2111      	movs	r1, #17
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ff5f 	bl	800153e <lps22hh_read_reg>
 8001680:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10f      	bne.n	80016a8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8001688:	78fb      	ldrb	r3, [r7, #3]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	b2da      	uxtb	r2, r3
 8001690:	7c3b      	ldrb	r3, [r7, #16]
 8001692:	f362 1306 	bfi	r3, r2, #4, #3
 8001696:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001698:	f107 0210 	add.w	r2, r7, #16
 800169c:	2301      	movs	r3, #1
 800169e:	2110      	movs	r1, #16
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff64 	bl	800156e <lps22hh_write_reg>
 80016a6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d119      	bne.n	80016e2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80016ae:	78fb      	ldrb	r3, [r7, #3]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	7b3b      	ldrb	r3, [r7, #12]
 80016ba:	f362 0341 	bfi	r3, r2, #1, #1
 80016be:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	08db      	lsrs	r3, r3, #3
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	7b3b      	ldrb	r3, [r7, #12]
 80016cc:	f362 0300 	bfi	r3, r2, #0, #1
 80016d0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80016d2:	f107 020c 	add.w	r2, r7, #12
 80016d6:	2301      	movs	r3, #1
 80016d8:	2111      	movs	r1, #17
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff47 	bl	800156e <lps22hh_write_reg>
 80016e0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80016e2:	697b      	ldr	r3, [r7, #20]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80016f6:	f107 0208 	add.w	r2, r7, #8
 80016fa:	2303      	movs	r3, #3
 80016fc:	2128      	movs	r1, #40	; 0x28
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff ff1d 	bl	800153e <lps22hh_read_reg>
 8001704:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8001706:	7abb      	ldrb	r3, [r7, #10]
 8001708:	461a      	mov	r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	7a7a      	ldrb	r2, [r7, #9]
 8001716:	441a      	add	r2, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	7a3a      	ldrb	r2, [r7, #8]
 8001724:	441a      	add	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	021a      	lsls	r2, r3, #8
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	601a      	str	r2, [r3, #0]

  return ret;
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8001748:	f107 0208 	add.w	r2, r7, #8
 800174c:	2302      	movs	r3, #2
 800174e:	212b      	movs	r1, #43	; 0x2b
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff fef4 	bl	800153e <lps22hh_read_reg>
 8001756:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 8001758:	7a7b      	ldrb	r3, [r7, #9]
 800175a:	b21a      	sxth	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001766:	b29b      	uxth	r3, r3
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b29a      	uxth	r2, r3
 800176c:	7a3b      	ldrb	r3, [r7, #8]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	b21a      	sxth	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	801a      	strh	r2, [r3, #0]

  return ret;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	4618      	mov	r0, r3
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800178e:	2301      	movs	r3, #1
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	210f      	movs	r1, #15
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fed2 	bl	800153e <lps22hh_read_reg>
 800179a:	60f8      	str	r0, [r7, #12]

  return ret;
 800179c:	68fb      	ldr	r3, [r7, #12]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b084      	sub	sp, #16
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80017b2:	f107 0208 	add.w	r2, r7, #8
 80017b6:	2301      	movs	r3, #1
 80017b8:	2111      	movs	r1, #17
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff febf 	bl	800153e <lps22hh_read_reg>
 80017c0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10f      	bne.n	80017e8 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	7a3b      	ldrb	r3, [r7, #8]
 80017d2:	f362 0382 	bfi	r3, r2, #2, #1
 80017d6:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80017d8:	f107 0208 	add.w	r2, r7, #8
 80017dc:	2301      	movs	r3, #1
 80017de:	2111      	movs	r1, #17
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff fec4 	bl	800156e <lps22hh_write_reg>
 80017e6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b084      	sub	sp, #16
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80017fc:	f107 0208 	add.w	r2, r7, #8
 8001800:	2301      	movs	r3, #1
 8001802:	2111      	movs	r1, #17
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fe9a 	bl	800153e <lps22hh_read_reg>
 800180a:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800180c:	7a3b      	ldrb	r3, [r7, #8]
 800180e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001812:	b2db      	uxtb	r3, r3
 8001814:	461a      	mov	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	701a      	strb	r2, [r3, #0]

  return ret;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	461a      	mov	r2, r3
 8001830:	460b      	mov	r3, r1
 8001832:	72fb      	strb	r3, [r7, #11]
 8001834:	4613      	mov	r3, r2
 8001836:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685c      	ldr	r4, [r3, #4]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6898      	ldr	r0, [r3, #8]
 8001840:	893b      	ldrh	r3, [r7, #8]
 8001842:	7af9      	ldrb	r1, [r7, #11]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	47a0      	blx	r4
 8001848:	6178      	str	r0, [r7, #20]

  return ret;
 800184a:	697b      	ldr	r3, [r7, #20]
}
 800184c:	4618      	mov	r0, r3
 800184e:	371c      	adds	r7, #28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd90      	pop	{r4, r7, pc}

08001854 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	72fb      	strb	r3, [r7, #11]
 8001864:	4613      	mov	r3, r2
 8001866:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681c      	ldr	r4, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6898      	ldr	r0, [r3, #8]
 8001870:	893b      	ldrh	r3, [r7, #8]
 8001872:	7af9      	ldrb	r1, [r7, #11]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	47a0      	blx	r4
 8001878:	6178      	str	r0, [r7, #20]

  return ret;
 800187a:	697b      	ldr	r3, [r7, #20]
}
 800187c:	4618      	mov	r0, r3
 800187e:	371c      	adds	r7, #28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd90      	pop	{r4, r7, pc}

08001884 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 800188e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800189a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018b0 <lsm6dsl_from_fs8g_to_mg+0x2c>
 800189e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018a2:	eeb0 0a67 	vmov.f32	s0, s15
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	3e79db23 	.word	0x3e79db23

080018b4 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	ee07 3a90 	vmov	s15, r3
 80018c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80018e0 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 80018ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80018d2:	eeb0 0a67 	vmov.f32	s0, s15
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	428c0000 	.word	0x428c0000

080018e4 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80018f0:	f107 0208 	add.w	r2, r7, #8
 80018f4:	2301      	movs	r3, #1
 80018f6:	2110      	movs	r1, #16
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff93 	bl	8001824 <lsm6dsl_read_reg>
 80018fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10f      	bne.n	8001926 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	7a3b      	ldrb	r3, [r7, #8]
 8001910:	f362 0383 	bfi	r3, r2, #2, #2
 8001914:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001916:	f107 0208 	add.w	r2, r7, #8
 800191a:	2301      	movs	r3, #1
 800191c:	2110      	movs	r1, #16
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ff98 	bl	8001854 <lsm6dsl_write_reg>
 8001924:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800193c:	f107 0208 	add.w	r2, r7, #8
 8001940:	2301      	movs	r3, #1
 8001942:	2110      	movs	r1, #16
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff6d 	bl	8001824 <lsm6dsl_read_reg>
 800194a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10f      	bne.n	8001972 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	b2da      	uxtb	r2, r3
 800195a:	7a3b      	ldrb	r3, [r7, #8]
 800195c:	f362 1307 	bfi	r3, r2, #4, #4
 8001960:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001962:	f107 0208 	add.w	r2, r7, #8
 8001966:	2301      	movs	r3, #1
 8001968:	2110      	movs	r1, #16
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ff72 	bl	8001854 <lsm6dsl_write_reg>
 8001970:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001972:	68fb      	ldr	r3, [r7, #12]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001988:	f107 0208 	add.w	r2, r7, #8
 800198c:	2301      	movs	r3, #1
 800198e:	2111      	movs	r1, #17
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff47 	bl	8001824 <lsm6dsl_read_reg>
 8001996:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10f      	bne.n	80019be <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	7a3b      	ldrb	r3, [r7, #8]
 80019a8:	f362 0343 	bfi	r3, r2, #1, #3
 80019ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80019ae:	f107 0208 	add.w	r2, r7, #8
 80019b2:	2301      	movs	r3, #1
 80019b4:	2111      	movs	r1, #17
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff4c 	bl	8001854 <lsm6dsl_write_reg>
 80019bc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80019d4:	f107 0208 	add.w	r2, r7, #8
 80019d8:	2301      	movs	r3, #1
 80019da:	2111      	movs	r1, #17
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff21 	bl	8001824 <lsm6dsl_read_reg>
 80019e2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d10f      	bne.n	8001a0a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80019ea:	78fb      	ldrb	r3, [r7, #3]
 80019ec:	f003 030f 	and.w	r3, r3, #15
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	7a3b      	ldrb	r3, [r7, #8]
 80019f4:	f362 1307 	bfi	r3, r2, #4, #4
 80019f8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80019fa:	f107 0208 	add.w	r2, r7, #8
 80019fe:	2301      	movs	r3, #1
 8001a00:	2111      	movs	r1, #17
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff26 	bl	8001854 <lsm6dsl_write_reg>
 8001a08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001a20:	f107 0208 	add.w	r2, r7, #8
 8001a24:	2301      	movs	r3, #1
 8001a26:	2112      	movs	r1, #18
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff fefb 	bl	8001824 <lsm6dsl_read_reg>
 8001a2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10f      	bne.n	8001a56 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	7a3b      	ldrb	r3, [r7, #8]
 8001a40:	f362 1386 	bfi	r3, r2, #6, #1
 8001a44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001a46:	f107 0208 	add.w	r2, r7, #8
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2112      	movs	r1, #18
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f7ff ff00 	bl	8001854 <lsm6dsl_write_reg>
 8001a54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001a6a:	f107 0208 	add.w	r2, r7, #8
 8001a6e:	2301      	movs	r3, #1
 8001a70:	211e      	movs	r1, #30
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fed6 	bl	8001824 <lsm6dsl_read_reg>
 8001a78:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8001a7a:	7a3b      	ldrb	r3, [r7, #8]
 8001a7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	701a      	strb	r2, [r3, #0]

  return ret;
 8001a88:	68fb      	ldr	r3, [r7, #12]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b084      	sub	sp, #16
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8001a9c:	f107 0208 	add.w	r2, r7, #8
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	211e      	movs	r1, #30
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff febd 	bl	8001824 <lsm6dsl_read_reg>
 8001aaa:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8001aac:	7a3b      	ldrb	r3, [r7, #8]
 8001aae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	701a      	strb	r2, [r3, #0]

  return ret;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8001ace:	f107 020c 	add.w	r2, r7, #12
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	2122      	movs	r1, #34	; 0x22
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff fea4 	bl	8001824 <lsm6dsl_read_reg>
 8001adc:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001ade:	7b7b      	ldrb	r3, [r7, #13]
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	7b3b      	ldrb	r3, [r7, #12]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3302      	adds	r3, #2
 8001b06:	b212      	sxth	r2, r2
 8001b08:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	7bbb      	ldrb	r3, [r7, #14]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	3302      	adds	r3, #2
 8001b24:	b212      	sxth	r2, r2
 8001b26:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001b28:	7c7a      	ldrb	r2, [r7, #17]
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	b212      	sxth	r2, r2
 8001b30:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	3304      	adds	r3, #4
 8001b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	7c3b      	ldrb	r3, [r7, #16]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	4413      	add	r3, r2
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	b212      	sxth	r2, r2
 8001b4e:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b50:	697b      	ldr	r3, [r7, #20]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001b64:	f107 020c 	add.w	r2, r7, #12
 8001b68:	2306      	movs	r3, #6
 8001b6a:	2128      	movs	r1, #40	; 0x28
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fe59 	bl	8001824 <lsm6dsl_read_reg>
 8001b72:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001b74:	7b7b      	ldrb	r3, [r7, #13]
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	7b3b      	ldrb	r3, [r7, #12]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4413      	add	r3, r2
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	b212      	sxth	r2, r2
 8001b9e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	7bbb      	ldrb	r3, [r7, #14]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	3302      	adds	r3, #2
 8001bba:	b212      	sxth	r2, r2
 8001bbc:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001bbe:	7c7a      	ldrb	r2, [r7, #17]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	b212      	sxth	r2, r2
 8001bc6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	7c3b      	ldrb	r3, [r7, #16]
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	4413      	add	r3, r2
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	3304      	adds	r3, #4
 8001be2:	b212      	sxth	r2, r2
 8001be4:	801a      	strh	r2, [r3, #0]

  return ret;
 8001be6:	697b      	ldr	r3, [r7, #20]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3718      	adds	r7, #24
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	210f      	movs	r1, #15
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fe0f 	bl	8001824 <lsm6dsl_read_reg>
 8001c06:	60f8      	str	r0, [r7, #12]

  return ret;
 8001c08:	68fb      	ldr	r3, [r7, #12]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b084      	sub	sp, #16
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c1e:	f107 0208 	add.w	r2, r7, #8
 8001c22:	2301      	movs	r3, #1
 8001c24:	2112      	movs	r1, #18
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fdfc 	bl	8001824 <lsm6dsl_read_reg>
 8001c2c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10f      	bne.n	8001c54 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	7a3b      	ldrb	r3, [r7, #8]
 8001c3e:	f362 0300 	bfi	r3, r2, #0, #1
 8001c42:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c44:	f107 0208 	add.w	r2, r7, #8
 8001c48:	2301      	movs	r3, #1
 8001c4a:	2112      	movs	r1, #18
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff fe01 	bl	8001854 <lsm6dsl_write_reg>
 8001c52:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c54:	68fb      	ldr	r3, [r7, #12]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c68:	f107 0208 	add.w	r2, r7, #8
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	2112      	movs	r1, #18
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff fdd7 	bl	8001824 <lsm6dsl_read_reg>
 8001c76:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001c78:	7a3b      	ldrb	r3, [r7, #8]
 8001c7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001c9c:	f107 0208 	add.w	r2, r7, #8
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	2117      	movs	r1, #23
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fdbd 	bl	8001824 <lsm6dsl_read_reg>
 8001caa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d120      	bne.n	8001cf4 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	7a3b      	ldrb	r3, [r7, #8]
 8001cbe:	f362 03c3 	bfi	r3, r2, #3, #1
 8001cc2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	7a3b      	ldrb	r3, [r7, #8]
 8001cce:	f362 1346 	bfi	r3, r2, #5, #2
 8001cd2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001cd4:	7a3b      	ldrb	r3, [r7, #8]
 8001cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cda:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001cdc:	7a3b      	ldrb	r3, [r7, #8]
 8001cde:	f36f 0382 	bfc	r3, #2, #1
 8001ce2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001ce4:	f107 0208 	add.w	r2, r7, #8
 8001ce8:	2301      	movs	r3, #1
 8001cea:	2117      	movs	r1, #23
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fdb1 	bl	8001854 <lsm6dsl_write_reg>
 8001cf2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001d0a:	f107 0208 	add.w	r2, r7, #8
 8001d0e:	2301      	movs	r3, #1
 8001d10:	2116      	movs	r1, #22
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fd86 	bl	8001824 <lsm6dsl_read_reg>
 8001d18:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d157      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	7a3b      	ldrb	r3, [r7, #8]
 8001d2c:	f362 1305 	bfi	r3, r2, #4, #2
 8001d30:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	09db      	lsrs	r3, r3, #7
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	7a3b      	ldrb	r3, [r7, #8]
 8001d40:	f362 1386 	bfi	r3, r2, #6, #1
 8001d44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001d46:	f107 0208 	add.w	r2, r7, #8
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	2116      	movs	r1, #22
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff fd80 	bl	8001854 <lsm6dsl_write_reg>
 8001d54:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d139      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001d5c:	f107 020c 	add.w	r2, r7, #12
 8001d60:	2301      	movs	r3, #1
 8001d62:	2115      	movs	r1, #21
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff fd5d 	bl	8001824 <lsm6dsl_read_reg>
 8001d6a:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d12e      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	7b3b      	ldrb	r3, [r7, #12]
 8001d7c:	f362 0301 	bfi	r3, r2, #0, #2
 8001d80:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001d82:	f107 020c 	add.w	r2, r7, #12
 8001d86:	2301      	movs	r3, #1
 8001d88:	2115      	movs	r1, #21
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff fd62 	bl	8001854 <lsm6dsl_write_reg>
 8001d90:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11b      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001d98:	f107 0210 	add.w	r2, r7, #16
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2113      	movs	r1, #19
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff fd3f 	bl	8001824 <lsm6dsl_read_reg>
 8001da6:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d110      	bne.n	8001dd0 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	08db      	lsrs	r3, r3, #3
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	7c3b      	ldrb	r3, [r7, #16]
 8001dba:	f362 0341 	bfi	r3, r2, #1, #1
 8001dbe:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8001dc0:	f107 0210 	add.w	r2, r7, #16
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	2113      	movs	r1, #19
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff fd43 	bl	8001854 <lsm6dsl_write_reg>
 8001dce:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001dd0:	697b      	ldr	r3, [r7, #20]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <tone>:
	#endif
}
#endif

// helper functions for buzzing
void tone(uint32_t duration, uint32_t repeats) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
 8001dea:	e010      	b.n	8001e0e <tone+0x32>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001dec:	2108      	movs	r1, #8
 8001dee:	480c      	ldr	r0, [pc, #48]	; (8001e20 <tone+0x44>)
 8001df0:	f005 fda6 	bl	8007940 <HAL_TIM_PWM_Start>
		HAL_Delay(duration);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f001 ffc5 	bl	8003d84 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	4808      	ldr	r0, [pc, #32]	; (8001e20 <tone+0x44>)
 8001dfe:	f005 fddd 	bl	80079bc <HAL_TIM_PWM_Stop>
		HAL_Delay(duration);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f001 ffbe 	bl	8003d84 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d3ea      	bcc.n	8001dec <tone+0x10>
	}
}
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000ca0 	.word	0x20000ca0

08001e24 <buzz_success>:
void buzz_success() { tone(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS); };
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	2101      	movs	r1, #1
 8001e2a:	2032      	movs	r0, #50	; 0x32
 8001e2c:	f7ff ffd6 	bl	8001ddc <tone>
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <buzz_failure>:
void buzz_failure() { tone(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS); };
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	2101      	movs	r1, #1
 8001e3a:	2064      	movs	r0, #100	; 0x64
 8001e3c:	f7ff ffce 	bl	8001ddc <tone>
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e4a:	f001 ff29 	bl	8003ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4e:	f000 f8d7 	bl	8002000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e52:	f000 fcad 	bl	80027b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e56:	f000 f95b 	bl	8002110 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e5a:	f000 f9ab 	bl	80021b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e5e:	f000 f9e9 	bl	8002234 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001e62:	f000 fa27 	bl	80022b4 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001e66:	f000 fabf 	bl	80023e8 <MX_SPI2_Init>
  MX_SPI4_Init();
 8001e6a:	f000 faf3 	bl	8002454 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001e6e:	f000 fb27 	bl	80024c0 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001e72:	f000 fb5b 	bl	800252c <MX_TIM2_Init>
  MX_UART8_Init();
 8001e76:	f000 fc1d 	bl	80026b4 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001e7a:	f000 fc45 	bl	8002708 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001e7e:	f000 fc6d 	bl	800275c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001e82:	f007 fb59 	bl	8009538 <MX_FATFS_Init>
  MX_RTC_Init();
 8001e86:	f000 fa55 	bl	8002334 <MX_RTC_Init>
  MX_TIM4_Init();
 8001e8a:	f000 fbc5 	bl	8002618 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2102      	movs	r1, #2
 8001e92:	484e      	ldr	r0, [pc, #312]	; (8001fcc <main+0x188>)
 8001e94:	f002 fe8e 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	484b      	ldr	r0, [pc, #300]	; (8001fcc <main+0x188>)
 8001e9e:	f002 fe89 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2108      	movs	r1, #8
 8001ea6:	4849      	ldr	r0, [pc, #292]	; (8001fcc <main+0x188>)
 8001ea8:	f002 fe84 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2108      	movs	r1, #8
 8001eb0:	4847      	ldr	r0, [pc, #284]	; (8001fd0 <main+0x18c>)
 8001eb2:	f002 fe7f 	bl	8004bb4 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ebc:	4845      	ldr	r0, [pc, #276]	; (8001fd4 <main+0x190>)
 8001ebe:	f002 fe79 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ec8:	4842      	ldr	r0, [pc, #264]	; (8001fd4 <main+0x190>)
 8001eca:	f002 fe73 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed4:	483f      	ldr	r0, [pc, #252]	; (8001fd4 <main+0x190>)
 8001ed6:	f002 fe6d 	bl	8004bb4 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2102      	movs	r1, #2
 8001ede:	483d      	ldr	r0, [pc, #244]	; (8001fd4 <main+0x190>)
 8001ee0:	f002 fe68 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eea:	483b      	ldr	r0, [pc, #236]	; (8001fd8 <main+0x194>)
 8001eec:	f002 fe62 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ef6:	4838      	ldr	r0, [pc, #224]	; (8001fd8 <main+0x194>)
 8001ef8:	f002 fe5c 	bl	8004bb4 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2104      	movs	r1, #4
 8001f00:	4836      	ldr	r0, [pc, #216]	; (8001fdc <main+0x198>)
 8001f02:	f002 fe57 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	4834      	ldr	r0, [pc, #208]	; (8001fdc <main+0x198>)
 8001f0c:	f002 fe52 	bl	8004bb4 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f16:	4831      	ldr	r0, [pc, #196]	; (8001fdc <main+0x198>)
 8001f18:	f002 fe4c 	bl	8004bb4 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high (SPI idle CS is high)
  HAL_GPIO_WritePin(TH_CS_GPIO_Port, TH_CS_Pin, SET);
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f22:	482e      	ldr	r0, [pc, #184]	; (8001fdc <main+0x198>)
 8001f24:	f002 fe46 	bl	8004bb4 <HAL_GPIO_WritePin>

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f2e:	4829      	ldr	r0, [pc, #164]	; (8001fd4 <main+0x190>)
 8001f30:	f002 fe40 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	4829      	ldr	r0, [pc, #164]	; (8001fe0 <main+0x19c>)
 8001f3a:	f002 fe3b 	bl	8004bb4 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2140      	movs	r1, #64	; 0x40
 8001f42:	4827      	ldr	r0, [pc, #156]	; (8001fe0 <main+0x19c>)
 8001f44:	f002 fe36 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 8001f48:	2201      	movs	r2, #1
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	4824      	ldr	r0, [pc, #144]	; (8001fe0 <main+0x19c>)
 8001f4e:	f002 fe31 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	2110      	movs	r1, #16
 8001f56:	4822      	ldr	r0, [pc, #136]	; (8001fe0 <main+0x19c>)
 8001f58:	f002 fe2c 	bl	8004bb4 <HAL_GPIO_WritePin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
  Tx_setup();
#endif

  // init i2c sensors and data storage
  dev_ctx_lsm = lsm6dsl_init();
 8001f5c:	4c21      	ldr	r4, [pc, #132]	; (8001fe4 <main+0x1a0>)
 8001f5e:	463b      	mov	r3, r7
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff f8c1 	bl	80010e8 <lsm6dsl_init>
 8001f66:	463b      	mov	r3, r7
 8001f68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8001f70:	f7ff ff58 	bl	8001e24 <buzz_success>
  HAL_Delay(500);
 8001f74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f78:	f001 ff04 	bl	8003d84 <HAL_Delay>

  dev_ctx_lps = lps22hh_init();
 8001f7c:	4c1a      	ldr	r4, [pc, #104]	; (8001fe8 <main+0x1a4>)
 8001f7e:	463b      	mov	r3, r7
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff f9ad 	bl	80012e0 <lps22hh_init>
 8001f86:	463b      	mov	r3, r7
 8001f88:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8001f90:	f7ff ff48 	bl	8001e24 <buzz_success>
  HAL_Delay(500);
 8001f94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f98:	f001 fef4 	bl	8003d84 <HAL_Delay>

  // init FLASH
//  if (!W25qxx_Init()) Error_Handler();
  buzz_success();
 8001f9c:	f7ff ff42 	bl	8001e24 <buzz_success>

  // init sd card with dynamic filename
  fres = sd_init_dynamic_filename("FC", sd_file_header, filename);
 8001fa0:	4a12      	ldr	r2, [pc, #72]	; (8001fec <main+0x1a8>)
 8001fa2:	4913      	ldr	r1, [pc, #76]	; (8001ff0 <main+0x1ac>)
 8001fa4:	4813      	ldr	r0, [pc, #76]	; (8001ff4 <main+0x1b0>)
 8001fa6:	f000 ffbb 	bl	8002f20 <sd_init_dynamic_filename>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <main+0x1b4>)
 8001fb0:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8001fb2:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <main+0x1b4>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <main+0x17a>
  		Error_Handler();
 8001fba:	f000 ff8b 	bl	8002ed4 <Error_Handler>
//  int save_flash = save_flash_to_sd(); // check if flash empty and write to sd card if not
//  if (save_flash) {
//	  buzz_failure();
//  }

  VR_Power_On();
 8001fbe:	f001 fe39 	bl	8003c34 <VR_Power_On>
  // send message with Iridium
//  MRT_Static_Iridium_sendMessage("message");
//  MRT_Static_Iridium_Shutdown();

  // init is done, can start timer 4 in interrupt mode for telemetry
  HAL_TIM_Base_Start_IT(&htim4);
 8001fc2:	480e      	ldr	r0, [pc, #56]	; (8001ffc <main+0x1b8>)
 8001fc4:	f005 fc63 	bl	800788e <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <main+0x184>
 8001fca:	bf00      	nop
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40020000 	.word	0x40020000
 8001fd4:	40021800 	.word	0x40021800
 8001fd8:	40021400 	.word	0x40021400
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	20000ce0 	.word	0x20000ce0
 8001fe8:	20000cec 	.word	0x20000cec
 8001fec:	20000374 	.word	0x20000374
 8001ff0:	080115b8 	.word	0x080115b8
 8001ff4:	080113e0 	.word	0x080113e0
 8001ff8:	20000cf8 	.word	0x20000cf8
 8001ffc:	20000644 	.word	0x20000644

08002000 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b0a0      	sub	sp, #128	; 0x80
 8002004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002006:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800200a:	2230      	movs	r2, #48	; 0x30
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f00a fd7a 	bl	800cb08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002014:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2230      	movs	r2, #48	; 0x30
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f00a fd6b 	bl	800cb08 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b34      	ldr	r3, [pc, #208]	; (8002108 <SystemClock_Config+0x108>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a33      	ldr	r2, [pc, #204]	; (8002108 <SystemClock_Config+0x108>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <SystemClock_Config+0x108>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	4b2e      	ldr	r3, [pc, #184]	; (800210c <SystemClock_Config+0x10c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2d      	ldr	r2, [pc, #180]	; (800210c <SystemClock_Config+0x10c>)
 8002058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b2b      	ldr	r3, [pc, #172]	; (800210c <SystemClock_Config+0x10c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800206a:	2309      	movs	r3, #9
 800206c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800206e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002072:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002074:	2301      	movs	r3, #1
 8002076:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002078:	2302      	movs	r3, #2
 800207a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800207c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002080:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002082:	2308      	movs	r3, #8
 8002084:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002086:	23b4      	movs	r3, #180	; 0xb4
 8002088:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800208a:	2302      	movs	r3, #2
 800208c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800208e:	2304      	movs	r3, #4
 8002090:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002092:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002096:	4618      	mov	r0, r3
 8002098:	f003 fe54 	bl	8005d44 <HAL_RCC_OscConfig>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80020a2:	f000 ff17 	bl	8002ed4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80020a6:	f003 fdfd 	bl	8005ca4 <HAL_PWREx_EnableOverDrive>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80020b0:	f000 ff10 	bl	8002ed4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b4:	230f      	movs	r3, #15
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b8:	2302      	movs	r3, #2
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020bc:	2300      	movs	r3, #0
 80020be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80020c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ca:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020d0:	2105      	movs	r1, #5
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 f8a6 	bl	8006224 <HAL_RCC_ClockConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80020de:	f000 fef9 	bl	8002ed4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020e2:	2320      	movs	r3, #32
 80020e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 fa91 	bl	8006618 <HAL_RCCEx_PeriphCLKConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80020fc:	f000 feea 	bl	8002ed4 <Error_Handler>
  }
}
 8002100:	bf00      	nop
 8002102:	3780      	adds	r7, #128	; 0x80
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	40007000 	.word	0x40007000

08002110 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002116:	463b      	mov	r3, r7
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <MX_ADC1_Init+0x98>)
 8002124:	4a21      	ldr	r2, [pc, #132]	; (80021ac <MX_ADC1_Init+0x9c>)
 8002126:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <MX_ADC1_Init+0x98>)
 800212a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800212e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <MX_ADC1_Init+0x98>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <MX_ADC1_Init+0x98>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_ADC1_Init+0x98>)
 800213e:	2200      	movs	r2, #0
 8002140:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_ADC1_Init+0x98>)
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_ADC1_Init+0x98>)
 800214c:	2200      	movs	r2, #0
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <MX_ADC1_Init+0x98>)
 8002152:	4a17      	ldr	r2, [pc, #92]	; (80021b0 <MX_ADC1_Init+0xa0>)
 8002154:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_ADC1_Init+0x98>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <MX_ADC1_Init+0x98>)
 800215e:	2201      	movs	r2, #1
 8002160:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_ADC1_Init+0x98>)
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <MX_ADC1_Init+0x98>)
 800216c:	2201      	movs	r2, #1
 800216e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002170:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_ADC1_Init+0x98>)
 8002172:	f001 fe2b 	bl	8003dcc <HAL_ADC_Init>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800217c:	f000 feaa 	bl	8002ed4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002180:	2306      	movs	r3, #6
 8002182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002184:	2301      	movs	r3, #1
 8002186:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002188:	2307      	movs	r3, #7
 800218a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_ADC1_Init+0x98>)
 8002192:	f001 ffe9 	bl	8004168 <HAL_ADC_ConfigChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800219c:	f000 fe9a 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2000099c 	.word	0x2000099c
 80021ac:	40012000 	.word	0x40012000
 80021b0:	0f000001 	.word	0x0f000001

080021b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021b8:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <MX_I2C1_Init+0x74>)
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <MX_I2C1_Init+0x78>)
 80021bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021be:	4b1a      	ldr	r3, [pc, #104]	; (8002228 <MX_I2C1_Init+0x74>)
 80021c0:	4a1b      	ldr	r2, [pc, #108]	; (8002230 <MX_I2C1_Init+0x7c>)
 80021c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <MX_I2C1_Init+0x74>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021ca:	4b17      	ldr	r3, [pc, #92]	; (8002228 <MX_I2C1_Init+0x74>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <MX_I2C1_Init+0x74>)
 80021d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <MX_I2C1_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <MX_I2C1_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021e4:	4b10      	ldr	r3, [pc, #64]	; (8002228 <MX_I2C1_Init+0x74>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <MX_I2C1_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021f0:	480d      	ldr	r0, [pc, #52]	; (8002228 <MX_I2C1_Init+0x74>)
 80021f2:	f002 fd1d 	bl	8004c30 <HAL_I2C_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021fc:	f000 fe6a 	bl	8002ed4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002200:	2100      	movs	r1, #0
 8002202:	4809      	ldr	r0, [pc, #36]	; (8002228 <MX_I2C1_Init+0x74>)
 8002204:	f003 fcd3 	bl	8005bae <HAL_I2CEx_ConfigAnalogFilter>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800220e:	f000 fe61 	bl	8002ed4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002212:	2100      	movs	r1, #0
 8002214:	4804      	ldr	r0, [pc, #16]	; (8002228 <MX_I2C1_Init+0x74>)
 8002216:	f003 fd06 	bl	8005c26 <HAL_I2CEx_ConfigDigitalFilter>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002220:	f000 fe58 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200008f4 	.word	0x200008f4
 800222c:	40005400 	.word	0x40005400
 8002230:	000186a0 	.word	0x000186a0

08002234 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <MX_I2C2_Init+0x74>)
 800223a:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <MX_I2C2_Init+0x78>)
 800223c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <MX_I2C2_Init+0x74>)
 8002240:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <MX_I2C2_Init+0x7c>)
 8002242:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <MX_I2C2_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <MX_I2C2_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <MX_I2C2_Init+0x74>)
 8002252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002256:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <MX_I2C2_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800225e:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <MX_I2C2_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002264:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <MX_I2C2_Init+0x74>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <MX_I2C2_Init+0x74>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002270:	480d      	ldr	r0, [pc, #52]	; (80022a8 <MX_I2C2_Init+0x74>)
 8002272:	f002 fcdd 	bl	8004c30 <HAL_I2C_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800227c:	f000 fe2a 	bl	8002ed4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002280:	2100      	movs	r1, #0
 8002282:	4809      	ldr	r0, [pc, #36]	; (80022a8 <MX_I2C2_Init+0x74>)
 8002284:	f003 fc93 	bl	8005bae <HAL_I2CEx_ConfigAnalogFilter>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800228e:	f000 fe21 	bl	8002ed4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002292:	2100      	movs	r1, #0
 8002294:	4804      	ldr	r0, [pc, #16]	; (80022a8 <MX_I2C2_Init+0x74>)
 8002296:	f003 fcc6 	bl	8005c26 <HAL_I2CEx_ConfigDigitalFilter>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80022a0:	f000 fe18 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000948 	.word	0x20000948
 80022ac:	40005800 	.word	0x40005800
 80022b0:	000186a0 	.word	0x000186a0

080022b4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <MX_I2C3_Init+0x74>)
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <MX_I2C3_Init+0x78>)
 80022bc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <MX_I2C3_Init+0x74>)
 80022c0:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <MX_I2C3_Init+0x7c>)
 80022c2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022c4:	4b18      	ldr	r3, [pc, #96]	; (8002328 <MX_I2C3_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <MX_I2C3_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <MX_I2C3_Init+0x74>)
 80022d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022d6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <MX_I2C3_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <MX_I2C3_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <MX_I2C3_Init+0x74>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <MX_I2C3_Init+0x74>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80022f0:	480d      	ldr	r0, [pc, #52]	; (8002328 <MX_I2C3_Init+0x74>)
 80022f2:	f002 fc9d 	bl	8004c30 <HAL_I2C_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80022fc:	f000 fdea 	bl	8002ed4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002300:	2100      	movs	r1, #0
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <MX_I2C3_Init+0x74>)
 8002304:	f003 fc53 	bl	8005bae <HAL_I2CEx_ConfigAnalogFilter>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800230e:	f000 fde1 	bl	8002ed4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002312:	2100      	movs	r1, #0
 8002314:	4804      	ldr	r0, [pc, #16]	; (8002328 <MX_I2C3_Init+0x74>)
 8002316:	f003 fc86 	bl	8005c26 <HAL_I2CEx_ConfigDigitalFilter>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002320:	f000 fdd8 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000540 	.word	0x20000540
 800232c:	40005c00 	.word	0x40005c00
 8002330:	000186a0 	.word	0x000186a0

08002334 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002348:	2300      	movs	r3, #0
 800234a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <MX_RTC_Init+0xac>)
 800234e:	4a25      	ldr	r2, [pc, #148]	; (80023e4 <MX_RTC_Init+0xb0>)
 8002350:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <MX_RTC_Init+0xac>)
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <MX_RTC_Init+0xac>)
 800235a:	227f      	movs	r2, #127	; 0x7f
 800235c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <MX_RTC_Init+0xac>)
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <MX_RTC_Init+0xac>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <MX_RTC_Init+0xac>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002370:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <MX_RTC_Init+0xac>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002376:	481a      	ldr	r0, [pc, #104]	; (80023e0 <MX_RTC_Init+0xac>)
 8002378:	f004 fb0c 	bl	8006994 <HAL_RTC_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002382:	f000 fda7 	bl	8002ed4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8002386:	2310      	movs	r3, #16
 8002388:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 800238a:	2320      	movs	r3, #32
 800238c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 800238e:	2330      	movs	r3, #48	; 0x30
 8002390:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	2201      	movs	r2, #1
 800239e:	4619      	mov	r1, r3
 80023a0:	480f      	ldr	r0, [pc, #60]	; (80023e0 <MX_RTC_Init+0xac>)
 80023a2:	f004 fb88 	bl	8006ab6 <HAL_RTC_SetTime>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80023ac:	f000 fd92 	bl	8002ed4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80023b0:	2301      	movs	r3, #1
 80023b2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80023b4:	2302      	movs	r3, #2
 80023b6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 80023b8:	2312      	movs	r3, #18
 80023ba:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80023bc:	2321      	movs	r3, #33	; 0x21
 80023be:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80023c0:	463b      	mov	r3, r7
 80023c2:	2201      	movs	r2, #1
 80023c4:	4619      	mov	r1, r3
 80023c6:	4806      	ldr	r0, [pc, #24]	; (80023e0 <MX_RTC_Init+0xac>)
 80023c8:	f004 fc90 	bl	8006cec <HAL_RTC_SetDate>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80023d2:	f000 fd7f 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000ae4 	.word	0x20000ae4
 80023e4:	40002800 	.word	0x40002800

080023e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_SPI2_Init+0x64>)
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <MX_SPI2_Init+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <MX_SPI2_Init+0x64>)
 80023f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <MX_SPI2_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <MX_SPI2_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <MX_SPI2_Init+0x64>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <MX_SPI2_Init+0x64>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_SPI2_Init+0x64>)
 8002414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002418:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_SPI2_Init+0x64>)
 800241c:	2228      	movs	r2, #40	; 0x28
 800241e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <MX_SPI2_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_SPI2_Init+0x64>)
 8002428:	2200      	movs	r2, #0
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <MX_SPI2_Init+0x64>)
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_SPI2_Init+0x64>)
 8002434:	220a      	movs	r2, #10
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002438:	4804      	ldr	r0, [pc, #16]	; (800244c <MX_SPI2_Init+0x64>)
 800243a:	f004 fddd 	bl	8006ff8 <HAL_SPI_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002444:	f000 fd46 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000594 	.word	0x20000594
 8002450:	40003800 	.word	0x40003800

08002454 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_SPI4_Init+0x64>)
 800245a:	4a18      	ldr	r2, [pc, #96]	; (80024bc <MX_SPI4_Init+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <MX_SPI4_Init+0x64>)
 8002460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002464:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_SPI4_Init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_SPI4_Init+0x64>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_SPI4_Init+0x64>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_SPI4_Init+0x64>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_SPI4_Init+0x64>)
 8002480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002484:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_SPI4_Init+0x64>)
 8002488:	2228      	movs	r2, #40	; 0x28
 800248a:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <MX_SPI4_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_SPI4_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <MX_SPI4_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_SPI4_Init+0x64>)
 80024a0:	220a      	movs	r2, #10
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_SPI4_Init+0x64>)
 80024a6:	f004 fda7 	bl	8006ff8 <HAL_SPI_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80024b0:	f000 fd10 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200004e4 	.word	0x200004e4
 80024bc:	40013400 	.word	0x40013400

080024c0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <MX_SPI5_Init+0x64>)
 80024c6:	4a18      	ldr	r2, [pc, #96]	; (8002528 <MX_SPI5_Init+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <MX_SPI5_Init+0x64>)
 80024cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <MX_SPI5_Init+0x64>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <MX_SPI5_Init+0x64>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024de:	4b11      	ldr	r3, [pc, #68]	; (8002524 <MX_SPI5_Init+0x64>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <MX_SPI5_Init+0x64>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <MX_SPI5_Init+0x64>)
 80024ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <MX_SPI5_Init+0x64>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <MX_SPI5_Init+0x64>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <MX_SPI5_Init+0x64>)
 8002500:	2200      	movs	r2, #0
 8002502:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002504:	4b07      	ldr	r3, [pc, #28]	; (8002524 <MX_SPI5_Init+0x64>)
 8002506:	2200      	movs	r2, #0
 8002508:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <MX_SPI5_Init+0x64>)
 800250c:	220a      	movs	r2, #10
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002510:	4804      	ldr	r0, [pc, #16]	; (8002524 <MX_SPI5_Init+0x64>)
 8002512:	f004 fd71 	bl	8006ff8 <HAL_SPI_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800251c:	f000 fcda 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200005ec 	.word	0x200005ec
 8002528:	40015000 	.word	0x40015000

0800252c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08e      	sub	sp, #56	; 0x38
 8002530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
 800253c:	609a      	str	r2, [r3, #8]
 800253e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002540:	f107 0320 	add.w	r3, r7, #32
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
 8002558:	615a      	str	r2, [r3, #20]
 800255a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800255c:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <MX_TIM2_Init+0xe8>)
 800255e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002564:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002566:	2259      	movs	r2, #89	; 0x59
 8002568:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256a:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <MX_TIM2_Init+0xe8>)
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002572:	f240 128f 	movw	r2, #399	; 0x18f
 8002576:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <MX_TIM2_Init+0xe8>)
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002580:	2200      	movs	r2, #0
 8002582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002584:	4823      	ldr	r0, [pc, #140]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002586:	f005 f957 	bl	8007838 <HAL_TIM_Base_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002590:	f000 fca0 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800259a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800259e:	4619      	mov	r1, r3
 80025a0:	481c      	ldr	r0, [pc, #112]	; (8002614 <MX_TIM2_Init+0xe8>)
 80025a2:	f005 fc31 	bl	8007e08 <HAL_TIM_ConfigClockSource>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80025ac:	f000 fc92 	bl	8002ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025b0:	4818      	ldr	r0, [pc, #96]	; (8002614 <MX_TIM2_Init+0xe8>)
 80025b2:	f005 f990 	bl	80078d6 <HAL_TIM_PWM_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80025bc:	f000 fc8a 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80025c0:	2320      	movs	r3, #32
 80025c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025c8:	f107 0320 	add.w	r3, r7, #32
 80025cc:	4619      	mov	r1, r3
 80025ce:	4811      	ldr	r0, [pc, #68]	; (8002614 <MX_TIM2_Init+0xe8>)
 80025d0:	f006 f816 	bl	8008600 <HAL_TIMEx_MasterConfigSynchronization>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80025da:	f000 fc7b 	bl	8002ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025de:	2360      	movs	r3, #96	; 0x60
 80025e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 80025e2:	2364      	movs	r3, #100	; 0x64
 80025e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025e6:	2300      	movs	r3, #0
 80025e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	2208      	movs	r2, #8
 80025f2:	4619      	mov	r1, r3
 80025f4:	4807      	ldr	r0, [pc, #28]	; (8002614 <MX_TIM2_Init+0xe8>)
 80025f6:	f005 fb41 	bl	8007c7c <HAL_TIM_PWM_ConfigChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002600:	f000 fc68 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002604:	4803      	ldr	r0, [pc, #12]	; (8002614 <MX_TIM2_Init+0xe8>)
 8002606:	f001 f8fb 	bl	8003800 <HAL_TIM_MspPostInit>

}
 800260a:	bf00      	nop
 800260c:	3738      	adds	r7, #56	; 0x38
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000ca0 	.word	0x20000ca0

08002618 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261e:	f107 0308 	add.w	r3, r7, #8
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262c:	463b      	mov	r3, r7
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <MX_TIM4_Init+0x94>)
 8002636:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <MX_TIM4_Init+0x98>)
 8002638:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <MX_TIM4_Init+0x94>)
 800263c:	f242 3227 	movw	r2, #8999	; 0x2327
 8002640:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002642:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <MX_TIM4_Init+0x94>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8002648:	4b18      	ldr	r3, [pc, #96]	; (80026ac <MX_TIM4_Init+0x94>)
 800264a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800264e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <MX_TIM4_Init+0x94>)
 8002652:	2200      	movs	r2, #0
 8002654:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <MX_TIM4_Init+0x94>)
 8002658:	2200      	movs	r2, #0
 800265a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800265c:	4813      	ldr	r0, [pc, #76]	; (80026ac <MX_TIM4_Init+0x94>)
 800265e:	f005 f8eb 	bl	8007838 <HAL_TIM_Base_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002668:	f000 fc34 	bl	8002ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002670:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	4619      	mov	r1, r3
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <MX_TIM4_Init+0x94>)
 800267a:	f005 fbc5 	bl	8007e08 <HAL_TIM_ConfigClockSource>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002684:	f000 fc26 	bl	8002ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002688:	2320      	movs	r3, #32
 800268a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002690:	463b      	mov	r3, r7
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_TIM4_Init+0x94>)
 8002696:	f005 ffb3 	bl	8008600 <HAL_TIMEx_MasterConfigSynchronization>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80026a0:	f000 fc18 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000644 	.word	0x20000644
 80026b0:	40000800 	.word	0x40000800

080026b4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_UART8_Init+0x4c>)
 80026ba:	4a12      	ldr	r2, [pc, #72]	; (8002704 <MX_UART8_Init+0x50>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <MX_UART8_Init+0x4c>)
 80026c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026c4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <MX_UART8_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <MX_UART8_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <MX_UART8_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <MX_UART8_Init+0x4c>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026de:	4b08      	ldr	r3, [pc, #32]	; (8002700 <MX_UART8_Init+0x4c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_UART8_Init+0x4c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_UART8_Init+0x4c>)
 80026ec:	f006 f818 	bl	8008720 <HAL_UART_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80026f6:	f000 fbed 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000c14 	.word	0x20000c14
 8002704:	40007c00 	.word	0x40007c00

08002708 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <MX_USART3_UART_Init+0x50>)
 8002710:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002714:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002718:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 800272e:	220c      	movs	r2, #12
 8002730:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_USART3_UART_Init+0x4c>)
 8002740:	f005 ffee 	bl	8008720 <HAL_UART_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800274a:	f000 fbc3 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000684 	.word	0x20000684
 8002758:	40004800 	.word	0x40004800

0800275c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <MX_USART6_UART_Init+0x4c>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <MX_USART6_UART_Init+0x50>)
 8002764:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <MX_USART6_UART_Init+0x4c>)
 8002768:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800276c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800276e:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <MX_USART6_UART_Init+0x4c>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_USART6_UART_Init+0x4c>)
 8002776:	2200      	movs	r2, #0
 8002778:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <MX_USART6_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002780:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_USART6_UART_Init+0x4c>)
 8002782:	220c      	movs	r2, #12
 8002784:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002786:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <MX_USART6_UART_Init+0x4c>)
 8002788:	2200      	movs	r2, #0
 800278a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_USART6_UART_Init+0x4c>)
 800278e:	2200      	movs	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <MX_USART6_UART_Init+0x4c>)
 8002794:	f005 ffc4 	bl	8008720 <HAL_UART_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800279e:	f000 fb99 	bl	8002ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000c54 	.word	0x20000c54
 80027ac:	40011400 	.word	0x40011400

080027b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	; 0x38
 80027b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	4bb5      	ldr	r3, [pc, #724]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4ab4      	ldr	r2, [pc, #720]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 80027d0:	f043 0310 	orr.w	r3, r3, #16
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4bb2      	ldr	r3, [pc, #712]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	4bae      	ldr	r3, [pc, #696]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4aad      	ldr	r2, [pc, #692]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4bab      	ldr	r3, [pc, #684]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	4ba7      	ldr	r3, [pc, #668]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	4aa6      	ldr	r2, [pc, #664]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002808:	f043 0320 	orr.w	r3, r3, #32
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
 800280e:	4ba4      	ldr	r3, [pc, #656]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	61bb      	str	r3, [r7, #24]
 8002818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	4ba0      	ldr	r3, [pc, #640]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	4a9f      	ldr	r2, [pc, #636]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
 800282a:	4b9d      	ldr	r3, [pc, #628]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	4b99      	ldr	r3, [pc, #612]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a98      	ldr	r2, [pc, #608]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b96      	ldr	r3, [pc, #600]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a91      	ldr	r2, [pc, #580]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b8f      	ldr	r3, [pc, #572]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b8b      	ldr	r3, [pc, #556]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a8a      	ldr	r2, [pc, #552]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b88      	ldr	r3, [pc, #544]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	4b84      	ldr	r3, [pc, #528]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a83      	ldr	r2, [pc, #524]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 8002894:	f043 0308 	orr.w	r3, r3, #8
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b81      	ldr	r3, [pc, #516]	; (8002aa0 <MX_GPIO_Init+0x2f0>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	607b      	str	r3, [r7, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80028a6:	2200      	movs	r2, #0
 80028a8:	f248 4184 	movw	r1, #33924	; 0x8484
 80028ac:	487d      	ldr	r0, [pc, #500]	; (8002aa4 <MX_GPIO_Init+0x2f4>)
 80028ae:	f002 f981 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 80028b2:	2200      	movs	r2, #0
 80028b4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80028b8:	487b      	ldr	r0, [pc, #492]	; (8002aa8 <MX_GPIO_Init+0x2f8>)
 80028ba:	f002 f97b 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80028be:	2200      	movs	r2, #0
 80028c0:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80028c4:	4879      	ldr	r0, [pc, #484]	; (8002aac <MX_GPIO_Init+0x2fc>)
 80028c6:	f002 f975 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2108      	movs	r1, #8
 80028ce:	4878      	ldr	r0, [pc, #480]	; (8002ab0 <MX_GPIO_Init+0x300>)
 80028d0:	f002 f970 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 80028d4:	2200      	movs	r2, #0
 80028d6:	f645 213e 	movw	r1, #23102	; 0x5a3e
 80028da:	4876      	ldr	r0, [pc, #472]	; (8002ab4 <MX_GPIO_Init+0x304>)
 80028dc:	f002 f96a 	bl	8004bb4 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
                          |Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_NSS_GPIO_Port, SX_NSS_Pin, GPIO_PIN_RESET);
 80028e0:	2200      	movs	r2, #0
 80028e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e6:	4874      	ldr	r0, [pc, #464]	; (8002ab8 <MX_GPIO_Init+0x308>)
 80028e8:	f002 f964 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80028ec:	2200      	movs	r2, #0
 80028ee:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 80028f2:	4872      	ldr	r0, [pc, #456]	; (8002abc <MX_GPIO_Init+0x30c>)
 80028f4:	f002 f95e 	bl	8004bb4 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin
                          |VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin TH_CS_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin;
 80028f8:	f248 4384 	movw	r3, #33924	; 0x8484
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fe:	2301      	movs	r3, #1
 8002900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002902:	2300      	movs	r3, #0
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002906:	2300      	movs	r3, #0
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290e:	4619      	mov	r1, r3
 8002910:	4864      	ldr	r0, [pc, #400]	; (8002aa4 <MX_GPIO_Init+0x2f4>)
 8002912:	f001 ff8b 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291c:	2301      	movs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002920:	2301      	movs	r3, #1
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292c:	4619      	mov	r1, r3
 800292e:	485e      	ldr	r0, [pc, #376]	; (8002aa8 <MX_GPIO_Init+0x2f8>)
 8002930:	f001 ff7c 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 8002934:	2301      	movs	r3, #1
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002938:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <MX_GPIO_Init+0x310>)
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 8002940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002944:	4619      	mov	r1, r3
 8002946:	4859      	ldr	r0, [pc, #356]	; (8002aac <MX_GPIO_Init+0x2fc>)
 8002948:	f001 ff70 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin;
 800294c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002952:	2301      	movs	r3, #1
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295a:	2300      	movs	r3, #0
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002962:	4619      	mov	r1, r3
 8002964:	4851      	ldr	r0, [pc, #324]	; (8002aac <MX_GPIO_Init+0x2fc>)
 8002966:	f001 ff61 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDF_Pin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 800296a:	2308      	movs	r3, #8
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296e:	2301      	movs	r3, #1
 8002970:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297e:	4619      	mov	r1, r3
 8002980:	484b      	ldr	r0, [pc, #300]	; (8002ab0 <MX_GPIO_Init+0x300>)
 8002982:	f001 ff53 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 8002986:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298c:	2300      	movs	r3, #0
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002998:	4619      	mov	r1, r3
 800299a:	4844      	ldr	r0, [pc, #272]	; (8002aac <MX_GPIO_Init+0x2fc>)
 800299c:	f001 ff46 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80029a0:	2302      	movs	r3, #2
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a4:	2300      	movs	r3, #0
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80029ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b0:	4619      	mov	r1, r3
 80029b2:	4841      	ldr	r0, [pc, #260]	; (8002ab8 <MX_GPIO_Init+0x308>)
 80029b4:	f001 ff3a 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 80029b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029be:	2300      	movs	r3, #0
 80029c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80029c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ca:	4619      	mov	r1, r3
 80029cc:	4836      	ldr	r0, [pc, #216]	; (8002aa8 <MX_GPIO_Init+0x2f8>)
 80029ce:	f001 ff2d 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 80029d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d8:	2301      	movs	r3, #1
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e8:	4619      	mov	r1, r3
 80029ea:	482f      	ldr	r0, [pc, #188]	; (8002aa8 <MX_GPIO_Init+0x2f8>)
 80029ec:	f001 ff1e 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 80029f0:	f242 4301 	movw	r3, #9217	; 0x2401
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a02:	4619      	mov	r1, r3
 8002a04:	482b      	ldr	r0, [pc, #172]	; (8002ab4 <MX_GPIO_Init+0x304>)
 8002a06:	f001 ff11 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin VR_CTRL_PWR_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin
                           Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002a0a:	f645 233e 	movw	r3, #23102	; 0x5a3e
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
                          |Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a20:	4619      	mov	r1, r3
 8002a22:	4824      	ldr	r0, [pc, #144]	; (8002ab4 <MX_GPIO_Init+0x304>)
 8002a24:	f001 ff02 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : Payload_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = Payload_EN_Pin|IN_XTend_Continuity_Pin;
 8002a28:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4819      	ldr	r0, [pc, #100]	; (8002aa4 <MX_GPIO_Init+0x2f4>)
 8002a3e:	f001 fef5 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_NSS_Pin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 8002a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 8002a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4817      	ldr	r0, [pc, #92]	; (8002ab8 <MX_GPIO_Init+0x308>)
 8002a5c:	f001 fee6 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin FLASH_IO3_Pin FLASH_WP_Pin FLASH_CS_Pin
                           VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002a60:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin
                          |VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a76:	4619      	mov	r1, r3
 8002a78:	4810      	ldr	r0, [pc, #64]	; (8002abc <MX_GPIO_Init+0x30c>)
 8002a7a:	f001 fed7 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	4619      	mov	r1, r3
 8002a92:	480a      	ldr	r0, [pc, #40]	; (8002abc <MX_GPIO_Init+0x30c>)
 8002a94:	f001 feca 	bl	800482c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8002a98:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002a9c:	e012      	b.n	8002ac4 <MX_GPIO_Init+0x314>
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40021400 	.word	0x40021400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40021800 	.word	0x40021800
 8002ab8:	40020400 	.word	0x40020400
 8002abc:	40020c00 	.word	0x40020c00
 8002ac0:	10110000 	.word	0x10110000
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <MX_GPIO_Init+0x344>)
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4808      	ldr	r0, [pc, #32]	; (8002af8 <MX_GPIO_Init+0x348>)
 8002ad6:	f001 fea9 	bl	800482c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2100      	movs	r1, #0
 8002ade:	2006      	movs	r0, #6
 8002ae0:	f001 fe4b 	bl	800477a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ae4:	2006      	movs	r0, #6
 8002ae6:	f001 fe64 	bl	80047b2 <HAL_NVIC_EnableIRQ>

}
 8002aea:	bf00      	nop
 8002aec:	3738      	adds	r7, #56	; 0x38
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	10110000 	.word	0x10110000
 8002af8:	40021800 	.word	0x40021800

08002afc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b00:	b0a5      	sub	sp, #148	; 0x94
 8002b02:	af16      	add	r7, sp, #88	; 0x58
 8002b04:	6378      	str	r0, [r7, #52]	; 0x34
	if (htim->Instance == TIM4) {
 8002b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4aa0      	ldr	r2, [pc, #640]	; (8002d8c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	f040 8138 	bne.w	8002d82 <HAL_TIM_PeriodElapsedCallback+0x286>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002b12:	2201      	movs	r2, #1
 8002b14:	2102      	movs	r1, #2
 8002b16:	489e      	ldr	r0, [pc, #632]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002b18:	f002 f84c 	bl	8004bb4 <HAL_GPIO_WritePin>
		switch (curr_task)
 8002b1c:	4b9d      	ldr	r3, [pc, #628]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	f200 811b 	bhi.w	8002d60 <HAL_TIM_PeriodElapsedCallback+0x264>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b55 	.word	0x08002b55
 8002b34:	08002b6b 	.word	0x08002b6b
 8002b38:	08002b81 	.word	0x08002b81
 8002b3c:	08002b97 	.word	0x08002b97
 8002b40:	08002ba5 	.word	0x08002ba5
 8002b44:	08002d69 	.word	0x08002d69
 8002b48:	08002bd3 	.word	0x08002bd3
 8002b4c:	08002cc1 	.word	0x08002cc1
 8002b50:	08002d27 	.word	0x08002d27
		{
			case 1:
				// lsm6dsl data
				get_acceleration(dev_ctx_lsm, acceleration_mg);
 8002b54:	4a90      	ldr	r2, [pc, #576]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002b56:	4b91      	ldr	r3, [pc, #580]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002b58:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b5a:	f7fe fb35 	bl	80011c8 <get_acceleration>
				get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8002b5e:	4a8e      	ldr	r2, [pc, #568]	; (8002d98 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002b60:	4b8f      	ldr	r3, [pc, #572]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002b62:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b64:	f7fe fb76 	bl	8001254 <get_angvelocity>
				break;
 8002b68:	e0ff      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 2:
				// lps22hh data
				get_pressure(dev_ctx_lps, &pressure_hPa);
 8002b6a:	4a8e      	ldr	r2, [pc, #568]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002b6c:	4b8e      	ldr	r3, [pc, #568]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002b6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b70:	f7fe fc0c 	bl	800138c <get_pressure>
				get_temperature(dev_ctx_lps, &temperature_degC);
 8002b74:	4a8b      	ldr	r2, [pc, #556]	; (8002da4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002b76:	4b8d      	ldr	r3, [pc, #564]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002b78:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b7a:	f7fe fc33 	bl	80013e4 <get_temperature>
				break;
 8002b7e:	e0f4      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 3:
				// rtc data
				HAL_RTC_GetTime(&hrtc, &stimeget, RTC_FORMAT_BIN);
 8002b80:	2200      	movs	r2, #0
 8002b82:	498b      	ldr	r1, [pc, #556]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002b84:	488b      	ldr	r0, [pc, #556]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002b86:	f004 f853 	bl	8006c30 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &sdateget, RTC_FORMAT_BIN); // have to call GetDate for the time to be correct
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	498a      	ldr	r1, [pc, #552]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002b8e:	4889      	ldr	r0, [pc, #548]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8002b90:	f004 f953 	bl	8006e3a <HAL_RTC_GetDate>
				break;
 8002b94:	e0e9      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 4:
				// continuity on pyro channels (one hot encoded)
				continuity = get_continuity();
 8002b96:	f000 f931 	bl	8002dfc <get_continuity>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	4b87      	ldr	r3, [pc, #540]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002ba0:	701a      	strb	r2, [r3, #0]
				break;
 8002ba2:	e0e2      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 5:
				// propulsion data
				tank_temperature = Max31855_Read_Temp();
 8002ba4:	f7fe fa32 	bl	800100c <Max31855_Read_Temp>
 8002ba8:	eef0 7a40 	vmov.f32	s15, s0
 8002bac:	4b84      	ldr	r3, [pc, #528]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002bae:	edc3 7a00 	vstr	s15, [r3]
				tank_pressure = prop_poll_pressure_transducer();
 8002bb2:	f000 f95d 	bl	8002e70 <prop_poll_pressure_transducer>
 8002bb6:	eef0 7a40 	vmov.f32	s15, s0
 8002bba:	4b82      	ldr	r3, [pc, #520]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002bbc:	edc3 7a00 	vstr	s15, [r3]
				valve_state = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port, IN_Prop_ActuatedVent_Feedback_Pin);
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	4881      	ldr	r0, [pc, #516]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002bc4:	f001 ffde 	bl	8004b84 <HAL_GPIO_ReadPin>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4b7f      	ldr	r3, [pc, #508]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002bce:	701a      	strb	r2, [r3, #0]
				break;
 8002bd0:	e0cb      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x26e>
				break;

			case 7:
				// avionics message
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
								acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002bd2:	4b72      	ldr	r3, [pc, #456]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fcc6 	bl	8000568 <__aeabi_f2d>
 8002bdc:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
								acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002be0:	4b6e      	ldr	r3, [pc, #440]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002be2:	685b      	ldr	r3, [r3, #4]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd fcbf 	bl	8000568 <__aeabi_f2d>
 8002bea:	e9c7 0108 	strd	r0, r1, [r7, #32]
								acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002bee:	4b6b      	ldr	r3, [pc, #428]	; (8002d9c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7fd fcb8 	bl	8000568 <__aeabi_f2d>
 8002bf8:	e9c7 0106 	strd	r0, r1, [r7, #24]
								angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fd fcb1 	bl	8000568 <__aeabi_f2d>
 8002c06:	e9c7 0104 	strd	r0, r1, [r7, #16]
								angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002c0a:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fd fcaa 	bl	8000568 <__aeabi_f2d>
 8002c14:	e9c7 0102 	strd	r0, r1, [r7, #8]
								angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7fd fca3 	bl	8000568 <__aeabi_f2d>
 8002c22:	4605      	mov	r5, r0
 8002c24:	460e      	mov	r6, r1
 8002c26:	4b60      	ldr	r3, [pc, #384]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fc9c 	bl	8000568 <__aeabi_f2d>
 8002c30:	4682      	mov	sl, r0
 8002c32:	468b      	mov	fp, r1
 8002c34:	4b66      	ldr	r3, [pc, #408]	; (8002dd0 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002c36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002c3a:	4b66      	ldr	r3, [pc, #408]	; (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002c3c:	e9d3 0100 	ldrd	r0, r1, [r3]
								pressure_hPa, latitude, longitude,
								stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002c40:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002c42:	785b      	ldrb	r3, [r3, #1]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002c44:	633b      	str	r3, [r7, #48]	; 0x30
								stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002c46:	4b5a      	ldr	r3, [pc, #360]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002c48:	789b      	ldrb	r3, [r3, #2]
				sprintf((char *)msg_buffer_av, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	4b58      	ldr	r3, [pc, #352]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002c4e:	685c      	ldr	r4, [r3, #4]
 8002c50:	4b5a      	ldr	r3, [pc, #360]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	4b5f      	ldr	r3, [pc, #380]	; (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	9314      	str	r3, [sp, #80]	; 0x50
 8002c60:	9213      	str	r2, [sp, #76]	; 0x4c
 8002c62:	9412      	str	r4, [sp, #72]	; 0x48
 8002c64:	687c      	ldr	r4, [r7, #4]
 8002c66:	9411      	str	r4, [sp, #68]	; 0x44
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	9310      	str	r3, [sp, #64]	; 0x40
 8002c6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002c70:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002c74:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002c78:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8002c7c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002c80:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002c84:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c88:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002c8c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002c90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c94:	ed97 7b08 	vldr	d7, [r7, #32]
 8002c98:	ed8d 7b00 	vstr	d7, [sp]
 8002c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ca0:	494e      	ldr	r1, [pc, #312]	; (8002ddc <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002ca2:	484f      	ldr	r0, [pc, #316]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002ca4:	f00a fe72 	bl	800d98c <siprintf>
								continuity, state);
				HAL_UART_Transmit(&huart3, msg_buffer_av, strlen((char *)msg_buffer_av), HAL_MAX_DELAY);
 8002ca8:	484d      	ldr	r0, [pc, #308]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002caa:	f7fd faa1 	bl	80001f0 <strlen>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	494a      	ldr	r1, [pc, #296]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002cb8:	484a      	ldr	r0, [pc, #296]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002cba:	f005 fd7e 	bl	80087ba <HAL_UART_Transmit>
				break;
 8002cbe:	e054      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 8:
				// prop message
				sprintf((char *)msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fc4f 	bl	8000568 <__aeabi_f2d>
 8002cca:	4604      	mov	r4, r0
 8002ccc:	460d      	mov	r5, r1
 8002cce:	4b3c      	ldr	r3, [pc, #240]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fc48 	bl	8000568 <__aeabi_f2d>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	493b      	ldr	r1, [pc, #236]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002cde:	7809      	ldrb	r1, [r1, #0]
 8002ce0:	b2c9      	uxtb	r1, r1
 8002ce2:	4608      	mov	r0, r1
								tank_pressure, tank_temperature, valve_state,
								stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds);
 8002ce4:	4932      	ldr	r1, [pc, #200]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002ce6:	7849      	ldrb	r1, [r1, #1]
				sprintf((char *)msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002ce8:	460e      	mov	r6, r1
								stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds);
 8002cea:	4931      	ldr	r1, [pc, #196]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002cec:	7889      	ldrb	r1, [r1, #2]
				sprintf((char *)msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002cee:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cf0:	492f      	ldr	r1, [pc, #188]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8002cf2:	6849      	ldr	r1, [r1, #4]
 8002cf4:	9105      	str	r1, [sp, #20]
 8002cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf8:	9104      	str	r1, [sp, #16]
 8002cfa:	9603      	str	r6, [sp, #12]
 8002cfc:	9002      	str	r0, [sp, #8]
 8002cfe:	e9cd 2300 	strd	r2, r3, [sp]
 8002d02:	4622      	mov	r2, r4
 8002d04:	462b      	mov	r3, r5
 8002d06:	4938      	ldr	r1, [pc, #224]	; (8002de8 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002d08:	4838      	ldr	r0, [pc, #224]	; (8002dec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002d0a:	f00a fe3f 	bl	800d98c <siprintf>
				HAL_UART_Transmit(&huart3, msg_buffer_pr, strlen((char *)msg_buffer_pr), HAL_MAX_DELAY);
 8002d0e:	4837      	ldr	r0, [pc, #220]	; (8002dec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002d10:	f7fd fa6e 	bl	80001f0 <strlen>
 8002d14:	4603      	mov	r3, r0
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1c:	4933      	ldr	r1, [pc, #204]	; (8002dec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002d1e:	4831      	ldr	r0, [pc, #196]	; (8002de4 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002d20:	f005 fd4b 	bl	80087ba <HAL_UART_Transmit>
				break;
 8002d24:	e021      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x26e>

			case 9:
				// save to sd
				fres = sd_open_file(filename);
 8002d26:	4832      	ldr	r0, [pc, #200]	; (8002df0 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002d28:	f000 f978 	bl	800301c <sd_open_file>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002d32:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, msg_buffer_av);
 8002d34:	492a      	ldr	r1, [pc, #168]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002d36:	4830      	ldr	r0, [pc, #192]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002d38:	f000 f988 	bl	800304c <sd_write>
				sd_write(&fil, msg_buffer_pr);
 8002d3c:	492b      	ldr	r1, [pc, #172]	; (8002dec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002d3e:	482e      	ldr	r0, [pc, #184]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002d40:	f000 f984 	bl	800304c <sd_write>
				f_close(&fil);
 8002d44:	482c      	ldr	r0, [pc, #176]	; (8002df8 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002d46:	f009 fb3a 	bl	800c3be <f_close>
				memset(msg_buffer_av, 0, 200);
 8002d4a:	22c8      	movs	r2, #200	; 0xc8
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4824      	ldr	r0, [pc, #144]	; (8002de0 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8002d50:	f009 feda 	bl	800cb08 <memset>
				memset(msg_buffer_pr, 0, 50);
 8002d54:	2232      	movs	r2, #50	; 0x32
 8002d56:	2100      	movs	r1, #0
 8002d58:	4824      	ldr	r0, [pc, #144]	; (8002dec <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002d5a:	f009 fed5 	bl	800cb08 <memset>
				break;
 8002d5e:	e004      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x26e>
				// radio send avionics
//				HAL_UART_Transmit(&huart3, msg_buffer_pr, strlen((char *)msg_buffer_pr), HAL_MAX_DELAY);
//				break;

			default:
				curr_task = 0;
 8002d60:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e000      	b.n	8002d6a <HAL_TIM_PeriodElapsedCallback+0x26e>
				break;
 8002d68:	bf00      	nop
		}
		curr_task++;
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3301      	adds	r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002d76:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	4804      	ldr	r0, [pc, #16]	; (8002d90 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002d7e:	f001 ff19 	bl	8004bb4 <HAL_GPIO_WritePin>

//		W25qxx_WriteBlock(msg_buffer, page_address, page_offset, strlen((const char *)msg_buffer));
//		flash_write_address += strlen((const char *)msg_buffer);

	}
}
 8002d82:	bf00      	nop
 8002d84:	373c      	adds	r7, #60	; 0x3c
 8002d86:	46bd      	mov	sp, r7
 8002d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d8c:	40000800 	.word	0x40000800
 8002d90:	40020800 	.word	0x40020800
 8002d94:	20000381 	.word	0x20000381
 8002d98:	20000ce0 	.word	0x20000ce0
 8002d9c:	20000234 	.word	0x20000234
 8002da0:	20000240 	.word	0x20000240
 8002da4:	20000cec 	.word	0x20000cec
 8002da8:	2000024c 	.word	0x2000024c
 8002dac:	20000250 	.word	0x20000250
 8002db0:	20000260 	.word	0x20000260
 8002db4:	20000ae4 	.word	0x20000ae4
 8002db8:	20000274 	.word	0x20000274
 8002dbc:	20000232 	.word	0x20000232
 8002dc0:	20000254 	.word	0x20000254
 8002dc4:	20000258 	.word	0x20000258
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	2000025c 	.word	0x2000025c
 8002dd0:	20000c98 	.word	0x20000c98
 8002dd4:	20000b08 	.word	0x20000b08
 8002dd8:	20000233 	.word	0x20000233
 8002ddc:	080113e4 	.word	0x080113e4
 8002de0:	20000278 	.word	0x20000278
 8002de4:	20000684 	.word	0x20000684
 8002de8:	08011440 	.word	0x08011440
 8002dec:	20000340 	.word	0x20000340
 8002df0:	20000374 	.word	0x20000374
 8002df4:	20000cf8 	.word	0x20000cf8
 8002df8:	20000cfc 	.word	0x20000cfc

08002dfc <get_continuity>:
	return 0;

}


uint8_t get_continuity() {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0

	// read pins
	GPIO_PinState drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 8002e02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e06:	4817      	ldr	r0, [pc, #92]	; (8002e64 <get_continuity+0x68>)
 8002e08:	f001 febc 	bl	8004b84 <HAL_GPIO_ReadPin>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 8002e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e14:	4813      	ldr	r0, [pc, #76]	; (8002e64 <get_continuity+0x68>)
 8002e16:	f001 feb5 	bl	8004b84 <HAL_GPIO_ReadPin>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 8002e1e:	2101      	movs	r1, #1
 8002e20:	4810      	ldr	r0, [pc, #64]	; (8002e64 <get_continuity+0x68>)
 8002e22:	f001 feaf 	bl	8004b84 <HAL_GPIO_ReadPin>
 8002e26:	4603      	mov	r3, r0
 8002e28:	717b      	strb	r3, [r7, #5]
	GPIO_PinState prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 8002e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e2e:	480e      	ldr	r0, [pc, #56]	; (8002e68 <get_continuity+0x6c>)
 8002e30:	f001 fea8 	bl	8004b84 <HAL_GPIO_ReadPin>
 8002e34:	4603      	mov	r3, r0
 8002e36:	713b      	strb	r3, [r7, #4]

	// assign one-hot encoded result (apparently you can multiply enums?)
	uint8_t continuity = (drogue) + (main * 2) + (prop_1 * 4) + (prop_2 * 8);
 8002e38:	793b      	ldrb	r3, [r7, #4]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	797b      	ldrb	r3, [r7, #5]
 8002e40:	4413      	add	r3, r2
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	79bb      	ldrb	r3, [r7, #6]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	4413      	add	r3, r2
 8002e56:	70fb      	strb	r3, [r7, #3]

	return continuity;
 8002e58:	78fb      	ldrb	r3, [r7, #3]

}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40021800 	.word	0x40021800
 8002e68:	40021400 	.word	0x40021400
 8002e6c:	00000000 	.word	0x00000000

08002e70 <prop_poll_pressure_transducer>:

float prop_poll_pressure_transducer(void) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0

	// reading adc
	HAL_ADC_Start(&hadc1);
 8002e76:	4816      	ldr	r0, [pc, #88]	; (8002ed0 <prop_poll_pressure_transducer+0x60>)
 8002e78:	f000 ffec 	bl	8003e54 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8002e7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e80:	4813      	ldr	r0, [pc, #76]	; (8002ed0 <prop_poll_pressure_transducer+0x60>)
 8002e82:	f001 f8e0 	bl	8004046 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(&hadc1);
 8002e86:	4812      	ldr	r0, [pc, #72]	; (8002ed0 <prop_poll_pressure_transducer+0x60>)
 8002e88:	f001 f961 	bl	800414e <HAL_ADC_GetValue>
 8002e8c:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8002e8e:	4810      	ldr	r0, [pc, #64]	; (8002ed0 <prop_poll_pressure_transducer+0x60>)
 8002e90:	f001 f8a6 	bl	8003fe0 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0); // assuming 12 bits
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fd fb45 	bl	8000524 <__aeabi_ui2d>
 8002e9a:	a30b      	add	r3, pc, #44	; (adr r3, 8002ec8 <prop_poll_pressure_transducer+0x58>)
 8002e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea0:	f7fd fce4 	bl	800086c <__aeabi_ddiv>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	4619      	mov	r1, r3
 8002eac:	f7fd feac 	bl	8000c08 <__aeabi_d2f>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	603b      	str	r3, [r7, #0]

	// convert using transfer function
	// TODO

	return voltage;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	ee07 3a90 	vmov	s15, r3
}
 8002eba:	eeb0 0a67 	vmov.f32	s0, s15
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	f3af 8000 	nop.w
 8002ec8:	00000000 	.word	0x00000000
 8002ecc:	40affe00 	.word	0x40affe00
 8002ed0:	2000099c 	.word	0x2000099c

08002ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_SET);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2108      	movs	r1, #8
 8002edc:	4803      	ldr	r0, [pc, #12]	; (8002eec <Error_Handler+0x18>)
 8002ede:	f001 fe69 	bl	8004bb4 <HAL_GPIO_WritePin>
	buzz_failure();
 8002ee2:	f7fe ffa7 	bl	8001e34 <buzz_failure>
	__BKPT();
 8002ee6:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40020000 	.word	0x40020000

08002ef0 <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002ef0:	b40f      	push	{r0, r1, r2, r3}
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f06:	4805      	ldr	r0, [pc, #20]	; (8002f1c <myprintf+0x2c>)
 8002f08:	f00b fca6 	bl	800e858 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f16:	b004      	add	sp, #16
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000384 	.word	0x20000384

08002f20 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	4932      	ldr	r1, [pc, #200]	; (8002ff8 <sd_init_dynamic_filename+0xd8>)
 8002f30:	4832      	ldr	r0, [pc, #200]	; (8002ffc <sd_init_dynamic_filename+0xdc>)
 8002f32:	f008 fe4d 	bl	800bbd0 <f_mount>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002f44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f48:	4619      	mov	r1, r3
 8002f4a:	482d      	ldr	r0, [pc, #180]	; (8003000 <sd_init_dynamic_filename+0xe0>)
 8002f4c:	f7ff ffd0 	bl	8002ef0 <myprintf>
		return fres;
 8002f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f54:	e04b      	b.n	8002fee <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002f5a:	f107 0320 	add.w	r3, r7, #32
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68f9      	ldr	r1, [r7, #12]
 8002f62:	4825      	ldr	r0, [pc, #148]	; (8002ff8 <sd_init_dynamic_filename+0xd8>)
 8002f64:	f000 f89c 	bl	80030a0 <scan_files>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	f107 0310 	add.w	r3, r7, #16
 8002f76:	4923      	ldr	r1, [pc, #140]	; (8003004 <sd_init_dynamic_filename+0xe4>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f00a fd07 	bl	800d98c <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002f7e:	f107 0310 	add.w	r3, r7, #16
 8002f82:	4619      	mov	r1, r3
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f00a fd64 	bl	800da52 <strcpy>
 8002f8a:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002f8c:	f107 0310 	add.w	r3, r7, #16
 8002f90:	221a      	movs	r2, #26
 8002f92:	4619      	mov	r1, r3
 8002f94:	481c      	ldr	r0, [pc, #112]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002f96:	f008 fe61 	bl	800bc5c <f_open>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11a      	bne.n	8002fde <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002fa8:	4818      	ldr	r0, [pc, #96]	; (800300c <sd_init_dynamic_filename+0xec>)
 8002faa:	f7ff ffa1 	bl	8002ef0 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4814      	ldr	r0, [pc, #80]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fb6:	f009 fa2c 	bl	800c412 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8002fba:	4915      	ldr	r1, [pc, #84]	; (8003010 <sd_init_dynamic_filename+0xf0>)
 8002fbc:	4815      	ldr	r0, [pc, #84]	; (8003014 <sd_init_dynamic_filename+0xf4>)
 8002fbe:	f00a fce5 	bl	800d98c <siprintf>
	sd_write(&fil, msg_buffer);
 8002fc2:	4914      	ldr	r1, [pc, #80]	; (8003014 <sd_init_dynamic_filename+0xf4>)
 8002fc4:	4810      	ldr	r0, [pc, #64]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fc6:	f000 f841 	bl	800304c <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	480e      	ldr	r0, [pc, #56]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fce:	f000 f83d 	bl	800304c <sd_write>
	f_close(&fil);
 8002fd2:	480d      	ldr	r0, [pc, #52]	; (8003008 <sd_init_dynamic_filename+0xe8>)
 8002fd4:	f009 f9f3 	bl	800c3be <f_close>

	return fres;
 8002fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fdc:	e007      	b.n	8002fee <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002fde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	480c      	ldr	r0, [pc, #48]	; (8003018 <sd_init_dynamic_filename+0xf8>)
 8002fe6:	f7ff ff83 	bl	8002ef0 <myprintf>
		return fres;
 8002fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3728      	adds	r7, #40	; 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	080114ac 	.word	0x080114ac
 8002ffc:	200006c4 	.word	0x200006c4
 8003000:	080114b0 	.word	0x080114b0
 8003004:	0801152c 	.word	0x0801152c
 8003008:	20000cfc 	.word	0x20000cfc
 800300c:	080114c8 	.word	0x080114c8
 8003010:	0801150c 	.word	0x0801150c
 8003014:	20000f2c 	.word	0x20000f2c
 8003018:	080114f8 	.word	0x080114f8

0800301c <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8003024:	2212      	movs	r2, #18
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4807      	ldr	r0, [pc, #28]	; (8003048 <sd_open_file+0x2c>)
 800302a:	f008 fe17 	bl	800bc5c <f_open>
 800302e:	4603      	mov	r3, r0
 8003030:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <sd_open_file+0x2c>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4619      	mov	r1, r3
 8003038:	4803      	ldr	r0, [pc, #12]	; (8003048 <sd_open_file+0x2c>)
 800303a:	f009 f9ea 	bl	800c412 <f_lseek>

	return fres;
 800303e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000cfc 	.word	0x20000cfc

0800304c <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003056:	6838      	ldr	r0, [r7, #0]
 8003058:	f7fd f8ca 	bl	80001f0 <strlen>
 800305c:	4602      	mov	r2, r0
 800305e:	f107 0308 	add.w	r3, r7, #8
 8003062:	6839      	ldr	r1, [r7, #0]
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f008 ffb7 	bl	800bfd8 <f_write>
 800306a:	4603      	mov	r3, r0
 800306c:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d107      	bne.n	8003084 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4619      	mov	r1, r3
 8003078:	4807      	ldr	r0, [pc, #28]	; (8003098 <sd_write+0x4c>)
 800307a:	f7ff ff39 	bl	8002ef0 <myprintf>
		return bytesWrote;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	b25b      	sxtb	r3, r3
 8003082:	e004      	b.n	800308e <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <sd_write+0x50>)
 8003086:	f7ff ff33 	bl	8002ef0 <myprintf>
		return -1;
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	08011538 	.word	0x08011538
 800309c:	0801155c 	.word	0x0801155c

080030a0 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	b099      	sub	sp, #100	; 0x64
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	466b      	mov	r3, sp
 80030ae:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 80030b0:	68b8      	ldr	r0, [r7, #8]
 80030b2:	f7fd f89d 	bl	80001f0 <strlen>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 80030bc:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 80030c0:	4623      	mov	r3, r4
 80030c2:	3b01      	subs	r3, #1
 80030c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80030c6:	b2e0      	uxtb	r0, r4
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00cb      	lsls	r3, r1, #3
 80030d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030da:	00c2      	lsls	r2, r0, #3
 80030dc:	b2e0      	uxtb	r0, r4
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	00cb      	lsls	r3, r1, #3
 80030ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030f0:	00c2      	lsls	r2, r0, #3
 80030f2:	4623      	mov	r3, r4
 80030f4:	3307      	adds	r3, #7
 80030f6:	08db      	lsrs	r3, r3, #3
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	ebad 0d03 	sub.w	sp, sp, r3
 80030fe:	466b      	mov	r3, sp
 8003100:	3300      	adds	r3, #0
 8003102:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8003104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003106:	4619      	mov	r1, r3
 8003108:	68b8      	ldr	r0, [r7, #8]
 800310a:	f000 f8ff 	bl	800330c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8003118:	f107 0318 	add.w	r3, r7, #24
 800311c:	68f9      	ldr	r1, [r7, #12]
 800311e:	4618      	mov	r0, r3
 8003120:	f009 fb80 	bl	800c824 <f_opendir>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 800312a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800312e:	2b00      	cmp	r3, #0
 8003130:	d16c      	bne.n	800320c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003132:	f107 0318 	add.w	r3, r7, #24
 8003136:	4939      	ldr	r1, [pc, #228]	; (800321c <scan_files+0x17c>)
 8003138:	4618      	mov	r0, r3
 800313a:	f009 fc0c 	bl	800c956 <f_readdir>
 800313e:	4603      	mov	r3, r0
 8003140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003144:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003148:	2b00      	cmp	r3, #0
 800314a:	d15a      	bne.n	8003202 <scan_files+0x162>
 800314c:	4b33      	ldr	r3, [pc, #204]	; (800321c <scan_files+0x17c>)
 800314e:	7a5b      	ldrb	r3, [r3, #9]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d056      	beq.n	8003202 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003154:	4b31      	ldr	r3, [pc, #196]	; (800321c <scan_files+0x17c>)
 8003156:	7a1b      	ldrb	r3, [r3, #8]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d14e      	bne.n	80031fe <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8003160:	466b      	mov	r3, sp
 8003162:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003164:	482e      	ldr	r0, [pc, #184]	; (8003220 <scan_files+0x180>)
 8003166:	f7fd f843 	bl	80001f0 <strlen>
 800316a:	4604      	mov	r4, r0
 800316c:	4623      	mov	r3, r4
 800316e:	3b01      	subs	r3, #1
 8003170:	653b      	str	r3, [r7, #80]	; 0x50
 8003172:	4620      	mov	r0, r4
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	00cb      	lsls	r3, r1, #3
 8003182:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003186:	00c2      	lsls	r2, r0, #3
 8003188:	4620      	mov	r0, r4
 800318a:	f04f 0100 	mov.w	r1, #0
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	00cb      	lsls	r3, r1, #3
 8003198:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800319c:	00c2      	lsls	r2, r0, #3
 800319e:	1de3      	adds	r3, r4, #7
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	ebad 0d03 	sub.w	sp, sp, r3
 80031a8:	466b      	mov	r3, sp
 80031aa:	3300      	adds	r3, #0
 80031ac:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 80031ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b0:	4619      	mov	r1, r3
 80031b2:	481b      	ldr	r0, [pc, #108]	; (8003220 <scan_files+0x180>)
 80031b4:	f000 f8aa 	bl	800330c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 80031b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ba:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80031be:	4619      	mov	r1, r3
 80031c0:	4817      	ldr	r0, [pc, #92]	; (8003220 <scan_files+0x180>)
 80031c2:	f00a fc4e 	bl	800da62 <strncmp>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 80031cc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d112      	bne.n	80031fa <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 80031d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031d6:	f107 0214 	add.w	r2, r7, #20
 80031da:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f820 	bl	8003224 <extract_filename_suffix>
 80031e4:	4603      	mov	r3, r0
 80031e6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d202      	bcs.n	80031fa <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	46b5      	mov	sp, r6
 80031fc:	e799      	b.n	8003132 <scan_files+0x92>
            	continue; // don't enter directory
 80031fe:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003200:	e797      	b.n	8003132 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8003202:	f107 0318 	add.w	r3, r7, #24
 8003206:	4618      	mov	r0, r3
 8003208:	f009 fb7f 	bl	800c90a <f_closedir>
    }

    return res;
 800320c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003210:	46ad      	mov	sp, r5
}
 8003212:	4618      	mov	r0, r3
 8003214:	3764      	adds	r7, #100	; 0x64
 8003216:	46bd      	mov	sp, r7
 8003218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800321a:	bf00      	nop
 800321c:	20000484 	.word	0x20000484
 8003220:	2000048d 	.word	0x2000048d

08003224 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8003224:	b5b0      	push	{r4, r5, r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	460b      	mov	r3, r1
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	72fb      	strb	r3, [r7, #11]
 8003232:	466b      	mov	r3, sp
 8003234:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7fc ffda 	bl	80001f0 <strlen>
 800323c:	4603      	mov	r3, r0
 800323e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8003240:	2308      	movs	r3, #8
 8003242:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003244:	7f7c      	ldrb	r4, [r7, #29]
 8003246:	4623      	mov	r3, r4
 8003248:	3b01      	subs	r3, #1
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	b2e0      	uxtb	r0, r4
 800324e:	f04f 0100 	mov.w	r1, #0
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	00cb      	lsls	r3, r1, #3
 800325c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003260:	00c2      	lsls	r2, r0, #3
 8003262:	b2e0      	uxtb	r0, r4
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00cb      	lsls	r3, r1, #3
 8003272:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003276:	00c2      	lsls	r2, r0, #3
 8003278:	4623      	mov	r3, r4
 800327a:	3307      	adds	r3, #7
 800327c:	08db      	lsrs	r3, r3, #3
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	ebad 0d03 	sub.w	sp, sp, r3
 8003284:	466b      	mov	r3, sp
 8003286:	3300      	adds	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e014      	b.n	80032ba <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8003290:	7afb      	ldrb	r3, [r7, #11]
 8003292:	1e5a      	subs	r2, r3, #1
 8003294:	7ffb      	ldrb	r3, [r7, #31]
 8003296:	441a      	add	r2, r3
 8003298:	7fbb      	ldrb	r3, [r7, #30]
 800329a:	3b01      	subs	r3, #1
 800329c:	429a      	cmp	r2, r3
 800329e:	da11      	bge.n	80032c4 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 80032a0:	7afa      	ldrb	r2, [r7, #11]
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	4413      	add	r3, r2
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	441a      	add	r2, r3
 80032ac:	7ffb      	ldrb	r3, [r7, #31]
 80032ae:	7811      	ldrb	r1, [r2, #0]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 80032b4:	7ffb      	ldrb	r3, [r7, #31]
 80032b6:	3301      	adds	r3, #1
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	7ffa      	ldrb	r2, [r7, #31]
 80032bc:	7f7b      	ldrb	r3, [r7, #29]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d3e6      	bcc.n	8003290 <extract_filename_suffix+0x6c>
 80032c2:	e000      	b.n	80032c6 <extract_filename_suffix+0xa2>
		}
		else break;
 80032c4:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f107 0110 	add.w	r1, r7, #16
 80032cc:	220a      	movs	r2, #10
 80032ce:	4618      	mov	r0, r3
 80032d0:	f00b fa8c 	bl	800e7ec <strtol>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d00a      	beq.n	80032fa <extract_filename_suffix+0xd6>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ec:	d005      	beq.n	80032fa <extract_filename_suffix+0xd6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d101      	bne.n	80032fe <extract_filename_suffix+0xda>
	{
		return 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <extract_filename_suffix+0xdc>
	}

	return 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	46ad      	mov	sp, r5
}
 8003302:	4618      	mov	r0, r3
 8003304:	3720      	adds	r7, #32
 8003306:	46bd      	mov	sp, r7
 8003308:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800330c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	e019      	b.n	8003350 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 800331c:	7bfb      	ldrb	r3, [r7, #15]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	73bb      	strb	r3, [r7, #14]
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	3301      	adds	r3, #1
 800332a:	4a0f      	ldr	r2, [pc, #60]	; (8003368 <str2upper+0x5c>)
 800332c:	4413      	add	r3, r2
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d102      	bne.n	800333e <str2upper+0x32>
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	3b20      	subs	r3, #32
 800333c:	e000      	b.n	8003340 <str2upper+0x34>
 800333e:	7bbb      	ldrb	r3, [r7, #14]
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	440a      	add	r2, r1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	3301      	adds	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	7bfc      	ldrb	r4, [r7, #15]
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fc ff4c 	bl	80001f0 <strlen>
 8003358:	4603      	mov	r3, r0
 800335a:	429c      	cmp	r4, r3
 800335c:	d3de      	bcc.n	800331c <str2upper+0x10>
	}
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bd90      	pop	{r4, r7, pc}
 8003368:	080116a0 	.word	0x080116a0

0800336c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_MspInit+0x4c>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	4a0f      	ldr	r2, [pc, #60]	; (80033b8 <HAL_MspInit+0x4c>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003380:	6453      	str	r3, [r2, #68]	; 0x44
 8003382:	4b0d      	ldr	r3, [pc, #52]	; (80033b8 <HAL_MspInit+0x4c>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800338a:	607b      	str	r3, [r7, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	603b      	str	r3, [r7, #0]
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_MspInit+0x4c>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <HAL_MspInit+0x4c>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_MspInit+0x4c>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800

080033bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b08a      	sub	sp, #40	; 0x28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0314 	add.w	r3, r7, #20
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_ADC_MspInit+0x7c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d127      	bne.n	800342e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_ADC_MspInit+0x80>)
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	4a15      	ldr	r2, [pc, #84]	; (800343c <HAL_ADC_MspInit+0x80>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ec:	6453      	str	r3, [r2, #68]	; 0x44
 80033ee:	4b13      	ldr	r3, [pc, #76]	; (800343c <HAL_ADC_MspInit+0x80>)
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4b0f      	ldr	r3, [pc, #60]	; (800343c <HAL_ADC_MspInit+0x80>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a0e      	ldr	r2, [pc, #56]	; (800343c <HAL_ADC_MspInit+0x80>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <HAL_ADC_MspInit+0x80>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8003416:	2340      	movs	r3, #64	; 0x40
 8003418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800341a:	2303      	movs	r3, #3
 800341c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	4619      	mov	r1, r3
 8003428:	4805      	ldr	r0, [pc, #20]	; (8003440 <HAL_ADC_MspInit+0x84>)
 800342a:	f001 f9ff 	bl	800482c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800342e:	bf00      	nop
 8003430:	3728      	adds	r7, #40	; 0x28
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40012000 	.word	0x40012000
 800343c:	40023800 	.word	0x40023800
 8003440:	40020000 	.word	0x40020000

08003444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08e      	sub	sp, #56	; 0x38
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800344c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a5c      	ldr	r2, [pc, #368]	; (80035d4 <HAL_I2C_MspInit+0x190>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d12d      	bne.n	80034c2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	623b      	str	r3, [r7, #32]
 800346a:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	4a5a      	ldr	r2, [pc, #360]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 8003470:	f043 0302 	orr.w	r3, r3, #2
 8003474:	6313      	str	r3, [r2, #48]	; 0x30
 8003476:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 8003478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	623b      	str	r3, [r7, #32]
 8003480:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003488:	2312      	movs	r3, #18
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800348c:	2301      	movs	r3, #1
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003494:	2304      	movs	r3, #4
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800349c:	4619      	mov	r1, r3
 800349e:	484f      	ldr	r0, [pc, #316]	; (80035dc <HAL_I2C_MspInit+0x198>)
 80034a0:	f001 f9c4 	bl	800482c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034a4:	2300      	movs	r3, #0
 80034a6:	61fb      	str	r3, [r7, #28]
 80034a8:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	4a4a      	ldr	r2, [pc, #296]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 80034ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034b2:	6413      	str	r3, [r2, #64]	; 0x40
 80034b4:	4b48      	ldr	r3, [pc, #288]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034bc:	61fb      	str	r3, [r7, #28]
 80034be:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80034c0:	e083      	b.n	80035ca <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a46      	ldr	r2, [pc, #280]	; (80035e0 <HAL_I2C_MspInit+0x19c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d12d      	bne.n	8003528 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	4a40      	ldr	r2, [pc, #256]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 80034d6:	f043 0302 	orr.w	r3, r3, #2
 80034da:	6313      	str	r3, [r2, #48]	; 0x30
 80034dc:	4b3e      	ldr	r3, [pc, #248]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034ee:	2312      	movs	r3, #18
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034f2:	2301      	movs	r3, #1
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034f6:	2303      	movs	r3, #3
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80034fa:	2304      	movs	r3, #4
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003502:	4619      	mov	r1, r3
 8003504:	4835      	ldr	r0, [pc, #212]	; (80035dc <HAL_I2C_MspInit+0x198>)
 8003506:	f001 f991 	bl	800482c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	4b32      	ldr	r3, [pc, #200]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a31      	ldr	r2, [pc, #196]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 8003514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b2f      	ldr	r3, [pc, #188]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]
}
 8003526:	e050      	b.n	80035ca <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a2d      	ldr	r2, [pc, #180]	; (80035e4 <HAL_I2C_MspInit+0x1a0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d14b      	bne.n	80035ca <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 8003538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353a:	4a27      	ldr	r2, [pc, #156]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800356a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003570:	2312      	movs	r3, #18
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003574:	2301      	movs	r3, #1
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003578:	2303      	movs	r3, #3
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800357c:	2304      	movs	r3, #4
 800357e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003584:	4619      	mov	r1, r3
 8003586:	4818      	ldr	r0, [pc, #96]	; (80035e8 <HAL_I2C_MspInit+0x1a4>)
 8003588:	f001 f950 	bl	800482c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800358c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003592:	2312      	movs	r3, #18
 8003594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003596:	2301      	movs	r3, #1
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359a:	2303      	movs	r3, #3
 800359c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800359e:	2304      	movs	r3, #4
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035a6:	4619      	mov	r1, r3
 80035a8:	4810      	ldr	r0, [pc, #64]	; (80035ec <HAL_I2C_MspInit+0x1a8>)
 80035aa:	f001 f93f 	bl	800482c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a08      	ldr	r2, [pc, #32]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 80035b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_I2C_MspInit+0x194>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
}
 80035ca:	bf00      	nop
 80035cc:	3738      	adds	r7, #56	; 0x38
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40005400 	.word	0x40005400
 80035d8:	40023800 	.word	0x40023800
 80035dc:	40020400 	.word	0x40020400
 80035e0:	40005800 	.word	0x40005800
 80035e4:	40005c00 	.word	0x40005c00
 80035e8:	40020800 	.word	0x40020800
 80035ec:	40020000 	.word	0x40020000

080035f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a05      	ldr	r2, [pc, #20]	; (8003614 <HAL_RTC_MspInit+0x24>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d102      	bne.n	8003608 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RTC_MspInit+0x28>)
 8003604:	2201      	movs	r2, #1
 8003606:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	40002800 	.word	0x40002800
 8003618:	42470e3c 	.word	0x42470e3c

0800361c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08e      	sub	sp, #56	; 0x38
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a4c      	ldr	r2, [pc, #304]	; (800376c <HAL_SPI_MspInit+0x150>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d12d      	bne.n	800369a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	4b4b      	ldr	r3, [pc, #300]	; (8003770 <HAL_SPI_MspInit+0x154>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	4a4a      	ldr	r2, [pc, #296]	; (8003770 <HAL_SPI_MspInit+0x154>)
 8003648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800364c:	6413      	str	r3, [r2, #64]	; 0x40
 800364e:	4b48      	ldr	r3, [pc, #288]	; (8003770 <HAL_SPI_MspInit+0x154>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	4b44      	ldr	r3, [pc, #272]	; (8003770 <HAL_SPI_MspInit+0x154>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a43      	ldr	r2, [pc, #268]	; (8003770 <HAL_SPI_MspInit+0x154>)
 8003664:	f043 0302 	orr.w	r3, r3, #2
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b41      	ldr	r3, [pc, #260]	; (8003770 <HAL_SPI_MspInit+0x154>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003676:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367c:	2302      	movs	r3, #2
 800367e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003680:	2301      	movs	r3, #1
 8003682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003684:	2303      	movs	r3, #3
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003688:	2305      	movs	r3, #5
 800368a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003690:	4619      	mov	r1, r3
 8003692:	4838      	ldr	r0, [pc, #224]	; (8003774 <HAL_SPI_MspInit+0x158>)
 8003694:	f001 f8ca 	bl	800482c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8003698:	e064      	b.n	8003764 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a36      	ldr	r2, [pc, #216]	; (8003778 <HAL_SPI_MspInit+0x15c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d12d      	bne.n	8003700 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
 80036a8:	4b31      	ldr	r3, [pc, #196]	; (8003770 <HAL_SPI_MspInit+0x154>)
 80036aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ac:	4a30      	ldr	r2, [pc, #192]	; (8003770 <HAL_SPI_MspInit+0x154>)
 80036ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036b2:	6453      	str	r3, [r2, #68]	; 0x44
 80036b4:	4b2e      	ldr	r3, [pc, #184]	; (8003770 <HAL_SPI_MspInit+0x154>)
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	4b2a      	ldr	r3, [pc, #168]	; (8003770 <HAL_SPI_MspInit+0x154>)
 80036c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c8:	4a29      	ldr	r2, [pc, #164]	; (8003770 <HAL_SPI_MspInit+0x154>)
 80036ca:	f043 0310 	orr.w	r3, r3, #16
 80036ce:	6313      	str	r3, [r2, #48]	; 0x30
 80036d0:	4b27      	ldr	r3, [pc, #156]	; (8003770 <HAL_SPI_MspInit+0x154>)
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80036dc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e2:	2302      	movs	r3, #2
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ea:	2303      	movs	r3, #3
 80036ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80036ee:	2305      	movs	r3, #5
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f6:	4619      	mov	r1, r3
 80036f8:	4820      	ldr	r0, [pc, #128]	; (800377c <HAL_SPI_MspInit+0x160>)
 80036fa:	f001 f897 	bl	800482c <HAL_GPIO_Init>
}
 80036fe:	e031      	b.n	8003764 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <HAL_SPI_MspInit+0x164>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d12c      	bne.n	8003764 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
 800370e:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_SPI_MspInit+0x154>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_SPI_MspInit+0x154>)
 8003714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003718:	6453      	str	r3, [r2, #68]	; 0x44
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <HAL_SPI_MspInit+0x154>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_SPI_MspInit+0x154>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a10      	ldr	r2, [pc, #64]	; (8003770 <HAL_SPI_MspInit+0x154>)
 8003730:	f043 0320 	orr.w	r3, r3, #32
 8003734:	6313      	str	r3, [r2, #48]	; 0x30
 8003736:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_SPI_MspInit+0x154>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003742:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003748:	2302      	movs	r3, #2
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800374c:	2301      	movs	r3, #1
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003750:	2303      	movs	r3, #3
 8003752:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003754:	2305      	movs	r3, #5
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800375c:	4619      	mov	r1, r3
 800375e:	4809      	ldr	r0, [pc, #36]	; (8003784 <HAL_SPI_MspInit+0x168>)
 8003760:	f001 f864 	bl	800482c <HAL_GPIO_Init>
}
 8003764:	bf00      	nop
 8003766:	3738      	adds	r7, #56	; 0x38
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40003800 	.word	0x40003800
 8003770:	40023800 	.word	0x40023800
 8003774:	40020400 	.word	0x40020400
 8003778:	40013400 	.word	0x40013400
 800377c:	40021000 	.word	0x40021000
 8003780:	40015000 	.word	0x40015000
 8003784:	40021400 	.word	0x40021400

08003788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003798:	d10e      	bne.n	80037b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b16      	ldr	r3, [pc, #88]	; (80037f8 <HAL_TIM_Base_MspInit+0x70>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <HAL_TIM_Base_MspInit+0x70>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_TIM_Base_MspInit+0x70>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037b6:	e01a      	b.n	80037ee <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0f      	ldr	r2, [pc, #60]	; (80037fc <HAL_TIM_Base_MspInit+0x74>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d115      	bne.n	80037ee <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_TIM_Base_MspInit+0x70>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	4a0b      	ldr	r2, [pc, #44]	; (80037f8 <HAL_TIM_Base_MspInit+0x70>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6413      	str	r3, [r2, #64]	; 0x40
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_TIM_Base_MspInit+0x70>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2100      	movs	r1, #0
 80037e2:	201e      	movs	r0, #30
 80037e4:	f000 ffc9 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80037e8:	201e      	movs	r0, #30
 80037ea:	f000 ffe2 	bl	80047b2 <HAL_NVIC_EnableIRQ>
}
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40000800 	.word	0x40000800

08003800 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003808:	f107 030c 	add.w	r3, r7, #12
 800380c:	2200      	movs	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	605a      	str	r2, [r3, #4]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d11d      	bne.n	800385e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	4b10      	ldr	r3, [pc, #64]	; (8003868 <HAL_TIM_MspPostInit+0x68>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	4a0f      	ldr	r2, [pc, #60]	; (8003868 <HAL_TIM_MspPostInit+0x68>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	6313      	str	r3, [r2, #48]	; 0x30
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <HAL_TIM_MspPostInit+0x68>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 800383e:	2304      	movs	r3, #4
 8003840:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800384e:	2301      	movs	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	4619      	mov	r1, r3
 8003858:	4804      	ldr	r0, [pc, #16]	; (800386c <HAL_TIM_MspPostInit+0x6c>)
 800385a:	f000 ffe7 	bl	800482c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800385e:	bf00      	nop
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	40020000 	.word	0x40020000

08003870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b08e      	sub	sp, #56	; 0x38
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	605a      	str	r2, [r3, #4]
 8003882:	609a      	str	r2, [r3, #8]
 8003884:	60da      	str	r2, [r3, #12]
 8003886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a4f      	ldr	r2, [pc, #316]	; (80039cc <HAL_UART_MspInit+0x15c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d12c      	bne.n	80038ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	623b      	str	r3, [r7, #32]
 8003896:	4b4e      	ldr	r3, [pc, #312]	; (80039d0 <HAL_UART_MspInit+0x160>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	4a4d      	ldr	r2, [pc, #308]	; (80039d0 <HAL_UART_MspInit+0x160>)
 800389c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038a0:	6413      	str	r3, [r2, #64]	; 0x40
 80038a2:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <HAL_UART_MspInit+0x160>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038aa:	623b      	str	r3, [r7, #32]
 80038ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_UART_MspInit+0x160>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a46      	ldr	r2, [pc, #280]	; (80039d0 <HAL_UART_MspInit+0x160>)
 80038b8:	f043 0310 	orr.w	r3, r3, #16
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <HAL_UART_MspInit+0x160>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0310 	and.w	r3, r3, #16
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 80038ca:	2303      	movs	r3, #3
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ce:	2302      	movs	r3, #2
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038d2:	2301      	movs	r3, #1
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d6:	2303      	movs	r3, #3
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80038da:	2308      	movs	r3, #8
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e2:	4619      	mov	r1, r3
 80038e4:	483b      	ldr	r0, [pc, #236]	; (80039d4 <HAL_UART_MspInit+0x164>)
 80038e6:	f000 ffa1 	bl	800482c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80038ea:	e06b      	b.n	80039c4 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART3)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a39      	ldr	r2, [pc, #228]	; (80039d8 <HAL_UART_MspInit+0x168>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d12d      	bne.n	8003952 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	4b35      	ldr	r3, [pc, #212]	; (80039d0 <HAL_UART_MspInit+0x160>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <HAL_UART_MspInit+0x160>)
 8003900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003904:	6413      	str	r3, [r2, #64]	; 0x40
 8003906:	4b32      	ldr	r3, [pc, #200]	; (80039d0 <HAL_UART_MspInit+0x160>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	4b2e      	ldr	r3, [pc, #184]	; (80039d0 <HAL_UART_MspInit+0x160>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <HAL_UART_MspInit+0x160>)
 800391c:	f043 0308 	orr.w	r3, r3, #8
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_UART_MspInit+0x160>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0308 	and.w	r3, r3, #8
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 800392e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003934:	2302      	movs	r3, #2
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800393c:	2303      	movs	r3, #3
 800393e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003940:	2307      	movs	r3, #7
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003948:	4619      	mov	r1, r3
 800394a:	4824      	ldr	r0, [pc, #144]	; (80039dc <HAL_UART_MspInit+0x16c>)
 800394c:	f000 ff6e 	bl	800482c <HAL_GPIO_Init>
}
 8003950:	e038      	b.n	80039c4 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART6)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a22      	ldr	r2, [pc, #136]	; (80039e0 <HAL_UART_MspInit+0x170>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d133      	bne.n	80039c4 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	4b1b      	ldr	r3, [pc, #108]	; (80039d0 <HAL_UART_MspInit+0x160>)
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	4a1a      	ldr	r2, [pc, #104]	; (80039d0 <HAL_UART_MspInit+0x160>)
 8003966:	f043 0320 	orr.w	r3, r3, #32
 800396a:	6453      	str	r3, [r2, #68]	; 0x44
 800396c:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <HAL_UART_MspInit+0x160>)
 800396e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <HAL_UART_MspInit+0x160>)
 800397e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003980:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <HAL_UART_MspInit+0x160>)
 8003982:	f043 0304 	orr.w	r3, r3, #4
 8003986:	6313      	str	r3, [r2, #48]	; 0x30
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <HAL_UART_MspInit+0x160>)
 800398a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8003994:	23c0      	movs	r3, #192	; 0xc0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039a0:	2303      	movs	r3, #3
 80039a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80039a4:	2308      	movs	r3, #8
 80039a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039ac:	4619      	mov	r1, r3
 80039ae:	480d      	ldr	r0, [pc, #52]	; (80039e4 <HAL_UART_MspInit+0x174>)
 80039b0:	f000 ff3c 	bl	800482c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2100      	movs	r1, #0
 80039b8:	2047      	movs	r0, #71	; 0x47
 80039ba:	f000 fede 	bl	800477a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80039be:	2047      	movs	r0, #71	; 0x47
 80039c0:	f000 fef7 	bl	80047b2 <HAL_NVIC_EnableIRQ>
}
 80039c4:	bf00      	nop
 80039c6:	3738      	adds	r7, #56	; 0x38
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40007c00 	.word	0x40007c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40004800 	.word	0x40004800
 80039dc:	40020c00 	.word	0x40020c00
 80039e0:	40011400 	.word	0x40011400
 80039e4:	40020800 	.word	0x40020800

080039e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80039ec:	bf00      	nop
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039f6:	b480      	push	{r7}
 80039f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039fa:	e7fe      	b.n	80039fa <HardFault_Handler+0x4>

080039fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a00:	e7fe      	b.n	8003a00 <MemManage_Handler+0x4>

08003a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a06:	e7fe      	b.n	8003a06 <BusFault_Handler+0x4>

08003a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a0c:	e7fe      	b.n	8003a0c <UsageFault_Handler+0x4>

08003a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a20:	bf00      	nop
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a3c:	f000 f982 	bl	8003d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f001 f8cd 	bl	8004be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <TIM4_IRQHandler+0x10>)
 8003a5a:	f004 f807 	bl	8007a6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000644 	.word	0x20000644

08003a68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <USART6_IRQHandler+0x10>)
 8003a6e:	f004 ff3d 	bl	80088ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000c54 	.word	0x20000c54

08003a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
	return 1;
 8003a80:	2301      	movs	r3, #1
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <_kill>:

int _kill(int pid, int sig)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a96:	f008 fff7 	bl	800ca88 <__errno>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2216      	movs	r2, #22
 8003a9e:	601a      	str	r2, [r3, #0]
	return -1;
 8003aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <_exit>:

void _exit (int status)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff ffe7 	bl	8003a8c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003abe:	e7fe      	b.n	8003abe <_exit+0x12>

08003ac0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e00a      	b.n	8003ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ad2:	f3af 8000 	nop.w
 8003ad6:	4601      	mov	r1, r0
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	60ba      	str	r2, [r7, #8]
 8003ade:	b2ca      	uxtb	r2, r1
 8003ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dbf0      	blt.n	8003ad2 <_read+0x12>
	}

return len;
 8003af0:	687b      	ldr	r3, [r7, #4]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b086      	sub	sp, #24
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e009      	b.n	8003b20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	60ba      	str	r2, [r7, #8]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	dbf1      	blt.n	8003b0c <_write+0x12>
	}
	return len;
 8003b28:	687b      	ldr	r3, [r7, #4]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <_close>:

int _close(int file)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
	return -1;
 8003b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <_isatty>:

int _isatty(int file)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
	return 1;
 8003b72:	2301      	movs	r3, #1
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <_sbrk+0x5c>)
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <_sbrk+0x60>)
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bb0:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <_sbrk+0x64>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bb8:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <_sbrk+0x64>)
 8003bba:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <_sbrk+0x68>)
 8003bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <_sbrk+0x64>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d207      	bcs.n	8003bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bcc:	f008 ff5c 	bl	800ca88 <__errno>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	220c      	movs	r2, #12
 8003bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bda:	e009      	b.n	8003bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <_sbrk+0x64>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003be2:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <_sbrk+0x64>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4413      	add	r3, r2
 8003bea:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <_sbrk+0x64>)
 8003bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20030000 	.word	0x20030000
 8003bfc:	00000400 	.word	0x00000400
 8003c00:	2000049c 	.word	0x2000049c
 8003c04:	20001798 	.word	0x20001798

08003c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <SystemInit+0x28>)
 8003c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c12:	4a07      	ldr	r2, [pc, #28]	; (8003c30 <SystemInit+0x28>)
 8003c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <SystemInit+0x28>)
 8003c1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c22:	609a      	str	r2, [r3, #8]
#endif
}
 8003c24:	bf00      	nop
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	e000ed00 	.word	0xe000ed00

08003c34 <VR_Power_On>:


#include "main.h"


void VR_Power_On() {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, SET);
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c3e:	4802      	ldr	r0, [pc, #8]	; (8003c48 <VR_Power_On+0x14>)
 8003c40:	f000 ffb8 	bl	8004bb4 <HAL_GPIO_WritePin>
	// note that runcam needs around 3-5 seconds to fully power on
//	HAL_Delay(5000);
}
 8003c44:	bf00      	nop
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021800 	.word	0x40021800

08003c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c52:	e003      	b.n	8003c5c <LoopCopyDataInit>

08003c54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c54:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c5a:	3104      	adds	r1, #4

08003c5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c5c:	480b      	ldr	r0, [pc, #44]	; (8003c8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c64:	d3f6      	bcc.n	8003c54 <CopyDataInit>
  ldr  r2, =_sbss
 8003c66:	4a0b      	ldr	r2, [pc, #44]	; (8003c94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003c68:	e002      	b.n	8003c70 <LoopFillZerobss>

08003c6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c6c:	f842 3b04 	str.w	r3, [r2], #4

08003c70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c70:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c74:	d3f9      	bcc.n	8003c6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c76:	f7ff ffc7 	bl	8003c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c7a:	f008 ff0b 	bl	800ca94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c7e:	f7fe f8e1 	bl	8001e44 <main>
  bx  lr    
 8003c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c84:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003c88:	08011b6c 	.word	0x08011b6c
  ldr  r0, =_sdata
 8003c8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c90:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 8003c94:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8003c98:	20001798 	.word	0x20001798

08003c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c9c:	e7fe      	b.n	8003c9c <ADC_IRQHandler>
	...

08003ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_Init+0x40>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0d      	ldr	r2, [pc, #52]	; (8003ce0 <HAL_Init+0x40>)
 8003caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_Init+0x40>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <HAL_Init+0x40>)
 8003cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cbc:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <HAL_Init+0x40>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a07      	ldr	r2, [pc, #28]	; (8003ce0 <HAL_Init+0x40>)
 8003cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cc8:	2003      	movs	r0, #3
 8003cca:	f000 fd4b 	bl	8004764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cce:	2000      	movs	r0, #0
 8003cd0:	f000 f808 	bl	8003ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cd4:	f7ff fb4a 	bl	800336c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023c00 	.word	0x40023c00

08003ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <HAL_InitTick+0x54>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <HAL_InitTick+0x58>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fd63 	bl	80047ce <HAL_SYSTICK_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00e      	b.n	8003d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b0f      	cmp	r3, #15
 8003d16:	d80a      	bhi.n	8003d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	f000 fd2b 	bl	800477a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d24:	4a06      	ldr	r2, [pc, #24]	; (8003d40 <HAL_InitTick+0x5c>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e000      	b.n	8003d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	20000008 	.word	0x20000008
 8003d40:	20000004 	.word	0x20000004

08003d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_IncTick+0x20>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_IncTick+0x24>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4413      	add	r3, r2
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <HAL_IncTick+0x24>)
 8003d56:	6013      	str	r3, [r2, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000008 	.word	0x20000008
 8003d68:	20001314 	.word	0x20001314

08003d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <HAL_GetTick+0x14>)
 8003d72:	681b      	ldr	r3, [r3, #0]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20001314 	.word	0x20001314

08003d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d8c:	f7ff ffee 	bl	8003d6c <HAL_GetTick>
 8003d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9c:	d005      	beq.n	8003daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	; (8003dc8 <HAL_Delay+0x44>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003daa:	bf00      	nop
 8003dac:	f7ff ffde 	bl	8003d6c <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d8f7      	bhi.n	8003dac <HAL_Delay+0x28>
  {
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	20000008 	.word	0x20000008

08003dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e033      	b.n	8003e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff fae6 	bl	80033bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d118      	bne.n	8003e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e12:	f023 0302 	bic.w	r3, r3, #2
 8003e16:	f043 0202 	orr.w	r2, r3, #2
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fad4 	bl	80043cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f023 0303 	bic.w	r3, r3, #3
 8003e32:	f043 0201 	orr.w	r2, r3, #1
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
 8003e3a:	e001      	b.n	8003e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_ADC_Start+0x1a>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e0a5      	b.n	8003fba <HAL_ADC_Start+0x166>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d018      	beq.n	8003eb6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e94:	4b4c      	ldr	r3, [pc, #304]	; (8003fc8 <HAL_ADC_Start+0x174>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a4c      	ldr	r2, [pc, #304]	; (8003fcc <HAL_ADC_Start+0x178>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	0c9a      	lsrs	r2, r3, #18
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ea8:	e002      	b.n	8003eb0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f9      	bne.n	8003eaa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d179      	bne.n	8003fb8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	d106      	bne.n	8003f12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	f023 0206 	bic.w	r2, r3, #6
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	645a      	str	r2, [r3, #68]	; 0x44
 8003f10:	e002      	b.n	8003f18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f20:	4b2b      	ldr	r3, [pc, #172]	; (8003fd0 <HAL_ADC_Start+0x17c>)
 8003f22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d12a      	bne.n	8003f90 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a25      	ldr	r2, [pc, #148]	; (8003fd4 <HAL_ADC_Start+0x180>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d015      	beq.n	8003f70 <HAL_ADC_Start+0x11c>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a23      	ldr	r2, [pc, #140]	; (8003fd8 <HAL_ADC_Start+0x184>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d105      	bne.n	8003f5a <HAL_ADC_Start+0x106>
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_ADC_Start+0x17c>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_ADC_Start+0x188>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d129      	bne.n	8003fb8 <HAL_ADC_Start+0x164>
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_ADC_Start+0x17c>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d123      	bne.n	8003fb8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f8c:	609a      	str	r2, [r3, #8]
 8003f8e:	e013      	b.n	8003fb8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <HAL_ADC_Start+0x180>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10e      	bne.n	8003fb8 <HAL_ADC_Start+0x164>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d107      	bne.n	8003fb8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689a      	ldr	r2, [r3, #8]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fb6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	20000000 	.word	0x20000000
 8003fcc:	431bde83 	.word	0x431bde83
 8003fd0:	40012300 	.word	0x40012300
 8003fd4:	40012000 	.word	0x40012000
 8003fd8:	40012100 	.word	0x40012100
 8003fdc:	40012200 	.word	0x40012200

08003fe0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_Stop+0x16>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e021      	b.n	800403a <HAL_ADC_Stop+0x5a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d109      	bne.n	8004030 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	f043 0201 	orr.w	r2, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d113      	bne.n	800408c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800406e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004072:	d10b      	bne.n	800408c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f043 0220 	orr.w	r2, r3, #32
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e05c      	b.n	8004146 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800408c:	f7ff fe6e 	bl	8003d6c <HAL_GetTick>
 8004090:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004092:	e01a      	b.n	80040ca <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409a:	d016      	beq.n	80040ca <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_ADC_PollForConversion+0x6c>
 80040a2:	f7ff fe63 	bl	8003d6c <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d20b      	bcs.n	80040ca <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f043 0204 	orr.w	r2, r3, #4
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e03d      	b.n	8004146 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d1dd      	bne.n	8004094 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0212 	mvn.w	r2, #18
 80040e0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d123      	bne.n	8004144 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004100:	2b00      	cmp	r3, #0
 8004102:	d11f      	bne.n	8004144 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800410e:	2b00      	cmp	r3, #0
 8004110:	d006      	beq.n	8004120 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800411c:	2b00      	cmp	r3, #0
 800411e:	d111      	bne.n	8004144 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f043 0201 	orr.w	r2, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800415c:	4618      	mov	r0, r3
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x1c>
 8004180:	2302      	movs	r3, #2
 8004182:	e113      	b.n	80043ac <HAL_ADC_ConfigChannel+0x244>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b09      	cmp	r3, #9
 8004192:	d925      	bls.n	80041e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68d9      	ldr	r1, [r3, #12]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	461a      	mov	r2, r3
 80041a2:	4613      	mov	r3, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4413      	add	r3, r2
 80041a8:	3b1e      	subs	r3, #30
 80041aa:	2207      	movs	r2, #7
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43da      	mvns	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	400a      	ands	r2, r1
 80041b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68d9      	ldr	r1, [r3, #12]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	4618      	mov	r0, r3
 80041cc:	4603      	mov	r3, r0
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4403      	add	r3, r0
 80041d2:	3b1e      	subs	r3, #30
 80041d4:	409a      	lsls	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	e022      	b.n	8004226 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6919      	ldr	r1, [r3, #16]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	461a      	mov	r2, r3
 80041ee:	4613      	mov	r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4413      	add	r3, r2
 80041f4:	2207      	movs	r2, #7
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43da      	mvns	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	400a      	ands	r2, r1
 8004202:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6919      	ldr	r1, [r3, #16]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	4618      	mov	r0, r3
 8004216:	4603      	mov	r3, r0
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4403      	add	r3, r0
 800421c:	409a      	lsls	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	2b06      	cmp	r3, #6
 800422c:	d824      	bhi.n	8004278 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	3b05      	subs	r3, #5
 8004240:	221f      	movs	r2, #31
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	43da      	mvns	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	400a      	ands	r2, r1
 800424e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	4618      	mov	r0, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	3b05      	subs	r3, #5
 800426a:	fa00 f203 	lsl.w	r2, r0, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	635a      	str	r2, [r3, #52]	; 0x34
 8004276:	e04c      	b.n	8004312 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d824      	bhi.n	80042ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	3b23      	subs	r3, #35	; 0x23
 8004292:	221f      	movs	r2, #31
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43da      	mvns	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	400a      	ands	r2, r1
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	4618      	mov	r0, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	3b23      	subs	r3, #35	; 0x23
 80042bc:	fa00 f203 	lsl.w	r2, r0, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
 80042c8:	e023      	b.n	8004312 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	3b41      	subs	r3, #65	; 0x41
 80042dc:	221f      	movs	r2, #31
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43da      	mvns	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	400a      	ands	r2, r1
 80042ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	4618      	mov	r0, r3
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	3b41      	subs	r3, #65	; 0x41
 8004306:	fa00 f203 	lsl.w	r2, r0, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004312:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <HAL_ADC_ConfigChannel+0x250>)
 8004314:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_ADC_ConfigChannel+0x254>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10f      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x1d8>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b12      	cmp	r3, #18
 8004326:	d10b      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <HAL_ADC_ConfigChannel+0x254>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d12b      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x23a>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1c      	ldr	r2, [pc, #112]	; (80043c0 <HAL_ADC_ConfigChannel+0x258>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <HAL_ADC_ConfigChannel+0x1f4>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b11      	cmp	r3, #17
 800435a:	d122      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a11      	ldr	r2, [pc, #68]	; (80043c0 <HAL_ADC_ConfigChannel+0x258>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d111      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_ADC_ConfigChannel+0x25c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a11      	ldr	r2, [pc, #68]	; (80043c8 <HAL_ADC_ConfigChannel+0x260>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	0c9a      	lsrs	r2, r3, #18
 800438a:	4613      	mov	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004394:	e002      	b.n	800439c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3b01      	subs	r3, #1
 800439a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f9      	bne.n	8004396 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40012300 	.word	0x40012300
 80043bc:	40012000 	.word	0x40012000
 80043c0:	10000012 	.word	0x10000012
 80043c4:	20000000 	.word	0x20000000
 80043c8:	431bde83 	.word	0x431bde83

080043cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043d4:	4b79      	ldr	r3, [pc, #484]	; (80045bc <ADC_Init+0x1f0>)
 80043d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004400:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	021a      	lsls	r2, r3, #8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004446:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	4a58      	ldr	r2, [pc, #352]	; (80045c0 <ADC_Init+0x1f4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d022      	beq.n	80044aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004472:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6899      	ldr	r1, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6899      	ldr	r1, [r3, #8]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	e00f      	b.n	80044ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0202 	bic.w	r2, r2, #2
 80044d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6899      	ldr	r1, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7e1b      	ldrb	r3, [r3, #24]
 80044e4:	005a      	lsls	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01b      	beq.n	8004530 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004506:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004516:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6859      	ldr	r1, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	3b01      	subs	r3, #1
 8004524:	035a      	lsls	r2, r3, #13
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	e007      	b.n	8004540 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800453e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800454e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	3b01      	subs	r3, #1
 800455c:	051a      	lsls	r2, r3, #20
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689a      	ldr	r2, [r3, #8]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6899      	ldr	r1, [r3, #8]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004582:	025a      	lsls	r2, r3, #9
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800459a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6899      	ldr	r1, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	029a      	lsls	r2, r3, #10
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]
}
 80045b0:	bf00      	nop
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	40012300 	.word	0x40012300
 80045c0:	0f000001 	.word	0x0f000001

080045c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f003 0307 	and.w	r3, r3, #7
 80045d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <__NVIC_SetPriorityGrouping+0x44>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045e0:	4013      	ands	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045f6:	4a04      	ldr	r2, [pc, #16]	; (8004608 <__NVIC_SetPriorityGrouping+0x44>)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	60d3      	str	r3, [r2, #12]
}
 80045fc:	bf00      	nop
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <__NVIC_GetPriorityGrouping+0x18>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	0a1b      	lsrs	r3, r3, #8
 8004616:	f003 0307 	and.w	r3, r3, #7
}
 800461a:	4618      	mov	r0, r3
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	e000ed00 	.word	0xe000ed00

08004628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	2b00      	cmp	r3, #0
 8004638:	db0b      	blt.n	8004652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	f003 021f 	and.w	r2, r3, #31
 8004640:	4907      	ldr	r1, [pc, #28]	; (8004660 <__NVIC_EnableIRQ+0x38>)
 8004642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	2001      	movs	r0, #1
 800464a:	fa00 f202 	lsl.w	r2, r0, r2
 800464e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	e000e100 	.word	0xe000e100

08004664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	6039      	str	r1, [r7, #0]
 800466e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004674:	2b00      	cmp	r3, #0
 8004676:	db0a      	blt.n	800468e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	490c      	ldr	r1, [pc, #48]	; (80046b0 <__NVIC_SetPriority+0x4c>)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	0112      	lsls	r2, r2, #4
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	440b      	add	r3, r1
 8004688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800468c:	e00a      	b.n	80046a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	4908      	ldr	r1, [pc, #32]	; (80046b4 <__NVIC_SetPriority+0x50>)
 8004694:	79fb      	ldrb	r3, [r7, #7]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	3b04      	subs	r3, #4
 800469c:	0112      	lsls	r2, r2, #4
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	440b      	add	r3, r1
 80046a2:	761a      	strb	r2, [r3, #24]
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000e100 	.word	0xe000e100
 80046b4:	e000ed00 	.word	0xe000ed00

080046b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	; 0x24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 0307 	and.w	r3, r3, #7
 80046ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f1c3 0307 	rsb	r3, r3, #7
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	bf28      	it	cs
 80046d6:	2304      	movcs	r3, #4
 80046d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	3304      	adds	r3, #4
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d902      	bls.n	80046e8 <NVIC_EncodePriority+0x30>
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3b03      	subs	r3, #3
 80046e6:	e000      	b.n	80046ea <NVIC_EncodePriority+0x32>
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ec:	f04f 32ff 	mov.w	r2, #4294967295
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43da      	mvns	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	401a      	ands	r2, r3
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004700:	f04f 31ff 	mov.w	r1, #4294967295
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	fa01 f303 	lsl.w	r3, r1, r3
 800470a:	43d9      	mvns	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004710:	4313      	orrs	r3, r2
         );
}
 8004712:	4618      	mov	r0, r3
 8004714:	3724      	adds	r7, #36	; 0x24
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3b01      	subs	r3, #1
 800472c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004730:	d301      	bcc.n	8004736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004732:	2301      	movs	r3, #1
 8004734:	e00f      	b.n	8004756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004736:	4a0a      	ldr	r2, [pc, #40]	; (8004760 <SysTick_Config+0x40>)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3b01      	subs	r3, #1
 800473c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800473e:	210f      	movs	r1, #15
 8004740:	f04f 30ff 	mov.w	r0, #4294967295
 8004744:	f7ff ff8e 	bl	8004664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <SysTick_Config+0x40>)
 800474a:	2200      	movs	r2, #0
 800474c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800474e:	4b04      	ldr	r3, [pc, #16]	; (8004760 <SysTick_Config+0x40>)
 8004750:	2207      	movs	r2, #7
 8004752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	e000e010 	.word	0xe000e010

08004764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7ff ff29 	bl	80045c4 <__NVIC_SetPriorityGrouping>
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800477a:	b580      	push	{r7, lr}
 800477c:	b086      	sub	sp, #24
 800477e:	af00      	add	r7, sp, #0
 8004780:	4603      	mov	r3, r0
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	607a      	str	r2, [r7, #4]
 8004786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800478c:	f7ff ff3e 	bl	800460c <__NVIC_GetPriorityGrouping>
 8004790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	6978      	ldr	r0, [r7, #20]
 8004798:	f7ff ff8e 	bl	80046b8 <NVIC_EncodePriority>
 800479c:	4602      	mov	r2, r0
 800479e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047a2:	4611      	mov	r1, r2
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff ff5d 	bl	8004664 <__NVIC_SetPriority>
}
 80047aa:	bf00      	nop
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	4603      	mov	r3, r0
 80047ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff ff31 	bl	8004628 <__NVIC_EnableIRQ>
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff ffa2 	bl	8004720 <SysTick_Config>
 80047dc:	4603      	mov	r3, r0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d004      	beq.n	8004804 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2280      	movs	r2, #128	; 0x80
 80047fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e00c      	b.n	800481e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2205      	movs	r2, #5
 8004808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	; 0x24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	e177      	b.n	8004b38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004848:	2201      	movs	r2, #1
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	4013      	ands	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	f040 8166 	bne.w	8004b32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d00b      	beq.n	8004886 <HAL_GPIO_Init+0x5a>
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d007      	beq.n	8004886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800487a:	2b11      	cmp	r3, #17
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b12      	cmp	r3, #18
 8004884:	d130      	bne.n	80048e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	2203      	movs	r2, #3
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048bc:	2201      	movs	r2, #1
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 0201 	and.w	r2, r3, #1
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	2203      	movs	r2, #3
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4013      	ands	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b02      	cmp	r3, #2
 800491e:	d003      	beq.n	8004928 <HAL_GPIO_Init+0xfc>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b12      	cmp	r3, #18
 8004926:	d123      	bne.n	8004970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	08da      	lsrs	r2, r3, #3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3208      	adds	r2, #8
 8004930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	220f      	movs	r2, #15
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	f003 0307 	and.w	r3, r3, #7
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	08da      	lsrs	r2, r3, #3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	3208      	adds	r2, #8
 800496a:	69b9      	ldr	r1, [r7, #24]
 800496c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	2203      	movs	r2, #3
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f003 0203 	and.w	r2, r3, #3
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 80c0 	beq.w	8004b32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	4b66      	ldr	r3, [pc, #408]	; (8004b50 <HAL_GPIO_Init+0x324>)
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	4a65      	ldr	r2, [pc, #404]	; (8004b50 <HAL_GPIO_Init+0x324>)
 80049bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049c0:	6453      	str	r3, [r2, #68]	; 0x44
 80049c2:	4b63      	ldr	r3, [pc, #396]	; (8004b50 <HAL_GPIO_Init+0x324>)
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ce:	4a61      	ldr	r2, [pc, #388]	; (8004b54 <HAL_GPIO_Init+0x328>)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	3302      	adds	r3, #2
 80049d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	220f      	movs	r2, #15
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4013      	ands	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a58      	ldr	r2, [pc, #352]	; (8004b58 <HAL_GPIO_Init+0x32c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d037      	beq.n	8004a6a <HAL_GPIO_Init+0x23e>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a57      	ldr	r2, [pc, #348]	; (8004b5c <HAL_GPIO_Init+0x330>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d031      	beq.n	8004a66 <HAL_GPIO_Init+0x23a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a56      	ldr	r2, [pc, #344]	; (8004b60 <HAL_GPIO_Init+0x334>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02b      	beq.n	8004a62 <HAL_GPIO_Init+0x236>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a55      	ldr	r2, [pc, #340]	; (8004b64 <HAL_GPIO_Init+0x338>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d025      	beq.n	8004a5e <HAL_GPIO_Init+0x232>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a54      	ldr	r2, [pc, #336]	; (8004b68 <HAL_GPIO_Init+0x33c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01f      	beq.n	8004a5a <HAL_GPIO_Init+0x22e>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a53      	ldr	r2, [pc, #332]	; (8004b6c <HAL_GPIO_Init+0x340>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d019      	beq.n	8004a56 <HAL_GPIO_Init+0x22a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a52      	ldr	r2, [pc, #328]	; (8004b70 <HAL_GPIO_Init+0x344>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d013      	beq.n	8004a52 <HAL_GPIO_Init+0x226>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a51      	ldr	r2, [pc, #324]	; (8004b74 <HAL_GPIO_Init+0x348>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00d      	beq.n	8004a4e <HAL_GPIO_Init+0x222>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a50      	ldr	r2, [pc, #320]	; (8004b78 <HAL_GPIO_Init+0x34c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d007      	beq.n	8004a4a <HAL_GPIO_Init+0x21e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a4f      	ldr	r2, [pc, #316]	; (8004b7c <HAL_GPIO_Init+0x350>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_GPIO_Init+0x21a>
 8004a42:	2309      	movs	r3, #9
 8004a44:	e012      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a46:	230a      	movs	r3, #10
 8004a48:	e010      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	e00e      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a4e:	2307      	movs	r3, #7
 8004a50:	e00c      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a52:	2306      	movs	r3, #6
 8004a54:	e00a      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a56:	2305      	movs	r3, #5
 8004a58:	e008      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	e006      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e004      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e002      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <HAL_GPIO_Init+0x240>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	f002 0203 	and.w	r2, r2, #3
 8004a72:	0092      	lsls	r2, r2, #2
 8004a74:	4093      	lsls	r3, r2
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a7c:	4935      	ldr	r1, [pc, #212]	; (8004b54 <HAL_GPIO_Init+0x328>)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	089b      	lsrs	r3, r3, #2
 8004a82:	3302      	adds	r3, #2
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a8a:	4b3d      	ldr	r3, [pc, #244]	; (8004b80 <HAL_GPIO_Init+0x354>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aae:	4a34      	ldr	r2, [pc, #208]	; (8004b80 <HAL_GPIO_Init+0x354>)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ab4:	4b32      	ldr	r3, [pc, #200]	; (8004b80 <HAL_GPIO_Init+0x354>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ad8:	4a29      	ldr	r2, [pc, #164]	; (8004b80 <HAL_GPIO_Init+0x354>)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_GPIO_Init+0x354>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4013      	ands	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b02:	4a1f      	ldr	r2, [pc, #124]	; (8004b80 <HAL_GPIO_Init+0x354>)
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b08:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_GPIO_Init+0x354>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b2c:	4a14      	ldr	r2, [pc, #80]	; (8004b80 <HAL_GPIO_Init+0x354>)
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	3301      	adds	r3, #1
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b0f      	cmp	r3, #15
 8004b3c:	f67f ae84 	bls.w	8004848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
 8004b44:	3724      	adds	r7, #36	; 0x24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40023800 	.word	0x40023800
 8004b54:	40013800 	.word	0x40013800
 8004b58:	40020000 	.word	0x40020000
 8004b5c:	40020400 	.word	0x40020400
 8004b60:	40020800 	.word	0x40020800
 8004b64:	40020c00 	.word	0x40020c00
 8004b68:	40021000 	.word	0x40021000
 8004b6c:	40021400 	.word	0x40021400
 8004b70:	40021800 	.word	0x40021800
 8004b74:	40021c00 	.word	0x40021c00
 8004b78:	40022000 	.word	0x40022000
 8004b7c:	40022400 	.word	0x40022400
 8004b80:	40013c00 	.word	0x40013c00

08004b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	e001      	b.n	8004ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bc4:	787b      	ldrb	r3, [r7, #1]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bd0:	e003      	b.n	8004bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bd2:	887b      	ldrh	r3, [r7, #2]
 8004bd4:	041a      	lsls	r2, r3, #16
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	619a      	str	r2, [r3, #24]
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	4603      	mov	r3, r0
 8004bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d006      	beq.n	8004c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bfe:	4a05      	ldr	r2, [pc, #20]	; (8004c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c04:	88fb      	ldrh	r3, [r7, #6]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f806 	bl	8004c18 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40013c00 	.word	0x40013c00

08004c18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	4603      	mov	r3, r0
 8004c20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e12b      	b.n	8004e9a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fe fbf4 	bl	8003444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2224      	movs	r2, #36	; 0x24
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0201 	bic.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c94:	f001 fc98 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 8004c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4a81      	ldr	r2, [pc, #516]	; (8004ea4 <HAL_I2C_Init+0x274>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d807      	bhi.n	8004cb4 <HAL_I2C_Init+0x84>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4a80      	ldr	r2, [pc, #512]	; (8004ea8 <HAL_I2C_Init+0x278>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	bf94      	ite	ls
 8004cac:	2301      	movls	r3, #1
 8004cae:	2300      	movhi	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e006      	b.n	8004cc2 <HAL_I2C_Init+0x92>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a7d      	ldr	r2, [pc, #500]	; (8004eac <HAL_I2C_Init+0x27c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bf94      	ite	ls
 8004cbc:	2301      	movls	r3, #1
 8004cbe:	2300      	movhi	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e0e7      	b.n	8004e9a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4a78      	ldr	r2, [pc, #480]	; (8004eb0 <HAL_I2C_Init+0x280>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0c9b      	lsrs	r3, r3, #18
 8004cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a6a      	ldr	r2, [pc, #424]	; (8004ea4 <HAL_I2C_Init+0x274>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d802      	bhi.n	8004d04 <HAL_I2C_Init+0xd4>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	3301      	adds	r3, #1
 8004d02:	e009      	b.n	8004d18 <HAL_I2C_Init+0xe8>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	4a69      	ldr	r2, [pc, #420]	; (8004eb4 <HAL_I2C_Init+0x284>)
 8004d10:	fba2 2303 	umull	r2, r3, r2, r3
 8004d14:	099b      	lsrs	r3, r3, #6
 8004d16:	3301      	adds	r3, #1
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	495c      	ldr	r1, [pc, #368]	; (8004ea4 <HAL_I2C_Init+0x274>)
 8004d34:	428b      	cmp	r3, r1
 8004d36:	d819      	bhi.n	8004d6c <HAL_I2C_Init+0x13c>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1e59      	subs	r1, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d46:	1c59      	adds	r1, r3, #1
 8004d48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d4c:	400b      	ands	r3, r1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_I2C_Init+0x138>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1e59      	subs	r1, r3, #1
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d60:	3301      	adds	r3, #1
 8004d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d66:	e051      	b.n	8004e0c <HAL_I2C_Init+0x1dc>
 8004d68:	2304      	movs	r3, #4
 8004d6a:	e04f      	b.n	8004e0c <HAL_I2C_Init+0x1dc>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d111      	bne.n	8004d98 <HAL_I2C_Init+0x168>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	1e58      	subs	r0, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6859      	ldr	r1, [r3, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	440b      	add	r3, r1
 8004d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d86:	3301      	adds	r3, #1
 8004d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	e012      	b.n	8004dbe <HAL_I2C_Init+0x18e>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	1e58      	subs	r0, r3, #1
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	0099      	lsls	r1, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dae:	3301      	adds	r3, #1
 8004db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d001      	beq.n	8004dc6 <HAL_I2C_Init+0x196>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e022      	b.n	8004e0c <HAL_I2C_Init+0x1dc>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10e      	bne.n	8004dec <HAL_I2C_Init+0x1bc>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	1e58      	subs	r0, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6859      	ldr	r1, [r3, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	440b      	add	r3, r1
 8004ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de0:	3301      	adds	r3, #1
 8004de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dea:	e00f      	b.n	8004e0c <HAL_I2C_Init+0x1dc>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1e58      	subs	r0, r3, #1
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	440b      	add	r3, r1
 8004dfa:	0099      	lsls	r1, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e02:	3301      	adds	r3, #1
 8004e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e0c:	6879      	ldr	r1, [r7, #4]
 8004e0e:	6809      	ldr	r1, [r1, #0]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69da      	ldr	r2, [r3, #28]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6911      	ldr	r1, [r2, #16]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68d2      	ldr	r2, [r2, #12]
 8004e46:	4311      	orrs	r1, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	000186a0 	.word	0x000186a0
 8004ea8:	001e847f 	.word	0x001e847f
 8004eac:	003d08ff 	.word	0x003d08ff
 8004eb0:	431bde83 	.word	0x431bde83
 8004eb4:	10624dd3 	.word	0x10624dd3

08004eb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b088      	sub	sp, #32
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	4608      	mov	r0, r1
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	817b      	strh	r3, [r7, #10]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	813b      	strh	r3, [r7, #8]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ed2:	f7fe ff4b 	bl	8003d6c <HAL_GetTick>
 8004ed6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	f040 80d9 	bne.w	8005098 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	2319      	movs	r3, #25
 8004eec:	2201      	movs	r2, #1
 8004eee:	496d      	ldr	r1, [pc, #436]	; (80050a4 <HAL_I2C_Mem_Write+0x1ec>)
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 fc7f 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004efc:	2302      	movs	r3, #2
 8004efe:	e0cc      	b.n	800509a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d101      	bne.n	8004f0e <HAL_I2C_Mem_Write+0x56>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e0c5      	b.n	800509a <HAL_I2C_Mem_Write+0x1e2>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d007      	beq.n	8004f34 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2221      	movs	r2, #33	; 0x21
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a3a      	ldr	r2, [r7, #32]
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a4d      	ldr	r2, [pc, #308]	; (80050a8 <HAL_I2C_Mem_Write+0x1f0>)
 8004f74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f76:	88f8      	ldrh	r0, [r7, #6]
 8004f78:	893a      	ldrh	r2, [r7, #8]
 8004f7a:	8979      	ldrh	r1, [r7, #10]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	4603      	mov	r3, r0
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 fab6 	bl	80054f8 <I2C_RequestMemoryWrite>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d052      	beq.n	8005038 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e081      	b.n	800509a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 fd00 	bl	80059a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d107      	bne.n	8004fbe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fbc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e06b      	b.n	800509a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	781a      	ldrb	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d11b      	bne.n	8005038 <HAL_I2C_Mem_Write+0x180>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005004:	2b00      	cmp	r3, #0
 8005006:	d017      	beq.n	8005038 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1aa      	bne.n	8004f96 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 fcec 	bl	8005a22 <I2C_WaitOnBTFFlagUntilTimeout>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00d      	beq.n	800506c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	2b04      	cmp	r3, #4
 8005056:	d107      	bne.n	8005068 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005066:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e016      	b.n	800509a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	e000      	b.n	800509a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
  }
}
 800509a:	4618      	mov	r0, r3
 800509c:	3718      	adds	r7, #24
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	00100002 	.word	0x00100002
 80050a8:	ffff0000 	.word	0xffff0000

080050ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	; 0x30
 80050b0:	af02      	add	r7, sp, #8
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	4608      	mov	r0, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	461a      	mov	r2, r3
 80050ba:	4603      	mov	r3, r0
 80050bc:	817b      	strh	r3, [r7, #10]
 80050be:	460b      	mov	r3, r1
 80050c0:	813b      	strh	r3, [r7, #8]
 80050c2:	4613      	mov	r3, r2
 80050c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050c6:	f7fe fe51 	bl	8003d6c <HAL_GetTick>
 80050ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b20      	cmp	r3, #32
 80050d6:	f040 8208 	bne.w	80054ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	2319      	movs	r3, #25
 80050e0:	2201      	movs	r2, #1
 80050e2:	497b      	ldr	r1, [pc, #492]	; (80052d0 <HAL_I2C_Mem_Read+0x224>)
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fb85 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80050f0:	2302      	movs	r3, #2
 80050f2:	e1fb      	b.n	80054ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_I2C_Mem_Read+0x56>
 80050fe:	2302      	movs	r3, #2
 8005100:	e1f4      	b.n	80054ec <HAL_I2C_Mem_Read+0x440>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d007      	beq.n	8005128 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005136:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2222      	movs	r2, #34	; 0x22
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2240      	movs	r2, #64	; 0x40
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005158:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4a5b      	ldr	r2, [pc, #364]	; (80052d4 <HAL_I2C_Mem_Read+0x228>)
 8005168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800516a:	88f8      	ldrh	r0, [r7, #6]
 800516c:	893a      	ldrh	r2, [r7, #8]
 800516e:	8979      	ldrh	r1, [r7, #10]
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	4603      	mov	r3, r0
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fa52 	bl	8005624 <I2C_RequestMemoryRead>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e1b0      	b.n	80054ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518e:	2b00      	cmp	r3, #0
 8005190:	d113      	bne.n	80051ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005192:	2300      	movs	r3, #0
 8005194:	623b      	str	r3, [r7, #32]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	623b      	str	r3, [r7, #32]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	623b      	str	r3, [r7, #32]
 80051a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e184      	b.n	80054c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d11b      	bne.n	80051fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	61fb      	str	r3, [r7, #28]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f6:	601a      	str	r2, [r3, #0]
 80051f8:	e164      	b.n	80054c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d11b      	bne.n	800523a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005210:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005220:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	e144      	b.n	80054c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005250:	e138      	b.n	80054c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005256:	2b03      	cmp	r3, #3
 8005258:	f200 80f1 	bhi.w	800543e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005260:	2b01      	cmp	r3, #1
 8005262:	d123      	bne.n	80052ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fc1b 	bl	8005aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e139      	b.n	80054ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	3b01      	subs	r3, #1
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052aa:	e10b      	b.n	80054c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d14e      	bne.n	8005352 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	2200      	movs	r2, #0
 80052bc:	4906      	ldr	r1, [pc, #24]	; (80052d8 <HAL_I2C_Mem_Read+0x22c>)
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fa98 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e10e      	b.n	80054ec <HAL_I2C_Mem_Read+0x440>
 80052ce:	bf00      	nop
 80052d0:	00100002 	.word	0x00100002
 80052d4:	ffff0000 	.word	0xffff0000
 80052d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005350:	e0b8      	b.n	80054c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	2200      	movs	r2, #0
 800535a:	4966      	ldr	r1, [pc, #408]	; (80054f4 <HAL_I2C_Mem_Read+0x448>)
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fa49 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e0bf      	b.n	80054ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800537a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b4:	2200      	movs	r2, #0
 80053b6:	494f      	ldr	r1, [pc, #316]	; (80054f4 <HAL_I2C_Mem_Read+0x448>)
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 fa1b 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e091      	b.n	80054ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005414:	b2d2      	uxtb	r2, r2
 8005416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	3b01      	subs	r3, #1
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b29a      	uxth	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800543c:	e042      	b.n	80054c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800543e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005440:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fb2e 	bl	8005aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e04c      	b.n	80054ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b04      	cmp	r3, #4
 8005490:	d118      	bne.n	80054c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	1c5a      	adds	r2, r3, #1
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f47f aec2 	bne.w	8005252 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e000      	b.n	80054ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80054ea:	2302      	movs	r3, #2
  }
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3728      	adds	r7, #40	; 0x28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	00010004 	.word	0x00010004

080054f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	4608      	mov	r0, r1
 8005502:	4611      	mov	r1, r2
 8005504:	461a      	mov	r2, r3
 8005506:	4603      	mov	r3, r0
 8005508:	817b      	strh	r3, [r7, #10]
 800550a:	460b      	mov	r3, r1
 800550c:	813b      	strh	r3, [r7, #8]
 800550e:	4613      	mov	r3, r2
 8005510:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005520:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	2200      	movs	r2, #0
 800552a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f960 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005548:	d103      	bne.n	8005552 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e05f      	b.n	8005616 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005556:	897b      	ldrh	r3, [r7, #10]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005564:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	492d      	ldr	r1, [pc, #180]	; (8005620 <I2C_RequestMemoryWrite+0x128>)
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 f998 	bl	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e04c      	b.n	8005616 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005594:	6a39      	ldr	r1, [r7, #32]
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 fa02 	bl	80059a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00d      	beq.n	80055be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d107      	bne.n	80055ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e02b      	b.n	8005616 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d105      	bne.n	80055d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055c4:	893b      	ldrh	r3, [r7, #8]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	611a      	str	r2, [r3, #16]
 80055ce:	e021      	b.n	8005614 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055d0:	893b      	ldrh	r3, [r7, #8]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e0:	6a39      	ldr	r1, [r7, #32]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 f9dc 	bl	80059a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00d      	beq.n	800560a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d107      	bne.n	8005606 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005604:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e005      	b.n	8005616 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800560a:	893b      	ldrh	r3, [r7, #8]
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3718      	adds	r7, #24
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	00010002 	.word	0x00010002

08005624 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	461a      	mov	r2, r3
 8005632:	4603      	mov	r3, r0
 8005634:	817b      	strh	r3, [r7, #10]
 8005636:	460b      	mov	r3, r1
 8005638:	813b      	strh	r3, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800564c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800565c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	6a3b      	ldr	r3, [r7, #32]
 8005664:	2200      	movs	r2, #0
 8005666:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f8c2 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00d      	beq.n	8005692 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005684:	d103      	bne.n	800568e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f44f 7200 	mov.w	r2, #512	; 0x200
 800568c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e0aa      	b.n	80057e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005692:	897b      	ldrh	r3, [r7, #10]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	6a3a      	ldr	r2, [r7, #32]
 80056a6:	4952      	ldr	r1, [pc, #328]	; (80057f0 <I2C_RequestMemoryRead+0x1cc>)
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f8fa 	bl	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e097      	b.n	80057e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	617b      	str	r3, [r7, #20]
 80056cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d0:	6a39      	ldr	r1, [r7, #32]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 f964 	bl	80059a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00d      	beq.n	80056fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d107      	bne.n	80056f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e076      	b.n	80057e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d105      	bne.n	800570c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005700:	893b      	ldrh	r3, [r7, #8]
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	611a      	str	r2, [r3, #16]
 800570a:	e021      	b.n	8005750 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800570c:	893b      	ldrh	r3, [r7, #8]
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	b29b      	uxth	r3, r3
 8005712:	b2da      	uxtb	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800571a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571c:	6a39      	ldr	r1, [r7, #32]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 f93e 	bl	80059a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00d      	beq.n	8005746 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	2b04      	cmp	r3, #4
 8005730:	d107      	bne.n	8005742 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005740:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e050      	b.n	80057e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005746:	893b      	ldrh	r3, [r7, #8]
 8005748:	b2da      	uxtb	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005752:	6a39      	ldr	r1, [r7, #32]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f000 f923 	bl	80059a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00d      	beq.n	800577c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005764:	2b04      	cmp	r3, #4
 8005766:	d107      	bne.n	8005778 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005776:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e035      	b.n	80057e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800578a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	2200      	movs	r2, #0
 8005794:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f82b 	bl	80057f4 <I2C_WaitOnFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00d      	beq.n	80057c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b2:	d103      	bne.n	80057bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e013      	b.n	80057e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057c0:	897b      	ldrh	r3, [r7, #10]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	6a3a      	ldr	r2, [r7, #32]
 80057d4:	4906      	ldr	r1, [pc, #24]	; (80057f0 <I2C_RequestMemoryRead+0x1cc>)
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 f863 	bl	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	00010002 	.word	0x00010002

080057f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	603b      	str	r3, [r7, #0]
 8005800:	4613      	mov	r3, r2
 8005802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005804:	e025      	b.n	8005852 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d021      	beq.n	8005852 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580e:	f7fe faad 	bl	8003d6c <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d302      	bcc.n	8005824 <I2C_WaitOnFlagUntilTimeout+0x30>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d116      	bne.n	8005852 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e023      	b.n	800589a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	0c1b      	lsrs	r3, r3, #16
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10d      	bne.n	8005878 <I2C_WaitOnFlagUntilTimeout+0x84>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	43da      	mvns	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4013      	ands	r3, r2
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	e00c      	b.n	8005892 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	43da      	mvns	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	4013      	ands	r3, r2
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	bf0c      	ite	eq
 800588a:	2301      	moveq	r3, #1
 800588c:	2300      	movne	r3, #0
 800588e:	b2db      	uxtb	r3, r3
 8005890:	461a      	mov	r2, r3
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	429a      	cmp	r2, r3
 8005896:	d0b6      	beq.n	8005806 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	607a      	str	r2, [r7, #4]
 80058ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058b0:	e051      	b.n	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c0:	d123      	bne.n	800590a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f043 0204 	orr.w	r2, r3, #4
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e046      	b.n	8005998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d021      	beq.n	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fe fa2b 	bl	8003d6c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d116      	bne.n	8005956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0220 	orr.w	r2, r3, #32
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e020      	b.n	8005998 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d10c      	bne.n	800597a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	43da      	mvns	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	4013      	ands	r3, r2
 800596c:	b29b      	uxth	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	bf14      	ite	ne
 8005972:	2301      	movne	r3, #1
 8005974:	2300      	moveq	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	e00b      	b.n	8005992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	43da      	mvns	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	4013      	ands	r3, r2
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	bf14      	ite	ne
 800598c:	2301      	movne	r3, #1
 800598e:	2300      	moveq	r3, #0
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d18d      	bne.n	80058b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80059ac:	e02d      	b.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 f8ce 	bl	8005b50 <I2C_IsAcknowledgeFailed>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e02d      	b.n	8005a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d021      	beq.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c6:	f7fe f9d1 	bl	8003d6c <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d302      	bcc.n	80059dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d116      	bne.n	8005a0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e007      	b.n	8005a1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b80      	cmp	r3, #128	; 0x80
 8005a16:	d1ca      	bne.n	80059ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a2e:	e02d      	b.n	8005a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f88d 	bl	8005b50 <I2C_IsAcknowledgeFailed>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e02d      	b.n	8005a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d021      	beq.n	8005a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a48:	f7fe f990 	bl	8003d6c <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d302      	bcc.n	8005a5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d116      	bne.n	8005a8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	f043 0220 	orr.w	r2, r3, #32
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e007      	b.n	8005a9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f003 0304 	and.w	r3, r3, #4
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d1ca      	bne.n	8005a30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ab0:	e042      	b.n	8005b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	f003 0310 	and.w	r3, r3, #16
 8005abc:	2b10      	cmp	r3, #16
 8005abe:	d119      	bne.n	8005af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0210 	mvn.w	r2, #16
 8005ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e029      	b.n	8005b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005af4:	f7fe f93a 	bl	8003d6c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d302      	bcc.n	8005b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d116      	bne.n	8005b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	f043 0220 	orr.w	r2, r3, #32
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e007      	b.n	8005b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	d1b5      	bne.n	8005ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3710      	adds	r7, #16
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b66:	d11b      	bne.n	8005ba0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8c:	f043 0204 	orr.w	r2, r3, #4
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d129      	bne.n	8005c18 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	; 0x24
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0210 	bic.w	r2, r2, #16
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0201 	orr.w	r2, r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e000      	b.n	8005c1a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005c18:	2302      	movs	r3, #2
  }
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b085      	sub	sp, #20
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	d12a      	bne.n	8005c96 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2224      	movs	r2, #36	; 0x24
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 0201 	bic.w	r2, r2, #1
 8005c56:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005c60:	89fb      	ldrh	r3, [r7, #14]
 8005c62:	f023 030f 	bic.w	r3, r3, #15
 8005c66:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	89fb      	ldrh	r3, [r7, #14]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	89fa      	ldrh	r2, [r7, #14]
 8005c78:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0201 	orr.w	r2, r2, #1
 8005c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2220      	movs	r2, #32
 8005c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	e000      	b.n	8005c98 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005c96:	2302      	movs	r3, #2
  }
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005cae:	2300      	movs	r3, #0
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <HAL_PWREx_EnableOverDrive+0x90>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	4a1f      	ldr	r2, [pc, #124]	; (8005d34 <HAL_PWREx_EnableOverDrive+0x90>)
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cbe:	4b1d      	ldr	r3, [pc, #116]	; (8005d34 <HAL_PWREx_EnableOverDrive+0x90>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	603b      	str	r3, [r7, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005cca:	4b1b      	ldr	r3, [pc, #108]	; (8005d38 <HAL_PWREx_EnableOverDrive+0x94>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cd0:	f7fe f84c 	bl	8003d6c <HAL_GetTick>
 8005cd4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cd6:	e009      	b.n	8005cec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005cd8:	f7fe f848 	bl	8003d6c <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce6:	d901      	bls.n	8005cec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e01f      	b.n	8005d2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <HAL_PWREx_EnableOverDrive+0x98>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d1ee      	bne.n	8005cd8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d00:	f7fe f834 	bl	8003d6c <HAL_GetTick>
 8005d04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d06:	e009      	b.n	8005d1c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005d08:	f7fe f830 	bl	8003d6c <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d16:	d901      	bls.n	8005d1c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e007      	b.n	8005d2c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005d1c:	4b07      	ldr	r3, [pc, #28]	; (8005d3c <HAL_PWREx_EnableOverDrive+0x98>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d28:	d1ee      	bne.n	8005d08 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40023800 	.word	0x40023800
 8005d38:	420e0040 	.word	0x420e0040
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	420e0044 	.word	0x420e0044

08005d44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e25b      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d075      	beq.n	8005e4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d62:	4ba3      	ldr	r3, [pc, #652]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b04      	cmp	r3, #4
 8005d6c:	d00c      	beq.n	8005d88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d6e:	4ba0      	ldr	r3, [pc, #640]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d112      	bne.n	8005da0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d7a:	4b9d      	ldr	r3, [pc, #628]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d86:	d10b      	bne.n	8005da0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d88:	4b99      	ldr	r3, [pc, #612]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d05b      	beq.n	8005e4c <HAL_RCC_OscConfig+0x108>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d157      	bne.n	8005e4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e236      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da8:	d106      	bne.n	8005db8 <HAL_RCC_OscConfig+0x74>
 8005daa:	4b91      	ldr	r3, [pc, #580]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a90      	ldr	r2, [pc, #576]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e01d      	b.n	8005df4 <HAL_RCC_OscConfig+0xb0>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dc0:	d10c      	bne.n	8005ddc <HAL_RCC_OscConfig+0x98>
 8005dc2:	4b8b      	ldr	r3, [pc, #556]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a8a      	ldr	r2, [pc, #552]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4b88      	ldr	r3, [pc, #544]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a87      	ldr	r2, [pc, #540]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e00b      	b.n	8005df4 <HAL_RCC_OscConfig+0xb0>
 8005ddc:	4b84      	ldr	r3, [pc, #528]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a83      	ldr	r2, [pc, #524]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	4b81      	ldr	r3, [pc, #516]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a80      	ldr	r2, [pc, #512]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d013      	beq.n	8005e24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfc:	f7fd ffb6 	bl	8003d6c <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e04:	f7fd ffb2 	bl	8003d6c <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	; 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e1fb      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e16:	4b76      	ldr	r3, [pc, #472]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0xc0>
 8005e22:	e014      	b.n	8005e4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e24:	f7fd ffa2 	bl	8003d6c <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e2c:	f7fd ff9e 	bl	8003d6c <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b64      	cmp	r3, #100	; 0x64
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e1e7      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3e:	4b6c      	ldr	r3, [pc, #432]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f0      	bne.n	8005e2c <HAL_RCC_OscConfig+0xe8>
 8005e4a:	e000      	b.n	8005e4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d063      	beq.n	8005f22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e5a:	4b65      	ldr	r3, [pc, #404]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e66:	4b62      	ldr	r3, [pc, #392]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d11c      	bne.n	8005eac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e72:	4b5f      	ldr	r3, [pc, #380]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d116      	bne.n	8005eac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7e:	4b5c      	ldr	r3, [pc, #368]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_RCC_OscConfig+0x152>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d001      	beq.n	8005e96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e1bb      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e96:	4b56      	ldr	r3, [pc, #344]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4952      	ldr	r1, [pc, #328]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eaa:	e03a      	b.n	8005f22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d020      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eb4:	4b4f      	ldr	r3, [pc, #316]	; (8005ff4 <HAL_RCC_OscConfig+0x2b0>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eba:	f7fd ff57 	bl	8003d6c <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec2:	f7fd ff53 	bl	8003d6c <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e19c      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed4:	4b46      	ldr	r3, [pc, #280]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee0:	4b43      	ldr	r3, [pc, #268]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4940      	ldr	r1, [pc, #256]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	600b      	str	r3, [r1, #0]
 8005ef4:	e015      	b.n	8005f22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ef6:	4b3f      	ldr	r3, [pc, #252]	; (8005ff4 <HAL_RCC_OscConfig+0x2b0>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005efc:	f7fd ff36 	bl	8003d6c <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f04:	f7fd ff32 	bl	8003d6c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e17b      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f16:	4b36      	ldr	r3, [pc, #216]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d030      	beq.n	8005f90 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d016      	beq.n	8005f64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f36:	4b30      	ldr	r3, [pc, #192]	; (8005ff8 <HAL_RCC_OscConfig+0x2b4>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f3c:	f7fd ff16 	bl	8003d6c <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f44:	f7fd ff12 	bl	8003d6c <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e15b      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f56:	4b26      	ldr	r3, [pc, #152]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0x200>
 8005f62:	e015      	b.n	8005f90 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f64:	4b24      	ldr	r3, [pc, #144]	; (8005ff8 <HAL_RCC_OscConfig+0x2b4>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f6a:	f7fd feff 	bl	8003d6c <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f72:	f7fd fefb 	bl	8003d6c <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e144      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f84:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1f0      	bne.n	8005f72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f000 80a0 	beq.w	80060de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fa2:	4b13      	ldr	r3, [pc, #76]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10f      	bne.n	8005fce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fae:	2300      	movs	r3, #0
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	4a0e      	ldr	r2, [pc, #56]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc6:	60bb      	str	r3, [r7, #8]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fce:	4b0b      	ldr	r3, [pc, #44]	; (8005ffc <HAL_RCC_OscConfig+0x2b8>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d121      	bne.n	800601e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fda:	4b08      	ldr	r3, [pc, #32]	; (8005ffc <HAL_RCC_OscConfig+0x2b8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a07      	ldr	r2, [pc, #28]	; (8005ffc <HAL_RCC_OscConfig+0x2b8>)
 8005fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe6:	f7fd fec1 	bl	8003d6c <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fec:	e011      	b.n	8006012 <HAL_RCC_OscConfig+0x2ce>
 8005fee:	bf00      	nop
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	42470000 	.word	0x42470000
 8005ff8:	42470e80 	.word	0x42470e80
 8005ffc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006000:	f7fd feb4 	bl	8003d6c <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e0fd      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006012:	4b81      	ldr	r3, [pc, #516]	; (8006218 <HAL_RCC_OscConfig+0x4d4>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0f0      	beq.n	8006000 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d106      	bne.n	8006034 <HAL_RCC_OscConfig+0x2f0>
 8006026:	4b7d      	ldr	r3, [pc, #500]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	4a7c      	ldr	r2, [pc, #496]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	6713      	str	r3, [r2, #112]	; 0x70
 8006032:	e01c      	b.n	800606e <HAL_RCC_OscConfig+0x32a>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	2b05      	cmp	r3, #5
 800603a:	d10c      	bne.n	8006056 <HAL_RCC_OscConfig+0x312>
 800603c:	4b77      	ldr	r3, [pc, #476]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 800603e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006040:	4a76      	ldr	r2, [pc, #472]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 8006042:	f043 0304 	orr.w	r3, r3, #4
 8006046:	6713      	str	r3, [r2, #112]	; 0x70
 8006048:	4b74      	ldr	r3, [pc, #464]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 800604a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604c:	4a73      	ldr	r2, [pc, #460]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 800604e:	f043 0301 	orr.w	r3, r3, #1
 8006052:	6713      	str	r3, [r2, #112]	; 0x70
 8006054:	e00b      	b.n	800606e <HAL_RCC_OscConfig+0x32a>
 8006056:	4b71      	ldr	r3, [pc, #452]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	4a70      	ldr	r2, [pc, #448]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	6713      	str	r3, [r2, #112]	; 0x70
 8006062:	4b6e      	ldr	r3, [pc, #440]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	4a6d      	ldr	r2, [pc, #436]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 8006068:	f023 0304 	bic.w	r3, r3, #4
 800606c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d015      	beq.n	80060a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006076:	f7fd fe79 	bl	8003d6c <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800607c:	e00a      	b.n	8006094 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800607e:	f7fd fe75 	bl	8003d6c <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f241 3288 	movw	r2, #5000	; 0x1388
 800608c:	4293      	cmp	r3, r2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e0bc      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006094:	4b61      	ldr	r3, [pc, #388]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 8006096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0ee      	beq.n	800607e <HAL_RCC_OscConfig+0x33a>
 80060a0:	e014      	b.n	80060cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060a2:	f7fd fe63 	bl	8003d6c <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fd fe5f 	bl	8003d6c <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e0a6      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c0:	4b56      	ldr	r3, [pc, #344]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 80060c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c4:	f003 0302 	and.w	r3, r3, #2
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1ee      	bne.n	80060aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060cc:	7dfb      	ldrb	r3, [r7, #23]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d105      	bne.n	80060de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d2:	4b52      	ldr	r3, [pc, #328]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	4a51      	ldr	r2, [pc, #324]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 80060d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8092 	beq.w	800620c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060e8:	4b4c      	ldr	r3, [pc, #304]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f003 030c 	and.w	r3, r3, #12
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d05c      	beq.n	80061ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d141      	bne.n	8006180 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060fc:	4b48      	ldr	r3, [pc, #288]	; (8006220 <HAL_RCC_OscConfig+0x4dc>)
 80060fe:	2200      	movs	r2, #0
 8006100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006102:	f7fd fe33 	bl	8003d6c <HAL_GetTick>
 8006106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006108:	e008      	b.n	800611c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800610a:	f7fd fe2f 	bl	8003d6c <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d901      	bls.n	800611c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e078      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800611c:	4b3f      	ldr	r3, [pc, #252]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d1f0      	bne.n	800610a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	019b      	lsls	r3, r3, #6
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	085b      	lsrs	r3, r3, #1
 8006140:	3b01      	subs	r3, #1
 8006142:	041b      	lsls	r3, r3, #16
 8006144:	431a      	orrs	r2, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	061b      	lsls	r3, r3, #24
 800614c:	4933      	ldr	r1, [pc, #204]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 800614e:	4313      	orrs	r3, r2
 8006150:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006152:	4b33      	ldr	r3, [pc, #204]	; (8006220 <HAL_RCC_OscConfig+0x4dc>)
 8006154:	2201      	movs	r2, #1
 8006156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006158:	f7fd fe08 	bl	8003d6c <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006160:	f7fd fe04 	bl	8003d6c <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e04d      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006172:	4b2a      	ldr	r3, [pc, #168]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x41c>
 800617e:	e045      	b.n	800620c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006180:	4b27      	ldr	r3, [pc, #156]	; (8006220 <HAL_RCC_OscConfig+0x4dc>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006186:	f7fd fdf1 	bl	8003d6c <HAL_GetTick>
 800618a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618c:	e008      	b.n	80061a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800618e:	f7fd fded 	bl	8003d6c <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b02      	cmp	r3, #2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e036      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a0:	4b1e      	ldr	r3, [pc, #120]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f0      	bne.n	800618e <HAL_RCC_OscConfig+0x44a>
 80061ac:	e02e      	b.n	800620c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e029      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80061ba:	4b18      	ldr	r3, [pc, #96]	; (800621c <HAL_RCC_OscConfig+0x4d8>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d11c      	bne.n	8006208 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d115      	bne.n	8006208 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061e2:	4013      	ands	r3, r2
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d10d      	bne.n	8006208 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d106      	bne.n	8006208 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006204:	429a      	cmp	r2, r3
 8006206:	d001      	beq.n	800620c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40007000 	.word	0x40007000
 800621c:	40023800 	.word	0x40023800
 8006220:	42470060 	.word	0x42470060

08006224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d101      	bne.n	8006238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0cc      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006238:	4b68      	ldr	r3, [pc, #416]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 030f 	and.w	r3, r3, #15
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d90c      	bls.n	8006260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006246:	4b65      	ldr	r3, [pc, #404]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800624e:	4b63      	ldr	r3, [pc, #396]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 030f 	and.w	r3, r3, #15
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d001      	beq.n	8006260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0b8      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b00      	cmp	r3, #0
 800626a:	d020      	beq.n	80062ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0304 	and.w	r3, r3, #4
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006278:	4b59      	ldr	r3, [pc, #356]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	4a58      	ldr	r2, [pc, #352]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b00      	cmp	r3, #0
 800628e:	d005      	beq.n	800629c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006290:	4b53      	ldr	r3, [pc, #332]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	4a52      	ldr	r2, [pc, #328]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006296:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800629a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800629c:	4b50      	ldr	r3, [pc, #320]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	494d      	ldr	r1, [pc, #308]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d044      	beq.n	8006344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d107      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c2:	4b47      	ldr	r3, [pc, #284]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d119      	bne.n	8006302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e07f      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d003      	beq.n	80062e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d107      	bne.n	80062f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062e2:	4b3f      	ldr	r3, [pc, #252]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e06f      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f2:	4b3b      	ldr	r3, [pc, #236]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e067      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006302:	4b37      	ldr	r3, [pc, #220]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f023 0203 	bic.w	r2, r3, #3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	4934      	ldr	r1, [pc, #208]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	4313      	orrs	r3, r2
 8006312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006314:	f7fd fd2a 	bl	8003d6c <HAL_GetTick>
 8006318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631a:	e00a      	b.n	8006332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800631c:	f7fd fd26 	bl	8003d6c <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	f241 3288 	movw	r2, #5000	; 0x1388
 800632a:	4293      	cmp	r3, r2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e04f      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006332:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	f003 020c 	and.w	r2, r3, #12
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	429a      	cmp	r2, r3
 8006342:	d1eb      	bne.n	800631c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006344:	4b25      	ldr	r3, [pc, #148]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 030f 	and.w	r3, r3, #15
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d20c      	bcs.n	800636c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006352:	4b22      	ldr	r3, [pc, #136]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	b2d2      	uxtb	r2, r2
 8006358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800635a:	4b20      	ldr	r3, [pc, #128]	; (80063dc <HAL_RCC_ClockConfig+0x1b8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 030f 	and.w	r3, r3, #15
 8006362:	683a      	ldr	r2, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e032      	b.n	80063d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006378:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4916      	ldr	r1, [pc, #88]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	4313      	orrs	r3, r2
 8006388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	2b00      	cmp	r3, #0
 8006394:	d009      	beq.n	80063aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006396:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	00db      	lsls	r3, r3, #3
 80063a4:	490e      	ldr	r1, [pc, #56]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80063aa:	f000 f821 	bl	80063f0 <HAL_RCC_GetSysClockFreq>
 80063ae:	4602      	mov	r2, r0
 80063b0:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	091b      	lsrs	r3, r3, #4
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	490a      	ldr	r1, [pc, #40]	; (80063e4 <HAL_RCC_ClockConfig+0x1c0>)
 80063bc:	5ccb      	ldrb	r3, [r1, r3]
 80063be:	fa22 f303 	lsr.w	r3, r2, r3
 80063c2:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <HAL_RCC_ClockConfig+0x1c4>)
 80063c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <HAL_RCC_ClockConfig+0x1c8>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fd fc8a 	bl	8003ce4 <HAL_InitTick>

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	40023c00 	.word	0x40023c00
 80063e0:	40023800 	.word	0x40023800
 80063e4:	08011608 	.word	0x08011608
 80063e8:	20000000 	.word	0x20000000
 80063ec:	20000004 	.word	0x20000004

080063f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063f8:	2300      	movs	r3, #0
 80063fa:	607b      	str	r3, [r7, #4]
 80063fc:	2300      	movs	r3, #0
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	2300      	movs	r3, #0
 8006402:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006404:	2300      	movs	r3, #0
 8006406:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006408:	4b67      	ldr	r3, [pc, #412]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f003 030c 	and.w	r3, r3, #12
 8006410:	2b08      	cmp	r3, #8
 8006412:	d00d      	beq.n	8006430 <HAL_RCC_GetSysClockFreq+0x40>
 8006414:	2b08      	cmp	r3, #8
 8006416:	f200 80bd 	bhi.w	8006594 <HAL_RCC_GetSysClockFreq+0x1a4>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_RCC_GetSysClockFreq+0x34>
 800641e:	2b04      	cmp	r3, #4
 8006420:	d003      	beq.n	800642a <HAL_RCC_GetSysClockFreq+0x3a>
 8006422:	e0b7      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006424:	4b61      	ldr	r3, [pc, #388]	; (80065ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006426:	60bb      	str	r3, [r7, #8]
       break;
 8006428:	e0b7      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800642a:	4b60      	ldr	r3, [pc, #384]	; (80065ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 800642c:	60bb      	str	r3, [r7, #8]
      break;
 800642e:	e0b4      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006430:	4b5d      	ldr	r3, [pc, #372]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006438:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800643a:	4b5b      	ldr	r3, [pc, #364]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d04d      	beq.n	80064e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006446:	4b58      	ldr	r3, [pc, #352]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	099b      	lsrs	r3, r3, #6
 800644c:	461a      	mov	r2, r3
 800644e:	f04f 0300 	mov.w	r3, #0
 8006452:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006456:	f04f 0100 	mov.w	r1, #0
 800645a:	ea02 0800 	and.w	r8, r2, r0
 800645e:	ea03 0901 	and.w	r9, r3, r1
 8006462:	4640      	mov	r0, r8
 8006464:	4649      	mov	r1, r9
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	014b      	lsls	r3, r1, #5
 8006470:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006474:	0142      	lsls	r2, r0, #5
 8006476:	4610      	mov	r0, r2
 8006478:	4619      	mov	r1, r3
 800647a:	ebb0 0008 	subs.w	r0, r0, r8
 800647e:	eb61 0109 	sbc.w	r1, r1, r9
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	018b      	lsls	r3, r1, #6
 800648c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006490:	0182      	lsls	r2, r0, #6
 8006492:	1a12      	subs	r2, r2, r0
 8006494:	eb63 0301 	sbc.w	r3, r3, r1
 8006498:	f04f 0000 	mov.w	r0, #0
 800649c:	f04f 0100 	mov.w	r1, #0
 80064a0:	00d9      	lsls	r1, r3, #3
 80064a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064a6:	00d0      	lsls	r0, r2, #3
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	eb12 0208 	adds.w	r2, r2, r8
 80064b0:	eb43 0309 	adc.w	r3, r3, r9
 80064b4:	f04f 0000 	mov.w	r0, #0
 80064b8:	f04f 0100 	mov.w	r1, #0
 80064bc:	0299      	lsls	r1, r3, #10
 80064be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80064c2:	0290      	lsls	r0, r2, #10
 80064c4:	4602      	mov	r2, r0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4610      	mov	r0, r2
 80064ca:	4619      	mov	r1, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	461a      	mov	r2, r3
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	f7fa fbe8 	bl	8000ca8 <__aeabi_uldivmod>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4613      	mov	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	e04a      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e2:	4b31      	ldr	r3, [pc, #196]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	461a      	mov	r2, r3
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80064f2:	f04f 0100 	mov.w	r1, #0
 80064f6:	ea02 0400 	and.w	r4, r2, r0
 80064fa:	ea03 0501 	and.w	r5, r3, r1
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	014b      	lsls	r3, r1, #5
 800650c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006510:	0142      	lsls	r2, r0, #5
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	1b00      	subs	r0, r0, r4
 8006518:	eb61 0105 	sbc.w	r1, r1, r5
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	f04f 0300 	mov.w	r3, #0
 8006524:	018b      	lsls	r3, r1, #6
 8006526:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800652a:	0182      	lsls	r2, r0, #6
 800652c:	1a12      	subs	r2, r2, r0
 800652e:	eb63 0301 	sbc.w	r3, r3, r1
 8006532:	f04f 0000 	mov.w	r0, #0
 8006536:	f04f 0100 	mov.w	r1, #0
 800653a:	00d9      	lsls	r1, r3, #3
 800653c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006540:	00d0      	lsls	r0, r2, #3
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	1912      	adds	r2, r2, r4
 8006548:	eb45 0303 	adc.w	r3, r5, r3
 800654c:	f04f 0000 	mov.w	r0, #0
 8006550:	f04f 0100 	mov.w	r1, #0
 8006554:	0299      	lsls	r1, r3, #10
 8006556:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800655a:	0290      	lsls	r0, r2, #10
 800655c:	4602      	mov	r2, r0
 800655e:	460b      	mov	r3, r1
 8006560:	4610      	mov	r0, r2
 8006562:	4619      	mov	r1, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	461a      	mov	r2, r3
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	f7fa fb9c 	bl	8000ca8 <__aeabi_uldivmod>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4613      	mov	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	3301      	adds	r3, #1
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	60bb      	str	r3, [r7, #8]
      break;
 8006592:	e002      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006596:	60bb      	str	r3, [r7, #8]
      break;
 8006598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800659a:	68bb      	ldr	r3, [r7, #8]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800
 80065ac:	00f42400 	.word	0x00f42400

080065b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065b4:	4b03      	ldr	r3, [pc, #12]	; (80065c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065b6:	681b      	ldr	r3, [r3, #0]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	20000000 	.word	0x20000000

080065c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065cc:	f7ff fff0 	bl	80065b0 <HAL_RCC_GetHCLKFreq>
 80065d0:	4602      	mov	r2, r0
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	0a9b      	lsrs	r3, r3, #10
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	4903      	ldr	r1, [pc, #12]	; (80065ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80065de:	5ccb      	ldrb	r3, [r1, r3]
 80065e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	40023800 	.word	0x40023800
 80065ec:	08011618 	.word	0x08011618

080065f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065f4:	f7ff ffdc 	bl	80065b0 <HAL_RCC_GetHCLKFreq>
 80065f8:	4602      	mov	r2, r0
 80065fa:	4b05      	ldr	r3, [pc, #20]	; (8006610 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	0b5b      	lsrs	r3, r3, #13
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	4903      	ldr	r1, [pc, #12]	; (8006614 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006606:	5ccb      	ldrb	r3, [r1, r3]
 8006608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	bd80      	pop	{r7, pc}
 8006610:	40023800 	.word	0x40023800
 8006614:	08011618 	.word	0x08011618

08006618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10b      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800663c:	2b00      	cmp	r3, #0
 800663e:	d105      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006648:	2b00      	cmp	r3, #0
 800664a:	d075      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800664c:	4bad      	ldr	r3, [pc, #692]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006652:	f7fd fb8b 	bl	8003d6c <HAL_GetTick>
 8006656:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006658:	e008      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800665a:	f7fd fb87 	bl	8003d6c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e18b      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800666c:	4ba6      	ldr	r3, [pc, #664]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1f0      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d009      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	019a      	lsls	r2, r3, #6
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	071b      	lsls	r3, r3, #28
 8006690:	499d      	ldr	r1, [pc, #628]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01f      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80066a4:	4b98      	ldr	r3, [pc, #608]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066aa:	0f1b      	lsrs	r3, r3, #28
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	019a      	lsls	r2, r3, #6
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	061b      	lsls	r3, r3, #24
 80066be:	431a      	orrs	r2, r3
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	071b      	lsls	r3, r3, #28
 80066c4:	4990      	ldr	r1, [pc, #576]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80066cc:	4b8e      	ldr	r3, [pc, #568]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066d2:	f023 021f 	bic.w	r2, r3, #31
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	3b01      	subs	r3, #1
 80066dc:	498a      	ldr	r1, [pc, #552]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00d      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	019a      	lsls	r2, r3, #6
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	061b      	lsls	r3, r3, #24
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	071b      	lsls	r3, r3, #28
 8006704:	4980      	ldr	r1, [pc, #512]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006706:	4313      	orrs	r3, r2
 8006708:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800670c:	4b7d      	ldr	r3, [pc, #500]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800670e:	2201      	movs	r2, #1
 8006710:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006712:	f7fd fb2b 	bl	8003d6c <HAL_GetTick>
 8006716:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006718:	e008      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800671a:	f7fd fb27 	bl	8003d6c <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e12b      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800672c:	4b76      	ldr	r3, [pc, #472]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f0      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d105      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800674c:	2b00      	cmp	r3, #0
 800674e:	d079      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006750:	4b6e      	ldr	r3, [pc, #440]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006756:	f7fd fb09 	bl	8003d6c <HAL_GetTick>
 800675a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800675c:	e008      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800675e:	f7fd fb05 	bl	8003d6c <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d901      	bls.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e109      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006770:	4b65      	ldr	r3, [pc, #404]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677c:	d0ef      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	d020      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800678a:	4b5f      	ldr	r3, [pc, #380]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006790:	0f1b      	lsrs	r3, r3, #28
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	019a      	lsls	r2, r3, #6
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	061b      	lsls	r3, r3, #24
 80067a4:	431a      	orrs	r2, r3
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	071b      	lsls	r3, r3, #28
 80067aa:	4957      	ldr	r1, [pc, #348]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80067b2:	4b55      	ldr	r3, [pc, #340]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	4950      	ldr	r1, [pc, #320]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0308 	and.w	r3, r3, #8
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01e      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067d8:	4b4b      	ldr	r3, [pc, #300]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067de:	0e1b      	lsrs	r3, r3, #24
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	019a      	lsls	r2, r3, #6
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	061b      	lsls	r3, r3, #24
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	071b      	lsls	r3, r3, #28
 80067f8:	4943      	ldr	r1, [pc, #268]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006800:	4b41      	ldr	r3, [pc, #260]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006806:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	493e      	ldr	r1, [pc, #248]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006810:	4313      	orrs	r3, r2
 8006812:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006816:	4b3d      	ldr	r3, [pc, #244]	; (800690c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006818:	2201      	movs	r2, #1
 800681a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800681c:	f7fd faa6 	bl	8003d6c <HAL_GetTick>
 8006820:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006822:	e008      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006824:	f7fd faa2 	bl	8003d6c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e0a6      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006836:	4b34      	ldr	r3, [pc, #208]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800683e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006842:	d1ef      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 808d 	beq.w	800696c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	4b2c      	ldr	r3, [pc, #176]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	4a2b      	ldr	r2, [pc, #172]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800685c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006860:	6413      	str	r3, [r2, #64]	; 0x40
 8006862:	4b29      	ldr	r3, [pc, #164]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800686e:	4b28      	ldr	r3, [pc, #160]	; (8006910 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a27      	ldr	r2, [pc, #156]	; (8006910 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006878:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800687a:	f7fd fa77 	bl	8003d6c <HAL_GetTick>
 800687e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006880:	e008      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006882:	f7fd fa73 	bl	8003d6c <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e077      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006894:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0f0      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80068a0:	4b19      	ldr	r3, [pc, #100]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d039      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d032      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068be:	4b12      	ldr	r3, [pc, #72]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068c8:	4b12      	ldr	r3, [pc, #72]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068ce:	4b11      	ldr	r3, [pc, #68]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068d4:	4a0c      	ldr	r2, [pc, #48]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068da:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d11e      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068e6:	f7fd fa41 	bl	8003d6c <HAL_GetTick>
 80068ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ec:	e014      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068ee:	f7fd fa3d 	bl	8003d6c <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d90b      	bls.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e03f      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006904:	42470068 	.word	0x42470068
 8006908:	40023800 	.word	0x40023800
 800690c:	42470070 	.word	0x42470070
 8006910:	40007000 	.word	0x40007000
 8006914:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006918:	4b1c      	ldr	r3, [pc, #112]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800691a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0e4      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800692c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006930:	d10d      	bne.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006932:	4b16      	ldr	r3, [pc, #88]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006946:	4911      	ldr	r1, [pc, #68]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006948:	4313      	orrs	r3, r2
 800694a:	608b      	str	r3, [r1, #8]
 800694c:	e005      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	4a0e      	ldr	r2, [pc, #56]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006954:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006958:	6093      	str	r3, [r2, #8]
 800695a:	4b0c      	ldr	r3, [pc, #48]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800695c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006966:	4909      	ldr	r1, [pc, #36]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006968:	4313      	orrs	r3, r2
 800696a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006980:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40023800 	.word	0x40023800
 8006990:	424711e0 	.word	0x424711e0

08006994 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e083      	b.n	8006aae <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	7f5b      	ldrb	r3, [r3, #29]
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d105      	bne.n	80069bc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7fc fe1a 	bl	80035f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	22ca      	movs	r2, #202	; 0xca
 80069c8:	625a      	str	r2, [r3, #36]	; 0x24
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2253      	movs	r2, #83	; 0x53
 80069d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 faa8 	bl	8006f28 <RTC_EnterInitMode>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d008      	beq.n	80069f0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	22ff      	movs	r2, #255	; 0xff
 80069e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2204      	movs	r2, #4
 80069ea:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e05e      	b.n	8006aae <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80069fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a02:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6899      	ldr	r1, [r3, #8]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685a      	ldr	r2, [r3, #4]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68d2      	ldr	r2, [r2, #12]
 8006a2a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6919      	ldr	r1, [r3, #16]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	041a      	lsls	r2, r3, #16
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a4e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f003 0320 	and.w	r3, r3, #32
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10e      	bne.n	8006a7c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa3a 	bl	8006ed8 <HAL_RTC_WaitForSynchro>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d008      	beq.n	8006a7c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	22ff      	movs	r2, #255	; 0xff
 8006a70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2204      	movs	r2, #4
 8006a76:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e018      	b.n	8006aae <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a8a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	22ff      	movs	r2, #255	; 0xff
 8006aa4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006aac:	2300      	movs	r3, #0
  }
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006ab6:	b590      	push	{r4, r7, lr}
 8006ab8:	b087      	sub	sp, #28
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	7f1b      	ldrb	r3, [r3, #28]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_RTC_SetTime+0x1c>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e0aa      	b.n	8006c28 <HAL_RTC_SetTime+0x172>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2202      	movs	r2, #2
 8006adc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d126      	bne.n	8006b32 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fa3f 	bl	8006f80 <RTC_ByteToBcd2>
 8006b02:	4603      	mov	r3, r0
 8006b04:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	785b      	ldrb	r3, [r3, #1]
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fa38 	bl	8006f80 <RTC_ByteToBcd2>
 8006b10:	4603      	mov	r3, r0
 8006b12:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b14:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	789b      	ldrb	r3, [r3, #2]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fa30 	bl	8006f80 <RTC_ByteToBcd2>
 8006b20:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b22:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	78db      	ldrb	r3, [r3, #3]
 8006b2a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e018      	b.n	8006b64 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d102      	bne.n	8006b46 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	785b      	ldrb	r3, [r3, #1]
 8006b50:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b52:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006b54:	68ba      	ldr	r2, [r7, #8]
 8006b56:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b58:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	78db      	ldrb	r3, [r3, #3]
 8006b5e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	22ca      	movs	r2, #202	; 0xca
 8006b6a:	625a      	str	r2, [r3, #36]	; 0x24
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2253      	movs	r2, #83	; 0x53
 8006b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f9d7 	bl	8006f28 <RTC_EnterInitMode>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	22ff      	movs	r2, #255	; 0xff
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e047      	b.n	8006c28 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006ba2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006ba6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006bb6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6899      	ldr	r1, [r3, #8]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bde:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d111      	bne.n	8006c12 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f972 	bl	8006ed8 <HAL_RTC_WaitForSynchro>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	22ff      	movs	r2, #255	; 0xff
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2204      	movs	r2, #4
 8006c06:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e00a      	b.n	8006c28 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	22ff      	movs	r2, #255	; 0xff
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006c26:	2300      	movs	r3, #0
  }
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	371c      	adds	r7, #28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd90      	pop	{r4, r7, pc}

08006c30 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006c62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006c66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	0c1b      	lsrs	r3, r3, #16
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	0c1b      	lsrs	r3, r3, #16
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d11a      	bne.n	8006ce2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 f983 	bl	8006fbc <RTC_Bcd2ToByte>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	461a      	mov	r2, r3
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	785b      	ldrb	r3, [r3, #1]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 f97a 	bl	8006fbc <RTC_Bcd2ToByte>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	461a      	mov	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	789b      	ldrb	r3, [r3, #2]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 f971 	bl	8006fbc <RTC_Bcd2ToByte>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	461a      	mov	r2, r3
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3718      	adds	r7, #24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006cec:	b590      	push	{r4, r7, lr}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	7f1b      	ldrb	r3, [r3, #28]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d101      	bne.n	8006d08 <HAL_RTC_SetDate+0x1c>
 8006d04:	2302      	movs	r3, #2
 8006d06:	e094      	b.n	8006e32 <HAL_RTC_SetDate+0x146>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2202      	movs	r2, #2
 8006d12:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10e      	bne.n	8006d38 <HAL_RTC_SetDate+0x4c>
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	785b      	ldrb	r3, [r3, #1]
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d008      	beq.n	8006d38 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	785b      	ldrb	r3, [r3, #1]
 8006d2a:	f023 0310 	bic.w	r3, r3, #16
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	330a      	adds	r3, #10
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d11c      	bne.n	8006d78 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	78db      	ldrb	r3, [r3, #3]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 f91c 	bl	8006f80 <RTC_ByteToBcd2>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 f915 	bl	8006f80 <RTC_ByteToBcd2>
 8006d56:	4603      	mov	r3, r0
 8006d58:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d5a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	789b      	ldrb	r3, [r3, #2]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 f90d 	bl	8006f80 <RTC_ByteToBcd2>
 8006d66:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006d68:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]
 8006d76:	e00e      	b.n	8006d96 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	78db      	ldrb	r3, [r3, #3]
 8006d7c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	785b      	ldrb	r3, [r3, #1]
 8006d82:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d84:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006d8a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	22ca      	movs	r2, #202	; 0xca
 8006d9c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2253      	movs	r2, #83	; 0x53
 8006da4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f8be 	bl	8006f28 <RTC_EnterInitMode>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00b      	beq.n	8006dca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	22ff      	movs	r2, #255	; 0xff
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e033      	b.n	8006e32 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006dd4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006dd8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006de8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 0320 	and.w	r3, r3, #32
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d111      	bne.n	8006e1c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f86d 	bl	8006ed8 <HAL_RTC_WaitForSynchro>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	22ff      	movs	r2, #255	; 0xff
 8006e0a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e00a      	b.n	8006e32 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	22ff      	movs	r2, #255	; 0xff
 8006e22:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006e30:	2300      	movs	r3, #0
  }
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	371c      	adds	r7, #28
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd90      	pop	{r4, r7, pc}

08006e3a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b086      	sub	sp, #24
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	60f8      	str	r0, [r7, #12]
 8006e42:	60b9      	str	r1, [r7, #8]
 8006e44:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e58:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	0c1b      	lsrs	r3, r3, #16
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	0b5b      	lsrs	r3, r3, #13
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11a      	bne.n	8006ece <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	78db      	ldrb	r3, [r3, #3]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 f88d 	bl	8006fbc <RTC_Bcd2ToByte>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	785b      	ldrb	r3, [r3, #1]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 f884 	bl	8006fbc <RTC_Bcd2ToByte>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	789b      	ldrb	r3, [r3, #2]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f000 f87b 	bl	8006fbc <RTC_Bcd2ToByte>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	461a      	mov	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3718      	adds	r7, #24
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68da      	ldr	r2, [r3, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ef2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ef4:	f7fc ff3a 	bl	8003d6c <HAL_GetTick>
 8006ef8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006efa:	e009      	b.n	8006f10 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006efc:	f7fc ff36 	bl	8003d6c <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f0a:	d901      	bls.n	8006f10 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e007      	b.n	8006f20 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0ee      	beq.n	8006efc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d119      	bne.n	8006f76 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f4c:	f7fc ff0e 	bl	8003d6c <HAL_GetTick>
 8006f50:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f52:	e009      	b.n	8006f68 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f54:	f7fc ff0a 	bl	8003d6c <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f62:	d901      	bls.n	8006f68 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e007      	b.n	8006f78 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0ee      	beq.n	8006f54 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b085      	sub	sp, #20
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006f8e:	e005      	b.n	8006f9c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	3301      	adds	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	3b0a      	subs	r3, #10
 8006f9a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006f9c:	79fb      	ldrb	r3, [r7, #7]
 8006f9e:	2b09      	cmp	r3, #9
 8006fa0:	d8f6      	bhi.n	8006f90 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	b2db      	uxtb	r3, r3
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3714      	adds	r7, #20
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006fca:	79fb      	ldrb	r3, [r7, #7]
 8006fcc:	091b      	lsrs	r3, r3, #4
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	4413      	add	r3, r2
 8006fea:	b2db      	uxtb	r3, r3
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e056      	b.n	80070b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d106      	bne.n	800702a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7fc faf9 	bl	800361c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007040:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68db      	ldr	r3, [r3, #12]
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	431a      	orrs	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	699b      	ldr	r3, [r3, #24]
 8007062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007066:	431a      	orrs	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	431a      	orrs	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	ea42 0103 	orr.w	r1, r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	0c1b      	lsrs	r3, r3, #16
 8007088:	f003 0104 	and.w	r1, r3, #4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69da      	ldr	r2, [r3, #28]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	603b      	str	r3, [r7, #0]
 80070cc:	4613      	mov	r3, r2
 80070ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070dc:	d112      	bne.n	8007104 <HAL_SPI_Receive+0x44>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10e      	bne.n	8007104 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2204      	movs	r2, #4
 80070ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80070ee:	88fa      	ldrh	r2, [r7, #6]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 f8e9 	bl	80072d2 <HAL_SPI_TransmitReceive>
 8007100:	4603      	mov	r3, r0
 8007102:	e0e2      	b.n	80072ca <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_SPI_Receive+0x52>
 800710e:	2302      	movs	r3, #2
 8007110:	e0db      	b.n	80072ca <HAL_SPI_Receive+0x20a>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800711a:	f7fc fe27 	bl	8003d6c <HAL_GetTick>
 800711e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b01      	cmp	r3, #1
 800712a:	d002      	beq.n	8007132 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800712c:	2302      	movs	r3, #2
 800712e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007130:	e0c2      	b.n	80072b8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_SPI_Receive+0x7e>
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d102      	bne.n	8007144 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007142:	e0b9      	b.n	80072b8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2204      	movs	r2, #4
 8007148:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	88fa      	ldrh	r2, [r7, #6]
 800715c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	88fa      	ldrh	r2, [r7, #6]
 8007162:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718a:	d107      	bne.n	800719c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800719a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a6:	2b40      	cmp	r3, #64	; 0x40
 80071a8:	d007      	beq.n	80071ba <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d162      	bne.n	8007288 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80071c2:	e02e      	b.n	8007222 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d115      	bne.n	80071fe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f103 020c 	add.w	r2, r3, #12
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	7812      	ldrb	r2, [r2, #0]
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	3b01      	subs	r3, #1
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80071fc:	e011      	b.n	8007222 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071fe:	f7fc fdb5 	bl	8003d6c <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d803      	bhi.n	8007216 <HAL_SPI_Receive+0x156>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007214:	d102      	bne.n	800721c <HAL_SPI_Receive+0x15c>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007220:	e04a      	b.n	80072b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007226:	b29b      	uxth	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1cb      	bne.n	80071c4 <HAL_SPI_Receive+0x104>
 800722c:	e031      	b.n	8007292 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b01      	cmp	r3, #1
 800723a:	d113      	bne.n	8007264 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68da      	ldr	r2, [r3, #12]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	b292      	uxth	r2, r2
 8007248:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	1c9a      	adds	r2, r3, #2
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29a      	uxth	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007262:	e011      	b.n	8007288 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007264:	f7fc fd82 	bl	8003d6c <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	429a      	cmp	r2, r3
 8007272:	d803      	bhi.n	800727c <HAL_SPI_Receive+0x1bc>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727a:	d102      	bne.n	8007282 <HAL_SPI_Receive+0x1c2>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d102      	bne.n	8007288 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007286:	e017      	b.n	80072b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800728c:	b29b      	uxth	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1cd      	bne.n	800722e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 fa27 	bl	80076ea <SPI_EndRxTransaction>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2220      	movs	r2, #32
 80072a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
 80072b4:	e000      	b.n	80072b8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80072b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b08c      	sub	sp, #48	; 0x30
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072e0:	2301      	movs	r3, #1
 80072e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_SPI_TransmitReceive+0x26>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e18a      	b.n	800760e <HAL_SPI_TransmitReceive+0x33c>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007300:	f7fc fd34 	bl	8003d6c <HAL_GetTick>
 8007304:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800730c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007316:	887b      	ldrh	r3, [r7, #2]
 8007318:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800731a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800731e:	2b01      	cmp	r3, #1
 8007320:	d00f      	beq.n	8007342 <HAL_SPI_TransmitReceive+0x70>
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007328:	d107      	bne.n	800733a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <HAL_SPI_TransmitReceive+0x68>
 8007332:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007336:	2b04      	cmp	r3, #4
 8007338:	d003      	beq.n	8007342 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800733a:	2302      	movs	r3, #2
 800733c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007340:	e15b      	b.n	80075fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_SPI_TransmitReceive+0x82>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_SPI_TransmitReceive+0x82>
 800734e:	887b      	ldrh	r3, [r7, #2]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800735a:	e14e      	b.n	80075fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b04      	cmp	r3, #4
 8007366:	d003      	beq.n	8007370 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2205      	movs	r2, #5
 800736c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	887a      	ldrh	r2, [r7, #2]
 8007380:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	887a      	ldrh	r2, [r7, #2]
 8007386:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	887a      	ldrh	r2, [r7, #2]
 8007392:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	887a      	ldrh	r2, [r7, #2]
 8007398:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	2b40      	cmp	r3, #64	; 0x40
 80073b2:	d007      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073cc:	d178      	bne.n	80074c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d002      	beq.n	80073dc <HAL_SPI_TransmitReceive+0x10a>
 80073d6:	8b7b      	ldrh	r3, [r7, #26]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d166      	bne.n	80074aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e0:	881a      	ldrh	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	1c9a      	adds	r2, r3, #2
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007400:	e053      	b.n	80074aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b02      	cmp	r3, #2
 800740e:	d11b      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x176>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007414:	b29b      	uxth	r3, r3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d016      	beq.n	8007448 <HAL_SPI_TransmitReceive+0x176>
 800741a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d113      	bne.n	8007448 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	881a      	ldrh	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007430:	1c9a      	adds	r2, r3, #2
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b01      	cmp	r3, #1
 8007454:	d119      	bne.n	800748a <HAL_SPI_TransmitReceive+0x1b8>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d014      	beq.n	800748a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746a:	b292      	uxth	r2, r2
 800746c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	1c9a      	adds	r2, r3, #2
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800747c:	b29b      	uxth	r3, r3
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007486:	2301      	movs	r3, #1
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800748a:	f7fc fc6f 	bl	8003d6c <HAL_GetTick>
 800748e:	4602      	mov	r2, r0
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	1ad3      	subs	r3, r2, r3
 8007494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007496:	429a      	cmp	r2, r3
 8007498:	d807      	bhi.n	80074aa <HAL_SPI_TransmitReceive+0x1d8>
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a0:	d003      	beq.n	80074aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074a8:	e0a7      	b.n	80075fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1a6      	bne.n	8007402 <HAL_SPI_TransmitReceive+0x130>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1a1      	bne.n	8007402 <HAL_SPI_TransmitReceive+0x130>
 80074be:	e07c      	b.n	80075ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_SPI_TransmitReceive+0x1fc>
 80074c8:	8b7b      	ldrh	r3, [r7, #26]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d16b      	bne.n	80075a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	330c      	adds	r3, #12
 80074d8:	7812      	ldrb	r2, [r2, #0]
 80074da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f4:	e057      	b.n	80075a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b02      	cmp	r3, #2
 8007502:	d11c      	bne.n	800753e <HAL_SPI_TransmitReceive+0x26c>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007508:	b29b      	uxth	r3, r3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d017      	beq.n	800753e <HAL_SPI_TransmitReceive+0x26c>
 800750e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007510:	2b01      	cmp	r3, #1
 8007512:	d114      	bne.n	800753e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	330c      	adds	r3, #12
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d119      	bne.n	8007580 <HAL_SPI_TransmitReceive+0x2ae>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d014      	beq.n	8007580 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800757c:	2301      	movs	r3, #1
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007580:	f7fc fbf4 	bl	8003d6c <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800758c:	429a      	cmp	r2, r3
 800758e:	d803      	bhi.n	8007598 <HAL_SPI_TransmitReceive+0x2c6>
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d102      	bne.n	800759e <HAL_SPI_TransmitReceive+0x2cc>
 8007598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800759a:	2b00      	cmp	r3, #0
 800759c:	d103      	bne.n	80075a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075a4:	e029      	b.n	80075fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1a2      	bne.n	80074f6 <HAL_SPI_TransmitReceive+0x224>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d19d      	bne.n	80074f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f8f8 	bl	80077b4 <SPI_EndRxTxTransaction>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d006      	beq.n	80075d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2220      	movs	r2, #32
 80075d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80075d6:	e010      	b.n	80075fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d10b      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	617b      	str	r3, [r7, #20]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	e000      	b.n	80075fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80075f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800760a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800760e:	4618      	mov	r0, r3
 8007610:	3730      	adds	r7, #48	; 0x30
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	603b      	str	r3, [r7, #0]
 8007622:	4613      	mov	r3, r2
 8007624:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007626:	e04c      	b.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762e:	d048      	beq.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007630:	f7fc fb9c 	bl	8003d6c <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d902      	bls.n	8007646 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d13d      	bne.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007654:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800765e:	d111      	bne.n	8007684 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007668:	d004      	beq.n	8007674 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007672:	d107      	bne.n	8007684 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007682:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800768c:	d10f      	bne.n	80076ae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e00f      	b.n	80076e2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4013      	ands	r3, r2
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	bf0c      	ite	eq
 80076d2:	2301      	moveq	r3, #1
 80076d4:	2300      	movne	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	461a      	mov	r2, r3
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d1a3      	bne.n	8007628 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b086      	sub	sp, #24
 80076ee:	af02      	add	r7, sp, #8
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	60b9      	str	r1, [r7, #8]
 80076f4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076fe:	d111      	bne.n	8007724 <SPI_EndRxTransaction+0x3a>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007708:	d004      	beq.n	8007714 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007712:	d107      	bne.n	8007724 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007722:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800772c:	d12a      	bne.n	8007784 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007736:	d012      	beq.n	800775e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	2180      	movs	r1, #128	; 0x80
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f7ff ff67 	bl	8007616 <SPI_WaitFlagStateUntilTimeout>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d02d      	beq.n	80077aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	f043 0220 	orr.w	r2, r3, #32
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e026      	b.n	80077ac <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2200      	movs	r2, #0
 8007766:	2101      	movs	r1, #1
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff ff54 	bl	8007616 <SPI_WaitFlagStateUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d01a      	beq.n	80077aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007778:	f043 0220 	orr.w	r2, r3, #32
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e013      	b.n	80077ac <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2200      	movs	r2, #0
 800778c:	2101      	movs	r1, #1
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff ff41 	bl	8007616 <SPI_WaitFlagStateUntilTimeout>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d007      	beq.n	80077aa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800779e:	f043 0220 	orr.w	r2, r3, #32
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	e000      	b.n	80077ac <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80077aa:	2300      	movs	r3, #0
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af02      	add	r7, sp, #8
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80077c0:	4b1b      	ldr	r3, [pc, #108]	; (8007830 <SPI_EndRxTxTransaction+0x7c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1b      	ldr	r2, [pc, #108]	; (8007834 <SPI_EndRxTxTransaction+0x80>)
 80077c6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ca:	0d5b      	lsrs	r3, r3, #21
 80077cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077d0:	fb02 f303 	mul.w	r3, r2, r3
 80077d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077de:	d112      	bne.n	8007806 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2200      	movs	r2, #0
 80077e8:	2180      	movs	r1, #128	; 0x80
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff ff13 	bl	8007616 <SPI_WaitFlagStateUntilTimeout>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d016      	beq.n	8007824 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	f043 0220 	orr.w	r2, r3, #32
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e00f      	b.n	8007826 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	3b01      	subs	r3, #1
 8007810:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781c:	2b80      	cmp	r3, #128	; 0x80
 800781e:	d0f2      	beq.n	8007806 <SPI_EndRxTxTransaction+0x52>
 8007820:	e000      	b.n	8007824 <SPI_EndRxTxTransaction+0x70>
        break;
 8007822:	bf00      	nop
  }

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000000 	.word	0x20000000
 8007834:	165e9f81 	.word	0x165e9f81

08007838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e01d      	b.n	8007886 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fb ff92 	bl	8003788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3304      	adds	r3, #4
 8007874:	4619      	mov	r1, r3
 8007876:	4610      	mov	r0, r2
 8007878:	f000 fbb2 	bl	8007fe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f042 0201 	orr.w	r2, r2, #1
 80078a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b06      	cmp	r3, #6
 80078b6:	d007      	beq.n	80078c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b082      	sub	sp, #8
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e01d      	b.n	8007924 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d106      	bne.n	8007902 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f815 	bl	800792c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f000 fb63 	bl	8007fe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2201      	movs	r2, #1
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fe2e 	bl	80085b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <HAL_TIM_PWM_Start+0x74>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <HAL_TIM_PWM_Start+0x2c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a14      	ldr	r2, [pc, #80]	; (80079b8 <HAL_TIM_PWM_Start+0x78>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d101      	bne.n	8007970 <HAL_TIM_PWM_Start+0x30>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <HAL_TIM_PWM_Start+0x32>
 8007970:	2300      	movs	r3, #0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d007      	beq.n	8007986 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007984:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 0307 	and.w	r3, r3, #7
 8007990:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b06      	cmp	r3, #6
 8007996:	d007      	beq.n	80079a8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f042 0201 	orr.w	r2, r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	40010000 	.word	0x40010000
 80079b8:	40010400 	.word	0x40010400

080079bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2200      	movs	r2, #0
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fdf0 	bl	80085b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <HAL_TIM_PWM_Stop+0xa8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_TIM_PWM_Stop+0x2c>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a21      	ldr	r2, [pc, #132]	; (8007a68 <HAL_TIM_PWM_Stop+0xac>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d101      	bne.n	80079ec <HAL_TIM_PWM_Stop+0x30>
 80079e8:	2301      	movs	r3, #1
 80079ea:	e000      	b.n	80079ee <HAL_TIM_PWM_Stop+0x32>
 80079ec:	2300      	movs	r3, #0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d017      	beq.n	8007a22 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6a1a      	ldr	r2, [r3, #32]
 80079f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80079fc:	4013      	ands	r3, r2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10f      	bne.n	8007a22 <HAL_TIM_PWM_Stop+0x66>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6a1a      	ldr	r2, [r3, #32]
 8007a08:	f240 4344 	movw	r3, #1092	; 0x444
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d107      	bne.n	8007a22 <HAL_TIM_PWM_Stop+0x66>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6a1a      	ldr	r2, [r3, #32]
 8007a28:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d10f      	bne.n	8007a52 <HAL_TIM_PWM_Stop+0x96>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6a1a      	ldr	r2, [r3, #32]
 8007a38:	f240 4344 	movw	r3, #1092	; 0x444
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <HAL_TIM_PWM_Stop+0x96>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 0201 	bic.w	r2, r2, #1
 8007a50:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	40010000 	.word	0x40010000
 8007a68:	40010400 	.word	0x40010400

08007a6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d122      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d11b      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f06f 0202 	mvn.w	r2, #2
 8007a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa78 	bl	8007fa4 <HAL_TIM_IC_CaptureCallback>
 8007ab4:	e005      	b.n	8007ac2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa6a 	bl	8007f90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa7b 	bl	8007fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0304 	and.w	r3, r3, #4
 8007ad2:	2b04      	cmp	r3, #4
 8007ad4:	d122      	bne.n	8007b1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b04      	cmp	r3, #4
 8007ae2:	d11b      	bne.n	8007b1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0204 	mvn.w	r2, #4
 8007aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 fa4e 	bl	8007fa4 <HAL_TIM_IC_CaptureCallback>
 8007b08:	e005      	b.n	8007b16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 fa40 	bl	8007f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fa51 	bl	8007fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d122      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0308 	and.w	r3, r3, #8
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d11b      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0208 	mvn.w	r2, #8
 8007b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2204      	movs	r2, #4
 8007b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f003 0303 	and.w	r3, r3, #3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fa24 	bl	8007fa4 <HAL_TIM_IC_CaptureCallback>
 8007b5c:	e005      	b.n	8007b6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 fa16 	bl	8007f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fa27 	bl	8007fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0310 	and.w	r3, r3, #16
 8007b7a:	2b10      	cmp	r3, #16
 8007b7c:	d122      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0310 	and.w	r3, r3, #16
 8007b88:	2b10      	cmp	r3, #16
 8007b8a:	d11b      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0210 	mvn.w	r2, #16
 8007b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2208      	movs	r2, #8
 8007b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	69db      	ldr	r3, [r3, #28]
 8007ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f9fa 	bl	8007fa4 <HAL_TIM_IC_CaptureCallback>
 8007bb0:	e005      	b.n	8007bbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f9ec 	bl	8007f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f9fd 	bl	8007fb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d10e      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d107      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0201 	mvn.w	r2, #1
 8007be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fa ff86 	bl	8002afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfa:	2b80      	cmp	r3, #128	; 0x80
 8007bfc:	d10e      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c08:	2b80      	cmp	r3, #128	; 0x80
 8007c0a:	d107      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fd78 	bl	800870c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c26:	2b40      	cmp	r3, #64	; 0x40
 8007c28:	d10e      	bne.n	8007c48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c34:	2b40      	cmp	r3, #64	; 0x40
 8007c36:	d107      	bne.n	8007c48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f9c2 	bl	8007fcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0320 	and.w	r3, r3, #32
 8007c52:	2b20      	cmp	r3, #32
 8007c54:	d10e      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0320 	and.w	r3, r3, #32
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d107      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0220 	mvn.w	r2, #32
 8007c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fd42 	bl	80086f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c74:	bf00      	nop
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d101      	bne.n	8007c96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e0b4      	b.n	8007e00 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2b0c      	cmp	r3, #12
 8007caa:	f200 809f 	bhi.w	8007dec <HAL_TIM_PWM_ConfigChannel+0x170>
 8007cae:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb4:	08007ce9 	.word	0x08007ce9
 8007cb8:	08007ded 	.word	0x08007ded
 8007cbc:	08007ded 	.word	0x08007ded
 8007cc0:	08007ded 	.word	0x08007ded
 8007cc4:	08007d29 	.word	0x08007d29
 8007cc8:	08007ded 	.word	0x08007ded
 8007ccc:	08007ded 	.word	0x08007ded
 8007cd0:	08007ded 	.word	0x08007ded
 8007cd4:	08007d6b 	.word	0x08007d6b
 8007cd8:	08007ded 	.word	0x08007ded
 8007cdc:	08007ded 	.word	0x08007ded
 8007ce0:	08007ded 	.word	0x08007ded
 8007ce4:	08007dab 	.word	0x08007dab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68b9      	ldr	r1, [r7, #8]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 fa16 	bl	8008120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	699a      	ldr	r2, [r3, #24]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0208 	orr.w	r2, r2, #8
 8007d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699a      	ldr	r2, [r3, #24]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0204 	bic.w	r2, r2, #4
 8007d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6999      	ldr	r1, [r3, #24]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	619a      	str	r2, [r3, #24]
      break;
 8007d26:	e062      	b.n	8007dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68b9      	ldr	r1, [r7, #8]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f000 fa66 	bl	8008200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	699a      	ldr	r2, [r3, #24]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6999      	ldr	r1, [r3, #24]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	021a      	lsls	r2, r3, #8
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	430a      	orrs	r2, r1
 8007d66:	619a      	str	r2, [r3, #24]
      break;
 8007d68:	e041      	b.n	8007dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 fabb 	bl	80082ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	69da      	ldr	r2, [r3, #28]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f042 0208 	orr.w	r2, r2, #8
 8007d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	69da      	ldr	r2, [r3, #28]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0204 	bic.w	r2, r2, #4
 8007d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69d9      	ldr	r1, [r3, #28]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	61da      	str	r2, [r3, #28]
      break;
 8007da8:	e021      	b.n	8007dee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68b9      	ldr	r1, [r7, #8]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f000 fb0f 	bl	80083d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69da      	ldr	r2, [r3, #28]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69d9      	ldr	r1, [r3, #28]
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	021a      	lsls	r2, r3, #8
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	430a      	orrs	r2, r1
 8007de8:	61da      	str	r2, [r3, #28]
      break;
 8007dea:	e000      	b.n	8007dee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007dec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_TIM_ConfigClockSource+0x18>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e0b3      	b.n	8007f88 <HAL_TIM_ConfigClockSource+0x180>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e46:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e58:	d03e      	beq.n	8007ed8 <HAL_TIM_ConfigClockSource+0xd0>
 8007e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e5e:	f200 8087 	bhi.w	8007f70 <HAL_TIM_ConfigClockSource+0x168>
 8007e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e66:	f000 8085 	beq.w	8007f74 <HAL_TIM_ConfigClockSource+0x16c>
 8007e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e6e:	d87f      	bhi.n	8007f70 <HAL_TIM_ConfigClockSource+0x168>
 8007e70:	2b70      	cmp	r3, #112	; 0x70
 8007e72:	d01a      	beq.n	8007eaa <HAL_TIM_ConfigClockSource+0xa2>
 8007e74:	2b70      	cmp	r3, #112	; 0x70
 8007e76:	d87b      	bhi.n	8007f70 <HAL_TIM_ConfigClockSource+0x168>
 8007e78:	2b60      	cmp	r3, #96	; 0x60
 8007e7a:	d050      	beq.n	8007f1e <HAL_TIM_ConfigClockSource+0x116>
 8007e7c:	2b60      	cmp	r3, #96	; 0x60
 8007e7e:	d877      	bhi.n	8007f70 <HAL_TIM_ConfigClockSource+0x168>
 8007e80:	2b50      	cmp	r3, #80	; 0x50
 8007e82:	d03c      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0xf6>
 8007e84:	2b50      	cmp	r3, #80	; 0x50
 8007e86:	d873      	bhi.n	8007f70 <HAL_TIM_ConfigClockSource+0x168>
 8007e88:	2b40      	cmp	r3, #64	; 0x40
 8007e8a:	d058      	beq.n	8007f3e <HAL_TIM_ConfigClockSource+0x136>
 8007e8c:	2b40      	cmp	r3, #64	; 0x40
 8007e8e:	d86f      	bhi.n	8007f70 <HAL_TIM_ConfigClockSource+0x168>
 8007e90:	2b30      	cmp	r3, #48	; 0x30
 8007e92:	d064      	beq.n	8007f5e <HAL_TIM_ConfigClockSource+0x156>
 8007e94:	2b30      	cmp	r3, #48	; 0x30
 8007e96:	d86b      	bhi.n	8007f70 <HAL_TIM_ConfigClockSource+0x168>
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d060      	beq.n	8007f5e <HAL_TIM_ConfigClockSource+0x156>
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	d867      	bhi.n	8007f70 <HAL_TIM_ConfigClockSource+0x168>
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d05c      	beq.n	8007f5e <HAL_TIM_ConfigClockSource+0x156>
 8007ea4:	2b10      	cmp	r3, #16
 8007ea6:	d05a      	beq.n	8007f5e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007ea8:	e062      	b.n	8007f70 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6818      	ldr	r0, [r3, #0]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	6899      	ldr	r1, [r3, #8]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f000 fb5b 	bl	8008574 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ecc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	609a      	str	r2, [r3, #8]
      break;
 8007ed6:	e04e      	b.n	8007f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	6899      	ldr	r1, [r3, #8]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	f000 fb44 	bl	8008574 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007efa:	609a      	str	r2, [r3, #8]
      break;
 8007efc:	e03b      	b.n	8007f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6859      	ldr	r1, [r3, #4]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f000 fab8 	bl	8008480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2150      	movs	r1, #80	; 0x50
 8007f16:	4618      	mov	r0, r3
 8007f18:	f000 fb11 	bl	800853e <TIM_ITRx_SetConfig>
      break;
 8007f1c:	e02b      	b.n	8007f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	6859      	ldr	r1, [r3, #4]
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	68db      	ldr	r3, [r3, #12]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	f000 fad7 	bl	80084de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2160      	movs	r1, #96	; 0x60
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fb01 	bl	800853e <TIM_ITRx_SetConfig>
      break;
 8007f3c:	e01b      	b.n	8007f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	6859      	ldr	r1, [r3, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f000 fa98 	bl	8008480 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2140      	movs	r1, #64	; 0x40
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 faf1 	bl	800853e <TIM_ITRx_SetConfig>
      break;
 8007f5c:	e00b      	b.n	8007f76 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f000 fae8 	bl	800853e <TIM_ITRx_SetConfig>
      break;
 8007f6e:	e002      	b.n	8007f76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f70:	bf00      	nop
 8007f72:	e000      	b.n	8007f76 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007f74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a40      	ldr	r2, [pc, #256]	; (80080f4 <TIM_Base_SetConfig+0x114>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d013      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ffe:	d00f      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a3d      	ldr	r2, [pc, #244]	; (80080f8 <TIM_Base_SetConfig+0x118>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00b      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a3c      	ldr	r2, [pc, #240]	; (80080fc <TIM_Base_SetConfig+0x11c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d007      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a3b      	ldr	r2, [pc, #236]	; (8008100 <TIM_Base_SetConfig+0x120>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d003      	beq.n	8008020 <TIM_Base_SetConfig+0x40>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a3a      	ldr	r2, [pc, #232]	; (8008104 <TIM_Base_SetConfig+0x124>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d108      	bne.n	8008032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	4313      	orrs	r3, r2
 8008030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4a2f      	ldr	r2, [pc, #188]	; (80080f4 <TIM_Base_SetConfig+0x114>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d02b      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008040:	d027      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a2c      	ldr	r2, [pc, #176]	; (80080f8 <TIM_Base_SetConfig+0x118>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d023      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a2b      	ldr	r2, [pc, #172]	; (80080fc <TIM_Base_SetConfig+0x11c>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d01f      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a2a      	ldr	r2, [pc, #168]	; (8008100 <TIM_Base_SetConfig+0x120>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d01b      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a29      	ldr	r2, [pc, #164]	; (8008104 <TIM_Base_SetConfig+0x124>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d017      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a28      	ldr	r2, [pc, #160]	; (8008108 <TIM_Base_SetConfig+0x128>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d013      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a27      	ldr	r2, [pc, #156]	; (800810c <TIM_Base_SetConfig+0x12c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00f      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a26      	ldr	r2, [pc, #152]	; (8008110 <TIM_Base_SetConfig+0x130>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d00b      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a25      	ldr	r2, [pc, #148]	; (8008114 <TIM_Base_SetConfig+0x134>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d007      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a24      	ldr	r2, [pc, #144]	; (8008118 <TIM_Base_SetConfig+0x138>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d003      	beq.n	8008092 <TIM_Base_SetConfig+0xb2>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a23      	ldr	r2, [pc, #140]	; (800811c <TIM_Base_SetConfig+0x13c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d108      	bne.n	80080a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a0a      	ldr	r2, [pc, #40]	; (80080f4 <TIM_Base_SetConfig+0x114>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d003      	beq.n	80080d8 <TIM_Base_SetConfig+0xf8>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a0c      	ldr	r2, [pc, #48]	; (8008104 <TIM_Base_SetConfig+0x124>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d103      	bne.n	80080e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	691a      	ldr	r2, [r3, #16]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	615a      	str	r2, [r3, #20]
}
 80080e6:	bf00      	nop
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	40010000 	.word	0x40010000
 80080f8:	40000400 	.word	0x40000400
 80080fc:	40000800 	.word	0x40000800
 8008100:	40000c00 	.word	0x40000c00
 8008104:	40010400 	.word	0x40010400
 8008108:	40014000 	.word	0x40014000
 800810c:	40014400 	.word	0x40014400
 8008110:	40014800 	.word	0x40014800
 8008114:	40001800 	.word	0x40001800
 8008118:	40001c00 	.word	0x40001c00
 800811c:	40002000 	.word	0x40002000

08008120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	f023 0201 	bic.w	r2, r3, #1
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0303 	bic.w	r3, r3, #3
 8008156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f023 0302 	bic.w	r3, r3, #2
 8008168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	4313      	orrs	r3, r2
 8008172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <TIM_OC1_SetConfig+0xd8>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d003      	beq.n	8008184 <TIM_OC1_SetConfig+0x64>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	4a1f      	ldr	r2, [pc, #124]	; (80081fc <TIM_OC1_SetConfig+0xdc>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d10c      	bne.n	800819e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f023 0308 	bic.w	r3, r3, #8
 800818a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	4313      	orrs	r3, r2
 8008194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f023 0304 	bic.w	r3, r3, #4
 800819c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a15      	ldr	r2, [pc, #84]	; (80081f8 <TIM_OC1_SetConfig+0xd8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d003      	beq.n	80081ae <TIM_OC1_SetConfig+0x8e>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a14      	ldr	r2, [pc, #80]	; (80081fc <TIM_OC1_SetConfig+0xdc>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d111      	bne.n	80081d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	621a      	str	r2, [r3, #32]
}
 80081ec:	bf00      	nop
 80081ee:	371c      	adds	r7, #28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40010400 	.word	0x40010400

08008200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	f023 0210 	bic.w	r2, r3, #16
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800822e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	021b      	lsls	r3, r3, #8
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	4313      	orrs	r3, r2
 8008242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f023 0320 	bic.w	r3, r3, #32
 800824a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	011b      	lsls	r3, r3, #4
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	4313      	orrs	r3, r2
 8008256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a22      	ldr	r2, [pc, #136]	; (80082e4 <TIM_OC2_SetConfig+0xe4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d003      	beq.n	8008268 <TIM_OC2_SetConfig+0x68>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a21      	ldr	r2, [pc, #132]	; (80082e8 <TIM_OC2_SetConfig+0xe8>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d10d      	bne.n	8008284 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800826e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	4313      	orrs	r3, r2
 800827a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a17      	ldr	r2, [pc, #92]	; (80082e4 <TIM_OC2_SetConfig+0xe4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d003      	beq.n	8008294 <TIM_OC2_SetConfig+0x94>
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a16      	ldr	r2, [pc, #88]	; (80082e8 <TIM_OC2_SetConfig+0xe8>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d113      	bne.n	80082bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800829a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	695b      	ldr	r3, [r3, #20]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	693a      	ldr	r2, [r7, #16]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	621a      	str	r2, [r3, #32]
}
 80082d6:	bf00      	nop
 80082d8:	371c      	adds	r7, #28
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	40010000 	.word	0x40010000
 80082e8:	40010400 	.word	0x40010400

080082ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f023 0303 	bic.w	r3, r3, #3
 8008322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	697a      	ldr	r2, [r7, #20]
 800833e:	4313      	orrs	r3, r2
 8008340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a21      	ldr	r2, [pc, #132]	; (80083cc <TIM_OC3_SetConfig+0xe0>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d003      	beq.n	8008352 <TIM_OC3_SetConfig+0x66>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a20      	ldr	r2, [pc, #128]	; (80083d0 <TIM_OC3_SetConfig+0xe4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d10d      	bne.n	800836e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	021b      	lsls	r3, r3, #8
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800836c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a16      	ldr	r2, [pc, #88]	; (80083cc <TIM_OC3_SetConfig+0xe0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d003      	beq.n	800837e <TIM_OC3_SetConfig+0x92>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a15      	ldr	r2, [pc, #84]	; (80083d0 <TIM_OC3_SetConfig+0xe4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d113      	bne.n	80083a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800838c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	621a      	str	r2, [r3, #32]
}
 80083c0:	bf00      	nop
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	40010000 	.word	0x40010000
 80083d0:	40010400 	.word	0x40010400

080083d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a1b      	ldr	r3, [r3, #32]
 80083ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800840a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	021b      	lsls	r3, r3, #8
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	4313      	orrs	r3, r2
 8008416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800841e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	031b      	lsls	r3, r3, #12
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a12      	ldr	r2, [pc, #72]	; (8008478 <TIM_OC4_SetConfig+0xa4>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d003      	beq.n	800843c <TIM_OC4_SetConfig+0x68>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	4a11      	ldr	r2, [pc, #68]	; (800847c <TIM_OC4_SetConfig+0xa8>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d109      	bne.n	8008450 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	019b      	lsls	r3, r3, #6
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	621a      	str	r2, [r3, #32]
}
 800846a:	bf00      	nop
 800846c:	371c      	adds	r7, #28
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	40010000 	.word	0x40010000
 800847c:	40010400 	.word	0x40010400

08008480 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008480:	b480      	push	{r7}
 8008482:	b087      	sub	sp, #28
 8008484:	af00      	add	r7, sp, #0
 8008486:	60f8      	str	r0, [r7, #12]
 8008488:	60b9      	str	r1, [r7, #8]
 800848a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f023 0201 	bic.w	r2, r3, #1
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f023 030a 	bic.w	r3, r3, #10
 80084bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084be:	697a      	ldr	r2, [r7, #20]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	621a      	str	r2, [r3, #32]
}
 80084d2:	bf00      	nop
 80084d4:	371c      	adds	r7, #28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr

080084de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084de:	b480      	push	{r7}
 80084e0:	b087      	sub	sp, #28
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	f023 0210 	bic.w	r2, r3, #16
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008508:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	031b      	lsls	r3, r3, #12
 800850e:	697a      	ldr	r2, [r7, #20]
 8008510:	4313      	orrs	r3, r2
 8008512:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800851a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	011b      	lsls	r3, r3, #4
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	4313      	orrs	r3, r2
 8008524:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	693a      	ldr	r2, [r7, #16]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008554:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	f043 0307 	orr.w	r3, r3, #7
 8008560:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	609a      	str	r2, [r3, #8]
}
 8008568:	bf00      	nop
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800858e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	021a      	lsls	r2, r3, #8
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	431a      	orrs	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4313      	orrs	r3, r2
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	609a      	str	r2, [r3, #8]
}
 80085a8:	bf00      	nop
 80085aa:	371c      	adds	r7, #28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	f003 031f 	and.w	r3, r3, #31
 80085c6:	2201      	movs	r2, #1
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1a      	ldr	r2, [r3, #32]
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	43db      	mvns	r3, r3
 80085d6:	401a      	ands	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6a1a      	ldr	r2, [r3, #32]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	f003 031f 	and.w	r3, r3, #31
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	fa01 f303 	lsl.w	r3, r1, r3
 80085ec:	431a      	orrs	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	621a      	str	r2, [r3, #32]
}
 80085f2:	bf00      	nop
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008614:	2302      	movs	r3, #2
 8008616:	e05a      	b.n	80086ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800863e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a21      	ldr	r2, [pc, #132]	; (80086dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d022      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008664:	d01d      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a1d      	ldr	r2, [pc, #116]	; (80086e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d018      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a1b      	ldr	r2, [pc, #108]	; (80086e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d013      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a1a      	ldr	r2, [pc, #104]	; (80086e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d00e      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a18      	ldr	r2, [pc, #96]	; (80086ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d009      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a17      	ldr	r2, [pc, #92]	; (80086f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d004      	beq.n	80086a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a15      	ldr	r2, [pc, #84]	; (80086f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d10c      	bne.n	80086bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	40010000 	.word	0x40010000
 80086e0:	40000400 	.word	0x40000400
 80086e4:	40000800 	.word	0x40000800
 80086e8:	40000c00 	.word	0x40000c00
 80086ec:	40010400 	.word	0x40010400
 80086f0:	40014000 	.word	0x40014000
 80086f4:	40001800 	.word	0x40001800

080086f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e03f      	b.n	80087b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	d106      	bne.n	800874c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f7fb f892 	bl	8003870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2224      	movs	r2, #36	; 0x24
 8008750:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fb4b 	bl	8008e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691a      	ldr	r2, [r3, #16]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	695a      	ldr	r2, [r3, #20]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68da      	ldr	r2, [r3, #12]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2220      	movs	r2, #32
 80087a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b088      	sub	sp, #32
 80087be:	af02      	add	r7, sp, #8
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80087ca:	2300      	movs	r3, #0
 80087cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	f040 8083 	bne.w	80088e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <HAL_UART_Transmit+0x2e>
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e07b      	b.n	80088e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d101      	bne.n	80087fa <HAL_UART_Transmit+0x40>
 80087f6:	2302      	movs	r3, #2
 80087f8:	e074      	b.n	80088e4 <HAL_UART_Transmit+0x12a>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2200      	movs	r2, #0
 8008806:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2221      	movs	r2, #33	; 0x21
 800880c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008810:	f7fb faac 	bl	8003d6c <HAL_GetTick>
 8008814:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	88fa      	ldrh	r2, [r7, #6]
 800881a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	88fa      	ldrh	r2, [r7, #6]
 8008820:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800882a:	e042      	b.n	80088b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008830:	b29b      	uxth	r3, r3
 8008832:	3b01      	subs	r3, #1
 8008834:	b29a      	uxth	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008842:	d122      	bne.n	800888a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	9300      	str	r3, [sp, #0]
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	2200      	movs	r2, #0
 800884c:	2180      	movs	r1, #128	; 0x80
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 f96a 	bl	8008b28 <UART_WaitOnFlagUntilTimeout>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800885a:	2303      	movs	r3, #3
 800885c:	e042      	b.n	80088e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	881b      	ldrh	r3, [r3, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008870:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d103      	bne.n	8008882 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	3302      	adds	r3, #2
 800887e:	60bb      	str	r3, [r7, #8]
 8008880:	e017      	b.n	80088b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	3301      	adds	r3, #1
 8008886:	60bb      	str	r3, [r7, #8]
 8008888:	e013      	b.n	80088b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2200      	movs	r2, #0
 8008892:	2180      	movs	r1, #128	; 0x80
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 f947 	bl	8008b28 <UART_WaitOnFlagUntilTimeout>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d001      	beq.n	80088a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e01f      	b.n	80088e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	1c5a      	adds	r2, r3, #1
 80088a8:	60ba      	str	r2, [r7, #8]
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1b7      	bne.n	800882c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	2200      	movs	r2, #0
 80088c4:	2140      	movs	r1, #64	; 0x40
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 f92e 	bl	8008b28 <UART_WaitOnFlagUntilTimeout>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e006      	b.n	80088e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2220      	movs	r2, #32
 80088da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	e000      	b.n	80088e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80088e2:	2302      	movs	r3, #2
  }
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800890c:	2300      	movs	r3, #0
 800890e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10d      	bne.n	800893e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	f003 0320 	and.w	r3, r3, #32
 8008928:	2b00      	cmp	r3, #0
 800892a:	d008      	beq.n	800893e <HAL_UART_IRQHandler+0x52>
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	f003 0320 	and.w	r3, r3, #32
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f9e0 	bl	8008cfc <UART_Receive_IT>
      return;
 800893c:	e0d0      	b.n	8008ae0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 80b0 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x1ba>
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	2b00      	cmp	r3, #0
 800894e:	d105      	bne.n	800895c <HAL_UART_IRQHandler+0x70>
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008956:	2b00      	cmp	r3, #0
 8008958:	f000 80a5 	beq.w	8008aa6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00a      	beq.n	800897c <HAL_UART_IRQHandler+0x90>
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896c:	2b00      	cmp	r3, #0
 800896e:	d005      	beq.n	800897c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008974:	f043 0201 	orr.w	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f003 0304 	and.w	r3, r3, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <HAL_UART_IRQHandler+0xb0>
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008994:	f043 0202 	orr.w	r2, r3, #2
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <HAL_UART_IRQHandler+0xd0>
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f003 0301 	and.w	r3, r3, #1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b4:	f043 0204 	orr.w	r2, r3, #4
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	f003 0308 	and.w	r3, r3, #8
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00f      	beq.n	80089e6 <HAL_UART_IRQHandler+0xfa>
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	f003 0320 	and.w	r3, r3, #32
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <HAL_UART_IRQHandler+0xee>
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d005      	beq.n	80089e6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	f043 0208 	orr.w	r2, r3, #8
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d077      	beq.n	8008ade <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	f003 0320 	and.w	r3, r3, #32
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d007      	beq.n	8008a08 <HAL_UART_IRQHandler+0x11c>
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	f003 0320 	and.w	r3, r3, #32
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f97a 	bl	8008cfc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a12:	2b40      	cmp	r3, #64	; 0x40
 8008a14:	bf0c      	ite	eq
 8008a16:	2301      	moveq	r3, #1
 8008a18:	2300      	movne	r3, #0
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a22:	f003 0308 	and.w	r3, r3, #8
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d102      	bne.n	8008a30 <HAL_UART_IRQHandler+0x144>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d031      	beq.n	8008a94 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 f8c3 	bl	8008bbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a40:	2b40      	cmp	r3, #64	; 0x40
 8008a42:	d123      	bne.n	8008a8c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695a      	ldr	r2, [r3, #20]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a52:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d013      	beq.n	8008a84 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a60:	4a21      	ldr	r2, [pc, #132]	; (8008ae8 <HAL_UART_IRQHandler+0x1fc>)
 8008a62:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fb febc 	bl	80047e6 <HAL_DMA_Abort_IT>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d016      	beq.n	8008aa2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7a:	687a      	ldr	r2, [r7, #4]
 8008a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a7e:	4610      	mov	r0, r2
 8008a80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a82:	e00e      	b.n	8008aa2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f845 	bl	8008b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a8a:	e00a      	b.n	8008aa2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f841 	bl	8008b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a92:	e006      	b.n	8008aa2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 f83d 	bl	8008b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008aa0:	e01d      	b.n	8008ade <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa2:	bf00      	nop
    return;
 8008aa4:	e01b      	b.n	8008ade <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d008      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x1d6>
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f8b0 	bl	8008c20 <UART_Transmit_IT>
    return;
 8008ac0:	e00e      	b.n	8008ae0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d009      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x1f4>
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d004      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f8f8 	bl	8008ccc <UART_EndTransmit_IT>
    return;
 8008adc:	e000      	b.n	8008ae0 <HAL_UART_IRQHandler+0x1f4>
    return;
 8008ade:	bf00      	nop
  }
}
 8008ae0:	3720      	adds	r7, #32
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	08008bf9 	.word	0x08008bf9

08008aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	603b      	str	r3, [r7, #0]
 8008b34:	4613      	mov	r3, r2
 8008b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b38:	e02c      	b.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b40:	d028      	beq.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d007      	beq.n	8008b58 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b48:	f7fb f910 	bl	8003d6c <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d21d      	bcs.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	695a      	ldr	r2, [r3, #20]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 0201 	bic.w	r2, r2, #1
 8008b76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e00f      	b.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	461a      	mov	r2, r3
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d0c3      	beq.n	8008b3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bd2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	695a      	ldr	r2, [r3, #20]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0201 	bic.w	r2, r2, #1
 8008be2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2220      	movs	r2, #32
 8008be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f7ff ff7e 	bl	8008b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c18:	bf00      	nop
 8008c1a:	3710      	adds	r7, #16
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b21      	cmp	r3, #33	; 0x21
 8008c32:	d144      	bne.n	8008cbe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c3c:	d11a      	bne.n	8008c74 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c52:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d105      	bne.n	8008c68 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6a1b      	ldr	r3, [r3, #32]
 8008c60:	1c9a      	adds	r2, r3, #2
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	621a      	str	r2, [r3, #32]
 8008c66:	e00e      	b.n	8008c86 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a1b      	ldr	r3, [r3, #32]
 8008c6c:	1c5a      	adds	r2, r3, #1
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	621a      	str	r2, [r3, #32]
 8008c72:	e008      	b.n	8008c86 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a1b      	ldr	r3, [r3, #32]
 8008c78:	1c59      	adds	r1, r3, #1
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	6211      	str	r1, [r2, #32]
 8008c7e:	781a      	ldrb	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	4619      	mov	r1, r3
 8008c94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10f      	bne.n	8008cba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68da      	ldr	r2, [r3, #12]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ca8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e000      	b.n	8008cc0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008cbe:	2302      	movs	r3, #2
  }
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7ff fefd 	bl	8008aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b22      	cmp	r3, #34	; 0x22
 8008d0e:	d171      	bne.n	8008df4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d18:	d123      	bne.n	8008d62 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10e      	bne.n	8008d46 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3e:	1c9a      	adds	r2, r3, #2
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	629a      	str	r2, [r3, #40]	; 0x28
 8008d44:	e029      	b.n	8008d9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	b29b      	uxth	r3, r3
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8008d60:	e01b      	b.n	8008d9a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10a      	bne.n	8008d80 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6858      	ldr	r0, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d74:	1c59      	adds	r1, r3, #1
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6291      	str	r1, [r2, #40]	; 0x28
 8008d7a:	b2c2      	uxtb	r2, r0
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	e00c      	b.n	8008d9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8c:	1c58      	adds	r0, r3, #1
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	6288      	str	r0, [r1, #40]	; 0x28
 8008d92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d96:	b2d2      	uxtb	r2, r2
 8008d98:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	4619      	mov	r1, r3
 8008da8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d120      	bne.n	8008df0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0220 	bic.w	r2, r2, #32
 8008dbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	695a      	ldr	r2, [r3, #20]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0201 	bic.w	r2, r2, #1
 8008ddc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2220      	movs	r2, #32
 8008de2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff fe8a 	bl	8008b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008dec:	2300      	movs	r3, #0
 8008dee:	e002      	b.n	8008df6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008df0:	2300      	movs	r3, #0
 8008df2:	e000      	b.n	8008df6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008df4:	2302      	movs	r3, #2
  }
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
	...

08008e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	b0bd      	sub	sp, #244	; 0xf4
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e1c:	68d9      	ldr	r1, [r3, #12]
 8008e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	ea40 0301 	orr.w	r3, r0, r1
 8008e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	431a      	orrs	r2, r3
 8008e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e58:	f021 010c 	bic.w	r1, r1, #12
 8008e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e66:	430b      	orrs	r3, r1
 8008e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7a:	6999      	ldr	r1, [r3, #24]
 8008e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	ea40 0301 	orr.w	r3, r0, r1
 8008e86:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e92:	f040 81a5 	bne.w	80091e0 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	4bcd      	ldr	r3, [pc, #820]	; (80091d4 <UART_SetConfig+0x3d4>)
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d006      	beq.n	8008eb0 <UART_SetConfig+0xb0>
 8008ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	4bcb      	ldr	r3, [pc, #812]	; (80091d8 <UART_SetConfig+0x3d8>)
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	f040 80cb 	bne.w	8009046 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008eb0:	f7fd fb9e 	bl	80065f0 <HAL_RCC_GetPCLK2Freq>
 8008eb4:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ebc:	461c      	mov	r4, r3
 8008ebe:	f04f 0500 	mov.w	r5, #0
 8008ec2:	4622      	mov	r2, r4
 8008ec4:	462b      	mov	r3, r5
 8008ec6:	1891      	adds	r1, r2, r2
 8008ec8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008ecc:	415b      	adcs	r3, r3
 8008ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008ed2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008ed6:	1912      	adds	r2, r2, r4
 8008ed8:	eb45 0303 	adc.w	r3, r5, r3
 8008edc:	f04f 0000 	mov.w	r0, #0
 8008ee0:	f04f 0100 	mov.w	r1, #0
 8008ee4:	00d9      	lsls	r1, r3, #3
 8008ee6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008eea:	00d0      	lsls	r0, r2, #3
 8008eec:	4602      	mov	r2, r0
 8008eee:	460b      	mov	r3, r1
 8008ef0:	1911      	adds	r1, r2, r4
 8008ef2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008ef6:	416b      	adcs	r3, r5
 8008ef8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f04f 0300 	mov.w	r3, #0
 8008f08:	1891      	adds	r1, r2, r2
 8008f0a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008f0e:	415b      	adcs	r3, r3
 8008f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f14:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008f18:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008f1c:	f7f7 fec4 	bl	8000ca8 <__aeabi_uldivmod>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4bad      	ldr	r3, [pc, #692]	; (80091dc <UART_SetConfig+0x3dc>)
 8008f26:	fba3 2302 	umull	r2, r3, r3, r2
 8008f2a:	095b      	lsrs	r3, r3, #5
 8008f2c:	011e      	lsls	r6, r3, #4
 8008f2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f32:	461c      	mov	r4, r3
 8008f34:	f04f 0500 	mov.w	r5, #0
 8008f38:	4622      	mov	r2, r4
 8008f3a:	462b      	mov	r3, r5
 8008f3c:	1891      	adds	r1, r2, r2
 8008f3e:	67b9      	str	r1, [r7, #120]	; 0x78
 8008f40:	415b      	adcs	r3, r3
 8008f42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f44:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008f48:	1912      	adds	r2, r2, r4
 8008f4a:	eb45 0303 	adc.w	r3, r5, r3
 8008f4e:	f04f 0000 	mov.w	r0, #0
 8008f52:	f04f 0100 	mov.w	r1, #0
 8008f56:	00d9      	lsls	r1, r3, #3
 8008f58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f5c:	00d0      	lsls	r0, r2, #3
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	1911      	adds	r1, r2, r4
 8008f64:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008f68:	416b      	adcs	r3, r5
 8008f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	461a      	mov	r2, r3
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	1891      	adds	r1, r2, r2
 8008f7c:	6739      	str	r1, [r7, #112]	; 0x70
 8008f7e:	415b      	adcs	r3, r3
 8008f80:	677b      	str	r3, [r7, #116]	; 0x74
 8008f82:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008f86:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008f8a:	f7f7 fe8d 	bl	8000ca8 <__aeabi_uldivmod>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4b92      	ldr	r3, [pc, #584]	; (80091dc <UART_SetConfig+0x3dc>)
 8008f94:	fba3 1302 	umull	r1, r3, r3, r2
 8008f98:	095b      	lsrs	r3, r3, #5
 8008f9a:	2164      	movs	r1, #100	; 0x64
 8008f9c:	fb01 f303 	mul.w	r3, r1, r3
 8008fa0:	1ad3      	subs	r3, r2, r3
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	3332      	adds	r3, #50	; 0x32
 8008fa6:	4a8d      	ldr	r2, [pc, #564]	; (80091dc <UART_SetConfig+0x3dc>)
 8008fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fac:	095b      	lsrs	r3, r3, #5
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fb4:	441e      	add	r6, r3
 8008fb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f04f 0100 	mov.w	r1, #0
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	1894      	adds	r4, r2, r2
 8008fc6:	66bc      	str	r4, [r7, #104]	; 0x68
 8008fc8:	415b      	adcs	r3, r3
 8008fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fcc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8008fd0:	1812      	adds	r2, r2, r0
 8008fd2:	eb41 0303 	adc.w	r3, r1, r3
 8008fd6:	f04f 0400 	mov.w	r4, #0
 8008fda:	f04f 0500 	mov.w	r5, #0
 8008fde:	00dd      	lsls	r5, r3, #3
 8008fe0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008fe4:	00d4      	lsls	r4, r2, #3
 8008fe6:	4622      	mov	r2, r4
 8008fe8:	462b      	mov	r3, r5
 8008fea:	1814      	adds	r4, r2, r0
 8008fec:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8008ff0:	414b      	adcs	r3, r1
 8008ff2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	1891      	adds	r1, r2, r2
 8009004:	6639      	str	r1, [r7, #96]	; 0x60
 8009006:	415b      	adcs	r3, r3
 8009008:	667b      	str	r3, [r7, #100]	; 0x64
 800900a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800900e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009012:	f7f7 fe49 	bl	8000ca8 <__aeabi_uldivmod>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4b70      	ldr	r3, [pc, #448]	; (80091dc <UART_SetConfig+0x3dc>)
 800901c:	fba3 1302 	umull	r1, r3, r3, r2
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	2164      	movs	r1, #100	; 0x64
 8009024:	fb01 f303 	mul.w	r3, r1, r3
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	3332      	adds	r3, #50	; 0x32
 800902e:	4a6b      	ldr	r2, [pc, #428]	; (80091dc <UART_SetConfig+0x3dc>)
 8009030:	fba2 2303 	umull	r2, r3, r2, r3
 8009034:	095b      	lsrs	r3, r3, #5
 8009036:	f003 0207 	and.w	r2, r3, #7
 800903a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4432      	add	r2, r6
 8009042:	609a      	str	r2, [r3, #8]
 8009044:	e26d      	b.n	8009522 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009046:	f7fd fabf 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 800904a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800904e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009052:	461c      	mov	r4, r3
 8009054:	f04f 0500 	mov.w	r5, #0
 8009058:	4622      	mov	r2, r4
 800905a:	462b      	mov	r3, r5
 800905c:	1891      	adds	r1, r2, r2
 800905e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009060:	415b      	adcs	r3, r3
 8009062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009064:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009068:	1912      	adds	r2, r2, r4
 800906a:	eb45 0303 	adc.w	r3, r5, r3
 800906e:	f04f 0000 	mov.w	r0, #0
 8009072:	f04f 0100 	mov.w	r1, #0
 8009076:	00d9      	lsls	r1, r3, #3
 8009078:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800907c:	00d0      	lsls	r0, r2, #3
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	1911      	adds	r1, r2, r4
 8009084:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009088:	416b      	adcs	r3, r5
 800908a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800908e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	461a      	mov	r2, r3
 8009096:	f04f 0300 	mov.w	r3, #0
 800909a:	1891      	adds	r1, r2, r2
 800909c:	6539      	str	r1, [r7, #80]	; 0x50
 800909e:	415b      	adcs	r3, r3
 80090a0:	657b      	str	r3, [r7, #84]	; 0x54
 80090a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090a6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80090aa:	f7f7 fdfd 	bl	8000ca8 <__aeabi_uldivmod>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4b4a      	ldr	r3, [pc, #296]	; (80091dc <UART_SetConfig+0x3dc>)
 80090b4:	fba3 2302 	umull	r2, r3, r3, r2
 80090b8:	095b      	lsrs	r3, r3, #5
 80090ba:	011e      	lsls	r6, r3, #4
 80090bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090c0:	461c      	mov	r4, r3
 80090c2:	f04f 0500 	mov.w	r5, #0
 80090c6:	4622      	mov	r2, r4
 80090c8:	462b      	mov	r3, r5
 80090ca:	1891      	adds	r1, r2, r2
 80090cc:	64b9      	str	r1, [r7, #72]	; 0x48
 80090ce:	415b      	adcs	r3, r3
 80090d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80090d6:	1912      	adds	r2, r2, r4
 80090d8:	eb45 0303 	adc.w	r3, r5, r3
 80090dc:	f04f 0000 	mov.w	r0, #0
 80090e0:	f04f 0100 	mov.w	r1, #0
 80090e4:	00d9      	lsls	r1, r3, #3
 80090e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090ea:	00d0      	lsls	r0, r2, #3
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	1911      	adds	r1, r2, r4
 80090f2:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80090f6:	416b      	adcs	r3, r5
 80090f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80090fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	461a      	mov	r2, r3
 8009104:	f04f 0300 	mov.w	r3, #0
 8009108:	1891      	adds	r1, r2, r2
 800910a:	6439      	str	r1, [r7, #64]	; 0x40
 800910c:	415b      	adcs	r3, r3
 800910e:	647b      	str	r3, [r7, #68]	; 0x44
 8009110:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009114:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8009118:	f7f7 fdc6 	bl	8000ca8 <__aeabi_uldivmod>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4b2e      	ldr	r3, [pc, #184]	; (80091dc <UART_SetConfig+0x3dc>)
 8009122:	fba3 1302 	umull	r1, r3, r3, r2
 8009126:	095b      	lsrs	r3, r3, #5
 8009128:	2164      	movs	r1, #100	; 0x64
 800912a:	fb01 f303 	mul.w	r3, r1, r3
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	3332      	adds	r3, #50	; 0x32
 8009134:	4a29      	ldr	r2, [pc, #164]	; (80091dc <UART_SetConfig+0x3dc>)
 8009136:	fba2 2303 	umull	r2, r3, r2, r3
 800913a:	095b      	lsrs	r3, r3, #5
 800913c:	005b      	lsls	r3, r3, #1
 800913e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009142:	441e      	add	r6, r3
 8009144:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009148:	4618      	mov	r0, r3
 800914a:	f04f 0100 	mov.w	r1, #0
 800914e:	4602      	mov	r2, r0
 8009150:	460b      	mov	r3, r1
 8009152:	1894      	adds	r4, r2, r2
 8009154:	63bc      	str	r4, [r7, #56]	; 0x38
 8009156:	415b      	adcs	r3, r3
 8009158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800915e:	1812      	adds	r2, r2, r0
 8009160:	eb41 0303 	adc.w	r3, r1, r3
 8009164:	f04f 0400 	mov.w	r4, #0
 8009168:	f04f 0500 	mov.w	r5, #0
 800916c:	00dd      	lsls	r5, r3, #3
 800916e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009172:	00d4      	lsls	r4, r2, #3
 8009174:	4622      	mov	r2, r4
 8009176:	462b      	mov	r3, r5
 8009178:	1814      	adds	r4, r2, r0
 800917a:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800917e:	414b      	adcs	r3, r1
 8009180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	461a      	mov	r2, r3
 800918c:	f04f 0300 	mov.w	r3, #0
 8009190:	1891      	adds	r1, r2, r2
 8009192:	6339      	str	r1, [r7, #48]	; 0x30
 8009194:	415b      	adcs	r3, r3
 8009196:	637b      	str	r3, [r7, #52]	; 0x34
 8009198:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800919c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80091a0:	f7f7 fd82 	bl	8000ca8 <__aeabi_uldivmod>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <UART_SetConfig+0x3dc>)
 80091aa:	fba3 1302 	umull	r1, r3, r3, r2
 80091ae:	095b      	lsrs	r3, r3, #5
 80091b0:	2164      	movs	r1, #100	; 0x64
 80091b2:	fb01 f303 	mul.w	r3, r1, r3
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	3332      	adds	r3, #50	; 0x32
 80091bc:	4a07      	ldr	r2, [pc, #28]	; (80091dc <UART_SetConfig+0x3dc>)
 80091be:	fba2 2303 	umull	r2, r3, r2, r3
 80091c2:	095b      	lsrs	r3, r3, #5
 80091c4:	f003 0207 	and.w	r2, r3, #7
 80091c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4432      	add	r2, r6
 80091d0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80091d2:	e1a6      	b.n	8009522 <UART_SetConfig+0x722>
 80091d4:	40011000 	.word	0x40011000
 80091d8:	40011400 	.word	0x40011400
 80091dc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	4bd1      	ldr	r3, [pc, #836]	; (800952c <UART_SetConfig+0x72c>)
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d006      	beq.n	80091fa <UART_SetConfig+0x3fa>
 80091ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	4bcf      	ldr	r3, [pc, #828]	; (8009530 <UART_SetConfig+0x730>)
 80091f4:	429a      	cmp	r2, r3
 80091f6:	f040 80ca 	bne.w	800938e <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80091fa:	f7fd f9f9 	bl	80065f0 <HAL_RCC_GetPCLK2Freq>
 80091fe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009202:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009206:	461c      	mov	r4, r3
 8009208:	f04f 0500 	mov.w	r5, #0
 800920c:	4622      	mov	r2, r4
 800920e:	462b      	mov	r3, r5
 8009210:	1891      	adds	r1, r2, r2
 8009212:	62b9      	str	r1, [r7, #40]	; 0x28
 8009214:	415b      	adcs	r3, r3
 8009216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009218:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800921c:	1912      	adds	r2, r2, r4
 800921e:	eb45 0303 	adc.w	r3, r5, r3
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f04f 0100 	mov.w	r1, #0
 800922a:	00d9      	lsls	r1, r3, #3
 800922c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009230:	00d0      	lsls	r0, r2, #3
 8009232:	4602      	mov	r2, r0
 8009234:	460b      	mov	r3, r1
 8009236:	eb12 0a04 	adds.w	sl, r2, r4
 800923a:	eb43 0b05 	adc.w	fp, r3, r5
 800923e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	4618      	mov	r0, r3
 8009246:	f04f 0100 	mov.w	r1, #0
 800924a:	f04f 0200 	mov.w	r2, #0
 800924e:	f04f 0300 	mov.w	r3, #0
 8009252:	008b      	lsls	r3, r1, #2
 8009254:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009258:	0082      	lsls	r2, r0, #2
 800925a:	4650      	mov	r0, sl
 800925c:	4659      	mov	r1, fp
 800925e:	f7f7 fd23 	bl	8000ca8 <__aeabi_uldivmod>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4bb3      	ldr	r3, [pc, #716]	; (8009534 <UART_SetConfig+0x734>)
 8009268:	fba3 2302 	umull	r2, r3, r3, r2
 800926c:	095b      	lsrs	r3, r3, #5
 800926e:	011e      	lsls	r6, r3, #4
 8009270:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009274:	4618      	mov	r0, r3
 8009276:	f04f 0100 	mov.w	r1, #0
 800927a:	4602      	mov	r2, r0
 800927c:	460b      	mov	r3, r1
 800927e:	1894      	adds	r4, r2, r2
 8009280:	623c      	str	r4, [r7, #32]
 8009282:	415b      	adcs	r3, r3
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
 8009286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800928a:	1812      	adds	r2, r2, r0
 800928c:	eb41 0303 	adc.w	r3, r1, r3
 8009290:	f04f 0400 	mov.w	r4, #0
 8009294:	f04f 0500 	mov.w	r5, #0
 8009298:	00dd      	lsls	r5, r3, #3
 800929a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800929e:	00d4      	lsls	r4, r2, #3
 80092a0:	4622      	mov	r2, r4
 80092a2:	462b      	mov	r3, r5
 80092a4:	1814      	adds	r4, r2, r0
 80092a6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80092aa:	414b      	adcs	r3, r1
 80092ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f04f 0100 	mov.w	r1, #0
 80092bc:	f04f 0200 	mov.w	r2, #0
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	008b      	lsls	r3, r1, #2
 80092c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80092ca:	0082      	lsls	r2, r0, #2
 80092cc:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80092d0:	f7f7 fcea 	bl	8000ca8 <__aeabi_uldivmod>
 80092d4:	4602      	mov	r2, r0
 80092d6:	460b      	mov	r3, r1
 80092d8:	4b96      	ldr	r3, [pc, #600]	; (8009534 <UART_SetConfig+0x734>)
 80092da:	fba3 1302 	umull	r1, r3, r3, r2
 80092de:	095b      	lsrs	r3, r3, #5
 80092e0:	2164      	movs	r1, #100	; 0x64
 80092e2:	fb01 f303 	mul.w	r3, r1, r3
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	011b      	lsls	r3, r3, #4
 80092ea:	3332      	adds	r3, #50	; 0x32
 80092ec:	4a91      	ldr	r2, [pc, #580]	; (8009534 <UART_SetConfig+0x734>)
 80092ee:	fba2 2303 	umull	r2, r3, r2, r3
 80092f2:	095b      	lsrs	r3, r3, #5
 80092f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092f8:	441e      	add	r6, r3
 80092fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092fe:	4618      	mov	r0, r3
 8009300:	f04f 0100 	mov.w	r1, #0
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	1894      	adds	r4, r2, r2
 800930a:	61bc      	str	r4, [r7, #24]
 800930c:	415b      	adcs	r3, r3
 800930e:	61fb      	str	r3, [r7, #28]
 8009310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009314:	1812      	adds	r2, r2, r0
 8009316:	eb41 0303 	adc.w	r3, r1, r3
 800931a:	f04f 0400 	mov.w	r4, #0
 800931e:	f04f 0500 	mov.w	r5, #0
 8009322:	00dd      	lsls	r5, r3, #3
 8009324:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009328:	00d4      	lsls	r4, r2, #3
 800932a:	4622      	mov	r2, r4
 800932c:	462b      	mov	r3, r5
 800932e:	1814      	adds	r4, r2, r0
 8009330:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009334:	414b      	adcs	r3, r1
 8009336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800933a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	4618      	mov	r0, r3
 8009342:	f04f 0100 	mov.w	r1, #0
 8009346:	f04f 0200 	mov.w	r2, #0
 800934a:	f04f 0300 	mov.w	r3, #0
 800934e:	008b      	lsls	r3, r1, #2
 8009350:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009354:	0082      	lsls	r2, r0, #2
 8009356:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800935a:	f7f7 fca5 	bl	8000ca8 <__aeabi_uldivmod>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4b74      	ldr	r3, [pc, #464]	; (8009534 <UART_SetConfig+0x734>)
 8009364:	fba3 1302 	umull	r1, r3, r3, r2
 8009368:	095b      	lsrs	r3, r3, #5
 800936a:	2164      	movs	r1, #100	; 0x64
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	011b      	lsls	r3, r3, #4
 8009374:	3332      	adds	r3, #50	; 0x32
 8009376:	4a6f      	ldr	r2, [pc, #444]	; (8009534 <UART_SetConfig+0x734>)
 8009378:	fba2 2303 	umull	r2, r3, r2, r3
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	f003 020f 	and.w	r2, r3, #15
 8009382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4432      	add	r2, r6
 800938a:	609a      	str	r2, [r3, #8]
 800938c:	e0c9      	b.n	8009522 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800938e:	f7fd f91b 	bl	80065c8 <HAL_RCC_GetPCLK1Freq>
 8009392:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009396:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800939a:	461c      	mov	r4, r3
 800939c:	f04f 0500 	mov.w	r5, #0
 80093a0:	4622      	mov	r2, r4
 80093a2:	462b      	mov	r3, r5
 80093a4:	1891      	adds	r1, r2, r2
 80093a6:	6139      	str	r1, [r7, #16]
 80093a8:	415b      	adcs	r3, r3
 80093aa:	617b      	str	r3, [r7, #20]
 80093ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093b0:	1912      	adds	r2, r2, r4
 80093b2:	eb45 0303 	adc.w	r3, r5, r3
 80093b6:	f04f 0000 	mov.w	r0, #0
 80093ba:	f04f 0100 	mov.w	r1, #0
 80093be:	00d9      	lsls	r1, r3, #3
 80093c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093c4:	00d0      	lsls	r0, r2, #3
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	eb12 0804 	adds.w	r8, r2, r4
 80093ce:	eb43 0905 	adc.w	r9, r3, r5
 80093d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	4618      	mov	r0, r3
 80093da:	f04f 0100 	mov.w	r1, #0
 80093de:	f04f 0200 	mov.w	r2, #0
 80093e2:	f04f 0300 	mov.w	r3, #0
 80093e6:	008b      	lsls	r3, r1, #2
 80093e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80093ec:	0082      	lsls	r2, r0, #2
 80093ee:	4640      	mov	r0, r8
 80093f0:	4649      	mov	r1, r9
 80093f2:	f7f7 fc59 	bl	8000ca8 <__aeabi_uldivmod>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4b4e      	ldr	r3, [pc, #312]	; (8009534 <UART_SetConfig+0x734>)
 80093fc:	fba3 2302 	umull	r2, r3, r3, r2
 8009400:	095b      	lsrs	r3, r3, #5
 8009402:	011e      	lsls	r6, r3, #4
 8009404:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009408:	4618      	mov	r0, r3
 800940a:	f04f 0100 	mov.w	r1, #0
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	1894      	adds	r4, r2, r2
 8009414:	60bc      	str	r4, [r7, #8]
 8009416:	415b      	adcs	r3, r3
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800941e:	1812      	adds	r2, r2, r0
 8009420:	eb41 0303 	adc.w	r3, r1, r3
 8009424:	f04f 0400 	mov.w	r4, #0
 8009428:	f04f 0500 	mov.w	r5, #0
 800942c:	00dd      	lsls	r5, r3, #3
 800942e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009432:	00d4      	lsls	r4, r2, #3
 8009434:	4622      	mov	r2, r4
 8009436:	462b      	mov	r3, r5
 8009438:	1814      	adds	r4, r2, r0
 800943a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800943e:	414b      	adcs	r3, r1
 8009440:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	4618      	mov	r0, r3
 800944c:	f04f 0100 	mov.w	r1, #0
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	f04f 0300 	mov.w	r3, #0
 8009458:	008b      	lsls	r3, r1, #2
 800945a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800945e:	0082      	lsls	r2, r0, #2
 8009460:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009464:	f7f7 fc20 	bl	8000ca8 <__aeabi_uldivmod>
 8009468:	4602      	mov	r2, r0
 800946a:	460b      	mov	r3, r1
 800946c:	4b31      	ldr	r3, [pc, #196]	; (8009534 <UART_SetConfig+0x734>)
 800946e:	fba3 1302 	umull	r1, r3, r3, r2
 8009472:	095b      	lsrs	r3, r3, #5
 8009474:	2164      	movs	r1, #100	; 0x64
 8009476:	fb01 f303 	mul.w	r3, r1, r3
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	011b      	lsls	r3, r3, #4
 800947e:	3332      	adds	r3, #50	; 0x32
 8009480:	4a2c      	ldr	r2, [pc, #176]	; (8009534 <UART_SetConfig+0x734>)
 8009482:	fba2 2303 	umull	r2, r3, r2, r3
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800948c:	441e      	add	r6, r3
 800948e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009492:	4618      	mov	r0, r3
 8009494:	f04f 0100 	mov.w	r1, #0
 8009498:	4602      	mov	r2, r0
 800949a:	460b      	mov	r3, r1
 800949c:	1894      	adds	r4, r2, r2
 800949e:	603c      	str	r4, [r7, #0]
 80094a0:	415b      	adcs	r3, r3
 80094a2:	607b      	str	r3, [r7, #4]
 80094a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094a8:	1812      	adds	r2, r2, r0
 80094aa:	eb41 0303 	adc.w	r3, r1, r3
 80094ae:	f04f 0400 	mov.w	r4, #0
 80094b2:	f04f 0500 	mov.w	r5, #0
 80094b6:	00dd      	lsls	r5, r3, #3
 80094b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094bc:	00d4      	lsls	r4, r2, #3
 80094be:	4622      	mov	r2, r4
 80094c0:	462b      	mov	r3, r5
 80094c2:	1814      	adds	r4, r2, r0
 80094c4:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80094c8:	414b      	adcs	r3, r1
 80094ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80094ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f04f 0100 	mov.w	r1, #0
 80094da:	f04f 0200 	mov.w	r2, #0
 80094de:	f04f 0300 	mov.w	r3, #0
 80094e2:	008b      	lsls	r3, r1, #2
 80094e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094e8:	0082      	lsls	r2, r0, #2
 80094ea:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80094ee:	f7f7 fbdb 	bl	8000ca8 <__aeabi_uldivmod>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <UART_SetConfig+0x734>)
 80094f8:	fba3 1302 	umull	r1, r3, r3, r2
 80094fc:	095b      	lsrs	r3, r3, #5
 80094fe:	2164      	movs	r1, #100	; 0x64
 8009500:	fb01 f303 	mul.w	r3, r1, r3
 8009504:	1ad3      	subs	r3, r2, r3
 8009506:	011b      	lsls	r3, r3, #4
 8009508:	3332      	adds	r3, #50	; 0x32
 800950a:	4a0a      	ldr	r2, [pc, #40]	; (8009534 <UART_SetConfig+0x734>)
 800950c:	fba2 2303 	umull	r2, r3, r2, r3
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	f003 020f 	and.w	r2, r3, #15
 8009516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4432      	add	r2, r6
 800951e:	609a      	str	r2, [r3, #8]
}
 8009520:	e7ff      	b.n	8009522 <UART_SetConfig+0x722>
 8009522:	bf00      	nop
 8009524:	37f4      	adds	r7, #244	; 0xf4
 8009526:	46bd      	mov	sp, r7
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	40011000 	.word	0x40011000
 8009530:	40011400 	.word	0x40011400
 8009534:	51eb851f 	.word	0x51eb851f

08009538 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800953c:	4904      	ldr	r1, [pc, #16]	; (8009550 <MX_FATFS_Init+0x18>)
 800953e:	4805      	ldr	r0, [pc, #20]	; (8009554 <MX_FATFS_Init+0x1c>)
 8009540:	f003 fa92 	bl	800ca68 <FATFS_LinkDriver>
 8009544:	4603      	mov	r3, r0
 8009546:	461a      	mov	r2, r3
 8009548:	4b03      	ldr	r3, [pc, #12]	; (8009558 <MX_FATFS_Init+0x20>)
 800954a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800954c:	bf00      	nop
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20001318 	.word	0x20001318
 8009554:	2000000c 	.word	0x2000000c
 8009558:	2000131c 	.word	0x2000131c

0800955c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009560:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009562:	4618      	mov	r0, r3
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009576:	79fb      	ldrb	r3, [r7, #7]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f9dd 	bl	8009938 <USER_SPI_initialize>
 800957e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009580:	4618      	mov	r0, r3
 8009582:	3708      	adds	r7, #8
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	4603      	mov	r3, r0
 8009590:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009592:	79fb      	ldrb	r3, [r7, #7]
 8009594:	4618      	mov	r0, r3
 8009596:	f000 fab9 	bl	8009b0c <USER_SPI_status>
 800959a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	607a      	str	r2, [r7, #4]
 80095ae:	603b      	str	r3, [r7, #0]
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80095b4:	7bf8      	ldrb	r0, [r7, #15]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	68b9      	ldr	r1, [r7, #8]
 80095bc:	f000 fabc 	bl	8009b38 <USER_SPI_read>
 80095c0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80095da:	7bf8      	ldrb	r0, [r7, #15]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	f000 fb0f 	bl	8009c04 <USER_SPI_write>
 80095e6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	603a      	str	r2, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
 80095fc:	460b      	mov	r3, r1
 80095fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8009600:	79b9      	ldrb	r1, [r7, #6]
 8009602:	79fb      	ldrb	r3, [r7, #7]
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fb78 	bl	8009cfc <USER_SPI_ioctl>
 800960c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800960e:	4618      	mov	r0, r3
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009620:	f7fa fba4 	bl	8003d6c <HAL_GetTick>
 8009624:	4603      	mov	r3, r0
 8009626:	4a04      	ldr	r2, [pc, #16]	; (8009638 <SPI_Timer_On+0x20>)
 8009628:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800962a:	4a04      	ldr	r2, [pc, #16]	; (800963c <SPI_Timer_On+0x24>)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6013      	str	r3, [r2, #0]
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20001780 	.word	0x20001780
 800963c:	20001784 	.word	0x20001784

08009640 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009644:	f7fa fb92 	bl	8003d6c <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	4b06      	ldr	r3, [pc, #24]	; (8009664 <SPI_Timer_Status+0x24>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	1ad2      	subs	r2, r2, r3
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <SPI_Timer_Status+0x28>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	bf34      	ite	cc
 8009658:	2301      	movcc	r3, #1
 800965a:	2300      	movcs	r3, #0
 800965c:	b2db      	uxtb	r3, r3
}
 800965e:	4618      	mov	r0, r3
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	20001780 	.word	0x20001780
 8009668:	20001784 	.word	0x20001784

0800966c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af02      	add	r7, sp, #8
 8009672:	4603      	mov	r3, r0
 8009674:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009676:	f107 020f 	add.w	r2, r7, #15
 800967a:	1df9      	adds	r1, r7, #7
 800967c:	2332      	movs	r3, #50	; 0x32
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	2301      	movs	r3, #1
 8009682:	4804      	ldr	r0, [pc, #16]	; (8009694 <xchg_spi+0x28>)
 8009684:	f7fd fe25 	bl	80072d2 <HAL_SPI_TransmitReceive>
    return rxDat;
 8009688:	7bfb      	ldrb	r3, [r7, #15]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	200005ec 	.word	0x200005ec

08009698 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009698:	b590      	push	{r4, r7, lr}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	e00a      	b.n	80096be <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	18d4      	adds	r4, r2, r3
 80096ae:	20ff      	movs	r0, #255	; 0xff
 80096b0:	f7ff ffdc 	bl	800966c <xchg_spi>
 80096b4:	4603      	mov	r3, r0
 80096b6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d3f0      	bcc.n	80096a8 <rcvr_spi_multi+0x10>
	}
}
 80096c6:	bf00      	nop
 80096c8:	bf00      	nop
 80096ca:	3714      	adds	r7, #20
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd90      	pop	{r4, r7, pc}

080096d0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80096da:	2300      	movs	r3, #0
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	e009      	b.n	80096f4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff ffbf 	bl	800966c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	3301      	adds	r3, #1
 80096f2:	60fb      	str	r3, [r7, #12]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d3f1      	bcc.n	80096e0 <xmit_spi_multi+0x10>
	}
}
 80096fc:	bf00      	nop
 80096fe:	bf00      	nop
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009706:	b580      	push	{r7, lr}
 8009708:	b086      	sub	sp, #24
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800970e:	f7fa fb2d 	bl	8003d6c <HAL_GetTick>
 8009712:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8009718:	20ff      	movs	r0, #255	; 0xff
 800971a:	f7ff ffa7 	bl	800966c <xchg_spi>
 800971e:	4603      	mov	r3, r0
 8009720:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	2bff      	cmp	r3, #255	; 0xff
 8009726:	d007      	beq.n	8009738 <wait_ready+0x32>
 8009728:	f7fa fb20 	bl	8003d6c <HAL_GetTick>
 800972c:	4602      	mov	r2, r0
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	693a      	ldr	r2, [r7, #16]
 8009734:	429a      	cmp	r2, r3
 8009736:	d8ef      	bhi.n	8009718 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	2bff      	cmp	r3, #255	; 0xff
 800973c:	bf0c      	ite	eq
 800973e:	2301      	moveq	r3, #1
 8009740:	2300      	movne	r3, #0
 8009742:	b2db      	uxtb	r3, r3
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009750:	2201      	movs	r2, #1
 8009752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009756:	4804      	ldr	r0, [pc, #16]	; (8009768 <despiselect+0x1c>)
 8009758:	f7fb fa2c 	bl	8004bb4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800975c:	20ff      	movs	r0, #255	; 0xff
 800975e:	f7ff ff85 	bl	800966c <xchg_spi>

}
 8009762:	bf00      	nop
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	40021400 	.word	0x40021400

0800976c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8009770:	2200      	movs	r2, #0
 8009772:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009776:	480a      	ldr	r0, [pc, #40]	; (80097a0 <spiselect+0x34>)
 8009778:	f7fb fa1c 	bl	8004bb4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800977c:	20ff      	movs	r0, #255	; 0xff
 800977e:	f7ff ff75 	bl	800966c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009786:	f7ff ffbe 	bl	8009706 <wait_ready>
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <spiselect+0x28>
 8009790:	2301      	movs	r3, #1
 8009792:	e002      	b.n	800979a <spiselect+0x2e>

	despiselect();
 8009794:	f7ff ffda 	bl	800974c <despiselect>
	return 0;	/* Timeout */
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	40021400 	.word	0x40021400

080097a4 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80097ae:	20c8      	movs	r0, #200	; 0xc8
 80097b0:	f7ff ff32 	bl	8009618 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80097b4:	20ff      	movs	r0, #255	; 0xff
 80097b6:	f7ff ff59 	bl	800966c <xchg_spi>
 80097ba:	4603      	mov	r3, r0
 80097bc:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	2bff      	cmp	r3, #255	; 0xff
 80097c2:	d104      	bne.n	80097ce <rcvr_datablock+0x2a>
 80097c4:	f7ff ff3c 	bl	8009640 <SPI_Timer_Status>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1f2      	bne.n	80097b4 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80097ce:	7bfb      	ldrb	r3, [r7, #15]
 80097d0:	2bfe      	cmp	r3, #254	; 0xfe
 80097d2:	d001      	beq.n	80097d8 <rcvr_datablock+0x34>
 80097d4:	2300      	movs	r3, #0
 80097d6:	e00a      	b.n	80097ee <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7ff ff5c 	bl	8009698 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80097e0:	20ff      	movs	r0, #255	; 0xff
 80097e2:	f7ff ff43 	bl	800966c <xchg_spi>
 80097e6:	20ff      	movs	r0, #255	; 0xff
 80097e8:	f7ff ff40 	bl	800966c <xchg_spi>

	return 1;						/* Function succeeded */
 80097ec:	2301      	movs	r3, #1
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b084      	sub	sp, #16
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009802:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009806:	f7ff ff7e 	bl	8009706 <wait_ready>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <xmit_datablock+0x1e>
 8009810:	2300      	movs	r3, #0
 8009812:	e01e      	b.n	8009852 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	4618      	mov	r0, r3
 8009818:	f7ff ff28 	bl	800966c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800981c:	78fb      	ldrb	r3, [r7, #3]
 800981e:	2bfd      	cmp	r3, #253	; 0xfd
 8009820:	d016      	beq.n	8009850 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff ff52 	bl	80096d0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800982c:	20ff      	movs	r0, #255	; 0xff
 800982e:	f7ff ff1d 	bl	800966c <xchg_spi>
 8009832:	20ff      	movs	r0, #255	; 0xff
 8009834:	f7ff ff1a 	bl	800966c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009838:	20ff      	movs	r0, #255	; 0xff
 800983a:	f7ff ff17 	bl	800966c <xchg_spi>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	f003 031f 	and.w	r3, r3, #31
 8009848:	2b05      	cmp	r3, #5
 800984a:	d001      	beq.n	8009850 <xmit_datablock+0x5a>
 800984c:	2300      	movs	r3, #0
 800984e:	e000      	b.n	8009852 <xmit_datablock+0x5c>
	}
	return 1;
 8009850:	2301      	movs	r3, #1
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	b084      	sub	sp, #16
 800985e:	af00      	add	r7, sp, #0
 8009860:	4603      	mov	r3, r0
 8009862:	6039      	str	r1, [r7, #0]
 8009864:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800986a:	2b00      	cmp	r3, #0
 800986c:	da0e      	bge.n	800988c <send_cmd+0x32>
		cmd &= 0x7F;
 800986e:	79fb      	ldrb	r3, [r7, #7]
 8009870:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009874:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8009876:	2100      	movs	r1, #0
 8009878:	2037      	movs	r0, #55	; 0x37
 800987a:	f7ff ffee 	bl	800985a <send_cmd>
 800987e:	4603      	mov	r3, r0
 8009880:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009882:	7bbb      	ldrb	r3, [r7, #14]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d901      	bls.n	800988c <send_cmd+0x32>
 8009888:	7bbb      	ldrb	r3, [r7, #14]
 800988a:	e051      	b.n	8009930 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	2b0c      	cmp	r3, #12
 8009890:	d008      	beq.n	80098a4 <send_cmd+0x4a>
		despiselect();
 8009892:	f7ff ff5b 	bl	800974c <despiselect>
		if (!spiselect()) return 0xFF;
 8009896:	f7ff ff69 	bl	800976c <spiselect>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <send_cmd+0x4a>
 80098a0:	23ff      	movs	r3, #255	; 0xff
 80098a2:	e045      	b.n	8009930 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80098a4:	79fb      	ldrb	r3, [r7, #7]
 80098a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff fedd 	bl	800966c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	0e1b      	lsrs	r3, r3, #24
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7ff fed7 	bl	800966c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	0c1b      	lsrs	r3, r3, #16
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff fed1 	bl	800966c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	0a1b      	lsrs	r3, r3, #8
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7ff fecb 	bl	800966c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	4618      	mov	r0, r3
 80098dc:	f7ff fec6 	bl	800966c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80098e0:	2301      	movs	r3, #1
 80098e2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d101      	bne.n	80098ee <send_cmd+0x94>
 80098ea:	2395      	movs	r3, #149	; 0x95
 80098ec:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	2b08      	cmp	r3, #8
 80098f2:	d101      	bne.n	80098f8 <send_cmd+0x9e>
 80098f4:	2387      	movs	r3, #135	; 0x87
 80098f6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7ff feb6 	bl	800966c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	2b0c      	cmp	r3, #12
 8009904:	d102      	bne.n	800990c <send_cmd+0xb2>
 8009906:	20ff      	movs	r0, #255	; 0xff
 8009908:	f7ff feb0 	bl	800966c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800990c:	230a      	movs	r3, #10
 800990e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009910:	20ff      	movs	r0, #255	; 0xff
 8009912:	f7ff feab 	bl	800966c <xchg_spi>
 8009916:	4603      	mov	r3, r0
 8009918:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800991a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800991e:	2b00      	cmp	r3, #0
 8009920:	da05      	bge.n	800992e <send_cmd+0xd4>
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	3b01      	subs	r3, #1
 8009926:	73fb      	strb	r3, [r7, #15]
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1f0      	bne.n	8009910 <send_cmd+0xb6>

	return res;							/* Return received response */
 800992e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009938:	b590      	push	{r4, r7, lr}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <USER_SPI_initialize+0x14>
 8009948:	2301      	movs	r3, #1
 800994a:	e0d4      	b.n	8009af6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800994c:	4b6c      	ldr	r3, [pc, #432]	; (8009b00 <USER_SPI_initialize+0x1c8>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <USER_SPI_initialize+0x2a>
 800995a:	4b69      	ldr	r3, [pc, #420]	; (8009b00 <USER_SPI_initialize+0x1c8>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	b2db      	uxtb	r3, r3
 8009960:	e0c9      	b.n	8009af6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8009962:	4b68      	ldr	r3, [pc, #416]	; (8009b04 <USER_SPI_initialize+0x1cc>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	4b66      	ldr	r3, [pc, #408]	; (8009b04 <USER_SPI_initialize+0x1cc>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8009970:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8009972:	230a      	movs	r3, #10
 8009974:	73fb      	strb	r3, [r7, #15]
 8009976:	e005      	b.n	8009984 <USER_SPI_initialize+0x4c>
 8009978:	20ff      	movs	r0, #255	; 0xff
 800997a:	f7ff fe77 	bl	800966c <xchg_spi>
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	3b01      	subs	r3, #1
 8009982:	73fb      	strb	r3, [r7, #15]
 8009984:	7bfb      	ldrb	r3, [r7, #15]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d1f6      	bne.n	8009978 <USER_SPI_initialize+0x40>

	ty = 0;
 800998a:	2300      	movs	r3, #0
 800998c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800998e:	2100      	movs	r1, #0
 8009990:	2000      	movs	r0, #0
 8009992:	f7ff ff62 	bl	800985a <send_cmd>
 8009996:	4603      	mov	r3, r0
 8009998:	2b01      	cmp	r3, #1
 800999a:	f040 808b 	bne.w	8009ab4 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800999e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099a2:	f7ff fe39 	bl	8009618 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80099a6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099aa:	2008      	movs	r0, #8
 80099ac:	f7ff ff55 	bl	800985a <send_cmd>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d151      	bne.n	8009a5a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
 80099ba:	e00d      	b.n	80099d8 <USER_SPI_initialize+0xa0>
 80099bc:	7bfc      	ldrb	r4, [r7, #15]
 80099be:	20ff      	movs	r0, #255	; 0xff
 80099c0:	f7ff fe54 	bl	800966c <xchg_spi>
 80099c4:	4603      	mov	r3, r0
 80099c6:	461a      	mov	r2, r3
 80099c8:	f107 0310 	add.w	r3, r7, #16
 80099cc:	4423      	add	r3, r4
 80099ce:	f803 2c08 	strb.w	r2, [r3, #-8]
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	3301      	adds	r3, #1
 80099d6:	73fb      	strb	r3, [r7, #15]
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	2b03      	cmp	r3, #3
 80099dc:	d9ee      	bls.n	80099bc <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80099de:	7abb      	ldrb	r3, [r7, #10]
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d167      	bne.n	8009ab4 <USER_SPI_initialize+0x17c>
 80099e4:	7afb      	ldrb	r3, [r7, #11]
 80099e6:	2baa      	cmp	r3, #170	; 0xaa
 80099e8:	d164      	bne.n	8009ab4 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80099ea:	bf00      	nop
 80099ec:	f7ff fe28 	bl	8009640 <SPI_Timer_Status>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d007      	beq.n	8009a06 <USER_SPI_initialize+0xce>
 80099f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80099fa:	20a9      	movs	r0, #169	; 0xa9
 80099fc:	f7ff ff2d 	bl	800985a <send_cmd>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1f2      	bne.n	80099ec <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009a06:	f7ff fe1b 	bl	8009640 <SPI_Timer_Status>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d051      	beq.n	8009ab4 <USER_SPI_initialize+0x17c>
 8009a10:	2100      	movs	r1, #0
 8009a12:	203a      	movs	r0, #58	; 0x3a
 8009a14:	f7ff ff21 	bl	800985a <send_cmd>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d14a      	bne.n	8009ab4 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
 8009a22:	e00d      	b.n	8009a40 <USER_SPI_initialize+0x108>
 8009a24:	7bfc      	ldrb	r4, [r7, #15]
 8009a26:	20ff      	movs	r0, #255	; 0xff
 8009a28:	f7ff fe20 	bl	800966c <xchg_spi>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	461a      	mov	r2, r3
 8009a30:	f107 0310 	add.w	r3, r7, #16
 8009a34:	4423      	add	r3, r4
 8009a36:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	73fb      	strb	r3, [r7, #15]
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d9ee      	bls.n	8009a24 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009a46:	7a3b      	ldrb	r3, [r7, #8]
 8009a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <USER_SPI_initialize+0x11c>
 8009a50:	230c      	movs	r3, #12
 8009a52:	e000      	b.n	8009a56 <USER_SPI_initialize+0x11e>
 8009a54:	2304      	movs	r3, #4
 8009a56:	737b      	strb	r3, [r7, #13]
 8009a58:	e02c      	b.n	8009ab4 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	20a9      	movs	r0, #169	; 0xa9
 8009a5e:	f7ff fefc 	bl	800985a <send_cmd>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d804      	bhi.n	8009a72 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009a68:	2302      	movs	r3, #2
 8009a6a:	737b      	strb	r3, [r7, #13]
 8009a6c:	23a9      	movs	r3, #169	; 0xa9
 8009a6e:	73bb      	strb	r3, [r7, #14]
 8009a70:	e003      	b.n	8009a7a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009a72:	2301      	movs	r3, #1
 8009a74:	737b      	strb	r3, [r7, #13]
 8009a76:	2301      	movs	r3, #1
 8009a78:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009a7a:	bf00      	nop
 8009a7c:	f7ff fde0 	bl	8009640 <SPI_Timer_Status>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d007      	beq.n	8009a96 <USER_SPI_initialize+0x15e>
 8009a86:	7bbb      	ldrb	r3, [r7, #14]
 8009a88:	2100      	movs	r1, #0
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff fee5 	bl	800985a <send_cmd>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1f2      	bne.n	8009a7c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009a96:	f7ff fdd3 	bl	8009640 <SPI_Timer_Status>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d007      	beq.n	8009ab0 <USER_SPI_initialize+0x178>
 8009aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009aa4:	2010      	movs	r0, #16
 8009aa6:	f7ff fed8 	bl	800985a <send_cmd>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <USER_SPI_initialize+0x17c>
				ty = 0;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009ab4:	4a14      	ldr	r2, [pc, #80]	; (8009b08 <USER_SPI_initialize+0x1d0>)
 8009ab6:	7b7b      	ldrb	r3, [r7, #13]
 8009ab8:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009aba:	f7ff fe47 	bl	800974c <despiselect>

	if (ty) {			/* OK */
 8009abe:	7b7b      	ldrb	r3, [r7, #13]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d012      	beq.n	8009aea <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8009ac4:	4b0f      	ldr	r3, [pc, #60]	; (8009b04 <USER_SPI_initialize+0x1cc>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009ace:	4b0d      	ldr	r3, [pc, #52]	; (8009b04 <USER_SPI_initialize+0x1cc>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0220 	orr.w	r2, r2, #32
 8009ad6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <USER_SPI_initialize+0x1c8>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	f023 0301 	bic.w	r3, r3, #1
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <USER_SPI_initialize+0x1c8>)
 8009ae6:	701a      	strb	r2, [r3, #0]
 8009ae8:	e002      	b.n	8009af0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <USER_SPI_initialize+0x1c8>)
 8009aec:	2201      	movs	r2, #1
 8009aee:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009af0:	4b03      	ldr	r3, [pc, #12]	; (8009b00 <USER_SPI_initialize+0x1c8>)
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	b2db      	uxtb	r3, r3
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd90      	pop	{r4, r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20000020 	.word	0x20000020
 8009b04:	200005ec 	.word	0x200005ec
 8009b08:	200004a0 	.word	0x200004a0

08009b0c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009b16:	79fb      	ldrb	r3, [r7, #7]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <USER_SPI_status+0x14>
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e002      	b.n	8009b26 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009b20:	4b04      	ldr	r3, [pc, #16]	; (8009b34 <USER_SPI_status+0x28>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	b2db      	uxtb	r3, r3
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
 8009b32:	bf00      	nop
 8009b34:	20000020 	.word	0x20000020

08009b38 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60b9      	str	r1, [r7, #8]
 8009b40:	607a      	str	r2, [r7, #4]
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d102      	bne.n	8009b54 <USER_SPI_read+0x1c>
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <USER_SPI_read+0x20>
 8009b54:	2304      	movs	r3, #4
 8009b56:	e04d      	b.n	8009bf4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009b58:	4b28      	ldr	r3, [pc, #160]	; (8009bfc <USER_SPI_read+0xc4>)
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d001      	beq.n	8009b6a <USER_SPI_read+0x32>
 8009b66:	2303      	movs	r3, #3
 8009b68:	e044      	b.n	8009bf4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009b6a:	4b25      	ldr	r3, [pc, #148]	; (8009c00 <USER_SPI_read+0xc8>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	f003 0308 	and.w	r3, r3, #8
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <USER_SPI_read+0x44>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	025b      	lsls	r3, r3, #9
 8009b7a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d111      	bne.n	8009ba6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	2011      	movs	r0, #17
 8009b86:	f7ff fe68 	bl	800985a <send_cmd>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d129      	bne.n	8009be4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009b90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b94:	68b8      	ldr	r0, [r7, #8]
 8009b96:	f7ff fe05 	bl	80097a4 <rcvr_datablock>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d021      	beq.n	8009be4 <USER_SPI_read+0xac>
			count = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	e01e      	b.n	8009be4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009ba6:	6879      	ldr	r1, [r7, #4]
 8009ba8:	2012      	movs	r0, #18
 8009baa:	f7ff fe56 	bl	800985a <send_cmd>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d117      	bne.n	8009be4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bb8:	68b8      	ldr	r0, [r7, #8]
 8009bba:	f7ff fdf3 	bl	80097a4 <rcvr_datablock>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d00a      	beq.n	8009bda <USER_SPI_read+0xa2>
				buff += 512;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009bca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	603b      	str	r3, [r7, #0]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1ed      	bne.n	8009bb4 <USER_SPI_read+0x7c>
 8009bd8:	e000      	b.n	8009bdc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009bda:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009bdc:	2100      	movs	r1, #0
 8009bde:	200c      	movs	r0, #12
 8009be0:	f7ff fe3b 	bl	800985a <send_cmd>
		}
	}
	despiselect();
 8009be4:	f7ff fdb2 	bl	800974c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	bf14      	ite	ne
 8009bee:	2301      	movne	r3, #1
 8009bf0:	2300      	moveq	r3, #0
 8009bf2:	b2db      	uxtb	r3, r3
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20000020 	.word	0x20000020
 8009c00:	200004a0 	.word	0x200004a0

08009c04 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	607a      	str	r2, [r7, #4]
 8009c0e:	603b      	str	r3, [r7, #0]
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d102      	bne.n	8009c20 <USER_SPI_write+0x1c>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <USER_SPI_write+0x20>
 8009c20:	2304      	movs	r3, #4
 8009c22:	e063      	b.n	8009cec <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009c24:	4b33      	ldr	r3, [pc, #204]	; (8009cf4 <USER_SPI_write+0xf0>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	f003 0301 	and.w	r3, r3, #1
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <USER_SPI_write+0x32>
 8009c32:	2303      	movs	r3, #3
 8009c34:	e05a      	b.n	8009cec <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009c36:	4b2f      	ldr	r3, [pc, #188]	; (8009cf4 <USER_SPI_write+0xf0>)
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <USER_SPI_write+0x44>
 8009c44:	2302      	movs	r3, #2
 8009c46:	e051      	b.n	8009cec <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009c48:	4b2b      	ldr	r3, [pc, #172]	; (8009cf8 <USER_SPI_write+0xf4>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 0308 	and.w	r3, r3, #8
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <USER_SPI_write+0x56>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	025b      	lsls	r3, r3, #9
 8009c58:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d110      	bne.n	8009c82 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009c60:	6879      	ldr	r1, [r7, #4]
 8009c62:	2018      	movs	r0, #24
 8009c64:	f7ff fdf9 	bl	800985a <send_cmd>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d136      	bne.n	8009cdc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009c6e:	21fe      	movs	r1, #254	; 0xfe
 8009c70:	68b8      	ldr	r0, [r7, #8]
 8009c72:	f7ff fdc0 	bl	80097f6 <xmit_datablock>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d02f      	beq.n	8009cdc <USER_SPI_write+0xd8>
			count = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	603b      	str	r3, [r7, #0]
 8009c80:	e02c      	b.n	8009cdc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009c82:	4b1d      	ldr	r3, [pc, #116]	; (8009cf8 <USER_SPI_write+0xf4>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	f003 0306 	and.w	r3, r3, #6
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <USER_SPI_write+0x92>
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	2097      	movs	r0, #151	; 0x97
 8009c92:	f7ff fde2 	bl	800985a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009c96:	6879      	ldr	r1, [r7, #4]
 8009c98:	2019      	movs	r0, #25
 8009c9a:	f7ff fdde 	bl	800985a <send_cmd>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d11b      	bne.n	8009cdc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009ca4:	21fc      	movs	r1, #252	; 0xfc
 8009ca6:	68b8      	ldr	r0, [r7, #8]
 8009ca8:	f7ff fda5 	bl	80097f6 <xmit_datablock>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00a      	beq.n	8009cc8 <USER_SPI_write+0xc4>
				buff += 512;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009cb8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	603b      	str	r3, [r7, #0]
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1ee      	bne.n	8009ca4 <USER_SPI_write+0xa0>
 8009cc6:	e000      	b.n	8009cca <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009cc8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009cca:	21fd      	movs	r1, #253	; 0xfd
 8009ccc:	2000      	movs	r0, #0
 8009cce:	f7ff fd92 	bl	80097f6 <xmit_datablock>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <USER_SPI_write+0xd8>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009cdc:	f7ff fd36 	bl	800974c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	bf14      	ite	ne
 8009ce6:	2301      	movne	r3, #1
 8009ce8:	2300      	moveq	r3, #0
 8009cea:	b2db      	uxtb	r3, r3
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	20000020 	.word	0x20000020
 8009cf8:	200004a0 	.word	0x200004a0

08009cfc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08c      	sub	sp, #48	; 0x30
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	4603      	mov	r3, r0
 8009d04:	603a      	str	r2, [r7, #0]
 8009d06:	71fb      	strb	r3, [r7, #7]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009d0c:	79fb      	ldrb	r3, [r7, #7]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <USER_SPI_ioctl+0x1a>
 8009d12:	2304      	movs	r3, #4
 8009d14:	e15a      	b.n	8009fcc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009d16:	4baf      	ldr	r3, [pc, #700]	; (8009fd4 <USER_SPI_ioctl+0x2d8>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <USER_SPI_ioctl+0x2c>
 8009d24:	2303      	movs	r3, #3
 8009d26:	e151      	b.n	8009fcc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8009d2e:	79bb      	ldrb	r3, [r7, #6]
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	f200 8136 	bhi.w	8009fa2 <USER_SPI_ioctl+0x2a6>
 8009d36:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <USER_SPI_ioctl+0x40>)
 8009d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3c:	08009d51 	.word	0x08009d51
 8009d40:	08009d65 	.word	0x08009d65
 8009d44:	08009fa3 	.word	0x08009fa3
 8009d48:	08009e11 	.word	0x08009e11
 8009d4c:	08009f07 	.word	0x08009f07
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009d50:	f7ff fd0c 	bl	800976c <spiselect>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 8127 	beq.w	8009faa <USER_SPI_ioctl+0x2ae>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009d62:	e122      	b.n	8009faa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009d64:	2100      	movs	r1, #0
 8009d66:	2009      	movs	r0, #9
 8009d68:	f7ff fd77 	bl	800985a <send_cmd>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f040 811d 	bne.w	8009fae <USER_SPI_ioctl+0x2b2>
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	2110      	movs	r1, #16
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f7ff fd12 	bl	80097a4 <rcvr_datablock>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 8113 	beq.w	8009fae <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009d88:	7b3b      	ldrb	r3, [r7, #12]
 8009d8a:	099b      	lsrs	r3, r3, #6
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d111      	bne.n	8009db6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009d92:	7d7b      	ldrb	r3, [r7, #21]
 8009d94:	461a      	mov	r2, r3
 8009d96:	7d3b      	ldrb	r3, [r7, #20]
 8009d98:	021b      	lsls	r3, r3, #8
 8009d9a:	4413      	add	r3, r2
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	7cfb      	ldrb	r3, [r7, #19]
 8009da0:	041b      	lsls	r3, r3, #16
 8009da2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009da6:	4413      	add	r3, r2
 8009da8:	3301      	adds	r3, #1
 8009daa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	029a      	lsls	r2, r3, #10
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	e028      	b.n	8009e08 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009db6:	7c7b      	ldrb	r3, [r7, #17]
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	b2da      	uxtb	r2, r3
 8009dbe:	7dbb      	ldrb	r3, [r7, #22]
 8009dc0:	09db      	lsrs	r3, r3, #7
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	7d7b      	ldrb	r3, [r7, #21]
 8009dca:	005b      	lsls	r3, r3, #1
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f003 0306 	and.w	r3, r3, #6
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	3302      	adds	r3, #2
 8009dda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009dde:	7d3b      	ldrb	r3, [r7, #20]
 8009de0:	099b      	lsrs	r3, r3, #6
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	461a      	mov	r2, r3
 8009de6:	7cfb      	ldrb	r3, [r7, #19]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	441a      	add	r2, r3
 8009dec:	7cbb      	ldrb	r3, [r7, #18]
 8009dee:	029b      	lsls	r3, r3, #10
 8009df0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009df4:	4413      	add	r3, r2
 8009df6:	3301      	adds	r3, #1
 8009df8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009dfa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009dfe:	3b09      	subs	r3, #9
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	409a      	lsls	r2, r3
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009e0e:	e0ce      	b.n	8009fae <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009e10:	4b71      	ldr	r3, [pc, #452]	; (8009fd8 <USER_SPI_ioctl+0x2dc>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d031      	beq.n	8009e80 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	208d      	movs	r0, #141	; 0x8d
 8009e20:	f7ff fd1b 	bl	800985a <send_cmd>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f040 80c3 	bne.w	8009fb2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009e2c:	20ff      	movs	r0, #255	; 0xff
 8009e2e:	f7ff fc1d 	bl	800966c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009e32:	f107 030c 	add.w	r3, r7, #12
 8009e36:	2110      	movs	r1, #16
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7ff fcb3 	bl	80097a4 <rcvr_datablock>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 80b6 	beq.w	8009fb2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009e46:	2330      	movs	r3, #48	; 0x30
 8009e48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009e4c:	e007      	b.n	8009e5e <USER_SPI_ioctl+0x162>
 8009e4e:	20ff      	movs	r0, #255	; 0xff
 8009e50:	f7ff fc0c 	bl	800966c <xchg_spi>
 8009e54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009e5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1f3      	bne.n	8009e4e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009e66:	7dbb      	ldrb	r3, [r7, #22]
 8009e68:	091b      	lsrs	r3, r3, #4
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	2310      	movs	r3, #16
 8009e70:	fa03 f202 	lsl.w	r2, r3, r2
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009e7e:	e098      	b.n	8009fb2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009e80:	2100      	movs	r1, #0
 8009e82:	2009      	movs	r0, #9
 8009e84:	f7ff fce9 	bl	800985a <send_cmd>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f040 8091 	bne.w	8009fb2 <USER_SPI_ioctl+0x2b6>
 8009e90:	f107 030c 	add.w	r3, r7, #12
 8009e94:	2110      	movs	r1, #16
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff fc84 	bl	80097a4 <rcvr_datablock>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f000 8087 	beq.w	8009fb2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009ea4:	4b4c      	ldr	r3, [pc, #304]	; (8009fd8 <USER_SPI_ioctl+0x2dc>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 0302 	and.w	r3, r3, #2
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d012      	beq.n	8009ed6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009eb0:	7dbb      	ldrb	r3, [r7, #22]
 8009eb2:	005b      	lsls	r3, r3, #1
 8009eb4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009eb8:	7dfa      	ldrb	r2, [r7, #23]
 8009eba:	09d2      	lsrs	r2, r2, #7
 8009ebc:	b2d2      	uxtb	r2, r2
 8009ebe:	4413      	add	r3, r2
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	7e7b      	ldrb	r3, [r7, #25]
 8009ec4:	099b      	lsrs	r3, r3, #6
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	fa02 f303 	lsl.w	r3, r2, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	e013      	b.n	8009efe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009ed6:	7dbb      	ldrb	r3, [r7, #22]
 8009ed8:	109b      	asrs	r3, r3, #2
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	f003 031f 	and.w	r3, r3, #31
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	7dfa      	ldrb	r2, [r7, #23]
 8009ee4:	00d2      	lsls	r2, r2, #3
 8009ee6:	f002 0218 	and.w	r2, r2, #24
 8009eea:	7df9      	ldrb	r1, [r7, #23]
 8009eec:	0949      	lsrs	r1, r1, #5
 8009eee:	b2c9      	uxtb	r1, r1
 8009ef0:	440a      	add	r2, r1
 8009ef2:	3201      	adds	r2, #1
 8009ef4:	fb02 f303 	mul.w	r3, r2, r3
 8009ef8:	461a      	mov	r2, r3
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009f04:	e055      	b.n	8009fb2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009f06:	4b34      	ldr	r3, [pc, #208]	; (8009fd8 <USER_SPI_ioctl+0x2dc>)
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	f003 0306 	and.w	r3, r3, #6
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d051      	beq.n	8009fb6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009f12:	f107 020c 	add.w	r2, r7, #12
 8009f16:	79fb      	ldrb	r3, [r7, #7]
 8009f18:	210b      	movs	r1, #11
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7ff feee 	bl	8009cfc <USER_SPI_ioctl>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d149      	bne.n	8009fba <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009f26:	7b3b      	ldrb	r3, [r7, #12]
 8009f28:	099b      	lsrs	r3, r3, #6
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d104      	bne.n	8009f3a <USER_SPI_ioctl+0x23e>
 8009f30:	7dbb      	ldrb	r3, [r7, #22]
 8009f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d041      	beq.n	8009fbe <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	623b      	str	r3, [r7, #32]
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009f4a:	4b23      	ldr	r3, [pc, #140]	; (8009fd8 <USER_SPI_ioctl+0x2dc>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	f003 0308 	and.w	r3, r3, #8
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d105      	bne.n	8009f62 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	025b      	lsls	r3, r3, #9
 8009f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	025b      	lsls	r3, r3, #9
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009f62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f64:	2020      	movs	r0, #32
 8009f66:	f7ff fc78 	bl	800985a <send_cmd>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d128      	bne.n	8009fc2 <USER_SPI_ioctl+0x2c6>
 8009f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f72:	2021      	movs	r0, #33	; 0x21
 8009f74:	f7ff fc71 	bl	800985a <send_cmd>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d121      	bne.n	8009fc2 <USER_SPI_ioctl+0x2c6>
 8009f7e:	2100      	movs	r1, #0
 8009f80:	2026      	movs	r0, #38	; 0x26
 8009f82:	f7ff fc6a 	bl	800985a <send_cmd>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d11a      	bne.n	8009fc2 <USER_SPI_ioctl+0x2c6>
 8009f8c:	f247 5030 	movw	r0, #30000	; 0x7530
 8009f90:	f7ff fbb9 	bl	8009706 <wait_ready>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d013      	beq.n	8009fc2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009fa0:	e00f      	b.n	8009fc2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009fa2:	2304      	movs	r3, #4
 8009fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009fa8:	e00c      	b.n	8009fc4 <USER_SPI_ioctl+0x2c8>
		break;
 8009faa:	bf00      	nop
 8009fac:	e00a      	b.n	8009fc4 <USER_SPI_ioctl+0x2c8>
		break;
 8009fae:	bf00      	nop
 8009fb0:	e008      	b.n	8009fc4 <USER_SPI_ioctl+0x2c8>
		break;
 8009fb2:	bf00      	nop
 8009fb4:	e006      	b.n	8009fc4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009fb6:	bf00      	nop
 8009fb8:	e004      	b.n	8009fc4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009fba:	bf00      	nop
 8009fbc:	e002      	b.n	8009fc4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009fbe:	bf00      	nop
 8009fc0:	e000      	b.n	8009fc4 <USER_SPI_ioctl+0x2c8>
		break;
 8009fc2:	bf00      	nop
	}

	despiselect();
 8009fc4:	f7ff fbc2 	bl	800974c <despiselect>

	return res;
 8009fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3730      	adds	r7, #48	; 0x30
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	20000020 	.word	0x20000020
 8009fd8:	200004a0 	.word	0x200004a0

08009fdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	4a08      	ldr	r2, [pc, #32]	; (800a00c <disk_status+0x30>)
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	79fa      	ldrb	r2, [r7, #7]
 8009ff4:	4905      	ldr	r1, [pc, #20]	; (800a00c <disk_status+0x30>)
 8009ff6:	440a      	add	r2, r1
 8009ff8:	7a12      	ldrb	r2, [r2, #8]
 8009ffa:	4610      	mov	r0, r2
 8009ffc:	4798      	blx	r3
 8009ffe:	4603      	mov	r3, r0
 800a000:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a002:	7bfb      	ldrb	r3, [r7, #15]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	200004cc 	.word	0x200004cc

0800a010 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a01a:	2300      	movs	r3, #0
 800a01c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a01e:	79fb      	ldrb	r3, [r7, #7]
 800a020:	4a0d      	ldr	r2, [pc, #52]	; (800a058 <disk_initialize+0x48>)
 800a022:	5cd3      	ldrb	r3, [r2, r3]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d111      	bne.n	800a04c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	4a0b      	ldr	r2, [pc, #44]	; (800a058 <disk_initialize+0x48>)
 800a02c:	2101      	movs	r1, #1
 800a02e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	4a09      	ldr	r2, [pc, #36]	; (800a058 <disk_initialize+0x48>)
 800a034:	009b      	lsls	r3, r3, #2
 800a036:	4413      	add	r3, r2
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	79fa      	ldrb	r2, [r7, #7]
 800a03e:	4906      	ldr	r1, [pc, #24]	; (800a058 <disk_initialize+0x48>)
 800a040:	440a      	add	r2, r1
 800a042:	7a12      	ldrb	r2, [r2, #8]
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	4603      	mov	r3, r0
 800a04a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	200004cc 	.word	0x200004cc

0800a05c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a05c:	b590      	push	{r4, r7, lr}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	607a      	str	r2, [r7, #4]
 800a066:	603b      	str	r3, [r7, #0]
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	4a0a      	ldr	r2, [pc, #40]	; (800a098 <disk_read+0x3c>)
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	689c      	ldr	r4, [r3, #8]
 800a078:	7bfb      	ldrb	r3, [r7, #15]
 800a07a:	4a07      	ldr	r2, [pc, #28]	; (800a098 <disk_read+0x3c>)
 800a07c:	4413      	add	r3, r2
 800a07e:	7a18      	ldrb	r0, [r3, #8]
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	68b9      	ldr	r1, [r7, #8]
 800a086:	47a0      	blx	r4
 800a088:	4603      	mov	r3, r0
 800a08a:	75fb      	strb	r3, [r7, #23]
  return res;
 800a08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	371c      	adds	r7, #28
 800a092:	46bd      	mov	sp, r7
 800a094:	bd90      	pop	{r4, r7, pc}
 800a096:	bf00      	nop
 800a098:	200004cc 	.word	0x200004cc

0800a09c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a09c:	b590      	push	{r4, r7, lr}
 800a09e:	b087      	sub	sp, #28
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4a0a      	ldr	r2, [pc, #40]	; (800a0d8 <disk_write+0x3c>)
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	68dc      	ldr	r4, [r3, #12]
 800a0b8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ba:	4a07      	ldr	r2, [pc, #28]	; (800a0d8 <disk_write+0x3c>)
 800a0bc:	4413      	add	r3, r2
 800a0be:	7a18      	ldrb	r0, [r3, #8]
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	68b9      	ldr	r1, [r7, #8]
 800a0c6:	47a0      	blx	r4
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd90      	pop	{r4, r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	200004cc 	.word	0x200004cc

0800a0dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	603a      	str	r2, [r7, #0]
 800a0e6:	71fb      	strb	r3, [r7, #7]
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	4a09      	ldr	r2, [pc, #36]	; (800a114 <disk_ioctl+0x38>)
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	79fa      	ldrb	r2, [r7, #7]
 800a0fa:	4906      	ldr	r1, [pc, #24]	; (800a114 <disk_ioctl+0x38>)
 800a0fc:	440a      	add	r2, r1
 800a0fe:	7a10      	ldrb	r0, [r2, #8]
 800a100:	79b9      	ldrb	r1, [r7, #6]
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4798      	blx	r3
 800a106:	4603      	mov	r3, r0
 800a108:	73fb      	strb	r3, [r7, #15]
  return res;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}
 800a114:	200004cc 	.word	0x200004cc

0800a118 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3301      	adds	r3, #1
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a128:	89fb      	ldrh	r3, [r7, #14]
 800a12a:	021b      	lsls	r3, r3, #8
 800a12c:	b21a      	sxth	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	b21b      	sxth	r3, r3
 800a134:	4313      	orrs	r3, r2
 800a136:	b21b      	sxth	r3, r3
 800a138:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a13a:	89fb      	ldrh	r3, [r7, #14]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	3303      	adds	r3, #3
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	021b      	lsls	r3, r3, #8
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	3202      	adds	r2, #2
 800a160:	7812      	ldrb	r2, [r2, #0]
 800a162:	4313      	orrs	r3, r2
 800a164:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	021b      	lsls	r3, r3, #8
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	3201      	adds	r2, #1
 800a16e:	7812      	ldrb	r2, [r2, #0]
 800a170:	4313      	orrs	r3, r2
 800a172:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	7812      	ldrb	r2, [r2, #0]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
	return rv;
 800a180:	68fb      	ldr	r3, [r7, #12]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a18e:	b480      	push	{r7}
 800a190:	b083      	sub	sp, #12
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	887a      	ldrh	r2, [r7, #2]
 800a1a2:	b2d2      	uxtb	r2, r2
 800a1a4:	701a      	strb	r2, [r3, #0]
 800a1a6:	887b      	ldrh	r3, [r7, #2]
 800a1a8:	0a1b      	lsrs	r3, r3, #8
 800a1aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	607a      	str	r2, [r7, #4]
 800a1b2:	887a      	ldrh	r2, [r7, #2]
 800a1b4:	b2d2      	uxtb	r2, r2
 800a1b6:	701a      	strb	r2, [r3, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr

0800a1c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	1c5a      	adds	r2, r3, #1
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	683a      	ldr	r2, [r7, #0]
 800a1d6:	b2d2      	uxtb	r2, r2
 800a1d8:	701a      	strb	r2, [r3, #0]
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	0a1b      	lsrs	r3, r3, #8
 800a1de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	607a      	str	r2, [r7, #4]
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	b2d2      	uxtb	r2, r2
 800a1ea:	701a      	strb	r2, [r3, #0]
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	0a1b      	lsrs	r3, r3, #8
 800a1f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	b2d2      	uxtb	r2, r2
 800a1fc:	701a      	strb	r2, [r3, #0]
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	0a1b      	lsrs	r3, r3, #8
 800a202:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	b2d2      	uxtb	r2, r2
 800a20e:	701a      	strb	r2, [r3, #0]
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a21c:	b480      	push	{r7}
 800a21e:	b087      	sub	sp, #28
 800a220:	af00      	add	r7, sp, #0
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00d      	beq.n	800a252 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a236:	693a      	ldr	r2, [r7, #16]
 800a238:	1c53      	adds	r3, r2, #1
 800a23a:	613b      	str	r3, [r7, #16]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	1c59      	adds	r1, r3, #1
 800a240:	6179      	str	r1, [r7, #20]
 800a242:	7812      	ldrb	r2, [r2, #0]
 800a244:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3b01      	subs	r3, #1
 800a24a:	607b      	str	r3, [r7, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1f1      	bne.n	800a236 <mem_cpy+0x1a>
	}
}
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a25e:	b480      	push	{r7}
 800a260:	b087      	sub	sp, #28
 800a262:	af00      	add	r7, sp, #0
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	617a      	str	r2, [r7, #20]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	b2d2      	uxtb	r2, r2
 800a278:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	607b      	str	r3, [r7, #4]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1f3      	bne.n	800a26e <mem_set+0x10>
}
 800a286:	bf00      	nop
 800a288:	bf00      	nop
 800a28a:	371c      	adds	r7, #28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a294:	b480      	push	{r7}
 800a296:	b089      	sub	sp, #36	; 0x24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	61fb      	str	r3, [r7, #28]
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	61fa      	str	r2, [r7, #28]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	1c5a      	adds	r2, r3, #1
 800a2ba:	61ba      	str	r2, [r7, #24]
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	1acb      	subs	r3, r1, r3
 800a2c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <mem_cmp+0x40>
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d0eb      	beq.n	800a2ac <mem_cmp+0x18>

	return r;
 800a2d4:	697b      	ldr	r3, [r7, #20]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3724      	adds	r7, #36	; 0x24
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a2ec:	e002      	b.n	800a2f4 <chk_chr+0x12>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	3301      	adds	r3, #1
 800a2f2:	607b      	str	r3, [r7, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <chk_chr+0x26>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	461a      	mov	r2, r3
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	4293      	cmp	r3, r2
 800a306:	d1f2      	bne.n	800a2ee <chk_chr+0xc>
	return *str;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	781b      	ldrb	r3, [r3, #0]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a322:	2300      	movs	r3, #0
 800a324:	60bb      	str	r3, [r7, #8]
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	60fb      	str	r3, [r7, #12]
 800a32a:	e029      	b.n	800a380 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a32c:	4a27      	ldr	r2, [pc, #156]	; (800a3cc <chk_lock+0xb4>)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	011b      	lsls	r3, r3, #4
 800a332:	4413      	add	r3, r2
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d01d      	beq.n	800a376 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a33a:	4a24      	ldr	r2, [pc, #144]	; (800a3cc <chk_lock+0xb4>)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	011b      	lsls	r3, r3, #4
 800a340:	4413      	add	r3, r2
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d116      	bne.n	800a37a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a34c:	4a1f      	ldr	r2, [pc, #124]	; (800a3cc <chk_lock+0xb4>)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	011b      	lsls	r3, r3, #4
 800a352:	4413      	add	r3, r2
 800a354:	3304      	adds	r3, #4
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d10c      	bne.n	800a37a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a360:	4a1a      	ldr	r2, [pc, #104]	; (800a3cc <chk_lock+0xb4>)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	011b      	lsls	r3, r3, #4
 800a366:	4413      	add	r3, r2
 800a368:	3308      	adds	r3, #8
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a370:	429a      	cmp	r2, r3
 800a372:	d102      	bne.n	800a37a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a374:	e007      	b.n	800a386 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a376:	2301      	movs	r3, #1
 800a378:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3301      	adds	r3, #1
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d9d2      	bls.n	800a32c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d109      	bne.n	800a3a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <chk_lock+0x80>
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b02      	cmp	r3, #2
 800a396:	d101      	bne.n	800a39c <chk_lock+0x84>
 800a398:	2300      	movs	r3, #0
 800a39a:	e010      	b.n	800a3be <chk_lock+0xa6>
 800a39c:	2312      	movs	r3, #18
 800a39e:	e00e      	b.n	800a3be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d108      	bne.n	800a3b8 <chk_lock+0xa0>
 800a3a6:	4a09      	ldr	r2, [pc, #36]	; (800a3cc <chk_lock+0xb4>)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	011b      	lsls	r3, r3, #4
 800a3ac:	4413      	add	r3, r2
 800a3ae:	330c      	adds	r3, #12
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3b6:	d101      	bne.n	800a3bc <chk_lock+0xa4>
 800a3b8:	2310      	movs	r3, #16
 800a3ba:	e000      	b.n	800a3be <chk_lock+0xa6>
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3714      	adds	r7, #20
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop
 800a3cc:	200004ac 	.word	0x200004ac

0800a3d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	607b      	str	r3, [r7, #4]
 800a3da:	e002      	b.n	800a3e2 <enq_lock+0x12>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	607b      	str	r3, [r7, #4]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d806      	bhi.n	800a3f6 <enq_lock+0x26>
 800a3e8:	4a09      	ldr	r2, [pc, #36]	; (800a410 <enq_lock+0x40>)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	011b      	lsls	r3, r3, #4
 800a3ee:	4413      	add	r3, r2
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1f2      	bne.n	800a3dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2b02      	cmp	r3, #2
 800a3fa:	bf14      	ite	ne
 800a3fc:	2301      	movne	r3, #1
 800a3fe:	2300      	moveq	r3, #0
 800a400:	b2db      	uxtb	r3, r3
}
 800a402:	4618      	mov	r0, r3
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	200004ac 	.word	0x200004ac

0800a414 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a41e:	2300      	movs	r3, #0
 800a420:	60fb      	str	r3, [r7, #12]
 800a422:	e01f      	b.n	800a464 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a424:	4a41      	ldr	r2, [pc, #260]	; (800a52c <inc_lock+0x118>)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	011b      	lsls	r3, r3, #4
 800a42a:	4413      	add	r3, r2
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d113      	bne.n	800a45e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a436:	4a3d      	ldr	r2, [pc, #244]	; (800a52c <inc_lock+0x118>)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	011b      	lsls	r3, r3, #4
 800a43c:	4413      	add	r3, r2
 800a43e:	3304      	adds	r3, #4
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a446:	429a      	cmp	r2, r3
 800a448:	d109      	bne.n	800a45e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a44a:	4a38      	ldr	r2, [pc, #224]	; (800a52c <inc_lock+0x118>)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	011b      	lsls	r3, r3, #4
 800a450:	4413      	add	r3, r2
 800a452:	3308      	adds	r3, #8
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d006      	beq.n	800a46c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3301      	adds	r3, #1
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d9dc      	bls.n	800a424 <inc_lock+0x10>
 800a46a:	e000      	b.n	800a46e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a46c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b02      	cmp	r3, #2
 800a472:	d132      	bne.n	800a4da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]
 800a478:	e002      	b.n	800a480 <inc_lock+0x6c>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3301      	adds	r3, #1
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d806      	bhi.n	800a494 <inc_lock+0x80>
 800a486:	4a29      	ldr	r2, [pc, #164]	; (800a52c <inc_lock+0x118>)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	4413      	add	r3, r2
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1f2      	bne.n	800a47a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b02      	cmp	r3, #2
 800a498:	d101      	bne.n	800a49e <inc_lock+0x8a>
 800a49a:	2300      	movs	r3, #0
 800a49c:	e040      	b.n	800a520 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4922      	ldr	r1, [pc, #136]	; (800a52c <inc_lock+0x118>)
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	011b      	lsls	r3, r3, #4
 800a4a8:	440b      	add	r3, r1
 800a4aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689a      	ldr	r2, [r3, #8]
 800a4b0:	491e      	ldr	r1, [pc, #120]	; (800a52c <inc_lock+0x118>)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	011b      	lsls	r3, r3, #4
 800a4b6:	440b      	add	r3, r1
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	695a      	ldr	r2, [r3, #20]
 800a4c0:	491a      	ldr	r1, [pc, #104]	; (800a52c <inc_lock+0x118>)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	011b      	lsls	r3, r3, #4
 800a4c6:	440b      	add	r3, r1
 800a4c8:	3308      	adds	r3, #8
 800a4ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a4cc:	4a17      	ldr	r2, [pc, #92]	; (800a52c <inc_lock+0x118>)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	011b      	lsls	r3, r3, #4
 800a4d2:	4413      	add	r3, r2
 800a4d4:	330c      	adds	r3, #12
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d009      	beq.n	800a4f4 <inc_lock+0xe0>
 800a4e0:	4a12      	ldr	r2, [pc, #72]	; (800a52c <inc_lock+0x118>)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	011b      	lsls	r3, r3, #4
 800a4e6:	4413      	add	r3, r2
 800a4e8:	330c      	adds	r3, #12
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d001      	beq.n	800a4f4 <inc_lock+0xe0>
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	e015      	b.n	800a520 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d108      	bne.n	800a50c <inc_lock+0xf8>
 800a4fa:	4a0c      	ldr	r2, [pc, #48]	; (800a52c <inc_lock+0x118>)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	011b      	lsls	r3, r3, #4
 800a500:	4413      	add	r3, r2
 800a502:	330c      	adds	r3, #12
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	3301      	adds	r3, #1
 800a508:	b29a      	uxth	r2, r3
 800a50a:	e001      	b.n	800a510 <inc_lock+0xfc>
 800a50c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a510:	4906      	ldr	r1, [pc, #24]	; (800a52c <inc_lock+0x118>)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	011b      	lsls	r3, r3, #4
 800a516:	440b      	add	r3, r1
 800a518:	330c      	adds	r3, #12
 800a51a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	3301      	adds	r3, #1
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52a:	4770      	bx	lr
 800a52c:	200004ac 	.word	0x200004ac

0800a530 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	3b01      	subs	r3, #1
 800a53c:	607b      	str	r3, [r7, #4]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d825      	bhi.n	800a590 <dec_lock+0x60>
		n = Files[i].ctr;
 800a544:	4a17      	ldr	r2, [pc, #92]	; (800a5a4 <dec_lock+0x74>)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	011b      	lsls	r3, r3, #4
 800a54a:	4413      	add	r3, r2
 800a54c:	330c      	adds	r3, #12
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a552:	89fb      	ldrh	r3, [r7, #14]
 800a554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a558:	d101      	bne.n	800a55e <dec_lock+0x2e>
 800a55a:	2300      	movs	r3, #0
 800a55c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a55e:	89fb      	ldrh	r3, [r7, #14]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d002      	beq.n	800a56a <dec_lock+0x3a>
 800a564:	89fb      	ldrh	r3, [r7, #14]
 800a566:	3b01      	subs	r3, #1
 800a568:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a56a:	4a0e      	ldr	r2, [pc, #56]	; (800a5a4 <dec_lock+0x74>)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	4413      	add	r3, r2
 800a572:	330c      	adds	r3, #12
 800a574:	89fa      	ldrh	r2, [r7, #14]
 800a576:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a578:	89fb      	ldrh	r3, [r7, #14]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d105      	bne.n	800a58a <dec_lock+0x5a>
 800a57e:	4a09      	ldr	r2, [pc, #36]	; (800a5a4 <dec_lock+0x74>)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	011b      	lsls	r3, r3, #4
 800a584:	4413      	add	r3, r2
 800a586:	2200      	movs	r2, #0
 800a588:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	737b      	strb	r3, [r7, #13]
 800a58e:	e001      	b.n	800a594 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a590:	2302      	movs	r3, #2
 800a592:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a594:	7b7b      	ldrb	r3, [r7, #13]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	200004ac 	.word	0x200004ac

0800a5a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	e010      	b.n	800a5d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a5b6:	4a0d      	ldr	r2, [pc, #52]	; (800a5ec <clear_lock+0x44>)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	4413      	add	r3, r2
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d105      	bne.n	800a5d2 <clear_lock+0x2a>
 800a5c6:	4a09      	ldr	r2, [pc, #36]	; (800a5ec <clear_lock+0x44>)
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	011b      	lsls	r3, r3, #4
 800a5cc:	4413      	add	r3, r2
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d9eb      	bls.n	800a5b6 <clear_lock+0xe>
	}
}
 800a5de:	bf00      	nop
 800a5e0:	bf00      	nop
 800a5e2:	3714      	adds	r7, #20
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	200004ac 	.word	0x200004ac

0800a5f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	78db      	ldrb	r3, [r3, #3]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d034      	beq.n	800a66e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a608:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	7858      	ldrb	r0, [r3, #1]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a614:	2301      	movs	r3, #1
 800a616:	697a      	ldr	r2, [r7, #20]
 800a618:	f7ff fd40 	bl	800a09c <disk_write>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a622:	2301      	movs	r3, #1
 800a624:	73fb      	strb	r3, [r7, #15]
 800a626:	e022      	b.n	800a66e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6a1b      	ldr	r3, [r3, #32]
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	1ad2      	subs	r2, r2, r3
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	699b      	ldr	r3, [r3, #24]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d217      	bcs.n	800a66e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	789b      	ldrb	r3, [r3, #2]
 800a642:	613b      	str	r3, [r7, #16]
 800a644:	e010      	b.n	800a668 <sync_window+0x78>
					wsect += fs->fsize;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	4413      	add	r3, r2
 800a64e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	7858      	ldrb	r0, [r3, #1]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a65a:	2301      	movs	r3, #1
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	f7ff fd1d 	bl	800a09c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	3b01      	subs	r3, #1
 800a666:	613b      	str	r3, [r7, #16]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d8eb      	bhi.n	800a646 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3718      	adds	r7, #24
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a682:	2300      	movs	r3, #0
 800a684:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a68a:	683a      	ldr	r2, [r7, #0]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d01b      	beq.n	800a6c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f7ff ffad 	bl	800a5f0 <sync_window>
 800a696:	4603      	mov	r3, r0
 800a698:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d113      	bne.n	800a6c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	7858      	ldrb	r0, [r3, #1]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	f7ff fcd5 	bl	800a05c <disk_read>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d004      	beq.n	800a6c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
	...

0800a6d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f7ff ff87 	bl	800a5f0 <sync_window>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d158      	bne.n	800a79e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	2b03      	cmp	r3, #3
 800a6f2:	d148      	bne.n	800a786 <sync_fs+0xb2>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	791b      	ldrb	r3, [r3, #4]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d144      	bne.n	800a786 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3330      	adds	r3, #48	; 0x30
 800a700:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a704:	2100      	movs	r1, #0
 800a706:	4618      	mov	r0, r3
 800a708:	f7ff fda9 	bl	800a25e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	3330      	adds	r3, #48	; 0x30
 800a710:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a714:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fd38 	bl	800a18e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3330      	adds	r3, #48	; 0x30
 800a722:	4921      	ldr	r1, [pc, #132]	; (800a7a8 <sync_fs+0xd4>)
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff fd4d 	bl	800a1c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3330      	adds	r3, #48	; 0x30
 800a72e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a732:	491e      	ldr	r1, [pc, #120]	; (800a7ac <sync_fs+0xd8>)
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fd45 	bl	800a1c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3330      	adds	r3, #48	; 0x30
 800a73e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	4619      	mov	r1, r3
 800a748:	4610      	mov	r0, r2
 800a74a:	f7ff fd3b 	bl	800a1c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	3330      	adds	r3, #48	; 0x30
 800a752:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68db      	ldr	r3, [r3, #12]
 800a75a:	4619      	mov	r1, r3
 800a75c:	4610      	mov	r0, r2
 800a75e:	f7ff fd31 	bl	800a1c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	7858      	ldrb	r0, [r3, #1]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77a:	2301      	movs	r3, #1
 800a77c:	f7ff fc8e 	bl	800a09c <disk_write>
			fs->fsi_flag = 0;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	785b      	ldrb	r3, [r3, #1]
 800a78a:	2200      	movs	r2, #0
 800a78c:	2100      	movs	r1, #0
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fca4 	bl	800a0dc <disk_ioctl>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <sync_fs+0xca>
 800a79a:	2301      	movs	r3, #1
 800a79c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	41615252 	.word	0x41615252
 800a7ac:	61417272 	.word	0x61417272

0800a7b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	3b02      	subs	r3, #2
 800a7be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	3b02      	subs	r3, #2
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d301      	bcc.n	800a7d0 <clust2sect+0x20>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	e008      	b.n	800a7e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	895b      	ldrh	r3, [r3, #10]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	fb03 f202 	mul.w	r2, r3, r2
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e0:	4413      	add	r3, r2
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	370c      	adds	r7, #12
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr

0800a7ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b086      	sub	sp, #24
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d904      	bls.n	800a80e <get_fat+0x20>
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d302      	bcc.n	800a814 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a80e:	2301      	movs	r3, #1
 800a810:	617b      	str	r3, [r7, #20]
 800a812:	e08f      	b.n	800a934 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a814:	f04f 33ff 	mov.w	r3, #4294967295
 800a818:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b03      	cmp	r3, #3
 800a820:	d062      	beq.n	800a8e8 <get_fat+0xfa>
 800a822:	2b03      	cmp	r3, #3
 800a824:	dc7c      	bgt.n	800a920 <get_fat+0x132>
 800a826:	2b01      	cmp	r3, #1
 800a828:	d002      	beq.n	800a830 <get_fat+0x42>
 800a82a:	2b02      	cmp	r3, #2
 800a82c:	d042      	beq.n	800a8b4 <get_fat+0xc6>
 800a82e:	e077      	b.n	800a920 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	085b      	lsrs	r3, r3, #1
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	4413      	add	r3, r2
 800a83c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	6a1a      	ldr	r2, [r3, #32]
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	0a5b      	lsrs	r3, r3, #9
 800a846:	4413      	add	r3, r2
 800a848:	4619      	mov	r1, r3
 800a84a:	6938      	ldr	r0, [r7, #16]
 800a84c:	f7ff ff14 	bl	800a678 <move_window>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d167      	bne.n	800a926 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	1c5a      	adds	r2, r3, #1
 800a85a:	60fa      	str	r2, [r7, #12]
 800a85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	4413      	add	r3, r2
 800a864:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a868:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	6a1a      	ldr	r2, [r3, #32]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	0a5b      	lsrs	r3, r3, #9
 800a872:	4413      	add	r3, r2
 800a874:	4619      	mov	r1, r3
 800a876:	6938      	ldr	r0, [r7, #16]
 800a878:	f7ff fefe 	bl	800a678 <move_window>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d153      	bne.n	800a92a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	4413      	add	r3, r2
 800a88c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a890:	021b      	lsls	r3, r3, #8
 800a892:	461a      	mov	r2, r3
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	4313      	orrs	r3, r2
 800a898:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	f003 0301 	and.w	r3, r3, #1
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d002      	beq.n	800a8aa <get_fat+0xbc>
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	091b      	lsrs	r3, r3, #4
 800a8a8:	e002      	b.n	800a8b0 <get_fat+0xc2>
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8b0:	617b      	str	r3, [r7, #20]
			break;
 800a8b2:	e03f      	b.n	800a934 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	6a1a      	ldr	r2, [r3, #32]
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	0a1b      	lsrs	r3, r3, #8
 800a8bc:	4413      	add	r3, r2
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6938      	ldr	r0, [r7, #16]
 800a8c2:	f7ff fed9 	bl	800a678 <move_window>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d130      	bne.n	800a92e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a8da:	4413      	add	r3, r2
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff fc1b 	bl	800a118 <ld_word>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	617b      	str	r3, [r7, #20]
			break;
 800a8e6:	e025      	b.n	800a934 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	6a1a      	ldr	r2, [r3, #32]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	09db      	lsrs	r3, r3, #7
 800a8f0:	4413      	add	r3, r2
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6938      	ldr	r0, [r7, #16]
 800a8f6:	f7ff febf 	bl	800a678 <move_window>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d118      	bne.n	800a932 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a90e:	4413      	add	r3, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fc19 	bl	800a148 <ld_dword>
 800a916:	4603      	mov	r3, r0
 800a918:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a91c:	617b      	str	r3, [r7, #20]
			break;
 800a91e:	e009      	b.n	800a934 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a920:	2301      	movs	r3, #1
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	e006      	b.n	800a934 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a926:	bf00      	nop
 800a928:	e004      	b.n	800a934 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a92a:	bf00      	nop
 800a92c:	e002      	b.n	800a934 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a92e:	bf00      	nop
 800a930:	e000      	b.n	800a934 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a932:	bf00      	nop
		}
	}

	return val;
 800a934:	697b      	ldr	r3, [r7, #20]
}
 800a936:	4618      	mov	r0, r3
 800a938:	3718      	adds	r7, #24
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a93e:	b590      	push	{r4, r7, lr}
 800a940:	b089      	sub	sp, #36	; 0x24
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a94a:	2302      	movs	r3, #2
 800a94c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	2b01      	cmp	r3, #1
 800a952:	f240 80d2 	bls.w	800aafa <put_fat+0x1bc>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	f080 80cc 	bcs.w	800aafa <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	2b03      	cmp	r3, #3
 800a968:	f000 8096 	beq.w	800aa98 <put_fat+0x15a>
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	f300 80cd 	bgt.w	800ab0c <put_fat+0x1ce>
 800a972:	2b01      	cmp	r3, #1
 800a974:	d002      	beq.n	800a97c <put_fat+0x3e>
 800a976:	2b02      	cmp	r3, #2
 800a978:	d06e      	beq.n	800aa58 <put_fat+0x11a>
 800a97a:	e0c7      	b.n	800ab0c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	61bb      	str	r3, [r7, #24]
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	085b      	lsrs	r3, r3, #1
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	4413      	add	r3, r2
 800a988:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6a1a      	ldr	r2, [r3, #32]
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	0a5b      	lsrs	r3, r3, #9
 800a992:	4413      	add	r3, r2
 800a994:	4619      	mov	r1, r3
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f7ff fe6e 	bl	800a678 <move_window>
 800a99c:	4603      	mov	r3, r0
 800a99e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9a0:	7ffb      	ldrb	r3, [r7, #31]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	f040 80ab 	bne.w	800aafe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	1c59      	adds	r1, r3, #1
 800a9b2:	61b9      	str	r1, [r7, #24]
 800a9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9b8:	4413      	add	r3, r2
 800a9ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00d      	beq.n	800a9e2 <put_fat+0xa4>
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	b25b      	sxtb	r3, r3
 800a9cc:	f003 030f 	and.w	r3, r3, #15
 800a9d0:	b25a      	sxtb	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	011b      	lsls	r3, r3, #4
 800a9d8:	b25b      	sxtb	r3, r3
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	b25b      	sxtb	r3, r3
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	e001      	b.n	800a9e6 <put_fat+0xa8>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a1a      	ldr	r2, [r3, #32]
 800a9f4:	69bb      	ldr	r3, [r7, #24]
 800a9f6:	0a5b      	lsrs	r3, r3, #9
 800a9f8:	4413      	add	r3, r2
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	68f8      	ldr	r0, [r7, #12]
 800a9fe:	f7ff fe3b 	bl	800a678 <move_window>
 800aa02:	4603      	mov	r3, r0
 800aa04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa06:	7ffb      	ldrb	r3, [r7, #31]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d17a      	bne.n	800ab02 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa18:	4413      	add	r3, r2
 800aa1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f003 0301 	and.w	r3, r3, #1
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d003      	beq.n	800aa2e <put_fat+0xf0>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	091b      	lsrs	r3, r3, #4
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	e00e      	b.n	800aa4c <put_fat+0x10e>
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	b25b      	sxtb	r3, r3
 800aa34:	f023 030f 	bic.w	r3, r3, #15
 800aa38:	b25a      	sxtb	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	0a1b      	lsrs	r3, r3, #8
 800aa3e:	b25b      	sxtb	r3, r3
 800aa40:	f003 030f 	and.w	r3, r3, #15
 800aa44:	b25b      	sxtb	r3, r3
 800aa46:	4313      	orrs	r3, r2
 800aa48:	b25b      	sxtb	r3, r3
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2201      	movs	r2, #1
 800aa54:	70da      	strb	r2, [r3, #3]
			break;
 800aa56:	e059      	b.n	800ab0c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6a1a      	ldr	r2, [r3, #32]
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	0a1b      	lsrs	r3, r3, #8
 800aa60:	4413      	add	r3, r2
 800aa62:	4619      	mov	r1, r3
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f7ff fe07 	bl	800a678 <move_window>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa6e:	7ffb      	ldrb	r3, [r7, #31]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d148      	bne.n	800ab06 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aa82:	4413      	add	r3, r2
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	b292      	uxth	r2, r2
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff fb7f 	bl	800a18e <st_word>
			fs->wflag = 1;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2201      	movs	r2, #1
 800aa94:	70da      	strb	r2, [r3, #3]
			break;
 800aa96:	e039      	b.n	800ab0c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6a1a      	ldr	r2, [r3, #32]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	09db      	lsrs	r3, r3, #7
 800aaa0:	4413      	add	r3, r2
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f7ff fde7 	bl	800a678 <move_window>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aaae:	7ffb      	ldrb	r3, [r7, #31]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d12a      	bne.n	800ab0a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aac8:	4413      	add	r3, r2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fb3c 	bl	800a148 <ld_dword>
 800aad0:	4603      	mov	r3, r0
 800aad2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aad6:	4323      	orrs	r3, r4
 800aad8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aae8:	4413      	add	r3, r2
 800aaea:	6879      	ldr	r1, [r7, #4]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff fb69 	bl	800a1c4 <st_dword>
			fs->wflag = 1;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	70da      	strb	r2, [r3, #3]
			break;
 800aaf8:	e008      	b.n	800ab0c <put_fat+0x1ce>
		}
	}
 800aafa:	bf00      	nop
 800aafc:	e006      	b.n	800ab0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800aafe:	bf00      	nop
 800ab00:	e004      	b.n	800ab0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab02:	bf00      	nop
 800ab04:	e002      	b.n	800ab0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab0a:	bf00      	nop
	return res;
 800ab0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3724      	adds	r7, #36	; 0x24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd90      	pop	{r4, r7, pc}

0800ab16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b088      	sub	sp, #32
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	60f8      	str	r0, [r7, #12]
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d904      	bls.n	800ab3c <remove_chain+0x26>
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	695b      	ldr	r3, [r3, #20]
 800ab36:	68ba      	ldr	r2, [r7, #8]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d301      	bcc.n	800ab40 <remove_chain+0x2a>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e04b      	b.n	800abd8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00c      	beq.n	800ab60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ab46:	f04f 32ff 	mov.w	r2, #4294967295
 800ab4a:	6879      	ldr	r1, [r7, #4]
 800ab4c:	69b8      	ldr	r0, [r7, #24]
 800ab4e:	f7ff fef6 	bl	800a93e <put_fat>
 800ab52:	4603      	mov	r3, r0
 800ab54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ab56:	7ffb      	ldrb	r3, [r7, #31]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <remove_chain+0x4a>
 800ab5c:	7ffb      	ldrb	r3, [r7, #31]
 800ab5e:	e03b      	b.n	800abd8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ab60:	68b9      	ldr	r1, [r7, #8]
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f7ff fe43 	bl	800a7ee <get_fat>
 800ab68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d031      	beq.n	800abd4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d101      	bne.n	800ab7a <remove_chain+0x64>
 800ab76:	2302      	movs	r3, #2
 800ab78:	e02e      	b.n	800abd8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab80:	d101      	bne.n	800ab86 <remove_chain+0x70>
 800ab82:	2301      	movs	r3, #1
 800ab84:	e028      	b.n	800abd8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ab86:	2200      	movs	r2, #0
 800ab88:	68b9      	ldr	r1, [r7, #8]
 800ab8a:	69b8      	ldr	r0, [r7, #24]
 800ab8c:	f7ff fed7 	bl	800a93e <put_fat>
 800ab90:	4603      	mov	r3, r0
 800ab92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ab94:	7ffb      	ldrb	r3, [r7, #31]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <remove_chain+0x88>
 800ab9a:	7ffb      	ldrb	r3, [r7, #31]
 800ab9c:	e01c      	b.n	800abd8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	691a      	ldr	r2, [r3, #16]
 800aba2:	69bb      	ldr	r3, [r7, #24]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	3b02      	subs	r3, #2
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d20b      	bcs.n	800abc4 <remove_chain+0xae>
			fs->free_clst++;
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	791b      	ldrb	r3, [r3, #4]
 800abba:	f043 0301 	orr.w	r3, r3, #1
 800abbe:	b2da      	uxtb	r2, r3
 800abc0:	69bb      	ldr	r3, [r7, #24]
 800abc2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d3c6      	bcc.n	800ab60 <remove_chain+0x4a>
 800abd2:	e000      	b.n	800abd6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800abd4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3720      	adds	r7, #32
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b088      	sub	sp, #32
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d10d      	bne.n	800ac12 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <create_chain+0x2c>
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d31b      	bcc.n	800ac44 <create_chain+0x64>
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	61bb      	str	r3, [r7, #24]
 800ac10:	e018      	b.n	800ac44 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f7ff fdea 	bl	800a7ee <get_fat>
 800ac1a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d801      	bhi.n	800ac26 <create_chain+0x46>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e070      	b.n	800ad08 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac2c:	d101      	bne.n	800ac32 <create_chain+0x52>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	e06a      	b.n	800ad08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	695b      	ldr	r3, [r3, #20]
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d201      	bcs.n	800ac40 <create_chain+0x60>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	e063      	b.n	800ad08 <create_chain+0x128>
		scl = clst;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	695b      	ldr	r3, [r3, #20]
 800ac52:	69fa      	ldr	r2, [r7, #28]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d307      	bcc.n	800ac68 <create_chain+0x88>
				ncl = 2;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ac5c:	69fa      	ldr	r2, [r7, #28]
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d901      	bls.n	800ac68 <create_chain+0x88>
 800ac64:	2300      	movs	r3, #0
 800ac66:	e04f      	b.n	800ad08 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ac68:	69f9      	ldr	r1, [r7, #28]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f7ff fdbf 	bl	800a7ee <get_fat>
 800ac70:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00e      	beq.n	800ac96 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d003      	beq.n	800ac86 <create_chain+0xa6>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac84:	d101      	bne.n	800ac8a <create_chain+0xaa>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	e03e      	b.n	800ad08 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ac8a:	69fa      	ldr	r2, [r7, #28]
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d1da      	bne.n	800ac48 <create_chain+0x68>
 800ac92:	2300      	movs	r3, #0
 800ac94:	e038      	b.n	800ad08 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ac96:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ac98:	f04f 32ff 	mov.w	r2, #4294967295
 800ac9c:	69f9      	ldr	r1, [r7, #28]
 800ac9e:	6938      	ldr	r0, [r7, #16]
 800aca0:	f7ff fe4d 	bl	800a93e <put_fat>
 800aca4:	4603      	mov	r3, r0
 800aca6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d109      	bne.n	800acc2 <create_chain+0xe2>
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d006      	beq.n	800acc2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6938      	ldr	r0, [r7, #16]
 800acba:	f7ff fe40 	bl	800a93e <put_fat>
 800acbe:	4603      	mov	r3, r0
 800acc0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d116      	bne.n	800acf6 <create_chain+0x116>
		fs->last_clst = ncl;
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	691a      	ldr	r2, [r3, #16]
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	695b      	ldr	r3, [r3, #20]
 800acd6:	3b02      	subs	r3, #2
 800acd8:	429a      	cmp	r2, r3
 800acda:	d804      	bhi.n	800ace6 <create_chain+0x106>
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	1e5a      	subs	r2, r3, #1
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	791b      	ldrb	r3, [r3, #4]
 800acea:	f043 0301 	orr.w	r3, r3, #1
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	711a      	strb	r2, [r3, #4]
 800acf4:	e007      	b.n	800ad06 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d102      	bne.n	800ad02 <create_chain+0x122>
 800acfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ad00:	e000      	b.n	800ad04 <create_chain+0x124>
 800ad02:	2301      	movs	r3, #1
 800ad04:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad06:	69fb      	ldr	r3, [r7, #28]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3720      	adds	r7, #32
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b087      	sub	sp, #28
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad24:	3304      	adds	r3, #4
 800ad26:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	0a5b      	lsrs	r3, r3, #9
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	8952      	ldrh	r2, [r2, #10]
 800ad30:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad34:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	1d1a      	adds	r2, r3, #4
 800ad3a:	613a      	str	r2, [r7, #16]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d101      	bne.n	800ad4a <clmt_clust+0x3a>
 800ad46:	2300      	movs	r3, #0
 800ad48:	e010      	b.n	800ad6c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d307      	bcc.n	800ad62 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ad52:	697a      	ldr	r2, [r7, #20]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	1ad3      	subs	r3, r2, r3
 800ad58:	617b      	str	r3, [r7, #20]
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad60:	e7e9      	b.n	800ad36 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ad62:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	4413      	add	r3, r2
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	371c      	adds	r7, #28
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad8e:	d204      	bcs.n	800ad9a <dir_sdi+0x22>
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	f003 031f 	and.w	r3, r3, #31
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <dir_sdi+0x26>
		return FR_INT_ERR;
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	e063      	b.n	800ae66 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d106      	bne.n	800adbe <dir_sdi+0x46>
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	d902      	bls.n	800adbe <dir_sdi+0x46>
		clst = fs->dirbase;
 800adb8:	693b      	ldr	r3, [r7, #16]
 800adba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10c      	bne.n	800adde <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	095b      	lsrs	r3, r3, #5
 800adc8:	693a      	ldr	r2, [r7, #16]
 800adca:	8912      	ldrh	r2, [r2, #8]
 800adcc:	4293      	cmp	r3, r2
 800adce:	d301      	bcc.n	800add4 <dir_sdi+0x5c>
 800add0:	2302      	movs	r3, #2
 800add2:	e048      	b.n	800ae66 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	61da      	str	r2, [r3, #28]
 800addc:	e029      	b.n	800ae32 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	895b      	ldrh	r3, [r3, #10]
 800ade2:	025b      	lsls	r3, r3, #9
 800ade4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ade6:	e019      	b.n	800ae1c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6979      	ldr	r1, [r7, #20]
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fcfe 	bl	800a7ee <get_fat>
 800adf2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfa:	d101      	bne.n	800ae00 <dir_sdi+0x88>
 800adfc:	2301      	movs	r3, #1
 800adfe:	e032      	b.n	800ae66 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d904      	bls.n	800ae10 <dir_sdi+0x98>
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d301      	bcc.n	800ae14 <dir_sdi+0x9c>
 800ae10:	2302      	movs	r3, #2
 800ae12:	e028      	b.n	800ae66 <dir_sdi+0xee>
			ofs -= csz;
 800ae14:	683a      	ldr	r2, [r7, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	1ad3      	subs	r3, r2, r3
 800ae1a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d2e1      	bcs.n	800ade8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ae24:	6979      	ldr	r1, [r7, #20]
 800ae26:	6938      	ldr	r0, [r7, #16]
 800ae28:	f7ff fcc2 	bl	800a7b0 <clust2sect>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	697a      	ldr	r2, [r7, #20]
 800ae36:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <dir_sdi+0xcc>
 800ae40:	2302      	movs	r3, #2
 800ae42:	e010      	b.n	800ae66 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	69da      	ldr	r2, [r3, #28]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	0a5b      	lsrs	r3, r3, #9
 800ae4c:	441a      	add	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5e:	441a      	add	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}

0800ae6e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b086      	sub	sp, #24
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	3320      	adds	r3, #32
 800ae84:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <dir_next+0x28>
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae94:	d301      	bcc.n	800ae9a <dir_next+0x2c>
 800ae96:	2304      	movs	r3, #4
 800ae98:	e0aa      	b.n	800aff0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f040 8098 	bne.w	800afd6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	69db      	ldr	r3, [r3, #28]
 800aeaa:	1c5a      	adds	r2, r3, #1
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10b      	bne.n	800aed0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	095b      	lsrs	r3, r3, #5
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	8912      	ldrh	r2, [r2, #8]
 800aec0:	4293      	cmp	r3, r2
 800aec2:	f0c0 8088 	bcc.w	800afd6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	61da      	str	r2, [r3, #28]
 800aecc:	2304      	movs	r3, #4
 800aece:	e08f      	b.n	800aff0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	0a5b      	lsrs	r3, r3, #9
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	8952      	ldrh	r2, [r2, #10]
 800aed8:	3a01      	subs	r2, #1
 800aeda:	4013      	ands	r3, r2
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d17a      	bne.n	800afd6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	699b      	ldr	r3, [r3, #24]
 800aee6:	4619      	mov	r1, r3
 800aee8:	4610      	mov	r0, r2
 800aeea:	f7ff fc80 	bl	800a7ee <get_fat>
 800aeee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d801      	bhi.n	800aefa <dir_next+0x8c>
 800aef6:	2302      	movs	r3, #2
 800aef8:	e07a      	b.n	800aff0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af00:	d101      	bne.n	800af06 <dir_next+0x98>
 800af02:	2301      	movs	r3, #1
 800af04:	e074      	b.n	800aff0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	697a      	ldr	r2, [r7, #20]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d358      	bcc.n	800afc2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d104      	bne.n	800af20 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2200      	movs	r2, #0
 800af1a:	61da      	str	r2, [r3, #28]
 800af1c:	2304      	movs	r3, #4
 800af1e:	e067      	b.n	800aff0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	4619      	mov	r1, r3
 800af28:	4610      	mov	r0, r2
 800af2a:	f7ff fe59 	bl	800abe0 <create_chain>
 800af2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d101      	bne.n	800af3a <dir_next+0xcc>
 800af36:	2307      	movs	r3, #7
 800af38:	e05a      	b.n	800aff0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d101      	bne.n	800af44 <dir_next+0xd6>
 800af40:	2302      	movs	r3, #2
 800af42:	e055      	b.n	800aff0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4a:	d101      	bne.n	800af50 <dir_next+0xe2>
 800af4c:	2301      	movs	r3, #1
 800af4e:	e04f      	b.n	800aff0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f7ff fb4d 	bl	800a5f0 <sync_window>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <dir_next+0xf2>
 800af5c:	2301      	movs	r3, #1
 800af5e:	e047      	b.n	800aff0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3330      	adds	r3, #48	; 0x30
 800af64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af68:	2100      	movs	r1, #0
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff f977 	bl	800a25e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800af70:	2300      	movs	r3, #0
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	6979      	ldr	r1, [r7, #20]
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f7ff fc1a 	bl	800a7b0 <clust2sect>
 800af7c:	4602      	mov	r2, r0
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	62da      	str	r2, [r3, #44]	; 0x2c
 800af82:	e012      	b.n	800afaa <dir_next+0x13c>
						fs->wflag = 1;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2201      	movs	r2, #1
 800af88:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f7ff fb30 	bl	800a5f0 <sync_window>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d001      	beq.n	800af9a <dir_next+0x12c>
 800af96:	2301      	movs	r3, #1
 800af98:	e02a      	b.n	800aff0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	3301      	adds	r3, #1
 800af9e:	613b      	str	r3, [r7, #16]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	62da      	str	r2, [r3, #44]	; 0x2c
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	895b      	ldrh	r3, [r3, #10]
 800afae:	461a      	mov	r2, r3
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d3e6      	bcc.n	800af84 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	1ad2      	subs	r2, r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800afc8:	6979      	ldr	r1, [r7, #20]
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f7ff fbf0 	bl	800a7b0 <clust2sect>
 800afd0:	4602      	mov	r2, r0
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe8:	441a      	add	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b086      	sub	sp, #24
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b008:	2100      	movs	r1, #0
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff feb4 	bl	800ad78 <dir_sdi>
 800b010:	4603      	mov	r3, r0
 800b012:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b014:	7dfb      	ldrb	r3, [r7, #23]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d12b      	bne.n	800b072 <dir_alloc+0x7a>
		n = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	4619      	mov	r1, r3
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7ff fb27 	bl	800a678 <move_window>
 800b02a:	4603      	mov	r3, r0
 800b02c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d11d      	bne.n	800b070 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a1b      	ldr	r3, [r3, #32]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	2be5      	cmp	r3, #229	; 0xe5
 800b03c:	d004      	beq.n	800b048 <dir_alloc+0x50>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d107      	bne.n	800b058 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	3301      	adds	r3, #1
 800b04c:	613b      	str	r3, [r7, #16]
 800b04e:	693a      	ldr	r2, [r7, #16]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	429a      	cmp	r2, r3
 800b054:	d102      	bne.n	800b05c <dir_alloc+0x64>
 800b056:	e00c      	b.n	800b072 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b058:	2300      	movs	r3, #0
 800b05a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b05c:	2101      	movs	r1, #1
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff ff05 	bl	800ae6e <dir_next>
 800b064:	4603      	mov	r3, r0
 800b066:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b068:	7dfb      	ldrb	r3, [r7, #23]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d0d7      	beq.n	800b01e <dir_alloc+0x26>
 800b06e:	e000      	b.n	800b072 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b070:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	2b04      	cmp	r3, #4
 800b076:	d101      	bne.n	800b07c <dir_alloc+0x84>
 800b078:	2307      	movs	r3, #7
 800b07a:	75fb      	strb	r3, [r7, #23]
	return res;
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3718      	adds	r7, #24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}

0800b086 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b086:	b580      	push	{r7, lr}
 800b088:	b084      	sub	sp, #16
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
 800b08e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	331a      	adds	r3, #26
 800b094:	4618      	mov	r0, r3
 800b096:	f7ff f83f 	bl	800a118 <ld_word>
 800b09a:	4603      	mov	r3, r0
 800b09c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d109      	bne.n	800b0ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	3314      	adds	r3, #20
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff f834 	bl	800a118 <ld_word>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	041b      	lsls	r3, r3, #16
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3710      	adds	r7, #16
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	331a      	adds	r3, #26
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	b292      	uxth	r2, r2
 800b0d8:	4611      	mov	r1, r2
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7ff f857 	bl	800a18e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	781b      	ldrb	r3, [r3, #0]
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d109      	bne.n	800b0fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	f103 0214 	add.w	r2, r3, #20
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	0c1b      	lsrs	r3, r3, #16
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	f7ff f849 	bl	800a18e <st_word>
	}
}
 800b0fc:	bf00      	nop
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b10e:	2304      	movs	r3, #4
 800b110:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b118:	e03c      	b.n	800b194 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	4619      	mov	r1, r3
 800b120:	6938      	ldr	r0, [r7, #16]
 800b122:	f7ff faa9 	bl	800a678 <move_window>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d136      	bne.n	800b19e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a1b      	ldr	r3, [r3, #32]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d102      	bne.n	800b144 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b13e:	2304      	movs	r3, #4
 800b140:	75fb      	strb	r3, [r7, #23]
 800b142:	e031      	b.n	800b1a8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a1b      	ldr	r3, [r3, #32]
 800b148:	330b      	adds	r3, #11
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b150:	73bb      	strb	r3, [r7, #14]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	7bba      	ldrb	r2, [r7, #14]
 800b156:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b158:	7bfb      	ldrb	r3, [r7, #15]
 800b15a:	2be5      	cmp	r3, #229	; 0xe5
 800b15c:	d011      	beq.n	800b182 <dir_read+0x7e>
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	2b2e      	cmp	r3, #46	; 0x2e
 800b162:	d00e      	beq.n	800b182 <dir_read+0x7e>
 800b164:	7bbb      	ldrb	r3, [r7, #14]
 800b166:	2b0f      	cmp	r3, #15
 800b168:	d00b      	beq.n	800b182 <dir_read+0x7e>
 800b16a:	7bbb      	ldrb	r3, [r7, #14]
 800b16c:	f023 0320 	bic.w	r3, r3, #32
 800b170:	2b08      	cmp	r3, #8
 800b172:	bf0c      	ite	eq
 800b174:	2301      	moveq	r3, #1
 800b176:	2300      	movne	r3, #0
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	4293      	cmp	r3, r2
 800b180:	d00f      	beq.n	800b1a2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b182:	2100      	movs	r1, #0
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7ff fe72 	bl	800ae6e <dir_next>
 800b18a:	4603      	mov	r3, r0
 800b18c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b18e:	7dfb      	ldrb	r3, [r7, #23]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d108      	bne.n	800b1a6 <dir_read+0xa2>
	while (dp->sect) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	69db      	ldr	r3, [r3, #28]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1be      	bne.n	800b11a <dir_read+0x16>
 800b19c:	e004      	b.n	800b1a8 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b19e:	bf00      	nop
 800b1a0:	e002      	b.n	800b1a8 <dir_read+0xa4>
				break;
 800b1a2:	bf00      	nop
 800b1a4:	e000      	b.n	800b1a8 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b1a6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d002      	beq.n	800b1b4 <dir_read+0xb0>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	61da      	str	r2, [r3, #28]
	return res;
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3718      	adds	r7, #24
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b086      	sub	sp, #24
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff fdd2 	bl	800ad78 <dir_sdi>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b1d8:	7dfb      	ldrb	r3, [r7, #23]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <dir_find+0x24>
 800b1de:	7dfb      	ldrb	r3, [r7, #23]
 800b1e0:	e03e      	b.n	800b260 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	69db      	ldr	r3, [r3, #28]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6938      	ldr	r0, [r7, #16]
 800b1ea:	f7ff fa45 	bl	800a678 <move_window>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b1f2:	7dfb      	ldrb	r3, [r7, #23]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d12f      	bne.n	800b258 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a1b      	ldr	r3, [r3, #32]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d102      	bne.n	800b20c <dir_find+0x4e>
 800b206:	2304      	movs	r3, #4
 800b208:	75fb      	strb	r3, [r7, #23]
 800b20a:	e028      	b.n	800b25e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a1b      	ldr	r3, [r3, #32]
 800b210:	330b      	adds	r3, #11
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	330b      	adds	r3, #11
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 0308 	and.w	r3, r3, #8
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10a      	bne.n	800b244 <dir_find+0x86>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a18      	ldr	r0, [r3, #32]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3324      	adds	r3, #36	; 0x24
 800b236:	220b      	movs	r2, #11
 800b238:	4619      	mov	r1, r3
 800b23a:	f7ff f82b 	bl	800a294 <mem_cmp>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00b      	beq.n	800b25c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b244:	2100      	movs	r1, #0
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7ff fe11 	bl	800ae6e <dir_next>
 800b24c:	4603      	mov	r3, r0
 800b24e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b250:	7dfb      	ldrb	r3, [r7, #23]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0c5      	beq.n	800b1e2 <dir_find+0x24>
 800b256:	e002      	b.n	800b25e <dir_find+0xa0>
		if (res != FR_OK) break;
 800b258:	bf00      	nop
 800b25a:	e000      	b.n	800b25e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b25c:	bf00      	nop

	return res;
 800b25e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b260:	4618      	mov	r0, r3
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b276:	2101      	movs	r1, #1
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f7ff febd 	bl	800aff8 <dir_alloc>
 800b27e:	4603      	mov	r3, r0
 800b280:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b282:	7bfb      	ldrb	r3, [r7, #15]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d11c      	bne.n	800b2c2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	69db      	ldr	r3, [r3, #28]
 800b28c:	4619      	mov	r1, r3
 800b28e:	68b8      	ldr	r0, [r7, #8]
 800b290:	f7ff f9f2 	bl	800a678 <move_window>
 800b294:	4603      	mov	r3, r0
 800b296:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d111      	bne.n	800b2c2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	2220      	movs	r2, #32
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7fe ffd9 	bl	800a25e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a18      	ldr	r0, [r3, #32]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3324      	adds	r3, #36	; 0x24
 800b2b4:	220b      	movs	r2, #11
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	f7fe ffb0 	bl	800a21c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3710      	adds	r7, #16
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	69db      	ldr	r3, [r3, #28]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d04e      	beq.n	800b382 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	613b      	str	r3, [r7, #16]
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b2ec:	e021      	b.n	800b332 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a1a      	ldr	r2, [r3, #32]
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	1c59      	adds	r1, r3, #1
 800b2f6:	6179      	str	r1, [r7, #20]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b2fe:	7bfb      	ldrb	r3, [r7, #15]
 800b300:	2b20      	cmp	r3, #32
 800b302:	d100      	bne.n	800b306 <get_fileinfo+0x3a>
 800b304:	e015      	b.n	800b332 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	2b05      	cmp	r3, #5
 800b30a:	d101      	bne.n	800b310 <get_fileinfo+0x44>
 800b30c:	23e5      	movs	r3, #229	; 0xe5
 800b30e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2b09      	cmp	r3, #9
 800b314:	d106      	bne.n	800b324 <get_fileinfo+0x58>
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	1c5a      	adds	r2, r3, #1
 800b31a:	613a      	str	r2, [r7, #16]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	4413      	add	r3, r2
 800b320:	222e      	movs	r2, #46	; 0x2e
 800b322:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	613a      	str	r2, [r7, #16]
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	4413      	add	r3, r2
 800b32e:	7bfa      	ldrb	r2, [r7, #15]
 800b330:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b0a      	cmp	r3, #10
 800b336:	d9da      	bls.n	800b2ee <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	4413      	add	r3, r2
 800b33e:	3309      	adds	r3, #9
 800b340:	2200      	movs	r2, #0
 800b342:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	7ada      	ldrb	r2, [r3, #11]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	331c      	adds	r3, #28
 800b354:	4618      	mov	r0, r3
 800b356:	f7fe fef7 	bl	800a148 <ld_dword>
 800b35a:	4602      	mov	r2, r0
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a1b      	ldr	r3, [r3, #32]
 800b364:	3316      	adds	r3, #22
 800b366:	4618      	mov	r0, r3
 800b368:	f7fe feee 	bl	800a148 <ld_dword>
 800b36c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	b29a      	uxth	r2, r3
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	80da      	strh	r2, [r3, #6]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	0c1b      	lsrs	r3, r3, #16
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	809a      	strh	r2, [r3, #4]
 800b380:	e000      	b.n	800b384 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b382:	bf00      	nop
}
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3324      	adds	r3, #36	; 0x24
 800b3a0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b3a2:	220b      	movs	r2, #11
 800b3a4:	2120      	movs	r1, #32
 800b3a6:	68b8      	ldr	r0, [r7, #8]
 800b3a8:	f7fe ff59 	bl	800a25e <mem_set>
	si = i = 0; ni = 8;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	613b      	str	r3, [r7, #16]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	61fb      	str	r3, [r7, #28]
 800b3b4:	2308      	movs	r3, #8
 800b3b6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	1c5a      	adds	r2, r3, #1
 800b3bc:	61fa      	str	r2, [r7, #28]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b3c6:	7efb      	ldrb	r3, [r7, #27]
 800b3c8:	2b20      	cmp	r3, #32
 800b3ca:	d94e      	bls.n	800b46a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b3cc:	7efb      	ldrb	r3, [r7, #27]
 800b3ce:	2b2f      	cmp	r3, #47	; 0x2f
 800b3d0:	d006      	beq.n	800b3e0 <create_name+0x54>
 800b3d2:	7efb      	ldrb	r3, [r7, #27]
 800b3d4:	2b5c      	cmp	r3, #92	; 0x5c
 800b3d6:	d110      	bne.n	800b3fa <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b3d8:	e002      	b.n	800b3e0 <create_name+0x54>
 800b3da:	69fb      	ldr	r3, [r7, #28]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	61fb      	str	r3, [r7, #28]
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	2b2f      	cmp	r3, #47	; 0x2f
 800b3ea:	d0f6      	beq.n	800b3da <create_name+0x4e>
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	2b5c      	cmp	r3, #92	; 0x5c
 800b3f6:	d0f0      	beq.n	800b3da <create_name+0x4e>
			break;
 800b3f8:	e038      	b.n	800b46c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b3fa:	7efb      	ldrb	r3, [r7, #27]
 800b3fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b3fe:	d003      	beq.n	800b408 <create_name+0x7c>
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	429a      	cmp	r2, r3
 800b406:	d30c      	bcc.n	800b422 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2b0b      	cmp	r3, #11
 800b40c:	d002      	beq.n	800b414 <create_name+0x88>
 800b40e:	7efb      	ldrb	r3, [r7, #27]
 800b410:	2b2e      	cmp	r3, #46	; 0x2e
 800b412:	d001      	beq.n	800b418 <create_name+0x8c>
 800b414:	2306      	movs	r3, #6
 800b416:	e044      	b.n	800b4a2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b418:	2308      	movs	r3, #8
 800b41a:	613b      	str	r3, [r7, #16]
 800b41c:	230b      	movs	r3, #11
 800b41e:	617b      	str	r3, [r7, #20]
			continue;
 800b420:	e022      	b.n	800b468 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b422:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b426:	2b00      	cmp	r3, #0
 800b428:	da04      	bge.n	800b434 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b42a:	7efb      	ldrb	r3, [r7, #27]
 800b42c:	3b80      	subs	r3, #128	; 0x80
 800b42e:	4a1f      	ldr	r2, [pc, #124]	; (800b4ac <create_name+0x120>)
 800b430:	5cd3      	ldrb	r3, [r2, r3]
 800b432:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b434:	7efb      	ldrb	r3, [r7, #27]
 800b436:	4619      	mov	r1, r3
 800b438:	481d      	ldr	r0, [pc, #116]	; (800b4b0 <create_name+0x124>)
 800b43a:	f7fe ff52 	bl	800a2e2 <chk_chr>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <create_name+0xbc>
 800b444:	2306      	movs	r3, #6
 800b446:	e02c      	b.n	800b4a2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b448:	7efb      	ldrb	r3, [r7, #27]
 800b44a:	2b60      	cmp	r3, #96	; 0x60
 800b44c:	d905      	bls.n	800b45a <create_name+0xce>
 800b44e:	7efb      	ldrb	r3, [r7, #27]
 800b450:	2b7a      	cmp	r3, #122	; 0x7a
 800b452:	d802      	bhi.n	800b45a <create_name+0xce>
 800b454:	7efb      	ldrb	r3, [r7, #27]
 800b456:	3b20      	subs	r3, #32
 800b458:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	1c5a      	adds	r2, r3, #1
 800b45e:	613a      	str	r2, [r7, #16]
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	4413      	add	r3, r2
 800b464:	7efa      	ldrb	r2, [r7, #27]
 800b466:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b468:	e7a6      	b.n	800b3b8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b46a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	441a      	add	r2, r3
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d101      	bne.n	800b480 <create_name+0xf4>
 800b47c:	2306      	movs	r3, #6
 800b47e:	e010      	b.n	800b4a2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	781b      	ldrb	r3, [r3, #0]
 800b484:	2be5      	cmp	r3, #229	; 0xe5
 800b486:	d102      	bne.n	800b48e <create_name+0x102>
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	2205      	movs	r2, #5
 800b48c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b48e:	7efb      	ldrb	r3, [r7, #27]
 800b490:	2b20      	cmp	r3, #32
 800b492:	d801      	bhi.n	800b498 <create_name+0x10c>
 800b494:	2204      	movs	r2, #4
 800b496:	e000      	b.n	800b49a <create_name+0x10e>
 800b498:	2200      	movs	r2, #0
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	330b      	adds	r3, #11
 800b49e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b4a0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3720      	adds	r7, #32
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	08011620 	.word	0x08011620
 800b4b0:	08011574 	.word	0x08011574

0800b4b4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b4c8:	e002      	b.n	800b4d0 <follow_path+0x1c>
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	603b      	str	r3, [r7, #0]
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	2b2f      	cmp	r3, #47	; 0x2f
 800b4d6:	d0f8      	beq.n	800b4ca <follow_path+0x16>
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b5c      	cmp	r3, #92	; 0x5c
 800b4de:	d0f4      	beq.n	800b4ca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	2b1f      	cmp	r3, #31
 800b4ec:	d80a      	bhi.n	800b504 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2280      	movs	r2, #128	; 0x80
 800b4f2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7ff fc3d 	bl	800ad78 <dir_sdi>
 800b4fe:	4603      	mov	r3, r0
 800b500:	75fb      	strb	r3, [r7, #23]
 800b502:	e043      	b.n	800b58c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b504:	463b      	mov	r3, r7
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff ff3f 	bl	800b38c <create_name>
 800b50e:	4603      	mov	r3, r0
 800b510:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d134      	bne.n	800b582 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff fe50 	bl	800b1be <dir_find>
 800b51e:	4603      	mov	r3, r0
 800b520:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b528:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d00a      	beq.n	800b546 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b530:	7dfb      	ldrb	r3, [r7, #23]
 800b532:	2b04      	cmp	r3, #4
 800b534:	d127      	bne.n	800b586 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b536:	7afb      	ldrb	r3, [r7, #11]
 800b538:	f003 0304 	and.w	r3, r3, #4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d122      	bne.n	800b586 <follow_path+0xd2>
 800b540:	2305      	movs	r3, #5
 800b542:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b544:	e01f      	b.n	800b586 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b546:	7afb      	ldrb	r3, [r7, #11]
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d11c      	bne.n	800b58a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	799b      	ldrb	r3, [r3, #6]
 800b554:	f003 0310 	and.w	r3, r3, #16
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d102      	bne.n	800b562 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b55c:	2305      	movs	r3, #5
 800b55e:	75fb      	strb	r3, [r7, #23]
 800b560:	e014      	b.n	800b58c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b570:	4413      	add	r3, r2
 800b572:	4619      	mov	r1, r3
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f7ff fd86 	bl	800b086 <ld_clust>
 800b57a:	4602      	mov	r2, r0
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b580:	e7c0      	b.n	800b504 <follow_path+0x50>
			if (res != FR_OK) break;
 800b582:	bf00      	nop
 800b584:	e002      	b.n	800b58c <follow_path+0xd8>
				break;
 800b586:	bf00      	nop
 800b588:	e000      	b.n	800b58c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b58a:	bf00      	nop
			}
		}
	}

	return res;
 800b58c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b596:	b480      	push	{r7}
 800b598:	b087      	sub	sp, #28
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b59e:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d031      	beq.n	800b610 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	617b      	str	r3, [r7, #20]
 800b5b2:	e002      	b.n	800b5ba <get_ldnumber+0x24>
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	617b      	str	r3, [r7, #20]
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b20      	cmp	r3, #32
 800b5c0:	d903      	bls.n	800b5ca <get_ldnumber+0x34>
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	2b3a      	cmp	r3, #58	; 0x3a
 800b5c8:	d1f4      	bne.n	800b5b4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	2b3a      	cmp	r3, #58	; 0x3a
 800b5d0:	d11c      	bne.n	800b60c <get_ldnumber+0x76>
			tp = *path;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	60fa      	str	r2, [r7, #12]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	3b30      	subs	r3, #48	; 0x30
 800b5e2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2b09      	cmp	r3, #9
 800b5e8:	d80e      	bhi.n	800b608 <get_ldnumber+0x72>
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	429a      	cmp	r2, r3
 800b5f0:	d10a      	bne.n	800b608 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d107      	bne.n	800b608 <get_ldnumber+0x72>
					vol = (int)i;
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	3301      	adds	r3, #1
 800b600:	617b      	str	r3, [r7, #20]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	697a      	ldr	r2, [r7, #20]
 800b606:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	e002      	b.n	800b612 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b60c:	2300      	movs	r3, #0
 800b60e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b610:	693b      	ldr	r3, [r7, #16]
}
 800b612:	4618      	mov	r0, r3
 800b614:	371c      	adds	r7, #28
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
	...

0800b620 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	70da      	strb	r2, [r3, #3]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f04f 32ff 	mov.w	r2, #4294967295
 800b636:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7ff f81c 	bl	800a678 <move_window>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <check_fs+0x2a>
 800b646:	2304      	movs	r3, #4
 800b648:	e038      	b.n	800b6bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3330      	adds	r3, #48	; 0x30
 800b64e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fd60 	bl	800a118 <ld_word>
 800b658:	4603      	mov	r3, r0
 800b65a:	461a      	mov	r2, r3
 800b65c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b660:	429a      	cmp	r2, r3
 800b662:	d001      	beq.n	800b668 <check_fs+0x48>
 800b664:	2303      	movs	r3, #3
 800b666:	e029      	b.n	800b6bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b66e:	2be9      	cmp	r3, #233	; 0xe9
 800b670:	d009      	beq.n	800b686 <check_fs+0x66>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b678:	2beb      	cmp	r3, #235	; 0xeb
 800b67a:	d11e      	bne.n	800b6ba <check_fs+0x9a>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b682:	2b90      	cmp	r3, #144	; 0x90
 800b684:	d119      	bne.n	800b6ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3330      	adds	r3, #48	; 0x30
 800b68a:	3336      	adds	r3, #54	; 0x36
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fe fd5b 	bl	800a148 <ld_dword>
 800b692:	4603      	mov	r3, r0
 800b694:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b698:	4a0a      	ldr	r2, [pc, #40]	; (800b6c4 <check_fs+0xa4>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d101      	bne.n	800b6a2 <check_fs+0x82>
 800b69e:	2300      	movs	r3, #0
 800b6a0:	e00c      	b.n	800b6bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	3330      	adds	r3, #48	; 0x30
 800b6a6:	3352      	adds	r3, #82	; 0x52
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fe fd4d 	bl	800a148 <ld_dword>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	4a05      	ldr	r2, [pc, #20]	; (800b6c8 <check_fs+0xa8>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d101      	bne.n	800b6ba <check_fs+0x9a>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e000      	b.n	800b6bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b6ba:	2302      	movs	r3, #2
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	00544146 	.word	0x00544146
 800b6c8:	33544146 	.word	0x33544146

0800b6cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b096      	sub	sp, #88	; 0x58
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	60f8      	str	r0, [r7, #12]
 800b6d4:	60b9      	str	r1, [r7, #8]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f7ff ff58 	bl	800b596 <get_ldnumber>
 800b6e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	da01      	bge.n	800b6f2 <find_volume+0x26>
 800b6ee:	230b      	movs	r3, #11
 800b6f0:	e22e      	b.n	800bb50 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b6f2:	4aa8      	ldr	r2, [pc, #672]	; (800b994 <find_volume+0x2c8>)
 800b6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <find_volume+0x3a>
 800b702:	230c      	movs	r3, #12
 800b704:	e224      	b.n	800bb50 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b70a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b70c:	79fb      	ldrb	r3, [r7, #7]
 800b70e:	f023 0301 	bic.w	r3, r3, #1
 800b712:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d01a      	beq.n	800b752 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	785b      	ldrb	r3, [r3, #1]
 800b720:	4618      	mov	r0, r3
 800b722:	f7fe fc5b 	bl	8009fdc <disk_status>
 800b726:	4603      	mov	r3, r0
 800b728:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b72c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10c      	bne.n	800b752 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b738:	79fb      	ldrb	r3, [r7, #7]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d007      	beq.n	800b74e <find_volume+0x82>
 800b73e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b742:	f003 0304 	and.w	r3, r3, #4
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b74a:	230a      	movs	r3, #10
 800b74c:	e200      	b.n	800bb50 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b74e:	2300      	movs	r3, #0
 800b750:	e1fe      	b.n	800bb50 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b754:	2200      	movs	r2, #0
 800b756:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	785b      	ldrb	r3, [r3, #1]
 800b764:	4618      	mov	r0, r3
 800b766:	f7fe fc53 	bl	800a010 <disk_initialize>
 800b76a:	4603      	mov	r3, r0
 800b76c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b774:	f003 0301 	and.w	r3, r3, #1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b77c:	2303      	movs	r3, #3
 800b77e:	e1e7      	b.n	800bb50 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d007      	beq.n	800b796 <find_volume+0xca>
 800b786:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b78a:	f003 0304 	and.w	r3, r3, #4
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b792:	230a      	movs	r3, #10
 800b794:	e1dc      	b.n	800bb50 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b796:	2300      	movs	r3, #0
 800b798:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b79a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b79c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b79e:	f7ff ff3f 	bl	800b620 <check_fs>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b7a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7ac:	2b02      	cmp	r3, #2
 800b7ae:	d14b      	bne.n	800b848 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	643b      	str	r3, [r7, #64]	; 0x40
 800b7b4:	e01f      	b.n	800b7f6 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7be:	011b      	lsls	r3, r3, #4
 800b7c0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b7c4:	4413      	add	r3, r2
 800b7c6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ca:	3304      	adds	r3, #4
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d006      	beq.n	800b7e0 <find_volume+0x114>
 800b7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fcb6 	bl	800a148 <ld_dword>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	e000      	b.n	800b7e2 <find_volume+0x116>
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b7ea:	440b      	add	r3, r1
 800b7ec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	643b      	str	r3, [r7, #64]	; 0x40
 800b7f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f8:	2b03      	cmp	r3, #3
 800b7fa:	d9dc      	bls.n	800b7b6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <find_volume+0x140>
 800b806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b808:	3b01      	subs	r3, #1
 800b80a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b80c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b814:	4413      	add	r3, r2
 800b816:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b81a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b81c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d005      	beq.n	800b82e <find_volume+0x162>
 800b822:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b824:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b826:	f7ff fefb 	bl	800b620 <check_fs>
 800b82a:	4603      	mov	r3, r0
 800b82c:	e000      	b.n	800b830 <find_volume+0x164>
 800b82e:	2303      	movs	r3, #3
 800b830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b834:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d905      	bls.n	800b848 <find_volume+0x17c>
 800b83c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83e:	3301      	adds	r3, #1
 800b840:	643b      	str	r3, [r7, #64]	; 0x40
 800b842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b844:	2b03      	cmp	r3, #3
 800b846:	d9e1      	bls.n	800b80c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b848:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b84c:	2b04      	cmp	r3, #4
 800b84e:	d101      	bne.n	800b854 <find_volume+0x188>
 800b850:	2301      	movs	r3, #1
 800b852:	e17d      	b.n	800bb50 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d901      	bls.n	800b860 <find_volume+0x194>
 800b85c:	230d      	movs	r3, #13
 800b85e:	e177      	b.n	800bb50 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b862:	3330      	adds	r3, #48	; 0x30
 800b864:	330b      	adds	r3, #11
 800b866:	4618      	mov	r0, r3
 800b868:	f7fe fc56 	bl	800a118 <ld_word>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b872:	d001      	beq.n	800b878 <find_volume+0x1ac>
 800b874:	230d      	movs	r3, #13
 800b876:	e16b      	b.n	800bb50 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b87a:	3330      	adds	r3, #48	; 0x30
 800b87c:	3316      	adds	r3, #22
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fc4a 	bl	800a118 <ld_word>
 800b884:	4603      	mov	r3, r0
 800b886:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d106      	bne.n	800b89c <find_volume+0x1d0>
 800b88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b890:	3330      	adds	r3, #48	; 0x30
 800b892:	3324      	adds	r3, #36	; 0x24
 800b894:	4618      	mov	r0, r3
 800b896:	f7fe fc57 	bl	800a148 <ld_dword>
 800b89a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8a0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	789b      	ldrb	r3, [r3, #2]
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d005      	beq.n	800b8c0 <find_volume+0x1f4>
 800b8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8b6:	789b      	ldrb	r3, [r3, #2]
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	d001      	beq.n	800b8c0 <find_volume+0x1f4>
 800b8bc:	230d      	movs	r3, #13
 800b8be:	e147      	b.n	800bb50 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	789b      	ldrb	r3, [r3, #2]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c8:	fb02 f303 	mul.w	r3, r2, r3
 800b8cc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8dc:	895b      	ldrh	r3, [r3, #10]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d008      	beq.n	800b8f4 <find_volume+0x228>
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	895b      	ldrh	r3, [r3, #10]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ea:	895b      	ldrh	r3, [r3, #10]
 800b8ec:	3b01      	subs	r3, #1
 800b8ee:	4013      	ands	r3, r2
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d001      	beq.n	800b8f8 <find_volume+0x22c>
 800b8f4:	230d      	movs	r3, #13
 800b8f6:	e12b      	b.n	800bb50 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8fa:	3330      	adds	r3, #48	; 0x30
 800b8fc:	3311      	adds	r3, #17
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe fc0a 	bl	800a118 <ld_word>
 800b904:	4603      	mov	r3, r0
 800b906:	461a      	mov	r2, r3
 800b908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90e:	891b      	ldrh	r3, [r3, #8]
 800b910:	f003 030f 	and.w	r3, r3, #15
 800b914:	b29b      	uxth	r3, r3
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <find_volume+0x252>
 800b91a:	230d      	movs	r3, #13
 800b91c:	e118      	b.n	800bb50 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b920:	3330      	adds	r3, #48	; 0x30
 800b922:	3313      	adds	r3, #19
 800b924:	4618      	mov	r0, r3
 800b926:	f7fe fbf7 	bl	800a118 <ld_word>
 800b92a:	4603      	mov	r3, r0
 800b92c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b92e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b930:	2b00      	cmp	r3, #0
 800b932:	d106      	bne.n	800b942 <find_volume+0x276>
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	3330      	adds	r3, #48	; 0x30
 800b938:	3320      	adds	r3, #32
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe fc04 	bl	800a148 <ld_dword>
 800b940:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b944:	3330      	adds	r3, #48	; 0x30
 800b946:	330e      	adds	r3, #14
 800b948:	4618      	mov	r0, r3
 800b94a:	f7fe fbe5 	bl	800a118 <ld_word>
 800b94e:	4603      	mov	r3, r0
 800b950:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b952:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <find_volume+0x290>
 800b958:	230d      	movs	r3, #13
 800b95a:	e0f9      	b.n	800bb50 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b95c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b960:	4413      	add	r3, r2
 800b962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b964:	8912      	ldrh	r2, [r2, #8]
 800b966:	0912      	lsrs	r2, r2, #4
 800b968:	b292      	uxth	r2, r2
 800b96a:	4413      	add	r3, r2
 800b96c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b96e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b972:	429a      	cmp	r2, r3
 800b974:	d201      	bcs.n	800b97a <find_volume+0x2ae>
 800b976:	230d      	movs	r3, #13
 800b978:	e0ea      	b.n	800bb50 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b97a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b982:	8952      	ldrh	r2, [r2, #10]
 800b984:	fbb3 f3f2 	udiv	r3, r3, r2
 800b988:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d103      	bne.n	800b998 <find_volume+0x2cc>
 800b990:	230d      	movs	r3, #13
 800b992:	e0dd      	b.n	800bb50 <find_volume+0x484>
 800b994:	200004a4 	.word	0x200004a4
		fmt = FS_FAT32;
 800b998:	2303      	movs	r3, #3
 800b99a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d802      	bhi.n	800b9ae <find_volume+0x2e2>
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d802      	bhi.n	800b9be <find_volume+0x2f2>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	1c9a      	adds	r2, r3, #2
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9ca:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b9cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d0:	441a      	add	r2, r3
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d4:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b9d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9da:	441a      	add	r2, r3
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b9e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b9e4:	2b03      	cmp	r3, #3
 800b9e6:	d11e      	bne.n	800ba26 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ea:	3330      	adds	r3, #48	; 0x30
 800b9ec:	332a      	adds	r3, #42	; 0x2a
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe fb92 	bl	800a118 <ld_word>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <find_volume+0x332>
 800b9fa:	230d      	movs	r3, #13
 800b9fc:	e0a8      	b.n	800bb50 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba00:	891b      	ldrh	r3, [r3, #8]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <find_volume+0x33e>
 800ba06:	230d      	movs	r3, #13
 800ba08:	e0a2      	b.n	800bb50 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ba0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0c:	3330      	adds	r3, #48	; 0x30
 800ba0e:	332c      	adds	r3, #44	; 0x2c
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fb99 	bl	800a148 <ld_dword>
 800ba16:	4602      	mov	r2, r0
 800ba18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	695b      	ldr	r3, [r3, #20]
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	647b      	str	r3, [r7, #68]	; 0x44
 800ba24:	e01f      	b.n	800ba66 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ba26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba28:	891b      	ldrh	r3, [r3, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d101      	bne.n	800ba32 <find_volume+0x366>
 800ba2e:	230d      	movs	r3, #13
 800ba30:	e08e      	b.n	800bb50 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba34:	6a1a      	ldr	r2, [r3, #32]
 800ba36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba38:	441a      	add	r2, r3
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ba3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d103      	bne.n	800ba4e <find_volume+0x382>
 800ba46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba48:	695b      	ldr	r3, [r3, #20]
 800ba4a:	005b      	lsls	r3, r3, #1
 800ba4c:	e00a      	b.n	800ba64 <find_volume+0x398>
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	695a      	ldr	r2, [r3, #20]
 800ba52:	4613      	mov	r3, r2
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4413      	add	r3, r2
 800ba58:	085a      	lsrs	r2, r3, #1
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ba64:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ba66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba68:	699a      	ldr	r2, [r3, #24]
 800ba6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ba70:	0a5b      	lsrs	r3, r3, #9
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d201      	bcs.n	800ba7a <find_volume+0x3ae>
 800ba76:	230d      	movs	r3, #13
 800ba78:	e06a      	b.n	800bb50 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba80:	611a      	str	r2, [r3, #16]
 800ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba84:	691a      	ldr	r2, [r3, #16]
 800ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba88:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800ba8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba8c:	2280      	movs	r2, #128	; 0x80
 800ba8e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ba90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d149      	bne.n	800bb2c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	3330      	adds	r3, #48	; 0x30
 800ba9c:	3330      	adds	r3, #48	; 0x30
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7fe fb3a 	bl	800a118 <ld_word>
 800baa4:	4603      	mov	r3, r0
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d140      	bne.n	800bb2c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800baaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baac:	3301      	adds	r3, #1
 800baae:	4619      	mov	r1, r3
 800bab0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bab2:	f7fe fde1 	bl	800a678 <move_window>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d137      	bne.n	800bb2c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800babc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babe:	2200      	movs	r2, #0
 800bac0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	3330      	adds	r3, #48	; 0x30
 800bac6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe fb24 	bl	800a118 <ld_word>
 800bad0:	4603      	mov	r3, r0
 800bad2:	461a      	mov	r2, r3
 800bad4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bad8:	429a      	cmp	r2, r3
 800bada:	d127      	bne.n	800bb2c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800badc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bade:	3330      	adds	r3, #48	; 0x30
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fe fb31 	bl	800a148 <ld_dword>
 800bae6:	4603      	mov	r3, r0
 800bae8:	4a1b      	ldr	r2, [pc, #108]	; (800bb58 <find_volume+0x48c>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d11e      	bne.n	800bb2c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800baee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf0:	3330      	adds	r3, #48	; 0x30
 800baf2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe fb26 	bl	800a148 <ld_dword>
 800bafc:	4603      	mov	r3, r0
 800bafe:	4a17      	ldr	r2, [pc, #92]	; (800bb5c <find_volume+0x490>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d113      	bne.n	800bb2c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb06:	3330      	adds	r3, #48	; 0x30
 800bb08:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f7fe fb1b 	bl	800a148 <ld_dword>
 800bb12:	4602      	mov	r2, r0
 800bb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb16:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	3330      	adds	r3, #48	; 0x30
 800bb1c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7fe fb11 	bl	800a148 <ld_dword>
 800bb26:	4602      	mov	r2, r0
 800bb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bb32:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <find_volume+0x494>)
 800bb36:	881b      	ldrh	r3, [r3, #0]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	4b08      	ldr	r3, [pc, #32]	; (800bb60 <find_volume+0x494>)
 800bb3e:	801a      	strh	r2, [r3, #0]
 800bb40:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <find_volume+0x494>)
 800bb42:	881a      	ldrh	r2, [r3, #0]
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bb48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb4a:	f7fe fd2d 	bl	800a5a8 <clear_lock>
#endif
	return FR_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3758      	adds	r7, #88	; 0x58
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	41615252 	.word	0x41615252
 800bb5c:	61417272 	.word	0x61417272
 800bb60:	200004a8 	.word	0x200004a8

0800bb64 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bb6e:	2309      	movs	r3, #9
 800bb70:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d01c      	beq.n	800bbb2 <validate+0x4e>
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d018      	beq.n	800bbb2 <validate+0x4e>
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d013      	beq.n	800bbb2 <validate+0x4e>
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	889a      	ldrh	r2, [r3, #4]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	88db      	ldrh	r3, [r3, #6]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d10c      	bne.n	800bbb2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	785b      	ldrb	r3, [r3, #1]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fa1c 	bl	8009fdc <disk_status>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f003 0301 	and.w	r3, r3, #1
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d101      	bne.n	800bbb2 <validate+0x4e>
			res = FR_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d102      	bne.n	800bbbe <validate+0x5a>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	e000      	b.n	800bbc0 <validate+0x5c>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	683a      	ldr	r2, [r7, #0]
 800bbc2:	6013      	str	r3, [r2, #0]
	return res;
 800bbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
	...

0800bbd0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b088      	sub	sp, #32
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bbe2:	f107 0310 	add.w	r3, r7, #16
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7ff fcd5 	bl	800b596 <get_ldnumber>
 800bbec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	da01      	bge.n	800bbf8 <f_mount+0x28>
 800bbf4:	230b      	movs	r3, #11
 800bbf6:	e02b      	b.n	800bc50 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bbf8:	4a17      	ldr	r2, [pc, #92]	; (800bc58 <f_mount+0x88>)
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc00:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d005      	beq.n	800bc14 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bc08:	69b8      	ldr	r0, [r7, #24]
 800bc0a:	f7fe fccd 	bl	800a5a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	2200      	movs	r2, #0
 800bc12:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bc20:	68fa      	ldr	r2, [r7, #12]
 800bc22:	490d      	ldr	r1, [pc, #52]	; (800bc58 <f_mount+0x88>)
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d002      	beq.n	800bc36 <f_mount+0x66>
 800bc30:	79fb      	ldrb	r3, [r7, #7]
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d001      	beq.n	800bc3a <f_mount+0x6a>
 800bc36:	2300      	movs	r3, #0
 800bc38:	e00a      	b.n	800bc50 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bc3a:	f107 010c 	add.w	r1, r7, #12
 800bc3e:	f107 0308 	add.w	r3, r7, #8
 800bc42:	2200      	movs	r2, #0
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7ff fd41 	bl	800b6cc <find_volume>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bc4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3720      	adds	r7, #32
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}
 800bc58:	200004a4 	.word	0x200004a4

0800bc5c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b098      	sub	sp, #96	; 0x60
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	60f8      	str	r0, [r7, #12]
 800bc64:	60b9      	str	r1, [r7, #8]
 800bc66:	4613      	mov	r3, r2
 800bc68:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <f_open+0x18>
 800bc70:	2309      	movs	r3, #9
 800bc72:	e1ad      	b.n	800bfd0 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bc74:	79fb      	ldrb	r3, [r7, #7]
 800bc76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc7a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bc7c:	79fa      	ldrb	r2, [r7, #7]
 800bc7e:	f107 0110 	add.w	r1, r7, #16
 800bc82:	f107 0308 	add.w	r3, r7, #8
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7ff fd20 	bl	800b6cc <find_volume>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bc92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f040 8191 	bne.w	800bfbe <f_open+0x362>
		dj.obj.fs = fs;
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	f107 0314 	add.w	r3, r7, #20
 800bca6:	4611      	mov	r1, r2
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f7ff fc03 	bl	800b4b4 <follow_path>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bcb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d11a      	bne.n	800bcf2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bcbc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bcc0:	b25b      	sxtb	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	da03      	bge.n	800bcce <f_open+0x72>
				res = FR_INVALID_NAME;
 800bcc6:	2306      	movs	r3, #6
 800bcc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bccc:	e011      	b.n	800bcf2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bcce:	79fb      	ldrb	r3, [r7, #7]
 800bcd0:	f023 0301 	bic.w	r3, r3, #1
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bf14      	ite	ne
 800bcd8:	2301      	movne	r3, #1
 800bcda:	2300      	moveq	r3, #0
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	461a      	mov	r2, r3
 800bce0:	f107 0314 	add.w	r3, r7, #20
 800bce4:	4611      	mov	r1, r2
 800bce6:	4618      	mov	r0, r3
 800bce8:	f7fe fb16 	bl	800a318 <chk_lock>
 800bcec:	4603      	mov	r3, r0
 800bcee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bcf2:	79fb      	ldrb	r3, [r7, #7]
 800bcf4:	f003 031c 	and.w	r3, r3, #28
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d07f      	beq.n	800bdfc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bcfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d017      	beq.n	800bd34 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bd04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd08:	2b04      	cmp	r3, #4
 800bd0a:	d10e      	bne.n	800bd2a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bd0c:	f7fe fb60 	bl	800a3d0 <enq_lock>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d006      	beq.n	800bd24 <f_open+0xc8>
 800bd16:	f107 0314 	add.w	r3, r7, #20
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff faa4 	bl	800b268 <dir_register>
 800bd20:	4603      	mov	r3, r0
 800bd22:	e000      	b.n	800bd26 <f_open+0xca>
 800bd24:	2312      	movs	r3, #18
 800bd26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bd2a:	79fb      	ldrb	r3, [r7, #7]
 800bd2c:	f043 0308 	orr.w	r3, r3, #8
 800bd30:	71fb      	strb	r3, [r7, #7]
 800bd32:	e010      	b.n	800bd56 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bd34:	7ebb      	ldrb	r3, [r7, #26]
 800bd36:	f003 0311 	and.w	r3, r3, #17
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <f_open+0xea>
					res = FR_DENIED;
 800bd3e:	2307      	movs	r3, #7
 800bd40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd44:	e007      	b.n	800bd56 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bd46:	79fb      	ldrb	r3, [r7, #7]
 800bd48:	f003 0304 	and.w	r3, r3, #4
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d002      	beq.n	800bd56 <f_open+0xfa>
 800bd50:	2308      	movs	r3, #8
 800bd52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bd56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d168      	bne.n	800be30 <f_open+0x1d4>
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	f003 0308 	and.w	r3, r3, #8
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d063      	beq.n	800be30 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bd68:	f7fd fbf8 	bl	800955c <get_fattime>
 800bd6c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bd6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd70:	330e      	adds	r3, #14
 800bd72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7fe fa25 	bl	800a1c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bd7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7c:	3316      	adds	r3, #22
 800bd7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7fe fa1f 	bl	800a1c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd88:	330b      	adds	r3, #11
 800bd8a:	2220      	movs	r2, #32
 800bd8c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd92:	4611      	mov	r1, r2
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff f976 	bl	800b086 <ld_clust>
 800bd9a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bda0:	2200      	movs	r2, #0
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7ff f98e 	bl	800b0c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdaa:	331c      	adds	r3, #28
 800bdac:	2100      	movs	r1, #0
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7fe fa08 	bl	800a1c4 <st_dword>
					fs->wflag = 1;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bdba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d037      	beq.n	800be30 <f_open+0x1d4>
						dw = fs->winsect;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bdc6:	f107 0314 	add.w	r3, r7, #20
 800bdca:	2200      	movs	r2, #0
 800bdcc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe fea1 	bl	800ab16 <remove_chain>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800bdda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d126      	bne.n	800be30 <f_open+0x1d4>
							res = move_window(fs, dw);
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe fc46 	bl	800a678 <move_window>
 800bdec:	4603      	mov	r3, r0
 800bdee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdf6:	3a01      	subs	r2, #1
 800bdf8:	60da      	str	r2, [r3, #12]
 800bdfa:	e019      	b.n	800be30 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bdfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be00:	2b00      	cmp	r3, #0
 800be02:	d115      	bne.n	800be30 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800be04:	7ebb      	ldrb	r3, [r7, #26]
 800be06:	f003 0310 	and.w	r3, r3, #16
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <f_open+0x1ba>
					res = FR_NO_FILE;
 800be0e:	2304      	movs	r3, #4
 800be10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be14:	e00c      	b.n	800be30 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800be16:	79fb      	ldrb	r3, [r7, #7]
 800be18:	f003 0302 	and.w	r3, r3, #2
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d007      	beq.n	800be30 <f_open+0x1d4>
 800be20:	7ebb      	ldrb	r3, [r7, #26]
 800be22:	f003 0301 	and.w	r3, r3, #1
 800be26:	2b00      	cmp	r3, #0
 800be28:	d002      	beq.n	800be30 <f_open+0x1d4>
						res = FR_DENIED;
 800be2a:	2307      	movs	r3, #7
 800be2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800be30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be34:	2b00      	cmp	r3, #0
 800be36:	d128      	bne.n	800be8a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800be38:	79fb      	ldrb	r3, [r7, #7]
 800be3a:	f003 0308 	and.w	r3, r3, #8
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800be42:	79fb      	ldrb	r3, [r7, #7]
 800be44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be48:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800be52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be58:	79fb      	ldrb	r3, [r7, #7]
 800be5a:	f023 0301 	bic.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	bf14      	ite	ne
 800be62:	2301      	movne	r3, #1
 800be64:	2300      	moveq	r3, #0
 800be66:	b2db      	uxtb	r3, r3
 800be68:	461a      	mov	r2, r3
 800be6a:	f107 0314 	add.w	r3, r7, #20
 800be6e:	4611      	mov	r1, r2
 800be70:	4618      	mov	r0, r3
 800be72:	f7fe facf 	bl	800a414 <inc_lock>
 800be76:	4602      	mov	r2, r0
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d102      	bne.n	800be8a <f_open+0x22e>
 800be84:	2302      	movs	r3, #2
 800be86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800be8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f040 8095 	bne.w	800bfbe <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be98:	4611      	mov	r1, r2
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff f8f3 	bl	800b086 <ld_clust>
 800bea0:	4602      	mov	r2, r0
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea8:	331c      	adds	r3, #28
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fe f94c 	bl	800a148 <ld_dword>
 800beb0:	4602      	mov	r2, r0
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	88da      	ldrh	r2, [r3, #6]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	79fa      	ldrb	r2, [r7, #7]
 800bece:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2200      	movs	r2, #0
 800beda:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	3330      	adds	r3, #48	; 0x30
 800bee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beea:	2100      	movs	r1, #0
 800beec:	4618      	mov	r0, r3
 800beee:	f7fe f9b6 	bl	800a25e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bef2:	79fb      	ldrb	r3, [r7, #7]
 800bef4:	f003 0320 	and.w	r3, r3, #32
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d060      	beq.n	800bfbe <f_open+0x362>
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d05c      	beq.n	800bfbe <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	68da      	ldr	r2, [r3, #12]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	895b      	ldrh	r3, [r3, #10]
 800bf10:	025b      	lsls	r3, r3, #9
 800bf12:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	657b      	str	r3, [r7, #84]	; 0x54
 800bf20:	e016      	b.n	800bf50 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7fe fc61 	bl	800a7ee <get_fat>
 800bf2c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bf2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d802      	bhi.n	800bf3a <f_open+0x2de>
 800bf34:	2302      	movs	r3, #2
 800bf36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bf3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf40:	d102      	bne.n	800bf48 <f_open+0x2ec>
 800bf42:	2301      	movs	r3, #1
 800bf44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	657b      	str	r3, [r7, #84]	; 0x54
 800bf50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d103      	bne.n	800bf60 <f_open+0x304>
 800bf58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d8e0      	bhi.n	800bf22 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf64:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bf66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d127      	bne.n	800bfbe <f_open+0x362>
 800bf6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d022      	beq.n	800bfbe <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fe fc17 	bl	800a7b0 <clust2sect>
 800bf82:	6478      	str	r0, [r7, #68]	; 0x44
 800bf84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d103      	bne.n	800bf92 <f_open+0x336>
						res = FR_INT_ERR;
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bf90:	e015      	b.n	800bfbe <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bf92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf94:	0a5a      	lsrs	r2, r3, #9
 800bf96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf98:	441a      	add	r2, r3
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	7858      	ldrb	r0, [r3, #1]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6a1a      	ldr	r2, [r3, #32]
 800bfac:	2301      	movs	r3, #1
 800bfae:	f7fe f855 	bl	800a05c <disk_read>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <f_open+0x362>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bfbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <f_open+0x370>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bfcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3760      	adds	r7, #96	; 0x60
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08c      	sub	sp, #48	; 0x30
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
 800bfe4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f107 0210 	add.w	r2, r7, #16
 800bff6:	4611      	mov	r1, r2
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7ff fdb3 	bl	800bb64 <validate>
 800bffe:	4603      	mov	r3, r0
 800c000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c004:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d107      	bne.n	800c01c <f_write+0x44>
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	7d5b      	ldrb	r3, [r3, #21]
 800c010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <f_write+0x4a>
 800c01c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c020:	e14b      	b.n	800c2ba <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	7d1b      	ldrb	r3, [r3, #20]
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d101      	bne.n	800c032 <f_write+0x5a>
 800c02e:	2307      	movs	r3, #7
 800c030:	e143      	b.n	800c2ba <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	699a      	ldr	r2, [r3, #24]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	441a      	add	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	699b      	ldr	r3, [r3, #24]
 800c03e:	429a      	cmp	r2, r3
 800c040:	f080 812d 	bcs.w	800c29e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	699b      	ldr	r3, [r3, #24]
 800c048:	43db      	mvns	r3, r3
 800c04a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c04c:	e127      	b.n	800c29e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c056:	2b00      	cmp	r3, #0
 800c058:	f040 80e3 	bne.w	800c222 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	699b      	ldr	r3, [r3, #24]
 800c060:	0a5b      	lsrs	r3, r3, #9
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	8952      	ldrh	r2, [r2, #10]
 800c066:	3a01      	subs	r2, #1
 800c068:	4013      	ands	r3, r2
 800c06a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c06c:	69bb      	ldr	r3, [r7, #24]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d143      	bne.n	800c0fa <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	699b      	ldr	r3, [r3, #24]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10c      	bne.n	800c094 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	2b00      	cmp	r3, #0
 800c084:	d11a      	bne.n	800c0bc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2100      	movs	r1, #0
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fe fda8 	bl	800abe0 <create_chain>
 800c090:	62b8      	str	r0, [r7, #40]	; 0x28
 800c092:	e013      	b.n	800c0bc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d007      	beq.n	800c0ac <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f7fe fe34 	bl	800ad10 <clmt_clust>
 800c0a8:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0aa:	e007      	b.n	800c0bc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	4610      	mov	r0, r2
 800c0b6:	f7fe fd93 	bl	800abe0 <create_chain>
 800c0ba:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f000 80f2 	beq.w	800c2a8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d104      	bne.n	800c0d4 <f_write+0xfc>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	755a      	strb	r2, [r3, #21]
 800c0d0:	2302      	movs	r3, #2
 800c0d2:	e0f2      	b.n	800c2ba <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0da:	d104      	bne.n	800c0e6 <f_write+0x10e>
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	755a      	strb	r2, [r3, #21]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	e0e9      	b.n	800c2ba <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0ea:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d102      	bne.n	800c0fa <f_write+0x122>
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0f8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	7d1b      	ldrb	r3, [r3, #20]
 800c0fe:	b25b      	sxtb	r3, r3
 800c100:	2b00      	cmp	r3, #0
 800c102:	da18      	bge.n	800c136 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	7858      	ldrb	r0, [r3, #1]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	6a1a      	ldr	r2, [r3, #32]
 800c112:	2301      	movs	r3, #1
 800c114:	f7fd ffc2 	bl	800a09c <disk_write>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d004      	beq.n	800c128 <f_write+0x150>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2201      	movs	r2, #1
 800c122:	755a      	strb	r2, [r3, #21]
 800c124:	2301      	movs	r3, #1
 800c126:	e0c8      	b.n	800c2ba <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	7d1b      	ldrb	r3, [r3, #20]
 800c12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c130:	b2da      	uxtb	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	69db      	ldr	r3, [r3, #28]
 800c13c:	4619      	mov	r1, r3
 800c13e:	4610      	mov	r0, r2
 800c140:	f7fe fb36 	bl	800a7b0 <clust2sect>
 800c144:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d104      	bne.n	800c156 <f_write+0x17e>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2202      	movs	r2, #2
 800c150:	755a      	strb	r2, [r3, #21]
 800c152:	2302      	movs	r3, #2
 800c154:	e0b1      	b.n	800c2ba <f_write+0x2e2>
			sect += csect;
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	4413      	add	r3, r2
 800c15c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	0a5b      	lsrs	r3, r3, #9
 800c162:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d03c      	beq.n	800c1e4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c16a:	69ba      	ldr	r2, [r7, #24]
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	4413      	add	r3, r2
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	8952      	ldrh	r2, [r2, #10]
 800c174:	4293      	cmp	r3, r2
 800c176:	d905      	bls.n	800c184 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	895b      	ldrh	r3, [r3, #10]
 800c17c:	461a      	mov	r2, r3
 800c17e:	69bb      	ldr	r3, [r7, #24]
 800c180:	1ad3      	subs	r3, r2, r3
 800c182:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	7858      	ldrb	r0, [r3, #1]
 800c188:	6a3b      	ldr	r3, [r7, #32]
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	69f9      	ldr	r1, [r7, #28]
 800c18e:	f7fd ff85 	bl	800a09c <disk_write>
 800c192:	4603      	mov	r3, r0
 800c194:	2b00      	cmp	r3, #0
 800c196:	d004      	beq.n	800c1a2 <f_write+0x1ca>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2201      	movs	r2, #1
 800c19c:	755a      	strb	r2, [r3, #21]
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e08b      	b.n	800c2ba <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6a1a      	ldr	r2, [r3, #32]
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	6a3a      	ldr	r2, [r7, #32]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d915      	bls.n	800c1dc <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6a1a      	ldr	r2, [r3, #32]
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	1ad3      	subs	r3, r2, r3
 800c1be:	025b      	lsls	r3, r3, #9
 800c1c0:	69fa      	ldr	r2, [r7, #28]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	f7fe f827 	bl	800a21c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	7d1b      	ldrb	r3, [r3, #20]
 800c1d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	025b      	lsls	r3, r3, #9
 800c1e0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c1e2:	e03f      	b.n	800c264 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6a1b      	ldr	r3, [r3, #32]
 800c1e8:	697a      	ldr	r2, [r7, #20]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d016      	beq.n	800c21c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	699a      	ldr	r2, [r3, #24]
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d210      	bcs.n	800c21c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	7858      	ldrb	r0, [r3, #1]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c204:	2301      	movs	r3, #1
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	f7fd ff28 	bl	800a05c <disk_read>
 800c20c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2201      	movs	r2, #1
 800c216:	755a      	strb	r2, [r3, #21]
 800c218:	2301      	movs	r3, #1
 800c21a:	e04e      	b.n	800c2ba <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	697a      	ldr	r2, [r7, #20]
 800c220:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c22a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c22e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	429a      	cmp	r2, r3
 800c236:	d901      	bls.n	800c23c <f_write+0x264>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	699b      	ldr	r3, [r3, #24]
 800c246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c24a:	4413      	add	r3, r2
 800c24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c24e:	69f9      	ldr	r1, [r7, #28]
 800c250:	4618      	mov	r0, r3
 800c252:	f7fd ffe3 	bl	800a21c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	7d1b      	ldrb	r3, [r3, #20]
 800c25a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c264:	69fa      	ldr	r2, [r7, #28]
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	4413      	add	r3, r2
 800c26a:	61fb      	str	r3, [r7, #28]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	699a      	ldr	r2, [r3, #24]
 800c270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c272:	441a      	add	r2, r3
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	619a      	str	r2, [r3, #24]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	68da      	ldr	r2, [r3, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	699b      	ldr	r3, [r3, #24]
 800c280:	429a      	cmp	r2, r3
 800c282:	bf38      	it	cc
 800c284:	461a      	movcc	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	60da      	str	r2, [r3, #12]
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c290:	441a      	add	r2, r3
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	601a      	str	r2, [r3, #0]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f47f aed4 	bne.w	800c04e <f_write+0x76>
 800c2a6:	e000      	b.n	800c2aa <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c2a8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	7d1b      	ldrb	r3, [r3, #20]
 800c2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b2:	b2da      	uxtb	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3730      	adds	r7, #48	; 0x30
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b086      	sub	sp, #24
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f107 0208 	add.w	r2, r7, #8
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7ff fc46 	bl	800bb64 <validate>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c2dc:	7dfb      	ldrb	r3, [r7, #23]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d168      	bne.n	800c3b4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	7d1b      	ldrb	r3, [r3, #20]
 800c2e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d062      	beq.n	800c3b4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	7d1b      	ldrb	r3, [r3, #20]
 800c2f2:	b25b      	sxtb	r3, r3
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da15      	bge.n	800c324 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	7858      	ldrb	r0, [r3, #1]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6a1a      	ldr	r2, [r3, #32]
 800c306:	2301      	movs	r3, #1
 800c308:	f7fd fec8 	bl	800a09c <disk_write>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <f_sync+0x54>
 800c312:	2301      	movs	r3, #1
 800c314:	e04f      	b.n	800c3b6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	7d1b      	ldrb	r3, [r3, #20]
 800c31a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c324:	f7fd f91a 	bl	800955c <get_fattime>
 800c328:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c32a:	68ba      	ldr	r2, [r7, #8]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c330:	4619      	mov	r1, r3
 800c332:	4610      	mov	r0, r2
 800c334:	f7fe f9a0 	bl	800a678 <move_window>
 800c338:	4603      	mov	r3, r0
 800c33a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c33c:	7dfb      	ldrb	r3, [r7, #23]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d138      	bne.n	800c3b4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c346:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	330b      	adds	r3, #11
 800c34c:	781a      	ldrb	r2, [r3, #0]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	330b      	adds	r3, #11
 800c352:	f042 0220 	orr.w	r2, r2, #32
 800c356:	b2d2      	uxtb	r2, r2
 800c358:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6818      	ldr	r0, [r3, #0]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	461a      	mov	r2, r3
 800c364:	68f9      	ldr	r1, [r7, #12]
 800c366:	f7fe fead 	bl	800b0c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f103 021c 	add.w	r2, r3, #28
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	4619      	mov	r1, r3
 800c376:	4610      	mov	r0, r2
 800c378:	f7fd ff24 	bl	800a1c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	3316      	adds	r3, #22
 800c380:	6939      	ldr	r1, [r7, #16]
 800c382:	4618      	mov	r0, r3
 800c384:	f7fd ff1e 	bl	800a1c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3312      	adds	r3, #18
 800c38c:	2100      	movs	r1, #0
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fd fefd 	bl	800a18e <st_word>
					fs->wflag = 1;
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2201      	movs	r2, #1
 800c398:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fe f999 	bl	800a6d4 <sync_fs>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	7d1b      	ldrb	r3, [r3, #20]
 800c3aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f7ff ff7b 	bl	800c2c2 <f_sync>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c3d0:	7bfb      	ldrb	r3, [r7, #15]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d118      	bne.n	800c408 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f107 0208 	add.w	r2, r7, #8
 800c3dc:	4611      	mov	r1, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fbc0 	bl	800bb64 <validate>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10c      	bne.n	800c408 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	691b      	ldr	r3, [r3, #16]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fe f89c 	bl	800a530 <dec_lock>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c3fc:	7bfb      	ldrb	r3, [r7, #15]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d102      	bne.n	800c408 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c408:	7bfb      	ldrb	r3, [r7, #15]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b090      	sub	sp, #64	; 0x40
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f107 0208 	add.w	r2, r7, #8
 800c422:	4611      	mov	r1, r2
 800c424:	4618      	mov	r0, r3
 800c426:	f7ff fb9d 	bl	800bb64 <validate>
 800c42a:	4603      	mov	r3, r0
 800c42c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c430:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c434:	2b00      	cmp	r3, #0
 800c436:	d103      	bne.n	800c440 <f_lseek+0x2e>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	7d5b      	ldrb	r3, [r3, #21]
 800c43c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c440:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c444:	2b00      	cmp	r3, #0
 800c446:	d002      	beq.n	800c44e <f_lseek+0x3c>
 800c448:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c44c:	e1e6      	b.n	800c81c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 80d1 	beq.w	800c5fa <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45e:	d15a      	bne.n	800c516 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	1d1a      	adds	r2, r3, #4
 800c46a:	627a      	str	r2, [r7, #36]	; 0x24
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	2302      	movs	r3, #2
 800c472:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d03a      	beq.n	800c4f6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c482:	613b      	str	r3, [r7, #16]
 800c484:	2300      	movs	r3, #0
 800c486:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48a:	3302      	adds	r3, #2
 800c48c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	60fb      	str	r3, [r7, #12]
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	3301      	adds	r3, #1
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fe f9a6 	bl	800a7ee <get_fat>
 800c4a2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d804      	bhi.n	800c4b4 <f_lseek+0xa2>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	755a      	strb	r2, [r3, #21]
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	e1b3      	b.n	800c81c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ba:	d104      	bne.n	800c4c6 <f_lseek+0xb4>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	755a      	strb	r2, [r3, #21]
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e1aa      	b.n	800c81c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d0de      	beq.n	800c48e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c4d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d809      	bhi.n	800c4ec <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	1d1a      	adds	r2, r3, #4
 800c4dc:	627a      	str	r2, [r7, #36]	; 0x24
 800c4de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	1d1a      	adds	r2, r3, #4
 800c4e6:	627a      	str	r2, [r7, #36]	; 0x24
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d3c4      	bcc.n	800c480 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4fc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c4fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	429a      	cmp	r2, r3
 800c504:	d803      	bhi.n	800c50e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c508:	2200      	movs	r2, #0
 800c50a:	601a      	str	r2, [r3, #0]
 800c50c:	e184      	b.n	800c818 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c50e:	2311      	movs	r3, #17
 800c510:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c514:	e180      	b.n	800c818 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	683a      	ldr	r2, [r7, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d902      	bls.n	800c526 <f_lseek+0x114>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	68db      	ldr	r3, [r3, #12]
 800c524:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	683a      	ldr	r2, [r7, #0]
 800c52a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 8172 	beq.w	800c818 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	3b01      	subs	r3, #1
 800c538:	4619      	mov	r1, r3
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f7fe fbe8 	bl	800ad10 <clmt_clust>
 800c540:	4602      	mov	r2, r0
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	69db      	ldr	r3, [r3, #28]
 800c54c:	4619      	mov	r1, r3
 800c54e:	4610      	mov	r0, r2
 800c550:	f7fe f92e 	bl	800a7b0 <clust2sect>
 800c554:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d104      	bne.n	800c566 <f_lseek+0x154>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2202      	movs	r2, #2
 800c560:	755a      	strb	r2, [r3, #21]
 800c562:	2302      	movs	r3, #2
 800c564:	e15a      	b.n	800c81c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	3b01      	subs	r3, #1
 800c56a:	0a5b      	lsrs	r3, r3, #9
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	8952      	ldrh	r2, [r2, #10]
 800c570:	3a01      	subs	r2, #1
 800c572:	4013      	ands	r3, r2
 800c574:	69ba      	ldr	r2, [r7, #24]
 800c576:	4413      	add	r3, r2
 800c578:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 8148 	beq.w	800c818 <f_lseek+0x406>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a1b      	ldr	r3, [r3, #32]
 800c58c:	69ba      	ldr	r2, [r7, #24]
 800c58e:	429a      	cmp	r2, r3
 800c590:	f000 8142 	beq.w	800c818 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	7d1b      	ldrb	r3, [r3, #20]
 800c598:	b25b      	sxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	da18      	bge.n	800c5d0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	7858      	ldrb	r0, [r3, #1]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6a1a      	ldr	r2, [r3, #32]
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	f7fd fd75 	bl	800a09c <disk_write>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d004      	beq.n	800c5c2 <f_lseek+0x1b0>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	755a      	strb	r2, [r3, #21]
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e12c      	b.n	800c81c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	7d1b      	ldrb	r3, [r3, #20]
 800c5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ca:	b2da      	uxtb	r2, r3
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	7858      	ldrb	r0, [r3, #1]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5da:	2301      	movs	r3, #1
 800c5dc:	69ba      	ldr	r2, [r7, #24]
 800c5de:	f7fd fd3d 	bl	800a05c <disk_read>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <f_lseek+0x1e0>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	755a      	strb	r2, [r3, #21]
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	e114      	b.n	800c81c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	69ba      	ldr	r2, [r7, #24]
 800c5f6:	621a      	str	r2, [r3, #32]
 800c5f8:	e10e      	b.n	800c818 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	429a      	cmp	r2, r3
 800c602:	d908      	bls.n	800c616 <f_lseek+0x204>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	7d1b      	ldrb	r3, [r3, #20]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d102      	bne.n	800c616 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	699b      	ldr	r3, [r3, #24]
 800c61a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	637b      	str	r3, [r7, #52]	; 0x34
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c624:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	f000 80a7 	beq.w	800c77c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	895b      	ldrh	r3, [r3, #10]
 800c632:	025b      	lsls	r3, r3, #9
 800c634:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c636:	6a3b      	ldr	r3, [r7, #32]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d01b      	beq.n	800c674 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	1e5a      	subs	r2, r3, #1
 800c640:	69fb      	ldr	r3, [r7, #28]
 800c642:	fbb2 f2f3 	udiv	r2, r2, r3
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	1e59      	subs	r1, r3, #1
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c650:	429a      	cmp	r2, r3
 800c652:	d30f      	bcc.n	800c674 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	1e5a      	subs	r2, r3, #1
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	425b      	negs	r3, r3
 800c65c:	401a      	ands	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	699b      	ldr	r3, [r3, #24]
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	69db      	ldr	r3, [r3, #28]
 800c670:	63bb      	str	r3, [r7, #56]	; 0x38
 800c672:	e022      	b.n	800c6ba <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d119      	bne.n	800c6b4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2100      	movs	r1, #0
 800c684:	4618      	mov	r0, r3
 800c686:	f7fe faab 	bl	800abe0 <create_chain>
 800c68a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d104      	bne.n	800c69c <f_lseek+0x28a>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2202      	movs	r2, #2
 800c696:	755a      	strb	r2, [r3, #21]
 800c698:	2302      	movs	r3, #2
 800c69a:	e0bf      	b.n	800c81c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6a2:	d104      	bne.n	800c6ae <f_lseek+0x29c>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	755a      	strb	r2, [r3, #21]
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e0b6      	b.n	800c81c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6b2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6b8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d05d      	beq.n	800c77c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c6c0:	e03a      	b.n	800c738 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c6c2:	683a      	ldr	r2, [r7, #0]
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	1ad3      	subs	r3, r2, r3
 800c6c8:	603b      	str	r3, [r7, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	699a      	ldr	r2, [r3, #24]
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	441a      	add	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	7d1b      	ldrb	r3, [r3, #20]
 800c6da:	f003 0302 	and.w	r3, r3, #2
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00b      	beq.n	800c6fa <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fe fa7a 	bl	800abe0 <create_chain>
 800c6ec:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d108      	bne.n	800c706 <f_lseek+0x2f4>
							ofs = 0; break;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	603b      	str	r3, [r7, #0]
 800c6f8:	e022      	b.n	800c740 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fe f875 	bl	800a7ee <get_fat>
 800c704:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70c:	d104      	bne.n	800c718 <f_lseek+0x306>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2201      	movs	r2, #1
 800c712:	755a      	strb	r2, [r3, #21]
 800c714:	2301      	movs	r3, #1
 800c716:	e081      	b.n	800c81c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d904      	bls.n	800c728 <f_lseek+0x316>
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c724:	429a      	cmp	r2, r3
 800c726:	d304      	bcc.n	800c732 <f_lseek+0x320>
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2202      	movs	r2, #2
 800c72c:	755a      	strb	r2, [r3, #21]
 800c72e:	2302      	movs	r3, #2
 800c730:	e074      	b.n	800c81c <f_lseek+0x40a>
					fp->clust = clst;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c736:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c738:	683a      	ldr	r2, [r7, #0]
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d8c0      	bhi.n	800c6c2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	699a      	ldr	r2, [r3, #24]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	441a      	add	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c752:	2b00      	cmp	r3, #0
 800c754:	d012      	beq.n	800c77c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe f828 	bl	800a7b0 <clust2sect>
 800c760:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c764:	2b00      	cmp	r3, #0
 800c766:	d104      	bne.n	800c772 <f_lseek+0x360>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2202      	movs	r2, #2
 800c76c:	755a      	strb	r2, [r3, #21]
 800c76e:	2302      	movs	r3, #2
 800c770:	e054      	b.n	800c81c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	0a5b      	lsrs	r3, r3, #9
 800c776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c778:	4413      	add	r3, r2
 800c77a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	699a      	ldr	r2, [r3, #24]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	429a      	cmp	r2, r3
 800c786:	d90a      	bls.n	800c79e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	699a      	ldr	r2, [r3, #24]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	7d1b      	ldrb	r3, [r3, #20]
 800c794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c798:	b2da      	uxtb	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	699b      	ldr	r3, [r3, #24]
 800c7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d036      	beq.n	800c818 <f_lseek+0x406>
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d031      	beq.n	800c818 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	7d1b      	ldrb	r3, [r3, #20]
 800c7b8:	b25b      	sxtb	r3, r3
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	da18      	bge.n	800c7f0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	7858      	ldrb	r0, [r3, #1]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	6a1a      	ldr	r2, [r3, #32]
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	f7fd fc65 	bl	800a09c <disk_write>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d004      	beq.n	800c7e2 <f_lseek+0x3d0>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2201      	movs	r2, #1
 800c7dc:	755a      	strb	r2, [r3, #21]
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e01c      	b.n	800c81c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	7d1b      	ldrb	r3, [r3, #20]
 800c7e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7ea:	b2da      	uxtb	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	7858      	ldrb	r0, [r3, #1]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7fe:	f7fd fc2d 	bl	800a05c <disk_read>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d004      	beq.n	800c812 <f_lseek+0x400>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	755a      	strb	r2, [r3, #21]
 800c80e:	2301      	movs	r3, #1
 800c810:	e004      	b.n	800c81c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c816:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c818:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3740      	adds	r7, #64	; 0x40
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b086      	sub	sp, #24
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d101      	bne.n	800c838 <f_opendir+0x14>
 800c834:	2309      	movs	r3, #9
 800c836:	e064      	b.n	800c902 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c83c:	f107 010c 	add.w	r1, r7, #12
 800c840:	463b      	mov	r3, r7
 800c842:	2200      	movs	r2, #0
 800c844:	4618      	mov	r0, r3
 800c846:	f7fe ff41 	bl	800b6cc <find_volume>
 800c84a:	4603      	mov	r3, r0
 800c84c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c84e:	7dfb      	ldrb	r3, [r7, #23]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d14f      	bne.n	800c8f4 <f_opendir+0xd0>
		obj->fs = fs;
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	4619      	mov	r1, r3
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7fe fe28 	bl	800b4b4 <follow_path>
 800c864:	4603      	mov	r3, r0
 800c866:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c868:	7dfb      	ldrb	r3, [r7, #23]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d13d      	bne.n	800c8ea <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c874:	b25b      	sxtb	r3, r3
 800c876:	2b00      	cmp	r3, #0
 800c878:	db12      	blt.n	800c8a0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	799b      	ldrb	r3, [r3, #6]
 800c87e:	f003 0310 	and.w	r3, r3, #16
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00a      	beq.n	800c89c <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a1b      	ldr	r3, [r3, #32]
 800c88c:	4619      	mov	r1, r3
 800c88e:	4610      	mov	r0, r2
 800c890:	f7fe fbf9 	bl	800b086 <ld_clust>
 800c894:	4602      	mov	r2, r0
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	609a      	str	r2, [r3, #8]
 800c89a:	e001      	b.n	800c8a0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c89c:	2305      	movs	r3, #5
 800c89e:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d121      	bne.n	800c8ea <f_opendir+0xc6>
				obj->id = fs->id;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	88da      	ldrh	r2, [r3, #6]
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7fe fa61 	bl	800ad78 <dir_sdi>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c8ba:	7dfb      	ldrb	r3, [r7, #23]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d114      	bne.n	800c8ea <f_opendir+0xc6>
					if (obj->sclust) {
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	689b      	ldr	r3, [r3, #8]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d00d      	beq.n	800c8e4 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7fd fda2 	bl	800a414 <inc_lock>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d105      	bne.n	800c8ea <f_opendir+0xc6>
 800c8de:	2312      	movs	r3, #18
 800c8e0:	75fb      	strb	r3, [r7, #23]
 800c8e2:	e002      	b.n	800c8ea <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	2b04      	cmp	r3, #4
 800c8ee:	d101      	bne.n	800c8f4 <f_opendir+0xd0>
 800c8f0:	2305      	movs	r3, #5
 800c8f2:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <f_opendir+0xdc>
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c900:	7dfb      	ldrb	r3, [r7, #23]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3718      	adds	r7, #24
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f107 0208 	add.w	r2, r7, #8
 800c918:	4611      	mov	r1, r2
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7ff f922 	bl	800bb64 <validate>
 800c920:	4603      	mov	r3, r0
 800c922:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d110      	bne.n	800c94c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d006      	beq.n	800c940 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	4618      	mov	r0, r3
 800c938:	f7fd fdfa 	bl	800a530 <dec_lock>
 800c93c:	4603      	mov	r3, r0
 800c93e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c940:	7bfb      	ldrb	r3, [r7, #15]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d102      	bne.n	800c94c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}

0800c956 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c956:	b580      	push	{r7, lr}
 800c958:	b084      	sub	sp, #16
 800c95a:	af00      	add	r7, sp, #0
 800c95c:	6078      	str	r0, [r7, #4]
 800c95e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f107 0208 	add.w	r2, r7, #8
 800c966:	4611      	mov	r1, r2
 800c968:	4618      	mov	r0, r3
 800c96a:	f7ff f8fb 	bl	800bb64 <validate>
 800c96e:	4603      	mov	r3, r0
 800c970:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c972:	7bfb      	ldrb	r3, [r7, #15]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d126      	bne.n	800c9c6 <f_readdir+0x70>
		if (!fno) {
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d106      	bne.n	800c98c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c97e:	2100      	movs	r1, #0
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7fe f9f9 	bl	800ad78 <dir_sdi>
 800c986:	4603      	mov	r3, r0
 800c988:	73fb      	strb	r3, [r7, #15]
 800c98a:	e01c      	b.n	800c9c6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c98c:	2100      	movs	r1, #0
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7fe fbb8 	bl	800b104 <dir_read>
 800c994:	4603      	mov	r3, r0
 800c996:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	2b04      	cmp	r3, #4
 800c99c:	d101      	bne.n	800c9a2 <f_readdir+0x4c>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d10e      	bne.n	800c9c6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7fe fc8e 	bl	800b2cc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c9b0:	2100      	movs	r1, #0
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7fe fa5b 	bl	800ae6e <dir_next>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	2b04      	cmp	r3, #4
 800c9c0:	d101      	bne.n	800c9c6 <f_readdir+0x70>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}

0800c9d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c9e6:	4b1f      	ldr	r3, [pc, #124]	; (800ca64 <FATFS_LinkDriverEx+0x94>)
 800c9e8:	7a5b      	ldrb	r3, [r3, #9]
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d131      	bne.n	800ca54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c9f0:	4b1c      	ldr	r3, [pc, #112]	; (800ca64 <FATFS_LinkDriverEx+0x94>)
 800c9f2:	7a5b      	ldrb	r3, [r3, #9]
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	461a      	mov	r2, r3
 800c9f8:	4b1a      	ldr	r3, [pc, #104]	; (800ca64 <FATFS_LinkDriverEx+0x94>)
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c9fe:	4b19      	ldr	r3, [pc, #100]	; (800ca64 <FATFS_LinkDriverEx+0x94>)
 800ca00:	7a5b      	ldrb	r3, [r3, #9]
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	4a17      	ldr	r2, [pc, #92]	; (800ca64 <FATFS_LinkDriverEx+0x94>)
 800ca06:	009b      	lsls	r3, r3, #2
 800ca08:	4413      	add	r3, r2
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca0e:	4b15      	ldr	r3, [pc, #84]	; (800ca64 <FATFS_LinkDriverEx+0x94>)
 800ca10:	7a5b      	ldrb	r3, [r3, #9]
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	461a      	mov	r2, r3
 800ca16:	4b13      	ldr	r3, [pc, #76]	; (800ca64 <FATFS_LinkDriverEx+0x94>)
 800ca18:	4413      	add	r3, r2
 800ca1a:	79fa      	ldrb	r2, [r7, #7]
 800ca1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca1e:	4b11      	ldr	r3, [pc, #68]	; (800ca64 <FATFS_LinkDriverEx+0x94>)
 800ca20:	7a5b      	ldrb	r3, [r3, #9]
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	1c5a      	adds	r2, r3, #1
 800ca26:	b2d1      	uxtb	r1, r2
 800ca28:	4a0e      	ldr	r2, [pc, #56]	; (800ca64 <FATFS_LinkDriverEx+0x94>)
 800ca2a:	7251      	strb	r1, [r2, #9]
 800ca2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca2e:	7dbb      	ldrb	r3, [r7, #22]
 800ca30:	3330      	adds	r3, #48	; 0x30
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	223a      	movs	r2, #58	; 0x3a
 800ca3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	3302      	adds	r3, #2
 800ca44:	222f      	movs	r2, #47	; 0x2f
 800ca46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	3303      	adds	r3, #3
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ca50:	2300      	movs	r3, #0
 800ca52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ca54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	371c      	adds	r7, #28
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	200004cc 	.word	0x200004cc

0800ca68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca72:	2200      	movs	r2, #0
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7ff ffaa 	bl	800c9d0 <FATFS_LinkDriverEx>
 800ca7c:	4603      	mov	r3, r0
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
	...

0800ca88 <__errno>:
 800ca88:	4b01      	ldr	r3, [pc, #4]	; (800ca90 <__errno+0x8>)
 800ca8a:	6818      	ldr	r0, [r3, #0]
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	20000024 	.word	0x20000024

0800ca94 <__libc_init_array>:
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	4d0d      	ldr	r5, [pc, #52]	; (800cacc <__libc_init_array+0x38>)
 800ca98:	4c0d      	ldr	r4, [pc, #52]	; (800cad0 <__libc_init_array+0x3c>)
 800ca9a:	1b64      	subs	r4, r4, r5
 800ca9c:	10a4      	asrs	r4, r4, #2
 800ca9e:	2600      	movs	r6, #0
 800caa0:	42a6      	cmp	r6, r4
 800caa2:	d109      	bne.n	800cab8 <__libc_init_array+0x24>
 800caa4:	4d0b      	ldr	r5, [pc, #44]	; (800cad4 <__libc_init_array+0x40>)
 800caa6:	4c0c      	ldr	r4, [pc, #48]	; (800cad8 <__libc_init_array+0x44>)
 800caa8:	f004 fc8e 	bl	80113c8 <_init>
 800caac:	1b64      	subs	r4, r4, r5
 800caae:	10a4      	asrs	r4, r4, #2
 800cab0:	2600      	movs	r6, #0
 800cab2:	42a6      	cmp	r6, r4
 800cab4:	d105      	bne.n	800cac2 <__libc_init_array+0x2e>
 800cab6:	bd70      	pop	{r4, r5, r6, pc}
 800cab8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cabc:	4798      	blx	r3
 800cabe:	3601      	adds	r6, #1
 800cac0:	e7ee      	b.n	800caa0 <__libc_init_array+0xc>
 800cac2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cac6:	4798      	blx	r3
 800cac8:	3601      	adds	r6, #1
 800caca:	e7f2      	b.n	800cab2 <__libc_init_array+0x1e>
 800cacc:	08011b64 	.word	0x08011b64
 800cad0:	08011b64 	.word	0x08011b64
 800cad4:	08011b64 	.word	0x08011b64
 800cad8:	08011b68 	.word	0x08011b68

0800cadc <malloc>:
 800cadc:	4b02      	ldr	r3, [pc, #8]	; (800cae8 <malloc+0xc>)
 800cade:	4601      	mov	r1, r0
 800cae0:	6818      	ldr	r0, [r3, #0]
 800cae2:	f000 b869 	b.w	800cbb8 <_malloc_r>
 800cae6:	bf00      	nop
 800cae8:	20000024 	.word	0x20000024

0800caec <memcpy>:
 800caec:	440a      	add	r2, r1
 800caee:	4291      	cmp	r1, r2
 800caf0:	f100 33ff 	add.w	r3, r0, #4294967295
 800caf4:	d100      	bne.n	800caf8 <memcpy+0xc>
 800caf6:	4770      	bx	lr
 800caf8:	b510      	push	{r4, lr}
 800cafa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cafe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb02:	4291      	cmp	r1, r2
 800cb04:	d1f9      	bne.n	800cafa <memcpy+0xe>
 800cb06:	bd10      	pop	{r4, pc}

0800cb08 <memset>:
 800cb08:	4402      	add	r2, r0
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	4293      	cmp	r3, r2
 800cb0e:	d100      	bne.n	800cb12 <memset+0xa>
 800cb10:	4770      	bx	lr
 800cb12:	f803 1b01 	strb.w	r1, [r3], #1
 800cb16:	e7f9      	b.n	800cb0c <memset+0x4>

0800cb18 <_free_r>:
 800cb18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb1a:	2900      	cmp	r1, #0
 800cb1c:	d048      	beq.n	800cbb0 <_free_r+0x98>
 800cb1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb22:	9001      	str	r0, [sp, #4]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f1a1 0404 	sub.w	r4, r1, #4
 800cb2a:	bfb8      	it	lt
 800cb2c:	18e4      	addlt	r4, r4, r3
 800cb2e:	f003 fbb1 	bl	8010294 <__malloc_lock>
 800cb32:	4a20      	ldr	r2, [pc, #128]	; (800cbb4 <_free_r+0x9c>)
 800cb34:	9801      	ldr	r0, [sp, #4]
 800cb36:	6813      	ldr	r3, [r2, #0]
 800cb38:	4615      	mov	r5, r2
 800cb3a:	b933      	cbnz	r3, 800cb4a <_free_r+0x32>
 800cb3c:	6063      	str	r3, [r4, #4]
 800cb3e:	6014      	str	r4, [r2, #0]
 800cb40:	b003      	add	sp, #12
 800cb42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb46:	f003 bbab 	b.w	80102a0 <__malloc_unlock>
 800cb4a:	42a3      	cmp	r3, r4
 800cb4c:	d90b      	bls.n	800cb66 <_free_r+0x4e>
 800cb4e:	6821      	ldr	r1, [r4, #0]
 800cb50:	1862      	adds	r2, r4, r1
 800cb52:	4293      	cmp	r3, r2
 800cb54:	bf04      	itt	eq
 800cb56:	681a      	ldreq	r2, [r3, #0]
 800cb58:	685b      	ldreq	r3, [r3, #4]
 800cb5a:	6063      	str	r3, [r4, #4]
 800cb5c:	bf04      	itt	eq
 800cb5e:	1852      	addeq	r2, r2, r1
 800cb60:	6022      	streq	r2, [r4, #0]
 800cb62:	602c      	str	r4, [r5, #0]
 800cb64:	e7ec      	b.n	800cb40 <_free_r+0x28>
 800cb66:	461a      	mov	r2, r3
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	b10b      	cbz	r3, 800cb70 <_free_r+0x58>
 800cb6c:	42a3      	cmp	r3, r4
 800cb6e:	d9fa      	bls.n	800cb66 <_free_r+0x4e>
 800cb70:	6811      	ldr	r1, [r2, #0]
 800cb72:	1855      	adds	r5, r2, r1
 800cb74:	42a5      	cmp	r5, r4
 800cb76:	d10b      	bne.n	800cb90 <_free_r+0x78>
 800cb78:	6824      	ldr	r4, [r4, #0]
 800cb7a:	4421      	add	r1, r4
 800cb7c:	1854      	adds	r4, r2, r1
 800cb7e:	42a3      	cmp	r3, r4
 800cb80:	6011      	str	r1, [r2, #0]
 800cb82:	d1dd      	bne.n	800cb40 <_free_r+0x28>
 800cb84:	681c      	ldr	r4, [r3, #0]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	6053      	str	r3, [r2, #4]
 800cb8a:	4421      	add	r1, r4
 800cb8c:	6011      	str	r1, [r2, #0]
 800cb8e:	e7d7      	b.n	800cb40 <_free_r+0x28>
 800cb90:	d902      	bls.n	800cb98 <_free_r+0x80>
 800cb92:	230c      	movs	r3, #12
 800cb94:	6003      	str	r3, [r0, #0]
 800cb96:	e7d3      	b.n	800cb40 <_free_r+0x28>
 800cb98:	6825      	ldr	r5, [r4, #0]
 800cb9a:	1961      	adds	r1, r4, r5
 800cb9c:	428b      	cmp	r3, r1
 800cb9e:	bf04      	itt	eq
 800cba0:	6819      	ldreq	r1, [r3, #0]
 800cba2:	685b      	ldreq	r3, [r3, #4]
 800cba4:	6063      	str	r3, [r4, #4]
 800cba6:	bf04      	itt	eq
 800cba8:	1949      	addeq	r1, r1, r5
 800cbaa:	6021      	streq	r1, [r4, #0]
 800cbac:	6054      	str	r4, [r2, #4]
 800cbae:	e7c7      	b.n	800cb40 <_free_r+0x28>
 800cbb0:	b003      	add	sp, #12
 800cbb2:	bd30      	pop	{r4, r5, pc}
 800cbb4:	200004d8 	.word	0x200004d8

0800cbb8 <_malloc_r>:
 800cbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbba:	1ccd      	adds	r5, r1, #3
 800cbbc:	f025 0503 	bic.w	r5, r5, #3
 800cbc0:	3508      	adds	r5, #8
 800cbc2:	2d0c      	cmp	r5, #12
 800cbc4:	bf38      	it	cc
 800cbc6:	250c      	movcc	r5, #12
 800cbc8:	2d00      	cmp	r5, #0
 800cbca:	4606      	mov	r6, r0
 800cbcc:	db01      	blt.n	800cbd2 <_malloc_r+0x1a>
 800cbce:	42a9      	cmp	r1, r5
 800cbd0:	d903      	bls.n	800cbda <_malloc_r+0x22>
 800cbd2:	230c      	movs	r3, #12
 800cbd4:	6033      	str	r3, [r6, #0]
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbda:	f003 fb5b 	bl	8010294 <__malloc_lock>
 800cbde:	4921      	ldr	r1, [pc, #132]	; (800cc64 <_malloc_r+0xac>)
 800cbe0:	680a      	ldr	r2, [r1, #0]
 800cbe2:	4614      	mov	r4, r2
 800cbe4:	b99c      	cbnz	r4, 800cc0e <_malloc_r+0x56>
 800cbe6:	4f20      	ldr	r7, [pc, #128]	; (800cc68 <_malloc_r+0xb0>)
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	b923      	cbnz	r3, 800cbf6 <_malloc_r+0x3e>
 800cbec:	4621      	mov	r1, r4
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f000 feb6 	bl	800d960 <_sbrk_r>
 800cbf4:	6038      	str	r0, [r7, #0]
 800cbf6:	4629      	mov	r1, r5
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f000 feb1 	bl	800d960 <_sbrk_r>
 800cbfe:	1c43      	adds	r3, r0, #1
 800cc00:	d123      	bne.n	800cc4a <_malloc_r+0x92>
 800cc02:	230c      	movs	r3, #12
 800cc04:	6033      	str	r3, [r6, #0]
 800cc06:	4630      	mov	r0, r6
 800cc08:	f003 fb4a 	bl	80102a0 <__malloc_unlock>
 800cc0c:	e7e3      	b.n	800cbd6 <_malloc_r+0x1e>
 800cc0e:	6823      	ldr	r3, [r4, #0]
 800cc10:	1b5b      	subs	r3, r3, r5
 800cc12:	d417      	bmi.n	800cc44 <_malloc_r+0x8c>
 800cc14:	2b0b      	cmp	r3, #11
 800cc16:	d903      	bls.n	800cc20 <_malloc_r+0x68>
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	441c      	add	r4, r3
 800cc1c:	6025      	str	r5, [r4, #0]
 800cc1e:	e004      	b.n	800cc2a <_malloc_r+0x72>
 800cc20:	6863      	ldr	r3, [r4, #4]
 800cc22:	42a2      	cmp	r2, r4
 800cc24:	bf0c      	ite	eq
 800cc26:	600b      	streq	r3, [r1, #0]
 800cc28:	6053      	strne	r3, [r2, #4]
 800cc2a:	4630      	mov	r0, r6
 800cc2c:	f003 fb38 	bl	80102a0 <__malloc_unlock>
 800cc30:	f104 000b 	add.w	r0, r4, #11
 800cc34:	1d23      	adds	r3, r4, #4
 800cc36:	f020 0007 	bic.w	r0, r0, #7
 800cc3a:	1ac2      	subs	r2, r0, r3
 800cc3c:	d0cc      	beq.n	800cbd8 <_malloc_r+0x20>
 800cc3e:	1a1b      	subs	r3, r3, r0
 800cc40:	50a3      	str	r3, [r4, r2]
 800cc42:	e7c9      	b.n	800cbd8 <_malloc_r+0x20>
 800cc44:	4622      	mov	r2, r4
 800cc46:	6864      	ldr	r4, [r4, #4]
 800cc48:	e7cc      	b.n	800cbe4 <_malloc_r+0x2c>
 800cc4a:	1cc4      	adds	r4, r0, #3
 800cc4c:	f024 0403 	bic.w	r4, r4, #3
 800cc50:	42a0      	cmp	r0, r4
 800cc52:	d0e3      	beq.n	800cc1c <_malloc_r+0x64>
 800cc54:	1a21      	subs	r1, r4, r0
 800cc56:	4630      	mov	r0, r6
 800cc58:	f000 fe82 	bl	800d960 <_sbrk_r>
 800cc5c:	3001      	adds	r0, #1
 800cc5e:	d1dd      	bne.n	800cc1c <_malloc_r+0x64>
 800cc60:	e7cf      	b.n	800cc02 <_malloc_r+0x4a>
 800cc62:	bf00      	nop
 800cc64:	200004d8 	.word	0x200004d8
 800cc68:	200004dc 	.word	0x200004dc

0800cc6c <__cvt>:
 800cc6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc70:	ec55 4b10 	vmov	r4, r5, d0
 800cc74:	2d00      	cmp	r5, #0
 800cc76:	460e      	mov	r6, r1
 800cc78:	4619      	mov	r1, r3
 800cc7a:	462b      	mov	r3, r5
 800cc7c:	bfbb      	ittet	lt
 800cc7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cc82:	461d      	movlt	r5, r3
 800cc84:	2300      	movge	r3, #0
 800cc86:	232d      	movlt	r3, #45	; 0x2d
 800cc88:	700b      	strb	r3, [r1, #0]
 800cc8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cc90:	4691      	mov	r9, r2
 800cc92:	f023 0820 	bic.w	r8, r3, #32
 800cc96:	bfbc      	itt	lt
 800cc98:	4622      	movlt	r2, r4
 800cc9a:	4614      	movlt	r4, r2
 800cc9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cca0:	d005      	beq.n	800ccae <__cvt+0x42>
 800cca2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cca6:	d100      	bne.n	800ccaa <__cvt+0x3e>
 800cca8:	3601      	adds	r6, #1
 800ccaa:	2102      	movs	r1, #2
 800ccac:	e000      	b.n	800ccb0 <__cvt+0x44>
 800ccae:	2103      	movs	r1, #3
 800ccb0:	ab03      	add	r3, sp, #12
 800ccb2:	9301      	str	r3, [sp, #4]
 800ccb4:	ab02      	add	r3, sp, #8
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	ec45 4b10 	vmov	d0, r4, r5
 800ccbc:	4653      	mov	r3, sl
 800ccbe:	4632      	mov	r2, r6
 800ccc0:	f001 ff46 	bl	800eb50 <_dtoa_r>
 800ccc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ccc8:	4607      	mov	r7, r0
 800ccca:	d102      	bne.n	800ccd2 <__cvt+0x66>
 800cccc:	f019 0f01 	tst.w	r9, #1
 800ccd0:	d022      	beq.n	800cd18 <__cvt+0xac>
 800ccd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ccd6:	eb07 0906 	add.w	r9, r7, r6
 800ccda:	d110      	bne.n	800ccfe <__cvt+0x92>
 800ccdc:	783b      	ldrb	r3, [r7, #0]
 800ccde:	2b30      	cmp	r3, #48	; 0x30
 800cce0:	d10a      	bne.n	800ccf8 <__cvt+0x8c>
 800cce2:	2200      	movs	r2, #0
 800cce4:	2300      	movs	r3, #0
 800cce6:	4620      	mov	r0, r4
 800cce8:	4629      	mov	r1, r5
 800ccea:	f7f3 fefd 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccee:	b918      	cbnz	r0, 800ccf8 <__cvt+0x8c>
 800ccf0:	f1c6 0601 	rsb	r6, r6, #1
 800ccf4:	f8ca 6000 	str.w	r6, [sl]
 800ccf8:	f8da 3000 	ldr.w	r3, [sl]
 800ccfc:	4499      	add	r9, r3
 800ccfe:	2200      	movs	r2, #0
 800cd00:	2300      	movs	r3, #0
 800cd02:	4620      	mov	r0, r4
 800cd04:	4629      	mov	r1, r5
 800cd06:	f7f3 feef 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd0a:	b108      	cbz	r0, 800cd10 <__cvt+0xa4>
 800cd0c:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd10:	2230      	movs	r2, #48	; 0x30
 800cd12:	9b03      	ldr	r3, [sp, #12]
 800cd14:	454b      	cmp	r3, r9
 800cd16:	d307      	bcc.n	800cd28 <__cvt+0xbc>
 800cd18:	9b03      	ldr	r3, [sp, #12]
 800cd1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd1c:	1bdb      	subs	r3, r3, r7
 800cd1e:	4638      	mov	r0, r7
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	b004      	add	sp, #16
 800cd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd28:	1c59      	adds	r1, r3, #1
 800cd2a:	9103      	str	r1, [sp, #12]
 800cd2c:	701a      	strb	r2, [r3, #0]
 800cd2e:	e7f0      	b.n	800cd12 <__cvt+0xa6>

0800cd30 <__exponent>:
 800cd30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd32:	4603      	mov	r3, r0
 800cd34:	2900      	cmp	r1, #0
 800cd36:	bfb8      	it	lt
 800cd38:	4249      	neglt	r1, r1
 800cd3a:	f803 2b02 	strb.w	r2, [r3], #2
 800cd3e:	bfb4      	ite	lt
 800cd40:	222d      	movlt	r2, #45	; 0x2d
 800cd42:	222b      	movge	r2, #43	; 0x2b
 800cd44:	2909      	cmp	r1, #9
 800cd46:	7042      	strb	r2, [r0, #1]
 800cd48:	dd2a      	ble.n	800cda0 <__exponent+0x70>
 800cd4a:	f10d 0407 	add.w	r4, sp, #7
 800cd4e:	46a4      	mov	ip, r4
 800cd50:	270a      	movs	r7, #10
 800cd52:	46a6      	mov	lr, r4
 800cd54:	460a      	mov	r2, r1
 800cd56:	fb91 f6f7 	sdiv	r6, r1, r7
 800cd5a:	fb07 1516 	mls	r5, r7, r6, r1
 800cd5e:	3530      	adds	r5, #48	; 0x30
 800cd60:	2a63      	cmp	r2, #99	; 0x63
 800cd62:	f104 34ff 	add.w	r4, r4, #4294967295
 800cd66:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	dcf1      	bgt.n	800cd52 <__exponent+0x22>
 800cd6e:	3130      	adds	r1, #48	; 0x30
 800cd70:	f1ae 0502 	sub.w	r5, lr, #2
 800cd74:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cd78:	1c44      	adds	r4, r0, #1
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	4561      	cmp	r1, ip
 800cd7e:	d30a      	bcc.n	800cd96 <__exponent+0x66>
 800cd80:	f10d 0209 	add.w	r2, sp, #9
 800cd84:	eba2 020e 	sub.w	r2, r2, lr
 800cd88:	4565      	cmp	r5, ip
 800cd8a:	bf88      	it	hi
 800cd8c:	2200      	movhi	r2, #0
 800cd8e:	4413      	add	r3, r2
 800cd90:	1a18      	subs	r0, r3, r0
 800cd92:	b003      	add	sp, #12
 800cd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd9a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cd9e:	e7ed      	b.n	800cd7c <__exponent+0x4c>
 800cda0:	2330      	movs	r3, #48	; 0x30
 800cda2:	3130      	adds	r1, #48	; 0x30
 800cda4:	7083      	strb	r3, [r0, #2]
 800cda6:	70c1      	strb	r1, [r0, #3]
 800cda8:	1d03      	adds	r3, r0, #4
 800cdaa:	e7f1      	b.n	800cd90 <__exponent+0x60>

0800cdac <_printf_float>:
 800cdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb0:	ed2d 8b02 	vpush	{d8}
 800cdb4:	b08d      	sub	sp, #52	; 0x34
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cdbc:	4616      	mov	r6, r2
 800cdbe:	461f      	mov	r7, r3
 800cdc0:	4605      	mov	r5, r0
 800cdc2:	f003 f9d7 	bl	8010174 <_localeconv_r>
 800cdc6:	f8d0 a000 	ldr.w	sl, [r0]
 800cdca:	4650      	mov	r0, sl
 800cdcc:	f7f3 fa10 	bl	80001f0 <strlen>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	930a      	str	r3, [sp, #40]	; 0x28
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	9305      	str	r3, [sp, #20]
 800cdd8:	f8d8 3000 	ldr.w	r3, [r8]
 800cddc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cde0:	3307      	adds	r3, #7
 800cde2:	f023 0307 	bic.w	r3, r3, #7
 800cde6:	f103 0208 	add.w	r2, r3, #8
 800cdea:	f8c8 2000 	str.w	r2, [r8]
 800cdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cdf6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cdfa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cdfe:	9307      	str	r3, [sp, #28]
 800ce00:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce04:	ee08 0a10 	vmov	s16, r0
 800ce08:	4b9f      	ldr	r3, [pc, #636]	; (800d088 <_printf_float+0x2dc>)
 800ce0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce12:	f7f3 fe9b 	bl	8000b4c <__aeabi_dcmpun>
 800ce16:	bb88      	cbnz	r0, 800ce7c <_printf_float+0xd0>
 800ce18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce1c:	4b9a      	ldr	r3, [pc, #616]	; (800d088 <_printf_float+0x2dc>)
 800ce1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce22:	f7f3 fe75 	bl	8000b10 <__aeabi_dcmple>
 800ce26:	bb48      	cbnz	r0, 800ce7c <_printf_float+0xd0>
 800ce28:	2200      	movs	r2, #0
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	4640      	mov	r0, r8
 800ce2e:	4649      	mov	r1, r9
 800ce30:	f7f3 fe64 	bl	8000afc <__aeabi_dcmplt>
 800ce34:	b110      	cbz	r0, 800ce3c <_printf_float+0x90>
 800ce36:	232d      	movs	r3, #45	; 0x2d
 800ce38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce3c:	4b93      	ldr	r3, [pc, #588]	; (800d08c <_printf_float+0x2e0>)
 800ce3e:	4894      	ldr	r0, [pc, #592]	; (800d090 <_printf_float+0x2e4>)
 800ce40:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ce44:	bf94      	ite	ls
 800ce46:	4698      	movls	r8, r3
 800ce48:	4680      	movhi	r8, r0
 800ce4a:	2303      	movs	r3, #3
 800ce4c:	6123      	str	r3, [r4, #16]
 800ce4e:	9b05      	ldr	r3, [sp, #20]
 800ce50:	f023 0204 	bic.w	r2, r3, #4
 800ce54:	6022      	str	r2, [r4, #0]
 800ce56:	f04f 0900 	mov.w	r9, #0
 800ce5a:	9700      	str	r7, [sp, #0]
 800ce5c:	4633      	mov	r3, r6
 800ce5e:	aa0b      	add	r2, sp, #44	; 0x2c
 800ce60:	4621      	mov	r1, r4
 800ce62:	4628      	mov	r0, r5
 800ce64:	f000 f9d8 	bl	800d218 <_printf_common>
 800ce68:	3001      	adds	r0, #1
 800ce6a:	f040 8090 	bne.w	800cf8e <_printf_float+0x1e2>
 800ce6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce72:	b00d      	add	sp, #52	; 0x34
 800ce74:	ecbd 8b02 	vpop	{d8}
 800ce78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7c:	4642      	mov	r2, r8
 800ce7e:	464b      	mov	r3, r9
 800ce80:	4640      	mov	r0, r8
 800ce82:	4649      	mov	r1, r9
 800ce84:	f7f3 fe62 	bl	8000b4c <__aeabi_dcmpun>
 800ce88:	b140      	cbz	r0, 800ce9c <_printf_float+0xf0>
 800ce8a:	464b      	mov	r3, r9
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	bfbc      	itt	lt
 800ce90:	232d      	movlt	r3, #45	; 0x2d
 800ce92:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ce96:	487f      	ldr	r0, [pc, #508]	; (800d094 <_printf_float+0x2e8>)
 800ce98:	4b7f      	ldr	r3, [pc, #508]	; (800d098 <_printf_float+0x2ec>)
 800ce9a:	e7d1      	b.n	800ce40 <_printf_float+0x94>
 800ce9c:	6863      	ldr	r3, [r4, #4]
 800ce9e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cea2:	9206      	str	r2, [sp, #24]
 800cea4:	1c5a      	adds	r2, r3, #1
 800cea6:	d13f      	bne.n	800cf28 <_printf_float+0x17c>
 800cea8:	2306      	movs	r3, #6
 800ceaa:	6063      	str	r3, [r4, #4]
 800ceac:	9b05      	ldr	r3, [sp, #20]
 800ceae:	6861      	ldr	r1, [r4, #4]
 800ceb0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9303      	str	r3, [sp, #12]
 800ceb8:	ab0a      	add	r3, sp, #40	; 0x28
 800ceba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cebe:	ab09      	add	r3, sp, #36	; 0x24
 800cec0:	ec49 8b10 	vmov	d0, r8, r9
 800cec4:	9300      	str	r3, [sp, #0]
 800cec6:	6022      	str	r2, [r4, #0]
 800cec8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cecc:	4628      	mov	r0, r5
 800cece:	f7ff fecd 	bl	800cc6c <__cvt>
 800ced2:	9b06      	ldr	r3, [sp, #24]
 800ced4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ced6:	2b47      	cmp	r3, #71	; 0x47
 800ced8:	4680      	mov	r8, r0
 800ceda:	d108      	bne.n	800ceee <_printf_float+0x142>
 800cedc:	1cc8      	adds	r0, r1, #3
 800cede:	db02      	blt.n	800cee6 <_printf_float+0x13a>
 800cee0:	6863      	ldr	r3, [r4, #4]
 800cee2:	4299      	cmp	r1, r3
 800cee4:	dd41      	ble.n	800cf6a <_printf_float+0x1be>
 800cee6:	f1ab 0b02 	sub.w	fp, fp, #2
 800ceea:	fa5f fb8b 	uxtb.w	fp, fp
 800ceee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cef2:	d820      	bhi.n	800cf36 <_printf_float+0x18a>
 800cef4:	3901      	subs	r1, #1
 800cef6:	465a      	mov	r2, fp
 800cef8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cefc:	9109      	str	r1, [sp, #36]	; 0x24
 800cefe:	f7ff ff17 	bl	800cd30 <__exponent>
 800cf02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf04:	1813      	adds	r3, r2, r0
 800cf06:	2a01      	cmp	r2, #1
 800cf08:	4681      	mov	r9, r0
 800cf0a:	6123      	str	r3, [r4, #16]
 800cf0c:	dc02      	bgt.n	800cf14 <_printf_float+0x168>
 800cf0e:	6822      	ldr	r2, [r4, #0]
 800cf10:	07d2      	lsls	r2, r2, #31
 800cf12:	d501      	bpl.n	800cf18 <_printf_float+0x16c>
 800cf14:	3301      	adds	r3, #1
 800cf16:	6123      	str	r3, [r4, #16]
 800cf18:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d09c      	beq.n	800ce5a <_printf_float+0xae>
 800cf20:	232d      	movs	r3, #45	; 0x2d
 800cf22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf26:	e798      	b.n	800ce5a <_printf_float+0xae>
 800cf28:	9a06      	ldr	r2, [sp, #24]
 800cf2a:	2a47      	cmp	r2, #71	; 0x47
 800cf2c:	d1be      	bne.n	800ceac <_printf_float+0x100>
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1bc      	bne.n	800ceac <_printf_float+0x100>
 800cf32:	2301      	movs	r3, #1
 800cf34:	e7b9      	b.n	800ceaa <_printf_float+0xfe>
 800cf36:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cf3a:	d118      	bne.n	800cf6e <_printf_float+0x1c2>
 800cf3c:	2900      	cmp	r1, #0
 800cf3e:	6863      	ldr	r3, [r4, #4]
 800cf40:	dd0b      	ble.n	800cf5a <_printf_float+0x1ae>
 800cf42:	6121      	str	r1, [r4, #16]
 800cf44:	b913      	cbnz	r3, 800cf4c <_printf_float+0x1a0>
 800cf46:	6822      	ldr	r2, [r4, #0]
 800cf48:	07d0      	lsls	r0, r2, #31
 800cf4a:	d502      	bpl.n	800cf52 <_printf_float+0x1a6>
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	440b      	add	r3, r1
 800cf50:	6123      	str	r3, [r4, #16]
 800cf52:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf54:	f04f 0900 	mov.w	r9, #0
 800cf58:	e7de      	b.n	800cf18 <_printf_float+0x16c>
 800cf5a:	b913      	cbnz	r3, 800cf62 <_printf_float+0x1b6>
 800cf5c:	6822      	ldr	r2, [r4, #0]
 800cf5e:	07d2      	lsls	r2, r2, #31
 800cf60:	d501      	bpl.n	800cf66 <_printf_float+0x1ba>
 800cf62:	3302      	adds	r3, #2
 800cf64:	e7f4      	b.n	800cf50 <_printf_float+0x1a4>
 800cf66:	2301      	movs	r3, #1
 800cf68:	e7f2      	b.n	800cf50 <_printf_float+0x1a4>
 800cf6a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cf6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf70:	4299      	cmp	r1, r3
 800cf72:	db05      	blt.n	800cf80 <_printf_float+0x1d4>
 800cf74:	6823      	ldr	r3, [r4, #0]
 800cf76:	6121      	str	r1, [r4, #16]
 800cf78:	07d8      	lsls	r0, r3, #31
 800cf7a:	d5ea      	bpl.n	800cf52 <_printf_float+0x1a6>
 800cf7c:	1c4b      	adds	r3, r1, #1
 800cf7e:	e7e7      	b.n	800cf50 <_printf_float+0x1a4>
 800cf80:	2900      	cmp	r1, #0
 800cf82:	bfd4      	ite	le
 800cf84:	f1c1 0202 	rsble	r2, r1, #2
 800cf88:	2201      	movgt	r2, #1
 800cf8a:	4413      	add	r3, r2
 800cf8c:	e7e0      	b.n	800cf50 <_printf_float+0x1a4>
 800cf8e:	6823      	ldr	r3, [r4, #0]
 800cf90:	055a      	lsls	r2, r3, #21
 800cf92:	d407      	bmi.n	800cfa4 <_printf_float+0x1f8>
 800cf94:	6923      	ldr	r3, [r4, #16]
 800cf96:	4642      	mov	r2, r8
 800cf98:	4631      	mov	r1, r6
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	47b8      	blx	r7
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	d12c      	bne.n	800cffc <_printf_float+0x250>
 800cfa2:	e764      	b.n	800ce6e <_printf_float+0xc2>
 800cfa4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cfa8:	f240 80e0 	bls.w	800d16c <_printf_float+0x3c0>
 800cfac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f7f3 fd98 	bl	8000ae8 <__aeabi_dcmpeq>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d034      	beq.n	800d026 <_printf_float+0x27a>
 800cfbc:	4a37      	ldr	r2, [pc, #220]	; (800d09c <_printf_float+0x2f0>)
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	4631      	mov	r1, r6
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	47b8      	blx	r7
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	f43f af51 	beq.w	800ce6e <_printf_float+0xc2>
 800cfcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	db02      	blt.n	800cfda <_printf_float+0x22e>
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	07d8      	lsls	r0, r3, #31
 800cfd8:	d510      	bpl.n	800cffc <_printf_float+0x250>
 800cfda:	ee18 3a10 	vmov	r3, s16
 800cfde:	4652      	mov	r2, sl
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	4628      	mov	r0, r5
 800cfe4:	47b8      	blx	r7
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	f43f af41 	beq.w	800ce6e <_printf_float+0xc2>
 800cfec:	f04f 0800 	mov.w	r8, #0
 800cff0:	f104 091a 	add.w	r9, r4, #26
 800cff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cff6:	3b01      	subs	r3, #1
 800cff8:	4543      	cmp	r3, r8
 800cffa:	dc09      	bgt.n	800d010 <_printf_float+0x264>
 800cffc:	6823      	ldr	r3, [r4, #0]
 800cffe:	079b      	lsls	r3, r3, #30
 800d000:	f100 8105 	bmi.w	800d20e <_printf_float+0x462>
 800d004:	68e0      	ldr	r0, [r4, #12]
 800d006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d008:	4298      	cmp	r0, r3
 800d00a:	bfb8      	it	lt
 800d00c:	4618      	movlt	r0, r3
 800d00e:	e730      	b.n	800ce72 <_printf_float+0xc6>
 800d010:	2301      	movs	r3, #1
 800d012:	464a      	mov	r2, r9
 800d014:	4631      	mov	r1, r6
 800d016:	4628      	mov	r0, r5
 800d018:	47b8      	blx	r7
 800d01a:	3001      	adds	r0, #1
 800d01c:	f43f af27 	beq.w	800ce6e <_printf_float+0xc2>
 800d020:	f108 0801 	add.w	r8, r8, #1
 800d024:	e7e6      	b.n	800cff4 <_printf_float+0x248>
 800d026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d028:	2b00      	cmp	r3, #0
 800d02a:	dc39      	bgt.n	800d0a0 <_printf_float+0x2f4>
 800d02c:	4a1b      	ldr	r2, [pc, #108]	; (800d09c <_printf_float+0x2f0>)
 800d02e:	2301      	movs	r3, #1
 800d030:	4631      	mov	r1, r6
 800d032:	4628      	mov	r0, r5
 800d034:	47b8      	blx	r7
 800d036:	3001      	adds	r0, #1
 800d038:	f43f af19 	beq.w	800ce6e <_printf_float+0xc2>
 800d03c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d040:	4313      	orrs	r3, r2
 800d042:	d102      	bne.n	800d04a <_printf_float+0x29e>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	07d9      	lsls	r1, r3, #31
 800d048:	d5d8      	bpl.n	800cffc <_printf_float+0x250>
 800d04a:	ee18 3a10 	vmov	r3, s16
 800d04e:	4652      	mov	r2, sl
 800d050:	4631      	mov	r1, r6
 800d052:	4628      	mov	r0, r5
 800d054:	47b8      	blx	r7
 800d056:	3001      	adds	r0, #1
 800d058:	f43f af09 	beq.w	800ce6e <_printf_float+0xc2>
 800d05c:	f04f 0900 	mov.w	r9, #0
 800d060:	f104 0a1a 	add.w	sl, r4, #26
 800d064:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d066:	425b      	negs	r3, r3
 800d068:	454b      	cmp	r3, r9
 800d06a:	dc01      	bgt.n	800d070 <_printf_float+0x2c4>
 800d06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d06e:	e792      	b.n	800cf96 <_printf_float+0x1ea>
 800d070:	2301      	movs	r3, #1
 800d072:	4652      	mov	r2, sl
 800d074:	4631      	mov	r1, r6
 800d076:	4628      	mov	r0, r5
 800d078:	47b8      	blx	r7
 800d07a:	3001      	adds	r0, #1
 800d07c:	f43f aef7 	beq.w	800ce6e <_printf_float+0xc2>
 800d080:	f109 0901 	add.w	r9, r9, #1
 800d084:	e7ee      	b.n	800d064 <_printf_float+0x2b8>
 800d086:	bf00      	nop
 800d088:	7fefffff 	.word	0x7fefffff
 800d08c:	080117a8 	.word	0x080117a8
 800d090:	080117ac 	.word	0x080117ac
 800d094:	080117b4 	.word	0x080117b4
 800d098:	080117b0 	.word	0x080117b0
 800d09c:	080117b8 	.word	0x080117b8
 800d0a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	bfa8      	it	ge
 800d0a8:	461a      	movge	r2, r3
 800d0aa:	2a00      	cmp	r2, #0
 800d0ac:	4691      	mov	r9, r2
 800d0ae:	dc37      	bgt.n	800d120 <_printf_float+0x374>
 800d0b0:	f04f 0b00 	mov.w	fp, #0
 800d0b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0b8:	f104 021a 	add.w	r2, r4, #26
 800d0bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0be:	9305      	str	r3, [sp, #20]
 800d0c0:	eba3 0309 	sub.w	r3, r3, r9
 800d0c4:	455b      	cmp	r3, fp
 800d0c6:	dc33      	bgt.n	800d130 <_printf_float+0x384>
 800d0c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	db3b      	blt.n	800d148 <_printf_float+0x39c>
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	07da      	lsls	r2, r3, #31
 800d0d4:	d438      	bmi.n	800d148 <_printf_float+0x39c>
 800d0d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0d8:	9b05      	ldr	r3, [sp, #20]
 800d0da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	eba2 0901 	sub.w	r9, r2, r1
 800d0e2:	4599      	cmp	r9, r3
 800d0e4:	bfa8      	it	ge
 800d0e6:	4699      	movge	r9, r3
 800d0e8:	f1b9 0f00 	cmp.w	r9, #0
 800d0ec:	dc35      	bgt.n	800d15a <_printf_float+0x3ae>
 800d0ee:	f04f 0800 	mov.w	r8, #0
 800d0f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0f6:	f104 0a1a 	add.w	sl, r4, #26
 800d0fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d0fe:	1a9b      	subs	r3, r3, r2
 800d100:	eba3 0309 	sub.w	r3, r3, r9
 800d104:	4543      	cmp	r3, r8
 800d106:	f77f af79 	ble.w	800cffc <_printf_float+0x250>
 800d10a:	2301      	movs	r3, #1
 800d10c:	4652      	mov	r2, sl
 800d10e:	4631      	mov	r1, r6
 800d110:	4628      	mov	r0, r5
 800d112:	47b8      	blx	r7
 800d114:	3001      	adds	r0, #1
 800d116:	f43f aeaa 	beq.w	800ce6e <_printf_float+0xc2>
 800d11a:	f108 0801 	add.w	r8, r8, #1
 800d11e:	e7ec      	b.n	800d0fa <_printf_float+0x34e>
 800d120:	4613      	mov	r3, r2
 800d122:	4631      	mov	r1, r6
 800d124:	4642      	mov	r2, r8
 800d126:	4628      	mov	r0, r5
 800d128:	47b8      	blx	r7
 800d12a:	3001      	adds	r0, #1
 800d12c:	d1c0      	bne.n	800d0b0 <_printf_float+0x304>
 800d12e:	e69e      	b.n	800ce6e <_printf_float+0xc2>
 800d130:	2301      	movs	r3, #1
 800d132:	4631      	mov	r1, r6
 800d134:	4628      	mov	r0, r5
 800d136:	9205      	str	r2, [sp, #20]
 800d138:	47b8      	blx	r7
 800d13a:	3001      	adds	r0, #1
 800d13c:	f43f ae97 	beq.w	800ce6e <_printf_float+0xc2>
 800d140:	9a05      	ldr	r2, [sp, #20]
 800d142:	f10b 0b01 	add.w	fp, fp, #1
 800d146:	e7b9      	b.n	800d0bc <_printf_float+0x310>
 800d148:	ee18 3a10 	vmov	r3, s16
 800d14c:	4652      	mov	r2, sl
 800d14e:	4631      	mov	r1, r6
 800d150:	4628      	mov	r0, r5
 800d152:	47b8      	blx	r7
 800d154:	3001      	adds	r0, #1
 800d156:	d1be      	bne.n	800d0d6 <_printf_float+0x32a>
 800d158:	e689      	b.n	800ce6e <_printf_float+0xc2>
 800d15a:	9a05      	ldr	r2, [sp, #20]
 800d15c:	464b      	mov	r3, r9
 800d15e:	4442      	add	r2, r8
 800d160:	4631      	mov	r1, r6
 800d162:	4628      	mov	r0, r5
 800d164:	47b8      	blx	r7
 800d166:	3001      	adds	r0, #1
 800d168:	d1c1      	bne.n	800d0ee <_printf_float+0x342>
 800d16a:	e680      	b.n	800ce6e <_printf_float+0xc2>
 800d16c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d16e:	2a01      	cmp	r2, #1
 800d170:	dc01      	bgt.n	800d176 <_printf_float+0x3ca>
 800d172:	07db      	lsls	r3, r3, #31
 800d174:	d538      	bpl.n	800d1e8 <_printf_float+0x43c>
 800d176:	2301      	movs	r3, #1
 800d178:	4642      	mov	r2, r8
 800d17a:	4631      	mov	r1, r6
 800d17c:	4628      	mov	r0, r5
 800d17e:	47b8      	blx	r7
 800d180:	3001      	adds	r0, #1
 800d182:	f43f ae74 	beq.w	800ce6e <_printf_float+0xc2>
 800d186:	ee18 3a10 	vmov	r3, s16
 800d18a:	4652      	mov	r2, sl
 800d18c:	4631      	mov	r1, r6
 800d18e:	4628      	mov	r0, r5
 800d190:	47b8      	blx	r7
 800d192:	3001      	adds	r0, #1
 800d194:	f43f ae6b 	beq.w	800ce6e <_printf_float+0xc2>
 800d198:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d19c:	2200      	movs	r2, #0
 800d19e:	2300      	movs	r3, #0
 800d1a0:	f7f3 fca2 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1a4:	b9d8      	cbnz	r0, 800d1de <_printf_float+0x432>
 800d1a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1a8:	f108 0201 	add.w	r2, r8, #1
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	47b8      	blx	r7
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d10e      	bne.n	800d1d6 <_printf_float+0x42a>
 800d1b8:	e659      	b.n	800ce6e <_printf_float+0xc2>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	4652      	mov	r2, sl
 800d1be:	4631      	mov	r1, r6
 800d1c0:	4628      	mov	r0, r5
 800d1c2:	47b8      	blx	r7
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	f43f ae52 	beq.w	800ce6e <_printf_float+0xc2>
 800d1ca:	f108 0801 	add.w	r8, r8, #1
 800d1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	4543      	cmp	r3, r8
 800d1d4:	dcf1      	bgt.n	800d1ba <_printf_float+0x40e>
 800d1d6:	464b      	mov	r3, r9
 800d1d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d1dc:	e6dc      	b.n	800cf98 <_printf_float+0x1ec>
 800d1de:	f04f 0800 	mov.w	r8, #0
 800d1e2:	f104 0a1a 	add.w	sl, r4, #26
 800d1e6:	e7f2      	b.n	800d1ce <_printf_float+0x422>
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	4642      	mov	r2, r8
 800d1ec:	e7df      	b.n	800d1ae <_printf_float+0x402>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	464a      	mov	r2, r9
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	47b8      	blx	r7
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	f43f ae38 	beq.w	800ce6e <_printf_float+0xc2>
 800d1fe:	f108 0801 	add.w	r8, r8, #1
 800d202:	68e3      	ldr	r3, [r4, #12]
 800d204:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d206:	1a5b      	subs	r3, r3, r1
 800d208:	4543      	cmp	r3, r8
 800d20a:	dcf0      	bgt.n	800d1ee <_printf_float+0x442>
 800d20c:	e6fa      	b.n	800d004 <_printf_float+0x258>
 800d20e:	f04f 0800 	mov.w	r8, #0
 800d212:	f104 0919 	add.w	r9, r4, #25
 800d216:	e7f4      	b.n	800d202 <_printf_float+0x456>

0800d218 <_printf_common>:
 800d218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d21c:	4616      	mov	r6, r2
 800d21e:	4699      	mov	r9, r3
 800d220:	688a      	ldr	r2, [r1, #8]
 800d222:	690b      	ldr	r3, [r1, #16]
 800d224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d228:	4293      	cmp	r3, r2
 800d22a:	bfb8      	it	lt
 800d22c:	4613      	movlt	r3, r2
 800d22e:	6033      	str	r3, [r6, #0]
 800d230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d234:	4607      	mov	r7, r0
 800d236:	460c      	mov	r4, r1
 800d238:	b10a      	cbz	r2, 800d23e <_printf_common+0x26>
 800d23a:	3301      	adds	r3, #1
 800d23c:	6033      	str	r3, [r6, #0]
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	0699      	lsls	r1, r3, #26
 800d242:	bf42      	ittt	mi
 800d244:	6833      	ldrmi	r3, [r6, #0]
 800d246:	3302      	addmi	r3, #2
 800d248:	6033      	strmi	r3, [r6, #0]
 800d24a:	6825      	ldr	r5, [r4, #0]
 800d24c:	f015 0506 	ands.w	r5, r5, #6
 800d250:	d106      	bne.n	800d260 <_printf_common+0x48>
 800d252:	f104 0a19 	add.w	sl, r4, #25
 800d256:	68e3      	ldr	r3, [r4, #12]
 800d258:	6832      	ldr	r2, [r6, #0]
 800d25a:	1a9b      	subs	r3, r3, r2
 800d25c:	42ab      	cmp	r3, r5
 800d25e:	dc26      	bgt.n	800d2ae <_printf_common+0x96>
 800d260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d264:	1e13      	subs	r3, r2, #0
 800d266:	6822      	ldr	r2, [r4, #0]
 800d268:	bf18      	it	ne
 800d26a:	2301      	movne	r3, #1
 800d26c:	0692      	lsls	r2, r2, #26
 800d26e:	d42b      	bmi.n	800d2c8 <_printf_common+0xb0>
 800d270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d274:	4649      	mov	r1, r9
 800d276:	4638      	mov	r0, r7
 800d278:	47c0      	blx	r8
 800d27a:	3001      	adds	r0, #1
 800d27c:	d01e      	beq.n	800d2bc <_printf_common+0xa4>
 800d27e:	6823      	ldr	r3, [r4, #0]
 800d280:	68e5      	ldr	r5, [r4, #12]
 800d282:	6832      	ldr	r2, [r6, #0]
 800d284:	f003 0306 	and.w	r3, r3, #6
 800d288:	2b04      	cmp	r3, #4
 800d28a:	bf08      	it	eq
 800d28c:	1aad      	subeq	r5, r5, r2
 800d28e:	68a3      	ldr	r3, [r4, #8]
 800d290:	6922      	ldr	r2, [r4, #16]
 800d292:	bf0c      	ite	eq
 800d294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d298:	2500      	movne	r5, #0
 800d29a:	4293      	cmp	r3, r2
 800d29c:	bfc4      	itt	gt
 800d29e:	1a9b      	subgt	r3, r3, r2
 800d2a0:	18ed      	addgt	r5, r5, r3
 800d2a2:	2600      	movs	r6, #0
 800d2a4:	341a      	adds	r4, #26
 800d2a6:	42b5      	cmp	r5, r6
 800d2a8:	d11a      	bne.n	800d2e0 <_printf_common+0xc8>
 800d2aa:	2000      	movs	r0, #0
 800d2ac:	e008      	b.n	800d2c0 <_printf_common+0xa8>
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	4652      	mov	r2, sl
 800d2b2:	4649      	mov	r1, r9
 800d2b4:	4638      	mov	r0, r7
 800d2b6:	47c0      	blx	r8
 800d2b8:	3001      	adds	r0, #1
 800d2ba:	d103      	bne.n	800d2c4 <_printf_common+0xac>
 800d2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2c4:	3501      	adds	r5, #1
 800d2c6:	e7c6      	b.n	800d256 <_printf_common+0x3e>
 800d2c8:	18e1      	adds	r1, r4, r3
 800d2ca:	1c5a      	adds	r2, r3, #1
 800d2cc:	2030      	movs	r0, #48	; 0x30
 800d2ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2d2:	4422      	add	r2, r4
 800d2d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2dc:	3302      	adds	r3, #2
 800d2de:	e7c7      	b.n	800d270 <_printf_common+0x58>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	4622      	mov	r2, r4
 800d2e4:	4649      	mov	r1, r9
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	47c0      	blx	r8
 800d2ea:	3001      	adds	r0, #1
 800d2ec:	d0e6      	beq.n	800d2bc <_printf_common+0xa4>
 800d2ee:	3601      	adds	r6, #1
 800d2f0:	e7d9      	b.n	800d2a6 <_printf_common+0x8e>
	...

0800d2f4 <_printf_i>:
 800d2f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	4691      	mov	r9, r2
 800d2fc:	7e27      	ldrb	r7, [r4, #24]
 800d2fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d300:	2f78      	cmp	r7, #120	; 0x78
 800d302:	4680      	mov	r8, r0
 800d304:	469a      	mov	sl, r3
 800d306:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d30a:	d807      	bhi.n	800d31c <_printf_i+0x28>
 800d30c:	2f62      	cmp	r7, #98	; 0x62
 800d30e:	d80a      	bhi.n	800d326 <_printf_i+0x32>
 800d310:	2f00      	cmp	r7, #0
 800d312:	f000 80d8 	beq.w	800d4c6 <_printf_i+0x1d2>
 800d316:	2f58      	cmp	r7, #88	; 0x58
 800d318:	f000 80a3 	beq.w	800d462 <_printf_i+0x16e>
 800d31c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d324:	e03a      	b.n	800d39c <_printf_i+0xa8>
 800d326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d32a:	2b15      	cmp	r3, #21
 800d32c:	d8f6      	bhi.n	800d31c <_printf_i+0x28>
 800d32e:	a001      	add	r0, pc, #4	; (adr r0, 800d334 <_printf_i+0x40>)
 800d330:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d334:	0800d38d 	.word	0x0800d38d
 800d338:	0800d3a1 	.word	0x0800d3a1
 800d33c:	0800d31d 	.word	0x0800d31d
 800d340:	0800d31d 	.word	0x0800d31d
 800d344:	0800d31d 	.word	0x0800d31d
 800d348:	0800d31d 	.word	0x0800d31d
 800d34c:	0800d3a1 	.word	0x0800d3a1
 800d350:	0800d31d 	.word	0x0800d31d
 800d354:	0800d31d 	.word	0x0800d31d
 800d358:	0800d31d 	.word	0x0800d31d
 800d35c:	0800d31d 	.word	0x0800d31d
 800d360:	0800d4ad 	.word	0x0800d4ad
 800d364:	0800d3d1 	.word	0x0800d3d1
 800d368:	0800d48f 	.word	0x0800d48f
 800d36c:	0800d31d 	.word	0x0800d31d
 800d370:	0800d31d 	.word	0x0800d31d
 800d374:	0800d4cf 	.word	0x0800d4cf
 800d378:	0800d31d 	.word	0x0800d31d
 800d37c:	0800d3d1 	.word	0x0800d3d1
 800d380:	0800d31d 	.word	0x0800d31d
 800d384:	0800d31d 	.word	0x0800d31d
 800d388:	0800d497 	.word	0x0800d497
 800d38c:	680b      	ldr	r3, [r1, #0]
 800d38e:	1d1a      	adds	r2, r3, #4
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	600a      	str	r2, [r1, #0]
 800d394:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d39c:	2301      	movs	r3, #1
 800d39e:	e0a3      	b.n	800d4e8 <_printf_i+0x1f4>
 800d3a0:	6825      	ldr	r5, [r4, #0]
 800d3a2:	6808      	ldr	r0, [r1, #0]
 800d3a4:	062e      	lsls	r6, r5, #24
 800d3a6:	f100 0304 	add.w	r3, r0, #4
 800d3aa:	d50a      	bpl.n	800d3c2 <_printf_i+0xce>
 800d3ac:	6805      	ldr	r5, [r0, #0]
 800d3ae:	600b      	str	r3, [r1, #0]
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	da03      	bge.n	800d3bc <_printf_i+0xc8>
 800d3b4:	232d      	movs	r3, #45	; 0x2d
 800d3b6:	426d      	negs	r5, r5
 800d3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3bc:	485e      	ldr	r0, [pc, #376]	; (800d538 <_printf_i+0x244>)
 800d3be:	230a      	movs	r3, #10
 800d3c0:	e019      	b.n	800d3f6 <_printf_i+0x102>
 800d3c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d3c6:	6805      	ldr	r5, [r0, #0]
 800d3c8:	600b      	str	r3, [r1, #0]
 800d3ca:	bf18      	it	ne
 800d3cc:	b22d      	sxthne	r5, r5
 800d3ce:	e7ef      	b.n	800d3b0 <_printf_i+0xbc>
 800d3d0:	680b      	ldr	r3, [r1, #0]
 800d3d2:	6825      	ldr	r5, [r4, #0]
 800d3d4:	1d18      	adds	r0, r3, #4
 800d3d6:	6008      	str	r0, [r1, #0]
 800d3d8:	0628      	lsls	r0, r5, #24
 800d3da:	d501      	bpl.n	800d3e0 <_printf_i+0xec>
 800d3dc:	681d      	ldr	r5, [r3, #0]
 800d3de:	e002      	b.n	800d3e6 <_printf_i+0xf2>
 800d3e0:	0669      	lsls	r1, r5, #25
 800d3e2:	d5fb      	bpl.n	800d3dc <_printf_i+0xe8>
 800d3e4:	881d      	ldrh	r5, [r3, #0]
 800d3e6:	4854      	ldr	r0, [pc, #336]	; (800d538 <_printf_i+0x244>)
 800d3e8:	2f6f      	cmp	r7, #111	; 0x6f
 800d3ea:	bf0c      	ite	eq
 800d3ec:	2308      	moveq	r3, #8
 800d3ee:	230a      	movne	r3, #10
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3f6:	6866      	ldr	r6, [r4, #4]
 800d3f8:	60a6      	str	r6, [r4, #8]
 800d3fa:	2e00      	cmp	r6, #0
 800d3fc:	bfa2      	ittt	ge
 800d3fe:	6821      	ldrge	r1, [r4, #0]
 800d400:	f021 0104 	bicge.w	r1, r1, #4
 800d404:	6021      	strge	r1, [r4, #0]
 800d406:	b90d      	cbnz	r5, 800d40c <_printf_i+0x118>
 800d408:	2e00      	cmp	r6, #0
 800d40a:	d04d      	beq.n	800d4a8 <_printf_i+0x1b4>
 800d40c:	4616      	mov	r6, r2
 800d40e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d412:	fb03 5711 	mls	r7, r3, r1, r5
 800d416:	5dc7      	ldrb	r7, [r0, r7]
 800d418:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d41c:	462f      	mov	r7, r5
 800d41e:	42bb      	cmp	r3, r7
 800d420:	460d      	mov	r5, r1
 800d422:	d9f4      	bls.n	800d40e <_printf_i+0x11a>
 800d424:	2b08      	cmp	r3, #8
 800d426:	d10b      	bne.n	800d440 <_printf_i+0x14c>
 800d428:	6823      	ldr	r3, [r4, #0]
 800d42a:	07df      	lsls	r7, r3, #31
 800d42c:	d508      	bpl.n	800d440 <_printf_i+0x14c>
 800d42e:	6923      	ldr	r3, [r4, #16]
 800d430:	6861      	ldr	r1, [r4, #4]
 800d432:	4299      	cmp	r1, r3
 800d434:	bfde      	ittt	le
 800d436:	2330      	movle	r3, #48	; 0x30
 800d438:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d43c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d440:	1b92      	subs	r2, r2, r6
 800d442:	6122      	str	r2, [r4, #16]
 800d444:	f8cd a000 	str.w	sl, [sp]
 800d448:	464b      	mov	r3, r9
 800d44a:	aa03      	add	r2, sp, #12
 800d44c:	4621      	mov	r1, r4
 800d44e:	4640      	mov	r0, r8
 800d450:	f7ff fee2 	bl	800d218 <_printf_common>
 800d454:	3001      	adds	r0, #1
 800d456:	d14c      	bne.n	800d4f2 <_printf_i+0x1fe>
 800d458:	f04f 30ff 	mov.w	r0, #4294967295
 800d45c:	b004      	add	sp, #16
 800d45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d462:	4835      	ldr	r0, [pc, #212]	; (800d538 <_printf_i+0x244>)
 800d464:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	680e      	ldr	r6, [r1, #0]
 800d46c:	061f      	lsls	r7, r3, #24
 800d46e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d472:	600e      	str	r6, [r1, #0]
 800d474:	d514      	bpl.n	800d4a0 <_printf_i+0x1ac>
 800d476:	07d9      	lsls	r1, r3, #31
 800d478:	bf44      	itt	mi
 800d47a:	f043 0320 	orrmi.w	r3, r3, #32
 800d47e:	6023      	strmi	r3, [r4, #0]
 800d480:	b91d      	cbnz	r5, 800d48a <_printf_i+0x196>
 800d482:	6823      	ldr	r3, [r4, #0]
 800d484:	f023 0320 	bic.w	r3, r3, #32
 800d488:	6023      	str	r3, [r4, #0]
 800d48a:	2310      	movs	r3, #16
 800d48c:	e7b0      	b.n	800d3f0 <_printf_i+0xfc>
 800d48e:	6823      	ldr	r3, [r4, #0]
 800d490:	f043 0320 	orr.w	r3, r3, #32
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	2378      	movs	r3, #120	; 0x78
 800d498:	4828      	ldr	r0, [pc, #160]	; (800d53c <_printf_i+0x248>)
 800d49a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d49e:	e7e3      	b.n	800d468 <_printf_i+0x174>
 800d4a0:	065e      	lsls	r6, r3, #25
 800d4a2:	bf48      	it	mi
 800d4a4:	b2ad      	uxthmi	r5, r5
 800d4a6:	e7e6      	b.n	800d476 <_printf_i+0x182>
 800d4a8:	4616      	mov	r6, r2
 800d4aa:	e7bb      	b.n	800d424 <_printf_i+0x130>
 800d4ac:	680b      	ldr	r3, [r1, #0]
 800d4ae:	6826      	ldr	r6, [r4, #0]
 800d4b0:	6960      	ldr	r0, [r4, #20]
 800d4b2:	1d1d      	adds	r5, r3, #4
 800d4b4:	600d      	str	r5, [r1, #0]
 800d4b6:	0635      	lsls	r5, r6, #24
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	d501      	bpl.n	800d4c0 <_printf_i+0x1cc>
 800d4bc:	6018      	str	r0, [r3, #0]
 800d4be:	e002      	b.n	800d4c6 <_printf_i+0x1d2>
 800d4c0:	0671      	lsls	r1, r6, #25
 800d4c2:	d5fb      	bpl.n	800d4bc <_printf_i+0x1c8>
 800d4c4:	8018      	strh	r0, [r3, #0]
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	6123      	str	r3, [r4, #16]
 800d4ca:	4616      	mov	r6, r2
 800d4cc:	e7ba      	b.n	800d444 <_printf_i+0x150>
 800d4ce:	680b      	ldr	r3, [r1, #0]
 800d4d0:	1d1a      	adds	r2, r3, #4
 800d4d2:	600a      	str	r2, [r1, #0]
 800d4d4:	681e      	ldr	r6, [r3, #0]
 800d4d6:	6862      	ldr	r2, [r4, #4]
 800d4d8:	2100      	movs	r1, #0
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f7f2 fe90 	bl	8000200 <memchr>
 800d4e0:	b108      	cbz	r0, 800d4e6 <_printf_i+0x1f2>
 800d4e2:	1b80      	subs	r0, r0, r6
 800d4e4:	6060      	str	r0, [r4, #4]
 800d4e6:	6863      	ldr	r3, [r4, #4]
 800d4e8:	6123      	str	r3, [r4, #16]
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4f0:	e7a8      	b.n	800d444 <_printf_i+0x150>
 800d4f2:	6923      	ldr	r3, [r4, #16]
 800d4f4:	4632      	mov	r2, r6
 800d4f6:	4649      	mov	r1, r9
 800d4f8:	4640      	mov	r0, r8
 800d4fa:	47d0      	blx	sl
 800d4fc:	3001      	adds	r0, #1
 800d4fe:	d0ab      	beq.n	800d458 <_printf_i+0x164>
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	079b      	lsls	r3, r3, #30
 800d504:	d413      	bmi.n	800d52e <_printf_i+0x23a>
 800d506:	68e0      	ldr	r0, [r4, #12]
 800d508:	9b03      	ldr	r3, [sp, #12]
 800d50a:	4298      	cmp	r0, r3
 800d50c:	bfb8      	it	lt
 800d50e:	4618      	movlt	r0, r3
 800d510:	e7a4      	b.n	800d45c <_printf_i+0x168>
 800d512:	2301      	movs	r3, #1
 800d514:	4632      	mov	r2, r6
 800d516:	4649      	mov	r1, r9
 800d518:	4640      	mov	r0, r8
 800d51a:	47d0      	blx	sl
 800d51c:	3001      	adds	r0, #1
 800d51e:	d09b      	beq.n	800d458 <_printf_i+0x164>
 800d520:	3501      	adds	r5, #1
 800d522:	68e3      	ldr	r3, [r4, #12]
 800d524:	9903      	ldr	r1, [sp, #12]
 800d526:	1a5b      	subs	r3, r3, r1
 800d528:	42ab      	cmp	r3, r5
 800d52a:	dcf2      	bgt.n	800d512 <_printf_i+0x21e>
 800d52c:	e7eb      	b.n	800d506 <_printf_i+0x212>
 800d52e:	2500      	movs	r5, #0
 800d530:	f104 0619 	add.w	r6, r4, #25
 800d534:	e7f5      	b.n	800d522 <_printf_i+0x22e>
 800d536:	bf00      	nop
 800d538:	080117ba 	.word	0x080117ba
 800d53c:	080117cb 	.word	0x080117cb

0800d540 <_scanf_float>:
 800d540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d544:	b087      	sub	sp, #28
 800d546:	4617      	mov	r7, r2
 800d548:	9303      	str	r3, [sp, #12]
 800d54a:	688b      	ldr	r3, [r1, #8]
 800d54c:	1e5a      	subs	r2, r3, #1
 800d54e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d552:	bf83      	ittte	hi
 800d554:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d558:	195b      	addhi	r3, r3, r5
 800d55a:	9302      	strhi	r3, [sp, #8]
 800d55c:	2300      	movls	r3, #0
 800d55e:	bf86      	itte	hi
 800d560:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d564:	608b      	strhi	r3, [r1, #8]
 800d566:	9302      	strls	r3, [sp, #8]
 800d568:	680b      	ldr	r3, [r1, #0]
 800d56a:	468b      	mov	fp, r1
 800d56c:	2500      	movs	r5, #0
 800d56e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d572:	f84b 3b1c 	str.w	r3, [fp], #28
 800d576:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d57a:	4680      	mov	r8, r0
 800d57c:	460c      	mov	r4, r1
 800d57e:	465e      	mov	r6, fp
 800d580:	46aa      	mov	sl, r5
 800d582:	46a9      	mov	r9, r5
 800d584:	9501      	str	r5, [sp, #4]
 800d586:	68a2      	ldr	r2, [r4, #8]
 800d588:	b152      	cbz	r2, 800d5a0 <_scanf_float+0x60>
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	2b4e      	cmp	r3, #78	; 0x4e
 800d590:	d864      	bhi.n	800d65c <_scanf_float+0x11c>
 800d592:	2b40      	cmp	r3, #64	; 0x40
 800d594:	d83c      	bhi.n	800d610 <_scanf_float+0xd0>
 800d596:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d59a:	b2c8      	uxtb	r0, r1
 800d59c:	280e      	cmp	r0, #14
 800d59e:	d93a      	bls.n	800d616 <_scanf_float+0xd6>
 800d5a0:	f1b9 0f00 	cmp.w	r9, #0
 800d5a4:	d003      	beq.n	800d5ae <_scanf_float+0x6e>
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5b2:	f1ba 0f01 	cmp.w	sl, #1
 800d5b6:	f200 8113 	bhi.w	800d7e0 <_scanf_float+0x2a0>
 800d5ba:	455e      	cmp	r6, fp
 800d5bc:	f200 8105 	bhi.w	800d7ca <_scanf_float+0x28a>
 800d5c0:	2501      	movs	r5, #1
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	b007      	add	sp, #28
 800d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d5ce:	2a0d      	cmp	r2, #13
 800d5d0:	d8e6      	bhi.n	800d5a0 <_scanf_float+0x60>
 800d5d2:	a101      	add	r1, pc, #4	; (adr r1, 800d5d8 <_scanf_float+0x98>)
 800d5d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d5d8:	0800d717 	.word	0x0800d717
 800d5dc:	0800d5a1 	.word	0x0800d5a1
 800d5e0:	0800d5a1 	.word	0x0800d5a1
 800d5e4:	0800d5a1 	.word	0x0800d5a1
 800d5e8:	0800d777 	.word	0x0800d777
 800d5ec:	0800d74f 	.word	0x0800d74f
 800d5f0:	0800d5a1 	.word	0x0800d5a1
 800d5f4:	0800d5a1 	.word	0x0800d5a1
 800d5f8:	0800d725 	.word	0x0800d725
 800d5fc:	0800d5a1 	.word	0x0800d5a1
 800d600:	0800d5a1 	.word	0x0800d5a1
 800d604:	0800d5a1 	.word	0x0800d5a1
 800d608:	0800d5a1 	.word	0x0800d5a1
 800d60c:	0800d6dd 	.word	0x0800d6dd
 800d610:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d614:	e7db      	b.n	800d5ce <_scanf_float+0x8e>
 800d616:	290e      	cmp	r1, #14
 800d618:	d8c2      	bhi.n	800d5a0 <_scanf_float+0x60>
 800d61a:	a001      	add	r0, pc, #4	; (adr r0, 800d620 <_scanf_float+0xe0>)
 800d61c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d620:	0800d6cf 	.word	0x0800d6cf
 800d624:	0800d5a1 	.word	0x0800d5a1
 800d628:	0800d6cf 	.word	0x0800d6cf
 800d62c:	0800d763 	.word	0x0800d763
 800d630:	0800d5a1 	.word	0x0800d5a1
 800d634:	0800d67d 	.word	0x0800d67d
 800d638:	0800d6b9 	.word	0x0800d6b9
 800d63c:	0800d6b9 	.word	0x0800d6b9
 800d640:	0800d6b9 	.word	0x0800d6b9
 800d644:	0800d6b9 	.word	0x0800d6b9
 800d648:	0800d6b9 	.word	0x0800d6b9
 800d64c:	0800d6b9 	.word	0x0800d6b9
 800d650:	0800d6b9 	.word	0x0800d6b9
 800d654:	0800d6b9 	.word	0x0800d6b9
 800d658:	0800d6b9 	.word	0x0800d6b9
 800d65c:	2b6e      	cmp	r3, #110	; 0x6e
 800d65e:	d809      	bhi.n	800d674 <_scanf_float+0x134>
 800d660:	2b60      	cmp	r3, #96	; 0x60
 800d662:	d8b2      	bhi.n	800d5ca <_scanf_float+0x8a>
 800d664:	2b54      	cmp	r3, #84	; 0x54
 800d666:	d077      	beq.n	800d758 <_scanf_float+0x218>
 800d668:	2b59      	cmp	r3, #89	; 0x59
 800d66a:	d199      	bne.n	800d5a0 <_scanf_float+0x60>
 800d66c:	2d07      	cmp	r5, #7
 800d66e:	d197      	bne.n	800d5a0 <_scanf_float+0x60>
 800d670:	2508      	movs	r5, #8
 800d672:	e029      	b.n	800d6c8 <_scanf_float+0x188>
 800d674:	2b74      	cmp	r3, #116	; 0x74
 800d676:	d06f      	beq.n	800d758 <_scanf_float+0x218>
 800d678:	2b79      	cmp	r3, #121	; 0x79
 800d67a:	e7f6      	b.n	800d66a <_scanf_float+0x12a>
 800d67c:	6821      	ldr	r1, [r4, #0]
 800d67e:	05c8      	lsls	r0, r1, #23
 800d680:	d51a      	bpl.n	800d6b8 <_scanf_float+0x178>
 800d682:	9b02      	ldr	r3, [sp, #8]
 800d684:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d688:	6021      	str	r1, [r4, #0]
 800d68a:	f109 0901 	add.w	r9, r9, #1
 800d68e:	b11b      	cbz	r3, 800d698 <_scanf_float+0x158>
 800d690:	3b01      	subs	r3, #1
 800d692:	3201      	adds	r2, #1
 800d694:	9302      	str	r3, [sp, #8]
 800d696:	60a2      	str	r2, [r4, #8]
 800d698:	68a3      	ldr	r3, [r4, #8]
 800d69a:	3b01      	subs	r3, #1
 800d69c:	60a3      	str	r3, [r4, #8]
 800d69e:	6923      	ldr	r3, [r4, #16]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	6123      	str	r3, [r4, #16]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	607b      	str	r3, [r7, #4]
 800d6ac:	f340 8084 	ble.w	800d7b8 <_scanf_float+0x278>
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	603b      	str	r3, [r7, #0]
 800d6b6:	e766      	b.n	800d586 <_scanf_float+0x46>
 800d6b8:	eb1a 0f05 	cmn.w	sl, r5
 800d6bc:	f47f af70 	bne.w	800d5a0 <_scanf_float+0x60>
 800d6c0:	6822      	ldr	r2, [r4, #0]
 800d6c2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d6c6:	6022      	str	r2, [r4, #0]
 800d6c8:	f806 3b01 	strb.w	r3, [r6], #1
 800d6cc:	e7e4      	b.n	800d698 <_scanf_float+0x158>
 800d6ce:	6822      	ldr	r2, [r4, #0]
 800d6d0:	0610      	lsls	r0, r2, #24
 800d6d2:	f57f af65 	bpl.w	800d5a0 <_scanf_float+0x60>
 800d6d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6da:	e7f4      	b.n	800d6c6 <_scanf_float+0x186>
 800d6dc:	f1ba 0f00 	cmp.w	sl, #0
 800d6e0:	d10e      	bne.n	800d700 <_scanf_float+0x1c0>
 800d6e2:	f1b9 0f00 	cmp.w	r9, #0
 800d6e6:	d10e      	bne.n	800d706 <_scanf_float+0x1c6>
 800d6e8:	6822      	ldr	r2, [r4, #0]
 800d6ea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d6ee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d6f2:	d108      	bne.n	800d706 <_scanf_float+0x1c6>
 800d6f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d6f8:	6022      	str	r2, [r4, #0]
 800d6fa:	f04f 0a01 	mov.w	sl, #1
 800d6fe:	e7e3      	b.n	800d6c8 <_scanf_float+0x188>
 800d700:	f1ba 0f02 	cmp.w	sl, #2
 800d704:	d055      	beq.n	800d7b2 <_scanf_float+0x272>
 800d706:	2d01      	cmp	r5, #1
 800d708:	d002      	beq.n	800d710 <_scanf_float+0x1d0>
 800d70a:	2d04      	cmp	r5, #4
 800d70c:	f47f af48 	bne.w	800d5a0 <_scanf_float+0x60>
 800d710:	3501      	adds	r5, #1
 800d712:	b2ed      	uxtb	r5, r5
 800d714:	e7d8      	b.n	800d6c8 <_scanf_float+0x188>
 800d716:	f1ba 0f01 	cmp.w	sl, #1
 800d71a:	f47f af41 	bne.w	800d5a0 <_scanf_float+0x60>
 800d71e:	f04f 0a02 	mov.w	sl, #2
 800d722:	e7d1      	b.n	800d6c8 <_scanf_float+0x188>
 800d724:	b97d      	cbnz	r5, 800d746 <_scanf_float+0x206>
 800d726:	f1b9 0f00 	cmp.w	r9, #0
 800d72a:	f47f af3c 	bne.w	800d5a6 <_scanf_float+0x66>
 800d72e:	6822      	ldr	r2, [r4, #0]
 800d730:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d734:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d738:	f47f af39 	bne.w	800d5ae <_scanf_float+0x6e>
 800d73c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d740:	6022      	str	r2, [r4, #0]
 800d742:	2501      	movs	r5, #1
 800d744:	e7c0      	b.n	800d6c8 <_scanf_float+0x188>
 800d746:	2d03      	cmp	r5, #3
 800d748:	d0e2      	beq.n	800d710 <_scanf_float+0x1d0>
 800d74a:	2d05      	cmp	r5, #5
 800d74c:	e7de      	b.n	800d70c <_scanf_float+0x1cc>
 800d74e:	2d02      	cmp	r5, #2
 800d750:	f47f af26 	bne.w	800d5a0 <_scanf_float+0x60>
 800d754:	2503      	movs	r5, #3
 800d756:	e7b7      	b.n	800d6c8 <_scanf_float+0x188>
 800d758:	2d06      	cmp	r5, #6
 800d75a:	f47f af21 	bne.w	800d5a0 <_scanf_float+0x60>
 800d75e:	2507      	movs	r5, #7
 800d760:	e7b2      	b.n	800d6c8 <_scanf_float+0x188>
 800d762:	6822      	ldr	r2, [r4, #0]
 800d764:	0591      	lsls	r1, r2, #22
 800d766:	f57f af1b 	bpl.w	800d5a0 <_scanf_float+0x60>
 800d76a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d76e:	6022      	str	r2, [r4, #0]
 800d770:	f8cd 9004 	str.w	r9, [sp, #4]
 800d774:	e7a8      	b.n	800d6c8 <_scanf_float+0x188>
 800d776:	6822      	ldr	r2, [r4, #0]
 800d778:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d77c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d780:	d006      	beq.n	800d790 <_scanf_float+0x250>
 800d782:	0550      	lsls	r0, r2, #21
 800d784:	f57f af0c 	bpl.w	800d5a0 <_scanf_float+0x60>
 800d788:	f1b9 0f00 	cmp.w	r9, #0
 800d78c:	f43f af0f 	beq.w	800d5ae <_scanf_float+0x6e>
 800d790:	0591      	lsls	r1, r2, #22
 800d792:	bf58      	it	pl
 800d794:	9901      	ldrpl	r1, [sp, #4]
 800d796:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d79a:	bf58      	it	pl
 800d79c:	eba9 0101 	subpl.w	r1, r9, r1
 800d7a0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d7a4:	bf58      	it	pl
 800d7a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d7aa:	6022      	str	r2, [r4, #0]
 800d7ac:	f04f 0900 	mov.w	r9, #0
 800d7b0:	e78a      	b.n	800d6c8 <_scanf_float+0x188>
 800d7b2:	f04f 0a03 	mov.w	sl, #3
 800d7b6:	e787      	b.n	800d6c8 <_scanf_float+0x188>
 800d7b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d7bc:	4639      	mov	r1, r7
 800d7be:	4640      	mov	r0, r8
 800d7c0:	4798      	blx	r3
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	f43f aedf 	beq.w	800d586 <_scanf_float+0x46>
 800d7c8:	e6ea      	b.n	800d5a0 <_scanf_float+0x60>
 800d7ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d7d2:	463a      	mov	r2, r7
 800d7d4:	4640      	mov	r0, r8
 800d7d6:	4798      	blx	r3
 800d7d8:	6923      	ldr	r3, [r4, #16]
 800d7da:	3b01      	subs	r3, #1
 800d7dc:	6123      	str	r3, [r4, #16]
 800d7de:	e6ec      	b.n	800d5ba <_scanf_float+0x7a>
 800d7e0:	1e6b      	subs	r3, r5, #1
 800d7e2:	2b06      	cmp	r3, #6
 800d7e4:	d825      	bhi.n	800d832 <_scanf_float+0x2f2>
 800d7e6:	2d02      	cmp	r5, #2
 800d7e8:	d836      	bhi.n	800d858 <_scanf_float+0x318>
 800d7ea:	455e      	cmp	r6, fp
 800d7ec:	f67f aee8 	bls.w	800d5c0 <_scanf_float+0x80>
 800d7f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d7f4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d7f8:	463a      	mov	r2, r7
 800d7fa:	4640      	mov	r0, r8
 800d7fc:	4798      	blx	r3
 800d7fe:	6923      	ldr	r3, [r4, #16]
 800d800:	3b01      	subs	r3, #1
 800d802:	6123      	str	r3, [r4, #16]
 800d804:	e7f1      	b.n	800d7ea <_scanf_float+0x2aa>
 800d806:	9802      	ldr	r0, [sp, #8]
 800d808:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d80c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d810:	9002      	str	r0, [sp, #8]
 800d812:	463a      	mov	r2, r7
 800d814:	4640      	mov	r0, r8
 800d816:	4798      	blx	r3
 800d818:	6923      	ldr	r3, [r4, #16]
 800d81a:	3b01      	subs	r3, #1
 800d81c:	6123      	str	r3, [r4, #16]
 800d81e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d822:	fa5f fa8a 	uxtb.w	sl, sl
 800d826:	f1ba 0f02 	cmp.w	sl, #2
 800d82a:	d1ec      	bne.n	800d806 <_scanf_float+0x2c6>
 800d82c:	3d03      	subs	r5, #3
 800d82e:	b2ed      	uxtb	r5, r5
 800d830:	1b76      	subs	r6, r6, r5
 800d832:	6823      	ldr	r3, [r4, #0]
 800d834:	05da      	lsls	r2, r3, #23
 800d836:	d52f      	bpl.n	800d898 <_scanf_float+0x358>
 800d838:	055b      	lsls	r3, r3, #21
 800d83a:	d510      	bpl.n	800d85e <_scanf_float+0x31e>
 800d83c:	455e      	cmp	r6, fp
 800d83e:	f67f aebf 	bls.w	800d5c0 <_scanf_float+0x80>
 800d842:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d846:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d84a:	463a      	mov	r2, r7
 800d84c:	4640      	mov	r0, r8
 800d84e:	4798      	blx	r3
 800d850:	6923      	ldr	r3, [r4, #16]
 800d852:	3b01      	subs	r3, #1
 800d854:	6123      	str	r3, [r4, #16]
 800d856:	e7f1      	b.n	800d83c <_scanf_float+0x2fc>
 800d858:	46aa      	mov	sl, r5
 800d85a:	9602      	str	r6, [sp, #8]
 800d85c:	e7df      	b.n	800d81e <_scanf_float+0x2de>
 800d85e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d862:	6923      	ldr	r3, [r4, #16]
 800d864:	2965      	cmp	r1, #101	; 0x65
 800d866:	f103 33ff 	add.w	r3, r3, #4294967295
 800d86a:	f106 35ff 	add.w	r5, r6, #4294967295
 800d86e:	6123      	str	r3, [r4, #16]
 800d870:	d00c      	beq.n	800d88c <_scanf_float+0x34c>
 800d872:	2945      	cmp	r1, #69	; 0x45
 800d874:	d00a      	beq.n	800d88c <_scanf_float+0x34c>
 800d876:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d87a:	463a      	mov	r2, r7
 800d87c:	4640      	mov	r0, r8
 800d87e:	4798      	blx	r3
 800d880:	6923      	ldr	r3, [r4, #16]
 800d882:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d886:	3b01      	subs	r3, #1
 800d888:	1eb5      	subs	r5, r6, #2
 800d88a:	6123      	str	r3, [r4, #16]
 800d88c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d890:	463a      	mov	r2, r7
 800d892:	4640      	mov	r0, r8
 800d894:	4798      	blx	r3
 800d896:	462e      	mov	r6, r5
 800d898:	6825      	ldr	r5, [r4, #0]
 800d89a:	f015 0510 	ands.w	r5, r5, #16
 800d89e:	d158      	bne.n	800d952 <_scanf_float+0x412>
 800d8a0:	7035      	strb	r5, [r6, #0]
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d8a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8ac:	d11c      	bne.n	800d8e8 <_scanf_float+0x3a8>
 800d8ae:	9b01      	ldr	r3, [sp, #4]
 800d8b0:	454b      	cmp	r3, r9
 800d8b2:	eba3 0209 	sub.w	r2, r3, r9
 800d8b6:	d124      	bne.n	800d902 <_scanf_float+0x3c2>
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	4659      	mov	r1, fp
 800d8bc:	4640      	mov	r0, r8
 800d8be:	f000 ff09 	bl	800e6d4 <_strtod_r>
 800d8c2:	9b03      	ldr	r3, [sp, #12]
 800d8c4:	6821      	ldr	r1, [r4, #0]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f011 0f02 	tst.w	r1, #2
 800d8cc:	ec57 6b10 	vmov	r6, r7, d0
 800d8d0:	f103 0204 	add.w	r2, r3, #4
 800d8d4:	d020      	beq.n	800d918 <_scanf_float+0x3d8>
 800d8d6:	9903      	ldr	r1, [sp, #12]
 800d8d8:	600a      	str	r2, [r1, #0]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	e9c3 6700 	strd	r6, r7, [r3]
 800d8e0:	68e3      	ldr	r3, [r4, #12]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	60e3      	str	r3, [r4, #12]
 800d8e6:	e66c      	b.n	800d5c2 <_scanf_float+0x82>
 800d8e8:	9b04      	ldr	r3, [sp, #16]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d0e4      	beq.n	800d8b8 <_scanf_float+0x378>
 800d8ee:	9905      	ldr	r1, [sp, #20]
 800d8f0:	230a      	movs	r3, #10
 800d8f2:	462a      	mov	r2, r5
 800d8f4:	3101      	adds	r1, #1
 800d8f6:	4640      	mov	r0, r8
 800d8f8:	f000 ff76 	bl	800e7e8 <_strtol_r>
 800d8fc:	9b04      	ldr	r3, [sp, #16]
 800d8fe:	9e05      	ldr	r6, [sp, #20]
 800d900:	1ac2      	subs	r2, r0, r3
 800d902:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d906:	429e      	cmp	r6, r3
 800d908:	bf28      	it	cs
 800d90a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d90e:	4912      	ldr	r1, [pc, #72]	; (800d958 <_scanf_float+0x418>)
 800d910:	4630      	mov	r0, r6
 800d912:	f000 f83b 	bl	800d98c <siprintf>
 800d916:	e7cf      	b.n	800d8b8 <_scanf_float+0x378>
 800d918:	f011 0f04 	tst.w	r1, #4
 800d91c:	9903      	ldr	r1, [sp, #12]
 800d91e:	600a      	str	r2, [r1, #0]
 800d920:	d1db      	bne.n	800d8da <_scanf_float+0x39a>
 800d922:	f8d3 8000 	ldr.w	r8, [r3]
 800d926:	ee10 2a10 	vmov	r2, s0
 800d92a:	ee10 0a10 	vmov	r0, s0
 800d92e:	463b      	mov	r3, r7
 800d930:	4639      	mov	r1, r7
 800d932:	f7f3 f90b 	bl	8000b4c <__aeabi_dcmpun>
 800d936:	b128      	cbz	r0, 800d944 <_scanf_float+0x404>
 800d938:	4808      	ldr	r0, [pc, #32]	; (800d95c <_scanf_float+0x41c>)
 800d93a:	f000 f821 	bl	800d980 <nanf>
 800d93e:	ed88 0a00 	vstr	s0, [r8]
 800d942:	e7cd      	b.n	800d8e0 <_scanf_float+0x3a0>
 800d944:	4630      	mov	r0, r6
 800d946:	4639      	mov	r1, r7
 800d948:	f7f3 f95e 	bl	8000c08 <__aeabi_d2f>
 800d94c:	f8c8 0000 	str.w	r0, [r8]
 800d950:	e7c6      	b.n	800d8e0 <_scanf_float+0x3a0>
 800d952:	2500      	movs	r5, #0
 800d954:	e635      	b.n	800d5c2 <_scanf_float+0x82>
 800d956:	bf00      	nop
 800d958:	080117dc 	.word	0x080117dc
 800d95c:	08011b58 	.word	0x08011b58

0800d960 <_sbrk_r>:
 800d960:	b538      	push	{r3, r4, r5, lr}
 800d962:	4d06      	ldr	r5, [pc, #24]	; (800d97c <_sbrk_r+0x1c>)
 800d964:	2300      	movs	r3, #0
 800d966:	4604      	mov	r4, r0
 800d968:	4608      	mov	r0, r1
 800d96a:	602b      	str	r3, [r5, #0]
 800d96c:	f7f6 f916 	bl	8003b9c <_sbrk>
 800d970:	1c43      	adds	r3, r0, #1
 800d972:	d102      	bne.n	800d97a <_sbrk_r+0x1a>
 800d974:	682b      	ldr	r3, [r5, #0]
 800d976:	b103      	cbz	r3, 800d97a <_sbrk_r+0x1a>
 800d978:	6023      	str	r3, [r4, #0]
 800d97a:	bd38      	pop	{r3, r4, r5, pc}
 800d97c:	20001794 	.word	0x20001794

0800d980 <nanf>:
 800d980:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d988 <nanf+0x8>
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	7fc00000 	.word	0x7fc00000

0800d98c <siprintf>:
 800d98c:	b40e      	push	{r1, r2, r3}
 800d98e:	b500      	push	{lr}
 800d990:	b09c      	sub	sp, #112	; 0x70
 800d992:	ab1d      	add	r3, sp, #116	; 0x74
 800d994:	9002      	str	r0, [sp, #8]
 800d996:	9006      	str	r0, [sp, #24]
 800d998:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d99c:	4809      	ldr	r0, [pc, #36]	; (800d9c4 <siprintf+0x38>)
 800d99e:	9107      	str	r1, [sp, #28]
 800d9a0:	9104      	str	r1, [sp, #16]
 800d9a2:	4909      	ldr	r1, [pc, #36]	; (800d9c8 <siprintf+0x3c>)
 800d9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9a8:	9105      	str	r1, [sp, #20]
 800d9aa:	6800      	ldr	r0, [r0, #0]
 800d9ac:	9301      	str	r3, [sp, #4]
 800d9ae:	a902      	add	r1, sp, #8
 800d9b0:	f003 f9a2 	bl	8010cf8 <_svfiprintf_r>
 800d9b4:	9b02      	ldr	r3, [sp, #8]
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	701a      	strb	r2, [r3, #0]
 800d9ba:	b01c      	add	sp, #112	; 0x70
 800d9bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d9c0:	b003      	add	sp, #12
 800d9c2:	4770      	bx	lr
 800d9c4:	20000024 	.word	0x20000024
 800d9c8:	ffff0208 	.word	0xffff0208

0800d9cc <__sread>:
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d4:	f003 fbea 	bl	80111ac <_read_r>
 800d9d8:	2800      	cmp	r0, #0
 800d9da:	bfab      	itete	ge
 800d9dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d9de:	89a3      	ldrhlt	r3, [r4, #12]
 800d9e0:	181b      	addge	r3, r3, r0
 800d9e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d9e6:	bfac      	ite	ge
 800d9e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d9ea:	81a3      	strhlt	r3, [r4, #12]
 800d9ec:	bd10      	pop	{r4, pc}

0800d9ee <__swrite>:
 800d9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9f2:	461f      	mov	r7, r3
 800d9f4:	898b      	ldrh	r3, [r1, #12]
 800d9f6:	05db      	lsls	r3, r3, #23
 800d9f8:	4605      	mov	r5, r0
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	4616      	mov	r6, r2
 800d9fe:	d505      	bpl.n	800da0c <__swrite+0x1e>
 800da00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da04:	2302      	movs	r3, #2
 800da06:	2200      	movs	r2, #0
 800da08:	f002 fbbc 	bl	8010184 <_lseek_r>
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800da16:	81a3      	strh	r3, [r4, #12]
 800da18:	4632      	mov	r2, r6
 800da1a:	463b      	mov	r3, r7
 800da1c:	4628      	mov	r0, r5
 800da1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da22:	f000 bf79 	b.w	800e918 <_write_r>

0800da26 <__sseek>:
 800da26:	b510      	push	{r4, lr}
 800da28:	460c      	mov	r4, r1
 800da2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da2e:	f002 fba9 	bl	8010184 <_lseek_r>
 800da32:	1c43      	adds	r3, r0, #1
 800da34:	89a3      	ldrh	r3, [r4, #12]
 800da36:	bf15      	itete	ne
 800da38:	6560      	strne	r0, [r4, #84]	; 0x54
 800da3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800da3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800da42:	81a3      	strheq	r3, [r4, #12]
 800da44:	bf18      	it	ne
 800da46:	81a3      	strhne	r3, [r4, #12]
 800da48:	bd10      	pop	{r4, pc}

0800da4a <__sclose>:
 800da4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da4e:	f000 bfe3 	b.w	800ea18 <_close_r>

0800da52 <strcpy>:
 800da52:	4603      	mov	r3, r0
 800da54:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da58:	f803 2b01 	strb.w	r2, [r3], #1
 800da5c:	2a00      	cmp	r2, #0
 800da5e:	d1f9      	bne.n	800da54 <strcpy+0x2>
 800da60:	4770      	bx	lr

0800da62 <strncmp>:
 800da62:	b510      	push	{r4, lr}
 800da64:	b16a      	cbz	r2, 800da82 <strncmp+0x20>
 800da66:	3901      	subs	r1, #1
 800da68:	1884      	adds	r4, r0, r2
 800da6a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800da6e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da72:	4293      	cmp	r3, r2
 800da74:	d103      	bne.n	800da7e <strncmp+0x1c>
 800da76:	42a0      	cmp	r0, r4
 800da78:	d001      	beq.n	800da7e <strncmp+0x1c>
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1f5      	bne.n	800da6a <strncmp+0x8>
 800da7e:	1a98      	subs	r0, r3, r2
 800da80:	bd10      	pop	{r4, pc}
 800da82:	4610      	mov	r0, r2
 800da84:	e7fc      	b.n	800da80 <strncmp+0x1e>

0800da86 <sulp>:
 800da86:	b570      	push	{r4, r5, r6, lr}
 800da88:	4604      	mov	r4, r0
 800da8a:	460d      	mov	r5, r1
 800da8c:	ec45 4b10 	vmov	d0, r4, r5
 800da90:	4616      	mov	r6, r2
 800da92:	f002 ff77 	bl	8010984 <__ulp>
 800da96:	ec51 0b10 	vmov	r0, r1, d0
 800da9a:	b17e      	cbz	r6, 800dabc <sulp+0x36>
 800da9c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800daa0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	dd09      	ble.n	800dabc <sulp+0x36>
 800daa8:	051b      	lsls	r3, r3, #20
 800daaa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800daae:	2400      	movs	r4, #0
 800dab0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dab4:	4622      	mov	r2, r4
 800dab6:	462b      	mov	r3, r5
 800dab8:	f7f2 fdae 	bl	8000618 <__aeabi_dmul>
 800dabc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dac0 <_strtod_l>:
 800dac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dac4:	b0a3      	sub	sp, #140	; 0x8c
 800dac6:	461f      	mov	r7, r3
 800dac8:	2300      	movs	r3, #0
 800daca:	931e      	str	r3, [sp, #120]	; 0x78
 800dacc:	4ba4      	ldr	r3, [pc, #656]	; (800dd60 <_strtod_l+0x2a0>)
 800dace:	9219      	str	r2, [sp, #100]	; 0x64
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	9307      	str	r3, [sp, #28]
 800dad4:	4604      	mov	r4, r0
 800dad6:	4618      	mov	r0, r3
 800dad8:	4688      	mov	r8, r1
 800dada:	f7f2 fb89 	bl	80001f0 <strlen>
 800dade:	f04f 0a00 	mov.w	sl, #0
 800dae2:	4605      	mov	r5, r0
 800dae4:	f04f 0b00 	mov.w	fp, #0
 800dae8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800daec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800daee:	781a      	ldrb	r2, [r3, #0]
 800daf0:	2a2b      	cmp	r2, #43	; 0x2b
 800daf2:	d04c      	beq.n	800db8e <_strtod_l+0xce>
 800daf4:	d839      	bhi.n	800db6a <_strtod_l+0xaa>
 800daf6:	2a0d      	cmp	r2, #13
 800daf8:	d832      	bhi.n	800db60 <_strtod_l+0xa0>
 800dafa:	2a08      	cmp	r2, #8
 800dafc:	d832      	bhi.n	800db64 <_strtod_l+0xa4>
 800dafe:	2a00      	cmp	r2, #0
 800db00:	d03c      	beq.n	800db7c <_strtod_l+0xbc>
 800db02:	2300      	movs	r3, #0
 800db04:	930e      	str	r3, [sp, #56]	; 0x38
 800db06:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800db08:	7833      	ldrb	r3, [r6, #0]
 800db0a:	2b30      	cmp	r3, #48	; 0x30
 800db0c:	f040 80b4 	bne.w	800dc78 <_strtod_l+0x1b8>
 800db10:	7873      	ldrb	r3, [r6, #1]
 800db12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800db16:	2b58      	cmp	r3, #88	; 0x58
 800db18:	d16c      	bne.n	800dbf4 <_strtod_l+0x134>
 800db1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db1c:	9301      	str	r3, [sp, #4]
 800db1e:	ab1e      	add	r3, sp, #120	; 0x78
 800db20:	9702      	str	r7, [sp, #8]
 800db22:	9300      	str	r3, [sp, #0]
 800db24:	4a8f      	ldr	r2, [pc, #572]	; (800dd64 <_strtod_l+0x2a4>)
 800db26:	ab1f      	add	r3, sp, #124	; 0x7c
 800db28:	a91d      	add	r1, sp, #116	; 0x74
 800db2a:	4620      	mov	r0, r4
 800db2c:	f002 f81a 	bl	800fb64 <__gethex>
 800db30:	f010 0707 	ands.w	r7, r0, #7
 800db34:	4605      	mov	r5, r0
 800db36:	d005      	beq.n	800db44 <_strtod_l+0x84>
 800db38:	2f06      	cmp	r7, #6
 800db3a:	d12a      	bne.n	800db92 <_strtod_l+0xd2>
 800db3c:	3601      	adds	r6, #1
 800db3e:	2300      	movs	r3, #0
 800db40:	961d      	str	r6, [sp, #116]	; 0x74
 800db42:	930e      	str	r3, [sp, #56]	; 0x38
 800db44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db46:	2b00      	cmp	r3, #0
 800db48:	f040 8596 	bne.w	800e678 <_strtod_l+0xbb8>
 800db4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db4e:	b1db      	cbz	r3, 800db88 <_strtod_l+0xc8>
 800db50:	4652      	mov	r2, sl
 800db52:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800db56:	ec43 2b10 	vmov	d0, r2, r3
 800db5a:	b023      	add	sp, #140	; 0x8c
 800db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db60:	2a20      	cmp	r2, #32
 800db62:	d1ce      	bne.n	800db02 <_strtod_l+0x42>
 800db64:	3301      	adds	r3, #1
 800db66:	931d      	str	r3, [sp, #116]	; 0x74
 800db68:	e7c0      	b.n	800daec <_strtod_l+0x2c>
 800db6a:	2a2d      	cmp	r2, #45	; 0x2d
 800db6c:	d1c9      	bne.n	800db02 <_strtod_l+0x42>
 800db6e:	2201      	movs	r2, #1
 800db70:	920e      	str	r2, [sp, #56]	; 0x38
 800db72:	1c5a      	adds	r2, r3, #1
 800db74:	921d      	str	r2, [sp, #116]	; 0x74
 800db76:	785b      	ldrb	r3, [r3, #1]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d1c4      	bne.n	800db06 <_strtod_l+0x46>
 800db7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800db7e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800db82:	2b00      	cmp	r3, #0
 800db84:	f040 8576 	bne.w	800e674 <_strtod_l+0xbb4>
 800db88:	4652      	mov	r2, sl
 800db8a:	465b      	mov	r3, fp
 800db8c:	e7e3      	b.n	800db56 <_strtod_l+0x96>
 800db8e:	2200      	movs	r2, #0
 800db90:	e7ee      	b.n	800db70 <_strtod_l+0xb0>
 800db92:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800db94:	b13a      	cbz	r2, 800dba6 <_strtod_l+0xe6>
 800db96:	2135      	movs	r1, #53	; 0x35
 800db98:	a820      	add	r0, sp, #128	; 0x80
 800db9a:	f002 fffe 	bl	8010b9a <__copybits>
 800db9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dba0:	4620      	mov	r0, r4
 800dba2:	f002 fbc3 	bl	801032c <_Bfree>
 800dba6:	3f01      	subs	r7, #1
 800dba8:	2f05      	cmp	r7, #5
 800dbaa:	d807      	bhi.n	800dbbc <_strtod_l+0xfc>
 800dbac:	e8df f007 	tbb	[pc, r7]
 800dbb0:	1d180b0e 	.word	0x1d180b0e
 800dbb4:	030e      	.short	0x030e
 800dbb6:	f04f 0b00 	mov.w	fp, #0
 800dbba:	46da      	mov	sl, fp
 800dbbc:	0728      	lsls	r0, r5, #28
 800dbbe:	d5c1      	bpl.n	800db44 <_strtod_l+0x84>
 800dbc0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dbc4:	e7be      	b.n	800db44 <_strtod_l+0x84>
 800dbc6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800dbca:	e7f7      	b.n	800dbbc <_strtod_l+0xfc>
 800dbcc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800dbd0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dbd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dbd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dbda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dbde:	e7ed      	b.n	800dbbc <_strtod_l+0xfc>
 800dbe0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800dd68 <_strtod_l+0x2a8>
 800dbe4:	f04f 0a00 	mov.w	sl, #0
 800dbe8:	e7e8      	b.n	800dbbc <_strtod_l+0xfc>
 800dbea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dbee:	f04f 3aff 	mov.w	sl, #4294967295
 800dbf2:	e7e3      	b.n	800dbbc <_strtod_l+0xfc>
 800dbf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dbf6:	1c5a      	adds	r2, r3, #1
 800dbf8:	921d      	str	r2, [sp, #116]	; 0x74
 800dbfa:	785b      	ldrb	r3, [r3, #1]
 800dbfc:	2b30      	cmp	r3, #48	; 0x30
 800dbfe:	d0f9      	beq.n	800dbf4 <_strtod_l+0x134>
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d09f      	beq.n	800db44 <_strtod_l+0x84>
 800dc04:	2301      	movs	r3, #1
 800dc06:	f04f 0900 	mov.w	r9, #0
 800dc0a:	9304      	str	r3, [sp, #16]
 800dc0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc0e:	930a      	str	r3, [sp, #40]	; 0x28
 800dc10:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dc14:	464f      	mov	r7, r9
 800dc16:	220a      	movs	r2, #10
 800dc18:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dc1a:	7806      	ldrb	r6, [r0, #0]
 800dc1c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dc20:	b2d9      	uxtb	r1, r3
 800dc22:	2909      	cmp	r1, #9
 800dc24:	d92a      	bls.n	800dc7c <_strtod_l+0x1bc>
 800dc26:	9907      	ldr	r1, [sp, #28]
 800dc28:	462a      	mov	r2, r5
 800dc2a:	f7ff ff1a 	bl	800da62 <strncmp>
 800dc2e:	b398      	cbz	r0, 800dc98 <_strtod_l+0x1d8>
 800dc30:	2000      	movs	r0, #0
 800dc32:	4633      	mov	r3, r6
 800dc34:	463d      	mov	r5, r7
 800dc36:	9007      	str	r0, [sp, #28]
 800dc38:	4602      	mov	r2, r0
 800dc3a:	2b65      	cmp	r3, #101	; 0x65
 800dc3c:	d001      	beq.n	800dc42 <_strtod_l+0x182>
 800dc3e:	2b45      	cmp	r3, #69	; 0x45
 800dc40:	d118      	bne.n	800dc74 <_strtod_l+0x1b4>
 800dc42:	b91d      	cbnz	r5, 800dc4c <_strtod_l+0x18c>
 800dc44:	9b04      	ldr	r3, [sp, #16]
 800dc46:	4303      	orrs	r3, r0
 800dc48:	d098      	beq.n	800db7c <_strtod_l+0xbc>
 800dc4a:	2500      	movs	r5, #0
 800dc4c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800dc50:	f108 0301 	add.w	r3, r8, #1
 800dc54:	931d      	str	r3, [sp, #116]	; 0x74
 800dc56:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dc5a:	2b2b      	cmp	r3, #43	; 0x2b
 800dc5c:	d075      	beq.n	800dd4a <_strtod_l+0x28a>
 800dc5e:	2b2d      	cmp	r3, #45	; 0x2d
 800dc60:	d07b      	beq.n	800dd5a <_strtod_l+0x29a>
 800dc62:	f04f 0c00 	mov.w	ip, #0
 800dc66:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800dc6a:	2909      	cmp	r1, #9
 800dc6c:	f240 8082 	bls.w	800dd74 <_strtod_l+0x2b4>
 800dc70:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dc74:	2600      	movs	r6, #0
 800dc76:	e09d      	b.n	800ddb4 <_strtod_l+0x2f4>
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e7c4      	b.n	800dc06 <_strtod_l+0x146>
 800dc7c:	2f08      	cmp	r7, #8
 800dc7e:	bfd8      	it	le
 800dc80:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dc82:	f100 0001 	add.w	r0, r0, #1
 800dc86:	bfda      	itte	le
 800dc88:	fb02 3301 	mlale	r3, r2, r1, r3
 800dc8c:	9309      	strle	r3, [sp, #36]	; 0x24
 800dc8e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dc92:	3701      	adds	r7, #1
 800dc94:	901d      	str	r0, [sp, #116]	; 0x74
 800dc96:	e7bf      	b.n	800dc18 <_strtod_l+0x158>
 800dc98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc9a:	195a      	adds	r2, r3, r5
 800dc9c:	921d      	str	r2, [sp, #116]	; 0x74
 800dc9e:	5d5b      	ldrb	r3, [r3, r5]
 800dca0:	2f00      	cmp	r7, #0
 800dca2:	d037      	beq.n	800dd14 <_strtod_l+0x254>
 800dca4:	9007      	str	r0, [sp, #28]
 800dca6:	463d      	mov	r5, r7
 800dca8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800dcac:	2a09      	cmp	r2, #9
 800dcae:	d912      	bls.n	800dcd6 <_strtod_l+0x216>
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	e7c2      	b.n	800dc3a <_strtod_l+0x17a>
 800dcb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dcb6:	1c5a      	adds	r2, r3, #1
 800dcb8:	921d      	str	r2, [sp, #116]	; 0x74
 800dcba:	785b      	ldrb	r3, [r3, #1]
 800dcbc:	3001      	adds	r0, #1
 800dcbe:	2b30      	cmp	r3, #48	; 0x30
 800dcc0:	d0f8      	beq.n	800dcb4 <_strtod_l+0x1f4>
 800dcc2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800dcc6:	2a08      	cmp	r2, #8
 800dcc8:	f200 84db 	bhi.w	800e682 <_strtod_l+0xbc2>
 800dccc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dcce:	9007      	str	r0, [sp, #28]
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	920a      	str	r2, [sp, #40]	; 0x28
 800dcd4:	4605      	mov	r5, r0
 800dcd6:	3b30      	subs	r3, #48	; 0x30
 800dcd8:	f100 0201 	add.w	r2, r0, #1
 800dcdc:	d014      	beq.n	800dd08 <_strtod_l+0x248>
 800dcde:	9907      	ldr	r1, [sp, #28]
 800dce0:	4411      	add	r1, r2
 800dce2:	9107      	str	r1, [sp, #28]
 800dce4:	462a      	mov	r2, r5
 800dce6:	eb00 0e05 	add.w	lr, r0, r5
 800dcea:	210a      	movs	r1, #10
 800dcec:	4572      	cmp	r2, lr
 800dcee:	d113      	bne.n	800dd18 <_strtod_l+0x258>
 800dcf0:	182a      	adds	r2, r5, r0
 800dcf2:	2a08      	cmp	r2, #8
 800dcf4:	f105 0501 	add.w	r5, r5, #1
 800dcf8:	4405      	add	r5, r0
 800dcfa:	dc1c      	bgt.n	800dd36 <_strtod_l+0x276>
 800dcfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dcfe:	220a      	movs	r2, #10
 800dd00:	fb02 3301 	mla	r3, r2, r1, r3
 800dd04:	9309      	str	r3, [sp, #36]	; 0x24
 800dd06:	2200      	movs	r2, #0
 800dd08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd0a:	1c59      	adds	r1, r3, #1
 800dd0c:	911d      	str	r1, [sp, #116]	; 0x74
 800dd0e:	785b      	ldrb	r3, [r3, #1]
 800dd10:	4610      	mov	r0, r2
 800dd12:	e7c9      	b.n	800dca8 <_strtod_l+0x1e8>
 800dd14:	4638      	mov	r0, r7
 800dd16:	e7d2      	b.n	800dcbe <_strtod_l+0x1fe>
 800dd18:	2a08      	cmp	r2, #8
 800dd1a:	dc04      	bgt.n	800dd26 <_strtod_l+0x266>
 800dd1c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dd1e:	434e      	muls	r6, r1
 800dd20:	9609      	str	r6, [sp, #36]	; 0x24
 800dd22:	3201      	adds	r2, #1
 800dd24:	e7e2      	b.n	800dcec <_strtod_l+0x22c>
 800dd26:	f102 0c01 	add.w	ip, r2, #1
 800dd2a:	f1bc 0f10 	cmp.w	ip, #16
 800dd2e:	bfd8      	it	le
 800dd30:	fb01 f909 	mulle.w	r9, r1, r9
 800dd34:	e7f5      	b.n	800dd22 <_strtod_l+0x262>
 800dd36:	2d10      	cmp	r5, #16
 800dd38:	bfdc      	itt	le
 800dd3a:	220a      	movle	r2, #10
 800dd3c:	fb02 3909 	mlale	r9, r2, r9, r3
 800dd40:	e7e1      	b.n	800dd06 <_strtod_l+0x246>
 800dd42:	2300      	movs	r3, #0
 800dd44:	9307      	str	r3, [sp, #28]
 800dd46:	2201      	movs	r2, #1
 800dd48:	e77c      	b.n	800dc44 <_strtod_l+0x184>
 800dd4a:	f04f 0c00 	mov.w	ip, #0
 800dd4e:	f108 0302 	add.w	r3, r8, #2
 800dd52:	931d      	str	r3, [sp, #116]	; 0x74
 800dd54:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dd58:	e785      	b.n	800dc66 <_strtod_l+0x1a6>
 800dd5a:	f04f 0c01 	mov.w	ip, #1
 800dd5e:	e7f6      	b.n	800dd4e <_strtod_l+0x28e>
 800dd60:	08011998 	.word	0x08011998
 800dd64:	080117e4 	.word	0x080117e4
 800dd68:	7ff00000 	.word	0x7ff00000
 800dd6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd6e:	1c59      	adds	r1, r3, #1
 800dd70:	911d      	str	r1, [sp, #116]	; 0x74
 800dd72:	785b      	ldrb	r3, [r3, #1]
 800dd74:	2b30      	cmp	r3, #48	; 0x30
 800dd76:	d0f9      	beq.n	800dd6c <_strtod_l+0x2ac>
 800dd78:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800dd7c:	2908      	cmp	r1, #8
 800dd7e:	f63f af79 	bhi.w	800dc74 <_strtod_l+0x1b4>
 800dd82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800dd86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd88:	9308      	str	r3, [sp, #32]
 800dd8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd8c:	1c59      	adds	r1, r3, #1
 800dd8e:	911d      	str	r1, [sp, #116]	; 0x74
 800dd90:	785b      	ldrb	r3, [r3, #1]
 800dd92:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800dd96:	2e09      	cmp	r6, #9
 800dd98:	d937      	bls.n	800de0a <_strtod_l+0x34a>
 800dd9a:	9e08      	ldr	r6, [sp, #32]
 800dd9c:	1b89      	subs	r1, r1, r6
 800dd9e:	2908      	cmp	r1, #8
 800dda0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800dda4:	dc02      	bgt.n	800ddac <_strtod_l+0x2ec>
 800dda6:	4576      	cmp	r6, lr
 800dda8:	bfa8      	it	ge
 800ddaa:	4676      	movge	r6, lr
 800ddac:	f1bc 0f00 	cmp.w	ip, #0
 800ddb0:	d000      	beq.n	800ddb4 <_strtod_l+0x2f4>
 800ddb2:	4276      	negs	r6, r6
 800ddb4:	2d00      	cmp	r5, #0
 800ddb6:	d14f      	bne.n	800de58 <_strtod_l+0x398>
 800ddb8:	9904      	ldr	r1, [sp, #16]
 800ddba:	4301      	orrs	r1, r0
 800ddbc:	f47f aec2 	bne.w	800db44 <_strtod_l+0x84>
 800ddc0:	2a00      	cmp	r2, #0
 800ddc2:	f47f aedb 	bne.w	800db7c <_strtod_l+0xbc>
 800ddc6:	2b69      	cmp	r3, #105	; 0x69
 800ddc8:	d027      	beq.n	800de1a <_strtod_l+0x35a>
 800ddca:	dc24      	bgt.n	800de16 <_strtod_l+0x356>
 800ddcc:	2b49      	cmp	r3, #73	; 0x49
 800ddce:	d024      	beq.n	800de1a <_strtod_l+0x35a>
 800ddd0:	2b4e      	cmp	r3, #78	; 0x4e
 800ddd2:	f47f aed3 	bne.w	800db7c <_strtod_l+0xbc>
 800ddd6:	499e      	ldr	r1, [pc, #632]	; (800e050 <_strtod_l+0x590>)
 800ddd8:	a81d      	add	r0, sp, #116	; 0x74
 800ddda:	f002 f91b 	bl	8010014 <__match>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	f43f aecc 	beq.w	800db7c <_strtod_l+0xbc>
 800dde4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	2b28      	cmp	r3, #40	; 0x28
 800ddea:	d12d      	bne.n	800de48 <_strtod_l+0x388>
 800ddec:	4999      	ldr	r1, [pc, #612]	; (800e054 <_strtod_l+0x594>)
 800ddee:	aa20      	add	r2, sp, #128	; 0x80
 800ddf0:	a81d      	add	r0, sp, #116	; 0x74
 800ddf2:	f002 f923 	bl	801003c <__hexnan>
 800ddf6:	2805      	cmp	r0, #5
 800ddf8:	d126      	bne.n	800de48 <_strtod_l+0x388>
 800ddfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddfc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800de00:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800de04:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800de08:	e69c      	b.n	800db44 <_strtod_l+0x84>
 800de0a:	210a      	movs	r1, #10
 800de0c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800de10:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800de14:	e7b9      	b.n	800dd8a <_strtod_l+0x2ca>
 800de16:	2b6e      	cmp	r3, #110	; 0x6e
 800de18:	e7db      	b.n	800ddd2 <_strtod_l+0x312>
 800de1a:	498f      	ldr	r1, [pc, #572]	; (800e058 <_strtod_l+0x598>)
 800de1c:	a81d      	add	r0, sp, #116	; 0x74
 800de1e:	f002 f8f9 	bl	8010014 <__match>
 800de22:	2800      	cmp	r0, #0
 800de24:	f43f aeaa 	beq.w	800db7c <_strtod_l+0xbc>
 800de28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de2a:	498c      	ldr	r1, [pc, #560]	; (800e05c <_strtod_l+0x59c>)
 800de2c:	3b01      	subs	r3, #1
 800de2e:	a81d      	add	r0, sp, #116	; 0x74
 800de30:	931d      	str	r3, [sp, #116]	; 0x74
 800de32:	f002 f8ef 	bl	8010014 <__match>
 800de36:	b910      	cbnz	r0, 800de3e <_strtod_l+0x37e>
 800de38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de3a:	3301      	adds	r3, #1
 800de3c:	931d      	str	r3, [sp, #116]	; 0x74
 800de3e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e06c <_strtod_l+0x5ac>
 800de42:	f04f 0a00 	mov.w	sl, #0
 800de46:	e67d      	b.n	800db44 <_strtod_l+0x84>
 800de48:	4885      	ldr	r0, [pc, #532]	; (800e060 <_strtod_l+0x5a0>)
 800de4a:	f003 f9c1 	bl	80111d0 <nan>
 800de4e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800de52:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800de56:	e675      	b.n	800db44 <_strtod_l+0x84>
 800de58:	9b07      	ldr	r3, [sp, #28]
 800de5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de5c:	1af3      	subs	r3, r6, r3
 800de5e:	2f00      	cmp	r7, #0
 800de60:	bf08      	it	eq
 800de62:	462f      	moveq	r7, r5
 800de64:	2d10      	cmp	r5, #16
 800de66:	9308      	str	r3, [sp, #32]
 800de68:	46a8      	mov	r8, r5
 800de6a:	bfa8      	it	ge
 800de6c:	f04f 0810 	movge.w	r8, #16
 800de70:	f7f2 fb58 	bl	8000524 <__aeabi_ui2d>
 800de74:	2d09      	cmp	r5, #9
 800de76:	4682      	mov	sl, r0
 800de78:	468b      	mov	fp, r1
 800de7a:	dd13      	ble.n	800dea4 <_strtod_l+0x3e4>
 800de7c:	4b79      	ldr	r3, [pc, #484]	; (800e064 <_strtod_l+0x5a4>)
 800de7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800de82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800de86:	f7f2 fbc7 	bl	8000618 <__aeabi_dmul>
 800de8a:	4682      	mov	sl, r0
 800de8c:	4648      	mov	r0, r9
 800de8e:	468b      	mov	fp, r1
 800de90:	f7f2 fb48 	bl	8000524 <__aeabi_ui2d>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	4650      	mov	r0, sl
 800de9a:	4659      	mov	r1, fp
 800de9c:	f7f2 fa06 	bl	80002ac <__adddf3>
 800dea0:	4682      	mov	sl, r0
 800dea2:	468b      	mov	fp, r1
 800dea4:	2d0f      	cmp	r5, #15
 800dea6:	dc38      	bgt.n	800df1a <_strtod_l+0x45a>
 800dea8:	9b08      	ldr	r3, [sp, #32]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f43f ae4a 	beq.w	800db44 <_strtod_l+0x84>
 800deb0:	dd24      	ble.n	800defc <_strtod_l+0x43c>
 800deb2:	2b16      	cmp	r3, #22
 800deb4:	dc0b      	bgt.n	800dece <_strtod_l+0x40e>
 800deb6:	4d6b      	ldr	r5, [pc, #428]	; (800e064 <_strtod_l+0x5a4>)
 800deb8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800debc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800dec0:	4652      	mov	r2, sl
 800dec2:	465b      	mov	r3, fp
 800dec4:	f7f2 fba8 	bl	8000618 <__aeabi_dmul>
 800dec8:	4682      	mov	sl, r0
 800deca:	468b      	mov	fp, r1
 800decc:	e63a      	b.n	800db44 <_strtod_l+0x84>
 800dece:	9a08      	ldr	r2, [sp, #32]
 800ded0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ded4:	4293      	cmp	r3, r2
 800ded6:	db20      	blt.n	800df1a <_strtod_l+0x45a>
 800ded8:	4c62      	ldr	r4, [pc, #392]	; (800e064 <_strtod_l+0x5a4>)
 800deda:	f1c5 050f 	rsb	r5, r5, #15
 800dede:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dee2:	4652      	mov	r2, sl
 800dee4:	465b      	mov	r3, fp
 800dee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800deea:	f7f2 fb95 	bl	8000618 <__aeabi_dmul>
 800deee:	9b08      	ldr	r3, [sp, #32]
 800def0:	1b5d      	subs	r5, r3, r5
 800def2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800def6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800defa:	e7e3      	b.n	800dec4 <_strtod_l+0x404>
 800defc:	9b08      	ldr	r3, [sp, #32]
 800defe:	3316      	adds	r3, #22
 800df00:	db0b      	blt.n	800df1a <_strtod_l+0x45a>
 800df02:	9b07      	ldr	r3, [sp, #28]
 800df04:	4a57      	ldr	r2, [pc, #348]	; (800e064 <_strtod_l+0x5a4>)
 800df06:	1b9e      	subs	r6, r3, r6
 800df08:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800df0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df10:	4650      	mov	r0, sl
 800df12:	4659      	mov	r1, fp
 800df14:	f7f2 fcaa 	bl	800086c <__aeabi_ddiv>
 800df18:	e7d6      	b.n	800dec8 <_strtod_l+0x408>
 800df1a:	9b08      	ldr	r3, [sp, #32]
 800df1c:	eba5 0808 	sub.w	r8, r5, r8
 800df20:	4498      	add	r8, r3
 800df22:	f1b8 0f00 	cmp.w	r8, #0
 800df26:	dd71      	ble.n	800e00c <_strtod_l+0x54c>
 800df28:	f018 030f 	ands.w	r3, r8, #15
 800df2c:	d00a      	beq.n	800df44 <_strtod_l+0x484>
 800df2e:	494d      	ldr	r1, [pc, #308]	; (800e064 <_strtod_l+0x5a4>)
 800df30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800df34:	4652      	mov	r2, sl
 800df36:	465b      	mov	r3, fp
 800df38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df3c:	f7f2 fb6c 	bl	8000618 <__aeabi_dmul>
 800df40:	4682      	mov	sl, r0
 800df42:	468b      	mov	fp, r1
 800df44:	f038 080f 	bics.w	r8, r8, #15
 800df48:	d04d      	beq.n	800dfe6 <_strtod_l+0x526>
 800df4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800df4e:	dd22      	ble.n	800df96 <_strtod_l+0x4d6>
 800df50:	2500      	movs	r5, #0
 800df52:	462e      	mov	r6, r5
 800df54:	9509      	str	r5, [sp, #36]	; 0x24
 800df56:	9507      	str	r5, [sp, #28]
 800df58:	2322      	movs	r3, #34	; 0x22
 800df5a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e06c <_strtod_l+0x5ac>
 800df5e:	6023      	str	r3, [r4, #0]
 800df60:	f04f 0a00 	mov.w	sl, #0
 800df64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df66:	2b00      	cmp	r3, #0
 800df68:	f43f adec 	beq.w	800db44 <_strtod_l+0x84>
 800df6c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800df6e:	4620      	mov	r0, r4
 800df70:	f002 f9dc 	bl	801032c <_Bfree>
 800df74:	9907      	ldr	r1, [sp, #28]
 800df76:	4620      	mov	r0, r4
 800df78:	f002 f9d8 	bl	801032c <_Bfree>
 800df7c:	4631      	mov	r1, r6
 800df7e:	4620      	mov	r0, r4
 800df80:	f002 f9d4 	bl	801032c <_Bfree>
 800df84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df86:	4620      	mov	r0, r4
 800df88:	f002 f9d0 	bl	801032c <_Bfree>
 800df8c:	4629      	mov	r1, r5
 800df8e:	4620      	mov	r0, r4
 800df90:	f002 f9cc 	bl	801032c <_Bfree>
 800df94:	e5d6      	b.n	800db44 <_strtod_l+0x84>
 800df96:	2300      	movs	r3, #0
 800df98:	ea4f 1828 	mov.w	r8, r8, asr #4
 800df9c:	4650      	mov	r0, sl
 800df9e:	4659      	mov	r1, fp
 800dfa0:	4699      	mov	r9, r3
 800dfa2:	f1b8 0f01 	cmp.w	r8, #1
 800dfa6:	dc21      	bgt.n	800dfec <_strtod_l+0x52c>
 800dfa8:	b10b      	cbz	r3, 800dfae <_strtod_l+0x4ee>
 800dfaa:	4682      	mov	sl, r0
 800dfac:	468b      	mov	fp, r1
 800dfae:	4b2e      	ldr	r3, [pc, #184]	; (800e068 <_strtod_l+0x5a8>)
 800dfb0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dfb4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800dfb8:	4652      	mov	r2, sl
 800dfba:	465b      	mov	r3, fp
 800dfbc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dfc0:	f7f2 fb2a 	bl	8000618 <__aeabi_dmul>
 800dfc4:	4b29      	ldr	r3, [pc, #164]	; (800e06c <_strtod_l+0x5ac>)
 800dfc6:	460a      	mov	r2, r1
 800dfc8:	400b      	ands	r3, r1
 800dfca:	4929      	ldr	r1, [pc, #164]	; (800e070 <_strtod_l+0x5b0>)
 800dfcc:	428b      	cmp	r3, r1
 800dfce:	4682      	mov	sl, r0
 800dfd0:	d8be      	bhi.n	800df50 <_strtod_l+0x490>
 800dfd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dfd6:	428b      	cmp	r3, r1
 800dfd8:	bf86      	itte	hi
 800dfda:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e074 <_strtod_l+0x5b4>
 800dfde:	f04f 3aff 	movhi.w	sl, #4294967295
 800dfe2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	9304      	str	r3, [sp, #16]
 800dfea:	e081      	b.n	800e0f0 <_strtod_l+0x630>
 800dfec:	f018 0f01 	tst.w	r8, #1
 800dff0:	d007      	beq.n	800e002 <_strtod_l+0x542>
 800dff2:	4b1d      	ldr	r3, [pc, #116]	; (800e068 <_strtod_l+0x5a8>)
 800dff4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800dff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffc:	f7f2 fb0c 	bl	8000618 <__aeabi_dmul>
 800e000:	2301      	movs	r3, #1
 800e002:	f109 0901 	add.w	r9, r9, #1
 800e006:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e00a:	e7ca      	b.n	800dfa2 <_strtod_l+0x4e2>
 800e00c:	d0eb      	beq.n	800dfe6 <_strtod_l+0x526>
 800e00e:	f1c8 0800 	rsb	r8, r8, #0
 800e012:	f018 020f 	ands.w	r2, r8, #15
 800e016:	d00a      	beq.n	800e02e <_strtod_l+0x56e>
 800e018:	4b12      	ldr	r3, [pc, #72]	; (800e064 <_strtod_l+0x5a4>)
 800e01a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e01e:	4650      	mov	r0, sl
 800e020:	4659      	mov	r1, fp
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	f7f2 fc21 	bl	800086c <__aeabi_ddiv>
 800e02a:	4682      	mov	sl, r0
 800e02c:	468b      	mov	fp, r1
 800e02e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e032:	d0d8      	beq.n	800dfe6 <_strtod_l+0x526>
 800e034:	f1b8 0f1f 	cmp.w	r8, #31
 800e038:	dd1e      	ble.n	800e078 <_strtod_l+0x5b8>
 800e03a:	2500      	movs	r5, #0
 800e03c:	462e      	mov	r6, r5
 800e03e:	9509      	str	r5, [sp, #36]	; 0x24
 800e040:	9507      	str	r5, [sp, #28]
 800e042:	2322      	movs	r3, #34	; 0x22
 800e044:	f04f 0a00 	mov.w	sl, #0
 800e048:	f04f 0b00 	mov.w	fp, #0
 800e04c:	6023      	str	r3, [r4, #0]
 800e04e:	e789      	b.n	800df64 <_strtod_l+0x4a4>
 800e050:	080117b5 	.word	0x080117b5
 800e054:	080117f8 	.word	0x080117f8
 800e058:	080117ad 	.word	0x080117ad
 800e05c:	0801183b 	.word	0x0801183b
 800e060:	08011b58 	.word	0x08011b58
 800e064:	08011a38 	.word	0x08011a38
 800e068:	08011a10 	.word	0x08011a10
 800e06c:	7ff00000 	.word	0x7ff00000
 800e070:	7ca00000 	.word	0x7ca00000
 800e074:	7fefffff 	.word	0x7fefffff
 800e078:	f018 0310 	ands.w	r3, r8, #16
 800e07c:	bf18      	it	ne
 800e07e:	236a      	movne	r3, #106	; 0x6a
 800e080:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e438 <_strtod_l+0x978>
 800e084:	9304      	str	r3, [sp, #16]
 800e086:	4650      	mov	r0, sl
 800e088:	4659      	mov	r1, fp
 800e08a:	2300      	movs	r3, #0
 800e08c:	f018 0f01 	tst.w	r8, #1
 800e090:	d004      	beq.n	800e09c <_strtod_l+0x5dc>
 800e092:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e096:	f7f2 fabf 	bl	8000618 <__aeabi_dmul>
 800e09a:	2301      	movs	r3, #1
 800e09c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e0a0:	f109 0908 	add.w	r9, r9, #8
 800e0a4:	d1f2      	bne.n	800e08c <_strtod_l+0x5cc>
 800e0a6:	b10b      	cbz	r3, 800e0ac <_strtod_l+0x5ec>
 800e0a8:	4682      	mov	sl, r0
 800e0aa:	468b      	mov	fp, r1
 800e0ac:	9b04      	ldr	r3, [sp, #16]
 800e0ae:	b1bb      	cbz	r3, 800e0e0 <_strtod_l+0x620>
 800e0b0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e0b4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	4659      	mov	r1, fp
 800e0bc:	dd10      	ble.n	800e0e0 <_strtod_l+0x620>
 800e0be:	2b1f      	cmp	r3, #31
 800e0c0:	f340 8128 	ble.w	800e314 <_strtod_l+0x854>
 800e0c4:	2b34      	cmp	r3, #52	; 0x34
 800e0c6:	bfde      	ittt	le
 800e0c8:	3b20      	suble	r3, #32
 800e0ca:	f04f 32ff 	movle.w	r2, #4294967295
 800e0ce:	fa02 f303 	lslle.w	r3, r2, r3
 800e0d2:	f04f 0a00 	mov.w	sl, #0
 800e0d6:	bfcc      	ite	gt
 800e0d8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e0dc:	ea03 0b01 	andle.w	fp, r3, r1
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	4650      	mov	r0, sl
 800e0e6:	4659      	mov	r1, fp
 800e0e8:	f7f2 fcfe 	bl	8000ae8 <__aeabi_dcmpeq>
 800e0ec:	2800      	cmp	r0, #0
 800e0ee:	d1a4      	bne.n	800e03a <_strtod_l+0x57a>
 800e0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f2:	9300      	str	r3, [sp, #0]
 800e0f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e0f6:	462b      	mov	r3, r5
 800e0f8:	463a      	mov	r2, r7
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f002 f982 	bl	8010404 <__s2b>
 800e100:	9009      	str	r0, [sp, #36]	; 0x24
 800e102:	2800      	cmp	r0, #0
 800e104:	f43f af24 	beq.w	800df50 <_strtod_l+0x490>
 800e108:	9b07      	ldr	r3, [sp, #28]
 800e10a:	1b9e      	subs	r6, r3, r6
 800e10c:	9b08      	ldr	r3, [sp, #32]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	bfb4      	ite	lt
 800e112:	4633      	movlt	r3, r6
 800e114:	2300      	movge	r3, #0
 800e116:	9310      	str	r3, [sp, #64]	; 0x40
 800e118:	9b08      	ldr	r3, [sp, #32]
 800e11a:	2500      	movs	r5, #0
 800e11c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e120:	9318      	str	r3, [sp, #96]	; 0x60
 800e122:	462e      	mov	r6, r5
 800e124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e126:	4620      	mov	r0, r4
 800e128:	6859      	ldr	r1, [r3, #4]
 800e12a:	f002 f8bf 	bl	80102ac <_Balloc>
 800e12e:	9007      	str	r0, [sp, #28]
 800e130:	2800      	cmp	r0, #0
 800e132:	f43f af11 	beq.w	800df58 <_strtod_l+0x498>
 800e136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e138:	691a      	ldr	r2, [r3, #16]
 800e13a:	3202      	adds	r2, #2
 800e13c:	f103 010c 	add.w	r1, r3, #12
 800e140:	0092      	lsls	r2, r2, #2
 800e142:	300c      	adds	r0, #12
 800e144:	f7fe fcd2 	bl	800caec <memcpy>
 800e148:	ec4b ab10 	vmov	d0, sl, fp
 800e14c:	aa20      	add	r2, sp, #128	; 0x80
 800e14e:	a91f      	add	r1, sp, #124	; 0x7c
 800e150:	4620      	mov	r0, r4
 800e152:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e156:	f002 fc91 	bl	8010a7c <__d2b>
 800e15a:	901e      	str	r0, [sp, #120]	; 0x78
 800e15c:	2800      	cmp	r0, #0
 800e15e:	f43f aefb 	beq.w	800df58 <_strtod_l+0x498>
 800e162:	2101      	movs	r1, #1
 800e164:	4620      	mov	r0, r4
 800e166:	f002 f9e7 	bl	8010538 <__i2b>
 800e16a:	4606      	mov	r6, r0
 800e16c:	2800      	cmp	r0, #0
 800e16e:	f43f aef3 	beq.w	800df58 <_strtod_l+0x498>
 800e172:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e174:	9904      	ldr	r1, [sp, #16]
 800e176:	2b00      	cmp	r3, #0
 800e178:	bfab      	itete	ge
 800e17a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e17c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e17e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e180:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e184:	bfac      	ite	ge
 800e186:	eb03 0902 	addge.w	r9, r3, r2
 800e18a:	1ad7      	sublt	r7, r2, r3
 800e18c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e18e:	eba3 0801 	sub.w	r8, r3, r1
 800e192:	4490      	add	r8, r2
 800e194:	4ba3      	ldr	r3, [pc, #652]	; (800e424 <_strtod_l+0x964>)
 800e196:	f108 38ff 	add.w	r8, r8, #4294967295
 800e19a:	4598      	cmp	r8, r3
 800e19c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e1a0:	f280 80cc 	bge.w	800e33c <_strtod_l+0x87c>
 800e1a4:	eba3 0308 	sub.w	r3, r3, r8
 800e1a8:	2b1f      	cmp	r3, #31
 800e1aa:	eba2 0203 	sub.w	r2, r2, r3
 800e1ae:	f04f 0101 	mov.w	r1, #1
 800e1b2:	f300 80b6 	bgt.w	800e322 <_strtod_l+0x862>
 800e1b6:	fa01 f303 	lsl.w	r3, r1, r3
 800e1ba:	9311      	str	r3, [sp, #68]	; 0x44
 800e1bc:	2300      	movs	r3, #0
 800e1be:	930c      	str	r3, [sp, #48]	; 0x30
 800e1c0:	eb09 0802 	add.w	r8, r9, r2
 800e1c4:	9b04      	ldr	r3, [sp, #16]
 800e1c6:	45c1      	cmp	r9, r8
 800e1c8:	4417      	add	r7, r2
 800e1ca:	441f      	add	r7, r3
 800e1cc:	464b      	mov	r3, r9
 800e1ce:	bfa8      	it	ge
 800e1d0:	4643      	movge	r3, r8
 800e1d2:	42bb      	cmp	r3, r7
 800e1d4:	bfa8      	it	ge
 800e1d6:	463b      	movge	r3, r7
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	bfc2      	ittt	gt
 800e1dc:	eba8 0803 	subgt.w	r8, r8, r3
 800e1e0:	1aff      	subgt	r7, r7, r3
 800e1e2:	eba9 0903 	subgt.w	r9, r9, r3
 800e1e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	dd17      	ble.n	800e21c <_strtod_l+0x75c>
 800e1ec:	4631      	mov	r1, r6
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	f002 fa5d 	bl	80106b0 <__pow5mult>
 800e1f6:	4606      	mov	r6, r0
 800e1f8:	2800      	cmp	r0, #0
 800e1fa:	f43f aead 	beq.w	800df58 <_strtod_l+0x498>
 800e1fe:	4601      	mov	r1, r0
 800e200:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e202:	4620      	mov	r0, r4
 800e204:	f002 f9ae 	bl	8010564 <__multiply>
 800e208:	900f      	str	r0, [sp, #60]	; 0x3c
 800e20a:	2800      	cmp	r0, #0
 800e20c:	f43f aea4 	beq.w	800df58 <_strtod_l+0x498>
 800e210:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e212:	4620      	mov	r0, r4
 800e214:	f002 f88a 	bl	801032c <_Bfree>
 800e218:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e21a:	931e      	str	r3, [sp, #120]	; 0x78
 800e21c:	f1b8 0f00 	cmp.w	r8, #0
 800e220:	f300 8091 	bgt.w	800e346 <_strtod_l+0x886>
 800e224:	9b08      	ldr	r3, [sp, #32]
 800e226:	2b00      	cmp	r3, #0
 800e228:	dd08      	ble.n	800e23c <_strtod_l+0x77c>
 800e22a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e22c:	9907      	ldr	r1, [sp, #28]
 800e22e:	4620      	mov	r0, r4
 800e230:	f002 fa3e 	bl	80106b0 <__pow5mult>
 800e234:	9007      	str	r0, [sp, #28]
 800e236:	2800      	cmp	r0, #0
 800e238:	f43f ae8e 	beq.w	800df58 <_strtod_l+0x498>
 800e23c:	2f00      	cmp	r7, #0
 800e23e:	dd08      	ble.n	800e252 <_strtod_l+0x792>
 800e240:	9907      	ldr	r1, [sp, #28]
 800e242:	463a      	mov	r2, r7
 800e244:	4620      	mov	r0, r4
 800e246:	f002 fa8d 	bl	8010764 <__lshift>
 800e24a:	9007      	str	r0, [sp, #28]
 800e24c:	2800      	cmp	r0, #0
 800e24e:	f43f ae83 	beq.w	800df58 <_strtod_l+0x498>
 800e252:	f1b9 0f00 	cmp.w	r9, #0
 800e256:	dd08      	ble.n	800e26a <_strtod_l+0x7aa>
 800e258:	4631      	mov	r1, r6
 800e25a:	464a      	mov	r2, r9
 800e25c:	4620      	mov	r0, r4
 800e25e:	f002 fa81 	bl	8010764 <__lshift>
 800e262:	4606      	mov	r6, r0
 800e264:	2800      	cmp	r0, #0
 800e266:	f43f ae77 	beq.w	800df58 <_strtod_l+0x498>
 800e26a:	9a07      	ldr	r2, [sp, #28]
 800e26c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e26e:	4620      	mov	r0, r4
 800e270:	f002 fb00 	bl	8010874 <__mdiff>
 800e274:	4605      	mov	r5, r0
 800e276:	2800      	cmp	r0, #0
 800e278:	f43f ae6e 	beq.w	800df58 <_strtod_l+0x498>
 800e27c:	68c3      	ldr	r3, [r0, #12]
 800e27e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e280:	2300      	movs	r3, #0
 800e282:	60c3      	str	r3, [r0, #12]
 800e284:	4631      	mov	r1, r6
 800e286:	f002 fad9 	bl	801083c <__mcmp>
 800e28a:	2800      	cmp	r0, #0
 800e28c:	da65      	bge.n	800e35a <_strtod_l+0x89a>
 800e28e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e290:	ea53 030a 	orrs.w	r3, r3, sl
 800e294:	f040 8087 	bne.w	800e3a6 <_strtod_l+0x8e6>
 800e298:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	f040 8082 	bne.w	800e3a6 <_strtod_l+0x8e6>
 800e2a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e2a6:	0d1b      	lsrs	r3, r3, #20
 800e2a8:	051b      	lsls	r3, r3, #20
 800e2aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e2ae:	d97a      	bls.n	800e3a6 <_strtod_l+0x8e6>
 800e2b0:	696b      	ldr	r3, [r5, #20]
 800e2b2:	b913      	cbnz	r3, 800e2ba <_strtod_l+0x7fa>
 800e2b4:	692b      	ldr	r3, [r5, #16]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	dd75      	ble.n	800e3a6 <_strtod_l+0x8e6>
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	2201      	movs	r2, #1
 800e2be:	4620      	mov	r0, r4
 800e2c0:	f002 fa50 	bl	8010764 <__lshift>
 800e2c4:	4631      	mov	r1, r6
 800e2c6:	4605      	mov	r5, r0
 800e2c8:	f002 fab8 	bl	801083c <__mcmp>
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	dd6a      	ble.n	800e3a6 <_strtod_l+0x8e6>
 800e2d0:	9904      	ldr	r1, [sp, #16]
 800e2d2:	4a55      	ldr	r2, [pc, #340]	; (800e428 <_strtod_l+0x968>)
 800e2d4:	465b      	mov	r3, fp
 800e2d6:	2900      	cmp	r1, #0
 800e2d8:	f000 8085 	beq.w	800e3e6 <_strtod_l+0x926>
 800e2dc:	ea02 010b 	and.w	r1, r2, fp
 800e2e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e2e4:	dc7f      	bgt.n	800e3e6 <_strtod_l+0x926>
 800e2e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e2ea:	f77f aeaa 	ble.w	800e042 <_strtod_l+0x582>
 800e2ee:	4a4f      	ldr	r2, [pc, #316]	; (800e42c <_strtod_l+0x96c>)
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e2f6:	4650      	mov	r0, sl
 800e2f8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e2fc:	4659      	mov	r1, fp
 800e2fe:	f7f2 f98b 	bl	8000618 <__aeabi_dmul>
 800e302:	460b      	mov	r3, r1
 800e304:	4303      	orrs	r3, r0
 800e306:	bf08      	it	eq
 800e308:	2322      	moveq	r3, #34	; 0x22
 800e30a:	4682      	mov	sl, r0
 800e30c:	468b      	mov	fp, r1
 800e30e:	bf08      	it	eq
 800e310:	6023      	streq	r3, [r4, #0]
 800e312:	e62b      	b.n	800df6c <_strtod_l+0x4ac>
 800e314:	f04f 32ff 	mov.w	r2, #4294967295
 800e318:	fa02 f303 	lsl.w	r3, r2, r3
 800e31c:	ea03 0a0a 	and.w	sl, r3, sl
 800e320:	e6de      	b.n	800e0e0 <_strtod_l+0x620>
 800e322:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e326:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e32a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e32e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e332:	fa01 f308 	lsl.w	r3, r1, r8
 800e336:	930c      	str	r3, [sp, #48]	; 0x30
 800e338:	9111      	str	r1, [sp, #68]	; 0x44
 800e33a:	e741      	b.n	800e1c0 <_strtod_l+0x700>
 800e33c:	2300      	movs	r3, #0
 800e33e:	930c      	str	r3, [sp, #48]	; 0x30
 800e340:	2301      	movs	r3, #1
 800e342:	9311      	str	r3, [sp, #68]	; 0x44
 800e344:	e73c      	b.n	800e1c0 <_strtod_l+0x700>
 800e346:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e348:	4642      	mov	r2, r8
 800e34a:	4620      	mov	r0, r4
 800e34c:	f002 fa0a 	bl	8010764 <__lshift>
 800e350:	901e      	str	r0, [sp, #120]	; 0x78
 800e352:	2800      	cmp	r0, #0
 800e354:	f47f af66 	bne.w	800e224 <_strtod_l+0x764>
 800e358:	e5fe      	b.n	800df58 <_strtod_l+0x498>
 800e35a:	465f      	mov	r7, fp
 800e35c:	d16e      	bne.n	800e43c <_strtod_l+0x97c>
 800e35e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e364:	b342      	cbz	r2, 800e3b8 <_strtod_l+0x8f8>
 800e366:	4a32      	ldr	r2, [pc, #200]	; (800e430 <_strtod_l+0x970>)
 800e368:	4293      	cmp	r3, r2
 800e36a:	d128      	bne.n	800e3be <_strtod_l+0x8fe>
 800e36c:	9b04      	ldr	r3, [sp, #16]
 800e36e:	4650      	mov	r0, sl
 800e370:	b1eb      	cbz	r3, 800e3ae <_strtod_l+0x8ee>
 800e372:	4a2d      	ldr	r2, [pc, #180]	; (800e428 <_strtod_l+0x968>)
 800e374:	403a      	ands	r2, r7
 800e376:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e37a:	f04f 31ff 	mov.w	r1, #4294967295
 800e37e:	d819      	bhi.n	800e3b4 <_strtod_l+0x8f4>
 800e380:	0d12      	lsrs	r2, r2, #20
 800e382:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e386:	fa01 f303 	lsl.w	r3, r1, r3
 800e38a:	4298      	cmp	r0, r3
 800e38c:	d117      	bne.n	800e3be <_strtod_l+0x8fe>
 800e38e:	4b29      	ldr	r3, [pc, #164]	; (800e434 <_strtod_l+0x974>)
 800e390:	429f      	cmp	r7, r3
 800e392:	d102      	bne.n	800e39a <_strtod_l+0x8da>
 800e394:	3001      	adds	r0, #1
 800e396:	f43f addf 	beq.w	800df58 <_strtod_l+0x498>
 800e39a:	4b23      	ldr	r3, [pc, #140]	; (800e428 <_strtod_l+0x968>)
 800e39c:	403b      	ands	r3, r7
 800e39e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e3a2:	f04f 0a00 	mov.w	sl, #0
 800e3a6:	9b04      	ldr	r3, [sp, #16]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1a0      	bne.n	800e2ee <_strtod_l+0x82e>
 800e3ac:	e5de      	b.n	800df6c <_strtod_l+0x4ac>
 800e3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b2:	e7ea      	b.n	800e38a <_strtod_l+0x8ca>
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	e7e8      	b.n	800e38a <_strtod_l+0x8ca>
 800e3b8:	ea53 030a 	orrs.w	r3, r3, sl
 800e3bc:	d088      	beq.n	800e2d0 <_strtod_l+0x810>
 800e3be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3c0:	b1db      	cbz	r3, 800e3fa <_strtod_l+0x93a>
 800e3c2:	423b      	tst	r3, r7
 800e3c4:	d0ef      	beq.n	800e3a6 <_strtod_l+0x8e6>
 800e3c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3c8:	9a04      	ldr	r2, [sp, #16]
 800e3ca:	4650      	mov	r0, sl
 800e3cc:	4659      	mov	r1, fp
 800e3ce:	b1c3      	cbz	r3, 800e402 <_strtod_l+0x942>
 800e3d0:	f7ff fb59 	bl	800da86 <sulp>
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e3dc:	f7f1 ff66 	bl	80002ac <__adddf3>
 800e3e0:	4682      	mov	sl, r0
 800e3e2:	468b      	mov	fp, r1
 800e3e4:	e7df      	b.n	800e3a6 <_strtod_l+0x8e6>
 800e3e6:	4013      	ands	r3, r2
 800e3e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e3ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e3f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e3f4:	f04f 3aff 	mov.w	sl, #4294967295
 800e3f8:	e7d5      	b.n	800e3a6 <_strtod_l+0x8e6>
 800e3fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3fc:	ea13 0f0a 	tst.w	r3, sl
 800e400:	e7e0      	b.n	800e3c4 <_strtod_l+0x904>
 800e402:	f7ff fb40 	bl	800da86 <sulp>
 800e406:	4602      	mov	r2, r0
 800e408:	460b      	mov	r3, r1
 800e40a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e40e:	f7f1 ff4b 	bl	80002a8 <__aeabi_dsub>
 800e412:	2200      	movs	r2, #0
 800e414:	2300      	movs	r3, #0
 800e416:	4682      	mov	sl, r0
 800e418:	468b      	mov	fp, r1
 800e41a:	f7f2 fb65 	bl	8000ae8 <__aeabi_dcmpeq>
 800e41e:	2800      	cmp	r0, #0
 800e420:	d0c1      	beq.n	800e3a6 <_strtod_l+0x8e6>
 800e422:	e60e      	b.n	800e042 <_strtod_l+0x582>
 800e424:	fffffc02 	.word	0xfffffc02
 800e428:	7ff00000 	.word	0x7ff00000
 800e42c:	39500000 	.word	0x39500000
 800e430:	000fffff 	.word	0x000fffff
 800e434:	7fefffff 	.word	0x7fefffff
 800e438:	08011810 	.word	0x08011810
 800e43c:	4631      	mov	r1, r6
 800e43e:	4628      	mov	r0, r5
 800e440:	f002 fb78 	bl	8010b34 <__ratio>
 800e444:	ec59 8b10 	vmov	r8, r9, d0
 800e448:	ee10 0a10 	vmov	r0, s0
 800e44c:	2200      	movs	r2, #0
 800e44e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e452:	4649      	mov	r1, r9
 800e454:	f7f2 fb5c 	bl	8000b10 <__aeabi_dcmple>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d07c      	beq.n	800e556 <_strtod_l+0xa96>
 800e45c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d04c      	beq.n	800e4fc <_strtod_l+0xa3c>
 800e462:	4b95      	ldr	r3, [pc, #596]	; (800e6b8 <_strtod_l+0xbf8>)
 800e464:	2200      	movs	r2, #0
 800e466:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e46a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e6b8 <_strtod_l+0xbf8>
 800e46e:	f04f 0800 	mov.w	r8, #0
 800e472:	4b92      	ldr	r3, [pc, #584]	; (800e6bc <_strtod_l+0xbfc>)
 800e474:	403b      	ands	r3, r7
 800e476:	9311      	str	r3, [sp, #68]	; 0x44
 800e478:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e47a:	4b91      	ldr	r3, [pc, #580]	; (800e6c0 <_strtod_l+0xc00>)
 800e47c:	429a      	cmp	r2, r3
 800e47e:	f040 80b2 	bne.w	800e5e6 <_strtod_l+0xb26>
 800e482:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e48a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e48e:	ec4b ab10 	vmov	d0, sl, fp
 800e492:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e496:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e49a:	f002 fa73 	bl	8010984 <__ulp>
 800e49e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e4a2:	ec53 2b10 	vmov	r2, r3, d0
 800e4a6:	f7f2 f8b7 	bl	8000618 <__aeabi_dmul>
 800e4aa:	4652      	mov	r2, sl
 800e4ac:	465b      	mov	r3, fp
 800e4ae:	f7f1 fefd 	bl	80002ac <__adddf3>
 800e4b2:	460b      	mov	r3, r1
 800e4b4:	4981      	ldr	r1, [pc, #516]	; (800e6bc <_strtod_l+0xbfc>)
 800e4b6:	4a83      	ldr	r2, [pc, #524]	; (800e6c4 <_strtod_l+0xc04>)
 800e4b8:	4019      	ands	r1, r3
 800e4ba:	4291      	cmp	r1, r2
 800e4bc:	4682      	mov	sl, r0
 800e4be:	d95e      	bls.n	800e57e <_strtod_l+0xabe>
 800e4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4c2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d103      	bne.n	800e4d2 <_strtod_l+0xa12>
 800e4ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	f43f ad43 	beq.w	800df58 <_strtod_l+0x498>
 800e4d2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e6d0 <_strtod_l+0xc10>
 800e4d6:	f04f 3aff 	mov.w	sl, #4294967295
 800e4da:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f001 ff25 	bl	801032c <_Bfree>
 800e4e2:	9907      	ldr	r1, [sp, #28]
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	f001 ff21 	bl	801032c <_Bfree>
 800e4ea:	4631      	mov	r1, r6
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f001 ff1d 	bl	801032c <_Bfree>
 800e4f2:	4629      	mov	r1, r5
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f001 ff19 	bl	801032c <_Bfree>
 800e4fa:	e613      	b.n	800e124 <_strtod_l+0x664>
 800e4fc:	f1ba 0f00 	cmp.w	sl, #0
 800e500:	d11b      	bne.n	800e53a <_strtod_l+0xa7a>
 800e502:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e506:	b9f3      	cbnz	r3, 800e546 <_strtod_l+0xa86>
 800e508:	4b6b      	ldr	r3, [pc, #428]	; (800e6b8 <_strtod_l+0xbf8>)
 800e50a:	2200      	movs	r2, #0
 800e50c:	4640      	mov	r0, r8
 800e50e:	4649      	mov	r1, r9
 800e510:	f7f2 faf4 	bl	8000afc <__aeabi_dcmplt>
 800e514:	b9d0      	cbnz	r0, 800e54c <_strtod_l+0xa8c>
 800e516:	4640      	mov	r0, r8
 800e518:	4649      	mov	r1, r9
 800e51a:	4b6b      	ldr	r3, [pc, #428]	; (800e6c8 <_strtod_l+0xc08>)
 800e51c:	2200      	movs	r2, #0
 800e51e:	f7f2 f87b 	bl	8000618 <__aeabi_dmul>
 800e522:	4680      	mov	r8, r0
 800e524:	4689      	mov	r9, r1
 800e526:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e52a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e52e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e530:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e534:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e538:	e79b      	b.n	800e472 <_strtod_l+0x9b2>
 800e53a:	f1ba 0f01 	cmp.w	sl, #1
 800e53e:	d102      	bne.n	800e546 <_strtod_l+0xa86>
 800e540:	2f00      	cmp	r7, #0
 800e542:	f43f ad7e 	beq.w	800e042 <_strtod_l+0x582>
 800e546:	4b61      	ldr	r3, [pc, #388]	; (800e6cc <_strtod_l+0xc0c>)
 800e548:	2200      	movs	r2, #0
 800e54a:	e78c      	b.n	800e466 <_strtod_l+0x9a6>
 800e54c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e6c8 <_strtod_l+0xc08>
 800e550:	f04f 0800 	mov.w	r8, #0
 800e554:	e7e7      	b.n	800e526 <_strtod_l+0xa66>
 800e556:	4b5c      	ldr	r3, [pc, #368]	; (800e6c8 <_strtod_l+0xc08>)
 800e558:	4640      	mov	r0, r8
 800e55a:	4649      	mov	r1, r9
 800e55c:	2200      	movs	r2, #0
 800e55e:	f7f2 f85b 	bl	8000618 <__aeabi_dmul>
 800e562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e564:	4680      	mov	r8, r0
 800e566:	4689      	mov	r9, r1
 800e568:	b933      	cbnz	r3, 800e578 <_strtod_l+0xab8>
 800e56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e56e:	9012      	str	r0, [sp, #72]	; 0x48
 800e570:	9313      	str	r3, [sp, #76]	; 0x4c
 800e572:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e576:	e7dd      	b.n	800e534 <_strtod_l+0xa74>
 800e578:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e57c:	e7f9      	b.n	800e572 <_strtod_l+0xab2>
 800e57e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e582:	9b04      	ldr	r3, [sp, #16]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1a8      	bne.n	800e4da <_strtod_l+0xa1a>
 800e588:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e58c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e58e:	0d1b      	lsrs	r3, r3, #20
 800e590:	051b      	lsls	r3, r3, #20
 800e592:	429a      	cmp	r2, r3
 800e594:	d1a1      	bne.n	800e4da <_strtod_l+0xa1a>
 800e596:	4640      	mov	r0, r8
 800e598:	4649      	mov	r1, r9
 800e59a:	f7f2 fb9d 	bl	8000cd8 <__aeabi_d2lz>
 800e59e:	f7f2 f80d 	bl	80005bc <__aeabi_l2d>
 800e5a2:	4602      	mov	r2, r0
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	4640      	mov	r0, r8
 800e5a8:	4649      	mov	r1, r9
 800e5aa:	f7f1 fe7d 	bl	80002a8 <__aeabi_dsub>
 800e5ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e5b4:	ea43 030a 	orr.w	r3, r3, sl
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	4680      	mov	r8, r0
 800e5bc:	4689      	mov	r9, r1
 800e5be:	d053      	beq.n	800e668 <_strtod_l+0xba8>
 800e5c0:	a335      	add	r3, pc, #212	; (adr r3, 800e698 <_strtod_l+0xbd8>)
 800e5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c6:	f7f2 fa99 	bl	8000afc <__aeabi_dcmplt>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	f47f acce 	bne.w	800df6c <_strtod_l+0x4ac>
 800e5d0:	a333      	add	r3, pc, #204	; (adr r3, 800e6a0 <_strtod_l+0xbe0>)
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	4640      	mov	r0, r8
 800e5d8:	4649      	mov	r1, r9
 800e5da:	f7f2 faad 	bl	8000b38 <__aeabi_dcmpgt>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	f43f af7b 	beq.w	800e4da <_strtod_l+0xa1a>
 800e5e4:	e4c2      	b.n	800df6c <_strtod_l+0x4ac>
 800e5e6:	9b04      	ldr	r3, [sp, #16]
 800e5e8:	b333      	cbz	r3, 800e638 <_strtod_l+0xb78>
 800e5ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e5f0:	d822      	bhi.n	800e638 <_strtod_l+0xb78>
 800e5f2:	a32d      	add	r3, pc, #180	; (adr r3, 800e6a8 <_strtod_l+0xbe8>)
 800e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f8:	4640      	mov	r0, r8
 800e5fa:	4649      	mov	r1, r9
 800e5fc:	f7f2 fa88 	bl	8000b10 <__aeabi_dcmple>
 800e600:	b1a0      	cbz	r0, 800e62c <_strtod_l+0xb6c>
 800e602:	4649      	mov	r1, r9
 800e604:	4640      	mov	r0, r8
 800e606:	f7f2 fadf 	bl	8000bc8 <__aeabi_d2uiz>
 800e60a:	2801      	cmp	r0, #1
 800e60c:	bf38      	it	cc
 800e60e:	2001      	movcc	r0, #1
 800e610:	f7f1 ff88 	bl	8000524 <__aeabi_ui2d>
 800e614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e616:	4680      	mov	r8, r0
 800e618:	4689      	mov	r9, r1
 800e61a:	bb13      	cbnz	r3, 800e662 <_strtod_l+0xba2>
 800e61c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e620:	9014      	str	r0, [sp, #80]	; 0x50
 800e622:	9315      	str	r3, [sp, #84]	; 0x54
 800e624:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e628:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e62c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e62e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e630:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e634:	1a9b      	subs	r3, r3, r2
 800e636:	930d      	str	r3, [sp, #52]	; 0x34
 800e638:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e63c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e640:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e644:	f002 f99e 	bl	8010984 <__ulp>
 800e648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e64c:	ec53 2b10 	vmov	r2, r3, d0
 800e650:	f7f1 ffe2 	bl	8000618 <__aeabi_dmul>
 800e654:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e658:	f7f1 fe28 	bl	80002ac <__adddf3>
 800e65c:	4682      	mov	sl, r0
 800e65e:	468b      	mov	fp, r1
 800e660:	e78f      	b.n	800e582 <_strtod_l+0xac2>
 800e662:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e666:	e7dd      	b.n	800e624 <_strtod_l+0xb64>
 800e668:	a311      	add	r3, pc, #68	; (adr r3, 800e6b0 <_strtod_l+0xbf0>)
 800e66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66e:	f7f2 fa45 	bl	8000afc <__aeabi_dcmplt>
 800e672:	e7b4      	b.n	800e5de <_strtod_l+0xb1e>
 800e674:	2300      	movs	r3, #0
 800e676:	930e      	str	r3, [sp, #56]	; 0x38
 800e678:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e67a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e67c:	6013      	str	r3, [r2, #0]
 800e67e:	f7ff ba65 	b.w	800db4c <_strtod_l+0x8c>
 800e682:	2b65      	cmp	r3, #101	; 0x65
 800e684:	f43f ab5d 	beq.w	800dd42 <_strtod_l+0x282>
 800e688:	2b45      	cmp	r3, #69	; 0x45
 800e68a:	f43f ab5a 	beq.w	800dd42 <_strtod_l+0x282>
 800e68e:	2201      	movs	r2, #1
 800e690:	f7ff bb92 	b.w	800ddb8 <_strtod_l+0x2f8>
 800e694:	f3af 8000 	nop.w
 800e698:	94a03595 	.word	0x94a03595
 800e69c:	3fdfffff 	.word	0x3fdfffff
 800e6a0:	35afe535 	.word	0x35afe535
 800e6a4:	3fe00000 	.word	0x3fe00000
 800e6a8:	ffc00000 	.word	0xffc00000
 800e6ac:	41dfffff 	.word	0x41dfffff
 800e6b0:	94a03595 	.word	0x94a03595
 800e6b4:	3fcfffff 	.word	0x3fcfffff
 800e6b8:	3ff00000 	.word	0x3ff00000
 800e6bc:	7ff00000 	.word	0x7ff00000
 800e6c0:	7fe00000 	.word	0x7fe00000
 800e6c4:	7c9fffff 	.word	0x7c9fffff
 800e6c8:	3fe00000 	.word	0x3fe00000
 800e6cc:	bff00000 	.word	0xbff00000
 800e6d0:	7fefffff 	.word	0x7fefffff

0800e6d4 <_strtod_r>:
 800e6d4:	4b01      	ldr	r3, [pc, #4]	; (800e6dc <_strtod_r+0x8>)
 800e6d6:	f7ff b9f3 	b.w	800dac0 <_strtod_l>
 800e6da:	bf00      	nop
 800e6dc:	2000008c 	.word	0x2000008c

0800e6e0 <_strtol_l.isra.0>:
 800e6e0:	2b01      	cmp	r3, #1
 800e6e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6e6:	d001      	beq.n	800e6ec <_strtol_l.isra.0+0xc>
 800e6e8:	2b24      	cmp	r3, #36	; 0x24
 800e6ea:	d906      	bls.n	800e6fa <_strtol_l.isra.0+0x1a>
 800e6ec:	f7fe f9cc 	bl	800ca88 <__errno>
 800e6f0:	2316      	movs	r3, #22
 800e6f2:	6003      	str	r3, [r0, #0]
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6fa:	4f3a      	ldr	r7, [pc, #232]	; (800e7e4 <_strtol_l.isra.0+0x104>)
 800e6fc:	468e      	mov	lr, r1
 800e6fe:	4676      	mov	r6, lr
 800e700:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e704:	5de5      	ldrb	r5, [r4, r7]
 800e706:	f015 0508 	ands.w	r5, r5, #8
 800e70a:	d1f8      	bne.n	800e6fe <_strtol_l.isra.0+0x1e>
 800e70c:	2c2d      	cmp	r4, #45	; 0x2d
 800e70e:	d134      	bne.n	800e77a <_strtol_l.isra.0+0x9a>
 800e710:	f89e 4000 	ldrb.w	r4, [lr]
 800e714:	f04f 0801 	mov.w	r8, #1
 800e718:	f106 0e02 	add.w	lr, r6, #2
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d05c      	beq.n	800e7da <_strtol_l.isra.0+0xfa>
 800e720:	2b10      	cmp	r3, #16
 800e722:	d10c      	bne.n	800e73e <_strtol_l.isra.0+0x5e>
 800e724:	2c30      	cmp	r4, #48	; 0x30
 800e726:	d10a      	bne.n	800e73e <_strtol_l.isra.0+0x5e>
 800e728:	f89e 4000 	ldrb.w	r4, [lr]
 800e72c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e730:	2c58      	cmp	r4, #88	; 0x58
 800e732:	d14d      	bne.n	800e7d0 <_strtol_l.isra.0+0xf0>
 800e734:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e738:	2310      	movs	r3, #16
 800e73a:	f10e 0e02 	add.w	lr, lr, #2
 800e73e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e742:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e746:	2600      	movs	r6, #0
 800e748:	fbbc f9f3 	udiv	r9, ip, r3
 800e74c:	4635      	mov	r5, r6
 800e74e:	fb03 ca19 	mls	sl, r3, r9, ip
 800e752:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e756:	2f09      	cmp	r7, #9
 800e758:	d818      	bhi.n	800e78c <_strtol_l.isra.0+0xac>
 800e75a:	463c      	mov	r4, r7
 800e75c:	42a3      	cmp	r3, r4
 800e75e:	dd24      	ble.n	800e7aa <_strtol_l.isra.0+0xca>
 800e760:	2e00      	cmp	r6, #0
 800e762:	db1f      	blt.n	800e7a4 <_strtol_l.isra.0+0xc4>
 800e764:	45a9      	cmp	r9, r5
 800e766:	d31d      	bcc.n	800e7a4 <_strtol_l.isra.0+0xc4>
 800e768:	d101      	bne.n	800e76e <_strtol_l.isra.0+0x8e>
 800e76a:	45a2      	cmp	sl, r4
 800e76c:	db1a      	blt.n	800e7a4 <_strtol_l.isra.0+0xc4>
 800e76e:	fb05 4503 	mla	r5, r5, r3, r4
 800e772:	2601      	movs	r6, #1
 800e774:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e778:	e7eb      	b.n	800e752 <_strtol_l.isra.0+0x72>
 800e77a:	2c2b      	cmp	r4, #43	; 0x2b
 800e77c:	bf08      	it	eq
 800e77e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e782:	46a8      	mov	r8, r5
 800e784:	bf08      	it	eq
 800e786:	f106 0e02 	addeq.w	lr, r6, #2
 800e78a:	e7c7      	b.n	800e71c <_strtol_l.isra.0+0x3c>
 800e78c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e790:	2f19      	cmp	r7, #25
 800e792:	d801      	bhi.n	800e798 <_strtol_l.isra.0+0xb8>
 800e794:	3c37      	subs	r4, #55	; 0x37
 800e796:	e7e1      	b.n	800e75c <_strtol_l.isra.0+0x7c>
 800e798:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e79c:	2f19      	cmp	r7, #25
 800e79e:	d804      	bhi.n	800e7aa <_strtol_l.isra.0+0xca>
 800e7a0:	3c57      	subs	r4, #87	; 0x57
 800e7a2:	e7db      	b.n	800e75c <_strtol_l.isra.0+0x7c>
 800e7a4:	f04f 36ff 	mov.w	r6, #4294967295
 800e7a8:	e7e4      	b.n	800e774 <_strtol_l.isra.0+0x94>
 800e7aa:	2e00      	cmp	r6, #0
 800e7ac:	da05      	bge.n	800e7ba <_strtol_l.isra.0+0xda>
 800e7ae:	2322      	movs	r3, #34	; 0x22
 800e7b0:	6003      	str	r3, [r0, #0]
 800e7b2:	4665      	mov	r5, ip
 800e7b4:	b942      	cbnz	r2, 800e7c8 <_strtol_l.isra.0+0xe8>
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	e79d      	b.n	800e6f6 <_strtol_l.isra.0+0x16>
 800e7ba:	f1b8 0f00 	cmp.w	r8, #0
 800e7be:	d000      	beq.n	800e7c2 <_strtol_l.isra.0+0xe2>
 800e7c0:	426d      	negs	r5, r5
 800e7c2:	2a00      	cmp	r2, #0
 800e7c4:	d0f7      	beq.n	800e7b6 <_strtol_l.isra.0+0xd6>
 800e7c6:	b10e      	cbz	r6, 800e7cc <_strtol_l.isra.0+0xec>
 800e7c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e7cc:	6011      	str	r1, [r2, #0]
 800e7ce:	e7f2      	b.n	800e7b6 <_strtol_l.isra.0+0xd6>
 800e7d0:	2430      	movs	r4, #48	; 0x30
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d1b3      	bne.n	800e73e <_strtol_l.isra.0+0x5e>
 800e7d6:	2308      	movs	r3, #8
 800e7d8:	e7b1      	b.n	800e73e <_strtol_l.isra.0+0x5e>
 800e7da:	2c30      	cmp	r4, #48	; 0x30
 800e7dc:	d0a4      	beq.n	800e728 <_strtol_l.isra.0+0x48>
 800e7de:	230a      	movs	r3, #10
 800e7e0:	e7ad      	b.n	800e73e <_strtol_l.isra.0+0x5e>
 800e7e2:	bf00      	nop
 800e7e4:	080116a1 	.word	0x080116a1

0800e7e8 <_strtol_r>:
 800e7e8:	f7ff bf7a 	b.w	800e6e0 <_strtol_l.isra.0>

0800e7ec <strtol>:
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	460a      	mov	r2, r1
 800e7f0:	4601      	mov	r1, r0
 800e7f2:	4802      	ldr	r0, [pc, #8]	; (800e7fc <strtol+0x10>)
 800e7f4:	6800      	ldr	r0, [r0, #0]
 800e7f6:	f7ff bf73 	b.w	800e6e0 <_strtol_l.isra.0>
 800e7fa:	bf00      	nop
 800e7fc:	20000024 	.word	0x20000024

0800e800 <_vsniprintf_r>:
 800e800:	b530      	push	{r4, r5, lr}
 800e802:	1e14      	subs	r4, r2, #0
 800e804:	4605      	mov	r5, r0
 800e806:	b09b      	sub	sp, #108	; 0x6c
 800e808:	4618      	mov	r0, r3
 800e80a:	da05      	bge.n	800e818 <_vsniprintf_r+0x18>
 800e80c:	238b      	movs	r3, #139	; 0x8b
 800e80e:	602b      	str	r3, [r5, #0]
 800e810:	f04f 30ff 	mov.w	r0, #4294967295
 800e814:	b01b      	add	sp, #108	; 0x6c
 800e816:	bd30      	pop	{r4, r5, pc}
 800e818:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e81c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e820:	bf14      	ite	ne
 800e822:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e826:	4623      	moveq	r3, r4
 800e828:	9302      	str	r3, [sp, #8]
 800e82a:	9305      	str	r3, [sp, #20]
 800e82c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e830:	9100      	str	r1, [sp, #0]
 800e832:	9104      	str	r1, [sp, #16]
 800e834:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e838:	4602      	mov	r2, r0
 800e83a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e83c:	4669      	mov	r1, sp
 800e83e:	4628      	mov	r0, r5
 800e840:	f002 fa5a 	bl	8010cf8 <_svfiprintf_r>
 800e844:	1c43      	adds	r3, r0, #1
 800e846:	bfbc      	itt	lt
 800e848:	238b      	movlt	r3, #139	; 0x8b
 800e84a:	602b      	strlt	r3, [r5, #0]
 800e84c:	2c00      	cmp	r4, #0
 800e84e:	d0e1      	beq.n	800e814 <_vsniprintf_r+0x14>
 800e850:	9b00      	ldr	r3, [sp, #0]
 800e852:	2200      	movs	r2, #0
 800e854:	701a      	strb	r2, [r3, #0]
 800e856:	e7dd      	b.n	800e814 <_vsniprintf_r+0x14>

0800e858 <vsniprintf>:
 800e858:	b507      	push	{r0, r1, r2, lr}
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	4613      	mov	r3, r2
 800e85e:	460a      	mov	r2, r1
 800e860:	4601      	mov	r1, r0
 800e862:	4803      	ldr	r0, [pc, #12]	; (800e870 <vsniprintf+0x18>)
 800e864:	6800      	ldr	r0, [r0, #0]
 800e866:	f7ff ffcb 	bl	800e800 <_vsniprintf_r>
 800e86a:	b003      	add	sp, #12
 800e86c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e870:	20000024 	.word	0x20000024

0800e874 <__swbuf_r>:
 800e874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e876:	460e      	mov	r6, r1
 800e878:	4614      	mov	r4, r2
 800e87a:	4605      	mov	r5, r0
 800e87c:	b118      	cbz	r0, 800e886 <__swbuf_r+0x12>
 800e87e:	6983      	ldr	r3, [r0, #24]
 800e880:	b90b      	cbnz	r3, 800e886 <__swbuf_r+0x12>
 800e882:	f001 f86b 	bl	800f95c <__sinit>
 800e886:	4b21      	ldr	r3, [pc, #132]	; (800e90c <__swbuf_r+0x98>)
 800e888:	429c      	cmp	r4, r3
 800e88a:	d12b      	bne.n	800e8e4 <__swbuf_r+0x70>
 800e88c:	686c      	ldr	r4, [r5, #4]
 800e88e:	69a3      	ldr	r3, [r4, #24]
 800e890:	60a3      	str	r3, [r4, #8]
 800e892:	89a3      	ldrh	r3, [r4, #12]
 800e894:	071a      	lsls	r2, r3, #28
 800e896:	d52f      	bpl.n	800e8f8 <__swbuf_r+0x84>
 800e898:	6923      	ldr	r3, [r4, #16]
 800e89a:	b36b      	cbz	r3, 800e8f8 <__swbuf_r+0x84>
 800e89c:	6923      	ldr	r3, [r4, #16]
 800e89e:	6820      	ldr	r0, [r4, #0]
 800e8a0:	1ac0      	subs	r0, r0, r3
 800e8a2:	6963      	ldr	r3, [r4, #20]
 800e8a4:	b2f6      	uxtb	r6, r6
 800e8a6:	4283      	cmp	r3, r0
 800e8a8:	4637      	mov	r7, r6
 800e8aa:	dc04      	bgt.n	800e8b6 <__swbuf_r+0x42>
 800e8ac:	4621      	mov	r1, r4
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	f000 ffc0 	bl	800f834 <_fflush_r>
 800e8b4:	bb30      	cbnz	r0, 800e904 <__swbuf_r+0x90>
 800e8b6:	68a3      	ldr	r3, [r4, #8]
 800e8b8:	3b01      	subs	r3, #1
 800e8ba:	60a3      	str	r3, [r4, #8]
 800e8bc:	6823      	ldr	r3, [r4, #0]
 800e8be:	1c5a      	adds	r2, r3, #1
 800e8c0:	6022      	str	r2, [r4, #0]
 800e8c2:	701e      	strb	r6, [r3, #0]
 800e8c4:	6963      	ldr	r3, [r4, #20]
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	4283      	cmp	r3, r0
 800e8ca:	d004      	beq.n	800e8d6 <__swbuf_r+0x62>
 800e8cc:	89a3      	ldrh	r3, [r4, #12]
 800e8ce:	07db      	lsls	r3, r3, #31
 800e8d0:	d506      	bpl.n	800e8e0 <__swbuf_r+0x6c>
 800e8d2:	2e0a      	cmp	r6, #10
 800e8d4:	d104      	bne.n	800e8e0 <__swbuf_r+0x6c>
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	4628      	mov	r0, r5
 800e8da:	f000 ffab 	bl	800f834 <_fflush_r>
 800e8de:	b988      	cbnz	r0, 800e904 <__swbuf_r+0x90>
 800e8e0:	4638      	mov	r0, r7
 800e8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8e4:	4b0a      	ldr	r3, [pc, #40]	; (800e910 <__swbuf_r+0x9c>)
 800e8e6:	429c      	cmp	r4, r3
 800e8e8:	d101      	bne.n	800e8ee <__swbuf_r+0x7a>
 800e8ea:	68ac      	ldr	r4, [r5, #8]
 800e8ec:	e7cf      	b.n	800e88e <__swbuf_r+0x1a>
 800e8ee:	4b09      	ldr	r3, [pc, #36]	; (800e914 <__swbuf_r+0xa0>)
 800e8f0:	429c      	cmp	r4, r3
 800e8f2:	bf08      	it	eq
 800e8f4:	68ec      	ldreq	r4, [r5, #12]
 800e8f6:	e7ca      	b.n	800e88e <__swbuf_r+0x1a>
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f000 f81e 	bl	800e93c <__swsetup_r>
 800e900:	2800      	cmp	r0, #0
 800e902:	d0cb      	beq.n	800e89c <__swbuf_r+0x28>
 800e904:	f04f 37ff 	mov.w	r7, #4294967295
 800e908:	e7ea      	b.n	800e8e0 <__swbuf_r+0x6c>
 800e90a:	bf00      	nop
 800e90c:	080118ec 	.word	0x080118ec
 800e910:	0801190c 	.word	0x0801190c
 800e914:	080118cc 	.word	0x080118cc

0800e918 <_write_r>:
 800e918:	b538      	push	{r3, r4, r5, lr}
 800e91a:	4d07      	ldr	r5, [pc, #28]	; (800e938 <_write_r+0x20>)
 800e91c:	4604      	mov	r4, r0
 800e91e:	4608      	mov	r0, r1
 800e920:	4611      	mov	r1, r2
 800e922:	2200      	movs	r2, #0
 800e924:	602a      	str	r2, [r5, #0]
 800e926:	461a      	mov	r2, r3
 800e928:	f7f5 f8e7 	bl	8003afa <_write>
 800e92c:	1c43      	adds	r3, r0, #1
 800e92e:	d102      	bne.n	800e936 <_write_r+0x1e>
 800e930:	682b      	ldr	r3, [r5, #0]
 800e932:	b103      	cbz	r3, 800e936 <_write_r+0x1e>
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	bd38      	pop	{r3, r4, r5, pc}
 800e938:	20001794 	.word	0x20001794

0800e93c <__swsetup_r>:
 800e93c:	4b32      	ldr	r3, [pc, #200]	; (800ea08 <__swsetup_r+0xcc>)
 800e93e:	b570      	push	{r4, r5, r6, lr}
 800e940:	681d      	ldr	r5, [r3, #0]
 800e942:	4606      	mov	r6, r0
 800e944:	460c      	mov	r4, r1
 800e946:	b125      	cbz	r5, 800e952 <__swsetup_r+0x16>
 800e948:	69ab      	ldr	r3, [r5, #24]
 800e94a:	b913      	cbnz	r3, 800e952 <__swsetup_r+0x16>
 800e94c:	4628      	mov	r0, r5
 800e94e:	f001 f805 	bl	800f95c <__sinit>
 800e952:	4b2e      	ldr	r3, [pc, #184]	; (800ea0c <__swsetup_r+0xd0>)
 800e954:	429c      	cmp	r4, r3
 800e956:	d10f      	bne.n	800e978 <__swsetup_r+0x3c>
 800e958:	686c      	ldr	r4, [r5, #4]
 800e95a:	89a3      	ldrh	r3, [r4, #12]
 800e95c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e960:	0719      	lsls	r1, r3, #28
 800e962:	d42c      	bmi.n	800e9be <__swsetup_r+0x82>
 800e964:	06dd      	lsls	r5, r3, #27
 800e966:	d411      	bmi.n	800e98c <__swsetup_r+0x50>
 800e968:	2309      	movs	r3, #9
 800e96a:	6033      	str	r3, [r6, #0]
 800e96c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e970:	81a3      	strh	r3, [r4, #12]
 800e972:	f04f 30ff 	mov.w	r0, #4294967295
 800e976:	e03e      	b.n	800e9f6 <__swsetup_r+0xba>
 800e978:	4b25      	ldr	r3, [pc, #148]	; (800ea10 <__swsetup_r+0xd4>)
 800e97a:	429c      	cmp	r4, r3
 800e97c:	d101      	bne.n	800e982 <__swsetup_r+0x46>
 800e97e:	68ac      	ldr	r4, [r5, #8]
 800e980:	e7eb      	b.n	800e95a <__swsetup_r+0x1e>
 800e982:	4b24      	ldr	r3, [pc, #144]	; (800ea14 <__swsetup_r+0xd8>)
 800e984:	429c      	cmp	r4, r3
 800e986:	bf08      	it	eq
 800e988:	68ec      	ldreq	r4, [r5, #12]
 800e98a:	e7e6      	b.n	800e95a <__swsetup_r+0x1e>
 800e98c:	0758      	lsls	r0, r3, #29
 800e98e:	d512      	bpl.n	800e9b6 <__swsetup_r+0x7a>
 800e990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e992:	b141      	cbz	r1, 800e9a6 <__swsetup_r+0x6a>
 800e994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e998:	4299      	cmp	r1, r3
 800e99a:	d002      	beq.n	800e9a2 <__swsetup_r+0x66>
 800e99c:	4630      	mov	r0, r6
 800e99e:	f7fe f8bb 	bl	800cb18 <_free_r>
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	6363      	str	r3, [r4, #52]	; 0x34
 800e9a6:	89a3      	ldrh	r3, [r4, #12]
 800e9a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e9ac:	81a3      	strh	r3, [r4, #12]
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	6063      	str	r3, [r4, #4]
 800e9b2:	6923      	ldr	r3, [r4, #16]
 800e9b4:	6023      	str	r3, [r4, #0]
 800e9b6:	89a3      	ldrh	r3, [r4, #12]
 800e9b8:	f043 0308 	orr.w	r3, r3, #8
 800e9bc:	81a3      	strh	r3, [r4, #12]
 800e9be:	6923      	ldr	r3, [r4, #16]
 800e9c0:	b94b      	cbnz	r3, 800e9d6 <__swsetup_r+0x9a>
 800e9c2:	89a3      	ldrh	r3, [r4, #12]
 800e9c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e9c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9cc:	d003      	beq.n	800e9d6 <__swsetup_r+0x9a>
 800e9ce:	4621      	mov	r1, r4
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	f001 fc0d 	bl	80101f0 <__smakebuf_r>
 800e9d6:	89a0      	ldrh	r0, [r4, #12]
 800e9d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e9dc:	f010 0301 	ands.w	r3, r0, #1
 800e9e0:	d00a      	beq.n	800e9f8 <__swsetup_r+0xbc>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	60a3      	str	r3, [r4, #8]
 800e9e6:	6963      	ldr	r3, [r4, #20]
 800e9e8:	425b      	negs	r3, r3
 800e9ea:	61a3      	str	r3, [r4, #24]
 800e9ec:	6923      	ldr	r3, [r4, #16]
 800e9ee:	b943      	cbnz	r3, 800ea02 <__swsetup_r+0xc6>
 800e9f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e9f4:	d1ba      	bne.n	800e96c <__swsetup_r+0x30>
 800e9f6:	bd70      	pop	{r4, r5, r6, pc}
 800e9f8:	0781      	lsls	r1, r0, #30
 800e9fa:	bf58      	it	pl
 800e9fc:	6963      	ldrpl	r3, [r4, #20]
 800e9fe:	60a3      	str	r3, [r4, #8]
 800ea00:	e7f4      	b.n	800e9ec <__swsetup_r+0xb0>
 800ea02:	2000      	movs	r0, #0
 800ea04:	e7f7      	b.n	800e9f6 <__swsetup_r+0xba>
 800ea06:	bf00      	nop
 800ea08:	20000024 	.word	0x20000024
 800ea0c:	080118ec 	.word	0x080118ec
 800ea10:	0801190c 	.word	0x0801190c
 800ea14:	080118cc 	.word	0x080118cc

0800ea18 <_close_r>:
 800ea18:	b538      	push	{r3, r4, r5, lr}
 800ea1a:	4d06      	ldr	r5, [pc, #24]	; (800ea34 <_close_r+0x1c>)
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	4604      	mov	r4, r0
 800ea20:	4608      	mov	r0, r1
 800ea22:	602b      	str	r3, [r5, #0]
 800ea24:	f7f5 f885 	bl	8003b32 <_close>
 800ea28:	1c43      	adds	r3, r0, #1
 800ea2a:	d102      	bne.n	800ea32 <_close_r+0x1a>
 800ea2c:	682b      	ldr	r3, [r5, #0]
 800ea2e:	b103      	cbz	r3, 800ea32 <_close_r+0x1a>
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	bd38      	pop	{r3, r4, r5, pc}
 800ea34:	20001794 	.word	0x20001794

0800ea38 <quorem>:
 800ea38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea3c:	6903      	ldr	r3, [r0, #16]
 800ea3e:	690c      	ldr	r4, [r1, #16]
 800ea40:	42a3      	cmp	r3, r4
 800ea42:	4607      	mov	r7, r0
 800ea44:	f2c0 8081 	blt.w	800eb4a <quorem+0x112>
 800ea48:	3c01      	subs	r4, #1
 800ea4a:	f101 0814 	add.w	r8, r1, #20
 800ea4e:	f100 0514 	add.w	r5, r0, #20
 800ea52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea56:	9301      	str	r3, [sp, #4]
 800ea58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea60:	3301      	adds	r3, #1
 800ea62:	429a      	cmp	r2, r3
 800ea64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea6c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea70:	d331      	bcc.n	800ead6 <quorem+0x9e>
 800ea72:	f04f 0e00 	mov.w	lr, #0
 800ea76:	4640      	mov	r0, r8
 800ea78:	46ac      	mov	ip, r5
 800ea7a:	46f2      	mov	sl, lr
 800ea7c:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea80:	b293      	uxth	r3, r2
 800ea82:	fb06 e303 	mla	r3, r6, r3, lr
 800ea86:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	ebaa 0303 	sub.w	r3, sl, r3
 800ea90:	0c12      	lsrs	r2, r2, #16
 800ea92:	f8dc a000 	ldr.w	sl, [ip]
 800ea96:	fb06 e202 	mla	r2, r6, r2, lr
 800ea9a:	fa13 f38a 	uxtah	r3, r3, sl
 800ea9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eaa2:	fa1f fa82 	uxth.w	sl, r2
 800eaa6:	f8dc 2000 	ldr.w	r2, [ip]
 800eaaa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800eaae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eab8:	4581      	cmp	r9, r0
 800eaba:	f84c 3b04 	str.w	r3, [ip], #4
 800eabe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eac2:	d2db      	bcs.n	800ea7c <quorem+0x44>
 800eac4:	f855 300b 	ldr.w	r3, [r5, fp]
 800eac8:	b92b      	cbnz	r3, 800ead6 <quorem+0x9e>
 800eaca:	9b01      	ldr	r3, [sp, #4]
 800eacc:	3b04      	subs	r3, #4
 800eace:	429d      	cmp	r5, r3
 800ead0:	461a      	mov	r2, r3
 800ead2:	d32e      	bcc.n	800eb32 <quorem+0xfa>
 800ead4:	613c      	str	r4, [r7, #16]
 800ead6:	4638      	mov	r0, r7
 800ead8:	f001 feb0 	bl	801083c <__mcmp>
 800eadc:	2800      	cmp	r0, #0
 800eade:	db24      	blt.n	800eb2a <quorem+0xf2>
 800eae0:	3601      	adds	r6, #1
 800eae2:	4628      	mov	r0, r5
 800eae4:	f04f 0c00 	mov.w	ip, #0
 800eae8:	f858 2b04 	ldr.w	r2, [r8], #4
 800eaec:	f8d0 e000 	ldr.w	lr, [r0]
 800eaf0:	b293      	uxth	r3, r2
 800eaf2:	ebac 0303 	sub.w	r3, ip, r3
 800eaf6:	0c12      	lsrs	r2, r2, #16
 800eaf8:	fa13 f38e 	uxtah	r3, r3, lr
 800eafc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eb00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eb04:	b29b      	uxth	r3, r3
 800eb06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb0a:	45c1      	cmp	r9, r8
 800eb0c:	f840 3b04 	str.w	r3, [r0], #4
 800eb10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eb14:	d2e8      	bcs.n	800eae8 <quorem+0xb0>
 800eb16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eb1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eb1e:	b922      	cbnz	r2, 800eb2a <quorem+0xf2>
 800eb20:	3b04      	subs	r3, #4
 800eb22:	429d      	cmp	r5, r3
 800eb24:	461a      	mov	r2, r3
 800eb26:	d30a      	bcc.n	800eb3e <quorem+0x106>
 800eb28:	613c      	str	r4, [r7, #16]
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	b003      	add	sp, #12
 800eb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb32:	6812      	ldr	r2, [r2, #0]
 800eb34:	3b04      	subs	r3, #4
 800eb36:	2a00      	cmp	r2, #0
 800eb38:	d1cc      	bne.n	800ead4 <quorem+0x9c>
 800eb3a:	3c01      	subs	r4, #1
 800eb3c:	e7c7      	b.n	800eace <quorem+0x96>
 800eb3e:	6812      	ldr	r2, [r2, #0]
 800eb40:	3b04      	subs	r3, #4
 800eb42:	2a00      	cmp	r2, #0
 800eb44:	d1f0      	bne.n	800eb28 <quorem+0xf0>
 800eb46:	3c01      	subs	r4, #1
 800eb48:	e7eb      	b.n	800eb22 <quorem+0xea>
 800eb4a:	2000      	movs	r0, #0
 800eb4c:	e7ee      	b.n	800eb2c <quorem+0xf4>
	...

0800eb50 <_dtoa_r>:
 800eb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb54:	ed2d 8b02 	vpush	{d8}
 800eb58:	ec57 6b10 	vmov	r6, r7, d0
 800eb5c:	b095      	sub	sp, #84	; 0x54
 800eb5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eb60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eb64:	9105      	str	r1, [sp, #20]
 800eb66:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	9209      	str	r2, [sp, #36]	; 0x24
 800eb6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb70:	b975      	cbnz	r5, 800eb90 <_dtoa_r+0x40>
 800eb72:	2010      	movs	r0, #16
 800eb74:	f7fd ffb2 	bl	800cadc <malloc>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	6260      	str	r0, [r4, #36]	; 0x24
 800eb7c:	b920      	cbnz	r0, 800eb88 <_dtoa_r+0x38>
 800eb7e:	4bb2      	ldr	r3, [pc, #712]	; (800ee48 <_dtoa_r+0x2f8>)
 800eb80:	21ea      	movs	r1, #234	; 0xea
 800eb82:	48b2      	ldr	r0, [pc, #712]	; (800ee4c <_dtoa_r+0x2fc>)
 800eb84:	f002 fb3a 	bl	80111fc <__assert_func>
 800eb88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb8c:	6005      	str	r5, [r0, #0]
 800eb8e:	60c5      	str	r5, [r0, #12]
 800eb90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb92:	6819      	ldr	r1, [r3, #0]
 800eb94:	b151      	cbz	r1, 800ebac <_dtoa_r+0x5c>
 800eb96:	685a      	ldr	r2, [r3, #4]
 800eb98:	604a      	str	r2, [r1, #4]
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	4093      	lsls	r3, r2
 800eb9e:	608b      	str	r3, [r1, #8]
 800eba0:	4620      	mov	r0, r4
 800eba2:	f001 fbc3 	bl	801032c <_Bfree>
 800eba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eba8:	2200      	movs	r2, #0
 800ebaa:	601a      	str	r2, [r3, #0]
 800ebac:	1e3b      	subs	r3, r7, #0
 800ebae:	bfb9      	ittee	lt
 800ebb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ebb4:	9303      	strlt	r3, [sp, #12]
 800ebb6:	2300      	movge	r3, #0
 800ebb8:	f8c8 3000 	strge.w	r3, [r8]
 800ebbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ebc0:	4ba3      	ldr	r3, [pc, #652]	; (800ee50 <_dtoa_r+0x300>)
 800ebc2:	bfbc      	itt	lt
 800ebc4:	2201      	movlt	r2, #1
 800ebc6:	f8c8 2000 	strlt.w	r2, [r8]
 800ebca:	ea33 0309 	bics.w	r3, r3, r9
 800ebce:	d11b      	bne.n	800ec08 <_dtoa_r+0xb8>
 800ebd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ebd2:	f242 730f 	movw	r3, #9999	; 0x270f
 800ebd6:	6013      	str	r3, [r2, #0]
 800ebd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ebdc:	4333      	orrs	r3, r6
 800ebde:	f000 857a 	beq.w	800f6d6 <_dtoa_r+0xb86>
 800ebe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebe4:	b963      	cbnz	r3, 800ec00 <_dtoa_r+0xb0>
 800ebe6:	4b9b      	ldr	r3, [pc, #620]	; (800ee54 <_dtoa_r+0x304>)
 800ebe8:	e024      	b.n	800ec34 <_dtoa_r+0xe4>
 800ebea:	4b9b      	ldr	r3, [pc, #620]	; (800ee58 <_dtoa_r+0x308>)
 800ebec:	9300      	str	r3, [sp, #0]
 800ebee:	3308      	adds	r3, #8
 800ebf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ebf2:	6013      	str	r3, [r2, #0]
 800ebf4:	9800      	ldr	r0, [sp, #0]
 800ebf6:	b015      	add	sp, #84	; 0x54
 800ebf8:	ecbd 8b02 	vpop	{d8}
 800ebfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec00:	4b94      	ldr	r3, [pc, #592]	; (800ee54 <_dtoa_r+0x304>)
 800ec02:	9300      	str	r3, [sp, #0]
 800ec04:	3303      	adds	r3, #3
 800ec06:	e7f3      	b.n	800ebf0 <_dtoa_r+0xa0>
 800ec08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	ec51 0b17 	vmov	r0, r1, d7
 800ec12:	2300      	movs	r3, #0
 800ec14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ec18:	f7f1 ff66 	bl	8000ae8 <__aeabi_dcmpeq>
 800ec1c:	4680      	mov	r8, r0
 800ec1e:	b158      	cbz	r0, 800ec38 <_dtoa_r+0xe8>
 800ec20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec22:	2301      	movs	r3, #1
 800ec24:	6013      	str	r3, [r2, #0]
 800ec26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 8551 	beq.w	800f6d0 <_dtoa_r+0xb80>
 800ec2e:	488b      	ldr	r0, [pc, #556]	; (800ee5c <_dtoa_r+0x30c>)
 800ec30:	6018      	str	r0, [r3, #0]
 800ec32:	1e43      	subs	r3, r0, #1
 800ec34:	9300      	str	r3, [sp, #0]
 800ec36:	e7dd      	b.n	800ebf4 <_dtoa_r+0xa4>
 800ec38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ec3c:	aa12      	add	r2, sp, #72	; 0x48
 800ec3e:	a913      	add	r1, sp, #76	; 0x4c
 800ec40:	4620      	mov	r0, r4
 800ec42:	f001 ff1b 	bl	8010a7c <__d2b>
 800ec46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ec4a:	4683      	mov	fp, r0
 800ec4c:	2d00      	cmp	r5, #0
 800ec4e:	d07c      	beq.n	800ed4a <_dtoa_r+0x1fa>
 800ec50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ec56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ec5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ec62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ec66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ec6a:	4b7d      	ldr	r3, [pc, #500]	; (800ee60 <_dtoa_r+0x310>)
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	4630      	mov	r0, r6
 800ec70:	4639      	mov	r1, r7
 800ec72:	f7f1 fb19 	bl	80002a8 <__aeabi_dsub>
 800ec76:	a36e      	add	r3, pc, #440	; (adr r3, 800ee30 <_dtoa_r+0x2e0>)
 800ec78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7c:	f7f1 fccc 	bl	8000618 <__aeabi_dmul>
 800ec80:	a36d      	add	r3, pc, #436	; (adr r3, 800ee38 <_dtoa_r+0x2e8>)
 800ec82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec86:	f7f1 fb11 	bl	80002ac <__adddf3>
 800ec8a:	4606      	mov	r6, r0
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	460f      	mov	r7, r1
 800ec90:	f7f1 fc58 	bl	8000544 <__aeabi_i2d>
 800ec94:	a36a      	add	r3, pc, #424	; (adr r3, 800ee40 <_dtoa_r+0x2f0>)
 800ec96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9a:	f7f1 fcbd 	bl	8000618 <__aeabi_dmul>
 800ec9e:	4602      	mov	r2, r0
 800eca0:	460b      	mov	r3, r1
 800eca2:	4630      	mov	r0, r6
 800eca4:	4639      	mov	r1, r7
 800eca6:	f7f1 fb01 	bl	80002ac <__adddf3>
 800ecaa:	4606      	mov	r6, r0
 800ecac:	460f      	mov	r7, r1
 800ecae:	f7f1 ff63 	bl	8000b78 <__aeabi_d2iz>
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	4682      	mov	sl, r0
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	4630      	mov	r0, r6
 800ecba:	4639      	mov	r1, r7
 800ecbc:	f7f1 ff1e 	bl	8000afc <__aeabi_dcmplt>
 800ecc0:	b148      	cbz	r0, 800ecd6 <_dtoa_r+0x186>
 800ecc2:	4650      	mov	r0, sl
 800ecc4:	f7f1 fc3e 	bl	8000544 <__aeabi_i2d>
 800ecc8:	4632      	mov	r2, r6
 800ecca:	463b      	mov	r3, r7
 800eccc:	f7f1 ff0c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ecd0:	b908      	cbnz	r0, 800ecd6 <_dtoa_r+0x186>
 800ecd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecd6:	f1ba 0f16 	cmp.w	sl, #22
 800ecda:	d854      	bhi.n	800ed86 <_dtoa_r+0x236>
 800ecdc:	4b61      	ldr	r3, [pc, #388]	; (800ee64 <_dtoa_r+0x314>)
 800ecde:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ece2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ecea:	f7f1 ff07 	bl	8000afc <__aeabi_dcmplt>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	d04b      	beq.n	800ed8a <_dtoa_r+0x23a>
 800ecf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	930e      	str	r3, [sp, #56]	; 0x38
 800ecfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ecfc:	1b5d      	subs	r5, r3, r5
 800ecfe:	1e6b      	subs	r3, r5, #1
 800ed00:	9304      	str	r3, [sp, #16]
 800ed02:	bf43      	ittte	mi
 800ed04:	2300      	movmi	r3, #0
 800ed06:	f1c5 0801 	rsbmi	r8, r5, #1
 800ed0a:	9304      	strmi	r3, [sp, #16]
 800ed0c:	f04f 0800 	movpl.w	r8, #0
 800ed10:	f1ba 0f00 	cmp.w	sl, #0
 800ed14:	db3b      	blt.n	800ed8e <_dtoa_r+0x23e>
 800ed16:	9b04      	ldr	r3, [sp, #16]
 800ed18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ed1c:	4453      	add	r3, sl
 800ed1e:	9304      	str	r3, [sp, #16]
 800ed20:	2300      	movs	r3, #0
 800ed22:	9306      	str	r3, [sp, #24]
 800ed24:	9b05      	ldr	r3, [sp, #20]
 800ed26:	2b09      	cmp	r3, #9
 800ed28:	d869      	bhi.n	800edfe <_dtoa_r+0x2ae>
 800ed2a:	2b05      	cmp	r3, #5
 800ed2c:	bfc4      	itt	gt
 800ed2e:	3b04      	subgt	r3, #4
 800ed30:	9305      	strgt	r3, [sp, #20]
 800ed32:	9b05      	ldr	r3, [sp, #20]
 800ed34:	f1a3 0302 	sub.w	r3, r3, #2
 800ed38:	bfcc      	ite	gt
 800ed3a:	2500      	movgt	r5, #0
 800ed3c:	2501      	movle	r5, #1
 800ed3e:	2b03      	cmp	r3, #3
 800ed40:	d869      	bhi.n	800ee16 <_dtoa_r+0x2c6>
 800ed42:	e8df f003 	tbb	[pc, r3]
 800ed46:	4e2c      	.short	0x4e2c
 800ed48:	5a4c      	.short	0x5a4c
 800ed4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ed4e:	441d      	add	r5, r3
 800ed50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ed54:	2b20      	cmp	r3, #32
 800ed56:	bfc1      	itttt	gt
 800ed58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ed5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ed60:	fa09 f303 	lslgt.w	r3, r9, r3
 800ed64:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ed68:	bfda      	itte	le
 800ed6a:	f1c3 0320 	rsble	r3, r3, #32
 800ed6e:	fa06 f003 	lslle.w	r0, r6, r3
 800ed72:	4318      	orrgt	r0, r3
 800ed74:	f7f1 fbd6 	bl	8000524 <__aeabi_ui2d>
 800ed78:	2301      	movs	r3, #1
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ed80:	3d01      	subs	r5, #1
 800ed82:	9310      	str	r3, [sp, #64]	; 0x40
 800ed84:	e771      	b.n	800ec6a <_dtoa_r+0x11a>
 800ed86:	2301      	movs	r3, #1
 800ed88:	e7b6      	b.n	800ecf8 <_dtoa_r+0x1a8>
 800ed8a:	900e      	str	r0, [sp, #56]	; 0x38
 800ed8c:	e7b5      	b.n	800ecfa <_dtoa_r+0x1aa>
 800ed8e:	f1ca 0300 	rsb	r3, sl, #0
 800ed92:	9306      	str	r3, [sp, #24]
 800ed94:	2300      	movs	r3, #0
 800ed96:	eba8 080a 	sub.w	r8, r8, sl
 800ed9a:	930d      	str	r3, [sp, #52]	; 0x34
 800ed9c:	e7c2      	b.n	800ed24 <_dtoa_r+0x1d4>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	9308      	str	r3, [sp, #32]
 800eda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	dc39      	bgt.n	800ee1c <_dtoa_r+0x2cc>
 800eda8:	f04f 0901 	mov.w	r9, #1
 800edac:	f8cd 9004 	str.w	r9, [sp, #4]
 800edb0:	464b      	mov	r3, r9
 800edb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800edb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800edb8:	2200      	movs	r2, #0
 800edba:	6042      	str	r2, [r0, #4]
 800edbc:	2204      	movs	r2, #4
 800edbe:	f102 0614 	add.w	r6, r2, #20
 800edc2:	429e      	cmp	r6, r3
 800edc4:	6841      	ldr	r1, [r0, #4]
 800edc6:	d92f      	bls.n	800ee28 <_dtoa_r+0x2d8>
 800edc8:	4620      	mov	r0, r4
 800edca:	f001 fa6f 	bl	80102ac <_Balloc>
 800edce:	9000      	str	r0, [sp, #0]
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d14b      	bne.n	800ee6c <_dtoa_r+0x31c>
 800edd4:	4b24      	ldr	r3, [pc, #144]	; (800ee68 <_dtoa_r+0x318>)
 800edd6:	4602      	mov	r2, r0
 800edd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eddc:	e6d1      	b.n	800eb82 <_dtoa_r+0x32>
 800edde:	2301      	movs	r3, #1
 800ede0:	e7de      	b.n	800eda0 <_dtoa_r+0x250>
 800ede2:	2300      	movs	r3, #0
 800ede4:	9308      	str	r3, [sp, #32]
 800ede6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ede8:	eb0a 0903 	add.w	r9, sl, r3
 800edec:	f109 0301 	add.w	r3, r9, #1
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	9301      	str	r3, [sp, #4]
 800edf4:	bfb8      	it	lt
 800edf6:	2301      	movlt	r3, #1
 800edf8:	e7dd      	b.n	800edb6 <_dtoa_r+0x266>
 800edfa:	2301      	movs	r3, #1
 800edfc:	e7f2      	b.n	800ede4 <_dtoa_r+0x294>
 800edfe:	2501      	movs	r5, #1
 800ee00:	2300      	movs	r3, #0
 800ee02:	9305      	str	r3, [sp, #20]
 800ee04:	9508      	str	r5, [sp, #32]
 800ee06:	f04f 39ff 	mov.w	r9, #4294967295
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ee10:	2312      	movs	r3, #18
 800ee12:	9209      	str	r2, [sp, #36]	; 0x24
 800ee14:	e7cf      	b.n	800edb6 <_dtoa_r+0x266>
 800ee16:	2301      	movs	r3, #1
 800ee18:	9308      	str	r3, [sp, #32]
 800ee1a:	e7f4      	b.n	800ee06 <_dtoa_r+0x2b6>
 800ee1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ee20:	f8cd 9004 	str.w	r9, [sp, #4]
 800ee24:	464b      	mov	r3, r9
 800ee26:	e7c6      	b.n	800edb6 <_dtoa_r+0x266>
 800ee28:	3101      	adds	r1, #1
 800ee2a:	6041      	str	r1, [r0, #4]
 800ee2c:	0052      	lsls	r2, r2, #1
 800ee2e:	e7c6      	b.n	800edbe <_dtoa_r+0x26e>
 800ee30:	636f4361 	.word	0x636f4361
 800ee34:	3fd287a7 	.word	0x3fd287a7
 800ee38:	8b60c8b3 	.word	0x8b60c8b3
 800ee3c:	3fc68a28 	.word	0x3fc68a28
 800ee40:	509f79fb 	.word	0x509f79fb
 800ee44:	3fd34413 	.word	0x3fd34413
 800ee48:	08011845 	.word	0x08011845
 800ee4c:	0801185c 	.word	0x0801185c
 800ee50:	7ff00000 	.word	0x7ff00000
 800ee54:	08011841 	.word	0x08011841
 800ee58:	08011838 	.word	0x08011838
 800ee5c:	080117b9 	.word	0x080117b9
 800ee60:	3ff80000 	.word	0x3ff80000
 800ee64:	08011a38 	.word	0x08011a38
 800ee68:	080118bb 	.word	0x080118bb
 800ee6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee6e:	9a00      	ldr	r2, [sp, #0]
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	9b01      	ldr	r3, [sp, #4]
 800ee74:	2b0e      	cmp	r3, #14
 800ee76:	f200 80ad 	bhi.w	800efd4 <_dtoa_r+0x484>
 800ee7a:	2d00      	cmp	r5, #0
 800ee7c:	f000 80aa 	beq.w	800efd4 <_dtoa_r+0x484>
 800ee80:	f1ba 0f00 	cmp.w	sl, #0
 800ee84:	dd36      	ble.n	800eef4 <_dtoa_r+0x3a4>
 800ee86:	4ac3      	ldr	r2, [pc, #780]	; (800f194 <_dtoa_r+0x644>)
 800ee88:	f00a 030f 	and.w	r3, sl, #15
 800ee8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ee90:	ed93 7b00 	vldr	d7, [r3]
 800ee94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ee98:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ee9c:	eeb0 8a47 	vmov.f32	s16, s14
 800eea0:	eef0 8a67 	vmov.f32	s17, s15
 800eea4:	d016      	beq.n	800eed4 <_dtoa_r+0x384>
 800eea6:	4bbc      	ldr	r3, [pc, #752]	; (800f198 <_dtoa_r+0x648>)
 800eea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eeac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eeb0:	f7f1 fcdc 	bl	800086c <__aeabi_ddiv>
 800eeb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eeb8:	f007 070f 	and.w	r7, r7, #15
 800eebc:	2503      	movs	r5, #3
 800eebe:	4eb6      	ldr	r6, [pc, #728]	; (800f198 <_dtoa_r+0x648>)
 800eec0:	b957      	cbnz	r7, 800eed8 <_dtoa_r+0x388>
 800eec2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eec6:	ec53 2b18 	vmov	r2, r3, d8
 800eeca:	f7f1 fccf 	bl	800086c <__aeabi_ddiv>
 800eece:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eed2:	e029      	b.n	800ef28 <_dtoa_r+0x3d8>
 800eed4:	2502      	movs	r5, #2
 800eed6:	e7f2      	b.n	800eebe <_dtoa_r+0x36e>
 800eed8:	07f9      	lsls	r1, r7, #31
 800eeda:	d508      	bpl.n	800eeee <_dtoa_r+0x39e>
 800eedc:	ec51 0b18 	vmov	r0, r1, d8
 800eee0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eee4:	f7f1 fb98 	bl	8000618 <__aeabi_dmul>
 800eee8:	ec41 0b18 	vmov	d8, r0, r1
 800eeec:	3501      	adds	r5, #1
 800eeee:	107f      	asrs	r7, r7, #1
 800eef0:	3608      	adds	r6, #8
 800eef2:	e7e5      	b.n	800eec0 <_dtoa_r+0x370>
 800eef4:	f000 80a6 	beq.w	800f044 <_dtoa_r+0x4f4>
 800eef8:	f1ca 0600 	rsb	r6, sl, #0
 800eefc:	4ba5      	ldr	r3, [pc, #660]	; (800f194 <_dtoa_r+0x644>)
 800eefe:	4fa6      	ldr	r7, [pc, #664]	; (800f198 <_dtoa_r+0x648>)
 800ef00:	f006 020f 	and.w	r2, r6, #15
 800ef04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef10:	f7f1 fb82 	bl	8000618 <__aeabi_dmul>
 800ef14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef18:	1136      	asrs	r6, r6, #4
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	2502      	movs	r5, #2
 800ef1e:	2e00      	cmp	r6, #0
 800ef20:	f040 8085 	bne.w	800f02e <_dtoa_r+0x4de>
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1d2      	bne.n	800eece <_dtoa_r+0x37e>
 800ef28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f000 808c 	beq.w	800f048 <_dtoa_r+0x4f8>
 800ef30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ef34:	4b99      	ldr	r3, [pc, #612]	; (800f19c <_dtoa_r+0x64c>)
 800ef36:	2200      	movs	r2, #0
 800ef38:	4630      	mov	r0, r6
 800ef3a:	4639      	mov	r1, r7
 800ef3c:	f7f1 fdde 	bl	8000afc <__aeabi_dcmplt>
 800ef40:	2800      	cmp	r0, #0
 800ef42:	f000 8081 	beq.w	800f048 <_dtoa_r+0x4f8>
 800ef46:	9b01      	ldr	r3, [sp, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d07d      	beq.n	800f048 <_dtoa_r+0x4f8>
 800ef4c:	f1b9 0f00 	cmp.w	r9, #0
 800ef50:	dd3c      	ble.n	800efcc <_dtoa_r+0x47c>
 800ef52:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ef56:	9307      	str	r3, [sp, #28]
 800ef58:	2200      	movs	r2, #0
 800ef5a:	4b91      	ldr	r3, [pc, #580]	; (800f1a0 <_dtoa_r+0x650>)
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	4639      	mov	r1, r7
 800ef60:	f7f1 fb5a 	bl	8000618 <__aeabi_dmul>
 800ef64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef68:	3501      	adds	r5, #1
 800ef6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ef6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ef72:	4628      	mov	r0, r5
 800ef74:	f7f1 fae6 	bl	8000544 <__aeabi_i2d>
 800ef78:	4632      	mov	r2, r6
 800ef7a:	463b      	mov	r3, r7
 800ef7c:	f7f1 fb4c 	bl	8000618 <__aeabi_dmul>
 800ef80:	4b88      	ldr	r3, [pc, #544]	; (800f1a4 <_dtoa_r+0x654>)
 800ef82:	2200      	movs	r2, #0
 800ef84:	f7f1 f992 	bl	80002ac <__adddf3>
 800ef88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ef8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef90:	9303      	str	r3, [sp, #12]
 800ef92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d15c      	bne.n	800f052 <_dtoa_r+0x502>
 800ef98:	4b83      	ldr	r3, [pc, #524]	; (800f1a8 <_dtoa_r+0x658>)
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	4639      	mov	r1, r7
 800efa0:	f7f1 f982 	bl	80002a8 <__aeabi_dsub>
 800efa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efa8:	4606      	mov	r6, r0
 800efaa:	460f      	mov	r7, r1
 800efac:	f7f1 fdc4 	bl	8000b38 <__aeabi_dcmpgt>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	f040 8296 	bne.w	800f4e2 <_dtoa_r+0x992>
 800efb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800efba:	4630      	mov	r0, r6
 800efbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efc0:	4639      	mov	r1, r7
 800efc2:	f7f1 fd9b 	bl	8000afc <__aeabi_dcmplt>
 800efc6:	2800      	cmp	r0, #0
 800efc8:	f040 8288 	bne.w	800f4dc <_dtoa_r+0x98c>
 800efcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800efd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800efd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f2c0 8158 	blt.w	800f28c <_dtoa_r+0x73c>
 800efdc:	f1ba 0f0e 	cmp.w	sl, #14
 800efe0:	f300 8154 	bgt.w	800f28c <_dtoa_r+0x73c>
 800efe4:	4b6b      	ldr	r3, [pc, #428]	; (800f194 <_dtoa_r+0x644>)
 800efe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800efea:	e9d3 8900 	ldrd	r8, r9, [r3]
 800efee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f280 80e3 	bge.w	800f1bc <_dtoa_r+0x66c>
 800eff6:	9b01      	ldr	r3, [sp, #4]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f300 80df 	bgt.w	800f1bc <_dtoa_r+0x66c>
 800effe:	f040 826d 	bne.w	800f4dc <_dtoa_r+0x98c>
 800f002:	4b69      	ldr	r3, [pc, #420]	; (800f1a8 <_dtoa_r+0x658>)
 800f004:	2200      	movs	r2, #0
 800f006:	4640      	mov	r0, r8
 800f008:	4649      	mov	r1, r9
 800f00a:	f7f1 fb05 	bl	8000618 <__aeabi_dmul>
 800f00e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f012:	f7f1 fd87 	bl	8000b24 <__aeabi_dcmpge>
 800f016:	9e01      	ldr	r6, [sp, #4]
 800f018:	4637      	mov	r7, r6
 800f01a:	2800      	cmp	r0, #0
 800f01c:	f040 8243 	bne.w	800f4a6 <_dtoa_r+0x956>
 800f020:	9d00      	ldr	r5, [sp, #0]
 800f022:	2331      	movs	r3, #49	; 0x31
 800f024:	f805 3b01 	strb.w	r3, [r5], #1
 800f028:	f10a 0a01 	add.w	sl, sl, #1
 800f02c:	e23f      	b.n	800f4ae <_dtoa_r+0x95e>
 800f02e:	07f2      	lsls	r2, r6, #31
 800f030:	d505      	bpl.n	800f03e <_dtoa_r+0x4ee>
 800f032:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f036:	f7f1 faef 	bl	8000618 <__aeabi_dmul>
 800f03a:	3501      	adds	r5, #1
 800f03c:	2301      	movs	r3, #1
 800f03e:	1076      	asrs	r6, r6, #1
 800f040:	3708      	adds	r7, #8
 800f042:	e76c      	b.n	800ef1e <_dtoa_r+0x3ce>
 800f044:	2502      	movs	r5, #2
 800f046:	e76f      	b.n	800ef28 <_dtoa_r+0x3d8>
 800f048:	9b01      	ldr	r3, [sp, #4]
 800f04a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f04e:	930c      	str	r3, [sp, #48]	; 0x30
 800f050:	e78d      	b.n	800ef6e <_dtoa_r+0x41e>
 800f052:	9900      	ldr	r1, [sp, #0]
 800f054:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f056:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f058:	4b4e      	ldr	r3, [pc, #312]	; (800f194 <_dtoa_r+0x644>)
 800f05a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f05e:	4401      	add	r1, r0
 800f060:	9102      	str	r1, [sp, #8]
 800f062:	9908      	ldr	r1, [sp, #32]
 800f064:	eeb0 8a47 	vmov.f32	s16, s14
 800f068:	eef0 8a67 	vmov.f32	s17, s15
 800f06c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f070:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f074:	2900      	cmp	r1, #0
 800f076:	d045      	beq.n	800f104 <_dtoa_r+0x5b4>
 800f078:	494c      	ldr	r1, [pc, #304]	; (800f1ac <_dtoa_r+0x65c>)
 800f07a:	2000      	movs	r0, #0
 800f07c:	f7f1 fbf6 	bl	800086c <__aeabi_ddiv>
 800f080:	ec53 2b18 	vmov	r2, r3, d8
 800f084:	f7f1 f910 	bl	80002a8 <__aeabi_dsub>
 800f088:	9d00      	ldr	r5, [sp, #0]
 800f08a:	ec41 0b18 	vmov	d8, r0, r1
 800f08e:	4639      	mov	r1, r7
 800f090:	4630      	mov	r0, r6
 800f092:	f7f1 fd71 	bl	8000b78 <__aeabi_d2iz>
 800f096:	900c      	str	r0, [sp, #48]	; 0x30
 800f098:	f7f1 fa54 	bl	8000544 <__aeabi_i2d>
 800f09c:	4602      	mov	r2, r0
 800f09e:	460b      	mov	r3, r1
 800f0a0:	4630      	mov	r0, r6
 800f0a2:	4639      	mov	r1, r7
 800f0a4:	f7f1 f900 	bl	80002a8 <__aeabi_dsub>
 800f0a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0aa:	3330      	adds	r3, #48	; 0x30
 800f0ac:	f805 3b01 	strb.w	r3, [r5], #1
 800f0b0:	ec53 2b18 	vmov	r2, r3, d8
 800f0b4:	4606      	mov	r6, r0
 800f0b6:	460f      	mov	r7, r1
 800f0b8:	f7f1 fd20 	bl	8000afc <__aeabi_dcmplt>
 800f0bc:	2800      	cmp	r0, #0
 800f0be:	d165      	bne.n	800f18c <_dtoa_r+0x63c>
 800f0c0:	4632      	mov	r2, r6
 800f0c2:	463b      	mov	r3, r7
 800f0c4:	4935      	ldr	r1, [pc, #212]	; (800f19c <_dtoa_r+0x64c>)
 800f0c6:	2000      	movs	r0, #0
 800f0c8:	f7f1 f8ee 	bl	80002a8 <__aeabi_dsub>
 800f0cc:	ec53 2b18 	vmov	r2, r3, d8
 800f0d0:	f7f1 fd14 	bl	8000afc <__aeabi_dcmplt>
 800f0d4:	2800      	cmp	r0, #0
 800f0d6:	f040 80b9 	bne.w	800f24c <_dtoa_r+0x6fc>
 800f0da:	9b02      	ldr	r3, [sp, #8]
 800f0dc:	429d      	cmp	r5, r3
 800f0de:	f43f af75 	beq.w	800efcc <_dtoa_r+0x47c>
 800f0e2:	4b2f      	ldr	r3, [pc, #188]	; (800f1a0 <_dtoa_r+0x650>)
 800f0e4:	ec51 0b18 	vmov	r0, r1, d8
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	f7f1 fa95 	bl	8000618 <__aeabi_dmul>
 800f0ee:	4b2c      	ldr	r3, [pc, #176]	; (800f1a0 <_dtoa_r+0x650>)
 800f0f0:	ec41 0b18 	vmov	d8, r0, r1
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	4639      	mov	r1, r7
 800f0fa:	f7f1 fa8d 	bl	8000618 <__aeabi_dmul>
 800f0fe:	4606      	mov	r6, r0
 800f100:	460f      	mov	r7, r1
 800f102:	e7c4      	b.n	800f08e <_dtoa_r+0x53e>
 800f104:	ec51 0b17 	vmov	r0, r1, d7
 800f108:	f7f1 fa86 	bl	8000618 <__aeabi_dmul>
 800f10c:	9b02      	ldr	r3, [sp, #8]
 800f10e:	9d00      	ldr	r5, [sp, #0]
 800f110:	930c      	str	r3, [sp, #48]	; 0x30
 800f112:	ec41 0b18 	vmov	d8, r0, r1
 800f116:	4639      	mov	r1, r7
 800f118:	4630      	mov	r0, r6
 800f11a:	f7f1 fd2d 	bl	8000b78 <__aeabi_d2iz>
 800f11e:	9011      	str	r0, [sp, #68]	; 0x44
 800f120:	f7f1 fa10 	bl	8000544 <__aeabi_i2d>
 800f124:	4602      	mov	r2, r0
 800f126:	460b      	mov	r3, r1
 800f128:	4630      	mov	r0, r6
 800f12a:	4639      	mov	r1, r7
 800f12c:	f7f1 f8bc 	bl	80002a8 <__aeabi_dsub>
 800f130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f132:	3330      	adds	r3, #48	; 0x30
 800f134:	f805 3b01 	strb.w	r3, [r5], #1
 800f138:	9b02      	ldr	r3, [sp, #8]
 800f13a:	429d      	cmp	r5, r3
 800f13c:	4606      	mov	r6, r0
 800f13e:	460f      	mov	r7, r1
 800f140:	f04f 0200 	mov.w	r2, #0
 800f144:	d134      	bne.n	800f1b0 <_dtoa_r+0x660>
 800f146:	4b19      	ldr	r3, [pc, #100]	; (800f1ac <_dtoa_r+0x65c>)
 800f148:	ec51 0b18 	vmov	r0, r1, d8
 800f14c:	f7f1 f8ae 	bl	80002ac <__adddf3>
 800f150:	4602      	mov	r2, r0
 800f152:	460b      	mov	r3, r1
 800f154:	4630      	mov	r0, r6
 800f156:	4639      	mov	r1, r7
 800f158:	f7f1 fcee 	bl	8000b38 <__aeabi_dcmpgt>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d175      	bne.n	800f24c <_dtoa_r+0x6fc>
 800f160:	ec53 2b18 	vmov	r2, r3, d8
 800f164:	4911      	ldr	r1, [pc, #68]	; (800f1ac <_dtoa_r+0x65c>)
 800f166:	2000      	movs	r0, #0
 800f168:	f7f1 f89e 	bl	80002a8 <__aeabi_dsub>
 800f16c:	4602      	mov	r2, r0
 800f16e:	460b      	mov	r3, r1
 800f170:	4630      	mov	r0, r6
 800f172:	4639      	mov	r1, r7
 800f174:	f7f1 fcc2 	bl	8000afc <__aeabi_dcmplt>
 800f178:	2800      	cmp	r0, #0
 800f17a:	f43f af27 	beq.w	800efcc <_dtoa_r+0x47c>
 800f17e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f180:	1e6b      	subs	r3, r5, #1
 800f182:	930c      	str	r3, [sp, #48]	; 0x30
 800f184:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f188:	2b30      	cmp	r3, #48	; 0x30
 800f18a:	d0f8      	beq.n	800f17e <_dtoa_r+0x62e>
 800f18c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f190:	e04a      	b.n	800f228 <_dtoa_r+0x6d8>
 800f192:	bf00      	nop
 800f194:	08011a38 	.word	0x08011a38
 800f198:	08011a10 	.word	0x08011a10
 800f19c:	3ff00000 	.word	0x3ff00000
 800f1a0:	40240000 	.word	0x40240000
 800f1a4:	401c0000 	.word	0x401c0000
 800f1a8:	40140000 	.word	0x40140000
 800f1ac:	3fe00000 	.word	0x3fe00000
 800f1b0:	4baf      	ldr	r3, [pc, #700]	; (800f470 <_dtoa_r+0x920>)
 800f1b2:	f7f1 fa31 	bl	8000618 <__aeabi_dmul>
 800f1b6:	4606      	mov	r6, r0
 800f1b8:	460f      	mov	r7, r1
 800f1ba:	e7ac      	b.n	800f116 <_dtoa_r+0x5c6>
 800f1bc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f1c0:	9d00      	ldr	r5, [sp, #0]
 800f1c2:	4642      	mov	r2, r8
 800f1c4:	464b      	mov	r3, r9
 800f1c6:	4630      	mov	r0, r6
 800f1c8:	4639      	mov	r1, r7
 800f1ca:	f7f1 fb4f 	bl	800086c <__aeabi_ddiv>
 800f1ce:	f7f1 fcd3 	bl	8000b78 <__aeabi_d2iz>
 800f1d2:	9002      	str	r0, [sp, #8]
 800f1d4:	f7f1 f9b6 	bl	8000544 <__aeabi_i2d>
 800f1d8:	4642      	mov	r2, r8
 800f1da:	464b      	mov	r3, r9
 800f1dc:	f7f1 fa1c 	bl	8000618 <__aeabi_dmul>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	4630      	mov	r0, r6
 800f1e6:	4639      	mov	r1, r7
 800f1e8:	f7f1 f85e 	bl	80002a8 <__aeabi_dsub>
 800f1ec:	9e02      	ldr	r6, [sp, #8]
 800f1ee:	9f01      	ldr	r7, [sp, #4]
 800f1f0:	3630      	adds	r6, #48	; 0x30
 800f1f2:	f805 6b01 	strb.w	r6, [r5], #1
 800f1f6:	9e00      	ldr	r6, [sp, #0]
 800f1f8:	1bae      	subs	r6, r5, r6
 800f1fa:	42b7      	cmp	r7, r6
 800f1fc:	4602      	mov	r2, r0
 800f1fe:	460b      	mov	r3, r1
 800f200:	d137      	bne.n	800f272 <_dtoa_r+0x722>
 800f202:	f7f1 f853 	bl	80002ac <__adddf3>
 800f206:	4642      	mov	r2, r8
 800f208:	464b      	mov	r3, r9
 800f20a:	4606      	mov	r6, r0
 800f20c:	460f      	mov	r7, r1
 800f20e:	f7f1 fc93 	bl	8000b38 <__aeabi_dcmpgt>
 800f212:	b9c8      	cbnz	r0, 800f248 <_dtoa_r+0x6f8>
 800f214:	4642      	mov	r2, r8
 800f216:	464b      	mov	r3, r9
 800f218:	4630      	mov	r0, r6
 800f21a:	4639      	mov	r1, r7
 800f21c:	f7f1 fc64 	bl	8000ae8 <__aeabi_dcmpeq>
 800f220:	b110      	cbz	r0, 800f228 <_dtoa_r+0x6d8>
 800f222:	9b02      	ldr	r3, [sp, #8]
 800f224:	07d9      	lsls	r1, r3, #31
 800f226:	d40f      	bmi.n	800f248 <_dtoa_r+0x6f8>
 800f228:	4620      	mov	r0, r4
 800f22a:	4659      	mov	r1, fp
 800f22c:	f001 f87e 	bl	801032c <_Bfree>
 800f230:	2300      	movs	r3, #0
 800f232:	702b      	strb	r3, [r5, #0]
 800f234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f236:	f10a 0001 	add.w	r0, sl, #1
 800f23a:	6018      	str	r0, [r3, #0]
 800f23c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f43f acd8 	beq.w	800ebf4 <_dtoa_r+0xa4>
 800f244:	601d      	str	r5, [r3, #0]
 800f246:	e4d5      	b.n	800ebf4 <_dtoa_r+0xa4>
 800f248:	f8cd a01c 	str.w	sl, [sp, #28]
 800f24c:	462b      	mov	r3, r5
 800f24e:	461d      	mov	r5, r3
 800f250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f254:	2a39      	cmp	r2, #57	; 0x39
 800f256:	d108      	bne.n	800f26a <_dtoa_r+0x71a>
 800f258:	9a00      	ldr	r2, [sp, #0]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d1f7      	bne.n	800f24e <_dtoa_r+0x6fe>
 800f25e:	9a07      	ldr	r2, [sp, #28]
 800f260:	9900      	ldr	r1, [sp, #0]
 800f262:	3201      	adds	r2, #1
 800f264:	9207      	str	r2, [sp, #28]
 800f266:	2230      	movs	r2, #48	; 0x30
 800f268:	700a      	strb	r2, [r1, #0]
 800f26a:	781a      	ldrb	r2, [r3, #0]
 800f26c:	3201      	adds	r2, #1
 800f26e:	701a      	strb	r2, [r3, #0]
 800f270:	e78c      	b.n	800f18c <_dtoa_r+0x63c>
 800f272:	4b7f      	ldr	r3, [pc, #508]	; (800f470 <_dtoa_r+0x920>)
 800f274:	2200      	movs	r2, #0
 800f276:	f7f1 f9cf 	bl	8000618 <__aeabi_dmul>
 800f27a:	2200      	movs	r2, #0
 800f27c:	2300      	movs	r3, #0
 800f27e:	4606      	mov	r6, r0
 800f280:	460f      	mov	r7, r1
 800f282:	f7f1 fc31 	bl	8000ae8 <__aeabi_dcmpeq>
 800f286:	2800      	cmp	r0, #0
 800f288:	d09b      	beq.n	800f1c2 <_dtoa_r+0x672>
 800f28a:	e7cd      	b.n	800f228 <_dtoa_r+0x6d8>
 800f28c:	9a08      	ldr	r2, [sp, #32]
 800f28e:	2a00      	cmp	r2, #0
 800f290:	f000 80c4 	beq.w	800f41c <_dtoa_r+0x8cc>
 800f294:	9a05      	ldr	r2, [sp, #20]
 800f296:	2a01      	cmp	r2, #1
 800f298:	f300 80a8 	bgt.w	800f3ec <_dtoa_r+0x89c>
 800f29c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f29e:	2a00      	cmp	r2, #0
 800f2a0:	f000 80a0 	beq.w	800f3e4 <_dtoa_r+0x894>
 800f2a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f2a8:	9e06      	ldr	r6, [sp, #24]
 800f2aa:	4645      	mov	r5, r8
 800f2ac:	9a04      	ldr	r2, [sp, #16]
 800f2ae:	2101      	movs	r1, #1
 800f2b0:	441a      	add	r2, r3
 800f2b2:	4620      	mov	r0, r4
 800f2b4:	4498      	add	r8, r3
 800f2b6:	9204      	str	r2, [sp, #16]
 800f2b8:	f001 f93e 	bl	8010538 <__i2b>
 800f2bc:	4607      	mov	r7, r0
 800f2be:	2d00      	cmp	r5, #0
 800f2c0:	dd0b      	ble.n	800f2da <_dtoa_r+0x78a>
 800f2c2:	9b04      	ldr	r3, [sp, #16]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	dd08      	ble.n	800f2da <_dtoa_r+0x78a>
 800f2c8:	42ab      	cmp	r3, r5
 800f2ca:	9a04      	ldr	r2, [sp, #16]
 800f2cc:	bfa8      	it	ge
 800f2ce:	462b      	movge	r3, r5
 800f2d0:	eba8 0803 	sub.w	r8, r8, r3
 800f2d4:	1aed      	subs	r5, r5, r3
 800f2d6:	1ad3      	subs	r3, r2, r3
 800f2d8:	9304      	str	r3, [sp, #16]
 800f2da:	9b06      	ldr	r3, [sp, #24]
 800f2dc:	b1fb      	cbz	r3, 800f31e <_dtoa_r+0x7ce>
 800f2de:	9b08      	ldr	r3, [sp, #32]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	f000 809f 	beq.w	800f424 <_dtoa_r+0x8d4>
 800f2e6:	2e00      	cmp	r6, #0
 800f2e8:	dd11      	ble.n	800f30e <_dtoa_r+0x7be>
 800f2ea:	4639      	mov	r1, r7
 800f2ec:	4632      	mov	r2, r6
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f001 f9de 	bl	80106b0 <__pow5mult>
 800f2f4:	465a      	mov	r2, fp
 800f2f6:	4601      	mov	r1, r0
 800f2f8:	4607      	mov	r7, r0
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f001 f932 	bl	8010564 <__multiply>
 800f300:	4659      	mov	r1, fp
 800f302:	9007      	str	r0, [sp, #28]
 800f304:	4620      	mov	r0, r4
 800f306:	f001 f811 	bl	801032c <_Bfree>
 800f30a:	9b07      	ldr	r3, [sp, #28]
 800f30c:	469b      	mov	fp, r3
 800f30e:	9b06      	ldr	r3, [sp, #24]
 800f310:	1b9a      	subs	r2, r3, r6
 800f312:	d004      	beq.n	800f31e <_dtoa_r+0x7ce>
 800f314:	4659      	mov	r1, fp
 800f316:	4620      	mov	r0, r4
 800f318:	f001 f9ca 	bl	80106b0 <__pow5mult>
 800f31c:	4683      	mov	fp, r0
 800f31e:	2101      	movs	r1, #1
 800f320:	4620      	mov	r0, r4
 800f322:	f001 f909 	bl	8010538 <__i2b>
 800f326:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f328:	2b00      	cmp	r3, #0
 800f32a:	4606      	mov	r6, r0
 800f32c:	dd7c      	ble.n	800f428 <_dtoa_r+0x8d8>
 800f32e:	461a      	mov	r2, r3
 800f330:	4601      	mov	r1, r0
 800f332:	4620      	mov	r0, r4
 800f334:	f001 f9bc 	bl	80106b0 <__pow5mult>
 800f338:	9b05      	ldr	r3, [sp, #20]
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	4606      	mov	r6, r0
 800f33e:	dd76      	ble.n	800f42e <_dtoa_r+0x8de>
 800f340:	2300      	movs	r3, #0
 800f342:	9306      	str	r3, [sp, #24]
 800f344:	6933      	ldr	r3, [r6, #16]
 800f346:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f34a:	6918      	ldr	r0, [r3, #16]
 800f34c:	f001 f8a4 	bl	8010498 <__hi0bits>
 800f350:	f1c0 0020 	rsb	r0, r0, #32
 800f354:	9b04      	ldr	r3, [sp, #16]
 800f356:	4418      	add	r0, r3
 800f358:	f010 001f 	ands.w	r0, r0, #31
 800f35c:	f000 8086 	beq.w	800f46c <_dtoa_r+0x91c>
 800f360:	f1c0 0320 	rsb	r3, r0, #32
 800f364:	2b04      	cmp	r3, #4
 800f366:	dd7f      	ble.n	800f468 <_dtoa_r+0x918>
 800f368:	f1c0 001c 	rsb	r0, r0, #28
 800f36c:	9b04      	ldr	r3, [sp, #16]
 800f36e:	4403      	add	r3, r0
 800f370:	4480      	add	r8, r0
 800f372:	4405      	add	r5, r0
 800f374:	9304      	str	r3, [sp, #16]
 800f376:	f1b8 0f00 	cmp.w	r8, #0
 800f37a:	dd05      	ble.n	800f388 <_dtoa_r+0x838>
 800f37c:	4659      	mov	r1, fp
 800f37e:	4642      	mov	r2, r8
 800f380:	4620      	mov	r0, r4
 800f382:	f001 f9ef 	bl	8010764 <__lshift>
 800f386:	4683      	mov	fp, r0
 800f388:	9b04      	ldr	r3, [sp, #16]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	dd05      	ble.n	800f39a <_dtoa_r+0x84a>
 800f38e:	4631      	mov	r1, r6
 800f390:	461a      	mov	r2, r3
 800f392:	4620      	mov	r0, r4
 800f394:	f001 f9e6 	bl	8010764 <__lshift>
 800f398:	4606      	mov	r6, r0
 800f39a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d069      	beq.n	800f474 <_dtoa_r+0x924>
 800f3a0:	4631      	mov	r1, r6
 800f3a2:	4658      	mov	r0, fp
 800f3a4:	f001 fa4a 	bl	801083c <__mcmp>
 800f3a8:	2800      	cmp	r0, #0
 800f3aa:	da63      	bge.n	800f474 <_dtoa_r+0x924>
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	4659      	mov	r1, fp
 800f3b0:	220a      	movs	r2, #10
 800f3b2:	4620      	mov	r0, r4
 800f3b4:	f000 ffdc 	bl	8010370 <__multadd>
 800f3b8:	9b08      	ldr	r3, [sp, #32]
 800f3ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3be:	4683      	mov	fp, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f000 818f 	beq.w	800f6e4 <_dtoa_r+0xb94>
 800f3c6:	4639      	mov	r1, r7
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	220a      	movs	r2, #10
 800f3cc:	4620      	mov	r0, r4
 800f3ce:	f000 ffcf 	bl	8010370 <__multadd>
 800f3d2:	f1b9 0f00 	cmp.w	r9, #0
 800f3d6:	4607      	mov	r7, r0
 800f3d8:	f300 808e 	bgt.w	800f4f8 <_dtoa_r+0x9a8>
 800f3dc:	9b05      	ldr	r3, [sp, #20]
 800f3de:	2b02      	cmp	r3, #2
 800f3e0:	dc50      	bgt.n	800f484 <_dtoa_r+0x934>
 800f3e2:	e089      	b.n	800f4f8 <_dtoa_r+0x9a8>
 800f3e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f3e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f3ea:	e75d      	b.n	800f2a8 <_dtoa_r+0x758>
 800f3ec:	9b01      	ldr	r3, [sp, #4]
 800f3ee:	1e5e      	subs	r6, r3, #1
 800f3f0:	9b06      	ldr	r3, [sp, #24]
 800f3f2:	42b3      	cmp	r3, r6
 800f3f4:	bfbf      	itttt	lt
 800f3f6:	9b06      	ldrlt	r3, [sp, #24]
 800f3f8:	9606      	strlt	r6, [sp, #24]
 800f3fa:	1af2      	sublt	r2, r6, r3
 800f3fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f3fe:	bfb6      	itet	lt
 800f400:	189b      	addlt	r3, r3, r2
 800f402:	1b9e      	subge	r6, r3, r6
 800f404:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f406:	9b01      	ldr	r3, [sp, #4]
 800f408:	bfb8      	it	lt
 800f40a:	2600      	movlt	r6, #0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	bfb5      	itete	lt
 800f410:	eba8 0503 	sublt.w	r5, r8, r3
 800f414:	9b01      	ldrge	r3, [sp, #4]
 800f416:	2300      	movlt	r3, #0
 800f418:	4645      	movge	r5, r8
 800f41a:	e747      	b.n	800f2ac <_dtoa_r+0x75c>
 800f41c:	9e06      	ldr	r6, [sp, #24]
 800f41e:	9f08      	ldr	r7, [sp, #32]
 800f420:	4645      	mov	r5, r8
 800f422:	e74c      	b.n	800f2be <_dtoa_r+0x76e>
 800f424:	9a06      	ldr	r2, [sp, #24]
 800f426:	e775      	b.n	800f314 <_dtoa_r+0x7c4>
 800f428:	9b05      	ldr	r3, [sp, #20]
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	dc18      	bgt.n	800f460 <_dtoa_r+0x910>
 800f42e:	9b02      	ldr	r3, [sp, #8]
 800f430:	b9b3      	cbnz	r3, 800f460 <_dtoa_r+0x910>
 800f432:	9b03      	ldr	r3, [sp, #12]
 800f434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f438:	b9a3      	cbnz	r3, 800f464 <_dtoa_r+0x914>
 800f43a:	9b03      	ldr	r3, [sp, #12]
 800f43c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f440:	0d1b      	lsrs	r3, r3, #20
 800f442:	051b      	lsls	r3, r3, #20
 800f444:	b12b      	cbz	r3, 800f452 <_dtoa_r+0x902>
 800f446:	9b04      	ldr	r3, [sp, #16]
 800f448:	3301      	adds	r3, #1
 800f44a:	9304      	str	r3, [sp, #16]
 800f44c:	f108 0801 	add.w	r8, r8, #1
 800f450:	2301      	movs	r3, #1
 800f452:	9306      	str	r3, [sp, #24]
 800f454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f456:	2b00      	cmp	r3, #0
 800f458:	f47f af74 	bne.w	800f344 <_dtoa_r+0x7f4>
 800f45c:	2001      	movs	r0, #1
 800f45e:	e779      	b.n	800f354 <_dtoa_r+0x804>
 800f460:	2300      	movs	r3, #0
 800f462:	e7f6      	b.n	800f452 <_dtoa_r+0x902>
 800f464:	9b02      	ldr	r3, [sp, #8]
 800f466:	e7f4      	b.n	800f452 <_dtoa_r+0x902>
 800f468:	d085      	beq.n	800f376 <_dtoa_r+0x826>
 800f46a:	4618      	mov	r0, r3
 800f46c:	301c      	adds	r0, #28
 800f46e:	e77d      	b.n	800f36c <_dtoa_r+0x81c>
 800f470:	40240000 	.word	0x40240000
 800f474:	9b01      	ldr	r3, [sp, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	dc38      	bgt.n	800f4ec <_dtoa_r+0x99c>
 800f47a:	9b05      	ldr	r3, [sp, #20]
 800f47c:	2b02      	cmp	r3, #2
 800f47e:	dd35      	ble.n	800f4ec <_dtoa_r+0x99c>
 800f480:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f484:	f1b9 0f00 	cmp.w	r9, #0
 800f488:	d10d      	bne.n	800f4a6 <_dtoa_r+0x956>
 800f48a:	4631      	mov	r1, r6
 800f48c:	464b      	mov	r3, r9
 800f48e:	2205      	movs	r2, #5
 800f490:	4620      	mov	r0, r4
 800f492:	f000 ff6d 	bl	8010370 <__multadd>
 800f496:	4601      	mov	r1, r0
 800f498:	4606      	mov	r6, r0
 800f49a:	4658      	mov	r0, fp
 800f49c:	f001 f9ce 	bl	801083c <__mcmp>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	f73f adbd 	bgt.w	800f020 <_dtoa_r+0x4d0>
 800f4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4a8:	9d00      	ldr	r5, [sp, #0]
 800f4aa:	ea6f 0a03 	mvn.w	sl, r3
 800f4ae:	f04f 0800 	mov.w	r8, #0
 800f4b2:	4631      	mov	r1, r6
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f000 ff39 	bl	801032c <_Bfree>
 800f4ba:	2f00      	cmp	r7, #0
 800f4bc:	f43f aeb4 	beq.w	800f228 <_dtoa_r+0x6d8>
 800f4c0:	f1b8 0f00 	cmp.w	r8, #0
 800f4c4:	d005      	beq.n	800f4d2 <_dtoa_r+0x982>
 800f4c6:	45b8      	cmp	r8, r7
 800f4c8:	d003      	beq.n	800f4d2 <_dtoa_r+0x982>
 800f4ca:	4641      	mov	r1, r8
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	f000 ff2d 	bl	801032c <_Bfree>
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f000 ff29 	bl	801032c <_Bfree>
 800f4da:	e6a5      	b.n	800f228 <_dtoa_r+0x6d8>
 800f4dc:	2600      	movs	r6, #0
 800f4de:	4637      	mov	r7, r6
 800f4e0:	e7e1      	b.n	800f4a6 <_dtoa_r+0x956>
 800f4e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f4e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f4e8:	4637      	mov	r7, r6
 800f4ea:	e599      	b.n	800f020 <_dtoa_r+0x4d0>
 800f4ec:	9b08      	ldr	r3, [sp, #32]
 800f4ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f000 80fd 	beq.w	800f6f2 <_dtoa_r+0xba2>
 800f4f8:	2d00      	cmp	r5, #0
 800f4fa:	dd05      	ble.n	800f508 <_dtoa_r+0x9b8>
 800f4fc:	4639      	mov	r1, r7
 800f4fe:	462a      	mov	r2, r5
 800f500:	4620      	mov	r0, r4
 800f502:	f001 f92f 	bl	8010764 <__lshift>
 800f506:	4607      	mov	r7, r0
 800f508:	9b06      	ldr	r3, [sp, #24]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d05c      	beq.n	800f5c8 <_dtoa_r+0xa78>
 800f50e:	6879      	ldr	r1, [r7, #4]
 800f510:	4620      	mov	r0, r4
 800f512:	f000 fecb 	bl	80102ac <_Balloc>
 800f516:	4605      	mov	r5, r0
 800f518:	b928      	cbnz	r0, 800f526 <_dtoa_r+0x9d6>
 800f51a:	4b80      	ldr	r3, [pc, #512]	; (800f71c <_dtoa_r+0xbcc>)
 800f51c:	4602      	mov	r2, r0
 800f51e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f522:	f7ff bb2e 	b.w	800eb82 <_dtoa_r+0x32>
 800f526:	693a      	ldr	r2, [r7, #16]
 800f528:	3202      	adds	r2, #2
 800f52a:	0092      	lsls	r2, r2, #2
 800f52c:	f107 010c 	add.w	r1, r7, #12
 800f530:	300c      	adds	r0, #12
 800f532:	f7fd fadb 	bl	800caec <memcpy>
 800f536:	2201      	movs	r2, #1
 800f538:	4629      	mov	r1, r5
 800f53a:	4620      	mov	r0, r4
 800f53c:	f001 f912 	bl	8010764 <__lshift>
 800f540:	9b00      	ldr	r3, [sp, #0]
 800f542:	3301      	adds	r3, #1
 800f544:	9301      	str	r3, [sp, #4]
 800f546:	9b00      	ldr	r3, [sp, #0]
 800f548:	444b      	add	r3, r9
 800f54a:	9307      	str	r3, [sp, #28]
 800f54c:	9b02      	ldr	r3, [sp, #8]
 800f54e:	f003 0301 	and.w	r3, r3, #1
 800f552:	46b8      	mov	r8, r7
 800f554:	9306      	str	r3, [sp, #24]
 800f556:	4607      	mov	r7, r0
 800f558:	9b01      	ldr	r3, [sp, #4]
 800f55a:	4631      	mov	r1, r6
 800f55c:	3b01      	subs	r3, #1
 800f55e:	4658      	mov	r0, fp
 800f560:	9302      	str	r3, [sp, #8]
 800f562:	f7ff fa69 	bl	800ea38 <quorem>
 800f566:	4603      	mov	r3, r0
 800f568:	3330      	adds	r3, #48	; 0x30
 800f56a:	9004      	str	r0, [sp, #16]
 800f56c:	4641      	mov	r1, r8
 800f56e:	4658      	mov	r0, fp
 800f570:	9308      	str	r3, [sp, #32]
 800f572:	f001 f963 	bl	801083c <__mcmp>
 800f576:	463a      	mov	r2, r7
 800f578:	4681      	mov	r9, r0
 800f57a:	4631      	mov	r1, r6
 800f57c:	4620      	mov	r0, r4
 800f57e:	f001 f979 	bl	8010874 <__mdiff>
 800f582:	68c2      	ldr	r2, [r0, #12]
 800f584:	9b08      	ldr	r3, [sp, #32]
 800f586:	4605      	mov	r5, r0
 800f588:	bb02      	cbnz	r2, 800f5cc <_dtoa_r+0xa7c>
 800f58a:	4601      	mov	r1, r0
 800f58c:	4658      	mov	r0, fp
 800f58e:	f001 f955 	bl	801083c <__mcmp>
 800f592:	9b08      	ldr	r3, [sp, #32]
 800f594:	4602      	mov	r2, r0
 800f596:	4629      	mov	r1, r5
 800f598:	4620      	mov	r0, r4
 800f59a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f59e:	f000 fec5 	bl	801032c <_Bfree>
 800f5a2:	9b05      	ldr	r3, [sp, #20]
 800f5a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5a6:	9d01      	ldr	r5, [sp, #4]
 800f5a8:	ea43 0102 	orr.w	r1, r3, r2
 800f5ac:	9b06      	ldr	r3, [sp, #24]
 800f5ae:	430b      	orrs	r3, r1
 800f5b0:	9b08      	ldr	r3, [sp, #32]
 800f5b2:	d10d      	bne.n	800f5d0 <_dtoa_r+0xa80>
 800f5b4:	2b39      	cmp	r3, #57	; 0x39
 800f5b6:	d029      	beq.n	800f60c <_dtoa_r+0xabc>
 800f5b8:	f1b9 0f00 	cmp.w	r9, #0
 800f5bc:	dd01      	ble.n	800f5c2 <_dtoa_r+0xa72>
 800f5be:	9b04      	ldr	r3, [sp, #16]
 800f5c0:	3331      	adds	r3, #49	; 0x31
 800f5c2:	9a02      	ldr	r2, [sp, #8]
 800f5c4:	7013      	strb	r3, [r2, #0]
 800f5c6:	e774      	b.n	800f4b2 <_dtoa_r+0x962>
 800f5c8:	4638      	mov	r0, r7
 800f5ca:	e7b9      	b.n	800f540 <_dtoa_r+0x9f0>
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	e7e2      	b.n	800f596 <_dtoa_r+0xa46>
 800f5d0:	f1b9 0f00 	cmp.w	r9, #0
 800f5d4:	db06      	blt.n	800f5e4 <_dtoa_r+0xa94>
 800f5d6:	9905      	ldr	r1, [sp, #20]
 800f5d8:	ea41 0909 	orr.w	r9, r1, r9
 800f5dc:	9906      	ldr	r1, [sp, #24]
 800f5de:	ea59 0101 	orrs.w	r1, r9, r1
 800f5e2:	d120      	bne.n	800f626 <_dtoa_r+0xad6>
 800f5e4:	2a00      	cmp	r2, #0
 800f5e6:	ddec      	ble.n	800f5c2 <_dtoa_r+0xa72>
 800f5e8:	4659      	mov	r1, fp
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	9301      	str	r3, [sp, #4]
 800f5f0:	f001 f8b8 	bl	8010764 <__lshift>
 800f5f4:	4631      	mov	r1, r6
 800f5f6:	4683      	mov	fp, r0
 800f5f8:	f001 f920 	bl	801083c <__mcmp>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	9b01      	ldr	r3, [sp, #4]
 800f600:	dc02      	bgt.n	800f608 <_dtoa_r+0xab8>
 800f602:	d1de      	bne.n	800f5c2 <_dtoa_r+0xa72>
 800f604:	07da      	lsls	r2, r3, #31
 800f606:	d5dc      	bpl.n	800f5c2 <_dtoa_r+0xa72>
 800f608:	2b39      	cmp	r3, #57	; 0x39
 800f60a:	d1d8      	bne.n	800f5be <_dtoa_r+0xa6e>
 800f60c:	9a02      	ldr	r2, [sp, #8]
 800f60e:	2339      	movs	r3, #57	; 0x39
 800f610:	7013      	strb	r3, [r2, #0]
 800f612:	462b      	mov	r3, r5
 800f614:	461d      	mov	r5, r3
 800f616:	3b01      	subs	r3, #1
 800f618:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f61c:	2a39      	cmp	r2, #57	; 0x39
 800f61e:	d050      	beq.n	800f6c2 <_dtoa_r+0xb72>
 800f620:	3201      	adds	r2, #1
 800f622:	701a      	strb	r2, [r3, #0]
 800f624:	e745      	b.n	800f4b2 <_dtoa_r+0x962>
 800f626:	2a00      	cmp	r2, #0
 800f628:	dd03      	ble.n	800f632 <_dtoa_r+0xae2>
 800f62a:	2b39      	cmp	r3, #57	; 0x39
 800f62c:	d0ee      	beq.n	800f60c <_dtoa_r+0xabc>
 800f62e:	3301      	adds	r3, #1
 800f630:	e7c7      	b.n	800f5c2 <_dtoa_r+0xa72>
 800f632:	9a01      	ldr	r2, [sp, #4]
 800f634:	9907      	ldr	r1, [sp, #28]
 800f636:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f63a:	428a      	cmp	r2, r1
 800f63c:	d02a      	beq.n	800f694 <_dtoa_r+0xb44>
 800f63e:	4659      	mov	r1, fp
 800f640:	2300      	movs	r3, #0
 800f642:	220a      	movs	r2, #10
 800f644:	4620      	mov	r0, r4
 800f646:	f000 fe93 	bl	8010370 <__multadd>
 800f64a:	45b8      	cmp	r8, r7
 800f64c:	4683      	mov	fp, r0
 800f64e:	f04f 0300 	mov.w	r3, #0
 800f652:	f04f 020a 	mov.w	r2, #10
 800f656:	4641      	mov	r1, r8
 800f658:	4620      	mov	r0, r4
 800f65a:	d107      	bne.n	800f66c <_dtoa_r+0xb1c>
 800f65c:	f000 fe88 	bl	8010370 <__multadd>
 800f660:	4680      	mov	r8, r0
 800f662:	4607      	mov	r7, r0
 800f664:	9b01      	ldr	r3, [sp, #4]
 800f666:	3301      	adds	r3, #1
 800f668:	9301      	str	r3, [sp, #4]
 800f66a:	e775      	b.n	800f558 <_dtoa_r+0xa08>
 800f66c:	f000 fe80 	bl	8010370 <__multadd>
 800f670:	4639      	mov	r1, r7
 800f672:	4680      	mov	r8, r0
 800f674:	2300      	movs	r3, #0
 800f676:	220a      	movs	r2, #10
 800f678:	4620      	mov	r0, r4
 800f67a:	f000 fe79 	bl	8010370 <__multadd>
 800f67e:	4607      	mov	r7, r0
 800f680:	e7f0      	b.n	800f664 <_dtoa_r+0xb14>
 800f682:	f1b9 0f00 	cmp.w	r9, #0
 800f686:	9a00      	ldr	r2, [sp, #0]
 800f688:	bfcc      	ite	gt
 800f68a:	464d      	movgt	r5, r9
 800f68c:	2501      	movle	r5, #1
 800f68e:	4415      	add	r5, r2
 800f690:	f04f 0800 	mov.w	r8, #0
 800f694:	4659      	mov	r1, fp
 800f696:	2201      	movs	r2, #1
 800f698:	4620      	mov	r0, r4
 800f69a:	9301      	str	r3, [sp, #4]
 800f69c:	f001 f862 	bl	8010764 <__lshift>
 800f6a0:	4631      	mov	r1, r6
 800f6a2:	4683      	mov	fp, r0
 800f6a4:	f001 f8ca 	bl	801083c <__mcmp>
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	dcb2      	bgt.n	800f612 <_dtoa_r+0xac2>
 800f6ac:	d102      	bne.n	800f6b4 <_dtoa_r+0xb64>
 800f6ae:	9b01      	ldr	r3, [sp, #4]
 800f6b0:	07db      	lsls	r3, r3, #31
 800f6b2:	d4ae      	bmi.n	800f612 <_dtoa_r+0xac2>
 800f6b4:	462b      	mov	r3, r5
 800f6b6:	461d      	mov	r5, r3
 800f6b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f6bc:	2a30      	cmp	r2, #48	; 0x30
 800f6be:	d0fa      	beq.n	800f6b6 <_dtoa_r+0xb66>
 800f6c0:	e6f7      	b.n	800f4b2 <_dtoa_r+0x962>
 800f6c2:	9a00      	ldr	r2, [sp, #0]
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d1a5      	bne.n	800f614 <_dtoa_r+0xac4>
 800f6c8:	f10a 0a01 	add.w	sl, sl, #1
 800f6cc:	2331      	movs	r3, #49	; 0x31
 800f6ce:	e779      	b.n	800f5c4 <_dtoa_r+0xa74>
 800f6d0:	4b13      	ldr	r3, [pc, #76]	; (800f720 <_dtoa_r+0xbd0>)
 800f6d2:	f7ff baaf 	b.w	800ec34 <_dtoa_r+0xe4>
 800f6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	f47f aa86 	bne.w	800ebea <_dtoa_r+0x9a>
 800f6de:	4b11      	ldr	r3, [pc, #68]	; (800f724 <_dtoa_r+0xbd4>)
 800f6e0:	f7ff baa8 	b.w	800ec34 <_dtoa_r+0xe4>
 800f6e4:	f1b9 0f00 	cmp.w	r9, #0
 800f6e8:	dc03      	bgt.n	800f6f2 <_dtoa_r+0xba2>
 800f6ea:	9b05      	ldr	r3, [sp, #20]
 800f6ec:	2b02      	cmp	r3, #2
 800f6ee:	f73f aec9 	bgt.w	800f484 <_dtoa_r+0x934>
 800f6f2:	9d00      	ldr	r5, [sp, #0]
 800f6f4:	4631      	mov	r1, r6
 800f6f6:	4658      	mov	r0, fp
 800f6f8:	f7ff f99e 	bl	800ea38 <quorem>
 800f6fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f700:	f805 3b01 	strb.w	r3, [r5], #1
 800f704:	9a00      	ldr	r2, [sp, #0]
 800f706:	1aaa      	subs	r2, r5, r2
 800f708:	4591      	cmp	r9, r2
 800f70a:	ddba      	ble.n	800f682 <_dtoa_r+0xb32>
 800f70c:	4659      	mov	r1, fp
 800f70e:	2300      	movs	r3, #0
 800f710:	220a      	movs	r2, #10
 800f712:	4620      	mov	r0, r4
 800f714:	f000 fe2c 	bl	8010370 <__multadd>
 800f718:	4683      	mov	fp, r0
 800f71a:	e7eb      	b.n	800f6f4 <_dtoa_r+0xba4>
 800f71c:	080118bb 	.word	0x080118bb
 800f720:	080117b8 	.word	0x080117b8
 800f724:	08011838 	.word	0x08011838

0800f728 <__sflush_r>:
 800f728:	898a      	ldrh	r2, [r1, #12]
 800f72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f72e:	4605      	mov	r5, r0
 800f730:	0710      	lsls	r0, r2, #28
 800f732:	460c      	mov	r4, r1
 800f734:	d458      	bmi.n	800f7e8 <__sflush_r+0xc0>
 800f736:	684b      	ldr	r3, [r1, #4]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	dc05      	bgt.n	800f748 <__sflush_r+0x20>
 800f73c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f73e:	2b00      	cmp	r3, #0
 800f740:	dc02      	bgt.n	800f748 <__sflush_r+0x20>
 800f742:	2000      	movs	r0, #0
 800f744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f74a:	2e00      	cmp	r6, #0
 800f74c:	d0f9      	beq.n	800f742 <__sflush_r+0x1a>
 800f74e:	2300      	movs	r3, #0
 800f750:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f754:	682f      	ldr	r7, [r5, #0]
 800f756:	602b      	str	r3, [r5, #0]
 800f758:	d032      	beq.n	800f7c0 <__sflush_r+0x98>
 800f75a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f75c:	89a3      	ldrh	r3, [r4, #12]
 800f75e:	075a      	lsls	r2, r3, #29
 800f760:	d505      	bpl.n	800f76e <__sflush_r+0x46>
 800f762:	6863      	ldr	r3, [r4, #4]
 800f764:	1ac0      	subs	r0, r0, r3
 800f766:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f768:	b10b      	cbz	r3, 800f76e <__sflush_r+0x46>
 800f76a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f76c:	1ac0      	subs	r0, r0, r3
 800f76e:	2300      	movs	r3, #0
 800f770:	4602      	mov	r2, r0
 800f772:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f774:	6a21      	ldr	r1, [r4, #32]
 800f776:	4628      	mov	r0, r5
 800f778:	47b0      	blx	r6
 800f77a:	1c43      	adds	r3, r0, #1
 800f77c:	89a3      	ldrh	r3, [r4, #12]
 800f77e:	d106      	bne.n	800f78e <__sflush_r+0x66>
 800f780:	6829      	ldr	r1, [r5, #0]
 800f782:	291d      	cmp	r1, #29
 800f784:	d82c      	bhi.n	800f7e0 <__sflush_r+0xb8>
 800f786:	4a2a      	ldr	r2, [pc, #168]	; (800f830 <__sflush_r+0x108>)
 800f788:	40ca      	lsrs	r2, r1
 800f78a:	07d6      	lsls	r6, r2, #31
 800f78c:	d528      	bpl.n	800f7e0 <__sflush_r+0xb8>
 800f78e:	2200      	movs	r2, #0
 800f790:	6062      	str	r2, [r4, #4]
 800f792:	04d9      	lsls	r1, r3, #19
 800f794:	6922      	ldr	r2, [r4, #16]
 800f796:	6022      	str	r2, [r4, #0]
 800f798:	d504      	bpl.n	800f7a4 <__sflush_r+0x7c>
 800f79a:	1c42      	adds	r2, r0, #1
 800f79c:	d101      	bne.n	800f7a2 <__sflush_r+0x7a>
 800f79e:	682b      	ldr	r3, [r5, #0]
 800f7a0:	b903      	cbnz	r3, 800f7a4 <__sflush_r+0x7c>
 800f7a2:	6560      	str	r0, [r4, #84]	; 0x54
 800f7a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7a6:	602f      	str	r7, [r5, #0]
 800f7a8:	2900      	cmp	r1, #0
 800f7aa:	d0ca      	beq.n	800f742 <__sflush_r+0x1a>
 800f7ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7b0:	4299      	cmp	r1, r3
 800f7b2:	d002      	beq.n	800f7ba <__sflush_r+0x92>
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	f7fd f9af 	bl	800cb18 <_free_r>
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	6360      	str	r0, [r4, #52]	; 0x34
 800f7be:	e7c1      	b.n	800f744 <__sflush_r+0x1c>
 800f7c0:	6a21      	ldr	r1, [r4, #32]
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	47b0      	blx	r6
 800f7c8:	1c41      	adds	r1, r0, #1
 800f7ca:	d1c7      	bne.n	800f75c <__sflush_r+0x34>
 800f7cc:	682b      	ldr	r3, [r5, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d0c4      	beq.n	800f75c <__sflush_r+0x34>
 800f7d2:	2b1d      	cmp	r3, #29
 800f7d4:	d001      	beq.n	800f7da <__sflush_r+0xb2>
 800f7d6:	2b16      	cmp	r3, #22
 800f7d8:	d101      	bne.n	800f7de <__sflush_r+0xb6>
 800f7da:	602f      	str	r7, [r5, #0]
 800f7dc:	e7b1      	b.n	800f742 <__sflush_r+0x1a>
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7e4:	81a3      	strh	r3, [r4, #12]
 800f7e6:	e7ad      	b.n	800f744 <__sflush_r+0x1c>
 800f7e8:	690f      	ldr	r7, [r1, #16]
 800f7ea:	2f00      	cmp	r7, #0
 800f7ec:	d0a9      	beq.n	800f742 <__sflush_r+0x1a>
 800f7ee:	0793      	lsls	r3, r2, #30
 800f7f0:	680e      	ldr	r6, [r1, #0]
 800f7f2:	bf08      	it	eq
 800f7f4:	694b      	ldreq	r3, [r1, #20]
 800f7f6:	600f      	str	r7, [r1, #0]
 800f7f8:	bf18      	it	ne
 800f7fa:	2300      	movne	r3, #0
 800f7fc:	eba6 0807 	sub.w	r8, r6, r7
 800f800:	608b      	str	r3, [r1, #8]
 800f802:	f1b8 0f00 	cmp.w	r8, #0
 800f806:	dd9c      	ble.n	800f742 <__sflush_r+0x1a>
 800f808:	6a21      	ldr	r1, [r4, #32]
 800f80a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f80c:	4643      	mov	r3, r8
 800f80e:	463a      	mov	r2, r7
 800f810:	4628      	mov	r0, r5
 800f812:	47b0      	blx	r6
 800f814:	2800      	cmp	r0, #0
 800f816:	dc06      	bgt.n	800f826 <__sflush_r+0xfe>
 800f818:	89a3      	ldrh	r3, [r4, #12]
 800f81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f81e:	81a3      	strh	r3, [r4, #12]
 800f820:	f04f 30ff 	mov.w	r0, #4294967295
 800f824:	e78e      	b.n	800f744 <__sflush_r+0x1c>
 800f826:	4407      	add	r7, r0
 800f828:	eba8 0800 	sub.w	r8, r8, r0
 800f82c:	e7e9      	b.n	800f802 <__sflush_r+0xda>
 800f82e:	bf00      	nop
 800f830:	20400001 	.word	0x20400001

0800f834 <_fflush_r>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	690b      	ldr	r3, [r1, #16]
 800f838:	4605      	mov	r5, r0
 800f83a:	460c      	mov	r4, r1
 800f83c:	b913      	cbnz	r3, 800f844 <_fflush_r+0x10>
 800f83e:	2500      	movs	r5, #0
 800f840:	4628      	mov	r0, r5
 800f842:	bd38      	pop	{r3, r4, r5, pc}
 800f844:	b118      	cbz	r0, 800f84e <_fflush_r+0x1a>
 800f846:	6983      	ldr	r3, [r0, #24]
 800f848:	b90b      	cbnz	r3, 800f84e <_fflush_r+0x1a>
 800f84a:	f000 f887 	bl	800f95c <__sinit>
 800f84e:	4b14      	ldr	r3, [pc, #80]	; (800f8a0 <_fflush_r+0x6c>)
 800f850:	429c      	cmp	r4, r3
 800f852:	d11b      	bne.n	800f88c <_fflush_r+0x58>
 800f854:	686c      	ldr	r4, [r5, #4]
 800f856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d0ef      	beq.n	800f83e <_fflush_r+0xa>
 800f85e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f860:	07d0      	lsls	r0, r2, #31
 800f862:	d404      	bmi.n	800f86e <_fflush_r+0x3a>
 800f864:	0599      	lsls	r1, r3, #22
 800f866:	d402      	bmi.n	800f86e <_fflush_r+0x3a>
 800f868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f86a:	f000 fc88 	bl	801017e <__retarget_lock_acquire_recursive>
 800f86e:	4628      	mov	r0, r5
 800f870:	4621      	mov	r1, r4
 800f872:	f7ff ff59 	bl	800f728 <__sflush_r>
 800f876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f878:	07da      	lsls	r2, r3, #31
 800f87a:	4605      	mov	r5, r0
 800f87c:	d4e0      	bmi.n	800f840 <_fflush_r+0xc>
 800f87e:	89a3      	ldrh	r3, [r4, #12]
 800f880:	059b      	lsls	r3, r3, #22
 800f882:	d4dd      	bmi.n	800f840 <_fflush_r+0xc>
 800f884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f886:	f000 fc7b 	bl	8010180 <__retarget_lock_release_recursive>
 800f88a:	e7d9      	b.n	800f840 <_fflush_r+0xc>
 800f88c:	4b05      	ldr	r3, [pc, #20]	; (800f8a4 <_fflush_r+0x70>)
 800f88e:	429c      	cmp	r4, r3
 800f890:	d101      	bne.n	800f896 <_fflush_r+0x62>
 800f892:	68ac      	ldr	r4, [r5, #8]
 800f894:	e7df      	b.n	800f856 <_fflush_r+0x22>
 800f896:	4b04      	ldr	r3, [pc, #16]	; (800f8a8 <_fflush_r+0x74>)
 800f898:	429c      	cmp	r4, r3
 800f89a:	bf08      	it	eq
 800f89c:	68ec      	ldreq	r4, [r5, #12]
 800f89e:	e7da      	b.n	800f856 <_fflush_r+0x22>
 800f8a0:	080118ec 	.word	0x080118ec
 800f8a4:	0801190c 	.word	0x0801190c
 800f8a8:	080118cc 	.word	0x080118cc

0800f8ac <std>:
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	b510      	push	{r4, lr}
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	e9c0 3300 	strd	r3, r3, [r0]
 800f8b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f8ba:	6083      	str	r3, [r0, #8]
 800f8bc:	8181      	strh	r1, [r0, #12]
 800f8be:	6643      	str	r3, [r0, #100]	; 0x64
 800f8c0:	81c2      	strh	r2, [r0, #14]
 800f8c2:	6183      	str	r3, [r0, #24]
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	2208      	movs	r2, #8
 800f8c8:	305c      	adds	r0, #92	; 0x5c
 800f8ca:	f7fd f91d 	bl	800cb08 <memset>
 800f8ce:	4b05      	ldr	r3, [pc, #20]	; (800f8e4 <std+0x38>)
 800f8d0:	6263      	str	r3, [r4, #36]	; 0x24
 800f8d2:	4b05      	ldr	r3, [pc, #20]	; (800f8e8 <std+0x3c>)
 800f8d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f8d6:	4b05      	ldr	r3, [pc, #20]	; (800f8ec <std+0x40>)
 800f8d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8da:	4b05      	ldr	r3, [pc, #20]	; (800f8f0 <std+0x44>)
 800f8dc:	6224      	str	r4, [r4, #32]
 800f8de:	6323      	str	r3, [r4, #48]	; 0x30
 800f8e0:	bd10      	pop	{r4, pc}
 800f8e2:	bf00      	nop
 800f8e4:	0800d9cd 	.word	0x0800d9cd
 800f8e8:	0800d9ef 	.word	0x0800d9ef
 800f8ec:	0800da27 	.word	0x0800da27
 800f8f0:	0800da4b 	.word	0x0800da4b

0800f8f4 <_cleanup_r>:
 800f8f4:	4901      	ldr	r1, [pc, #4]	; (800f8fc <_cleanup_r+0x8>)
 800f8f6:	f000 b8af 	b.w	800fa58 <_fwalk_reent>
 800f8fa:	bf00      	nop
 800f8fc:	0800f835 	.word	0x0800f835

0800f900 <__sfmoreglue>:
 800f900:	b570      	push	{r4, r5, r6, lr}
 800f902:	1e4a      	subs	r2, r1, #1
 800f904:	2568      	movs	r5, #104	; 0x68
 800f906:	4355      	muls	r5, r2
 800f908:	460e      	mov	r6, r1
 800f90a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f90e:	f7fd f953 	bl	800cbb8 <_malloc_r>
 800f912:	4604      	mov	r4, r0
 800f914:	b140      	cbz	r0, 800f928 <__sfmoreglue+0x28>
 800f916:	2100      	movs	r1, #0
 800f918:	e9c0 1600 	strd	r1, r6, [r0]
 800f91c:	300c      	adds	r0, #12
 800f91e:	60a0      	str	r0, [r4, #8]
 800f920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f924:	f7fd f8f0 	bl	800cb08 <memset>
 800f928:	4620      	mov	r0, r4
 800f92a:	bd70      	pop	{r4, r5, r6, pc}

0800f92c <__sfp_lock_acquire>:
 800f92c:	4801      	ldr	r0, [pc, #4]	; (800f934 <__sfp_lock_acquire+0x8>)
 800f92e:	f000 bc26 	b.w	801017e <__retarget_lock_acquire_recursive>
 800f932:	bf00      	nop
 800f934:	20001790 	.word	0x20001790

0800f938 <__sfp_lock_release>:
 800f938:	4801      	ldr	r0, [pc, #4]	; (800f940 <__sfp_lock_release+0x8>)
 800f93a:	f000 bc21 	b.w	8010180 <__retarget_lock_release_recursive>
 800f93e:	bf00      	nop
 800f940:	20001790 	.word	0x20001790

0800f944 <__sinit_lock_acquire>:
 800f944:	4801      	ldr	r0, [pc, #4]	; (800f94c <__sinit_lock_acquire+0x8>)
 800f946:	f000 bc1a 	b.w	801017e <__retarget_lock_acquire_recursive>
 800f94a:	bf00      	nop
 800f94c:	2000178b 	.word	0x2000178b

0800f950 <__sinit_lock_release>:
 800f950:	4801      	ldr	r0, [pc, #4]	; (800f958 <__sinit_lock_release+0x8>)
 800f952:	f000 bc15 	b.w	8010180 <__retarget_lock_release_recursive>
 800f956:	bf00      	nop
 800f958:	2000178b 	.word	0x2000178b

0800f95c <__sinit>:
 800f95c:	b510      	push	{r4, lr}
 800f95e:	4604      	mov	r4, r0
 800f960:	f7ff fff0 	bl	800f944 <__sinit_lock_acquire>
 800f964:	69a3      	ldr	r3, [r4, #24]
 800f966:	b11b      	cbz	r3, 800f970 <__sinit+0x14>
 800f968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f96c:	f7ff bff0 	b.w	800f950 <__sinit_lock_release>
 800f970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f974:	6523      	str	r3, [r4, #80]	; 0x50
 800f976:	4b13      	ldr	r3, [pc, #76]	; (800f9c4 <__sinit+0x68>)
 800f978:	4a13      	ldr	r2, [pc, #76]	; (800f9c8 <__sinit+0x6c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f97e:	42a3      	cmp	r3, r4
 800f980:	bf04      	itt	eq
 800f982:	2301      	moveq	r3, #1
 800f984:	61a3      	streq	r3, [r4, #24]
 800f986:	4620      	mov	r0, r4
 800f988:	f000 f820 	bl	800f9cc <__sfp>
 800f98c:	6060      	str	r0, [r4, #4]
 800f98e:	4620      	mov	r0, r4
 800f990:	f000 f81c 	bl	800f9cc <__sfp>
 800f994:	60a0      	str	r0, [r4, #8]
 800f996:	4620      	mov	r0, r4
 800f998:	f000 f818 	bl	800f9cc <__sfp>
 800f99c:	2200      	movs	r2, #0
 800f99e:	60e0      	str	r0, [r4, #12]
 800f9a0:	2104      	movs	r1, #4
 800f9a2:	6860      	ldr	r0, [r4, #4]
 800f9a4:	f7ff ff82 	bl	800f8ac <std>
 800f9a8:	68a0      	ldr	r0, [r4, #8]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	2109      	movs	r1, #9
 800f9ae:	f7ff ff7d 	bl	800f8ac <std>
 800f9b2:	68e0      	ldr	r0, [r4, #12]
 800f9b4:	2202      	movs	r2, #2
 800f9b6:	2112      	movs	r1, #18
 800f9b8:	f7ff ff78 	bl	800f8ac <std>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	61a3      	str	r3, [r4, #24]
 800f9c0:	e7d2      	b.n	800f968 <__sinit+0xc>
 800f9c2:	bf00      	nop
 800f9c4:	080117a4 	.word	0x080117a4
 800f9c8:	0800f8f5 	.word	0x0800f8f5

0800f9cc <__sfp>:
 800f9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ce:	4607      	mov	r7, r0
 800f9d0:	f7ff ffac 	bl	800f92c <__sfp_lock_acquire>
 800f9d4:	4b1e      	ldr	r3, [pc, #120]	; (800fa50 <__sfp+0x84>)
 800f9d6:	681e      	ldr	r6, [r3, #0]
 800f9d8:	69b3      	ldr	r3, [r6, #24]
 800f9da:	b913      	cbnz	r3, 800f9e2 <__sfp+0x16>
 800f9dc:	4630      	mov	r0, r6
 800f9de:	f7ff ffbd 	bl	800f95c <__sinit>
 800f9e2:	3648      	adds	r6, #72	; 0x48
 800f9e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f9e8:	3b01      	subs	r3, #1
 800f9ea:	d503      	bpl.n	800f9f4 <__sfp+0x28>
 800f9ec:	6833      	ldr	r3, [r6, #0]
 800f9ee:	b30b      	cbz	r3, 800fa34 <__sfp+0x68>
 800f9f0:	6836      	ldr	r6, [r6, #0]
 800f9f2:	e7f7      	b.n	800f9e4 <__sfp+0x18>
 800f9f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f9f8:	b9d5      	cbnz	r5, 800fa30 <__sfp+0x64>
 800f9fa:	4b16      	ldr	r3, [pc, #88]	; (800fa54 <__sfp+0x88>)
 800f9fc:	60e3      	str	r3, [r4, #12]
 800f9fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa02:	6665      	str	r5, [r4, #100]	; 0x64
 800fa04:	f000 fbba 	bl	801017c <__retarget_lock_init_recursive>
 800fa08:	f7ff ff96 	bl	800f938 <__sfp_lock_release>
 800fa0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa14:	6025      	str	r5, [r4, #0]
 800fa16:	61a5      	str	r5, [r4, #24]
 800fa18:	2208      	movs	r2, #8
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa20:	f7fd f872 	bl	800cb08 <memset>
 800fa24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa30:	3468      	adds	r4, #104	; 0x68
 800fa32:	e7d9      	b.n	800f9e8 <__sfp+0x1c>
 800fa34:	2104      	movs	r1, #4
 800fa36:	4638      	mov	r0, r7
 800fa38:	f7ff ff62 	bl	800f900 <__sfmoreglue>
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	6030      	str	r0, [r6, #0]
 800fa40:	2800      	cmp	r0, #0
 800fa42:	d1d5      	bne.n	800f9f0 <__sfp+0x24>
 800fa44:	f7ff ff78 	bl	800f938 <__sfp_lock_release>
 800fa48:	230c      	movs	r3, #12
 800fa4a:	603b      	str	r3, [r7, #0]
 800fa4c:	e7ee      	b.n	800fa2c <__sfp+0x60>
 800fa4e:	bf00      	nop
 800fa50:	080117a4 	.word	0x080117a4
 800fa54:	ffff0001 	.word	0xffff0001

0800fa58 <_fwalk_reent>:
 800fa58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa5c:	4606      	mov	r6, r0
 800fa5e:	4688      	mov	r8, r1
 800fa60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa64:	2700      	movs	r7, #0
 800fa66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa6a:	f1b9 0901 	subs.w	r9, r9, #1
 800fa6e:	d505      	bpl.n	800fa7c <_fwalk_reent+0x24>
 800fa70:	6824      	ldr	r4, [r4, #0]
 800fa72:	2c00      	cmp	r4, #0
 800fa74:	d1f7      	bne.n	800fa66 <_fwalk_reent+0xe>
 800fa76:	4638      	mov	r0, r7
 800fa78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa7c:	89ab      	ldrh	r3, [r5, #12]
 800fa7e:	2b01      	cmp	r3, #1
 800fa80:	d907      	bls.n	800fa92 <_fwalk_reent+0x3a>
 800fa82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa86:	3301      	adds	r3, #1
 800fa88:	d003      	beq.n	800fa92 <_fwalk_reent+0x3a>
 800fa8a:	4629      	mov	r1, r5
 800fa8c:	4630      	mov	r0, r6
 800fa8e:	47c0      	blx	r8
 800fa90:	4307      	orrs	r7, r0
 800fa92:	3568      	adds	r5, #104	; 0x68
 800fa94:	e7e9      	b.n	800fa6a <_fwalk_reent+0x12>

0800fa96 <rshift>:
 800fa96:	6903      	ldr	r3, [r0, #16]
 800fa98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fa9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faa0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800faa4:	f100 0414 	add.w	r4, r0, #20
 800faa8:	dd45      	ble.n	800fb36 <rshift+0xa0>
 800faaa:	f011 011f 	ands.w	r1, r1, #31
 800faae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fab2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fab6:	d10c      	bne.n	800fad2 <rshift+0x3c>
 800fab8:	f100 0710 	add.w	r7, r0, #16
 800fabc:	4629      	mov	r1, r5
 800fabe:	42b1      	cmp	r1, r6
 800fac0:	d334      	bcc.n	800fb2c <rshift+0x96>
 800fac2:	1a9b      	subs	r3, r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	1eea      	subs	r2, r5, #3
 800fac8:	4296      	cmp	r6, r2
 800faca:	bf38      	it	cc
 800facc:	2300      	movcc	r3, #0
 800face:	4423      	add	r3, r4
 800fad0:	e015      	b.n	800fafe <rshift+0x68>
 800fad2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fad6:	f1c1 0820 	rsb	r8, r1, #32
 800fada:	40cf      	lsrs	r7, r1
 800fadc:	f105 0e04 	add.w	lr, r5, #4
 800fae0:	46a1      	mov	r9, r4
 800fae2:	4576      	cmp	r6, lr
 800fae4:	46f4      	mov	ip, lr
 800fae6:	d815      	bhi.n	800fb14 <rshift+0x7e>
 800fae8:	1a9b      	subs	r3, r3, r2
 800faea:	009a      	lsls	r2, r3, #2
 800faec:	3a04      	subs	r2, #4
 800faee:	3501      	adds	r5, #1
 800faf0:	42ae      	cmp	r6, r5
 800faf2:	bf38      	it	cc
 800faf4:	2200      	movcc	r2, #0
 800faf6:	18a3      	adds	r3, r4, r2
 800faf8:	50a7      	str	r7, [r4, r2]
 800fafa:	b107      	cbz	r7, 800fafe <rshift+0x68>
 800fafc:	3304      	adds	r3, #4
 800fafe:	1b1a      	subs	r2, r3, r4
 800fb00:	42a3      	cmp	r3, r4
 800fb02:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fb06:	bf08      	it	eq
 800fb08:	2300      	moveq	r3, #0
 800fb0a:	6102      	str	r2, [r0, #16]
 800fb0c:	bf08      	it	eq
 800fb0e:	6143      	streq	r3, [r0, #20]
 800fb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb14:	f8dc c000 	ldr.w	ip, [ip]
 800fb18:	fa0c fc08 	lsl.w	ip, ip, r8
 800fb1c:	ea4c 0707 	orr.w	r7, ip, r7
 800fb20:	f849 7b04 	str.w	r7, [r9], #4
 800fb24:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb28:	40cf      	lsrs	r7, r1
 800fb2a:	e7da      	b.n	800fae2 <rshift+0x4c>
 800fb2c:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb30:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb34:	e7c3      	b.n	800fabe <rshift+0x28>
 800fb36:	4623      	mov	r3, r4
 800fb38:	e7e1      	b.n	800fafe <rshift+0x68>

0800fb3a <__hexdig_fun>:
 800fb3a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fb3e:	2b09      	cmp	r3, #9
 800fb40:	d802      	bhi.n	800fb48 <__hexdig_fun+0xe>
 800fb42:	3820      	subs	r0, #32
 800fb44:	b2c0      	uxtb	r0, r0
 800fb46:	4770      	bx	lr
 800fb48:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fb4c:	2b05      	cmp	r3, #5
 800fb4e:	d801      	bhi.n	800fb54 <__hexdig_fun+0x1a>
 800fb50:	3847      	subs	r0, #71	; 0x47
 800fb52:	e7f7      	b.n	800fb44 <__hexdig_fun+0xa>
 800fb54:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fb58:	2b05      	cmp	r3, #5
 800fb5a:	d801      	bhi.n	800fb60 <__hexdig_fun+0x26>
 800fb5c:	3827      	subs	r0, #39	; 0x27
 800fb5e:	e7f1      	b.n	800fb44 <__hexdig_fun+0xa>
 800fb60:	2000      	movs	r0, #0
 800fb62:	4770      	bx	lr

0800fb64 <__gethex>:
 800fb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb68:	ed2d 8b02 	vpush	{d8}
 800fb6c:	b089      	sub	sp, #36	; 0x24
 800fb6e:	ee08 0a10 	vmov	s16, r0
 800fb72:	9304      	str	r3, [sp, #16]
 800fb74:	4bbc      	ldr	r3, [pc, #752]	; (800fe68 <__gethex+0x304>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	9301      	str	r3, [sp, #4]
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	468b      	mov	fp, r1
 800fb7e:	4690      	mov	r8, r2
 800fb80:	f7f0 fb36 	bl	80001f0 <strlen>
 800fb84:	9b01      	ldr	r3, [sp, #4]
 800fb86:	f8db 2000 	ldr.w	r2, [fp]
 800fb8a:	4403      	add	r3, r0
 800fb8c:	4682      	mov	sl, r0
 800fb8e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fb92:	9305      	str	r3, [sp, #20]
 800fb94:	1c93      	adds	r3, r2, #2
 800fb96:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fb9a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fb9e:	32fe      	adds	r2, #254	; 0xfe
 800fba0:	18d1      	adds	r1, r2, r3
 800fba2:	461f      	mov	r7, r3
 800fba4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fba8:	9100      	str	r1, [sp, #0]
 800fbaa:	2830      	cmp	r0, #48	; 0x30
 800fbac:	d0f8      	beq.n	800fba0 <__gethex+0x3c>
 800fbae:	f7ff ffc4 	bl	800fb3a <__hexdig_fun>
 800fbb2:	4604      	mov	r4, r0
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	d13a      	bne.n	800fc2e <__gethex+0xca>
 800fbb8:	9901      	ldr	r1, [sp, #4]
 800fbba:	4652      	mov	r2, sl
 800fbbc:	4638      	mov	r0, r7
 800fbbe:	f7fd ff50 	bl	800da62 <strncmp>
 800fbc2:	4605      	mov	r5, r0
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d168      	bne.n	800fc9a <__gethex+0x136>
 800fbc8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fbcc:	eb07 060a 	add.w	r6, r7, sl
 800fbd0:	f7ff ffb3 	bl	800fb3a <__hexdig_fun>
 800fbd4:	2800      	cmp	r0, #0
 800fbd6:	d062      	beq.n	800fc9e <__gethex+0x13a>
 800fbd8:	4633      	mov	r3, r6
 800fbda:	7818      	ldrb	r0, [r3, #0]
 800fbdc:	2830      	cmp	r0, #48	; 0x30
 800fbde:	461f      	mov	r7, r3
 800fbe0:	f103 0301 	add.w	r3, r3, #1
 800fbe4:	d0f9      	beq.n	800fbda <__gethex+0x76>
 800fbe6:	f7ff ffa8 	bl	800fb3a <__hexdig_fun>
 800fbea:	2301      	movs	r3, #1
 800fbec:	fab0 f480 	clz	r4, r0
 800fbf0:	0964      	lsrs	r4, r4, #5
 800fbf2:	4635      	mov	r5, r6
 800fbf4:	9300      	str	r3, [sp, #0]
 800fbf6:	463a      	mov	r2, r7
 800fbf8:	4616      	mov	r6, r2
 800fbfa:	3201      	adds	r2, #1
 800fbfc:	7830      	ldrb	r0, [r6, #0]
 800fbfe:	f7ff ff9c 	bl	800fb3a <__hexdig_fun>
 800fc02:	2800      	cmp	r0, #0
 800fc04:	d1f8      	bne.n	800fbf8 <__gethex+0x94>
 800fc06:	9901      	ldr	r1, [sp, #4]
 800fc08:	4652      	mov	r2, sl
 800fc0a:	4630      	mov	r0, r6
 800fc0c:	f7fd ff29 	bl	800da62 <strncmp>
 800fc10:	b980      	cbnz	r0, 800fc34 <__gethex+0xd0>
 800fc12:	b94d      	cbnz	r5, 800fc28 <__gethex+0xc4>
 800fc14:	eb06 050a 	add.w	r5, r6, sl
 800fc18:	462a      	mov	r2, r5
 800fc1a:	4616      	mov	r6, r2
 800fc1c:	3201      	adds	r2, #1
 800fc1e:	7830      	ldrb	r0, [r6, #0]
 800fc20:	f7ff ff8b 	bl	800fb3a <__hexdig_fun>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	d1f8      	bne.n	800fc1a <__gethex+0xb6>
 800fc28:	1bad      	subs	r5, r5, r6
 800fc2a:	00ad      	lsls	r5, r5, #2
 800fc2c:	e004      	b.n	800fc38 <__gethex+0xd4>
 800fc2e:	2400      	movs	r4, #0
 800fc30:	4625      	mov	r5, r4
 800fc32:	e7e0      	b.n	800fbf6 <__gethex+0x92>
 800fc34:	2d00      	cmp	r5, #0
 800fc36:	d1f7      	bne.n	800fc28 <__gethex+0xc4>
 800fc38:	7833      	ldrb	r3, [r6, #0]
 800fc3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fc3e:	2b50      	cmp	r3, #80	; 0x50
 800fc40:	d13b      	bne.n	800fcba <__gethex+0x156>
 800fc42:	7873      	ldrb	r3, [r6, #1]
 800fc44:	2b2b      	cmp	r3, #43	; 0x2b
 800fc46:	d02c      	beq.n	800fca2 <__gethex+0x13e>
 800fc48:	2b2d      	cmp	r3, #45	; 0x2d
 800fc4a:	d02e      	beq.n	800fcaa <__gethex+0x146>
 800fc4c:	1c71      	adds	r1, r6, #1
 800fc4e:	f04f 0900 	mov.w	r9, #0
 800fc52:	7808      	ldrb	r0, [r1, #0]
 800fc54:	f7ff ff71 	bl	800fb3a <__hexdig_fun>
 800fc58:	1e43      	subs	r3, r0, #1
 800fc5a:	b2db      	uxtb	r3, r3
 800fc5c:	2b18      	cmp	r3, #24
 800fc5e:	d82c      	bhi.n	800fcba <__gethex+0x156>
 800fc60:	f1a0 0210 	sub.w	r2, r0, #16
 800fc64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc68:	f7ff ff67 	bl	800fb3a <__hexdig_fun>
 800fc6c:	1e43      	subs	r3, r0, #1
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b18      	cmp	r3, #24
 800fc72:	d91d      	bls.n	800fcb0 <__gethex+0x14c>
 800fc74:	f1b9 0f00 	cmp.w	r9, #0
 800fc78:	d000      	beq.n	800fc7c <__gethex+0x118>
 800fc7a:	4252      	negs	r2, r2
 800fc7c:	4415      	add	r5, r2
 800fc7e:	f8cb 1000 	str.w	r1, [fp]
 800fc82:	b1e4      	cbz	r4, 800fcbe <__gethex+0x15a>
 800fc84:	9b00      	ldr	r3, [sp, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	bf14      	ite	ne
 800fc8a:	2700      	movne	r7, #0
 800fc8c:	2706      	moveq	r7, #6
 800fc8e:	4638      	mov	r0, r7
 800fc90:	b009      	add	sp, #36	; 0x24
 800fc92:	ecbd 8b02 	vpop	{d8}
 800fc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9a:	463e      	mov	r6, r7
 800fc9c:	4625      	mov	r5, r4
 800fc9e:	2401      	movs	r4, #1
 800fca0:	e7ca      	b.n	800fc38 <__gethex+0xd4>
 800fca2:	f04f 0900 	mov.w	r9, #0
 800fca6:	1cb1      	adds	r1, r6, #2
 800fca8:	e7d3      	b.n	800fc52 <__gethex+0xee>
 800fcaa:	f04f 0901 	mov.w	r9, #1
 800fcae:	e7fa      	b.n	800fca6 <__gethex+0x142>
 800fcb0:	230a      	movs	r3, #10
 800fcb2:	fb03 0202 	mla	r2, r3, r2, r0
 800fcb6:	3a10      	subs	r2, #16
 800fcb8:	e7d4      	b.n	800fc64 <__gethex+0x100>
 800fcba:	4631      	mov	r1, r6
 800fcbc:	e7df      	b.n	800fc7e <__gethex+0x11a>
 800fcbe:	1bf3      	subs	r3, r6, r7
 800fcc0:	3b01      	subs	r3, #1
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	2b07      	cmp	r3, #7
 800fcc6:	dc0b      	bgt.n	800fce0 <__gethex+0x17c>
 800fcc8:	ee18 0a10 	vmov	r0, s16
 800fccc:	f000 faee 	bl	80102ac <_Balloc>
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	b940      	cbnz	r0, 800fce6 <__gethex+0x182>
 800fcd4:	4b65      	ldr	r3, [pc, #404]	; (800fe6c <__gethex+0x308>)
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	21de      	movs	r1, #222	; 0xde
 800fcda:	4865      	ldr	r0, [pc, #404]	; (800fe70 <__gethex+0x30c>)
 800fcdc:	f001 fa8e 	bl	80111fc <__assert_func>
 800fce0:	3101      	adds	r1, #1
 800fce2:	105b      	asrs	r3, r3, #1
 800fce4:	e7ee      	b.n	800fcc4 <__gethex+0x160>
 800fce6:	f100 0914 	add.w	r9, r0, #20
 800fcea:	f04f 0b00 	mov.w	fp, #0
 800fcee:	f1ca 0301 	rsb	r3, sl, #1
 800fcf2:	f8cd 9008 	str.w	r9, [sp, #8]
 800fcf6:	f8cd b000 	str.w	fp, [sp]
 800fcfa:	9306      	str	r3, [sp, #24]
 800fcfc:	42b7      	cmp	r7, r6
 800fcfe:	d340      	bcc.n	800fd82 <__gethex+0x21e>
 800fd00:	9802      	ldr	r0, [sp, #8]
 800fd02:	9b00      	ldr	r3, [sp, #0]
 800fd04:	f840 3b04 	str.w	r3, [r0], #4
 800fd08:	eba0 0009 	sub.w	r0, r0, r9
 800fd0c:	1080      	asrs	r0, r0, #2
 800fd0e:	0146      	lsls	r6, r0, #5
 800fd10:	6120      	str	r0, [r4, #16]
 800fd12:	4618      	mov	r0, r3
 800fd14:	f000 fbc0 	bl	8010498 <__hi0bits>
 800fd18:	1a30      	subs	r0, r6, r0
 800fd1a:	f8d8 6000 	ldr.w	r6, [r8]
 800fd1e:	42b0      	cmp	r0, r6
 800fd20:	dd63      	ble.n	800fdea <__gethex+0x286>
 800fd22:	1b87      	subs	r7, r0, r6
 800fd24:	4639      	mov	r1, r7
 800fd26:	4620      	mov	r0, r4
 800fd28:	f000 ff5a 	bl	8010be0 <__any_on>
 800fd2c:	4682      	mov	sl, r0
 800fd2e:	b1a8      	cbz	r0, 800fd5c <__gethex+0x1f8>
 800fd30:	1e7b      	subs	r3, r7, #1
 800fd32:	1159      	asrs	r1, r3, #5
 800fd34:	f003 021f 	and.w	r2, r3, #31
 800fd38:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fd3c:	f04f 0a01 	mov.w	sl, #1
 800fd40:	fa0a f202 	lsl.w	r2, sl, r2
 800fd44:	420a      	tst	r2, r1
 800fd46:	d009      	beq.n	800fd5c <__gethex+0x1f8>
 800fd48:	4553      	cmp	r3, sl
 800fd4a:	dd05      	ble.n	800fd58 <__gethex+0x1f4>
 800fd4c:	1eb9      	subs	r1, r7, #2
 800fd4e:	4620      	mov	r0, r4
 800fd50:	f000 ff46 	bl	8010be0 <__any_on>
 800fd54:	2800      	cmp	r0, #0
 800fd56:	d145      	bne.n	800fde4 <__gethex+0x280>
 800fd58:	f04f 0a02 	mov.w	sl, #2
 800fd5c:	4639      	mov	r1, r7
 800fd5e:	4620      	mov	r0, r4
 800fd60:	f7ff fe99 	bl	800fa96 <rshift>
 800fd64:	443d      	add	r5, r7
 800fd66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd6a:	42ab      	cmp	r3, r5
 800fd6c:	da4c      	bge.n	800fe08 <__gethex+0x2a4>
 800fd6e:	ee18 0a10 	vmov	r0, s16
 800fd72:	4621      	mov	r1, r4
 800fd74:	f000 fada 	bl	801032c <_Bfree>
 800fd78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	6013      	str	r3, [r2, #0]
 800fd7e:	27a3      	movs	r7, #163	; 0xa3
 800fd80:	e785      	b.n	800fc8e <__gethex+0x12a>
 800fd82:	1e73      	subs	r3, r6, #1
 800fd84:	9a05      	ldr	r2, [sp, #20]
 800fd86:	9303      	str	r3, [sp, #12]
 800fd88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d019      	beq.n	800fdc4 <__gethex+0x260>
 800fd90:	f1bb 0f20 	cmp.w	fp, #32
 800fd94:	d107      	bne.n	800fda6 <__gethex+0x242>
 800fd96:	9b02      	ldr	r3, [sp, #8]
 800fd98:	9a00      	ldr	r2, [sp, #0]
 800fd9a:	f843 2b04 	str.w	r2, [r3], #4
 800fd9e:	9302      	str	r3, [sp, #8]
 800fda0:	2300      	movs	r3, #0
 800fda2:	9300      	str	r3, [sp, #0]
 800fda4:	469b      	mov	fp, r3
 800fda6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fdaa:	f7ff fec6 	bl	800fb3a <__hexdig_fun>
 800fdae:	9b00      	ldr	r3, [sp, #0]
 800fdb0:	f000 000f 	and.w	r0, r0, #15
 800fdb4:	fa00 f00b 	lsl.w	r0, r0, fp
 800fdb8:	4303      	orrs	r3, r0
 800fdba:	9300      	str	r3, [sp, #0]
 800fdbc:	f10b 0b04 	add.w	fp, fp, #4
 800fdc0:	9b03      	ldr	r3, [sp, #12]
 800fdc2:	e00d      	b.n	800fde0 <__gethex+0x27c>
 800fdc4:	9b03      	ldr	r3, [sp, #12]
 800fdc6:	9a06      	ldr	r2, [sp, #24]
 800fdc8:	4413      	add	r3, r2
 800fdca:	42bb      	cmp	r3, r7
 800fdcc:	d3e0      	bcc.n	800fd90 <__gethex+0x22c>
 800fdce:	4618      	mov	r0, r3
 800fdd0:	9901      	ldr	r1, [sp, #4]
 800fdd2:	9307      	str	r3, [sp, #28]
 800fdd4:	4652      	mov	r2, sl
 800fdd6:	f7fd fe44 	bl	800da62 <strncmp>
 800fdda:	9b07      	ldr	r3, [sp, #28]
 800fddc:	2800      	cmp	r0, #0
 800fdde:	d1d7      	bne.n	800fd90 <__gethex+0x22c>
 800fde0:	461e      	mov	r6, r3
 800fde2:	e78b      	b.n	800fcfc <__gethex+0x198>
 800fde4:	f04f 0a03 	mov.w	sl, #3
 800fde8:	e7b8      	b.n	800fd5c <__gethex+0x1f8>
 800fdea:	da0a      	bge.n	800fe02 <__gethex+0x29e>
 800fdec:	1a37      	subs	r7, r6, r0
 800fdee:	4621      	mov	r1, r4
 800fdf0:	ee18 0a10 	vmov	r0, s16
 800fdf4:	463a      	mov	r2, r7
 800fdf6:	f000 fcb5 	bl	8010764 <__lshift>
 800fdfa:	1bed      	subs	r5, r5, r7
 800fdfc:	4604      	mov	r4, r0
 800fdfe:	f100 0914 	add.w	r9, r0, #20
 800fe02:	f04f 0a00 	mov.w	sl, #0
 800fe06:	e7ae      	b.n	800fd66 <__gethex+0x202>
 800fe08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fe0c:	42a8      	cmp	r0, r5
 800fe0e:	dd72      	ble.n	800fef6 <__gethex+0x392>
 800fe10:	1b45      	subs	r5, r0, r5
 800fe12:	42ae      	cmp	r6, r5
 800fe14:	dc36      	bgt.n	800fe84 <__gethex+0x320>
 800fe16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe1a:	2b02      	cmp	r3, #2
 800fe1c:	d02a      	beq.n	800fe74 <__gethex+0x310>
 800fe1e:	2b03      	cmp	r3, #3
 800fe20:	d02c      	beq.n	800fe7c <__gethex+0x318>
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d115      	bne.n	800fe52 <__gethex+0x2ee>
 800fe26:	42ae      	cmp	r6, r5
 800fe28:	d113      	bne.n	800fe52 <__gethex+0x2ee>
 800fe2a:	2e01      	cmp	r6, #1
 800fe2c:	d10b      	bne.n	800fe46 <__gethex+0x2e2>
 800fe2e:	9a04      	ldr	r2, [sp, #16]
 800fe30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe34:	6013      	str	r3, [r2, #0]
 800fe36:	2301      	movs	r3, #1
 800fe38:	6123      	str	r3, [r4, #16]
 800fe3a:	f8c9 3000 	str.w	r3, [r9]
 800fe3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe40:	2762      	movs	r7, #98	; 0x62
 800fe42:	601c      	str	r4, [r3, #0]
 800fe44:	e723      	b.n	800fc8e <__gethex+0x12a>
 800fe46:	1e71      	subs	r1, r6, #1
 800fe48:	4620      	mov	r0, r4
 800fe4a:	f000 fec9 	bl	8010be0 <__any_on>
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d1ed      	bne.n	800fe2e <__gethex+0x2ca>
 800fe52:	ee18 0a10 	vmov	r0, s16
 800fe56:	4621      	mov	r1, r4
 800fe58:	f000 fa68 	bl	801032c <_Bfree>
 800fe5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fe5e:	2300      	movs	r3, #0
 800fe60:	6013      	str	r3, [r2, #0]
 800fe62:	2750      	movs	r7, #80	; 0x50
 800fe64:	e713      	b.n	800fc8e <__gethex+0x12a>
 800fe66:	bf00      	nop
 800fe68:	08011998 	.word	0x08011998
 800fe6c:	080118bb 	.word	0x080118bb
 800fe70:	0801192c 	.word	0x0801192c
 800fe74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1eb      	bne.n	800fe52 <__gethex+0x2ee>
 800fe7a:	e7d8      	b.n	800fe2e <__gethex+0x2ca>
 800fe7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1d5      	bne.n	800fe2e <__gethex+0x2ca>
 800fe82:	e7e6      	b.n	800fe52 <__gethex+0x2ee>
 800fe84:	1e6f      	subs	r7, r5, #1
 800fe86:	f1ba 0f00 	cmp.w	sl, #0
 800fe8a:	d131      	bne.n	800fef0 <__gethex+0x38c>
 800fe8c:	b127      	cbz	r7, 800fe98 <__gethex+0x334>
 800fe8e:	4639      	mov	r1, r7
 800fe90:	4620      	mov	r0, r4
 800fe92:	f000 fea5 	bl	8010be0 <__any_on>
 800fe96:	4682      	mov	sl, r0
 800fe98:	117b      	asrs	r3, r7, #5
 800fe9a:	2101      	movs	r1, #1
 800fe9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fea0:	f007 071f 	and.w	r7, r7, #31
 800fea4:	fa01 f707 	lsl.w	r7, r1, r7
 800fea8:	421f      	tst	r7, r3
 800feaa:	4629      	mov	r1, r5
 800feac:	4620      	mov	r0, r4
 800feae:	bf18      	it	ne
 800feb0:	f04a 0a02 	orrne.w	sl, sl, #2
 800feb4:	1b76      	subs	r6, r6, r5
 800feb6:	f7ff fdee 	bl	800fa96 <rshift>
 800feba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800febe:	2702      	movs	r7, #2
 800fec0:	f1ba 0f00 	cmp.w	sl, #0
 800fec4:	d048      	beq.n	800ff58 <__gethex+0x3f4>
 800fec6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d015      	beq.n	800fefa <__gethex+0x396>
 800fece:	2b03      	cmp	r3, #3
 800fed0:	d017      	beq.n	800ff02 <__gethex+0x39e>
 800fed2:	2b01      	cmp	r3, #1
 800fed4:	d109      	bne.n	800feea <__gethex+0x386>
 800fed6:	f01a 0f02 	tst.w	sl, #2
 800feda:	d006      	beq.n	800feea <__gethex+0x386>
 800fedc:	f8d9 0000 	ldr.w	r0, [r9]
 800fee0:	ea4a 0a00 	orr.w	sl, sl, r0
 800fee4:	f01a 0f01 	tst.w	sl, #1
 800fee8:	d10e      	bne.n	800ff08 <__gethex+0x3a4>
 800feea:	f047 0710 	orr.w	r7, r7, #16
 800feee:	e033      	b.n	800ff58 <__gethex+0x3f4>
 800fef0:	f04f 0a01 	mov.w	sl, #1
 800fef4:	e7d0      	b.n	800fe98 <__gethex+0x334>
 800fef6:	2701      	movs	r7, #1
 800fef8:	e7e2      	b.n	800fec0 <__gethex+0x35c>
 800fefa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fefc:	f1c3 0301 	rsb	r3, r3, #1
 800ff00:	9315      	str	r3, [sp, #84]	; 0x54
 800ff02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d0f0      	beq.n	800feea <__gethex+0x386>
 800ff08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ff0c:	f104 0314 	add.w	r3, r4, #20
 800ff10:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ff14:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ff18:	f04f 0c00 	mov.w	ip, #0
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff22:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff26:	d01c      	beq.n	800ff62 <__gethex+0x3fe>
 800ff28:	3201      	adds	r2, #1
 800ff2a:	6002      	str	r2, [r0, #0]
 800ff2c:	2f02      	cmp	r7, #2
 800ff2e:	f104 0314 	add.w	r3, r4, #20
 800ff32:	d13f      	bne.n	800ffb4 <__gethex+0x450>
 800ff34:	f8d8 2000 	ldr.w	r2, [r8]
 800ff38:	3a01      	subs	r2, #1
 800ff3a:	42b2      	cmp	r2, r6
 800ff3c:	d10a      	bne.n	800ff54 <__gethex+0x3f0>
 800ff3e:	1171      	asrs	r1, r6, #5
 800ff40:	2201      	movs	r2, #1
 800ff42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff46:	f006 061f 	and.w	r6, r6, #31
 800ff4a:	fa02 f606 	lsl.w	r6, r2, r6
 800ff4e:	421e      	tst	r6, r3
 800ff50:	bf18      	it	ne
 800ff52:	4617      	movne	r7, r2
 800ff54:	f047 0720 	orr.w	r7, r7, #32
 800ff58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff5a:	601c      	str	r4, [r3, #0]
 800ff5c:	9b04      	ldr	r3, [sp, #16]
 800ff5e:	601d      	str	r5, [r3, #0]
 800ff60:	e695      	b.n	800fc8e <__gethex+0x12a>
 800ff62:	4299      	cmp	r1, r3
 800ff64:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff68:	d8d8      	bhi.n	800ff1c <__gethex+0x3b8>
 800ff6a:	68a3      	ldr	r3, [r4, #8]
 800ff6c:	459b      	cmp	fp, r3
 800ff6e:	db19      	blt.n	800ffa4 <__gethex+0x440>
 800ff70:	6861      	ldr	r1, [r4, #4]
 800ff72:	ee18 0a10 	vmov	r0, s16
 800ff76:	3101      	adds	r1, #1
 800ff78:	f000 f998 	bl	80102ac <_Balloc>
 800ff7c:	4681      	mov	r9, r0
 800ff7e:	b918      	cbnz	r0, 800ff88 <__gethex+0x424>
 800ff80:	4b1a      	ldr	r3, [pc, #104]	; (800ffec <__gethex+0x488>)
 800ff82:	4602      	mov	r2, r0
 800ff84:	2184      	movs	r1, #132	; 0x84
 800ff86:	e6a8      	b.n	800fcda <__gethex+0x176>
 800ff88:	6922      	ldr	r2, [r4, #16]
 800ff8a:	3202      	adds	r2, #2
 800ff8c:	f104 010c 	add.w	r1, r4, #12
 800ff90:	0092      	lsls	r2, r2, #2
 800ff92:	300c      	adds	r0, #12
 800ff94:	f7fc fdaa 	bl	800caec <memcpy>
 800ff98:	4621      	mov	r1, r4
 800ff9a:	ee18 0a10 	vmov	r0, s16
 800ff9e:	f000 f9c5 	bl	801032c <_Bfree>
 800ffa2:	464c      	mov	r4, r9
 800ffa4:	6923      	ldr	r3, [r4, #16]
 800ffa6:	1c5a      	adds	r2, r3, #1
 800ffa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ffac:	6122      	str	r2, [r4, #16]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	615a      	str	r2, [r3, #20]
 800ffb2:	e7bb      	b.n	800ff2c <__gethex+0x3c8>
 800ffb4:	6922      	ldr	r2, [r4, #16]
 800ffb6:	455a      	cmp	r2, fp
 800ffb8:	dd0b      	ble.n	800ffd2 <__gethex+0x46e>
 800ffba:	2101      	movs	r1, #1
 800ffbc:	4620      	mov	r0, r4
 800ffbe:	f7ff fd6a 	bl	800fa96 <rshift>
 800ffc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffc6:	3501      	adds	r5, #1
 800ffc8:	42ab      	cmp	r3, r5
 800ffca:	f6ff aed0 	blt.w	800fd6e <__gethex+0x20a>
 800ffce:	2701      	movs	r7, #1
 800ffd0:	e7c0      	b.n	800ff54 <__gethex+0x3f0>
 800ffd2:	f016 061f 	ands.w	r6, r6, #31
 800ffd6:	d0fa      	beq.n	800ffce <__gethex+0x46a>
 800ffd8:	449a      	add	sl, r3
 800ffda:	f1c6 0620 	rsb	r6, r6, #32
 800ffde:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ffe2:	f000 fa59 	bl	8010498 <__hi0bits>
 800ffe6:	42b0      	cmp	r0, r6
 800ffe8:	dbe7      	blt.n	800ffba <__gethex+0x456>
 800ffea:	e7f0      	b.n	800ffce <__gethex+0x46a>
 800ffec:	080118bb 	.word	0x080118bb

0800fff0 <L_shift>:
 800fff0:	f1c2 0208 	rsb	r2, r2, #8
 800fff4:	0092      	lsls	r2, r2, #2
 800fff6:	b570      	push	{r4, r5, r6, lr}
 800fff8:	f1c2 0620 	rsb	r6, r2, #32
 800fffc:	6843      	ldr	r3, [r0, #4]
 800fffe:	6804      	ldr	r4, [r0, #0]
 8010000:	fa03 f506 	lsl.w	r5, r3, r6
 8010004:	432c      	orrs	r4, r5
 8010006:	40d3      	lsrs	r3, r2
 8010008:	6004      	str	r4, [r0, #0]
 801000a:	f840 3f04 	str.w	r3, [r0, #4]!
 801000e:	4288      	cmp	r0, r1
 8010010:	d3f4      	bcc.n	800fffc <L_shift+0xc>
 8010012:	bd70      	pop	{r4, r5, r6, pc}

08010014 <__match>:
 8010014:	b530      	push	{r4, r5, lr}
 8010016:	6803      	ldr	r3, [r0, #0]
 8010018:	3301      	adds	r3, #1
 801001a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801001e:	b914      	cbnz	r4, 8010026 <__match+0x12>
 8010020:	6003      	str	r3, [r0, #0]
 8010022:	2001      	movs	r0, #1
 8010024:	bd30      	pop	{r4, r5, pc}
 8010026:	f813 2b01 	ldrb.w	r2, [r3], #1
 801002a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801002e:	2d19      	cmp	r5, #25
 8010030:	bf98      	it	ls
 8010032:	3220      	addls	r2, #32
 8010034:	42a2      	cmp	r2, r4
 8010036:	d0f0      	beq.n	801001a <__match+0x6>
 8010038:	2000      	movs	r0, #0
 801003a:	e7f3      	b.n	8010024 <__match+0x10>

0801003c <__hexnan>:
 801003c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010040:	680b      	ldr	r3, [r1, #0]
 8010042:	6801      	ldr	r1, [r0, #0]
 8010044:	115e      	asrs	r6, r3, #5
 8010046:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801004a:	f013 031f 	ands.w	r3, r3, #31
 801004e:	b087      	sub	sp, #28
 8010050:	bf18      	it	ne
 8010052:	3604      	addne	r6, #4
 8010054:	2500      	movs	r5, #0
 8010056:	1f37      	subs	r7, r6, #4
 8010058:	4682      	mov	sl, r0
 801005a:	4690      	mov	r8, r2
 801005c:	9301      	str	r3, [sp, #4]
 801005e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010062:	46b9      	mov	r9, r7
 8010064:	463c      	mov	r4, r7
 8010066:	9502      	str	r5, [sp, #8]
 8010068:	46ab      	mov	fp, r5
 801006a:	784a      	ldrb	r2, [r1, #1]
 801006c:	1c4b      	adds	r3, r1, #1
 801006e:	9303      	str	r3, [sp, #12]
 8010070:	b342      	cbz	r2, 80100c4 <__hexnan+0x88>
 8010072:	4610      	mov	r0, r2
 8010074:	9105      	str	r1, [sp, #20]
 8010076:	9204      	str	r2, [sp, #16]
 8010078:	f7ff fd5f 	bl	800fb3a <__hexdig_fun>
 801007c:	2800      	cmp	r0, #0
 801007e:	d14f      	bne.n	8010120 <__hexnan+0xe4>
 8010080:	9a04      	ldr	r2, [sp, #16]
 8010082:	9905      	ldr	r1, [sp, #20]
 8010084:	2a20      	cmp	r2, #32
 8010086:	d818      	bhi.n	80100ba <__hexnan+0x7e>
 8010088:	9b02      	ldr	r3, [sp, #8]
 801008a:	459b      	cmp	fp, r3
 801008c:	dd13      	ble.n	80100b6 <__hexnan+0x7a>
 801008e:	454c      	cmp	r4, r9
 8010090:	d206      	bcs.n	80100a0 <__hexnan+0x64>
 8010092:	2d07      	cmp	r5, #7
 8010094:	dc04      	bgt.n	80100a0 <__hexnan+0x64>
 8010096:	462a      	mov	r2, r5
 8010098:	4649      	mov	r1, r9
 801009a:	4620      	mov	r0, r4
 801009c:	f7ff ffa8 	bl	800fff0 <L_shift>
 80100a0:	4544      	cmp	r4, r8
 80100a2:	d950      	bls.n	8010146 <__hexnan+0x10a>
 80100a4:	2300      	movs	r3, #0
 80100a6:	f1a4 0904 	sub.w	r9, r4, #4
 80100aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80100ae:	f8cd b008 	str.w	fp, [sp, #8]
 80100b2:	464c      	mov	r4, r9
 80100b4:	461d      	mov	r5, r3
 80100b6:	9903      	ldr	r1, [sp, #12]
 80100b8:	e7d7      	b.n	801006a <__hexnan+0x2e>
 80100ba:	2a29      	cmp	r2, #41	; 0x29
 80100bc:	d156      	bne.n	801016c <__hexnan+0x130>
 80100be:	3102      	adds	r1, #2
 80100c0:	f8ca 1000 	str.w	r1, [sl]
 80100c4:	f1bb 0f00 	cmp.w	fp, #0
 80100c8:	d050      	beq.n	801016c <__hexnan+0x130>
 80100ca:	454c      	cmp	r4, r9
 80100cc:	d206      	bcs.n	80100dc <__hexnan+0xa0>
 80100ce:	2d07      	cmp	r5, #7
 80100d0:	dc04      	bgt.n	80100dc <__hexnan+0xa0>
 80100d2:	462a      	mov	r2, r5
 80100d4:	4649      	mov	r1, r9
 80100d6:	4620      	mov	r0, r4
 80100d8:	f7ff ff8a 	bl	800fff0 <L_shift>
 80100dc:	4544      	cmp	r4, r8
 80100de:	d934      	bls.n	801014a <__hexnan+0x10e>
 80100e0:	f1a8 0204 	sub.w	r2, r8, #4
 80100e4:	4623      	mov	r3, r4
 80100e6:	f853 1b04 	ldr.w	r1, [r3], #4
 80100ea:	f842 1f04 	str.w	r1, [r2, #4]!
 80100ee:	429f      	cmp	r7, r3
 80100f0:	d2f9      	bcs.n	80100e6 <__hexnan+0xaa>
 80100f2:	1b3b      	subs	r3, r7, r4
 80100f4:	f023 0303 	bic.w	r3, r3, #3
 80100f8:	3304      	adds	r3, #4
 80100fa:	3401      	adds	r4, #1
 80100fc:	3e03      	subs	r6, #3
 80100fe:	42b4      	cmp	r4, r6
 8010100:	bf88      	it	hi
 8010102:	2304      	movhi	r3, #4
 8010104:	4443      	add	r3, r8
 8010106:	2200      	movs	r2, #0
 8010108:	f843 2b04 	str.w	r2, [r3], #4
 801010c:	429f      	cmp	r7, r3
 801010e:	d2fb      	bcs.n	8010108 <__hexnan+0xcc>
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	b91b      	cbnz	r3, 801011c <__hexnan+0xe0>
 8010114:	4547      	cmp	r7, r8
 8010116:	d127      	bne.n	8010168 <__hexnan+0x12c>
 8010118:	2301      	movs	r3, #1
 801011a:	603b      	str	r3, [r7, #0]
 801011c:	2005      	movs	r0, #5
 801011e:	e026      	b.n	801016e <__hexnan+0x132>
 8010120:	3501      	adds	r5, #1
 8010122:	2d08      	cmp	r5, #8
 8010124:	f10b 0b01 	add.w	fp, fp, #1
 8010128:	dd06      	ble.n	8010138 <__hexnan+0xfc>
 801012a:	4544      	cmp	r4, r8
 801012c:	d9c3      	bls.n	80100b6 <__hexnan+0x7a>
 801012e:	2300      	movs	r3, #0
 8010130:	f844 3c04 	str.w	r3, [r4, #-4]
 8010134:	2501      	movs	r5, #1
 8010136:	3c04      	subs	r4, #4
 8010138:	6822      	ldr	r2, [r4, #0]
 801013a:	f000 000f 	and.w	r0, r0, #15
 801013e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010142:	6022      	str	r2, [r4, #0]
 8010144:	e7b7      	b.n	80100b6 <__hexnan+0x7a>
 8010146:	2508      	movs	r5, #8
 8010148:	e7b5      	b.n	80100b6 <__hexnan+0x7a>
 801014a:	9b01      	ldr	r3, [sp, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d0df      	beq.n	8010110 <__hexnan+0xd4>
 8010150:	f04f 32ff 	mov.w	r2, #4294967295
 8010154:	f1c3 0320 	rsb	r3, r3, #32
 8010158:	fa22 f303 	lsr.w	r3, r2, r3
 801015c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010160:	401a      	ands	r2, r3
 8010162:	f846 2c04 	str.w	r2, [r6, #-4]
 8010166:	e7d3      	b.n	8010110 <__hexnan+0xd4>
 8010168:	3f04      	subs	r7, #4
 801016a:	e7d1      	b.n	8010110 <__hexnan+0xd4>
 801016c:	2004      	movs	r0, #4
 801016e:	b007      	add	sp, #28
 8010170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010174 <_localeconv_r>:
 8010174:	4800      	ldr	r0, [pc, #0]	; (8010178 <_localeconv_r+0x4>)
 8010176:	4770      	bx	lr
 8010178:	2000017c 	.word	0x2000017c

0801017c <__retarget_lock_init_recursive>:
 801017c:	4770      	bx	lr

0801017e <__retarget_lock_acquire_recursive>:
 801017e:	4770      	bx	lr

08010180 <__retarget_lock_release_recursive>:
 8010180:	4770      	bx	lr
	...

08010184 <_lseek_r>:
 8010184:	b538      	push	{r3, r4, r5, lr}
 8010186:	4d07      	ldr	r5, [pc, #28]	; (80101a4 <_lseek_r+0x20>)
 8010188:	4604      	mov	r4, r0
 801018a:	4608      	mov	r0, r1
 801018c:	4611      	mov	r1, r2
 801018e:	2200      	movs	r2, #0
 8010190:	602a      	str	r2, [r5, #0]
 8010192:	461a      	mov	r2, r3
 8010194:	f7f3 fcf4 	bl	8003b80 <_lseek>
 8010198:	1c43      	adds	r3, r0, #1
 801019a:	d102      	bne.n	80101a2 <_lseek_r+0x1e>
 801019c:	682b      	ldr	r3, [r5, #0]
 801019e:	b103      	cbz	r3, 80101a2 <_lseek_r+0x1e>
 80101a0:	6023      	str	r3, [r4, #0]
 80101a2:	bd38      	pop	{r3, r4, r5, pc}
 80101a4:	20001794 	.word	0x20001794

080101a8 <__swhatbuf_r>:
 80101a8:	b570      	push	{r4, r5, r6, lr}
 80101aa:	460e      	mov	r6, r1
 80101ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101b0:	2900      	cmp	r1, #0
 80101b2:	b096      	sub	sp, #88	; 0x58
 80101b4:	4614      	mov	r4, r2
 80101b6:	461d      	mov	r5, r3
 80101b8:	da07      	bge.n	80101ca <__swhatbuf_r+0x22>
 80101ba:	2300      	movs	r3, #0
 80101bc:	602b      	str	r3, [r5, #0]
 80101be:	89b3      	ldrh	r3, [r6, #12]
 80101c0:	061a      	lsls	r2, r3, #24
 80101c2:	d410      	bmi.n	80101e6 <__swhatbuf_r+0x3e>
 80101c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101c8:	e00e      	b.n	80101e8 <__swhatbuf_r+0x40>
 80101ca:	466a      	mov	r2, sp
 80101cc:	f001 f846 	bl	801125c <_fstat_r>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	dbf2      	blt.n	80101ba <__swhatbuf_r+0x12>
 80101d4:	9a01      	ldr	r2, [sp, #4]
 80101d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80101da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80101de:	425a      	negs	r2, r3
 80101e0:	415a      	adcs	r2, r3
 80101e2:	602a      	str	r2, [r5, #0]
 80101e4:	e7ee      	b.n	80101c4 <__swhatbuf_r+0x1c>
 80101e6:	2340      	movs	r3, #64	; 0x40
 80101e8:	2000      	movs	r0, #0
 80101ea:	6023      	str	r3, [r4, #0]
 80101ec:	b016      	add	sp, #88	; 0x58
 80101ee:	bd70      	pop	{r4, r5, r6, pc}

080101f0 <__smakebuf_r>:
 80101f0:	898b      	ldrh	r3, [r1, #12]
 80101f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101f4:	079d      	lsls	r5, r3, #30
 80101f6:	4606      	mov	r6, r0
 80101f8:	460c      	mov	r4, r1
 80101fa:	d507      	bpl.n	801020c <__smakebuf_r+0x1c>
 80101fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010200:	6023      	str	r3, [r4, #0]
 8010202:	6123      	str	r3, [r4, #16]
 8010204:	2301      	movs	r3, #1
 8010206:	6163      	str	r3, [r4, #20]
 8010208:	b002      	add	sp, #8
 801020a:	bd70      	pop	{r4, r5, r6, pc}
 801020c:	ab01      	add	r3, sp, #4
 801020e:	466a      	mov	r2, sp
 8010210:	f7ff ffca 	bl	80101a8 <__swhatbuf_r>
 8010214:	9900      	ldr	r1, [sp, #0]
 8010216:	4605      	mov	r5, r0
 8010218:	4630      	mov	r0, r6
 801021a:	f7fc fccd 	bl	800cbb8 <_malloc_r>
 801021e:	b948      	cbnz	r0, 8010234 <__smakebuf_r+0x44>
 8010220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010224:	059a      	lsls	r2, r3, #22
 8010226:	d4ef      	bmi.n	8010208 <__smakebuf_r+0x18>
 8010228:	f023 0303 	bic.w	r3, r3, #3
 801022c:	f043 0302 	orr.w	r3, r3, #2
 8010230:	81a3      	strh	r3, [r4, #12]
 8010232:	e7e3      	b.n	80101fc <__smakebuf_r+0xc>
 8010234:	4b0d      	ldr	r3, [pc, #52]	; (801026c <__smakebuf_r+0x7c>)
 8010236:	62b3      	str	r3, [r6, #40]	; 0x28
 8010238:	89a3      	ldrh	r3, [r4, #12]
 801023a:	6020      	str	r0, [r4, #0]
 801023c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010240:	81a3      	strh	r3, [r4, #12]
 8010242:	9b00      	ldr	r3, [sp, #0]
 8010244:	6163      	str	r3, [r4, #20]
 8010246:	9b01      	ldr	r3, [sp, #4]
 8010248:	6120      	str	r0, [r4, #16]
 801024a:	b15b      	cbz	r3, 8010264 <__smakebuf_r+0x74>
 801024c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010250:	4630      	mov	r0, r6
 8010252:	f001 f815 	bl	8011280 <_isatty_r>
 8010256:	b128      	cbz	r0, 8010264 <__smakebuf_r+0x74>
 8010258:	89a3      	ldrh	r3, [r4, #12]
 801025a:	f023 0303 	bic.w	r3, r3, #3
 801025e:	f043 0301 	orr.w	r3, r3, #1
 8010262:	81a3      	strh	r3, [r4, #12]
 8010264:	89a0      	ldrh	r0, [r4, #12]
 8010266:	4305      	orrs	r5, r0
 8010268:	81a5      	strh	r5, [r4, #12]
 801026a:	e7cd      	b.n	8010208 <__smakebuf_r+0x18>
 801026c:	0800f8f5 	.word	0x0800f8f5

08010270 <__ascii_mbtowc>:
 8010270:	b082      	sub	sp, #8
 8010272:	b901      	cbnz	r1, 8010276 <__ascii_mbtowc+0x6>
 8010274:	a901      	add	r1, sp, #4
 8010276:	b142      	cbz	r2, 801028a <__ascii_mbtowc+0x1a>
 8010278:	b14b      	cbz	r3, 801028e <__ascii_mbtowc+0x1e>
 801027a:	7813      	ldrb	r3, [r2, #0]
 801027c:	600b      	str	r3, [r1, #0]
 801027e:	7812      	ldrb	r2, [r2, #0]
 8010280:	1e10      	subs	r0, r2, #0
 8010282:	bf18      	it	ne
 8010284:	2001      	movne	r0, #1
 8010286:	b002      	add	sp, #8
 8010288:	4770      	bx	lr
 801028a:	4610      	mov	r0, r2
 801028c:	e7fb      	b.n	8010286 <__ascii_mbtowc+0x16>
 801028e:	f06f 0001 	mvn.w	r0, #1
 8010292:	e7f8      	b.n	8010286 <__ascii_mbtowc+0x16>

08010294 <__malloc_lock>:
 8010294:	4801      	ldr	r0, [pc, #4]	; (801029c <__malloc_lock+0x8>)
 8010296:	f7ff bf72 	b.w	801017e <__retarget_lock_acquire_recursive>
 801029a:	bf00      	nop
 801029c:	2000178c 	.word	0x2000178c

080102a0 <__malloc_unlock>:
 80102a0:	4801      	ldr	r0, [pc, #4]	; (80102a8 <__malloc_unlock+0x8>)
 80102a2:	f7ff bf6d 	b.w	8010180 <__retarget_lock_release_recursive>
 80102a6:	bf00      	nop
 80102a8:	2000178c 	.word	0x2000178c

080102ac <_Balloc>:
 80102ac:	b570      	push	{r4, r5, r6, lr}
 80102ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80102b0:	4604      	mov	r4, r0
 80102b2:	460d      	mov	r5, r1
 80102b4:	b976      	cbnz	r6, 80102d4 <_Balloc+0x28>
 80102b6:	2010      	movs	r0, #16
 80102b8:	f7fc fc10 	bl	800cadc <malloc>
 80102bc:	4602      	mov	r2, r0
 80102be:	6260      	str	r0, [r4, #36]	; 0x24
 80102c0:	b920      	cbnz	r0, 80102cc <_Balloc+0x20>
 80102c2:	4b18      	ldr	r3, [pc, #96]	; (8010324 <_Balloc+0x78>)
 80102c4:	4818      	ldr	r0, [pc, #96]	; (8010328 <_Balloc+0x7c>)
 80102c6:	2166      	movs	r1, #102	; 0x66
 80102c8:	f000 ff98 	bl	80111fc <__assert_func>
 80102cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102d0:	6006      	str	r6, [r0, #0]
 80102d2:	60c6      	str	r6, [r0, #12]
 80102d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80102d6:	68f3      	ldr	r3, [r6, #12]
 80102d8:	b183      	cbz	r3, 80102fc <_Balloc+0x50>
 80102da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102dc:	68db      	ldr	r3, [r3, #12]
 80102de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80102e2:	b9b8      	cbnz	r0, 8010314 <_Balloc+0x68>
 80102e4:	2101      	movs	r1, #1
 80102e6:	fa01 f605 	lsl.w	r6, r1, r5
 80102ea:	1d72      	adds	r2, r6, #5
 80102ec:	0092      	lsls	r2, r2, #2
 80102ee:	4620      	mov	r0, r4
 80102f0:	f000 fc97 	bl	8010c22 <_calloc_r>
 80102f4:	b160      	cbz	r0, 8010310 <_Balloc+0x64>
 80102f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80102fa:	e00e      	b.n	801031a <_Balloc+0x6e>
 80102fc:	2221      	movs	r2, #33	; 0x21
 80102fe:	2104      	movs	r1, #4
 8010300:	4620      	mov	r0, r4
 8010302:	f000 fc8e 	bl	8010c22 <_calloc_r>
 8010306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010308:	60f0      	str	r0, [r6, #12]
 801030a:	68db      	ldr	r3, [r3, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d1e4      	bne.n	80102da <_Balloc+0x2e>
 8010310:	2000      	movs	r0, #0
 8010312:	bd70      	pop	{r4, r5, r6, pc}
 8010314:	6802      	ldr	r2, [r0, #0]
 8010316:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801031a:	2300      	movs	r3, #0
 801031c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010320:	e7f7      	b.n	8010312 <_Balloc+0x66>
 8010322:	bf00      	nop
 8010324:	08011845 	.word	0x08011845
 8010328:	080119ac 	.word	0x080119ac

0801032c <_Bfree>:
 801032c:	b570      	push	{r4, r5, r6, lr}
 801032e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010330:	4605      	mov	r5, r0
 8010332:	460c      	mov	r4, r1
 8010334:	b976      	cbnz	r6, 8010354 <_Bfree+0x28>
 8010336:	2010      	movs	r0, #16
 8010338:	f7fc fbd0 	bl	800cadc <malloc>
 801033c:	4602      	mov	r2, r0
 801033e:	6268      	str	r0, [r5, #36]	; 0x24
 8010340:	b920      	cbnz	r0, 801034c <_Bfree+0x20>
 8010342:	4b09      	ldr	r3, [pc, #36]	; (8010368 <_Bfree+0x3c>)
 8010344:	4809      	ldr	r0, [pc, #36]	; (801036c <_Bfree+0x40>)
 8010346:	218a      	movs	r1, #138	; 0x8a
 8010348:	f000 ff58 	bl	80111fc <__assert_func>
 801034c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010350:	6006      	str	r6, [r0, #0]
 8010352:	60c6      	str	r6, [r0, #12]
 8010354:	b13c      	cbz	r4, 8010366 <_Bfree+0x3a>
 8010356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010358:	6862      	ldr	r2, [r4, #4]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010360:	6021      	str	r1, [r4, #0]
 8010362:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010366:	bd70      	pop	{r4, r5, r6, pc}
 8010368:	08011845 	.word	0x08011845
 801036c:	080119ac 	.word	0x080119ac

08010370 <__multadd>:
 8010370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010374:	690e      	ldr	r6, [r1, #16]
 8010376:	4607      	mov	r7, r0
 8010378:	4698      	mov	r8, r3
 801037a:	460c      	mov	r4, r1
 801037c:	f101 0014 	add.w	r0, r1, #20
 8010380:	2300      	movs	r3, #0
 8010382:	6805      	ldr	r5, [r0, #0]
 8010384:	b2a9      	uxth	r1, r5
 8010386:	fb02 8101 	mla	r1, r2, r1, r8
 801038a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801038e:	0c2d      	lsrs	r5, r5, #16
 8010390:	fb02 c505 	mla	r5, r2, r5, ip
 8010394:	b289      	uxth	r1, r1
 8010396:	3301      	adds	r3, #1
 8010398:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801039c:	429e      	cmp	r6, r3
 801039e:	f840 1b04 	str.w	r1, [r0], #4
 80103a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80103a6:	dcec      	bgt.n	8010382 <__multadd+0x12>
 80103a8:	f1b8 0f00 	cmp.w	r8, #0
 80103ac:	d022      	beq.n	80103f4 <__multadd+0x84>
 80103ae:	68a3      	ldr	r3, [r4, #8]
 80103b0:	42b3      	cmp	r3, r6
 80103b2:	dc19      	bgt.n	80103e8 <__multadd+0x78>
 80103b4:	6861      	ldr	r1, [r4, #4]
 80103b6:	4638      	mov	r0, r7
 80103b8:	3101      	adds	r1, #1
 80103ba:	f7ff ff77 	bl	80102ac <_Balloc>
 80103be:	4605      	mov	r5, r0
 80103c0:	b928      	cbnz	r0, 80103ce <__multadd+0x5e>
 80103c2:	4602      	mov	r2, r0
 80103c4:	4b0d      	ldr	r3, [pc, #52]	; (80103fc <__multadd+0x8c>)
 80103c6:	480e      	ldr	r0, [pc, #56]	; (8010400 <__multadd+0x90>)
 80103c8:	21b5      	movs	r1, #181	; 0xb5
 80103ca:	f000 ff17 	bl	80111fc <__assert_func>
 80103ce:	6922      	ldr	r2, [r4, #16]
 80103d0:	3202      	adds	r2, #2
 80103d2:	f104 010c 	add.w	r1, r4, #12
 80103d6:	0092      	lsls	r2, r2, #2
 80103d8:	300c      	adds	r0, #12
 80103da:	f7fc fb87 	bl	800caec <memcpy>
 80103de:	4621      	mov	r1, r4
 80103e0:	4638      	mov	r0, r7
 80103e2:	f7ff ffa3 	bl	801032c <_Bfree>
 80103e6:	462c      	mov	r4, r5
 80103e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80103ec:	3601      	adds	r6, #1
 80103ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80103f2:	6126      	str	r6, [r4, #16]
 80103f4:	4620      	mov	r0, r4
 80103f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103fa:	bf00      	nop
 80103fc:	080118bb 	.word	0x080118bb
 8010400:	080119ac 	.word	0x080119ac

08010404 <__s2b>:
 8010404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010408:	460c      	mov	r4, r1
 801040a:	4615      	mov	r5, r2
 801040c:	461f      	mov	r7, r3
 801040e:	2209      	movs	r2, #9
 8010410:	3308      	adds	r3, #8
 8010412:	4606      	mov	r6, r0
 8010414:	fb93 f3f2 	sdiv	r3, r3, r2
 8010418:	2100      	movs	r1, #0
 801041a:	2201      	movs	r2, #1
 801041c:	429a      	cmp	r2, r3
 801041e:	db09      	blt.n	8010434 <__s2b+0x30>
 8010420:	4630      	mov	r0, r6
 8010422:	f7ff ff43 	bl	80102ac <_Balloc>
 8010426:	b940      	cbnz	r0, 801043a <__s2b+0x36>
 8010428:	4602      	mov	r2, r0
 801042a:	4b19      	ldr	r3, [pc, #100]	; (8010490 <__s2b+0x8c>)
 801042c:	4819      	ldr	r0, [pc, #100]	; (8010494 <__s2b+0x90>)
 801042e:	21ce      	movs	r1, #206	; 0xce
 8010430:	f000 fee4 	bl	80111fc <__assert_func>
 8010434:	0052      	lsls	r2, r2, #1
 8010436:	3101      	adds	r1, #1
 8010438:	e7f0      	b.n	801041c <__s2b+0x18>
 801043a:	9b08      	ldr	r3, [sp, #32]
 801043c:	6143      	str	r3, [r0, #20]
 801043e:	2d09      	cmp	r5, #9
 8010440:	f04f 0301 	mov.w	r3, #1
 8010444:	6103      	str	r3, [r0, #16]
 8010446:	dd16      	ble.n	8010476 <__s2b+0x72>
 8010448:	f104 0909 	add.w	r9, r4, #9
 801044c:	46c8      	mov	r8, r9
 801044e:	442c      	add	r4, r5
 8010450:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010454:	4601      	mov	r1, r0
 8010456:	3b30      	subs	r3, #48	; 0x30
 8010458:	220a      	movs	r2, #10
 801045a:	4630      	mov	r0, r6
 801045c:	f7ff ff88 	bl	8010370 <__multadd>
 8010460:	45a0      	cmp	r8, r4
 8010462:	d1f5      	bne.n	8010450 <__s2b+0x4c>
 8010464:	f1a5 0408 	sub.w	r4, r5, #8
 8010468:	444c      	add	r4, r9
 801046a:	1b2d      	subs	r5, r5, r4
 801046c:	1963      	adds	r3, r4, r5
 801046e:	42bb      	cmp	r3, r7
 8010470:	db04      	blt.n	801047c <__s2b+0x78>
 8010472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010476:	340a      	adds	r4, #10
 8010478:	2509      	movs	r5, #9
 801047a:	e7f6      	b.n	801046a <__s2b+0x66>
 801047c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010480:	4601      	mov	r1, r0
 8010482:	3b30      	subs	r3, #48	; 0x30
 8010484:	220a      	movs	r2, #10
 8010486:	4630      	mov	r0, r6
 8010488:	f7ff ff72 	bl	8010370 <__multadd>
 801048c:	e7ee      	b.n	801046c <__s2b+0x68>
 801048e:	bf00      	nop
 8010490:	080118bb 	.word	0x080118bb
 8010494:	080119ac 	.word	0x080119ac

08010498 <__hi0bits>:
 8010498:	0c03      	lsrs	r3, r0, #16
 801049a:	041b      	lsls	r3, r3, #16
 801049c:	b9d3      	cbnz	r3, 80104d4 <__hi0bits+0x3c>
 801049e:	0400      	lsls	r0, r0, #16
 80104a0:	2310      	movs	r3, #16
 80104a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80104a6:	bf04      	itt	eq
 80104a8:	0200      	lsleq	r0, r0, #8
 80104aa:	3308      	addeq	r3, #8
 80104ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80104b0:	bf04      	itt	eq
 80104b2:	0100      	lsleq	r0, r0, #4
 80104b4:	3304      	addeq	r3, #4
 80104b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80104ba:	bf04      	itt	eq
 80104bc:	0080      	lsleq	r0, r0, #2
 80104be:	3302      	addeq	r3, #2
 80104c0:	2800      	cmp	r0, #0
 80104c2:	db05      	blt.n	80104d0 <__hi0bits+0x38>
 80104c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80104c8:	f103 0301 	add.w	r3, r3, #1
 80104cc:	bf08      	it	eq
 80104ce:	2320      	moveq	r3, #32
 80104d0:	4618      	mov	r0, r3
 80104d2:	4770      	bx	lr
 80104d4:	2300      	movs	r3, #0
 80104d6:	e7e4      	b.n	80104a2 <__hi0bits+0xa>

080104d8 <__lo0bits>:
 80104d8:	6803      	ldr	r3, [r0, #0]
 80104da:	f013 0207 	ands.w	r2, r3, #7
 80104de:	4601      	mov	r1, r0
 80104e0:	d00b      	beq.n	80104fa <__lo0bits+0x22>
 80104e2:	07da      	lsls	r2, r3, #31
 80104e4:	d424      	bmi.n	8010530 <__lo0bits+0x58>
 80104e6:	0798      	lsls	r0, r3, #30
 80104e8:	bf49      	itett	mi
 80104ea:	085b      	lsrmi	r3, r3, #1
 80104ec:	089b      	lsrpl	r3, r3, #2
 80104ee:	2001      	movmi	r0, #1
 80104f0:	600b      	strmi	r3, [r1, #0]
 80104f2:	bf5c      	itt	pl
 80104f4:	600b      	strpl	r3, [r1, #0]
 80104f6:	2002      	movpl	r0, #2
 80104f8:	4770      	bx	lr
 80104fa:	b298      	uxth	r0, r3
 80104fc:	b9b0      	cbnz	r0, 801052c <__lo0bits+0x54>
 80104fe:	0c1b      	lsrs	r3, r3, #16
 8010500:	2010      	movs	r0, #16
 8010502:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010506:	bf04      	itt	eq
 8010508:	0a1b      	lsreq	r3, r3, #8
 801050a:	3008      	addeq	r0, #8
 801050c:	071a      	lsls	r2, r3, #28
 801050e:	bf04      	itt	eq
 8010510:	091b      	lsreq	r3, r3, #4
 8010512:	3004      	addeq	r0, #4
 8010514:	079a      	lsls	r2, r3, #30
 8010516:	bf04      	itt	eq
 8010518:	089b      	lsreq	r3, r3, #2
 801051a:	3002      	addeq	r0, #2
 801051c:	07da      	lsls	r2, r3, #31
 801051e:	d403      	bmi.n	8010528 <__lo0bits+0x50>
 8010520:	085b      	lsrs	r3, r3, #1
 8010522:	f100 0001 	add.w	r0, r0, #1
 8010526:	d005      	beq.n	8010534 <__lo0bits+0x5c>
 8010528:	600b      	str	r3, [r1, #0]
 801052a:	4770      	bx	lr
 801052c:	4610      	mov	r0, r2
 801052e:	e7e8      	b.n	8010502 <__lo0bits+0x2a>
 8010530:	2000      	movs	r0, #0
 8010532:	4770      	bx	lr
 8010534:	2020      	movs	r0, #32
 8010536:	4770      	bx	lr

08010538 <__i2b>:
 8010538:	b510      	push	{r4, lr}
 801053a:	460c      	mov	r4, r1
 801053c:	2101      	movs	r1, #1
 801053e:	f7ff feb5 	bl	80102ac <_Balloc>
 8010542:	4602      	mov	r2, r0
 8010544:	b928      	cbnz	r0, 8010552 <__i2b+0x1a>
 8010546:	4b05      	ldr	r3, [pc, #20]	; (801055c <__i2b+0x24>)
 8010548:	4805      	ldr	r0, [pc, #20]	; (8010560 <__i2b+0x28>)
 801054a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801054e:	f000 fe55 	bl	80111fc <__assert_func>
 8010552:	2301      	movs	r3, #1
 8010554:	6144      	str	r4, [r0, #20]
 8010556:	6103      	str	r3, [r0, #16]
 8010558:	bd10      	pop	{r4, pc}
 801055a:	bf00      	nop
 801055c:	080118bb 	.word	0x080118bb
 8010560:	080119ac 	.word	0x080119ac

08010564 <__multiply>:
 8010564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010568:	4614      	mov	r4, r2
 801056a:	690a      	ldr	r2, [r1, #16]
 801056c:	6923      	ldr	r3, [r4, #16]
 801056e:	429a      	cmp	r2, r3
 8010570:	bfb8      	it	lt
 8010572:	460b      	movlt	r3, r1
 8010574:	460d      	mov	r5, r1
 8010576:	bfbc      	itt	lt
 8010578:	4625      	movlt	r5, r4
 801057a:	461c      	movlt	r4, r3
 801057c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8010580:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010584:	68ab      	ldr	r3, [r5, #8]
 8010586:	6869      	ldr	r1, [r5, #4]
 8010588:	eb0a 0709 	add.w	r7, sl, r9
 801058c:	42bb      	cmp	r3, r7
 801058e:	b085      	sub	sp, #20
 8010590:	bfb8      	it	lt
 8010592:	3101      	addlt	r1, #1
 8010594:	f7ff fe8a 	bl	80102ac <_Balloc>
 8010598:	b930      	cbnz	r0, 80105a8 <__multiply+0x44>
 801059a:	4602      	mov	r2, r0
 801059c:	4b42      	ldr	r3, [pc, #264]	; (80106a8 <__multiply+0x144>)
 801059e:	4843      	ldr	r0, [pc, #268]	; (80106ac <__multiply+0x148>)
 80105a0:	f240 115d 	movw	r1, #349	; 0x15d
 80105a4:	f000 fe2a 	bl	80111fc <__assert_func>
 80105a8:	f100 0614 	add.w	r6, r0, #20
 80105ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80105b0:	4633      	mov	r3, r6
 80105b2:	2200      	movs	r2, #0
 80105b4:	4543      	cmp	r3, r8
 80105b6:	d31e      	bcc.n	80105f6 <__multiply+0x92>
 80105b8:	f105 0c14 	add.w	ip, r5, #20
 80105bc:	f104 0314 	add.w	r3, r4, #20
 80105c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80105c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80105c8:	9202      	str	r2, [sp, #8]
 80105ca:	ebac 0205 	sub.w	r2, ip, r5
 80105ce:	3a15      	subs	r2, #21
 80105d0:	f022 0203 	bic.w	r2, r2, #3
 80105d4:	3204      	adds	r2, #4
 80105d6:	f105 0115 	add.w	r1, r5, #21
 80105da:	458c      	cmp	ip, r1
 80105dc:	bf38      	it	cc
 80105de:	2204      	movcc	r2, #4
 80105e0:	9201      	str	r2, [sp, #4]
 80105e2:	9a02      	ldr	r2, [sp, #8]
 80105e4:	9303      	str	r3, [sp, #12]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d808      	bhi.n	80105fc <__multiply+0x98>
 80105ea:	2f00      	cmp	r7, #0
 80105ec:	dc55      	bgt.n	801069a <__multiply+0x136>
 80105ee:	6107      	str	r7, [r0, #16]
 80105f0:	b005      	add	sp, #20
 80105f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105f6:	f843 2b04 	str.w	r2, [r3], #4
 80105fa:	e7db      	b.n	80105b4 <__multiply+0x50>
 80105fc:	f8b3 a000 	ldrh.w	sl, [r3]
 8010600:	f1ba 0f00 	cmp.w	sl, #0
 8010604:	d020      	beq.n	8010648 <__multiply+0xe4>
 8010606:	f105 0e14 	add.w	lr, r5, #20
 801060a:	46b1      	mov	r9, r6
 801060c:	2200      	movs	r2, #0
 801060e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010612:	f8d9 b000 	ldr.w	fp, [r9]
 8010616:	b2a1      	uxth	r1, r4
 8010618:	fa1f fb8b 	uxth.w	fp, fp
 801061c:	fb0a b101 	mla	r1, sl, r1, fp
 8010620:	4411      	add	r1, r2
 8010622:	f8d9 2000 	ldr.w	r2, [r9]
 8010626:	0c24      	lsrs	r4, r4, #16
 8010628:	0c12      	lsrs	r2, r2, #16
 801062a:	fb0a 2404 	mla	r4, sl, r4, r2
 801062e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010632:	b289      	uxth	r1, r1
 8010634:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010638:	45f4      	cmp	ip, lr
 801063a:	f849 1b04 	str.w	r1, [r9], #4
 801063e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010642:	d8e4      	bhi.n	801060e <__multiply+0xaa>
 8010644:	9901      	ldr	r1, [sp, #4]
 8010646:	5072      	str	r2, [r6, r1]
 8010648:	9a03      	ldr	r2, [sp, #12]
 801064a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801064e:	3304      	adds	r3, #4
 8010650:	f1b9 0f00 	cmp.w	r9, #0
 8010654:	d01f      	beq.n	8010696 <__multiply+0x132>
 8010656:	6834      	ldr	r4, [r6, #0]
 8010658:	f105 0114 	add.w	r1, r5, #20
 801065c:	46b6      	mov	lr, r6
 801065e:	f04f 0a00 	mov.w	sl, #0
 8010662:	880a      	ldrh	r2, [r1, #0]
 8010664:	f8be b002 	ldrh.w	fp, [lr, #2]
 8010668:	fb09 b202 	mla	r2, r9, r2, fp
 801066c:	4492      	add	sl, r2
 801066e:	b2a4      	uxth	r4, r4
 8010670:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8010674:	f84e 4b04 	str.w	r4, [lr], #4
 8010678:	f851 4b04 	ldr.w	r4, [r1], #4
 801067c:	f8be 2000 	ldrh.w	r2, [lr]
 8010680:	0c24      	lsrs	r4, r4, #16
 8010682:	fb09 2404 	mla	r4, r9, r4, r2
 8010686:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801068a:	458c      	cmp	ip, r1
 801068c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010690:	d8e7      	bhi.n	8010662 <__multiply+0xfe>
 8010692:	9a01      	ldr	r2, [sp, #4]
 8010694:	50b4      	str	r4, [r6, r2]
 8010696:	3604      	adds	r6, #4
 8010698:	e7a3      	b.n	80105e2 <__multiply+0x7e>
 801069a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1a5      	bne.n	80105ee <__multiply+0x8a>
 80106a2:	3f01      	subs	r7, #1
 80106a4:	e7a1      	b.n	80105ea <__multiply+0x86>
 80106a6:	bf00      	nop
 80106a8:	080118bb 	.word	0x080118bb
 80106ac:	080119ac 	.word	0x080119ac

080106b0 <__pow5mult>:
 80106b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106b4:	4615      	mov	r5, r2
 80106b6:	f012 0203 	ands.w	r2, r2, #3
 80106ba:	4606      	mov	r6, r0
 80106bc:	460f      	mov	r7, r1
 80106be:	d007      	beq.n	80106d0 <__pow5mult+0x20>
 80106c0:	4c25      	ldr	r4, [pc, #148]	; (8010758 <__pow5mult+0xa8>)
 80106c2:	3a01      	subs	r2, #1
 80106c4:	2300      	movs	r3, #0
 80106c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106ca:	f7ff fe51 	bl	8010370 <__multadd>
 80106ce:	4607      	mov	r7, r0
 80106d0:	10ad      	asrs	r5, r5, #2
 80106d2:	d03d      	beq.n	8010750 <__pow5mult+0xa0>
 80106d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80106d6:	b97c      	cbnz	r4, 80106f8 <__pow5mult+0x48>
 80106d8:	2010      	movs	r0, #16
 80106da:	f7fc f9ff 	bl	800cadc <malloc>
 80106de:	4602      	mov	r2, r0
 80106e0:	6270      	str	r0, [r6, #36]	; 0x24
 80106e2:	b928      	cbnz	r0, 80106f0 <__pow5mult+0x40>
 80106e4:	4b1d      	ldr	r3, [pc, #116]	; (801075c <__pow5mult+0xac>)
 80106e6:	481e      	ldr	r0, [pc, #120]	; (8010760 <__pow5mult+0xb0>)
 80106e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80106ec:	f000 fd86 	bl	80111fc <__assert_func>
 80106f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106f4:	6004      	str	r4, [r0, #0]
 80106f6:	60c4      	str	r4, [r0, #12]
 80106f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80106fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010700:	b94c      	cbnz	r4, 8010716 <__pow5mult+0x66>
 8010702:	f240 2171 	movw	r1, #625	; 0x271
 8010706:	4630      	mov	r0, r6
 8010708:	f7ff ff16 	bl	8010538 <__i2b>
 801070c:	2300      	movs	r3, #0
 801070e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010712:	4604      	mov	r4, r0
 8010714:	6003      	str	r3, [r0, #0]
 8010716:	f04f 0900 	mov.w	r9, #0
 801071a:	07eb      	lsls	r3, r5, #31
 801071c:	d50a      	bpl.n	8010734 <__pow5mult+0x84>
 801071e:	4639      	mov	r1, r7
 8010720:	4622      	mov	r2, r4
 8010722:	4630      	mov	r0, r6
 8010724:	f7ff ff1e 	bl	8010564 <__multiply>
 8010728:	4639      	mov	r1, r7
 801072a:	4680      	mov	r8, r0
 801072c:	4630      	mov	r0, r6
 801072e:	f7ff fdfd 	bl	801032c <_Bfree>
 8010732:	4647      	mov	r7, r8
 8010734:	106d      	asrs	r5, r5, #1
 8010736:	d00b      	beq.n	8010750 <__pow5mult+0xa0>
 8010738:	6820      	ldr	r0, [r4, #0]
 801073a:	b938      	cbnz	r0, 801074c <__pow5mult+0x9c>
 801073c:	4622      	mov	r2, r4
 801073e:	4621      	mov	r1, r4
 8010740:	4630      	mov	r0, r6
 8010742:	f7ff ff0f 	bl	8010564 <__multiply>
 8010746:	6020      	str	r0, [r4, #0]
 8010748:	f8c0 9000 	str.w	r9, [r0]
 801074c:	4604      	mov	r4, r0
 801074e:	e7e4      	b.n	801071a <__pow5mult+0x6a>
 8010750:	4638      	mov	r0, r7
 8010752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010756:	bf00      	nop
 8010758:	08011b00 	.word	0x08011b00
 801075c:	08011845 	.word	0x08011845
 8010760:	080119ac 	.word	0x080119ac

08010764 <__lshift>:
 8010764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010768:	460c      	mov	r4, r1
 801076a:	6849      	ldr	r1, [r1, #4]
 801076c:	6923      	ldr	r3, [r4, #16]
 801076e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010772:	68a3      	ldr	r3, [r4, #8]
 8010774:	4607      	mov	r7, r0
 8010776:	4691      	mov	r9, r2
 8010778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801077c:	f108 0601 	add.w	r6, r8, #1
 8010780:	42b3      	cmp	r3, r6
 8010782:	db0b      	blt.n	801079c <__lshift+0x38>
 8010784:	4638      	mov	r0, r7
 8010786:	f7ff fd91 	bl	80102ac <_Balloc>
 801078a:	4605      	mov	r5, r0
 801078c:	b948      	cbnz	r0, 80107a2 <__lshift+0x3e>
 801078e:	4602      	mov	r2, r0
 8010790:	4b28      	ldr	r3, [pc, #160]	; (8010834 <__lshift+0xd0>)
 8010792:	4829      	ldr	r0, [pc, #164]	; (8010838 <__lshift+0xd4>)
 8010794:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010798:	f000 fd30 	bl	80111fc <__assert_func>
 801079c:	3101      	adds	r1, #1
 801079e:	005b      	lsls	r3, r3, #1
 80107a0:	e7ee      	b.n	8010780 <__lshift+0x1c>
 80107a2:	2300      	movs	r3, #0
 80107a4:	f100 0114 	add.w	r1, r0, #20
 80107a8:	f100 0210 	add.w	r2, r0, #16
 80107ac:	4618      	mov	r0, r3
 80107ae:	4553      	cmp	r3, sl
 80107b0:	db33      	blt.n	801081a <__lshift+0xb6>
 80107b2:	6920      	ldr	r0, [r4, #16]
 80107b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80107b8:	f104 0314 	add.w	r3, r4, #20
 80107bc:	f019 091f 	ands.w	r9, r9, #31
 80107c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80107c8:	d02b      	beq.n	8010822 <__lshift+0xbe>
 80107ca:	f1c9 0e20 	rsb	lr, r9, #32
 80107ce:	468a      	mov	sl, r1
 80107d0:	2200      	movs	r2, #0
 80107d2:	6818      	ldr	r0, [r3, #0]
 80107d4:	fa00 f009 	lsl.w	r0, r0, r9
 80107d8:	4302      	orrs	r2, r0
 80107da:	f84a 2b04 	str.w	r2, [sl], #4
 80107de:	f853 2b04 	ldr.w	r2, [r3], #4
 80107e2:	459c      	cmp	ip, r3
 80107e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80107e8:	d8f3      	bhi.n	80107d2 <__lshift+0x6e>
 80107ea:	ebac 0304 	sub.w	r3, ip, r4
 80107ee:	3b15      	subs	r3, #21
 80107f0:	f023 0303 	bic.w	r3, r3, #3
 80107f4:	3304      	adds	r3, #4
 80107f6:	f104 0015 	add.w	r0, r4, #21
 80107fa:	4584      	cmp	ip, r0
 80107fc:	bf38      	it	cc
 80107fe:	2304      	movcc	r3, #4
 8010800:	50ca      	str	r2, [r1, r3]
 8010802:	b10a      	cbz	r2, 8010808 <__lshift+0xa4>
 8010804:	f108 0602 	add.w	r6, r8, #2
 8010808:	3e01      	subs	r6, #1
 801080a:	4638      	mov	r0, r7
 801080c:	612e      	str	r6, [r5, #16]
 801080e:	4621      	mov	r1, r4
 8010810:	f7ff fd8c 	bl	801032c <_Bfree>
 8010814:	4628      	mov	r0, r5
 8010816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801081a:	f842 0f04 	str.w	r0, [r2, #4]!
 801081e:	3301      	adds	r3, #1
 8010820:	e7c5      	b.n	80107ae <__lshift+0x4a>
 8010822:	3904      	subs	r1, #4
 8010824:	f853 2b04 	ldr.w	r2, [r3], #4
 8010828:	f841 2f04 	str.w	r2, [r1, #4]!
 801082c:	459c      	cmp	ip, r3
 801082e:	d8f9      	bhi.n	8010824 <__lshift+0xc0>
 8010830:	e7ea      	b.n	8010808 <__lshift+0xa4>
 8010832:	bf00      	nop
 8010834:	080118bb 	.word	0x080118bb
 8010838:	080119ac 	.word	0x080119ac

0801083c <__mcmp>:
 801083c:	b530      	push	{r4, r5, lr}
 801083e:	6902      	ldr	r2, [r0, #16]
 8010840:	690c      	ldr	r4, [r1, #16]
 8010842:	1b12      	subs	r2, r2, r4
 8010844:	d10e      	bne.n	8010864 <__mcmp+0x28>
 8010846:	f100 0314 	add.w	r3, r0, #20
 801084a:	3114      	adds	r1, #20
 801084c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010850:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010854:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010858:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801085c:	42a5      	cmp	r5, r4
 801085e:	d003      	beq.n	8010868 <__mcmp+0x2c>
 8010860:	d305      	bcc.n	801086e <__mcmp+0x32>
 8010862:	2201      	movs	r2, #1
 8010864:	4610      	mov	r0, r2
 8010866:	bd30      	pop	{r4, r5, pc}
 8010868:	4283      	cmp	r3, r0
 801086a:	d3f3      	bcc.n	8010854 <__mcmp+0x18>
 801086c:	e7fa      	b.n	8010864 <__mcmp+0x28>
 801086e:	f04f 32ff 	mov.w	r2, #4294967295
 8010872:	e7f7      	b.n	8010864 <__mcmp+0x28>

08010874 <__mdiff>:
 8010874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010878:	460c      	mov	r4, r1
 801087a:	4606      	mov	r6, r0
 801087c:	4611      	mov	r1, r2
 801087e:	4620      	mov	r0, r4
 8010880:	4617      	mov	r7, r2
 8010882:	f7ff ffdb 	bl	801083c <__mcmp>
 8010886:	1e05      	subs	r5, r0, #0
 8010888:	d110      	bne.n	80108ac <__mdiff+0x38>
 801088a:	4629      	mov	r1, r5
 801088c:	4630      	mov	r0, r6
 801088e:	f7ff fd0d 	bl	80102ac <_Balloc>
 8010892:	b930      	cbnz	r0, 80108a2 <__mdiff+0x2e>
 8010894:	4b39      	ldr	r3, [pc, #228]	; (801097c <__mdiff+0x108>)
 8010896:	4602      	mov	r2, r0
 8010898:	f240 2132 	movw	r1, #562	; 0x232
 801089c:	4838      	ldr	r0, [pc, #224]	; (8010980 <__mdiff+0x10c>)
 801089e:	f000 fcad 	bl	80111fc <__assert_func>
 80108a2:	2301      	movs	r3, #1
 80108a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80108a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ac:	bfa4      	itt	ge
 80108ae:	463b      	movge	r3, r7
 80108b0:	4627      	movge	r7, r4
 80108b2:	4630      	mov	r0, r6
 80108b4:	6879      	ldr	r1, [r7, #4]
 80108b6:	bfa6      	itte	ge
 80108b8:	461c      	movge	r4, r3
 80108ba:	2500      	movge	r5, #0
 80108bc:	2501      	movlt	r5, #1
 80108be:	f7ff fcf5 	bl	80102ac <_Balloc>
 80108c2:	b920      	cbnz	r0, 80108ce <__mdiff+0x5a>
 80108c4:	4b2d      	ldr	r3, [pc, #180]	; (801097c <__mdiff+0x108>)
 80108c6:	4602      	mov	r2, r0
 80108c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80108cc:	e7e6      	b.n	801089c <__mdiff+0x28>
 80108ce:	693e      	ldr	r6, [r7, #16]
 80108d0:	60c5      	str	r5, [r0, #12]
 80108d2:	6925      	ldr	r5, [r4, #16]
 80108d4:	f107 0114 	add.w	r1, r7, #20
 80108d8:	f104 0914 	add.w	r9, r4, #20
 80108dc:	f100 0e14 	add.w	lr, r0, #20
 80108e0:	f107 0210 	add.w	r2, r7, #16
 80108e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80108e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80108ec:	46f2      	mov	sl, lr
 80108ee:	2700      	movs	r7, #0
 80108f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80108f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80108f8:	fa1f f883 	uxth.w	r8, r3
 80108fc:	fa17 f78b 	uxtah	r7, r7, fp
 8010900:	0c1b      	lsrs	r3, r3, #16
 8010902:	eba7 0808 	sub.w	r8, r7, r8
 8010906:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801090a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801090e:	fa1f f888 	uxth.w	r8, r8
 8010912:	141f      	asrs	r7, r3, #16
 8010914:	454d      	cmp	r5, r9
 8010916:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801091a:	f84a 3b04 	str.w	r3, [sl], #4
 801091e:	d8e7      	bhi.n	80108f0 <__mdiff+0x7c>
 8010920:	1b2b      	subs	r3, r5, r4
 8010922:	3b15      	subs	r3, #21
 8010924:	f023 0303 	bic.w	r3, r3, #3
 8010928:	3304      	adds	r3, #4
 801092a:	3415      	adds	r4, #21
 801092c:	42a5      	cmp	r5, r4
 801092e:	bf38      	it	cc
 8010930:	2304      	movcc	r3, #4
 8010932:	4419      	add	r1, r3
 8010934:	4473      	add	r3, lr
 8010936:	469e      	mov	lr, r3
 8010938:	460d      	mov	r5, r1
 801093a:	4565      	cmp	r5, ip
 801093c:	d30e      	bcc.n	801095c <__mdiff+0xe8>
 801093e:	f10c 0203 	add.w	r2, ip, #3
 8010942:	1a52      	subs	r2, r2, r1
 8010944:	f022 0203 	bic.w	r2, r2, #3
 8010948:	3903      	subs	r1, #3
 801094a:	458c      	cmp	ip, r1
 801094c:	bf38      	it	cc
 801094e:	2200      	movcc	r2, #0
 8010950:	441a      	add	r2, r3
 8010952:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010956:	b17b      	cbz	r3, 8010978 <__mdiff+0x104>
 8010958:	6106      	str	r6, [r0, #16]
 801095a:	e7a5      	b.n	80108a8 <__mdiff+0x34>
 801095c:	f855 8b04 	ldr.w	r8, [r5], #4
 8010960:	fa17 f488 	uxtah	r4, r7, r8
 8010964:	1422      	asrs	r2, r4, #16
 8010966:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801096a:	b2a4      	uxth	r4, r4
 801096c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010970:	f84e 4b04 	str.w	r4, [lr], #4
 8010974:	1417      	asrs	r7, r2, #16
 8010976:	e7e0      	b.n	801093a <__mdiff+0xc6>
 8010978:	3e01      	subs	r6, #1
 801097a:	e7ea      	b.n	8010952 <__mdiff+0xde>
 801097c:	080118bb 	.word	0x080118bb
 8010980:	080119ac 	.word	0x080119ac

08010984 <__ulp>:
 8010984:	b082      	sub	sp, #8
 8010986:	ed8d 0b00 	vstr	d0, [sp]
 801098a:	9b01      	ldr	r3, [sp, #4]
 801098c:	4912      	ldr	r1, [pc, #72]	; (80109d8 <__ulp+0x54>)
 801098e:	4019      	ands	r1, r3
 8010990:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010994:	2900      	cmp	r1, #0
 8010996:	dd05      	ble.n	80109a4 <__ulp+0x20>
 8010998:	2200      	movs	r2, #0
 801099a:	460b      	mov	r3, r1
 801099c:	ec43 2b10 	vmov	d0, r2, r3
 80109a0:	b002      	add	sp, #8
 80109a2:	4770      	bx	lr
 80109a4:	4249      	negs	r1, r1
 80109a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80109aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80109ae:	f04f 0200 	mov.w	r2, #0
 80109b2:	f04f 0300 	mov.w	r3, #0
 80109b6:	da04      	bge.n	80109c2 <__ulp+0x3e>
 80109b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80109bc:	fa41 f300 	asr.w	r3, r1, r0
 80109c0:	e7ec      	b.n	801099c <__ulp+0x18>
 80109c2:	f1a0 0114 	sub.w	r1, r0, #20
 80109c6:	291e      	cmp	r1, #30
 80109c8:	bfda      	itte	le
 80109ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80109ce:	fa20 f101 	lsrle.w	r1, r0, r1
 80109d2:	2101      	movgt	r1, #1
 80109d4:	460a      	mov	r2, r1
 80109d6:	e7e1      	b.n	801099c <__ulp+0x18>
 80109d8:	7ff00000 	.word	0x7ff00000

080109dc <__b2d>:
 80109dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109de:	6905      	ldr	r5, [r0, #16]
 80109e0:	f100 0714 	add.w	r7, r0, #20
 80109e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80109e8:	1f2e      	subs	r6, r5, #4
 80109ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80109ee:	4620      	mov	r0, r4
 80109f0:	f7ff fd52 	bl	8010498 <__hi0bits>
 80109f4:	f1c0 0320 	rsb	r3, r0, #32
 80109f8:	280a      	cmp	r0, #10
 80109fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010a78 <__b2d+0x9c>
 80109fe:	600b      	str	r3, [r1, #0]
 8010a00:	dc14      	bgt.n	8010a2c <__b2d+0x50>
 8010a02:	f1c0 0e0b 	rsb	lr, r0, #11
 8010a06:	fa24 f10e 	lsr.w	r1, r4, lr
 8010a0a:	42b7      	cmp	r7, r6
 8010a0c:	ea41 030c 	orr.w	r3, r1, ip
 8010a10:	bf34      	ite	cc
 8010a12:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010a16:	2100      	movcs	r1, #0
 8010a18:	3015      	adds	r0, #21
 8010a1a:	fa04 f000 	lsl.w	r0, r4, r0
 8010a1e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010a22:	ea40 0201 	orr.w	r2, r0, r1
 8010a26:	ec43 2b10 	vmov	d0, r2, r3
 8010a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a2c:	42b7      	cmp	r7, r6
 8010a2e:	bf3a      	itte	cc
 8010a30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010a34:	f1a5 0608 	subcc.w	r6, r5, #8
 8010a38:	2100      	movcs	r1, #0
 8010a3a:	380b      	subs	r0, #11
 8010a3c:	d017      	beq.n	8010a6e <__b2d+0x92>
 8010a3e:	f1c0 0c20 	rsb	ip, r0, #32
 8010a42:	fa04 f500 	lsl.w	r5, r4, r0
 8010a46:	42be      	cmp	r6, r7
 8010a48:	fa21 f40c 	lsr.w	r4, r1, ip
 8010a4c:	ea45 0504 	orr.w	r5, r5, r4
 8010a50:	bf8c      	ite	hi
 8010a52:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010a56:	2400      	movls	r4, #0
 8010a58:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010a5c:	fa01 f000 	lsl.w	r0, r1, r0
 8010a60:	fa24 f40c 	lsr.w	r4, r4, ip
 8010a64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010a68:	ea40 0204 	orr.w	r2, r0, r4
 8010a6c:	e7db      	b.n	8010a26 <__b2d+0x4a>
 8010a6e:	ea44 030c 	orr.w	r3, r4, ip
 8010a72:	460a      	mov	r2, r1
 8010a74:	e7d7      	b.n	8010a26 <__b2d+0x4a>
 8010a76:	bf00      	nop
 8010a78:	3ff00000 	.word	0x3ff00000

08010a7c <__d2b>:
 8010a7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010a80:	4689      	mov	r9, r1
 8010a82:	2101      	movs	r1, #1
 8010a84:	ec57 6b10 	vmov	r6, r7, d0
 8010a88:	4690      	mov	r8, r2
 8010a8a:	f7ff fc0f 	bl	80102ac <_Balloc>
 8010a8e:	4604      	mov	r4, r0
 8010a90:	b930      	cbnz	r0, 8010aa0 <__d2b+0x24>
 8010a92:	4602      	mov	r2, r0
 8010a94:	4b25      	ldr	r3, [pc, #148]	; (8010b2c <__d2b+0xb0>)
 8010a96:	4826      	ldr	r0, [pc, #152]	; (8010b30 <__d2b+0xb4>)
 8010a98:	f240 310a 	movw	r1, #778	; 0x30a
 8010a9c:	f000 fbae 	bl	80111fc <__assert_func>
 8010aa0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010aa4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010aa8:	bb35      	cbnz	r5, 8010af8 <__d2b+0x7c>
 8010aaa:	2e00      	cmp	r6, #0
 8010aac:	9301      	str	r3, [sp, #4]
 8010aae:	d028      	beq.n	8010b02 <__d2b+0x86>
 8010ab0:	4668      	mov	r0, sp
 8010ab2:	9600      	str	r6, [sp, #0]
 8010ab4:	f7ff fd10 	bl	80104d8 <__lo0bits>
 8010ab8:	9900      	ldr	r1, [sp, #0]
 8010aba:	b300      	cbz	r0, 8010afe <__d2b+0x82>
 8010abc:	9a01      	ldr	r2, [sp, #4]
 8010abe:	f1c0 0320 	rsb	r3, r0, #32
 8010ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ac6:	430b      	orrs	r3, r1
 8010ac8:	40c2      	lsrs	r2, r0
 8010aca:	6163      	str	r3, [r4, #20]
 8010acc:	9201      	str	r2, [sp, #4]
 8010ace:	9b01      	ldr	r3, [sp, #4]
 8010ad0:	61a3      	str	r3, [r4, #24]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	bf14      	ite	ne
 8010ad6:	2202      	movne	r2, #2
 8010ad8:	2201      	moveq	r2, #1
 8010ada:	6122      	str	r2, [r4, #16]
 8010adc:	b1d5      	cbz	r5, 8010b14 <__d2b+0x98>
 8010ade:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010ae2:	4405      	add	r5, r0
 8010ae4:	f8c9 5000 	str.w	r5, [r9]
 8010ae8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010aec:	f8c8 0000 	str.w	r0, [r8]
 8010af0:	4620      	mov	r0, r4
 8010af2:	b003      	add	sp, #12
 8010af4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010afc:	e7d5      	b.n	8010aaa <__d2b+0x2e>
 8010afe:	6161      	str	r1, [r4, #20]
 8010b00:	e7e5      	b.n	8010ace <__d2b+0x52>
 8010b02:	a801      	add	r0, sp, #4
 8010b04:	f7ff fce8 	bl	80104d8 <__lo0bits>
 8010b08:	9b01      	ldr	r3, [sp, #4]
 8010b0a:	6163      	str	r3, [r4, #20]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	6122      	str	r2, [r4, #16]
 8010b10:	3020      	adds	r0, #32
 8010b12:	e7e3      	b.n	8010adc <__d2b+0x60>
 8010b14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010b18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010b1c:	f8c9 0000 	str.w	r0, [r9]
 8010b20:	6918      	ldr	r0, [r3, #16]
 8010b22:	f7ff fcb9 	bl	8010498 <__hi0bits>
 8010b26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010b2a:	e7df      	b.n	8010aec <__d2b+0x70>
 8010b2c:	080118bb 	.word	0x080118bb
 8010b30:	080119ac 	.word	0x080119ac

08010b34 <__ratio>:
 8010b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b38:	4688      	mov	r8, r1
 8010b3a:	4669      	mov	r1, sp
 8010b3c:	4681      	mov	r9, r0
 8010b3e:	f7ff ff4d 	bl	80109dc <__b2d>
 8010b42:	a901      	add	r1, sp, #4
 8010b44:	4640      	mov	r0, r8
 8010b46:	ec55 4b10 	vmov	r4, r5, d0
 8010b4a:	f7ff ff47 	bl	80109dc <__b2d>
 8010b4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010b56:	eba3 0c02 	sub.w	ip, r3, r2
 8010b5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010b5e:	1a9b      	subs	r3, r3, r2
 8010b60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010b64:	ec51 0b10 	vmov	r0, r1, d0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	bfd6      	itet	le
 8010b6c:	460a      	movle	r2, r1
 8010b6e:	462a      	movgt	r2, r5
 8010b70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010b74:	468b      	mov	fp, r1
 8010b76:	462f      	mov	r7, r5
 8010b78:	bfd4      	ite	le
 8010b7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010b7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010b82:	4620      	mov	r0, r4
 8010b84:	ee10 2a10 	vmov	r2, s0
 8010b88:	465b      	mov	r3, fp
 8010b8a:	4639      	mov	r1, r7
 8010b8c:	f7ef fe6e 	bl	800086c <__aeabi_ddiv>
 8010b90:	ec41 0b10 	vmov	d0, r0, r1
 8010b94:	b003      	add	sp, #12
 8010b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010b9a <__copybits>:
 8010b9a:	3901      	subs	r1, #1
 8010b9c:	b570      	push	{r4, r5, r6, lr}
 8010b9e:	1149      	asrs	r1, r1, #5
 8010ba0:	6914      	ldr	r4, [r2, #16]
 8010ba2:	3101      	adds	r1, #1
 8010ba4:	f102 0314 	add.w	r3, r2, #20
 8010ba8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010bac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010bb0:	1f05      	subs	r5, r0, #4
 8010bb2:	42a3      	cmp	r3, r4
 8010bb4:	d30c      	bcc.n	8010bd0 <__copybits+0x36>
 8010bb6:	1aa3      	subs	r3, r4, r2
 8010bb8:	3b11      	subs	r3, #17
 8010bba:	f023 0303 	bic.w	r3, r3, #3
 8010bbe:	3211      	adds	r2, #17
 8010bc0:	42a2      	cmp	r2, r4
 8010bc2:	bf88      	it	hi
 8010bc4:	2300      	movhi	r3, #0
 8010bc6:	4418      	add	r0, r3
 8010bc8:	2300      	movs	r3, #0
 8010bca:	4288      	cmp	r0, r1
 8010bcc:	d305      	bcc.n	8010bda <__copybits+0x40>
 8010bce:	bd70      	pop	{r4, r5, r6, pc}
 8010bd0:	f853 6b04 	ldr.w	r6, [r3], #4
 8010bd4:	f845 6f04 	str.w	r6, [r5, #4]!
 8010bd8:	e7eb      	b.n	8010bb2 <__copybits+0x18>
 8010bda:	f840 3b04 	str.w	r3, [r0], #4
 8010bde:	e7f4      	b.n	8010bca <__copybits+0x30>

08010be0 <__any_on>:
 8010be0:	f100 0214 	add.w	r2, r0, #20
 8010be4:	6900      	ldr	r0, [r0, #16]
 8010be6:	114b      	asrs	r3, r1, #5
 8010be8:	4298      	cmp	r0, r3
 8010bea:	b510      	push	{r4, lr}
 8010bec:	db11      	blt.n	8010c12 <__any_on+0x32>
 8010bee:	dd0a      	ble.n	8010c06 <__any_on+0x26>
 8010bf0:	f011 011f 	ands.w	r1, r1, #31
 8010bf4:	d007      	beq.n	8010c06 <__any_on+0x26>
 8010bf6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010bfa:	fa24 f001 	lsr.w	r0, r4, r1
 8010bfe:	fa00 f101 	lsl.w	r1, r0, r1
 8010c02:	428c      	cmp	r4, r1
 8010c04:	d10b      	bne.n	8010c1e <__any_on+0x3e>
 8010c06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010c0a:	4293      	cmp	r3, r2
 8010c0c:	d803      	bhi.n	8010c16 <__any_on+0x36>
 8010c0e:	2000      	movs	r0, #0
 8010c10:	bd10      	pop	{r4, pc}
 8010c12:	4603      	mov	r3, r0
 8010c14:	e7f7      	b.n	8010c06 <__any_on+0x26>
 8010c16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010c1a:	2900      	cmp	r1, #0
 8010c1c:	d0f5      	beq.n	8010c0a <__any_on+0x2a>
 8010c1e:	2001      	movs	r0, #1
 8010c20:	e7f6      	b.n	8010c10 <__any_on+0x30>

08010c22 <_calloc_r>:
 8010c22:	b513      	push	{r0, r1, r4, lr}
 8010c24:	434a      	muls	r2, r1
 8010c26:	4611      	mov	r1, r2
 8010c28:	9201      	str	r2, [sp, #4]
 8010c2a:	f7fb ffc5 	bl	800cbb8 <_malloc_r>
 8010c2e:	4604      	mov	r4, r0
 8010c30:	b118      	cbz	r0, 8010c3a <_calloc_r+0x18>
 8010c32:	9a01      	ldr	r2, [sp, #4]
 8010c34:	2100      	movs	r1, #0
 8010c36:	f7fb ff67 	bl	800cb08 <memset>
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	b002      	add	sp, #8
 8010c3e:	bd10      	pop	{r4, pc}

08010c40 <__ssputs_r>:
 8010c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c44:	688e      	ldr	r6, [r1, #8]
 8010c46:	429e      	cmp	r6, r3
 8010c48:	4682      	mov	sl, r0
 8010c4a:	460c      	mov	r4, r1
 8010c4c:	4690      	mov	r8, r2
 8010c4e:	461f      	mov	r7, r3
 8010c50:	d838      	bhi.n	8010cc4 <__ssputs_r+0x84>
 8010c52:	898a      	ldrh	r2, [r1, #12]
 8010c54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c58:	d032      	beq.n	8010cc0 <__ssputs_r+0x80>
 8010c5a:	6825      	ldr	r5, [r4, #0]
 8010c5c:	6909      	ldr	r1, [r1, #16]
 8010c5e:	eba5 0901 	sub.w	r9, r5, r1
 8010c62:	6965      	ldr	r5, [r4, #20]
 8010c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010c6c:	3301      	adds	r3, #1
 8010c6e:	444b      	add	r3, r9
 8010c70:	106d      	asrs	r5, r5, #1
 8010c72:	429d      	cmp	r5, r3
 8010c74:	bf38      	it	cc
 8010c76:	461d      	movcc	r5, r3
 8010c78:	0553      	lsls	r3, r2, #21
 8010c7a:	d531      	bpl.n	8010ce0 <__ssputs_r+0xa0>
 8010c7c:	4629      	mov	r1, r5
 8010c7e:	f7fb ff9b 	bl	800cbb8 <_malloc_r>
 8010c82:	4606      	mov	r6, r0
 8010c84:	b950      	cbnz	r0, 8010c9c <__ssputs_r+0x5c>
 8010c86:	230c      	movs	r3, #12
 8010c88:	f8ca 3000 	str.w	r3, [sl]
 8010c8c:	89a3      	ldrh	r3, [r4, #12]
 8010c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c92:	81a3      	strh	r3, [r4, #12]
 8010c94:	f04f 30ff 	mov.w	r0, #4294967295
 8010c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c9c:	6921      	ldr	r1, [r4, #16]
 8010c9e:	464a      	mov	r2, r9
 8010ca0:	f7fb ff24 	bl	800caec <memcpy>
 8010ca4:	89a3      	ldrh	r3, [r4, #12]
 8010ca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cae:	81a3      	strh	r3, [r4, #12]
 8010cb0:	6126      	str	r6, [r4, #16]
 8010cb2:	6165      	str	r5, [r4, #20]
 8010cb4:	444e      	add	r6, r9
 8010cb6:	eba5 0509 	sub.w	r5, r5, r9
 8010cba:	6026      	str	r6, [r4, #0]
 8010cbc:	60a5      	str	r5, [r4, #8]
 8010cbe:	463e      	mov	r6, r7
 8010cc0:	42be      	cmp	r6, r7
 8010cc2:	d900      	bls.n	8010cc6 <__ssputs_r+0x86>
 8010cc4:	463e      	mov	r6, r7
 8010cc6:	4632      	mov	r2, r6
 8010cc8:	6820      	ldr	r0, [r4, #0]
 8010cca:	4641      	mov	r1, r8
 8010ccc:	f000 fae8 	bl	80112a0 <memmove>
 8010cd0:	68a3      	ldr	r3, [r4, #8]
 8010cd2:	6822      	ldr	r2, [r4, #0]
 8010cd4:	1b9b      	subs	r3, r3, r6
 8010cd6:	4432      	add	r2, r6
 8010cd8:	60a3      	str	r3, [r4, #8]
 8010cda:	6022      	str	r2, [r4, #0]
 8010cdc:	2000      	movs	r0, #0
 8010cde:	e7db      	b.n	8010c98 <__ssputs_r+0x58>
 8010ce0:	462a      	mov	r2, r5
 8010ce2:	f000 faf7 	bl	80112d4 <_realloc_r>
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	2800      	cmp	r0, #0
 8010cea:	d1e1      	bne.n	8010cb0 <__ssputs_r+0x70>
 8010cec:	6921      	ldr	r1, [r4, #16]
 8010cee:	4650      	mov	r0, sl
 8010cf0:	f7fb ff12 	bl	800cb18 <_free_r>
 8010cf4:	e7c7      	b.n	8010c86 <__ssputs_r+0x46>
	...

08010cf8 <_svfiprintf_r>:
 8010cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cfc:	4698      	mov	r8, r3
 8010cfe:	898b      	ldrh	r3, [r1, #12]
 8010d00:	061b      	lsls	r3, r3, #24
 8010d02:	b09d      	sub	sp, #116	; 0x74
 8010d04:	4607      	mov	r7, r0
 8010d06:	460d      	mov	r5, r1
 8010d08:	4614      	mov	r4, r2
 8010d0a:	d50e      	bpl.n	8010d2a <_svfiprintf_r+0x32>
 8010d0c:	690b      	ldr	r3, [r1, #16]
 8010d0e:	b963      	cbnz	r3, 8010d2a <_svfiprintf_r+0x32>
 8010d10:	2140      	movs	r1, #64	; 0x40
 8010d12:	f7fb ff51 	bl	800cbb8 <_malloc_r>
 8010d16:	6028      	str	r0, [r5, #0]
 8010d18:	6128      	str	r0, [r5, #16]
 8010d1a:	b920      	cbnz	r0, 8010d26 <_svfiprintf_r+0x2e>
 8010d1c:	230c      	movs	r3, #12
 8010d1e:	603b      	str	r3, [r7, #0]
 8010d20:	f04f 30ff 	mov.w	r0, #4294967295
 8010d24:	e0d1      	b.n	8010eca <_svfiprintf_r+0x1d2>
 8010d26:	2340      	movs	r3, #64	; 0x40
 8010d28:	616b      	str	r3, [r5, #20]
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010d2e:	2320      	movs	r3, #32
 8010d30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d34:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d38:	2330      	movs	r3, #48	; 0x30
 8010d3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010ee4 <_svfiprintf_r+0x1ec>
 8010d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d42:	f04f 0901 	mov.w	r9, #1
 8010d46:	4623      	mov	r3, r4
 8010d48:	469a      	mov	sl, r3
 8010d4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d4e:	b10a      	cbz	r2, 8010d54 <_svfiprintf_r+0x5c>
 8010d50:	2a25      	cmp	r2, #37	; 0x25
 8010d52:	d1f9      	bne.n	8010d48 <_svfiprintf_r+0x50>
 8010d54:	ebba 0b04 	subs.w	fp, sl, r4
 8010d58:	d00b      	beq.n	8010d72 <_svfiprintf_r+0x7a>
 8010d5a:	465b      	mov	r3, fp
 8010d5c:	4622      	mov	r2, r4
 8010d5e:	4629      	mov	r1, r5
 8010d60:	4638      	mov	r0, r7
 8010d62:	f7ff ff6d 	bl	8010c40 <__ssputs_r>
 8010d66:	3001      	adds	r0, #1
 8010d68:	f000 80aa 	beq.w	8010ec0 <_svfiprintf_r+0x1c8>
 8010d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d6e:	445a      	add	r2, fp
 8010d70:	9209      	str	r2, [sp, #36]	; 0x24
 8010d72:	f89a 3000 	ldrb.w	r3, [sl]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	f000 80a2 	beq.w	8010ec0 <_svfiprintf_r+0x1c8>
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d86:	f10a 0a01 	add.w	sl, sl, #1
 8010d8a:	9304      	str	r3, [sp, #16]
 8010d8c:	9307      	str	r3, [sp, #28]
 8010d8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d92:	931a      	str	r3, [sp, #104]	; 0x68
 8010d94:	4654      	mov	r4, sl
 8010d96:	2205      	movs	r2, #5
 8010d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d9c:	4851      	ldr	r0, [pc, #324]	; (8010ee4 <_svfiprintf_r+0x1ec>)
 8010d9e:	f7ef fa2f 	bl	8000200 <memchr>
 8010da2:	9a04      	ldr	r2, [sp, #16]
 8010da4:	b9d8      	cbnz	r0, 8010dde <_svfiprintf_r+0xe6>
 8010da6:	06d0      	lsls	r0, r2, #27
 8010da8:	bf44      	itt	mi
 8010daa:	2320      	movmi	r3, #32
 8010dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010db0:	0711      	lsls	r1, r2, #28
 8010db2:	bf44      	itt	mi
 8010db4:	232b      	movmi	r3, #43	; 0x2b
 8010db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010dba:	f89a 3000 	ldrb.w	r3, [sl]
 8010dbe:	2b2a      	cmp	r3, #42	; 0x2a
 8010dc0:	d015      	beq.n	8010dee <_svfiprintf_r+0xf6>
 8010dc2:	9a07      	ldr	r2, [sp, #28]
 8010dc4:	4654      	mov	r4, sl
 8010dc6:	2000      	movs	r0, #0
 8010dc8:	f04f 0c0a 	mov.w	ip, #10
 8010dcc:	4621      	mov	r1, r4
 8010dce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dd2:	3b30      	subs	r3, #48	; 0x30
 8010dd4:	2b09      	cmp	r3, #9
 8010dd6:	d94e      	bls.n	8010e76 <_svfiprintf_r+0x17e>
 8010dd8:	b1b0      	cbz	r0, 8010e08 <_svfiprintf_r+0x110>
 8010dda:	9207      	str	r2, [sp, #28]
 8010ddc:	e014      	b.n	8010e08 <_svfiprintf_r+0x110>
 8010dde:	eba0 0308 	sub.w	r3, r0, r8
 8010de2:	fa09 f303 	lsl.w	r3, r9, r3
 8010de6:	4313      	orrs	r3, r2
 8010de8:	9304      	str	r3, [sp, #16]
 8010dea:	46a2      	mov	sl, r4
 8010dec:	e7d2      	b.n	8010d94 <_svfiprintf_r+0x9c>
 8010dee:	9b03      	ldr	r3, [sp, #12]
 8010df0:	1d19      	adds	r1, r3, #4
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	9103      	str	r1, [sp, #12]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	bfbb      	ittet	lt
 8010dfa:	425b      	neglt	r3, r3
 8010dfc:	f042 0202 	orrlt.w	r2, r2, #2
 8010e00:	9307      	strge	r3, [sp, #28]
 8010e02:	9307      	strlt	r3, [sp, #28]
 8010e04:	bfb8      	it	lt
 8010e06:	9204      	strlt	r2, [sp, #16]
 8010e08:	7823      	ldrb	r3, [r4, #0]
 8010e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8010e0c:	d10c      	bne.n	8010e28 <_svfiprintf_r+0x130>
 8010e0e:	7863      	ldrb	r3, [r4, #1]
 8010e10:	2b2a      	cmp	r3, #42	; 0x2a
 8010e12:	d135      	bne.n	8010e80 <_svfiprintf_r+0x188>
 8010e14:	9b03      	ldr	r3, [sp, #12]
 8010e16:	1d1a      	adds	r2, r3, #4
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	9203      	str	r2, [sp, #12]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	bfb8      	it	lt
 8010e20:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e24:	3402      	adds	r4, #2
 8010e26:	9305      	str	r3, [sp, #20]
 8010e28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010ef4 <_svfiprintf_r+0x1fc>
 8010e2c:	7821      	ldrb	r1, [r4, #0]
 8010e2e:	2203      	movs	r2, #3
 8010e30:	4650      	mov	r0, sl
 8010e32:	f7ef f9e5 	bl	8000200 <memchr>
 8010e36:	b140      	cbz	r0, 8010e4a <_svfiprintf_r+0x152>
 8010e38:	2340      	movs	r3, #64	; 0x40
 8010e3a:	eba0 000a 	sub.w	r0, r0, sl
 8010e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8010e42:	9b04      	ldr	r3, [sp, #16]
 8010e44:	4303      	orrs	r3, r0
 8010e46:	3401      	adds	r4, #1
 8010e48:	9304      	str	r3, [sp, #16]
 8010e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e4e:	4826      	ldr	r0, [pc, #152]	; (8010ee8 <_svfiprintf_r+0x1f0>)
 8010e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e54:	2206      	movs	r2, #6
 8010e56:	f7ef f9d3 	bl	8000200 <memchr>
 8010e5a:	2800      	cmp	r0, #0
 8010e5c:	d038      	beq.n	8010ed0 <_svfiprintf_r+0x1d8>
 8010e5e:	4b23      	ldr	r3, [pc, #140]	; (8010eec <_svfiprintf_r+0x1f4>)
 8010e60:	bb1b      	cbnz	r3, 8010eaa <_svfiprintf_r+0x1b2>
 8010e62:	9b03      	ldr	r3, [sp, #12]
 8010e64:	3307      	adds	r3, #7
 8010e66:	f023 0307 	bic.w	r3, r3, #7
 8010e6a:	3308      	adds	r3, #8
 8010e6c:	9303      	str	r3, [sp, #12]
 8010e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e70:	4433      	add	r3, r6
 8010e72:	9309      	str	r3, [sp, #36]	; 0x24
 8010e74:	e767      	b.n	8010d46 <_svfiprintf_r+0x4e>
 8010e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e7a:	460c      	mov	r4, r1
 8010e7c:	2001      	movs	r0, #1
 8010e7e:	e7a5      	b.n	8010dcc <_svfiprintf_r+0xd4>
 8010e80:	2300      	movs	r3, #0
 8010e82:	3401      	adds	r4, #1
 8010e84:	9305      	str	r3, [sp, #20]
 8010e86:	4619      	mov	r1, r3
 8010e88:	f04f 0c0a 	mov.w	ip, #10
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e92:	3a30      	subs	r2, #48	; 0x30
 8010e94:	2a09      	cmp	r2, #9
 8010e96:	d903      	bls.n	8010ea0 <_svfiprintf_r+0x1a8>
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d0c5      	beq.n	8010e28 <_svfiprintf_r+0x130>
 8010e9c:	9105      	str	r1, [sp, #20]
 8010e9e:	e7c3      	b.n	8010e28 <_svfiprintf_r+0x130>
 8010ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ea4:	4604      	mov	r4, r0
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	e7f0      	b.n	8010e8c <_svfiprintf_r+0x194>
 8010eaa:	ab03      	add	r3, sp, #12
 8010eac:	9300      	str	r3, [sp, #0]
 8010eae:	462a      	mov	r2, r5
 8010eb0:	4b0f      	ldr	r3, [pc, #60]	; (8010ef0 <_svfiprintf_r+0x1f8>)
 8010eb2:	a904      	add	r1, sp, #16
 8010eb4:	4638      	mov	r0, r7
 8010eb6:	f7fb ff79 	bl	800cdac <_printf_float>
 8010eba:	1c42      	adds	r2, r0, #1
 8010ebc:	4606      	mov	r6, r0
 8010ebe:	d1d6      	bne.n	8010e6e <_svfiprintf_r+0x176>
 8010ec0:	89ab      	ldrh	r3, [r5, #12]
 8010ec2:	065b      	lsls	r3, r3, #25
 8010ec4:	f53f af2c 	bmi.w	8010d20 <_svfiprintf_r+0x28>
 8010ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010eca:	b01d      	add	sp, #116	; 0x74
 8010ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ed0:	ab03      	add	r3, sp, #12
 8010ed2:	9300      	str	r3, [sp, #0]
 8010ed4:	462a      	mov	r2, r5
 8010ed6:	4b06      	ldr	r3, [pc, #24]	; (8010ef0 <_svfiprintf_r+0x1f8>)
 8010ed8:	a904      	add	r1, sp, #16
 8010eda:	4638      	mov	r0, r7
 8010edc:	f7fc fa0a 	bl	800d2f4 <_printf_i>
 8010ee0:	e7eb      	b.n	8010eba <_svfiprintf_r+0x1c2>
 8010ee2:	bf00      	nop
 8010ee4:	08011b0c 	.word	0x08011b0c
 8010ee8:	08011b16 	.word	0x08011b16
 8010eec:	0800cdad 	.word	0x0800cdad
 8010ef0:	08010c41 	.word	0x08010c41
 8010ef4:	08011b12 	.word	0x08011b12

08010ef8 <__sfputc_r>:
 8010ef8:	6893      	ldr	r3, [r2, #8]
 8010efa:	3b01      	subs	r3, #1
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	b410      	push	{r4}
 8010f00:	6093      	str	r3, [r2, #8]
 8010f02:	da08      	bge.n	8010f16 <__sfputc_r+0x1e>
 8010f04:	6994      	ldr	r4, [r2, #24]
 8010f06:	42a3      	cmp	r3, r4
 8010f08:	db01      	blt.n	8010f0e <__sfputc_r+0x16>
 8010f0a:	290a      	cmp	r1, #10
 8010f0c:	d103      	bne.n	8010f16 <__sfputc_r+0x1e>
 8010f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f12:	f7fd bcaf 	b.w	800e874 <__swbuf_r>
 8010f16:	6813      	ldr	r3, [r2, #0]
 8010f18:	1c58      	adds	r0, r3, #1
 8010f1a:	6010      	str	r0, [r2, #0]
 8010f1c:	7019      	strb	r1, [r3, #0]
 8010f1e:	4608      	mov	r0, r1
 8010f20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f24:	4770      	bx	lr

08010f26 <__sfputs_r>:
 8010f26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f28:	4606      	mov	r6, r0
 8010f2a:	460f      	mov	r7, r1
 8010f2c:	4614      	mov	r4, r2
 8010f2e:	18d5      	adds	r5, r2, r3
 8010f30:	42ac      	cmp	r4, r5
 8010f32:	d101      	bne.n	8010f38 <__sfputs_r+0x12>
 8010f34:	2000      	movs	r0, #0
 8010f36:	e007      	b.n	8010f48 <__sfputs_r+0x22>
 8010f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f3c:	463a      	mov	r2, r7
 8010f3e:	4630      	mov	r0, r6
 8010f40:	f7ff ffda 	bl	8010ef8 <__sfputc_r>
 8010f44:	1c43      	adds	r3, r0, #1
 8010f46:	d1f3      	bne.n	8010f30 <__sfputs_r+0xa>
 8010f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f4c <_vfiprintf_r>:
 8010f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f50:	460d      	mov	r5, r1
 8010f52:	b09d      	sub	sp, #116	; 0x74
 8010f54:	4614      	mov	r4, r2
 8010f56:	4698      	mov	r8, r3
 8010f58:	4606      	mov	r6, r0
 8010f5a:	b118      	cbz	r0, 8010f64 <_vfiprintf_r+0x18>
 8010f5c:	6983      	ldr	r3, [r0, #24]
 8010f5e:	b90b      	cbnz	r3, 8010f64 <_vfiprintf_r+0x18>
 8010f60:	f7fe fcfc 	bl	800f95c <__sinit>
 8010f64:	4b89      	ldr	r3, [pc, #548]	; (801118c <_vfiprintf_r+0x240>)
 8010f66:	429d      	cmp	r5, r3
 8010f68:	d11b      	bne.n	8010fa2 <_vfiprintf_r+0x56>
 8010f6a:	6875      	ldr	r5, [r6, #4]
 8010f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f6e:	07d9      	lsls	r1, r3, #31
 8010f70:	d405      	bmi.n	8010f7e <_vfiprintf_r+0x32>
 8010f72:	89ab      	ldrh	r3, [r5, #12]
 8010f74:	059a      	lsls	r2, r3, #22
 8010f76:	d402      	bmi.n	8010f7e <_vfiprintf_r+0x32>
 8010f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f7a:	f7ff f900 	bl	801017e <__retarget_lock_acquire_recursive>
 8010f7e:	89ab      	ldrh	r3, [r5, #12]
 8010f80:	071b      	lsls	r3, r3, #28
 8010f82:	d501      	bpl.n	8010f88 <_vfiprintf_r+0x3c>
 8010f84:	692b      	ldr	r3, [r5, #16]
 8010f86:	b9eb      	cbnz	r3, 8010fc4 <_vfiprintf_r+0x78>
 8010f88:	4629      	mov	r1, r5
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	f7fd fcd6 	bl	800e93c <__swsetup_r>
 8010f90:	b1c0      	cbz	r0, 8010fc4 <_vfiprintf_r+0x78>
 8010f92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f94:	07dc      	lsls	r4, r3, #31
 8010f96:	d50e      	bpl.n	8010fb6 <_vfiprintf_r+0x6a>
 8010f98:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9c:	b01d      	add	sp, #116	; 0x74
 8010f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa2:	4b7b      	ldr	r3, [pc, #492]	; (8011190 <_vfiprintf_r+0x244>)
 8010fa4:	429d      	cmp	r5, r3
 8010fa6:	d101      	bne.n	8010fac <_vfiprintf_r+0x60>
 8010fa8:	68b5      	ldr	r5, [r6, #8]
 8010faa:	e7df      	b.n	8010f6c <_vfiprintf_r+0x20>
 8010fac:	4b79      	ldr	r3, [pc, #484]	; (8011194 <_vfiprintf_r+0x248>)
 8010fae:	429d      	cmp	r5, r3
 8010fb0:	bf08      	it	eq
 8010fb2:	68f5      	ldreq	r5, [r6, #12]
 8010fb4:	e7da      	b.n	8010f6c <_vfiprintf_r+0x20>
 8010fb6:	89ab      	ldrh	r3, [r5, #12]
 8010fb8:	0598      	lsls	r0, r3, #22
 8010fba:	d4ed      	bmi.n	8010f98 <_vfiprintf_r+0x4c>
 8010fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fbe:	f7ff f8df 	bl	8010180 <__retarget_lock_release_recursive>
 8010fc2:	e7e9      	b.n	8010f98 <_vfiprintf_r+0x4c>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8010fc8:	2320      	movs	r3, #32
 8010fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fd2:	2330      	movs	r3, #48	; 0x30
 8010fd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011198 <_vfiprintf_r+0x24c>
 8010fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fdc:	f04f 0901 	mov.w	r9, #1
 8010fe0:	4623      	mov	r3, r4
 8010fe2:	469a      	mov	sl, r3
 8010fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fe8:	b10a      	cbz	r2, 8010fee <_vfiprintf_r+0xa2>
 8010fea:	2a25      	cmp	r2, #37	; 0x25
 8010fec:	d1f9      	bne.n	8010fe2 <_vfiprintf_r+0x96>
 8010fee:	ebba 0b04 	subs.w	fp, sl, r4
 8010ff2:	d00b      	beq.n	801100c <_vfiprintf_r+0xc0>
 8010ff4:	465b      	mov	r3, fp
 8010ff6:	4622      	mov	r2, r4
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	4630      	mov	r0, r6
 8010ffc:	f7ff ff93 	bl	8010f26 <__sfputs_r>
 8011000:	3001      	adds	r0, #1
 8011002:	f000 80aa 	beq.w	801115a <_vfiprintf_r+0x20e>
 8011006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011008:	445a      	add	r2, fp
 801100a:	9209      	str	r2, [sp, #36]	; 0x24
 801100c:	f89a 3000 	ldrb.w	r3, [sl]
 8011010:	2b00      	cmp	r3, #0
 8011012:	f000 80a2 	beq.w	801115a <_vfiprintf_r+0x20e>
 8011016:	2300      	movs	r3, #0
 8011018:	f04f 32ff 	mov.w	r2, #4294967295
 801101c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011020:	f10a 0a01 	add.w	sl, sl, #1
 8011024:	9304      	str	r3, [sp, #16]
 8011026:	9307      	str	r3, [sp, #28]
 8011028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801102c:	931a      	str	r3, [sp, #104]	; 0x68
 801102e:	4654      	mov	r4, sl
 8011030:	2205      	movs	r2, #5
 8011032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011036:	4858      	ldr	r0, [pc, #352]	; (8011198 <_vfiprintf_r+0x24c>)
 8011038:	f7ef f8e2 	bl	8000200 <memchr>
 801103c:	9a04      	ldr	r2, [sp, #16]
 801103e:	b9d8      	cbnz	r0, 8011078 <_vfiprintf_r+0x12c>
 8011040:	06d1      	lsls	r1, r2, #27
 8011042:	bf44      	itt	mi
 8011044:	2320      	movmi	r3, #32
 8011046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801104a:	0713      	lsls	r3, r2, #28
 801104c:	bf44      	itt	mi
 801104e:	232b      	movmi	r3, #43	; 0x2b
 8011050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011054:	f89a 3000 	ldrb.w	r3, [sl]
 8011058:	2b2a      	cmp	r3, #42	; 0x2a
 801105a:	d015      	beq.n	8011088 <_vfiprintf_r+0x13c>
 801105c:	9a07      	ldr	r2, [sp, #28]
 801105e:	4654      	mov	r4, sl
 8011060:	2000      	movs	r0, #0
 8011062:	f04f 0c0a 	mov.w	ip, #10
 8011066:	4621      	mov	r1, r4
 8011068:	f811 3b01 	ldrb.w	r3, [r1], #1
 801106c:	3b30      	subs	r3, #48	; 0x30
 801106e:	2b09      	cmp	r3, #9
 8011070:	d94e      	bls.n	8011110 <_vfiprintf_r+0x1c4>
 8011072:	b1b0      	cbz	r0, 80110a2 <_vfiprintf_r+0x156>
 8011074:	9207      	str	r2, [sp, #28]
 8011076:	e014      	b.n	80110a2 <_vfiprintf_r+0x156>
 8011078:	eba0 0308 	sub.w	r3, r0, r8
 801107c:	fa09 f303 	lsl.w	r3, r9, r3
 8011080:	4313      	orrs	r3, r2
 8011082:	9304      	str	r3, [sp, #16]
 8011084:	46a2      	mov	sl, r4
 8011086:	e7d2      	b.n	801102e <_vfiprintf_r+0xe2>
 8011088:	9b03      	ldr	r3, [sp, #12]
 801108a:	1d19      	adds	r1, r3, #4
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	9103      	str	r1, [sp, #12]
 8011090:	2b00      	cmp	r3, #0
 8011092:	bfbb      	ittet	lt
 8011094:	425b      	neglt	r3, r3
 8011096:	f042 0202 	orrlt.w	r2, r2, #2
 801109a:	9307      	strge	r3, [sp, #28]
 801109c:	9307      	strlt	r3, [sp, #28]
 801109e:	bfb8      	it	lt
 80110a0:	9204      	strlt	r2, [sp, #16]
 80110a2:	7823      	ldrb	r3, [r4, #0]
 80110a4:	2b2e      	cmp	r3, #46	; 0x2e
 80110a6:	d10c      	bne.n	80110c2 <_vfiprintf_r+0x176>
 80110a8:	7863      	ldrb	r3, [r4, #1]
 80110aa:	2b2a      	cmp	r3, #42	; 0x2a
 80110ac:	d135      	bne.n	801111a <_vfiprintf_r+0x1ce>
 80110ae:	9b03      	ldr	r3, [sp, #12]
 80110b0:	1d1a      	adds	r2, r3, #4
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	9203      	str	r2, [sp, #12]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	bfb8      	it	lt
 80110ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80110be:	3402      	adds	r4, #2
 80110c0:	9305      	str	r3, [sp, #20]
 80110c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80111a8 <_vfiprintf_r+0x25c>
 80110c6:	7821      	ldrb	r1, [r4, #0]
 80110c8:	2203      	movs	r2, #3
 80110ca:	4650      	mov	r0, sl
 80110cc:	f7ef f898 	bl	8000200 <memchr>
 80110d0:	b140      	cbz	r0, 80110e4 <_vfiprintf_r+0x198>
 80110d2:	2340      	movs	r3, #64	; 0x40
 80110d4:	eba0 000a 	sub.w	r0, r0, sl
 80110d8:	fa03 f000 	lsl.w	r0, r3, r0
 80110dc:	9b04      	ldr	r3, [sp, #16]
 80110de:	4303      	orrs	r3, r0
 80110e0:	3401      	adds	r4, #1
 80110e2:	9304      	str	r3, [sp, #16]
 80110e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110e8:	482c      	ldr	r0, [pc, #176]	; (801119c <_vfiprintf_r+0x250>)
 80110ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110ee:	2206      	movs	r2, #6
 80110f0:	f7ef f886 	bl	8000200 <memchr>
 80110f4:	2800      	cmp	r0, #0
 80110f6:	d03f      	beq.n	8011178 <_vfiprintf_r+0x22c>
 80110f8:	4b29      	ldr	r3, [pc, #164]	; (80111a0 <_vfiprintf_r+0x254>)
 80110fa:	bb1b      	cbnz	r3, 8011144 <_vfiprintf_r+0x1f8>
 80110fc:	9b03      	ldr	r3, [sp, #12]
 80110fe:	3307      	adds	r3, #7
 8011100:	f023 0307 	bic.w	r3, r3, #7
 8011104:	3308      	adds	r3, #8
 8011106:	9303      	str	r3, [sp, #12]
 8011108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801110a:	443b      	add	r3, r7
 801110c:	9309      	str	r3, [sp, #36]	; 0x24
 801110e:	e767      	b.n	8010fe0 <_vfiprintf_r+0x94>
 8011110:	fb0c 3202 	mla	r2, ip, r2, r3
 8011114:	460c      	mov	r4, r1
 8011116:	2001      	movs	r0, #1
 8011118:	e7a5      	b.n	8011066 <_vfiprintf_r+0x11a>
 801111a:	2300      	movs	r3, #0
 801111c:	3401      	adds	r4, #1
 801111e:	9305      	str	r3, [sp, #20]
 8011120:	4619      	mov	r1, r3
 8011122:	f04f 0c0a 	mov.w	ip, #10
 8011126:	4620      	mov	r0, r4
 8011128:	f810 2b01 	ldrb.w	r2, [r0], #1
 801112c:	3a30      	subs	r2, #48	; 0x30
 801112e:	2a09      	cmp	r2, #9
 8011130:	d903      	bls.n	801113a <_vfiprintf_r+0x1ee>
 8011132:	2b00      	cmp	r3, #0
 8011134:	d0c5      	beq.n	80110c2 <_vfiprintf_r+0x176>
 8011136:	9105      	str	r1, [sp, #20]
 8011138:	e7c3      	b.n	80110c2 <_vfiprintf_r+0x176>
 801113a:	fb0c 2101 	mla	r1, ip, r1, r2
 801113e:	4604      	mov	r4, r0
 8011140:	2301      	movs	r3, #1
 8011142:	e7f0      	b.n	8011126 <_vfiprintf_r+0x1da>
 8011144:	ab03      	add	r3, sp, #12
 8011146:	9300      	str	r3, [sp, #0]
 8011148:	462a      	mov	r2, r5
 801114a:	4b16      	ldr	r3, [pc, #88]	; (80111a4 <_vfiprintf_r+0x258>)
 801114c:	a904      	add	r1, sp, #16
 801114e:	4630      	mov	r0, r6
 8011150:	f7fb fe2c 	bl	800cdac <_printf_float>
 8011154:	4607      	mov	r7, r0
 8011156:	1c78      	adds	r0, r7, #1
 8011158:	d1d6      	bne.n	8011108 <_vfiprintf_r+0x1bc>
 801115a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801115c:	07d9      	lsls	r1, r3, #31
 801115e:	d405      	bmi.n	801116c <_vfiprintf_r+0x220>
 8011160:	89ab      	ldrh	r3, [r5, #12]
 8011162:	059a      	lsls	r2, r3, #22
 8011164:	d402      	bmi.n	801116c <_vfiprintf_r+0x220>
 8011166:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011168:	f7ff f80a 	bl	8010180 <__retarget_lock_release_recursive>
 801116c:	89ab      	ldrh	r3, [r5, #12]
 801116e:	065b      	lsls	r3, r3, #25
 8011170:	f53f af12 	bmi.w	8010f98 <_vfiprintf_r+0x4c>
 8011174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011176:	e711      	b.n	8010f9c <_vfiprintf_r+0x50>
 8011178:	ab03      	add	r3, sp, #12
 801117a:	9300      	str	r3, [sp, #0]
 801117c:	462a      	mov	r2, r5
 801117e:	4b09      	ldr	r3, [pc, #36]	; (80111a4 <_vfiprintf_r+0x258>)
 8011180:	a904      	add	r1, sp, #16
 8011182:	4630      	mov	r0, r6
 8011184:	f7fc f8b6 	bl	800d2f4 <_printf_i>
 8011188:	e7e4      	b.n	8011154 <_vfiprintf_r+0x208>
 801118a:	bf00      	nop
 801118c:	080118ec 	.word	0x080118ec
 8011190:	0801190c 	.word	0x0801190c
 8011194:	080118cc 	.word	0x080118cc
 8011198:	08011b0c 	.word	0x08011b0c
 801119c:	08011b16 	.word	0x08011b16
 80111a0:	0800cdad 	.word	0x0800cdad
 80111a4:	08010f27 	.word	0x08010f27
 80111a8:	08011b12 	.word	0x08011b12

080111ac <_read_r>:
 80111ac:	b538      	push	{r3, r4, r5, lr}
 80111ae:	4d07      	ldr	r5, [pc, #28]	; (80111cc <_read_r+0x20>)
 80111b0:	4604      	mov	r4, r0
 80111b2:	4608      	mov	r0, r1
 80111b4:	4611      	mov	r1, r2
 80111b6:	2200      	movs	r2, #0
 80111b8:	602a      	str	r2, [r5, #0]
 80111ba:	461a      	mov	r2, r3
 80111bc:	f7f2 fc80 	bl	8003ac0 <_read>
 80111c0:	1c43      	adds	r3, r0, #1
 80111c2:	d102      	bne.n	80111ca <_read_r+0x1e>
 80111c4:	682b      	ldr	r3, [r5, #0]
 80111c6:	b103      	cbz	r3, 80111ca <_read_r+0x1e>
 80111c8:	6023      	str	r3, [r4, #0]
 80111ca:	bd38      	pop	{r3, r4, r5, pc}
 80111cc:	20001794 	.word	0x20001794

080111d0 <nan>:
 80111d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80111d8 <nan+0x8>
 80111d4:	4770      	bx	lr
 80111d6:	bf00      	nop
 80111d8:	00000000 	.word	0x00000000
 80111dc:	7ff80000 	.word	0x7ff80000

080111e0 <__ascii_wctomb>:
 80111e0:	b149      	cbz	r1, 80111f6 <__ascii_wctomb+0x16>
 80111e2:	2aff      	cmp	r2, #255	; 0xff
 80111e4:	bf85      	ittet	hi
 80111e6:	238a      	movhi	r3, #138	; 0x8a
 80111e8:	6003      	strhi	r3, [r0, #0]
 80111ea:	700a      	strbls	r2, [r1, #0]
 80111ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80111f0:	bf98      	it	ls
 80111f2:	2001      	movls	r0, #1
 80111f4:	4770      	bx	lr
 80111f6:	4608      	mov	r0, r1
 80111f8:	4770      	bx	lr
	...

080111fc <__assert_func>:
 80111fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111fe:	4614      	mov	r4, r2
 8011200:	461a      	mov	r2, r3
 8011202:	4b09      	ldr	r3, [pc, #36]	; (8011228 <__assert_func+0x2c>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	4605      	mov	r5, r0
 8011208:	68d8      	ldr	r0, [r3, #12]
 801120a:	b14c      	cbz	r4, 8011220 <__assert_func+0x24>
 801120c:	4b07      	ldr	r3, [pc, #28]	; (801122c <__assert_func+0x30>)
 801120e:	9100      	str	r1, [sp, #0]
 8011210:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011214:	4906      	ldr	r1, [pc, #24]	; (8011230 <__assert_func+0x34>)
 8011216:	462b      	mov	r3, r5
 8011218:	f000 f80e 	bl	8011238 <fiprintf>
 801121c:	f000 f880 	bl	8011320 <abort>
 8011220:	4b04      	ldr	r3, [pc, #16]	; (8011234 <__assert_func+0x38>)
 8011222:	461c      	mov	r4, r3
 8011224:	e7f3      	b.n	801120e <__assert_func+0x12>
 8011226:	bf00      	nop
 8011228:	20000024 	.word	0x20000024
 801122c:	08011b1d 	.word	0x08011b1d
 8011230:	08011b2a 	.word	0x08011b2a
 8011234:	08011b58 	.word	0x08011b58

08011238 <fiprintf>:
 8011238:	b40e      	push	{r1, r2, r3}
 801123a:	b503      	push	{r0, r1, lr}
 801123c:	4601      	mov	r1, r0
 801123e:	ab03      	add	r3, sp, #12
 8011240:	4805      	ldr	r0, [pc, #20]	; (8011258 <fiprintf+0x20>)
 8011242:	f853 2b04 	ldr.w	r2, [r3], #4
 8011246:	6800      	ldr	r0, [r0, #0]
 8011248:	9301      	str	r3, [sp, #4]
 801124a:	f7ff fe7f 	bl	8010f4c <_vfiprintf_r>
 801124e:	b002      	add	sp, #8
 8011250:	f85d eb04 	ldr.w	lr, [sp], #4
 8011254:	b003      	add	sp, #12
 8011256:	4770      	bx	lr
 8011258:	20000024 	.word	0x20000024

0801125c <_fstat_r>:
 801125c:	b538      	push	{r3, r4, r5, lr}
 801125e:	4d07      	ldr	r5, [pc, #28]	; (801127c <_fstat_r+0x20>)
 8011260:	2300      	movs	r3, #0
 8011262:	4604      	mov	r4, r0
 8011264:	4608      	mov	r0, r1
 8011266:	4611      	mov	r1, r2
 8011268:	602b      	str	r3, [r5, #0]
 801126a:	f7f2 fc6e 	bl	8003b4a <_fstat>
 801126e:	1c43      	adds	r3, r0, #1
 8011270:	d102      	bne.n	8011278 <_fstat_r+0x1c>
 8011272:	682b      	ldr	r3, [r5, #0]
 8011274:	b103      	cbz	r3, 8011278 <_fstat_r+0x1c>
 8011276:	6023      	str	r3, [r4, #0]
 8011278:	bd38      	pop	{r3, r4, r5, pc}
 801127a:	bf00      	nop
 801127c:	20001794 	.word	0x20001794

08011280 <_isatty_r>:
 8011280:	b538      	push	{r3, r4, r5, lr}
 8011282:	4d06      	ldr	r5, [pc, #24]	; (801129c <_isatty_r+0x1c>)
 8011284:	2300      	movs	r3, #0
 8011286:	4604      	mov	r4, r0
 8011288:	4608      	mov	r0, r1
 801128a:	602b      	str	r3, [r5, #0]
 801128c:	f7f2 fc6d 	bl	8003b6a <_isatty>
 8011290:	1c43      	adds	r3, r0, #1
 8011292:	d102      	bne.n	801129a <_isatty_r+0x1a>
 8011294:	682b      	ldr	r3, [r5, #0]
 8011296:	b103      	cbz	r3, 801129a <_isatty_r+0x1a>
 8011298:	6023      	str	r3, [r4, #0]
 801129a:	bd38      	pop	{r3, r4, r5, pc}
 801129c:	20001794 	.word	0x20001794

080112a0 <memmove>:
 80112a0:	4288      	cmp	r0, r1
 80112a2:	b510      	push	{r4, lr}
 80112a4:	eb01 0402 	add.w	r4, r1, r2
 80112a8:	d902      	bls.n	80112b0 <memmove+0x10>
 80112aa:	4284      	cmp	r4, r0
 80112ac:	4623      	mov	r3, r4
 80112ae:	d807      	bhi.n	80112c0 <memmove+0x20>
 80112b0:	1e43      	subs	r3, r0, #1
 80112b2:	42a1      	cmp	r1, r4
 80112b4:	d008      	beq.n	80112c8 <memmove+0x28>
 80112b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80112ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80112be:	e7f8      	b.n	80112b2 <memmove+0x12>
 80112c0:	4402      	add	r2, r0
 80112c2:	4601      	mov	r1, r0
 80112c4:	428a      	cmp	r2, r1
 80112c6:	d100      	bne.n	80112ca <memmove+0x2a>
 80112c8:	bd10      	pop	{r4, pc}
 80112ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80112ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80112d2:	e7f7      	b.n	80112c4 <memmove+0x24>

080112d4 <_realloc_r>:
 80112d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112d6:	4607      	mov	r7, r0
 80112d8:	4614      	mov	r4, r2
 80112da:	460e      	mov	r6, r1
 80112dc:	b921      	cbnz	r1, 80112e8 <_realloc_r+0x14>
 80112de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80112e2:	4611      	mov	r1, r2
 80112e4:	f7fb bc68 	b.w	800cbb8 <_malloc_r>
 80112e8:	b922      	cbnz	r2, 80112f4 <_realloc_r+0x20>
 80112ea:	f7fb fc15 	bl	800cb18 <_free_r>
 80112ee:	4625      	mov	r5, r4
 80112f0:	4628      	mov	r0, r5
 80112f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112f4:	f000 f81b 	bl	801132e <_malloc_usable_size_r>
 80112f8:	42a0      	cmp	r0, r4
 80112fa:	d20f      	bcs.n	801131c <_realloc_r+0x48>
 80112fc:	4621      	mov	r1, r4
 80112fe:	4638      	mov	r0, r7
 8011300:	f7fb fc5a 	bl	800cbb8 <_malloc_r>
 8011304:	4605      	mov	r5, r0
 8011306:	2800      	cmp	r0, #0
 8011308:	d0f2      	beq.n	80112f0 <_realloc_r+0x1c>
 801130a:	4631      	mov	r1, r6
 801130c:	4622      	mov	r2, r4
 801130e:	f7fb fbed 	bl	800caec <memcpy>
 8011312:	4631      	mov	r1, r6
 8011314:	4638      	mov	r0, r7
 8011316:	f7fb fbff 	bl	800cb18 <_free_r>
 801131a:	e7e9      	b.n	80112f0 <_realloc_r+0x1c>
 801131c:	4635      	mov	r5, r6
 801131e:	e7e7      	b.n	80112f0 <_realloc_r+0x1c>

08011320 <abort>:
 8011320:	b508      	push	{r3, lr}
 8011322:	2006      	movs	r0, #6
 8011324:	f000 f834 	bl	8011390 <raise>
 8011328:	2001      	movs	r0, #1
 801132a:	f7f2 fbbf 	bl	8003aac <_exit>

0801132e <_malloc_usable_size_r>:
 801132e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011332:	1f18      	subs	r0, r3, #4
 8011334:	2b00      	cmp	r3, #0
 8011336:	bfbc      	itt	lt
 8011338:	580b      	ldrlt	r3, [r1, r0]
 801133a:	18c0      	addlt	r0, r0, r3
 801133c:	4770      	bx	lr

0801133e <_raise_r>:
 801133e:	291f      	cmp	r1, #31
 8011340:	b538      	push	{r3, r4, r5, lr}
 8011342:	4604      	mov	r4, r0
 8011344:	460d      	mov	r5, r1
 8011346:	d904      	bls.n	8011352 <_raise_r+0x14>
 8011348:	2316      	movs	r3, #22
 801134a:	6003      	str	r3, [r0, #0]
 801134c:	f04f 30ff 	mov.w	r0, #4294967295
 8011350:	bd38      	pop	{r3, r4, r5, pc}
 8011352:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011354:	b112      	cbz	r2, 801135c <_raise_r+0x1e>
 8011356:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801135a:	b94b      	cbnz	r3, 8011370 <_raise_r+0x32>
 801135c:	4620      	mov	r0, r4
 801135e:	f000 f831 	bl	80113c4 <_getpid_r>
 8011362:	462a      	mov	r2, r5
 8011364:	4601      	mov	r1, r0
 8011366:	4620      	mov	r0, r4
 8011368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801136c:	f000 b818 	b.w	80113a0 <_kill_r>
 8011370:	2b01      	cmp	r3, #1
 8011372:	d00a      	beq.n	801138a <_raise_r+0x4c>
 8011374:	1c59      	adds	r1, r3, #1
 8011376:	d103      	bne.n	8011380 <_raise_r+0x42>
 8011378:	2316      	movs	r3, #22
 801137a:	6003      	str	r3, [r0, #0]
 801137c:	2001      	movs	r0, #1
 801137e:	e7e7      	b.n	8011350 <_raise_r+0x12>
 8011380:	2400      	movs	r4, #0
 8011382:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011386:	4628      	mov	r0, r5
 8011388:	4798      	blx	r3
 801138a:	2000      	movs	r0, #0
 801138c:	e7e0      	b.n	8011350 <_raise_r+0x12>
	...

08011390 <raise>:
 8011390:	4b02      	ldr	r3, [pc, #8]	; (801139c <raise+0xc>)
 8011392:	4601      	mov	r1, r0
 8011394:	6818      	ldr	r0, [r3, #0]
 8011396:	f7ff bfd2 	b.w	801133e <_raise_r>
 801139a:	bf00      	nop
 801139c:	20000024 	.word	0x20000024

080113a0 <_kill_r>:
 80113a0:	b538      	push	{r3, r4, r5, lr}
 80113a2:	4d07      	ldr	r5, [pc, #28]	; (80113c0 <_kill_r+0x20>)
 80113a4:	2300      	movs	r3, #0
 80113a6:	4604      	mov	r4, r0
 80113a8:	4608      	mov	r0, r1
 80113aa:	4611      	mov	r1, r2
 80113ac:	602b      	str	r3, [r5, #0]
 80113ae:	f7f2 fb6d 	bl	8003a8c <_kill>
 80113b2:	1c43      	adds	r3, r0, #1
 80113b4:	d102      	bne.n	80113bc <_kill_r+0x1c>
 80113b6:	682b      	ldr	r3, [r5, #0]
 80113b8:	b103      	cbz	r3, 80113bc <_kill_r+0x1c>
 80113ba:	6023      	str	r3, [r4, #0]
 80113bc:	bd38      	pop	{r3, r4, r5, pc}
 80113be:	bf00      	nop
 80113c0:	20001794 	.word	0x20001794

080113c4 <_getpid_r>:
 80113c4:	f7f2 bb5a 	b.w	8003a7c <_getpid>

080113c8 <_init>:
 80113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ca:	bf00      	nop
 80113cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113ce:	bc08      	pop	{r3}
 80113d0:	469e      	mov	lr, r3
 80113d2:	4770      	bx	lr

080113d4 <_fini>:
 80113d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113d6:	bf00      	nop
 80113d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113da:	bc08      	pop	{r3}
 80113dc:	469e      	mov	lr, r3
 80113de:	4770      	bx	lr
