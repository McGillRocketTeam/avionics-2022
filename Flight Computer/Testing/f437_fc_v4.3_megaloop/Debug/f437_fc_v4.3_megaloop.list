
f437_fc_v4.3_megaloop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011380  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f9c  08011530  08011530  00021530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124cc  080124cc  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  080124cc  080124cc  000224cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124d4  080124d4  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124d4  080124d4  000224d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124d8  080124d8  000224d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  080124dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00001898  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001a90  20001a90  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003309f  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bc5  00000000  00000000  000632c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002348  00000000  00000000  00067e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021b0  00000000  00000000  0006a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029947  00000000  00000000  0006c388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002416b  00000000  00000000  00095ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f45eb  00000000  00000000  000b9e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ae425  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ad6c  00000000  00000000  001ae478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011518 	.word	0x08011518

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	08011518 	.word	0x08011518

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001014:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <lsm6dsl_init+0xc8>)
 8001016:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001018:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <lsm6dsl_init+0xcc>)
 800101a:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <lsm6dsl_init+0xd0>)
 800101e:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 fa13 	bl	800144c <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	492d      	ldr	r1, [pc, #180]	; (80010e0 <lsm6dsl_init+0xd4>)
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fd71 	bl	8001b14 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001032:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <lsm6dsl_init+0xd4>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b6a      	cmp	r3, #106	; 0x6a
 8001038:	d005      	beq.n	8001046 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2102      	movs	r1, #2
 800103e:	4829      	ldr	r0, [pc, #164]	; (80010e4 <lsm6dsl_init+0xd8>)
 8001040:	f004 f860 	bl	8005104 <HAL_GPIO_WritePin>
		__BKPT();
 8001044:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	2101      	movs	r1, #1
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fd72 	bl	8001b36 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4924      	ldr	r1, [pc, #144]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fd92 	bl	8001b82 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <lsm6dsl_init+0xdc>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f5      	bne.n	8001052 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2101      	movs	r1, #1
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fc63 	bl	8001938 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2104      	movs	r1, #4
 8001078:	4618      	mov	r0, r3
 800107a:	f000 fbeb 	bl	8001854 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2104      	movs	r1, #4
 8001084:	4618      	mov	r0, r3
 8001086:	f000 fc31 	bl	80018ec <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	2103      	movs	r1, #3
 8001090:	4618      	mov	r0, r3
 8001092:	f000 fbb9 	bl	8001808 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2106      	movs	r1, #6
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fbff 	bl	80018a0 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	2111      	movs	r1, #17
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fd83 	bl	8001bb4 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	21a8      	movs	r1, #168	; 0xa8
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fdb4 	bl	8001c22 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	461c      	mov	r4, r3
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	371c      	adds	r7, #28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	08001365 	.word	0x08001365
 80010d8:	0800139f 	.word	0x0800139f
 80010dc:	20000800 	.word	0x20000800
 80010e0:	20000224 	.word	0x20000224
 80010e4:	40020800 	.word	0x40020800
 80010e8:	20000225 	.word	0x20000225

080010ec <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	1d3c      	adds	r4, r7, #4
 80010f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010f8:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 80010fa:	f107 0217 	add.w	r2, r7, #23
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4611      	mov	r1, r2
 8001102:	4618      	mov	r0, r3
 8001104:	f000 fc3e 	bl	8001984 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d02d      	beq.n	800116a <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800110e:	2206      	movs	r2, #6
 8001110:	2100      	movs	r1, #0
 8001112:	4818      	ldr	r0, [pc, #96]	; (8001174 <get_acceleration+0x88>)
 8001114:	f00b fd12 	bl	800cb3c <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4916      	ldr	r1, [pc, #88]	; (8001174 <get_acceleration+0x88>)
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fcae 	bl	8001a7e <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <get_acceleration+0x88>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fb3d 	bl	80017a8 <lsm6dsl_from_fs8g_to_mg>
 800112e:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <get_acceleration+0x88>)
 800113a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001142:	4610      	mov	r0, r2
 8001144:	f000 fb30 	bl	80017a8 <lsm6dsl_from_fs8g_to_mg>
 8001148:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 800114c:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <get_acceleration+0x88>)
 8001152:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 800115c:	4610      	mov	r0, r2
 800115e:	f000 fb23 	bl	80017a8 <lsm6dsl_from_fs8g_to_mg>
 8001162:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001166:	edc4 7a00 	vstr	s15, [r4]
	}

}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}
 8001172:	bf00      	nop
 8001174:	20000214 	.word	0x20000214

08001178 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	1d3c      	adds	r4, r7, #4
 8001180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001184:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001186:	f107 0217 	add.w	r2, r7, #23
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fc11 	bl	80019b6 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d02d      	beq.n	80011f6 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 800119a:	2206      	movs	r2, #6
 800119c:	2100      	movs	r1, #0
 800119e:	4818      	ldr	r0, [pc, #96]	; (8001200 <get_angvelocity+0x88>)
 80011a0:	f00b fccc 	bl	800cb3c <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4916      	ldr	r1, [pc, #88]	; (8001200 <get_angvelocity+0x88>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 fc1d 	bl	80019e8 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <get_angvelocity+0x88>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fb0f 	bl	80017d8 <lsm6dsl_from_fs2000dps_to_mdps>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <get_angvelocity+0x88>)
 80011c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 80011ce:	4610      	mov	r0, r2
 80011d0:	f000 fb02 	bl	80017d8 <lsm6dsl_from_fs2000dps_to_mdps>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 80011d8:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <get_angvelocity+0x88>)
 80011de:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 80011e8:	4610      	mov	r0, r2
 80011ea:	f000 faf5 	bl	80017d8 <lsm6dsl_from_fs2000dps_to_mdps>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 80011f2:	edc4 7a00 	vstr	s15, [r4]
	}
}
 80011f6:	bf00      	nop
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000021c 	.word	0x2000021c

08001204 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <lps22hh_init+0x94>)
 800120e:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <lps22hh_init+0x98>)
 8001212:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <lps22hh_init+0x9c>)
 8001216:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001218:	200a      	movs	r0, #10
 800121a:	f000 f917 	bl	800144c <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <lps22hh_init+0xa0>)
 8001220:	2200      	movs	r2, #0
 8001222:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	491e      	ldr	r1, [pc, #120]	; (80012a4 <lps22hh_init+0xa0>)
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fa3c 	bl	80016a8 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8001230:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <lps22hh_init+0xa0>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2bb3      	cmp	r3, #179	; 0xb3
 8001236:	d007      	beq.n	8001248 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2104      	movs	r1, #4
 800123c:	481a      	ldr	r0, [pc, #104]	; (80012a8 <lps22hh_init+0xa4>)
 800123e:	f003 ff61 	bl	8005104 <HAL_GPIO_WritePin>
		__BKPT();
 8001242:	be00      	bkpt	0x0000
		Error_Handler();
 8001244:	f001 fdf6 	bl	8002e34 <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fa3b 	bl	80016ca <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	4914      	ldr	r1, [pc, #80]	; (80012ac <lps22hh_init+0xa8>)
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fa5b 	bl	8001716 <lps22hh_reset_get>
	} while (rst_lps22hh);
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <lps22hh_init+0xa8>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f5      	bne.n	8001254 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2101      	movs	r1, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f95a 	bl	8001528 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_75_Hz_LOW_NOISE);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2115      	movs	r1, #21
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f97a 	bl	8001574 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	461c      	mov	r4, r3
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800128c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd90      	pop	{r4, r7, pc}
 8001298:	080013d9 	.word	0x080013d9
 800129c:	08001413 	.word	0x08001413
 80012a0:	20000800 	.word	0x20000800
 80012a4:	2000022c 	.word	0x2000022c
 80012a8:	40020800 	.word	0x40020800
 80012ac:	2000022d 	.word	0x2000022d

080012b0 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	1d3c      	adds	r4, r7, #4
 80012b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80012bc:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80012be:	f107 0214 	add.w	r2, r7, #20
 80012c2:	1d38      	adds	r0, r7, #4
 80012c4:	2301      	movs	r3, #1
 80012c6:	2127      	movs	r1, #39	; 0x27
 80012c8:	f000 f8cb 	bl	8001462 <lps22hh_read_reg>

	if (reg.status.p_da) {
 80012cc:	7d3b      	ldrb	r3, [r7, #20]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d011      	beq.n	80012fc <get_pressure+0x4c>
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <get_pressure+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	4908      	ldr	r1, [pc, #32]	; (8001304 <get_pressure+0x54>)
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f994 	bl	8001610 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <get_pressure+0x54>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f8e9 	bl	80014c4 <lps22hh_from_lsb_to_hpa>
 80012f2:	eef0 7a40 	vmov.f32	s15, s0
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80012fc:	bf00      	nop
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd90      	pop	{r4, r7, pc}
 8001304:	20000228 	.word	0x20000228

08001308 <get_temperature>:

void get_temperature(stmdev_ctx_t dev_ctx_lps22hh, float *temperature){
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	1d3c      	adds	r4, r7, #4
 8001310:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001314:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8001316:	f107 0214 	add.w	r2, r7, #20
 800131a:	1d38      	adds	r0, r7, #4
 800131c:	2301      	movs	r3, #1
 800131e:	2127      	movs	r1, #39	; 0x27
 8001320:	f000 f89f 	bl	8001462 <lps22hh_read_reg>

	if (reg.status.t_da) {
 8001324:	7d3b      	ldrb	r3, [r7, #20]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d012      	beq.n	8001356 <get_temperature+0x4e>
 8001330:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <get_temperature+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	801a      	strh	r2, [r3, #0]
	  memset(&data_raw_temperature, 0x00, sizeof(int16_t));
	  lps22hh_temperature_raw_get(&dev_ctx_lps22hh, &data_raw_temperature);
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4909      	ldr	r1, [pc, #36]	; (8001360 <get_temperature+0x58>)
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f991 	bl	8001662 <lps22hh_temperature_raw_get>
	  *temperature = lps22hh_from_lsb_to_celsius(data_raw_temperature);
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <get_temperature+0x58>)
 8001342:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f8d4 	bl	80014f4 <lps22hh_from_lsb_to_celsius>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001356:	bf00      	nop
 8001358:	371c      	adds	r7, #28
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	bf00      	nop
 8001360:	20000222 	.word	0x20000222

08001364 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af04      	add	r7, sp, #16
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	461a      	mov	r2, r3
 8001370:	460b      	mov	r3, r1
 8001372:	72fb      	strb	r3, [r7, #11]
 8001374:	4613      	mov	r3, r2
 8001376:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 8001378:	7afb      	ldrb	r3, [r7, #11]
 800137a:	b29a      	uxth	r2, r3
 800137c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	893b      	ldrh	r3, [r7, #8]
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	21d5      	movs	r1, #213	; 0xd5
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f004 f83a 	bl	8005408 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b088      	sub	sp, #32
 80013a2:	af04      	add	r7, sp, #16
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	461a      	mov	r2, r3
 80013aa:	460b      	mov	r3, r1
 80013ac:	72fb      	strb	r3, [r7, #11]
 80013ae:	4613      	mov	r3, r2
 80013b0:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 80013b2:	7afb      	ldrb	r3, [r7, #11]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	9302      	str	r3, [sp, #8]
 80013bc:	893b      	ldrh	r3, [r7, #8]
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2301      	movs	r3, #1
 80013c6:	21d5      	movs	r1, #213	; 0xd5
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f004 f917 	bl	80055fc <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af04      	add	r7, sp, #16
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	461a      	mov	r2, r3
 80013e4:	460b      	mov	r3, r1
 80013e6:	72fb      	strb	r3, [r7, #11]
 80013e8:	4613      	mov	r3, r2
 80013ea:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 80013ec:	7afb      	ldrb	r3, [r7, #11]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	893b      	ldrh	r3, [r7, #8]
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	21b9      	movs	r1, #185	; 0xb9
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	f004 f800 	bl	8005408 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b088      	sub	sp, #32
 8001416:	af04      	add	r7, sp, #16
 8001418:	60f8      	str	r0, [r7, #12]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	461a      	mov	r2, r3
 800141e:	460b      	mov	r3, r1
 8001420:	72fb      	strb	r3, [r7, #11]
 8001422:	4613      	mov	r3, r2
 8001424:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	b29a      	uxth	r2, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	9302      	str	r3, [sp, #8]
 8001430:	893b      	ldrh	r3, [r7, #8]
 8001432:	9301      	str	r3, [sp, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2301      	movs	r3, #1
 800143a:	21b9      	movs	r1, #185	; 0xb9
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f004 f8dd 	bl	80055fc <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f003 f8e9 	bl	800462c <HAL_Delay>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001462:	b590      	push	{r4, r7, lr}
 8001464:	b087      	sub	sp, #28
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	461a      	mov	r2, r3
 800146e:	460b      	mov	r3, r1
 8001470:	72fb      	strb	r3, [r7, #11]
 8001472:	4613      	mov	r3, r2
 8001474:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	685c      	ldr	r4, [r3, #4]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6898      	ldr	r0, [r3, #8]
 800147e:	893b      	ldrh	r3, [r7, #8]
 8001480:	7af9      	ldrb	r1, [r7, #11]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	47a0      	blx	r4
 8001486:	6178      	str	r0, [r7, #20]

  return ret;
 8001488:	697b      	ldr	r3, [r7, #20]
}
 800148a:	4618      	mov	r0, r3
 800148c:	371c      	adds	r7, #28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}

08001492 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001492:	b590      	push	{r4, r7, lr}
 8001494:	b087      	sub	sp, #28
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	607a      	str	r2, [r7, #4]
 800149c:	461a      	mov	r2, r3
 800149e:	460b      	mov	r3, r1
 80014a0:	72fb      	strb	r3, [r7, #11]
 80014a2:	4613      	mov	r3, r2
 80014a4:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681c      	ldr	r4, [r3, #0]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6898      	ldr	r0, [r3, #8]
 80014ae:	893b      	ldrh	r3, [r7, #8]
 80014b0:	7af9      	ldrb	r1, [r7, #11]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	47a0      	blx	r4
 80014b6:	6178      	str	r0, [r7, #20]

  return ret;
 80014b8:	697b      	ldr	r3, [r7, #20]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd90      	pop	{r4, r7, pc}
	...

080014c4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ee07 3a90 	vmov	s15, r3
 80014d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80014f0 <lps22hh_from_lsb_to_hpa+0x2c>
 80014da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014de:	eef0 7a66 	vmov.f32	s15, s13
}
 80014e2:	eeb0 0a67 	vmov.f32	s0, s15
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	49800000 	.word	0x49800000

080014f4 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  return ((float_t) lsb / 100.0f);
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001524 <lps22hh_from_lsb_to_celsius+0x30>
 800150e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001512:	eef0 7a66 	vmov.f32	s15, s13
}
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	42c80000 	.word	0x42c80000

08001528 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8001534:	f107 0208 	add.w	r2, r7, #8
 8001538:	2301      	movs	r3, #1
 800153a:	2110      	movs	r1, #16
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff90 	bl	8001462 <lps22hh_read_reg>
 8001542:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	b2da      	uxtb	r2, r3
 8001552:	7a3b      	ldrb	r3, [r7, #8]
 8001554:	f362 0341 	bfi	r3, r2, #1, #1
 8001558:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800155a:	f107 0208 	add.w	r2, r7, #8
 800155e:	2301      	movs	r3, #1
 8001560:	2110      	movs	r1, #16
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff95 	bl	8001492 <lps22hh_write_reg>
 8001568:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8001580:	f107 0210 	add.w	r2, r7, #16
 8001584:	2301      	movs	r3, #1
 8001586:	2110      	movs	r1, #16
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff6a 	bl	8001462 <lps22hh_read_reg>
 800158e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8001596:	f107 020c 	add.w	r2, r7, #12
 800159a:	2301      	movs	r3, #1
 800159c:	2111      	movs	r1, #17
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ff5f 	bl	8001462 <lps22hh_read_reg>
 80015a4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10f      	bne.n	80015cc <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80015ac:	78fb      	ldrb	r3, [r7, #3]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	7c3b      	ldrb	r3, [r7, #16]
 80015b6:	f362 1306 	bfi	r3, r2, #4, #3
 80015ba:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80015bc:	f107 0210 	add.w	r2, r7, #16
 80015c0:	2301      	movs	r3, #1
 80015c2:	2110      	movs	r1, #16
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff64 	bl	8001492 <lps22hh_write_reg>
 80015ca:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d119      	bne.n	8001606 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80015d2:	78fb      	ldrb	r3, [r7, #3]
 80015d4:	091b      	lsrs	r3, r3, #4
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	7b3b      	ldrb	r3, [r7, #12]
 80015de:	f362 0341 	bfi	r3, r2, #1, #1
 80015e2:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	7b3b      	ldrb	r3, [r7, #12]
 80015f0:	f362 0300 	bfi	r3, r2, #0, #1
 80015f4:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80015f6:	f107 020c 	add.w	r2, r7, #12
 80015fa:	2301      	movs	r3, #1
 80015fc:	2111      	movs	r1, #17
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff47 	bl	8001492 <lps22hh_write_reg>
 8001604:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8001606:	697b      	ldr	r3, [r7, #20]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800161a:	f107 0208 	add.w	r2, r7, #8
 800161e:	2303      	movs	r3, #3
 8001620:	2128      	movs	r1, #40	; 0x28
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff1d 	bl	8001462 <lps22hh_read_reg>
 8001628:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800162a:	7abb      	ldrb	r3, [r7, #10]
 800162c:	461a      	mov	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	7a7a      	ldrb	r2, [r7, #9]
 800163a:	441a      	add	r2, r3
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	7a3a      	ldrb	r2, [r7, #8]
 8001648:	441a      	add	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	021a      	lsls	r2, r3, #8
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	601a      	str	r2, [r3, #0]

  return ret;
 8001658:	68fb      	ldr	r3, [r7, #12]
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 800166c:	f107 0208 	add.w	r2, r7, #8
 8001670:	2302      	movs	r3, #2
 8001672:	212b      	movs	r1, #43	; 0x2b
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fef4 	bl	8001462 <lps22hh_read_reg>
 800167a:	60f8      	str	r0, [r7, #12]
  *buff = reg[1];
 800167c:	7a7b      	ldrb	r3, [r7, #9]
 800167e:	b21a      	sxth	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	b29b      	uxth	r3, r3
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	b29a      	uxth	r2, r3
 8001690:	7a3b      	ldrb	r3, [r7, #8]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4413      	add	r3, r2
 8001696:	b29b      	uxth	r3, r3
 8001698:	b21a      	sxth	r2, r3
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	801a      	strh	r2, [r3, #0]

  return ret;
 800169e:	68fb      	ldr	r3, [r7, #12]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80016b2:	2301      	movs	r3, #1
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	210f      	movs	r1, #15
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fed2 	bl	8001462 <lps22hh_read_reg>
 80016be:	60f8      	str	r0, [r7, #12]

  return ret;
 80016c0:	68fb      	ldr	r3, [r7, #12]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	460b      	mov	r3, r1
 80016d4:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80016d6:	f107 0208 	add.w	r2, r7, #8
 80016da:	2301      	movs	r3, #1
 80016dc:	2111      	movs	r1, #17
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff febf 	bl	8001462 <lps22hh_read_reg>
 80016e4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10f      	bne.n	800170c <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	7a3b      	ldrb	r3, [r7, #8]
 80016f6:	f362 0382 	bfi	r3, r2, #2, #1
 80016fa:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80016fc:	f107 0208 	add.w	r2, r7, #8
 8001700:	2301      	movs	r3, #1
 8001702:	2111      	movs	r1, #17
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff fec4 	bl	8001492 <lps22hh_write_reg>
 800170a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8001720:	f107 0208 	add.w	r2, r7, #8
 8001724:	2301      	movs	r3, #1
 8001726:	2111      	movs	r1, #17
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff fe9a 	bl	8001462 <lps22hh_read_reg>
 800172e:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 8001730:	7a3b      	ldrb	r3, [r7, #8]
 8001732:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	701a      	strb	r2, [r3, #0]

  return ret;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	461a      	mov	r2, r3
 8001754:	460b      	mov	r3, r1
 8001756:	72fb      	strb	r3, [r7, #11]
 8001758:	4613      	mov	r3, r2
 800175a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685c      	ldr	r4, [r3, #4]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6898      	ldr	r0, [r3, #8]
 8001764:	893b      	ldrh	r3, [r7, #8]
 8001766:	7af9      	ldrb	r1, [r7, #11]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	47a0      	blx	r4
 800176c:	6178      	str	r0, [r7, #20]

  return ret;
 800176e:	697b      	ldr	r3, [r7, #20]
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd90      	pop	{r4, r7, pc}

08001778 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b087      	sub	sp, #28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	461a      	mov	r2, r3
 8001784:	460b      	mov	r3, r1
 8001786:	72fb      	strb	r3, [r7, #11]
 8001788:	4613      	mov	r3, r2
 800178a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681c      	ldr	r4, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6898      	ldr	r0, [r3, #8]
 8001794:	893b      	ldrh	r3, [r7, #8]
 8001796:	7af9      	ldrb	r1, [r7, #11]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	47a0      	blx	r4
 800179c:	6178      	str	r0, [r7, #20]

  return ret;
 800179e:	697b      	ldr	r3, [r7, #20]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	371c      	adds	r7, #28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}

080017a8 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 80017b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017be:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80017d4 <lsm6dsl_from_fs8g_to_mg+0x2c>
 80017c2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	3e79db23 	.word	0x3e79db23

080017d8 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80017e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001804 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 80017f2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	428c0000 	.word	0x428c0000

08001808 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	460b      	mov	r3, r1
 8001812:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001814:	f107 0208 	add.w	r2, r7, #8
 8001818:	2301      	movs	r3, #1
 800181a:	2110      	movs	r1, #16
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff93 	bl	8001748 <lsm6dsl_read_reg>
 8001822:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10f      	bne.n	800184a <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	b2da      	uxtb	r2, r3
 8001832:	7a3b      	ldrb	r3, [r7, #8]
 8001834:	f362 0383 	bfi	r3, r2, #2, #2
 8001838:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800183a:	f107 0208 	add.w	r2, r7, #8
 800183e:	2301      	movs	r3, #1
 8001840:	2110      	movs	r1, #16
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff98 	bl	8001778 <lsm6dsl_write_reg>
 8001848:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001860:	f107 0208 	add.w	r2, r7, #8
 8001864:	2301      	movs	r3, #1
 8001866:	2110      	movs	r1, #16
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff6d 	bl	8001748 <lsm6dsl_read_reg>
 800186e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10f      	bne.n	8001896 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	b2da      	uxtb	r2, r3
 800187e:	7a3b      	ldrb	r3, [r7, #8]
 8001880:	f362 1307 	bfi	r3, r2, #4, #4
 8001884:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8001886:	f107 0208 	add.w	r2, r7, #8
 800188a:	2301      	movs	r3, #1
 800188c:	2110      	movs	r1, #16
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ff72 	bl	8001778 <lsm6dsl_write_reg>
 8001894:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3710      	adds	r7, #16
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80018ac:	f107 0208 	add.w	r2, r7, #8
 80018b0:	2301      	movs	r3, #1
 80018b2:	2111      	movs	r1, #17
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff47 	bl	8001748 <lsm6dsl_read_reg>
 80018ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10f      	bne.n	80018e2 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	7a3b      	ldrb	r3, [r7, #8]
 80018cc:	f362 0343 	bfi	r3, r2, #1, #3
 80018d0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80018d2:	f107 0208 	add.w	r2, r7, #8
 80018d6:	2301      	movs	r3, #1
 80018d8:	2111      	movs	r1, #17
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff4c 	bl	8001778 <lsm6dsl_write_reg>
 80018e0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80018f8:	f107 0208 	add.w	r2, r7, #8
 80018fc:	2301      	movs	r3, #1
 80018fe:	2111      	movs	r1, #17
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ff21 	bl	8001748 <lsm6dsl_read_reg>
 8001906:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10f      	bne.n	800192e <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	b2da      	uxtb	r2, r3
 8001916:	7a3b      	ldrb	r3, [r7, #8]
 8001918:	f362 1307 	bfi	r3, r2, #4, #4
 800191c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800191e:	f107 0208 	add.w	r2, r7, #8
 8001922:	2301      	movs	r3, #1
 8001924:	2111      	movs	r1, #17
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff26 	bl	8001778 <lsm6dsl_write_reg>
 800192c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800192e:	68fb      	ldr	r3, [r7, #12]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001944:	f107 0208 	add.w	r2, r7, #8
 8001948:	2301      	movs	r3, #1
 800194a:	2112      	movs	r1, #18
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fefb 	bl	8001748 <lsm6dsl_read_reg>
 8001952:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10f      	bne.n	800197a <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	b2da      	uxtb	r2, r3
 8001962:	7a3b      	ldrb	r3, [r7, #8]
 8001964:	f362 1386 	bfi	r3, r2, #6, #1
 8001968:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800196a:	f107 0208 	add.w	r2, r7, #8
 800196e:	2301      	movs	r3, #1
 8001970:	2112      	movs	r1, #18
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ff00 	bl	8001778 <lsm6dsl_write_reg>
 8001978:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 800198e:	f107 0208 	add.w	r2, r7, #8
 8001992:	2301      	movs	r3, #1
 8001994:	211e      	movs	r1, #30
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fed6 	bl	8001748 <lsm6dsl_read_reg>
 800199c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800199e:	7a3b      	ldrb	r3, [r7, #8]
 80019a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	461a      	mov	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	701a      	strb	r2, [r3, #0]

  return ret;
 80019ac:	68fb      	ldr	r3, [r7, #12]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 80019c0:	f107 0208 	add.w	r2, r7, #8
 80019c4:	2301      	movs	r3, #1
 80019c6:	211e      	movs	r1, #30
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff febd 	bl	8001748 <lsm6dsl_read_reg>
 80019ce:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80019d0:	7a3b      	ldrb	r3, [r7, #8]
 80019d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	701a      	strb	r2, [r3, #0]

  return ret;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3710      	adds	r7, #16
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80019f2:	f107 020c 	add.w	r2, r7, #12
 80019f6:	2306      	movs	r3, #6
 80019f8:	2122      	movs	r1, #34	; 0x22
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fea4 	bl	8001748 <lsm6dsl_read_reg>
 8001a00:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a02:	7b7b      	ldrb	r3, [r7, #13]
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	7b3b      	ldrb	r3, [r7, #12]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	3302      	adds	r3, #2
 8001a2a:	b212      	sxth	r2, r2
 8001a2c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3302      	adds	r3, #2
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	7bbb      	ldrb	r3, [r7, #14]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	3302      	adds	r3, #2
 8001a48:	b212      	sxth	r2, r2
 8001a4a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001a4c:	7c7a      	ldrb	r2, [r7, #17]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	3304      	adds	r3, #4
 8001a52:	b212      	sxth	r2, r2
 8001a54:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	7c3b      	ldrb	r3, [r7, #16]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	4413      	add	r3, r2
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	3304      	adds	r3, #4
 8001a70:	b212      	sxth	r2, r2
 8001a72:	801a      	strh	r2, [r3, #0]

  return ret;
 8001a74:	697b      	ldr	r3, [r7, #20]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b086      	sub	sp, #24
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	2306      	movs	r3, #6
 8001a8e:	2128      	movs	r1, #40	; 0x28
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff fe59 	bl	8001748 <lsm6dsl_read_reg>
 8001a96:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001a98:	7b7b      	ldrb	r3, [r7, #13]
 8001a9a:	b21a      	sxth	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	021b      	lsls	r3, r3, #8
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	7b3b      	ldrb	r3, [r7, #12]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	3302      	adds	r3, #2
 8001ac0:	b212      	sxth	r2, r2
 8001ac2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	021b      	lsls	r3, r3, #8
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	7bbb      	ldrb	r3, [r7, #14]
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	3302      	adds	r3, #2
 8001ade:	b212      	sxth	r2, r2
 8001ae0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001ae2:	7c7a      	ldrb	r2, [r7, #17]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	b212      	sxth	r2, r2
 8001aea:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	3304      	adds	r3, #4
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	7c3b      	ldrb	r3, [r7, #16]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	4413      	add	r3, r2
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	3304      	adds	r3, #4
 8001b06:	b212      	sxth	r2, r2
 8001b08:	801a      	strh	r2, [r3, #0]

  return ret;
 8001b0a:	697b      	ldr	r3, [r7, #20]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8001b1e:	2301      	movs	r3, #1
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	210f      	movs	r1, #15
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fe0f 	bl	8001748 <lsm6dsl_read_reg>
 8001b2a:	60f8      	str	r0, [r7, #12]

  return ret;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b42:	f107 0208 	add.w	r2, r7, #8
 8001b46:	2301      	movs	r3, #1
 8001b48:	2112      	movs	r1, #18
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fdfc 	bl	8001748 <lsm6dsl_read_reg>
 8001b50:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10f      	bne.n	8001b78 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	7a3b      	ldrb	r3, [r7, #8]
 8001b62:	f362 0300 	bfi	r3, r2, #0, #1
 8001b66:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b68:	f107 0208 	add.w	r2, r7, #8
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	2112      	movs	r1, #18
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fe01 	bl	8001778 <lsm6dsl_write_reg>
 8001b76:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b78:	68fb      	ldr	r3, [r7, #12]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b084      	sub	sp, #16
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001b8c:	f107 0208 	add.w	r2, r7, #8
 8001b90:	2301      	movs	r3, #1
 8001b92:	2112      	movs	r1, #18
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fdd7 	bl	8001748 <lsm6dsl_read_reg>
 8001b9a:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001b9c:	7a3b      	ldrb	r3, [r7, #8]
 8001b9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	701a      	strb	r2, [r3, #0]

  return ret;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001bc0:	f107 0208 	add.w	r2, r7, #8
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	2117      	movs	r1, #23
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fdbd 	bl	8001748 <lsm6dsl_read_reg>
 8001bce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d120      	bne.n	8001c18 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	7a3b      	ldrb	r3, [r7, #8]
 8001be2:	f362 03c3 	bfi	r3, r2, #3, #1
 8001be6:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	7a3b      	ldrb	r3, [r7, #8]
 8001bf2:	f362 1346 	bfi	r3, r2, #5, #2
 8001bf6:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001bf8:	7a3b      	ldrb	r3, [r7, #8]
 8001bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfe:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001c00:	7a3b      	ldrb	r3, [r7, #8]
 8001c02:	f36f 0382 	bfc	r3, #2, #1
 8001c06:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8001c08:	f107 0208 	add.w	r2, r7, #8
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	2117      	movs	r1, #23
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fdb1 	bl	8001778 <lsm6dsl_write_reg>
 8001c16:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c18:	68fb      	ldr	r3, [r7, #12]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001c2e:	f107 0208 	add.w	r2, r7, #8
 8001c32:	2301      	movs	r3, #1
 8001c34:	2116      	movs	r1, #22
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fd86 	bl	8001748 <lsm6dsl_read_reg>
 8001c3c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d157      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	7a3b      	ldrb	r3, [r7, #8]
 8001c50:	f362 1305 	bfi	r3, r2, #4, #2
 8001c54:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001c56:	78fb      	ldrb	r3, [r7, #3]
 8001c58:	09db      	lsrs	r3, r3, #7
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	7a3b      	ldrb	r3, [r7, #8]
 8001c64:	f362 1386 	bfi	r3, r2, #6, #1
 8001c68:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001c6a:	f107 0208 	add.w	r2, r7, #8
 8001c6e:	2301      	movs	r3, #1
 8001c70:	2116      	movs	r1, #22
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fd80 	bl	8001778 <lsm6dsl_write_reg>
 8001c78:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d139      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001c80:	f107 020c 	add.w	r2, r7, #12
 8001c84:	2301      	movs	r3, #1
 8001c86:	2115      	movs	r1, #21
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff fd5d 	bl	8001748 <lsm6dsl_read_reg>
 8001c8e:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d12e      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	f362 0301 	bfi	r3, r2, #0, #2
 8001ca4:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001ca6:	f107 020c 	add.w	r2, r7, #12
 8001caa:	2301      	movs	r3, #1
 8001cac:	2115      	movs	r1, #21
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fd62 	bl	8001778 <lsm6dsl_write_reg>
 8001cb4:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d11b      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 8001cbc:	f107 0210 	add.w	r2, r7, #16
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	2113      	movs	r1, #19
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fd3f 	bl	8001748 <lsm6dsl_read_reg>
 8001cca:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d110      	bne.n	8001cf4 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	7c3b      	ldrb	r3, [r7, #16]
 8001cde:	f362 0341 	bfi	r3, r2, #1, #1
 8001ce2:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8001ce4:	f107 0210 	add.w	r2, r7, #16
 8001ce8:	2301      	movs	r3, #1
 8001cea:	2113      	movs	r1, #19
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fd43 	bl	8001778 <lsm6dsl_write_reg>
 8001cf2:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001cf4:	697b      	ldr	r3, [r7, #20]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <tone>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// helper functions for buzzing
void tone(uint32_t duration, uint32_t repeats) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e010      	b.n	8001d32 <tone+0x32>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001d10:	2108      	movs	r1, #8
 8001d12:	480c      	ldr	r0, [pc, #48]	; (8001d44 <tone+0x44>)
 8001d14:	f006 f86e 	bl	8007df4 <HAL_TIM_PWM_Start>
		HAL_Delay(duration);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f002 fc87 	bl	800462c <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8001d1e:	2108      	movs	r1, #8
 8001d20:	4808      	ldr	r0, [pc, #32]	; (8001d44 <tone+0x44>)
 8001d22:	f006 f8a5 	bl	8007e70 <HAL_TIM_PWM_Stop>
		HAL_Delay(duration);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f002 fc80 	bl	800462c <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3ea      	bcc.n	8001d10 <tone+0x10>
	}
}
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000f70 	.word	0x20000f70

08001d48 <buzz_success>:
void buzz_success() { tone(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS); };
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	2103      	movs	r1, #3
 8001d4e:	2064      	movs	r0, #100	; 0x64
 8001d50:	f7ff ffd6 	bl	8001d00 <tone>
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <buzz_failure>:
void buzz_failure() { tone(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS); };
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d62:	f7ff ffcd 	bl	8001d00 <tone>
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d72:	f002 fbe9 	bl	8004548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d76:	f000 f90d 	bl	8001f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7a:	f000 fce3 	bl	8002744 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d7e:	f000 f991 	bl	80020a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d82:	f000 f9e1 	bl	8002148 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001d86:	f000 fa1f 	bl	80021c8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8001d8a:	f000 fa5d 	bl	8002248 <MX_I2C3_Init>
  MX_SPI2_Init();
 8001d8e:	f000 faf5 	bl	800237c <MX_SPI2_Init>
  MX_SPI4_Init();
 8001d92:	f000 fb29 	bl	80023e8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001d96:	f000 fb5d 	bl	8002454 <MX_SPI5_Init>
  MX_TIM2_Init();
 8001d9a:	f000 fb91 	bl	80024c0 <MX_TIM2_Init>
  MX_UART8_Init();
 8001d9e:	f000 fc53 	bl	8002648 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001da2:	f000 fc7b 	bl	800269c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001da6:	f000 fca3 	bl	80026f0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8001daa:	f007 fbdf 	bl	800956c <MX_FATFS_Init>
  MX_RTC_Init();
 8001dae:	f000 fa8b 	bl	80022c8 <MX_RTC_Init>
  MX_TIM4_Init();
 8001db2:	f000 fbfb 	bl	80025ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2102      	movs	r1, #2
 8001dba:	4867      	ldr	r0, [pc, #412]	; (8001f58 <main+0x1ec>)
 8001dbc:	f003 f9a2 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	4864      	ldr	r0, [pc, #400]	; (8001f58 <main+0x1ec>)
 8001dc6:	f003 f99d 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2108      	movs	r1, #8
 8001dce:	4862      	ldr	r0, [pc, #392]	; (8001f58 <main+0x1ec>)
 8001dd0:	f003 f998 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2108      	movs	r1, #8
 8001dd8:	4860      	ldr	r0, [pc, #384]	; (8001f5c <main+0x1f0>)
 8001dda:	f003 f993 	bl	8005104 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de4:	485e      	ldr	r0, [pc, #376]	; (8001f60 <main+0x1f4>)
 8001de6:	f003 f98d 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df0:	485b      	ldr	r0, [pc, #364]	; (8001f60 <main+0x1f4>)
 8001df2:	f003 f987 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dfc:	4858      	ldr	r0, [pc, #352]	; (8001f60 <main+0x1f4>)
 8001dfe:	f003 f981 	bl	8005104 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2102      	movs	r1, #2
 8001e06:	4856      	ldr	r0, [pc, #344]	; (8001f60 <main+0x1f4>)
 8001e08:	f003 f97c 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e12:	4854      	ldr	r0, [pc, #336]	; (8001f64 <main+0x1f8>)
 8001e14:	f003 f976 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e1e:	4851      	ldr	r0, [pc, #324]	; (8001f64 <main+0x1f8>)
 8001e20:	f003 f970 	bl	8005104 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2104      	movs	r1, #4
 8001e28:	484f      	ldr	r0, [pc, #316]	; (8001f68 <main+0x1fc>)
 8001e2a:	f003 f96b 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2180      	movs	r1, #128	; 0x80
 8001e32:	484d      	ldr	r0, [pc, #308]	; (8001f68 <main+0x1fc>)
 8001e34:	f003 f966 	bl	8005104 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3e:	484a      	ldr	r0, [pc, #296]	; (8001f68 <main+0x1fc>)
 8001e40:	f003 f960 	bl	8005104 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high (SPI idle CS is high)
  HAL_GPIO_WritePin(TH_CS_GPIO_Port, TH_CS_Pin, SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4a:	4847      	ldr	r0, [pc, #284]	; (8001f68 <main+0x1fc>)
 8001e4c:	f003 f95a 	bl	8005104 <HAL_GPIO_WritePin>

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e56:	4842      	ldr	r0, [pc, #264]	; (8001f60 <main+0x1f4>)
 8001e58:	f003 f954 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	4842      	ldr	r0, [pc, #264]	; (8001f6c <main+0x200>)
 8001e62:	f003 f94f 	bl	8005104 <HAL_GPIO_WritePin>

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2140      	movs	r1, #64	; 0x40
 8001e6a:	4840      	ldr	r0, [pc, #256]	; (8001f6c <main+0x200>)
 8001e6c:	f003 f94a 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	2120      	movs	r1, #32
 8001e74:	483d      	ldr	r0, [pc, #244]	; (8001f6c <main+0x200>)
 8001e76:	f003 f945 	bl	8005104 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	2110      	movs	r1, #16
 8001e7e:	483b      	ldr	r0, [pc, #236]	; (8001f6c <main+0x200>)
 8001e80:	f003 f940 	bl	8005104 <HAL_GPIO_WritePin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
  Tx_setup();
#endif

  // init i2c sensors and data storage
  dev_ctx_lsm = lsm6dsl_init();
 8001e84:	4c3a      	ldr	r4, [pc, #232]	; (8001f70 <main+0x204>)
 8001e86:	463b      	mov	r3, r7
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f8bf 	bl	800100c <lsm6dsl_init>
 8001e8e:	463b      	mov	r3, r7
 8001e90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8001e98:	f7ff ff56 	bl	8001d48 <buzz_success>
  HAL_Delay(500);
 8001e9c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ea0:	f002 fbc4 	bl	800462c <HAL_Delay>

  dev_ctx_lps = lps22hh_init();
 8001ea4:	4c33      	ldr	r4, [pc, #204]	; (8001f74 <main+0x208>)
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f9ab 	bl	8001204 <lps22hh_init>
 8001eae:	463b      	mov	r3, r7
 8001eb0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8001eb8:	f7ff ff46 	bl	8001d48 <buzz_success>
  HAL_Delay(500);
 8001ebc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ec0:	f002 fbb4 	bl	800462c <HAL_Delay>

  if (!W25qxx_Init()) Error_Handler(); // init FLASH
 8001ec4:	f001 ff56 	bl	8003d74 <W25qxx_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f083 0301 	eor.w	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <main+0x16c>
 8001ed4:	f000 ffae 	bl	8002e34 <Error_Handler>
  buzz_success();
 8001ed8:	f7ff ff36 	bl	8001d48 <buzz_success>

  // init sd card with dynamic filename
  fres = sd_init_dynamic_filename("FC", sd_file_header, filename);
 8001edc:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <main+0x20c>)
 8001ede:	4927      	ldr	r1, [pc, #156]	; (8001f7c <main+0x210>)
 8001ee0:	4827      	ldr	r0, [pc, #156]	; (8001f80 <main+0x214>)
 8001ee2:	f000 ffc7 	bl	8002e74 <sd_init_dynamic_filename>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <main+0x218>)
 8001eec:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8001eee:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <main+0x218>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <main+0x18e>
  		Error_Handler();
 8001ef6:	f000 ff9d 	bl	8002e34 <Error_Handler>
  }

  int save_flash = save_flash_to_sd(); // check if flash empty and write to sd card if not
 8001efa:	f000 fea9 	bl	8002c50 <save_flash_to_sd>
 8001efe:	6178      	str	r0, [r7, #20]
  if (save_flash) {
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <main+0x19e>
	  buzz_failure();
 8001f06:	f7ff ff27 	bl	8001d58 <buzz_failure>
  }

  // open sd card file for simultaneous logging
  fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001f0a:	221a      	movs	r2, #26
 8001f0c:	491a      	ldr	r1, [pc, #104]	; (8001f78 <main+0x20c>)
 8001f0e:	481e      	ldr	r0, [pc, #120]	; (8001f88 <main+0x21c>)
 8001f10:	f009 febe 	bl	800bc90 <f_open>
 8001f14:	4603      	mov	r3, r0
 8001f16:	461a      	mov	r2, r3
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <main+0x218>)
 8001f1a:	701a      	strb	r2, [r3, #0]

  if (fres != FR_OK) {
 8001f1c:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <main+0x218>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <main+0x1ce>
	  myprintf("f_open error (%i)\r\n", fres);
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <main+0x218>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4818      	ldr	r0, [pc, #96]	; (8001f8c <main+0x220>)
 8001f2c:	f000 ff8a 	bl	8002e44 <myprintf>
	  buzz_failure();
 8001f30:	f7ff ff12 	bl	8001d58 <buzz_failure>
	  return fres; // TODO: determine what to do if cannot open file
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <main+0x218>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	e009      	b.n	8001f4e <main+0x1e2>
  }

  // set pointer to end of file to append
  f_lseek(&fil, f_size(&fil));
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <main+0x21c>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4811      	ldr	r0, [pc, #68]	; (8001f88 <main+0x21c>)
 8001f42:	f00a fa80 	bl	800c446 <f_lseek>

  // TODO: figure out where to add video recorder

  // init is done, can start timer 4 in interrupt mode for telemetry
  HAL_TIM_Base_Start_IT(&htim4);
 8001f46:	4812      	ldr	r0, [pc, #72]	; (8001f90 <main+0x224>)
 8001f48:	f005 fefb 	bl	8007d42 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <main+0x1e0>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd90      	pop	{r4, r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	40021800 	.word	0x40021800
 8001f64:	40021400 	.word	0x40021400
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40020c00 	.word	0x40020c00
 8001f70:	20000fb0 	.word	0x20000fb0
 8001f74:	20000fbc 	.word	0x20000fbc
 8001f78:	20000638 	.word	0x20000638
 8001f7c:	08011f2c 	.word	0x08011f2c
 8001f80:	08011530 	.word	0x08011530
 8001f84:	20000fc8 	.word	0x20000fc8
 8001f88:	20000fcc 	.word	0x20000fcc
 8001f8c:	08011534 	.word	0x08011534
 8001f90:	20000904 	.word	0x20000904

08001f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b0a0      	sub	sp, #128	; 0x80
 8001f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f9e:	2230      	movs	r2, #48	; 0x30
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00a fdca 	bl	800cb3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2230      	movs	r2, #48	; 0x30
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00a fdbb 	bl	800cb3c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <SystemClock_Config+0x108>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a33      	ldr	r2, [pc, #204]	; (800209c <SystemClock_Config+0x108>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <SystemClock_Config+0x108>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <SystemClock_Config+0x10c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <SystemClock_Config+0x10c>)
 8001fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <SystemClock_Config+0x10c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001ffe:	2309      	movs	r3, #9
 8002000:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002006:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002008:	2301      	movs	r3, #1
 800200a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200c:	2302      	movs	r3, #2
 800200e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002010:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002014:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002016:	2308      	movs	r3, #8
 8002018:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800201a:	23b4      	movs	r3, #180	; 0xb4
 800201c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800201e:	2302      	movs	r3, #2
 8002020:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002022:	2304      	movs	r3, #4
 8002024:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002026:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800202a:	4618      	mov	r0, r3
 800202c:	f004 f932 	bl	8006294 <HAL_RCC_OscConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002036:	f000 fefd 	bl	8002e34 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800203a:	f004 f8db 	bl	80061f4 <HAL_PWREx_EnableOverDrive>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002044:	f000 fef6 	bl	8002e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002048:	230f      	movs	r3, #15
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204c:	2302      	movs	r3, #2
 800204e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002050:	2300      	movs	r3, #0
 8002052:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002054:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002058:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800205a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800205e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002060:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002064:	2105      	movs	r1, #5
 8002066:	4618      	mov	r0, r3
 8002068:	f004 fb84 	bl	8006774 <HAL_RCC_ClockConfig>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002072:	f000 fedf 	bl	8002e34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002076:	2320      	movs	r3, #32
 8002078:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800207a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	4618      	mov	r0, r3
 8002086:	f004 fd6f 	bl	8006b68 <HAL_RCCEx_PeriphCLKConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8002090:	f000 fed0 	bl	8002e34 <Error_Handler>
  }
}
 8002094:	bf00      	nop
 8002096:	3780      	adds	r7, #128	; 0x80
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	40007000 	.word	0x40007000

080020a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020aa:	463b      	mov	r3, r7
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <MX_ADC1_Init+0x98>)
 80020b8:	4a21      	ldr	r2, [pc, #132]	; (8002140 <MX_ADC1_Init+0x9c>)
 80020ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <MX_ADC1_Init+0x98>)
 80020be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <MX_ADC1_Init+0x98>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <MX_ADC1_Init+0x98>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <MX_ADC1_Init+0x98>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020d6:	4b19      	ldr	r3, [pc, #100]	; (800213c <MX_ADC1_Init+0x98>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020de:	4b17      	ldr	r3, [pc, #92]	; (800213c <MX_ADC1_Init+0x98>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <MX_ADC1_Init+0x98>)
 80020e6:	4a17      	ldr	r2, [pc, #92]	; (8002144 <MX_ADC1_Init+0xa0>)
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <MX_ADC1_Init+0x98>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <MX_ADC1_Init+0x98>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <MX_ADC1_Init+0x98>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_ADC1_Init+0x98>)
 8002100:	2201      	movs	r2, #1
 8002102:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002104:	480d      	ldr	r0, [pc, #52]	; (800213c <MX_ADC1_Init+0x98>)
 8002106:	f002 fab5 	bl	8004674 <HAL_ADC_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002110:	f000 fe90 	bl	8002e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002114:	2306      	movs	r3, #6
 8002116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002118:	2301      	movs	r3, #1
 800211a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800211c:	2305      	movs	r3, #5
 800211e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002120:	463b      	mov	r3, r7
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <MX_ADC1_Init+0x98>)
 8002126:	f002 fae9 	bl	80046fc <HAL_ADC_ConfigChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002130:	f000 fe80 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000c5c 	.word	0x20000c5c
 8002140:	40012000 	.word	0x40012000
 8002144:	0f000001 	.word	0x0f000001

08002148 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <MX_I2C1_Init+0x74>)
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <MX_I2C1_Init+0x78>)
 8002150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002152:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <MX_I2C1_Init+0x74>)
 8002154:	4a1b      	ldr	r2, [pc, #108]	; (80021c4 <MX_I2C1_Init+0x7c>)
 8002156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <MX_I2C1_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_I2C1_Init+0x74>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <MX_I2C1_Init+0x74>)
 8002166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800216a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <MX_I2C1_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002172:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_I2C1_Init+0x74>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <MX_I2C1_Init+0x74>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800217e:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <MX_I2C1_Init+0x74>)
 8002180:	2200      	movs	r2, #0
 8002182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002184:	480d      	ldr	r0, [pc, #52]	; (80021bc <MX_I2C1_Init+0x74>)
 8002186:	f002 fffb 	bl	8005180 <HAL_I2C_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002190:	f000 fe50 	bl	8002e34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002194:	2100      	movs	r1, #0
 8002196:	4809      	ldr	r0, [pc, #36]	; (80021bc <MX_I2C1_Init+0x74>)
 8002198:	f003 ffb1 	bl	80060fe <HAL_I2CEx_ConfigAnalogFilter>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80021a2:	f000 fe47 	bl	8002e34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021a6:	2100      	movs	r1, #0
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <MX_I2C1_Init+0x74>)
 80021aa:	f003 ffe4 	bl	8006176 <HAL_I2CEx_ConfigDigitalFilter>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80021b4:	f000 fe3e 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000bb4 	.word	0x20000bb4
 80021c0:	40005400 	.word	0x40005400
 80021c4:	000186a0 	.word	0x000186a0

080021c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <MX_I2C2_Init+0x74>)
 80021ce:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <MX_I2C2_Init+0x78>)
 80021d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <MX_I2C2_Init+0x74>)
 80021d4:	4a1b      	ldr	r2, [pc, #108]	; (8002244 <MX_I2C2_Init+0x7c>)
 80021d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021d8:	4b18      	ldr	r3, [pc, #96]	; (800223c <MX_I2C2_Init+0x74>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <MX_I2C2_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <MX_I2C2_Init+0x74>)
 80021e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <MX_I2C2_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <MX_I2C2_Init+0x74>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <MX_I2C2_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021fe:	4b0f      	ldr	r3, [pc, #60]	; (800223c <MX_I2C2_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002204:	480d      	ldr	r0, [pc, #52]	; (800223c <MX_I2C2_Init+0x74>)
 8002206:	f002 ffbb 	bl	8005180 <HAL_I2C_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002210:	f000 fe10 	bl	8002e34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002214:	2100      	movs	r1, #0
 8002216:	4809      	ldr	r0, [pc, #36]	; (800223c <MX_I2C2_Init+0x74>)
 8002218:	f003 ff71 	bl	80060fe <HAL_I2CEx_ConfigAnalogFilter>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002222:	f000 fe07 	bl	8002e34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002226:	2100      	movs	r1, #0
 8002228:	4804      	ldr	r0, [pc, #16]	; (800223c <MX_I2C2_Init+0x74>)
 800222a:	f003 ffa4 	bl	8006176 <HAL_I2CEx_ConfigDigitalFilter>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002234:	f000 fdfe 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000c08 	.word	0x20000c08
 8002240:	40005800 	.word	0x40005800
 8002244:	000186a0 	.word	0x000186a0

08002248 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <MX_I2C3_Init+0x74>)
 800224e:	4a1c      	ldr	r2, [pc, #112]	; (80022c0 <MX_I2C3_Init+0x78>)
 8002250:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <MX_I2C3_Init+0x74>)
 8002254:	4a1b      	ldr	r2, [pc, #108]	; (80022c4 <MX_I2C3_Init+0x7c>)
 8002256:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <MX_I2C3_Init+0x74>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <MX_I2C3_Init+0x74>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002264:	4b15      	ldr	r3, [pc, #84]	; (80022bc <MX_I2C3_Init+0x74>)
 8002266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800226a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800226c:	4b13      	ldr	r3, [pc, #76]	; (80022bc <MX_I2C3_Init+0x74>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <MX_I2C3_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <MX_I2C3_Init+0x74>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800227e:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <MX_I2C3_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002284:	480d      	ldr	r0, [pc, #52]	; (80022bc <MX_I2C3_Init+0x74>)
 8002286:	f002 ff7b 	bl	8005180 <HAL_I2C_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002290:	f000 fdd0 	bl	8002e34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002294:	2100      	movs	r1, #0
 8002296:	4809      	ldr	r0, [pc, #36]	; (80022bc <MX_I2C3_Init+0x74>)
 8002298:	f003 ff31 	bl	80060fe <HAL_I2CEx_ConfigAnalogFilter>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80022a2:	f000 fdc7 	bl	8002e34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80022a6:	2100      	movs	r1, #0
 80022a8:	4804      	ldr	r0, [pc, #16]	; (80022bc <MX_I2C3_Init+0x74>)
 80022aa:	f003 ff64 	bl	8006176 <HAL_I2CEx_ConfigDigitalFilter>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80022b4:	f000 fdbe 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80022b8:	bf00      	nop
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000800 	.word	0x20000800
 80022c0:	40005c00 	.word	0x40005c00
 80022c4:	000186a0 	.word	0x000186a0

080022c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80022dc:	2300      	movs	r3, #0
 80022de:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <MX_RTC_Init+0xac>)
 80022e2:	4a25      	ldr	r2, [pc, #148]	; (8002378 <MX_RTC_Init+0xb0>)
 80022e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80022e6:	4b23      	ldr	r3, [pc, #140]	; (8002374 <MX_RTC_Init+0xac>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MX_RTC_Init+0xac>)
 80022ee:	227f      	movs	r2, #127	; 0x7f
 80022f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80022f2:	4b20      	ldr	r3, [pc, #128]	; (8002374 <MX_RTC_Init+0xac>)
 80022f4:	22ff      	movs	r2, #255	; 0xff
 80022f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <MX_RTC_Init+0xac>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <MX_RTC_Init+0xac>)
 8002300:	2200      	movs	r2, #0
 8002302:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <MX_RTC_Init+0xac>)
 8002306:	2200      	movs	r2, #0
 8002308:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800230a:	481a      	ldr	r0, [pc, #104]	; (8002374 <MX_RTC_Init+0xac>)
 800230c:	f004 fdea 	bl	8006ee4 <HAL_RTC_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002316:	f000 fd8d 	bl	8002e34 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800231a:	2300      	movs	r3, #0
 800231c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800231e:	2300      	movs	r3, #0
 8002320:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002322:	2300      	movs	r3, #0
 8002324:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002326:	2300      	movs	r3, #0
 8002328:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	2201      	movs	r2, #1
 8002332:	4619      	mov	r1, r3
 8002334:	480f      	ldr	r0, [pc, #60]	; (8002374 <MX_RTC_Init+0xac>)
 8002336:	f004 fe66 	bl	8007006 <HAL_RTC_SetTime>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002340:	f000 fd78 	bl	8002e34 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002344:	2301      	movs	r3, #1
 8002346:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002348:	2301      	movs	r3, #1
 800234a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800234c:	2301      	movs	r3, #1
 800234e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002350:	2300      	movs	r3, #0
 8002352:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002354:	463b      	mov	r3, r7
 8002356:	2201      	movs	r2, #1
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <MX_RTC_Init+0xac>)
 800235c:	f004 ff6e 	bl	800723c <HAL_RTC_SetDate>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002366:	f000 fd65 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000da4 	.word	0x20000da4
 8002378:	40002800 	.word	0x40002800

0800237c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002380:	4b17      	ldr	r3, [pc, #92]	; (80023e0 <MX_SPI2_Init+0x64>)
 8002382:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <MX_SPI2_Init+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002386:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <MX_SPI2_Init+0x64>)
 8002388:	f44f 7282 	mov.w	r2, #260	; 0x104
 800238c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800238e:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <MX_SPI2_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <MX_SPI2_Init+0x64>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <MX_SPI2_Init+0x64>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <MX_SPI2_Init+0x64>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <MX_SPI2_Init+0x64>)
 80023a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <MX_SPI2_Init+0x64>)
 80023b0:	2210      	movs	r2, #16
 80023b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <MX_SPI2_Init+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <MX_SPI2_Init+0x64>)
 80023bc:	2200      	movs	r2, #0
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <MX_SPI2_Init+0x64>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <MX_SPI2_Init+0x64>)
 80023c8:	220a      	movs	r2, #10
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023cc:	4804      	ldr	r0, [pc, #16]	; (80023e0 <MX_SPI2_Init+0x64>)
 80023ce:	f005 f86c 	bl	80074aa <HAL_SPI_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80023d8:	f000 fd2c 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000854 	.word	0x20000854
 80023e4:	40003800 	.word	0x40003800

080023e8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <MX_SPI4_Init+0x64>)
 80023ee:	4a18      	ldr	r2, [pc, #96]	; (8002450 <MX_SPI4_Init+0x68>)
 80023f0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <MX_SPI4_Init+0x64>)
 80023f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023f8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80023fa:	4b14      	ldr	r3, [pc, #80]	; (800244c <MX_SPI4_Init+0x64>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <MX_SPI4_Init+0x64>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <MX_SPI4_Init+0x64>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <MX_SPI4_Init+0x64>)
 800240e:	2200      	movs	r2, #0
 8002410:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_SPI4_Init+0x64>)
 8002414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002418:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_SPI4_Init+0x64>)
 800241c:	2228      	movs	r2, #40	; 0x28
 800241e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <MX_SPI4_Init+0x64>)
 8002422:	2200      	movs	r2, #0
 8002424:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_SPI4_Init+0x64>)
 8002428:	2200      	movs	r2, #0
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <MX_SPI4_Init+0x64>)
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8002432:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_SPI4_Init+0x64>)
 8002434:	220a      	movs	r2, #10
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002438:	4804      	ldr	r0, [pc, #16]	; (800244c <MX_SPI4_Init+0x64>)
 800243a:	f005 f836 	bl	80074aa <HAL_SPI_Init>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8002444:	f000 fcf6 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	200007a8 	.word	0x200007a8
 8002450:	40013400 	.word	0x40013400

08002454 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8002458:	4b17      	ldr	r3, [pc, #92]	; (80024b8 <MX_SPI5_Init+0x64>)
 800245a:	4a18      	ldr	r2, [pc, #96]	; (80024bc <MX_SPI5_Init+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800245e:	4b16      	ldr	r3, [pc, #88]	; (80024b8 <MX_SPI5_Init+0x64>)
 8002460:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002464:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_SPI5_Init+0x64>)
 8002468:	2200      	movs	r2, #0
 800246a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_SPI5_Init+0x64>)
 800246e:	2200      	movs	r2, #0
 8002470:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <MX_SPI5_Init+0x64>)
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <MX_SPI5_Init+0x64>)
 800247a:	2200      	movs	r2, #0
 800247c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_SPI5_Init+0x64>)
 8002480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002484:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002486:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <MX_SPI5_Init+0x64>)
 8002488:	2200      	movs	r2, #0
 800248a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <MX_SPI5_Init+0x64>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002492:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <MX_SPI5_Init+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002498:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <MX_SPI5_Init+0x64>)
 800249a:	2200      	movs	r2, #0
 800249c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <MX_SPI5_Init+0x64>)
 80024a0:	220a      	movs	r2, #10
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80024a4:	4804      	ldr	r0, [pc, #16]	; (80024b8 <MX_SPI5_Init+0x64>)
 80024a6:	f005 f800 	bl	80074aa <HAL_SPI_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80024b0:	f000 fcc0 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200008ac 	.word	0x200008ac
 80024bc:	40015000 	.word	0x40015000

080024c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08e      	sub	sp, #56	; 0x38
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d4:	f107 0320 	add.w	r3, r7, #32
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024de:	1d3b      	adds	r3, r7, #4
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
 80024ec:	615a      	str	r2, [r3, #20]
 80024ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f0:	4b2d      	ldr	r3, [pc, #180]	; (80025a8 <MX_TIM2_Init+0xe8>)
 80024f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80024f8:	4b2b      	ldr	r3, [pc, #172]	; (80025a8 <MX_TIM2_Init+0xe8>)
 80024fa:	2259      	movs	r2, #89	; 0x59
 80024fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fe:	4b2a      	ldr	r3, [pc, #168]	; (80025a8 <MX_TIM2_Init+0xe8>)
 8002500:	2200      	movs	r2, #0
 8002502:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <MX_TIM2_Init+0xe8>)
 8002506:	f240 128f 	movw	r2, #399	; 0x18f
 800250a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250c:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <MX_TIM2_Init+0xe8>)
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002512:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <MX_TIM2_Init+0xe8>)
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002518:	4823      	ldr	r0, [pc, #140]	; (80025a8 <MX_TIM2_Init+0xe8>)
 800251a:	f005 fbe7 	bl	8007cec <HAL_TIM_Base_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002524:	f000 fc86 	bl	8002e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800252e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002532:	4619      	mov	r1, r3
 8002534:	481c      	ldr	r0, [pc, #112]	; (80025a8 <MX_TIM2_Init+0xe8>)
 8002536:	f005 fec1 	bl	80082bc <HAL_TIM_ConfigClockSource>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8002540:	f000 fc78 	bl	8002e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002544:	4818      	ldr	r0, [pc, #96]	; (80025a8 <MX_TIM2_Init+0xe8>)
 8002546:	f005 fc20 	bl	8007d8a <HAL_TIM_PWM_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8002550:	f000 fc70 	bl	8002e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002554:	2320      	movs	r3, #32
 8002556:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800255c:	f107 0320 	add.w	r3, r7, #32
 8002560:	4619      	mov	r1, r3
 8002562:	4811      	ldr	r0, [pc, #68]	; (80025a8 <MX_TIM2_Init+0xe8>)
 8002564:	f006 faa6 	bl	8008ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800256e:	f000 fc61 	bl	8002e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002572:	2360      	movs	r3, #96	; 0x60
 8002574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8002576:	2364      	movs	r3, #100	; 0x64
 8002578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002582:	1d3b      	adds	r3, r7, #4
 8002584:	2208      	movs	r2, #8
 8002586:	4619      	mov	r1, r3
 8002588:	4807      	ldr	r0, [pc, #28]	; (80025a8 <MX_TIM2_Init+0xe8>)
 800258a:	f005 fdd1 	bl	8008130 <HAL_TIM_PWM_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002594:	f000 fc4e 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <MX_TIM2_Init+0xe8>)
 800259a:	f001 f8db 	bl	8003754 <HAL_TIM_MspPostInit>

}
 800259e:	bf00      	nop
 80025a0:	3738      	adds	r7, #56	; 0x38
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000f70 	.word	0x20000f70

080025ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025b2:	f107 0308 	add.w	r3, r7, #8
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c0:	463b      	mov	r3, r7
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025c8:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <MX_TIM4_Init+0x94>)
 80025ca:	4a1e      	ldr	r2, [pc, #120]	; (8002644 <MX_TIM4_Init+0x98>)
 80025cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 80025ce:	4b1c      	ldr	r3, [pc, #112]	; (8002640 <MX_TIM4_Init+0x94>)
 80025d0:	f242 3227 	movw	r2, #8999	; 0x2327
 80025d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	4b1a      	ldr	r3, [pc, #104]	; (8002640 <MX_TIM4_Init+0x94>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80025dc:	4b18      	ldr	r3, [pc, #96]	; (8002640 <MX_TIM4_Init+0x94>)
 80025de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e4:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_TIM4_Init+0x94>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <MX_TIM4_Init+0x94>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025f0:	4813      	ldr	r0, [pc, #76]	; (8002640 <MX_TIM4_Init+0x94>)
 80025f2:	f005 fb7b 	bl	8007cec <HAL_TIM_Base_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80025fc:	f000 fc1a 	bl	8002e34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002604:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	4619      	mov	r1, r3
 800260c:	480c      	ldr	r0, [pc, #48]	; (8002640 <MX_TIM4_Init+0x94>)
 800260e:	f005 fe55 	bl	80082bc <HAL_TIM_ConfigClockSource>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002618:	f000 fc0c 	bl	8002e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800261c:	2320      	movs	r3, #32
 800261e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002624:	463b      	mov	r3, r7
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	; (8002640 <MX_TIM4_Init+0x94>)
 800262a:	f006 fa43 	bl	8008ab4 <HAL_TIMEx_MasterConfigSynchronization>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002634:	f000 fbfe 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002638:	bf00      	nop
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000904 	.word	0x20000904
 8002644:	40000800 	.word	0x40000800

08002648 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_UART8_Init+0x4c>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <MX_UART8_Init+0x50>)
 8002650:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <MX_UART8_Init+0x4c>)
 8002654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002658:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <MX_UART8_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <MX_UART8_Init+0x4c>)
 8002662:	2200      	movs	r2, #0
 8002664:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002666:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <MX_UART8_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <MX_UART8_Init+0x4c>)
 800266e:	220c      	movs	r2, #12
 8002670:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002672:	4b08      	ldr	r3, [pc, #32]	; (8002694 <MX_UART8_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002678:	4b06      	ldr	r3, [pc, #24]	; (8002694 <MX_UART8_Init+0x4c>)
 800267a:	2200      	movs	r2, #0
 800267c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_UART8_Init+0x4c>)
 8002680:	f006 faa8 	bl	8008bd4 <HAL_UART_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 800268a:	f000 fbd3 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000ee8 	.word	0x20000ee8
 8002698:	40007c00 	.word	0x40007c00

0800269c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80026a0:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026a2:	4a12      	ldr	r2, [pc, #72]	; (80026ec <MX_USART3_UART_Init+0x50>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80026a6:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b0e      	ldr	r3, [pc, #56]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026d2:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_USART3_UART_Init+0x4c>)
 80026d4:	f006 fa7e 	bl	8008bd4 <HAL_UART_Init>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80026de:	f000 fba9 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000944 	.word	0x20000944
 80026ec:	40004800 	.word	0x40004800

080026f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <MX_USART6_UART_Init+0x4c>)
 80026f6:	4a12      	ldr	r2, [pc, #72]	; (8002740 <MX_USART6_UART_Init+0x50>)
 80026f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <MX_USART6_UART_Init+0x4c>)
 80026fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002700:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <MX_USART6_UART_Init+0x4c>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002716:	220c      	movs	r2, #12
 8002718:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <MX_USART6_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_USART6_UART_Init+0x4c>)
 8002728:	f006 fa54 	bl	8008bd4 <HAL_UART_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002732:	f000 fb7f 	bl	8002e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000f28 	.word	0x20000f28
 8002740:	40011400 	.word	0x40011400

08002744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08e      	sub	sp, #56	; 0x38
 8002748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
 8002758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
 800275e:	4bb5      	ldr	r3, [pc, #724]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4ab4      	ldr	r2, [pc, #720]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002764:	f043 0310 	orr.w	r3, r3, #16
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4bb2      	ldr	r3, [pc, #712]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	4bae      	ldr	r3, [pc, #696]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4aad      	ldr	r2, [pc, #692]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4bab      	ldr	r3, [pc, #684]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
 8002796:	4ba7      	ldr	r3, [pc, #668]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4aa6      	ldr	r2, [pc, #664]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 800279c:	f043 0320 	orr.w	r3, r3, #32
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4ba4      	ldr	r3, [pc, #656]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	61bb      	str	r3, [r7, #24]
 80027ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	4ba0      	ldr	r3, [pc, #640]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a9f      	ldr	r2, [pc, #636]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b9d      	ldr	r3, [pc, #628]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b99      	ldr	r3, [pc, #612]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a98      	ldr	r2, [pc, #608]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b96      	ldr	r3, [pc, #600]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b92      	ldr	r3, [pc, #584]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a91      	ldr	r2, [pc, #580]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b8f      	ldr	r3, [pc, #572]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b8b      	ldr	r3, [pc, #556]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	4a8a      	ldr	r2, [pc, #552]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 800280c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002810:	6313      	str	r3, [r2, #48]	; 0x30
 8002812:	4b88      	ldr	r3, [pc, #544]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	60bb      	str	r3, [r7, #8]
 800281c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b84      	ldr	r3, [pc, #528]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a83      	ldr	r2, [pc, #524]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b81      	ldr	r3, [pc, #516]	; (8002a34 <MX_GPIO_Init+0x2f0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 800283a:	2200      	movs	r2, #0
 800283c:	f248 4184 	movw	r1, #33924	; 0x8484
 8002840:	487d      	ldr	r0, [pc, #500]	; (8002a38 <MX_GPIO_Init+0x2f4>)
 8002842:	f002 fc5f 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SD_CS_Pin|Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800284c:	487b      	ldr	r0, [pc, #492]	; (8002a3c <MX_GPIO_Init+0x2f8>)
 800284e:	f002 fc59 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 8002852:	2200      	movs	r2, #0
 8002854:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8002858:	4879      	ldr	r0, [pc, #484]	; (8002a40 <MX_GPIO_Init+0x2fc>)
 800285a:	f002 fc53 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_RESET);
 800285e:	2200      	movs	r2, #0
 8002860:	2108      	movs	r1, #8
 8002862:	4878      	ldr	r0, [pc, #480]	; (8002a44 <MX_GPIO_Init+0x300>)
 8002864:	f002 fc4e 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 8002868:	2200      	movs	r2, #0
 800286a:	f645 213e 	movw	r1, #23102	; 0x5a3e
 800286e:	4876      	ldr	r0, [pc, #472]	; (8002a48 <MX_GPIO_Init+0x304>)
 8002870:	f002 fc48 	bl	8005104 <HAL_GPIO_WritePin>
                          |SX_RF_SW_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
                          |Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SX_NSS_GPIO_Port, SX_NSS_Pin, GPIO_PIN_RESET);
 8002874:	2200      	movs	r2, #0
 8002876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287a:	4874      	ldr	r0, [pc, #464]	; (8002a4c <MX_GPIO_Init+0x308>)
 800287c:	f002 fc42 	bl	8005104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 8002880:	2200      	movs	r2, #0
 8002882:	f647 41f0 	movw	r1, #31984	; 0x7cf0
 8002886:	4872      	ldr	r0, [pc, #456]	; (8002a50 <MX_GPIO_Init+0x30c>)
 8002888:	f002 fc3c 	bl	8005104 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin
                          |VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PM_12V_EN_Pin Vent_Valve_EN_Pin TH_CS_Pin Iridium_RST_Pin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin;
 800288c:	f248 4384 	movw	r3, #33924	; 0x8484
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002892:	2301      	movs	r3, #1
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800289e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a2:	4619      	mov	r1, r3
 80028a4:	4864      	ldr	r0, [pc, #400]	; (8002a38 <MX_GPIO_Init+0x2f4>)
 80028a6:	f002 fa69 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80028aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80028bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028c0:	4619      	mov	r1, r3
 80028c2:	485e      	ldr	r0, [pc, #376]	; (8002a3c <MX_GPIO_Init+0x2f8>)
 80028c4:	f002 fa5a 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Button_Pin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 80028c8:	2301      	movs	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028cc:	4b61      	ldr	r3, [pc, #388]	; (8002a54 <MX_GPIO_Init+0x310>)
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d8:	4619      	mov	r1, r3
 80028da:	4859      	ldr	r0, [pc, #356]	; (8002a40 <MX_GPIO_Init+0x2fc>)
 80028dc:	f002 fa4e 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin SX_AMPLIFIER_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin;
 80028e0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e6:	2301      	movs	r3, #1
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028f6:	4619      	mov	r1, r3
 80028f8:	4851      	ldr	r0, [pc, #324]	; (8002a40 <MX_GPIO_Init+0x2fc>)
 80028fa:	f002 fa3f 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDF_Pin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 80028fe:	2308      	movs	r3, #8
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002902:	2301      	movs	r3, #1
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	2300      	movs	r3, #0
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 800290e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002912:	4619      	mov	r1, r3
 8002914:	484b      	ldr	r0, [pc, #300]	; (8002a44 <MX_GPIO_Init+0x300>)
 8002916:	f002 fa31 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN_Prop_PyroTurboValve_LimitSwitch_Pin IN_SD_CARD_DETECT_Pin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 800291a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800292c:	4619      	mov	r1, r3
 800292e:	4844      	ldr	r0, [pc, #272]	; (8002a40 <MX_GPIO_Init+0x2fc>)
 8002930:	f002 fa24 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : IN_Prop_ActuatedVent_Feedback_Pin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 8002934:	2302      	movs	r3, #2
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002938:	2300      	movs	r3, #0
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 8002940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002944:	4619      	mov	r1, r3
 8002946:	4841      	ldr	r0, [pc, #260]	; (8002a4c <MX_GPIO_Init+0x308>)
 8002948:	f002 fa18 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : Prop_Cont_2_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 800294c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 800295a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800295e:	4619      	mov	r1, r3
 8002960:	4836      	ldr	r0, [pc, #216]	; (8002a3c <MX_GPIO_Init+0x2f8>)
 8002962:	f002 fa0b 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Gate_2_Pin Prop_Gate_1_Pin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 8002966:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800296c:	2301      	movs	r3, #1
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002974:	2300      	movs	r3, #0
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297c:	4619      	mov	r1, r3
 800297e:	482f      	ldr	r0, [pc, #188]	; (8002a3c <MX_GPIO_Init+0x2f8>)
 8002980:	f002 f9fc 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Cont_1_Pin Rcov_Cont_Main_Pin Rcov_Cont_Drogue_Pin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|Rcov_Cont_Main_Pin|Rcov_Cont_Drogue_Pin;
 8002984:	f242 4301 	movw	r3, #9217	; 0x2401
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298a:	2300      	movs	r3, #0
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002996:	4619      	mov	r1, r3
 8002998:	482b      	ldr	r0, [pc, #172]	; (8002a48 <MX_GPIO_Init+0x304>)
 800299a:	f002 f9ef 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Prop_Pyro_Arming_Pin SX_RST_Pin SX_BUSY_Pin SX_DIO_Pin
                           SX_RF_SW_Pin VR_CTRL_PWR_Pin Rcov_Gate_Main_Pin Rcov_Gate_Drogue_Pin
                           Rcov_Arm_Pin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_BUSY_Pin|SX_DIO_Pin
 800299e:	f645 233e 	movw	r3, #23102	; 0x5a3e
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SX_RF_SW_Pin|VR_CTRL_PWR_Pin|Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin
                          |Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a4:	2301      	movs	r3, #1
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ac:	2300      	movs	r3, #0
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	4824      	ldr	r0, [pc, #144]	; (8002a48 <MX_GPIO_Init+0x304>)
 80029b8:	f002 f9e0 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Payload_EN_Pin IN_XTend_Continuity_Pin */
  GPIO_InitStruct.Pin = Payload_EN_Pin|IN_XTend_Continuity_Pin;
 80029bc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c2:	2300      	movs	r3, #0
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ce:	4619      	mov	r1, r3
 80029d0:	4819      	ldr	r0, [pc, #100]	; (8002a38 <MX_GPIO_Init+0x2f4>)
 80029d2:	f002 f9d3 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_NSS_Pin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 80029d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029dc:	2301      	movs	r3, #1
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 80029e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ec:	4619      	mov	r1, r3
 80029ee:	4817      	ldr	r0, [pc, #92]	; (8002a4c <MX_GPIO_Init+0x308>)
 80029f0:	f002 f9c4 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : XTend_CTS_Pin XTend_RTS_Pin XTend_SLEEP_Pin XTend_RX_LED_Pin
                           XTend_TX_PWR_Pin FLASH_IO3_Pin FLASH_WP_Pin FLASH_CS_Pin
                           VR_CTRL_REC_Pin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80029f4:	f647 43f0 	movw	r3, #31984	; 0x7cf0
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin
                          |VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029fa:	2301      	movs	r3, #1
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fe:	2300      	movs	r3, #0
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a02:	2300      	movs	r3, #0
 8002a04:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4810      	ldr	r0, [pc, #64]	; (8002a50 <MX_GPIO_Init+0x30c>)
 8002a0e:	f002 f9b5 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SX_BANDPASS_FILTER_Pin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 8002a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 8002a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a24:	4619      	mov	r1, r3
 8002a26:	480a      	ldr	r0, [pc, #40]	; (8002a50 <MX_GPIO_Init+0x30c>)
 8002a28:	f002 f9a8 	bl	8004d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_LPS22HH_DRDY_Pin EXTI_ISM330DCL_INT2_Pin EXTI_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 8002a2c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8002a30:	e012      	b.n	8002a58 <MX_GPIO_Init+0x314>
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	40021400 	.word	0x40021400
 8002a40:	40020800 	.word	0x40020800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40021800 	.word	0x40021800
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	40020c00 	.word	0x40020c00
 8002a54:	10110000 	.word	0x10110000
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <MX_GPIO_Init+0x344>)
 8002a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a66:	4619      	mov	r1, r3
 8002a68:	4808      	ldr	r0, [pc, #32]	; (8002a8c <MX_GPIO_Init+0x348>)
 8002a6a:	f002 f987 	bl	8004d7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	2006      	movs	r0, #6
 8002a74:	f002 f94b 	bl	8004d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002a78:	2006      	movs	r0, #6
 8002a7a:	f002 f964 	bl	8004d46 <HAL_NVIC_EnableIRQ>

}
 8002a7e:	bf00      	nop
 8002a80:	3738      	adds	r7, #56	; 0x38
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	10110000 	.word	0x10110000
 8002a8c:	40021800 	.word	0x40021800

08002a90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a94:	b0a5      	sub	sp, #148	; 0x94
 8002a96:	af16      	add	r7, sp, #88	; 0x58
 8002a98:	6378      	str	r0, [r7, #52]	; 0x34
	if (htim->Instance == TIM4) {
 8002a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a58      	ldr	r2, [pc, #352]	; (8002c00 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 80a8 	bne.w	8002bf6 <HAL_TIM_PeriodElapsedCallback+0x166>
		// try running all code in one shot per timer interrupt
		// if takes too much time, use switch case like FC v2 from 2021

		// poll sensors
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2102      	movs	r1, #2
 8002aaa:	4856      	ldr	r0, [pc, #344]	; (8002c04 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002aac:	f002 fb2a 	bl	8005104 <HAL_GPIO_WritePin>
		// lsm6dsl data
		get_acceleration(dev_ctx_lsm, acceleration_mg);
 8002ab0:	4a55      	ldr	r2, [pc, #340]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002ab2:	4b56      	ldr	r3, [pc, #344]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002ab4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab6:	f7fe fb19 	bl	80010ec <get_acceleration>
		get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8002aba:	4a53      	ldr	r2, [pc, #332]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002abc:	4b54      	ldr	r3, [pc, #336]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ac0:	f7fe fb5a 	bl	8001178 <get_angvelocity>

		// lps22hh data
		get_pressure(dev_ctx_lps, &pressure_hPa);
 8002ac4:	4a53      	ldr	r2, [pc, #332]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002ac6:	4b54      	ldr	r3, [pc, #336]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aca:	f7fe fbf1 	bl	80012b0 <get_pressure>
		get_temperature(dev_ctx_lps, &temperature_degC);
 8002ace:	4a51      	ldr	r2, [pc, #324]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002ad0:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ad4:	f7fe fc18 	bl	8001308 <get_temperature>

		// rtc data
		HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BCD);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4951      	ldr	r1, [pc, #324]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002adc:	4851      	ldr	r0, [pc, #324]	; (8002c24 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002ade:	f004 fb4f 	bl	8007180 <HAL_RTC_GetTime>

		// continuity on pyro channels (one hot encoded)
		continuity = get_continuity();
 8002ae2:	f000 f96f 	bl	8002dc4 <get_continuity>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002aec:	701a      	strb	r2, [r3, #0]
//		GPS_Poll(&latitude, &longitude, &time);
//		GPS_check_nonzero_data(latitude, longitude, &gps_fix_lat, &gps_fix_long); // sets LEDs, check if we want to keep that behavior

		// print data into message
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%02lu,%d,%d,E\r\n",
						acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%02lu,%d,%d,E\r\n",
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fd38 	bl	8000568 <__aeabi_f2d>
 8002af8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
						acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002afc:	4b43      	ldr	r3, [pc, #268]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%02lu,%d,%d,E\r\n",
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fd31 	bl	8000568 <__aeabi_f2d>
 8002b06:	e9c7 0108 	strd	r0, r1, [r7, #32]
						acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002b0a:	4b40      	ldr	r3, [pc, #256]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%02lu,%d,%d,E\r\n",
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fd2a 	bl	8000568 <__aeabi_f2d>
 8002b14:	e9c7 0106 	strd	r0, r1, [r7, #24]
						angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002b18:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%02lu,%d,%d,E\r\n",
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fd23 	bl	8000568 <__aeabi_f2d>
 8002b22:	e9c7 0104 	strd	r0, r1, [r7, #16]
						angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002b28:	685b      	ldr	r3, [r3, #4]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%02lu,%d,%d,E\r\n",
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd1c 	bl	8000568 <__aeabi_f2d>
 8002b30:	e9c7 0102 	strd	r0, r1, [r7, #8]
						angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2],
 8002b34:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002b36:	689b      	ldr	r3, [r3, #8]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%02lu,%d,%d,E\r\n",
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fd15 	bl	8000568 <__aeabi_f2d>
 8002b3e:	4605      	mov	r5, r0
 8002b40:	460e      	mov	r6, r1
 8002b42:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fd0e 	bl	8000568 <__aeabi_f2d>
 8002b4c:	4682      	mov	sl, r0
 8002b4e:	468b      	mov	fp, r1
 8002b50:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002b52:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002b58:	e9d3 0100 	ldrd	r0, r1, [r3]
						pressure_hPa, latitude, longitude,
						stimestructureget.Minutes, stimestructureget.Seconds,stimestructureget.SecondFraction,
 8002b5c:	4b30      	ldr	r3, [pc, #192]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b5e:	785b      	ldrb	r3, [r3, #1]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%02lu,%d,%d,E\r\n",
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30
						stimestructureget.Minutes, stimestructureget.Seconds,stimestructureget.SecondFraction,
 8002b62:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b64:	789b      	ldrb	r3, [r3, #2]
		sprintf((char *)msg_buffer, "S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%02lu,%d,%d,E\r\n",
 8002b66:	607b      	str	r3, [r7, #4]
 8002b68:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b6a:	689c      	ldr	r4, [r3, #8]
 8002b6c:	4b2e      	ldr	r3, [pc, #184]	; (8002c28 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	9314      	str	r3, [sp, #80]	; 0x50
 8002b7c:	9213      	str	r2, [sp, #76]	; 0x4c
 8002b7e:	9412      	str	r4, [sp, #72]	; 0x48
 8002b80:	687c      	ldr	r4, [r7, #4]
 8002b82:	9411      	str	r4, [sp, #68]	; 0x44
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	9310      	str	r3, [sp, #64]	; 0x40
 8002b88:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002b8c:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002b90:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002b94:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8002b98:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002ba0:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ba4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002ba8:	ed97 7b06 	vldr	d7, [r7, #24]
 8002bac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002bb0:	ed97 7b08 	vldr	d7, [r7, #32]
 8002bb4:	ed8d 7b00 	vstr	d7, [sp]
 8002bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bbc:	491e      	ldr	r1, [pc, #120]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002bbe:	481f      	ldr	r0, [pc, #124]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002bc0:	f00a ff8c 	bl	800dadc <siprintf>
						continuity, state);

		// transmit via radio
//		radio_tx(msg_buffer);
		HAL_UART_Transmit(&huart8, msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY); // xtend for now
 8002bc4:	481d      	ldr	r0, [pc, #116]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002bc6:	f7fd fb13 	bl	80001f0 <strlen>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	491a      	ldr	r1, [pc, #104]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002bd4:	481a      	ldr	r0, [pc, #104]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bd6:	f006 f84a 	bl	8008c6e <HAL_UART_Transmit>

		// save to sd card
		fres = sd_open_file(filename);
 8002bda:	481a      	ldr	r0, [pc, #104]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002bdc:	f000 f9c8 	bl	8002f70 <sd_open_file>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002be6:	701a      	strb	r2, [r3, #0]
		sd_write(&fil, msg_buffer);
 8002be8:	4914      	ldr	r1, [pc, #80]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002bea:	4818      	ldr	r0, [pc, #96]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002bec:	f000 f9d8 	bl	8002fa0 <sd_write>
		f_close(&fil);	// close file to make sure it stays saved
 8002bf0:	4816      	ldr	r0, [pc, #88]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002bf2:	f009 fbfe 	bl	800c3f2 <f_close>

		// TODO: save to flash

	}
}
 8002bf6:	bf00      	nop
 8002bf8:	373c      	adds	r7, #60	; 0x3c
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40020800 	.word	0x40020800
 8002c08:	20000fb0 	.word	0x20000fb0
 8002c0c:	20000230 	.word	0x20000230
 8002c10:	2000023c 	.word	0x2000023c
 8002c14:	20000fbc 	.word	0x20000fbc
 8002c18:	20000248 	.word	0x20000248
 8002c1c:	2000024c 	.word	0x2000024c
 8002c20:	20000dd4 	.word	0x20000dd4
 8002c24:	20000da4 	.word	0x20000da4
 8002c28:	2000022e 	.word	0x2000022e
 8002c2c:	20000f68 	.word	0x20000f68
 8002c30:	20000dc8 	.word	0x20000dc8
 8002c34:	2000022f 	.word	0x2000022f
 8002c38:	08011548 	.word	0x08011548
 8002c3c:	20000250 	.word	0x20000250
 8002c40:	20000ee8 	.word	0x20000ee8
 8002c44:	20000638 	.word	0x20000638
 8002c48:	20000fc8 	.word	0x20000fc8
 8002c4c:	20000fcc 	.word	0x20000fcc

08002c50 <save_flash_to_sd>:
 *
 * assumes f_mount has already been run.
 * this function does not close the file system.
 * opens a file "datalog.txt" and closes it when finished.
 */
int save_flash_to_sd(void) {
 8002c50:	b5b0      	push	{r4, r5, r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	466b      	mov	r3, sp
 8002c58:	461d      	mov	r5, r3
	// FLASH variables
	uint32_t page_num = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
	uint16_t page_bytes = w25qxx.PageSize; // 256 bytes saved per page
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <save_flash_to_sd+0x154>)
 8002c60:	895b      	ldrh	r3, [r3, #10]
 8002c62:	82fb      	strh	r3, [r7, #22]
	uint8_t readBuf[page_bytes];
 8002c64:	8afc      	ldrh	r4, [r7, #22]
 8002c66:	4623      	mov	r3, r4
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	b2a0      	uxth	r0, r4
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	f04f 0300 	mov.w	r3, #0
 8002c7a:	00cb      	lsls	r3, r1, #3
 8002c7c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c80:	00c2      	lsls	r2, r0, #3
 8002c82:	b2a0      	uxth	r0, r4
 8002c84:	f04f 0100 	mov.w	r1, #0
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	00cb      	lsls	r3, r1, #3
 8002c92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c96:	00c2      	lsls	r2, r0, #3
 8002c98:	4623      	mov	r3, r4
 8002c9a:	3307      	adds	r3, #7
 8002c9c:	08db      	lsrs	r3, r3, #3
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	ebad 0d03 	sub.w	sp, sp, r3
 8002ca4:	466b      	mov	r3, sp
 8002ca6:	3300      	adds	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]

	// write to file
	fres = f_open(&fil, "flashlog.txt", FA_WRITE | FA_OPEN_ALWAYS);
 8002caa:	2212      	movs	r2, #18
 8002cac:	493e      	ldr	r1, [pc, #248]	; (8002da8 <save_flash_to_sd+0x158>)
 8002cae:	483f      	ldr	r0, [pc, #252]	; (8002dac <save_flash_to_sd+0x15c>)
 8002cb0:	f008 ffee 	bl	800bc90 <f_open>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4b3d      	ldr	r3, [pc, #244]	; (8002db0 <save_flash_to_sd+0x160>)
 8002cba:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002cbc:	4b3c      	ldr	r3, [pc, #240]	; (8002db0 <save_flash_to_sd+0x160>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <save_flash_to_sd+0x86>
		myprintf("f_open error (%i)\r\n", fres);
 8002cc4:	4b3a      	ldr	r3, [pc, #232]	; (8002db0 <save_flash_to_sd+0x160>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	483a      	ldr	r0, [pc, #232]	; (8002db4 <save_flash_to_sd+0x164>)
 8002ccc:	f000 f8ba 	bl	8002e44 <myprintf>
		return -1;
 8002cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd4:	e061      	b.n	8002d9a <save_flash_to_sd+0x14a>
	}

	// set pointer to end of file
	f_lseek(&fil, f_size(&fil));
 8002cd6:	4b35      	ldr	r3, [pc, #212]	; (8002dac <save_flash_to_sd+0x15c>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4833      	ldr	r0, [pc, #204]	; (8002dac <save_flash_to_sd+0x15c>)
 8002cde:	f009 fbb2 	bl	800c446 <f_lseek>

	// print string to indicate new log session
	sprintf((char *)msg_buffer, "\n--- new logging session! ---\r\n");
 8002ce2:	4935      	ldr	r1, [pc, #212]	; (8002db8 <save_flash_to_sd+0x168>)
 8002ce4:	4835      	ldr	r0, [pc, #212]	; (8002dbc <save_flash_to_sd+0x16c>)
 8002ce6:	f00a fef9 	bl	800dadc <siprintf>
	sd_write(&fil, msg_buffer);
 8002cea:	4934      	ldr	r1, [pc, #208]	; (8002dbc <save_flash_to_sd+0x16c>)
 8002cec:	482f      	ldr	r0, [pc, #188]	; (8002dac <save_flash_to_sd+0x15c>)
 8002cee:	f000 f957 	bl	8002fa0 <sd_write>

	for (page_num = 0; page_num < w25qxx.PageCount; page_num++) {
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	e024      	b.n	8002d42 <save_flash_to_sd+0xf2>

		if (!W25qxx_IsEmptyPage(page_num, 0, page_bytes)) {
 8002cf8:	8afb      	ldrh	r3, [r7, #22]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	69b8      	ldr	r0, [r7, #24]
 8002d00:	f001 fa14 	bl	800412c <W25qxx_IsEmptyPage>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01e      	beq.n	8002d4e <save_flash_to_sd+0xfe>

			// page not empty, read page out of flash
			W25qxx_ReadPage(readBuf, page_num, 0, page_bytes);
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	8afb      	ldrh	r3, [r7, #22]
 8002d14:	2200      	movs	r2, #0
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	f001 fb2a 	bl	8004370 <W25qxx_ReadPage>

			// save to SD
			int8_t status = sd_write(&fil, readBuf);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4619      	mov	r1, r3
 8002d20:	4822      	ldr	r0, [pc, #136]	; (8002dac <save_flash_to_sd+0x15c>)
 8002d22:	f000 f93d 	bl	8002fa0 <sd_write>
 8002d26:	4603      	mov	r3, r0
 8002d28:	72fb      	strb	r3, [r7, #11]
			if (status <= 0) {
 8002d2a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	dc04      	bgt.n	8002d3c <save_flash_to_sd+0xec>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET); // failed
 8002d32:	2201      	movs	r2, #1
 8002d34:	2102      	movs	r1, #2
 8002d36:	4822      	ldr	r0, [pc, #136]	; (8002dc0 <save_flash_to_sd+0x170>)
 8002d38:	f002 f9e4 	bl	8005104 <HAL_GPIO_WritePin>
	for (page_num = 0; page_num < w25qxx.PageCount; page_num++) {
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	4b18      	ldr	r3, [pc, #96]	; (8002da4 <save_flash_to_sd+0x154>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d3d5      	bcc.n	8002cf8 <save_flash_to_sd+0xa8>
 8002d4c:	e000      	b.n	8002d50 <save_flash_to_sd+0x100>
			}
		}
		else break; // page empty, no need to continue
 8002d4e:	bf00      	nop
	}

	// close file
	f_close(&fil);
 8002d50:	4816      	ldr	r0, [pc, #88]	; (8002dac <save_flash_to_sd+0x15c>)
 8002d52:	f009 fb4e 	bl	800c3f2 <f_close>

	if (page_num == 0) { // nothing saved
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <save_flash_to_sd+0x116>
		tone(50, 5);
 8002d5c:	2105      	movs	r1, #5
 8002d5e:	2032      	movs	r0, #50	; 0x32
 8002d60:	f7fe ffce 	bl	8001d00 <tone>
 8002d64:	e018      	b.n	8002d98 <save_flash_to_sd+0x148>
	}
	else {
		// wait for button press to erase
		tone(250, 3);
 8002d66:	2103      	movs	r1, #3
 8002d68:	20fa      	movs	r0, #250	; 0xfa
 8002d6a:	f7fe ffc9 	bl	8001d00 <tone>

		// clear the blocks with data
		uint32_t blocks_to_clear = W25qxx_PageToBlock(page_num);
 8002d6e:	69b8      	ldr	r0, [r7, #24]
 8002d70:	f001 f9c6 	bl	8004100 <W25qxx_PageToBlock>
 8002d74:	6078      	str	r0, [r7, #4]
		for (uint32_t block = 0; block <= blocks_to_clear; block++) {
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
 8002d7a:	e005      	b.n	8002d88 <save_flash_to_sd+0x138>
			W25qxx_EraseBlock(block);
 8002d7c:	69f8      	ldr	r0, [r7, #28]
 8002d7e:	f001 f94b 	bl	8004018 <W25qxx_EraseBlock>
		for (uint32_t block = 0; block <= blocks_to_clear; block++) {
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d9f5      	bls.n	8002d7c <save_flash_to_sd+0x12c>
		}

		tone(50, 3);
 8002d90:	2103      	movs	r1, #3
 8002d92:	2032      	movs	r0, #50	; 0x32
 8002d94:	f7fe ffb4 	bl	8001d00 <tone>
	}

	return 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	46ad      	mov	sp, r5

}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bdb0      	pop	{r4, r5, r7, pc}
 8002da4:	200015e4 	.word	0x200015e4
 8002da8:	080115a4 	.word	0x080115a4
 8002dac:	20000fcc 	.word	0x20000fcc
 8002db0:	20000fc8 	.word	0x20000fc8
 8002db4:	08011534 	.word	0x08011534
 8002db8:	080115b4 	.word	0x080115b4
 8002dbc:	20000250 	.word	0x20000250
 8002dc0:	40020800 	.word	0x40020800

08002dc4 <get_continuity>:


uint8_t get_continuity() {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0

	// read pins
	GPIO_PinState drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 8002dca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dce:	4817      	ldr	r0, [pc, #92]	; (8002e2c <get_continuity+0x68>)
 8002dd0:	f002 f980 	bl	80050d4 <HAL_GPIO_ReadPin>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 8002dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ddc:	4813      	ldr	r0, [pc, #76]	; (8002e2c <get_continuity+0x68>)
 8002dde:	f002 f979 	bl	80050d4 <HAL_GPIO_ReadPin>
 8002de2:	4603      	mov	r3, r0
 8002de4:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 8002de6:	2101      	movs	r1, #1
 8002de8:	4810      	ldr	r0, [pc, #64]	; (8002e2c <get_continuity+0x68>)
 8002dea:	f002 f973 	bl	80050d4 <HAL_GPIO_ReadPin>
 8002dee:	4603      	mov	r3, r0
 8002df0:	717b      	strb	r3, [r7, #5]
	GPIO_PinState prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 8002df2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df6:	480e      	ldr	r0, [pc, #56]	; (8002e30 <get_continuity+0x6c>)
 8002df8:	f002 f96c 	bl	80050d4 <HAL_GPIO_ReadPin>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	713b      	strb	r3, [r7, #4]

	// assign one-hot encoded result (apparently you can multiply enums?)
	uint8_t continuity = (drogue) + (main * 2) + (prop_1 * 4) + (prop_2 * 8);
 8002e00:	793b      	ldrb	r3, [r7, #4]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	797b      	ldrb	r3, [r7, #5]
 8002e08:	4413      	add	r3, r2
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	79bb      	ldrb	r3, [r7, #6]
 8002e12:	4413      	add	r3, r2
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	70fb      	strb	r3, [r7, #3]

	return continuity;
 8002e20:	78fb      	ldrb	r3, [r7, #3]

}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40021800 	.word	0x40021800
 8002e30:	40021400 	.word	0x40021400

08002e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <myprintf>:
extern FIL fil;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8002e44:	b40f      	push	{r0, r1, r2, r3}
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e5a:	4805      	ldr	r0, [pc, #20]	; (8002e70 <myprintf+0x2c>)
 8002e5c:	f00b fda4 	bl	800e9a8 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e6a:	b004      	add	sp, #16
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000648 	.word	0x20000648

08002e74 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8002e80:	2201      	movs	r2, #1
 8002e82:	4932      	ldr	r1, [pc, #200]	; (8002f4c <sd_init_dynamic_filename+0xd8>)
 8002e84:	4832      	ldr	r0, [pc, #200]	; (8002f50 <sd_init_dynamic_filename+0xdc>)
 8002e86:	f008 febd 	bl	800bc04 <f_mount>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8002e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d008      	beq.n	8002eaa <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8002e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	482d      	ldr	r0, [pc, #180]	; (8002f54 <sd_init_dynamic_filename+0xe0>)
 8002ea0:	f7ff ffd0 	bl	8002e44 <myprintf>
		return fres;
 8002ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ea8:	e04b      	b.n	8002f42 <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8002eae:	f107 0320 	add.w	r3, r7, #32
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68f9      	ldr	r1, [r7, #12]
 8002eb6:	4825      	ldr	r0, [pc, #148]	; (8002f4c <sd_init_dynamic_filename+0xd8>)
 8002eb8:	f000 f89c 	bl	8002ff4 <scan_files>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	f107 0310 	add.w	r3, r7, #16
 8002eca:	4923      	ldr	r1, [pc, #140]	; (8002f58 <sd_init_dynamic_filename+0xe4>)
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f00a fe05 	bl	800dadc <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8002ed2:	f107 0310 	add.w	r3, r7, #16
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f00a fe62 	bl	800dba2 <strcpy>
 8002ede:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	221a      	movs	r2, #26
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	481c      	ldr	r0, [pc, #112]	; (8002f5c <sd_init_dynamic_filename+0xe8>)
 8002eea:	f008 fed1 	bl	800bc90 <f_open>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8002ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d11a      	bne.n	8002f32 <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8002efc:	4818      	ldr	r0, [pc, #96]	; (8002f60 <sd_init_dynamic_filename+0xec>)
 8002efe:	f7ff ffa1 	bl	8002e44 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002f02:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <sd_init_dynamic_filename+0xe8>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	4619      	mov	r1, r3
 8002f08:	4814      	ldr	r0, [pc, #80]	; (8002f5c <sd_init_dynamic_filename+0xe8>)
 8002f0a:	f009 fa9c 	bl	800c446 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8002f0e:	4915      	ldr	r1, [pc, #84]	; (8002f64 <sd_init_dynamic_filename+0xf0>)
 8002f10:	4815      	ldr	r0, [pc, #84]	; (8002f68 <sd_init_dynamic_filename+0xf4>)
 8002f12:	f00a fde3 	bl	800dadc <siprintf>
	sd_write(&fil, msg_buffer);
 8002f16:	4914      	ldr	r1, [pc, #80]	; (8002f68 <sd_init_dynamic_filename+0xf4>)
 8002f18:	4810      	ldr	r0, [pc, #64]	; (8002f5c <sd_init_dynamic_filename+0xe8>)
 8002f1a:	f000 f841 	bl	8002fa0 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	480e      	ldr	r0, [pc, #56]	; (8002f5c <sd_init_dynamic_filename+0xe8>)
 8002f22:	f000 f83d 	bl	8002fa0 <sd_write>
	f_close(&fil);
 8002f26:	480d      	ldr	r0, [pc, #52]	; (8002f5c <sd_init_dynamic_filename+0xe8>)
 8002f28:	f009 fa63 	bl	800c3f2 <f_close>

	return fres;
 8002f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f30:	e007      	b.n	8002f42 <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8002f32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f36:	4619      	mov	r1, r3
 8002f38:	480c      	ldr	r0, [pc, #48]	; (8002f6c <sd_init_dynamic_filename+0xf8>)
 8002f3a:	f7ff ff83 	bl	8002e44 <myprintf>
		return fres;
 8002f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3728      	adds	r7, #40	; 0x28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	080115d4 	.word	0x080115d4
 8002f50:	20000984 	.word	0x20000984
 8002f54:	080115d8 	.word	0x080115d8
 8002f58:	08011654 	.word	0x08011654
 8002f5c:	20000fcc 	.word	0x20000fcc
 8002f60:	080115f0 	.word	0x080115f0
 8002f64:	08011634 	.word	0x08011634
 8002f68:	200011fc 	.word	0x200011fc
 8002f6c:	08011620 	.word	0x08011620

08002f70 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8002f78:	2212      	movs	r2, #18
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4807      	ldr	r0, [pc, #28]	; (8002f9c <sd_open_file+0x2c>)
 8002f7e:	f008 fe87 	bl	800bc90 <f_open>
 8002f82:	4603      	mov	r3, r0
 8002f84:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <sd_open_file+0x2c>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4803      	ldr	r0, [pc, #12]	; (8002f9c <sd_open_file+0x2c>)
 8002f8e:	f009 fa5a 	bl	800c446 <f_lseek>

	return fres;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000fcc 	.word	0x20000fcc

08002fa0 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8002faa:	6838      	ldr	r0, [r7, #0]
 8002fac:	f7fd f920 	bl	80001f0 <strlen>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	f107 0308 	add.w	r3, r7, #8
 8002fb6:	6839      	ldr	r1, [r7, #0]
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f009 f827 	bl	800c00c <f_write>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d107      	bne.n	8002fd8 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4807      	ldr	r0, [pc, #28]	; (8002fec <sd_write+0x4c>)
 8002fce:	f7ff ff39 	bl	8002e44 <myprintf>
		return bytesWrote;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	b25b      	sxtb	r3, r3
 8002fd6:	e004      	b.n	8002fe2 <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8002fd8:	4805      	ldr	r0, [pc, #20]	; (8002ff0 <sd_write+0x50>)
 8002fda:	f7ff ff33 	bl	8002e44 <myprintf>
		return -1;
 8002fde:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	08011660 	.word	0x08011660
 8002ff0:	08011684 	.word	0x08011684

08002ff4 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8002ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ff6:	b099      	sub	sp, #100	; 0x64
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
 8003000:	466b      	mov	r3, sp
 8003002:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8003004:	68b8      	ldr	r0, [r7, #8]
 8003006:	f7fd f8f3 	bl	80001f0 <strlen>
 800300a:	4603      	mov	r3, r0
 800300c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8003010:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8003014:	4623      	mov	r3, r4
 8003016:	3b01      	subs	r3, #1
 8003018:	65bb      	str	r3, [r7, #88]	; 0x58
 800301a:	b2e0      	uxtb	r0, r4
 800301c:	f04f 0100 	mov.w	r1, #0
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	00cb      	lsls	r3, r1, #3
 800302a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800302e:	00c2      	lsls	r2, r0, #3
 8003030:	b2e0      	uxtb	r0, r4
 8003032:	f04f 0100 	mov.w	r1, #0
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	00cb      	lsls	r3, r1, #3
 8003040:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003044:	00c2      	lsls	r2, r0, #3
 8003046:	4623      	mov	r3, r4
 8003048:	3307      	adds	r3, #7
 800304a:	08db      	lsrs	r3, r3, #3
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	ebad 0d03 	sub.w	sp, sp, r3
 8003052:	466b      	mov	r3, sp
 8003054:	3300      	adds	r3, #0
 8003056:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8003058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305a:	4619      	mov	r1, r3
 800305c:	68b8      	ldr	r0, [r7, #8]
 800305e:	f000 f8ff 	bl	8003260 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8003068:	2300      	movs	r3, #0
 800306a:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 800306c:	f107 0318 	add.w	r3, r7, #24
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	4618      	mov	r0, r3
 8003074:	f009 fbf0 	bl	800c858 <f_opendir>
 8003078:	4603      	mov	r3, r0
 800307a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 800307e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003082:	2b00      	cmp	r3, #0
 8003084:	d16c      	bne.n	8003160 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003086:	f107 0318 	add.w	r3, r7, #24
 800308a:	4939      	ldr	r1, [pc, #228]	; (8003170 <scan_files+0x17c>)
 800308c:	4618      	mov	r0, r3
 800308e:	f009 fc7c 	bl	800c98a <f_readdir>
 8003092:	4603      	mov	r3, r0
 8003094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003098:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800309c:	2b00      	cmp	r3, #0
 800309e:	d15a      	bne.n	8003156 <scan_files+0x162>
 80030a0:	4b33      	ldr	r3, [pc, #204]	; (8003170 <scan_files+0x17c>)
 80030a2:	7a5b      	ldrb	r3, [r3, #9]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d056      	beq.n	8003156 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 80030a8:	4b31      	ldr	r3, [pc, #196]	; (8003170 <scan_files+0x17c>)
 80030aa:	7a1b      	ldrb	r3, [r3, #8]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d14e      	bne.n	8003152 <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 80030b4:	466b      	mov	r3, sp
 80030b6:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 80030b8:	482e      	ldr	r0, [pc, #184]	; (8003174 <scan_files+0x180>)
 80030ba:	f7fd f899 	bl	80001f0 <strlen>
 80030be:	4604      	mov	r4, r0
 80030c0:	4623      	mov	r3, r4
 80030c2:	3b01      	subs	r3, #1
 80030c4:	653b      	str	r3, [r7, #80]	; 0x50
 80030c6:	4620      	mov	r0, r4
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00cb      	lsls	r3, r1, #3
 80030d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030da:	00c2      	lsls	r2, r0, #3
 80030dc:	4620      	mov	r0, r4
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	00cb      	lsls	r3, r1, #3
 80030ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030f0:	00c2      	lsls	r2, r0, #3
 80030f2:	1de3      	adds	r3, r4, #7
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	ebad 0d03 	sub.w	sp, sp, r3
 80030fc:	466b      	mov	r3, sp
 80030fe:	3300      	adds	r3, #0
 8003100:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003104:	4619      	mov	r1, r3
 8003106:	481b      	ldr	r0, [pc, #108]	; (8003174 <scan_files+0x180>)
 8003108:	f000 f8aa 	bl	8003260 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 800310c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800310e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8003112:	4619      	mov	r1, r3
 8003114:	4817      	ldr	r0, [pc, #92]	; (8003174 <scan_files+0x180>)
 8003116:	f00a fd4c 	bl	800dbb2 <strncmp>
 800311a:	4603      	mov	r3, r0
 800311c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8003120:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8003124:	2b00      	cmp	r3, #0
 8003126:	d112      	bne.n	800314e <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8003128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312a:	f107 0214 	add.w	r2, r7, #20
 800312e:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8003132:	4618      	mov	r0, r3
 8003134:	f000 f820 	bl	8003178 <extract_filename_suffix>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	429a      	cmp	r2, r3
 8003146:	d202      	bcs.n	800314e <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	46b5      	mov	sp, r6
 8003150:	e799      	b.n	8003086 <scan_files+0x92>
            	continue; // don't enter directory
 8003152:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003154:	e797      	b.n	8003086 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8003156:	f107 0318 	add.w	r3, r7, #24
 800315a:	4618      	mov	r0, r3
 800315c:	f009 fbef 	bl	800c93e <f_closedir>
    }

    return res;
 8003160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003164:	46ad      	mov	sp, r5
}
 8003166:	4618      	mov	r0, r3
 8003168:	3764      	adds	r7, #100	; 0x64
 800316a:	46bd      	mov	sp, r7
 800316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800316e:	bf00      	nop
 8003170:	20000748 	.word	0x20000748
 8003174:	20000751 	.word	0x20000751

08003178 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8003178:	b5b0      	push	{r4, r5, r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	460b      	mov	r3, r1
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	72fb      	strb	r3, [r7, #11]
 8003186:	466b      	mov	r3, sp
 8003188:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7fd f830 	bl	80001f0 <strlen>
 8003190:	4603      	mov	r3, r0
 8003192:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 8003194:	2308      	movs	r3, #8
 8003196:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 8003198:	7f7c      	ldrb	r4, [r7, #29]
 800319a:	4623      	mov	r3, r4
 800319c:	3b01      	subs	r3, #1
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	b2e0      	uxtb	r0, r4
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	00cb      	lsls	r3, r1, #3
 80031b0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80031b4:	00c2      	lsls	r2, r0, #3
 80031b6:	b2e0      	uxtb	r0, r4
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f04f 0300 	mov.w	r3, #0
 80031c4:	00cb      	lsls	r3, r1, #3
 80031c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80031ca:	00c2      	lsls	r2, r0, #3
 80031cc:	4623      	mov	r3, r4
 80031ce:	3307      	adds	r3, #7
 80031d0:	08db      	lsrs	r3, r3, #3
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	ebad 0d03 	sub.w	sp, sp, r3
 80031d8:	466b      	mov	r3, sp
 80031da:	3300      	adds	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 80031de:	2300      	movs	r3, #0
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e014      	b.n	800320e <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	7ffb      	ldrb	r3, [r7, #31]
 80031ea:	441a      	add	r2, r3
 80031ec:	7fbb      	ldrb	r3, [r7, #30]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	429a      	cmp	r2, r3
 80031f2:	da11      	bge.n	8003218 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 80031f4:	7afa      	ldrb	r2, [r7, #11]
 80031f6:	7ffb      	ldrb	r3, [r7, #31]
 80031f8:	4413      	add	r3, r2
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	441a      	add	r2, r3
 8003200:	7ffb      	ldrb	r3, [r7, #31]
 8003202:	7811      	ldrb	r1, [r2, #0]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8003208:	7ffb      	ldrb	r3, [r7, #31]
 800320a:	3301      	adds	r3, #1
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	7ffa      	ldrb	r2, [r7, #31]
 8003210:	7f7b      	ldrb	r3, [r7, #29]
 8003212:	429a      	cmp	r2, r3
 8003214:	d3e6      	bcc.n	80031e4 <extract_filename_suffix+0x6c>
 8003216:	e000      	b.n	800321a <extract_filename_suffix+0xa2>
		}
		else break;
 8003218:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f107 0110 	add.w	r1, r7, #16
 8003220:	220a      	movs	r2, #10
 8003222:	4618      	mov	r0, r3
 8003224:	f00b fb8a 	bl	800e93c <strtol>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	429a      	cmp	r2, r3
 8003236:	d00a      	beq.n	800324e <extract_filename_suffix+0xd6>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003240:	d005      	beq.n	800324e <extract_filename_suffix+0xd6>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <extract_filename_suffix+0xda>
	{
		return 1;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <extract_filename_suffix+0xdc>
	}

	return 0;
 8003252:	2300      	movs	r3, #0
 8003254:	46ad      	mov	sp, r5
}
 8003256:	4618      	mov	r0, r3
 8003258:	3720      	adds	r7, #32
 800325a:	46bd      	mov	sp, r7
 800325c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003260 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 8003260:	b590      	push	{r4, r7, lr}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
 800326e:	e019      	b.n	80032a4 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 8003270:	7bfb      	ldrb	r3, [r7, #15]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	73bb      	strb	r3, [r7, #14]
 800327a:	7bbb      	ldrb	r3, [r7, #14]
 800327c:	3301      	adds	r3, #1
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <str2upper+0x5c>)
 8003280:	4413      	add	r3, r2
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d102      	bne.n	8003292 <str2upper+0x32>
 800328c:	7bbb      	ldrb	r3, [r7, #14]
 800328e:	3b20      	subs	r3, #32
 8003290:	e000      	b.n	8003294 <str2upper+0x34>
 8003292:	7bbb      	ldrb	r3, [r7, #14]
 8003294:	7bfa      	ldrb	r2, [r7, #15]
 8003296:	6839      	ldr	r1, [r7, #0]
 8003298:	440a      	add	r2, r1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	3301      	adds	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	7bfc      	ldrb	r4, [r7, #15]
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fc ffa2 	bl	80001f0 <strlen>
 80032ac:	4603      	mov	r3, r0
 80032ae:	429c      	cmp	r4, r3
 80032b0:	d3de      	bcc.n	8003270 <str2upper+0x10>
	}
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	3714      	adds	r7, #20
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd90      	pop	{r4, r7, pc}
 80032bc:	08012014 	.word	0x08012014

080032c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_MspInit+0x4c>)
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	4a0f      	ldr	r2, [pc, #60]	; (800330c <HAL_MspInit+0x4c>)
 80032d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032d4:	6453      	str	r3, [r2, #68]	; 0x44
 80032d6:	4b0d      	ldr	r3, [pc, #52]	; (800330c <HAL_MspInit+0x4c>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	603b      	str	r3, [r7, #0]
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_MspInit+0x4c>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <HAL_MspInit+0x4c>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_MspInit+0x4c>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a17      	ldr	r2, [pc, #92]	; (800338c <HAL_ADC_MspInit+0x7c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d127      	bne.n	8003382 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_ADC_MspInit+0x80>)
 8003338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333a:	4a15      	ldr	r2, [pc, #84]	; (8003390 <HAL_ADC_MspInit+0x80>)
 800333c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003340:	6453      	str	r3, [r2, #68]	; 0x44
 8003342:	4b13      	ldr	r3, [pc, #76]	; (8003390 <HAL_ADC_MspInit+0x80>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <HAL_ADC_MspInit+0x80>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <HAL_ADC_MspInit+0x80>)
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	6313      	str	r3, [r2, #48]	; 0x30
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_ADC_MspInit+0x80>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 800336a:	2340      	movs	r3, #64	; 0x40
 800336c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800336e:	2303      	movs	r3, #3
 8003370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	4805      	ldr	r0, [pc, #20]	; (8003394 <HAL_ADC_MspInit+0x84>)
 800337e:	f001 fcfd 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003382:	bf00      	nop
 8003384:	3728      	adds	r7, #40	; 0x28
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40012000 	.word	0x40012000
 8003390:	40023800 	.word	0x40023800
 8003394:	40020000 	.word	0x40020000

08003398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08e      	sub	sp, #56	; 0x38
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	605a      	str	r2, [r3, #4]
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5c      	ldr	r2, [pc, #368]	; (8003528 <HAL_I2C_MspInit+0x190>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d12d      	bne.n	8003416 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	4b5b      	ldr	r3, [pc, #364]	; (800352c <HAL_I2C_MspInit+0x194>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a5a      	ldr	r2, [pc, #360]	; (800352c <HAL_I2C_MspInit+0x194>)
 80033c4:	f043 0302 	orr.w	r3, r3, #2
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b58      	ldr	r3, [pc, #352]	; (800352c <HAL_I2C_MspInit+0x194>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	623b      	str	r3, [r7, #32]
 80033d4:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033dc:	2312      	movs	r3, #18
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e0:	2301      	movs	r3, #1
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e4:	2303      	movs	r3, #3
 80033e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033e8:	2304      	movs	r3, #4
 80033ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033f0:	4619      	mov	r1, r3
 80033f2:	484f      	ldr	r0, [pc, #316]	; (8003530 <HAL_I2C_MspInit+0x198>)
 80033f4:	f001 fcc2 	bl	8004d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	4b4b      	ldr	r3, [pc, #300]	; (800352c <HAL_I2C_MspInit+0x194>)
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	4a4a      	ldr	r2, [pc, #296]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003402:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003406:	6413      	str	r3, [r2, #64]	; 0x40
 8003408:	4b48      	ldr	r3, [pc, #288]	; (800352c <HAL_I2C_MspInit+0x194>)
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003414:	e083      	b.n	800351e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a46      	ldr	r2, [pc, #280]	; (8003534 <HAL_I2C_MspInit+0x19c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d12d      	bne.n	800347c <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003420:	2300      	movs	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	4a40      	ldr	r2, [pc, #256]	; (800352c <HAL_I2C_MspInit+0x194>)
 800342a:	f043 0302 	orr.w	r3, r3, #2
 800342e:	6313      	str	r3, [r2, #48]	; 0x30
 8003430:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800343c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003442:	2312      	movs	r3, #18
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003446:	2301      	movs	r3, #1
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800344a:	2303      	movs	r3, #3
 800344c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800344e:	2304      	movs	r3, #4
 8003450:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003456:	4619      	mov	r1, r3
 8003458:	4835      	ldr	r0, [pc, #212]	; (8003530 <HAL_I2C_MspInit+0x198>)
 800345a:	f001 fc8f 	bl	8004d7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	4a31      	ldr	r2, [pc, #196]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800346c:	6413      	str	r3, [r2, #64]	; 0x40
 800346e:	4b2f      	ldr	r3, [pc, #188]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
}
 800347a:	e050      	b.n	800351e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2d      	ldr	r2, [pc, #180]	; (8003538 <HAL_I2C_MspInit+0x1a0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d14b      	bne.n	800351e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	4b28      	ldr	r3, [pc, #160]	; (800352c <HAL_I2C_MspInit+0x194>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a27      	ldr	r2, [pc, #156]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003490:	f043 0304 	orr.w	r3, r3, #4
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_I2C_MspInit+0x194>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4a20      	ldr	r2, [pc, #128]	; (800352c <HAL_I2C_MspInit+0x194>)
 80034ac:	f043 0301 	orr.w	r3, r3, #1
 80034b0:	6313      	str	r3, [r2, #48]	; 0x30
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <HAL_I2C_MspInit+0x194>)
 80034b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034c4:	2312      	movs	r3, #18
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	2303      	movs	r3, #3
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034d0:	2304      	movs	r3, #4
 80034d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d8:	4619      	mov	r1, r3
 80034da:	4818      	ldr	r0, [pc, #96]	; (800353c <HAL_I2C_MspInit+0x1a4>)
 80034dc:	f001 fc4e 	bl	8004d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034e6:	2312      	movs	r3, #18
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ee:	2303      	movs	r3, #3
 80034f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034f2:	2304      	movs	r3, #4
 80034f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034fa:	4619      	mov	r1, r3
 80034fc:	4810      	ldr	r0, [pc, #64]	; (8003540 <HAL_I2C_MspInit+0x1a8>)
 80034fe:	f001 fc3d 	bl	8004d7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	4b09      	ldr	r3, [pc, #36]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a08      	ldr	r2, [pc, #32]	; (800352c <HAL_I2C_MspInit+0x194>)
 800350c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_I2C_MspInit+0x194>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
}
 800351e:	bf00      	nop
 8003520:	3738      	adds	r7, #56	; 0x38
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40005400 	.word	0x40005400
 800352c:	40023800 	.word	0x40023800
 8003530:	40020400 	.word	0x40020400
 8003534:	40005800 	.word	0x40005800
 8003538:	40005c00 	.word	0x40005c00
 800353c:	40020800 	.word	0x40020800
 8003540:	40020000 	.word	0x40020000

08003544 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a05      	ldr	r2, [pc, #20]	; (8003568 <HAL_RTC_MspInit+0x24>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d102      	bne.n	800355c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003556:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RTC_MspInit+0x28>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	40002800 	.word	0x40002800
 800356c:	42470e3c 	.word	0x42470e3c

08003570 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08e      	sub	sp, #56	; 0x38
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a4c      	ldr	r2, [pc, #304]	; (80036c0 <HAL_SPI_MspInit+0x150>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d12d      	bne.n	80035ee <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	4b4b      	ldr	r3, [pc, #300]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	4a4a      	ldr	r2, [pc, #296]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 800359c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a0:	6413      	str	r3, [r2, #64]	; 0x40
 80035a2:	4b48      	ldr	r3, [pc, #288]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	4b44      	ldr	r3, [pc, #272]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a43      	ldr	r2, [pc, #268]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80035ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	2302      	movs	r3, #2
 80035d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d8:	2303      	movs	r3, #3
 80035da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80035dc:	2305      	movs	r3, #5
 80035de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035e4:	4619      	mov	r1, r3
 80035e6:	4838      	ldr	r0, [pc, #224]	; (80036c8 <HAL_SPI_MspInit+0x158>)
 80035e8:	f001 fbc8 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80035ec:	e064      	b.n	80036b8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI4)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a36      	ldr	r2, [pc, #216]	; (80036cc <HAL_SPI_MspInit+0x15c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d12d      	bne.n	8003654 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	4b31      	ldr	r3, [pc, #196]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	4a30      	ldr	r2, [pc, #192]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 8003602:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003606:	6453      	str	r3, [r2, #68]	; 0x44
 8003608:	4b2e      	ldr	r3, [pc, #184]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 800360a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	4b2a      	ldr	r3, [pc, #168]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	4a29      	ldr	r2, [pc, #164]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 800361e:	f043 0310 	orr.w	r3, r3, #16
 8003622:	6313      	str	r3, [r2, #48]	; 0x30
 8003624:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8003630:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363e:	2303      	movs	r3, #3
 8003640:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003642:	2305      	movs	r3, #5
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800364a:	4619      	mov	r1, r3
 800364c:	4820      	ldr	r0, [pc, #128]	; (80036d0 <HAL_SPI_MspInit+0x160>)
 800364e:	f001 fb95 	bl	8004d7c <HAL_GPIO_Init>
}
 8003652:	e031      	b.n	80036b8 <HAL_SPI_MspInit+0x148>
  else if(hspi->Instance==SPI5)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1e      	ldr	r2, [pc, #120]	; (80036d4 <HAL_SPI_MspInit+0x164>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d12c      	bne.n	80036b8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 8003668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800366c:	6453      	str	r3, [r2, #68]	; 0x44
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003676:	613b      	str	r3, [r7, #16]
 8003678:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	4a10      	ldr	r2, [pc, #64]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 8003684:	f043 0320 	orr.w	r3, r3, #32
 8003688:	6313      	str	r3, [r2, #48]	; 0x30
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <HAL_SPI_MspInit+0x154>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003696:	f44f 7360 	mov.w	r3, #896	; 0x380
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036a0:	2301      	movs	r3, #1
 80036a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a4:	2303      	movs	r3, #3
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80036a8:	2305      	movs	r3, #5
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b0:	4619      	mov	r1, r3
 80036b2:	4809      	ldr	r0, [pc, #36]	; (80036d8 <HAL_SPI_MspInit+0x168>)
 80036b4:	f001 fb62 	bl	8004d7c <HAL_GPIO_Init>
}
 80036b8:	bf00      	nop
 80036ba:	3738      	adds	r7, #56	; 0x38
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40003800 	.word	0x40003800
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40013400 	.word	0x40013400
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40015000 	.word	0x40015000
 80036d8:	40021400 	.word	0x40021400

080036dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ec:	d10e      	bne.n	800370c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_TIM_Base_MspInit+0x70>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <HAL_TIM_Base_MspInit+0x70>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6413      	str	r3, [r2, #64]	; 0x40
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_TIM_Base_MspInit+0x70>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800370a:	e01a      	b.n	8003742 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0f      	ldr	r2, [pc, #60]	; (8003750 <HAL_TIM_Base_MspInit+0x74>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d115      	bne.n	8003742 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
 800371a:	4b0c      	ldr	r3, [pc, #48]	; (800374c <HAL_TIM_Base_MspInit+0x70>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	4a0b      	ldr	r2, [pc, #44]	; (800374c <HAL_TIM_Base_MspInit+0x70>)
 8003720:	f043 0304 	orr.w	r3, r3, #4
 8003724:	6413      	str	r3, [r2, #64]	; 0x40
 8003726:	4b09      	ldr	r3, [pc, #36]	; (800374c <HAL_TIM_Base_MspInit+0x70>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	2100      	movs	r1, #0
 8003736:	201e      	movs	r0, #30
 8003738:	f001 fae9 	bl	8004d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800373c:	201e      	movs	r0, #30
 800373e:	f001 fb02 	bl	8004d46 <HAL_NVIC_EnableIRQ>
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	40000800 	.word	0x40000800

08003754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 030c 	add.w	r3, r7, #12
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003774:	d11d      	bne.n	80037b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	60bb      	str	r3, [r7, #8]
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_TIM_MspPostInit+0x68>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	4a0f      	ldr	r2, [pc, #60]	; (80037bc <HAL_TIM_MspPostInit+0x68>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6313      	str	r3, [r2, #48]	; 0x30
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <HAL_TIM_MspPostInit+0x68>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8003792:	2304      	movs	r3, #4
 8003794:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037a2:	2301      	movs	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80037a6:	f107 030c 	add.w	r3, r7, #12
 80037aa:	4619      	mov	r1, r3
 80037ac:	4804      	ldr	r0, [pc, #16]	; (80037c0 <HAL_TIM_MspPostInit+0x6c>)
 80037ae:	f001 fae5 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80037b2:	bf00      	nop
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40020000 	.word	0x40020000

080037c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08e      	sub	sp, #56	; 0x38
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a4b      	ldr	r2, [pc, #300]	; (8003910 <HAL_UART_MspInit+0x14c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d12c      	bne.n	8003840 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	4b4a      	ldr	r3, [pc, #296]	; (8003914 <HAL_UART_MspInit+0x150>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a49      	ldr	r2, [pc, #292]	; (8003914 <HAL_UART_MspInit+0x150>)
 80037f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_UART_MspInit+0x150>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037fe:	623b      	str	r3, [r7, #32]
 8003800:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_UART_MspInit+0x150>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a42      	ldr	r2, [pc, #264]	; (8003914 <HAL_UART_MspInit+0x150>)
 800380c:	f043 0310 	orr.w	r3, r3, #16
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b40      	ldr	r3, [pc, #256]	; (8003914 <HAL_UART_MspInit+0x150>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 800381e:	2303      	movs	r3, #3
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003826:	2301      	movs	r3, #1
 8003828:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800382a:	2303      	movs	r3, #3
 800382c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800382e:	2308      	movs	r3, #8
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003836:	4619      	mov	r1, r3
 8003838:	4837      	ldr	r0, [pc, #220]	; (8003918 <HAL_UART_MspInit+0x154>)
 800383a:	f001 fa9f 	bl	8004d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800383e:	e063      	b.n	8003908 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a35      	ldr	r2, [pc, #212]	; (800391c <HAL_UART_MspInit+0x158>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d12d      	bne.n	80038a6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	4b31      	ldr	r3, [pc, #196]	; (8003914 <HAL_UART_MspInit+0x150>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	4a30      	ldr	r2, [pc, #192]	; (8003914 <HAL_UART_MspInit+0x150>)
 8003854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003858:	6413      	str	r3, [r2, #64]	; 0x40
 800385a:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <HAL_UART_MspInit+0x150>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003862:	61bb      	str	r3, [r7, #24]
 8003864:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_UART_MspInit+0x150>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	4a29      	ldr	r2, [pc, #164]	; (8003914 <HAL_UART_MspInit+0x150>)
 8003870:	f043 0308 	orr.w	r3, r3, #8
 8003874:	6313      	str	r3, [r2, #48]	; 0x30
 8003876:	4b27      	ldr	r3, [pc, #156]	; (8003914 <HAL_UART_MspInit+0x150>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8003882:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003888:	2302      	movs	r3, #2
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003890:	2303      	movs	r3, #3
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003894:	2307      	movs	r3, #7
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003898:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800389c:	4619      	mov	r1, r3
 800389e:	4820      	ldr	r0, [pc, #128]	; (8003920 <HAL_UART_MspInit+0x15c>)
 80038a0:	f001 fa6c 	bl	8004d7c <HAL_GPIO_Init>
}
 80038a4:	e030      	b.n	8003908 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <HAL_UART_MspInit+0x160>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d12b      	bne.n	8003908 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038b0:	2300      	movs	r3, #0
 80038b2:	613b      	str	r3, [r7, #16]
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <HAL_UART_MspInit+0x150>)
 80038b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b8:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_UART_MspInit+0x150>)
 80038ba:	f043 0320 	orr.w	r3, r3, #32
 80038be:	6453      	str	r3, [r2, #68]	; 0x44
 80038c0:	4b14      	ldr	r3, [pc, #80]	; (8003914 <HAL_UART_MspInit+0x150>)
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_UART_MspInit+0x150>)
 80038d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d4:	4a0f      	ldr	r2, [pc, #60]	; (8003914 <HAL_UART_MspInit+0x150>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	6313      	str	r3, [r2, #48]	; 0x30
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <HAL_UART_MspInit+0x150>)
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 80038e8:	23c0      	movs	r3, #192	; 0xc0
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ec:	2302      	movs	r3, #2
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f4:	2303      	movs	r3, #3
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80038f8:	2308      	movs	r3, #8
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003900:	4619      	mov	r1, r3
 8003902:	4809      	ldr	r0, [pc, #36]	; (8003928 <HAL_UART_MspInit+0x164>)
 8003904:	f001 fa3a 	bl	8004d7c <HAL_GPIO_Init>
}
 8003908:	bf00      	nop
 800390a:	3738      	adds	r7, #56	; 0x38
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40007c00 	.word	0x40007c00
 8003914:	40023800 	.word	0x40023800
 8003918:	40021000 	.word	0x40021000
 800391c:	40004800 	.word	0x40004800
 8003920:	40020c00 	.word	0x40020c00
 8003924:	40011400 	.word	0x40011400
 8003928:	40020800 	.word	0x40020800

0800392c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800393e:	e7fe      	b.n	800393e <HardFault_Handler+0x4>

08003940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <MemManage_Handler+0x4>

08003946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <BusFault_Handler+0x4>

0800394c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <UsageFault_Handler+0x4>

08003952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800396e:	b480      	push	{r7}
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003980:	f000 fe34 	bl	80045ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800398c:	2001      	movs	r0, #1
 800398e:	f001 fbd3 	bl	8005138 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800399c:	4802      	ldr	r0, [pc, #8]	; (80039a8 <TIM4_IRQHandler+0x10>)
 800399e:	f004 fabf 	bl	8007f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000904 	.word	0x20000904

080039ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
	return 1;
 80039b0:	2301      	movs	r3, #1
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <_kill>:

int _kill(int pid, int sig)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039c6:	f009 f879 	bl	800cabc <__errno>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2216      	movs	r2, #22
 80039ce:	601a      	str	r2, [r3, #0]
	return -1;
 80039d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <_exit>:

void _exit (int status)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039e4:	f04f 31ff 	mov.w	r1, #4294967295
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ffe7 	bl	80039bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80039ee:	e7fe      	b.n	80039ee <_exit+0x12>

080039f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]
 8003a00:	e00a      	b.n	8003a18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a02:	f3af 8000 	nop.w
 8003a06:	4601      	mov	r1, r0
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	60ba      	str	r2, [r7, #8]
 8003a0e:	b2ca      	uxtb	r2, r1
 8003a10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	3301      	adds	r3, #1
 8003a16:	617b      	str	r3, [r7, #20]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	dbf0      	blt.n	8003a02 <_read+0x12>
	}

return len;
 8003a20:	687b      	ldr	r3, [r7, #4]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b086      	sub	sp, #24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	60f8      	str	r0, [r7, #12]
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	e009      	b.n	8003a50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	60ba      	str	r2, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	dbf1      	blt.n	8003a3c <_write+0x12>
	}
	return len;
 8003a58:	687b      	ldr	r3, [r7, #4]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <_close>:

int _close(int file)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
	return -1;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a8a:	605a      	str	r2, [r3, #4]
	return 0;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <_isatty>:

int _isatty(int file)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
	return 1;
 8003aa2:	2301      	movs	r3, #1
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
	return 0;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ad4:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <_sbrk+0x5c>)
 8003ad6:	4b15      	ldr	r3, [pc, #84]	; (8003b2c <_sbrk+0x60>)
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ae0:	4b13      	ldr	r3, [pc, #76]	; (8003b30 <_sbrk+0x64>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ae8:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <_sbrk+0x64>)
 8003aea:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <_sbrk+0x68>)
 8003aec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003aee:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <_sbrk+0x64>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d207      	bcs.n	8003b0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003afc:	f008 ffde 	bl	800cabc <__errno>
 8003b00:	4603      	mov	r3, r0
 8003b02:	220c      	movs	r2, #12
 8003b04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b06:	f04f 33ff 	mov.w	r3, #4294967295
 8003b0a:	e009      	b.n	8003b20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <_sbrk+0x64>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <_sbrk+0x64>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <_sbrk+0x64>)
 8003b1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20030000 	.word	0x20030000
 8003b2c:	00000400 	.word	0x00000400
 8003b30:	20000760 	.word	0x20000760
 8003b34:	20001a90 	.word	0x20001a90

08003b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b3c:	4b08      	ldr	r3, [pc, #32]	; (8003b60 <SystemInit+0x28>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b42:	4a07      	ldr	r2, [pc, #28]	; (8003b60 <SystemInit+0x28>)
 8003b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <SystemInit+0x28>)
 8003b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b52:	609a      	str	r2, [r3, #8]
#endif
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	e000ed00 	.word	0xe000ed00

08003b64 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8003b6e:	f107 020f 	add.w	r2, r7, #15
 8003b72:	1df9      	adds	r1, r7, #7
 8003b74:	2364      	movs	r3, #100	; 0x64
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4804      	ldr	r0, [pc, #16]	; (8003b8c <W25qxx_Spi+0x28>)
 8003b7c:	f003 fe02 	bl	8007784 <HAL_SPI_TransmitReceive>
	return ret;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200008ac 	.word	0x200008ac

08003b90 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2140      	movs	r1, #64	; 0x40
 8003baa:	4813      	ldr	r0, [pc, #76]	; (8003bf8 <W25qxx_ReadID+0x68>)
 8003bac:	f001 faaa 	bl	8005104 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8003bb0:	209f      	movs	r0, #159	; 0x9f
 8003bb2:	f7ff ffd7 	bl	8003b64 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003bb6:	20a5      	movs	r0, #165	; 0xa5
 8003bb8:	f7ff ffd4 	bl	8003b64 <W25qxx_Spi>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003bc0:	20a5      	movs	r0, #165	; 0xa5
 8003bc2:	f7ff ffcf 	bl	8003b64 <W25qxx_Spi>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003bca:	20a5      	movs	r0, #165	; 0xa5
 8003bcc:	f7ff ffca 	bl	8003b64 <W25qxx_Spi>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	2140      	movs	r1, #64	; 0x40
 8003bd8:	4807      	ldr	r0, [pc, #28]	; (8003bf8 <W25qxx_ReadID+0x68>)
 8003bda:	f001 fa93 	bl	8005104 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	021b      	lsls	r3, r3, #8
 8003be6:	4313      	orrs	r3, r2
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
	return Temp;
 8003bee:	68fb      	ldr	r3, [r7, #12]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40020c00 	.word	0x40020c00

08003bfc <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8003bfc:	b590      	push	{r4, r7, lr}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2140      	movs	r1, #64	; 0x40
 8003c06:	4816      	ldr	r0, [pc, #88]	; (8003c60 <W25qxx_ReadUniqID+0x64>)
 8003c08:	f001 fa7c 	bl	8005104 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003c0c:	204b      	movs	r0, #75	; 0x4b
 8003c0e:	f7ff ffa9 	bl	8003b64 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003c12:	2300      	movs	r3, #0
 8003c14:	71fb      	strb	r3, [r7, #7]
 8003c16:	e005      	b.n	8003c24 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c18:	20a5      	movs	r0, #165	; 0xa5
 8003c1a:	f7ff ffa3 	bl	8003b64 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	3301      	adds	r3, #1
 8003c22:	71fb      	strb	r3, [r7, #7]
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d9f6      	bls.n	8003c18 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	71bb      	strb	r3, [r7, #6]
 8003c2e:	e00b      	b.n	8003c48 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003c30:	79bc      	ldrb	r4, [r7, #6]
 8003c32:	20a5      	movs	r0, #165	; 0xa5
 8003c34:	f7ff ff96 	bl	8003b64 <W25qxx_Spi>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <W25qxx_ReadUniqID+0x68>)
 8003c3e:	4423      	add	r3, r4
 8003c40:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 8003c42:	79bb      	ldrb	r3, [r7, #6]
 8003c44:	3301      	adds	r3, #1
 8003c46:	71bb      	strb	r3, [r7, #6]
 8003c48:	79bb      	ldrb	r3, [r7, #6]
 8003c4a:	2b07      	cmp	r3, #7
 8003c4c:	d9f0      	bls.n	8003c30 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c4e:	2201      	movs	r2, #1
 8003c50:	2140      	movs	r1, #64	; 0x40
 8003c52:	4803      	ldr	r0, [pc, #12]	; (8003c60 <W25qxx_ReadUniqID+0x64>)
 8003c54:	f001 fa56 	bl	8005104 <HAL_GPIO_WritePin>
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd90      	pop	{r4, r7, pc}
 8003c60:	40020c00 	.word	0x40020c00
 8003c64:	200015e4 	.word	0x200015e4

08003c68 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2140      	movs	r1, #64	; 0x40
 8003c70:	4807      	ldr	r0, [pc, #28]	; (8003c90 <W25qxx_WriteEnable+0x28>)
 8003c72:	f001 fa47 	bl	8005104 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 8003c76:	2006      	movs	r0, #6
 8003c78:	f7ff ff74 	bl	8003b64 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	2140      	movs	r1, #64	; 0x40
 8003c80:	4803      	ldr	r0, [pc, #12]	; (8003c90 <W25qxx_WriteEnable+0x28>)
 8003c82:	f001 fa3f 	bl	8005104 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8003c86:	2001      	movs	r0, #1
 8003c88:	f000 fcd0 	bl	800462c <HAL_Delay>
}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40020c00 	.word	0x40020c00

08003c94 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	481c      	ldr	r0, [pc, #112]	; (8003d18 <W25qxx_ReadStatusRegister+0x84>)
 8003ca8:	f001 fa2c 	bl	8005104 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10c      	bne.n	8003ccc <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8003cb2:	2005      	movs	r0, #5
 8003cb4:	f7ff ff56 	bl	8003b64 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003cb8:	20a5      	movs	r0, #165	; 0xa5
 8003cba:	f7ff ff53 	bl	8003b64 <W25qxx_Spi>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8003cc2:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <W25qxx_ReadStatusRegister+0x88>)
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8003cca:	e01b      	b.n	8003d04 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d10c      	bne.n	8003cec <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8003cd2:	2035      	movs	r0, #53	; 0x35
 8003cd4:	f7ff ff46 	bl	8003b64 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003cd8:	20a5      	movs	r0, #165	; 0xa5
 8003cda:	f7ff ff43 	bl	8003b64 <W25qxx_Spi>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <W25qxx_ReadStatusRegister+0x88>)
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8003cea:	e00b      	b.n	8003d04 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8003cec:	2015      	movs	r0, #21
 8003cee:	f7ff ff39 	bl	8003b64 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003cf2:	20a5      	movs	r0, #165	; 0xa5
 8003cf4:	f7ff ff36 	bl	8003b64 <W25qxx_Spi>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8003cfc:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <W25qxx_ReadStatusRegister+0x88>)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003d04:	2201      	movs	r2, #1
 8003d06:	2140      	movs	r1, #64	; 0x40
 8003d08:	4803      	ldr	r0, [pc, #12]	; (8003d18 <W25qxx_ReadStatusRegister+0x84>)
 8003d0a:	f001 f9fb 	bl	8005104 <HAL_GPIO_WritePin>
	return status;
 8003d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40020c00 	.word	0x40020c00
 8003d1c:	200015e4 	.word	0x200015e4

08003d20 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 8003d24:	2001      	movs	r0, #1
 8003d26:	f000 fc81 	bl	800462c <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2140      	movs	r1, #64	; 0x40
 8003d2e:	480f      	ldr	r0, [pc, #60]	; (8003d6c <W25qxx_WaitForWriteEnd+0x4c>)
 8003d30:	f001 f9e8 	bl	8005104 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 8003d34:	2005      	movs	r0, #5
 8003d36:	f7ff ff15 	bl	8003b64 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003d3a:	20a5      	movs	r0, #165	; 0xa5
 8003d3c:	f7ff ff12 	bl	8003b64 <W25qxx_Spi>
 8003d40:	4603      	mov	r3, r0
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <W25qxx_WaitForWriteEnd+0x50>)
 8003d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f000 fc6e 	bl	800462c <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <W25qxx_WaitForWriteEnd+0x50>)
 8003d52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1ed      	bne.n	8003d3a <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003d5e:	2201      	movs	r2, #1
 8003d60:	2140      	movs	r1, #64	; 0x40
 8003d62:	4802      	ldr	r0, [pc, #8]	; (8003d6c <W25qxx_WaitForWriteEnd+0x4c>)
 8003d64:	f001 f9ce 	bl	8005104 <HAL_GPIO_WritePin>
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40020c00 	.word	0x40020c00
 8003d70:	200015e4 	.word	0x200015e4

08003d74 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003d7a:	4b90      	ldr	r3, [pc, #576]	; (8003fbc <W25qxx_Init+0x248>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8003d82:	e002      	b.n	8003d8a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003d84:	2001      	movs	r0, #1
 8003d86:	f000 fc51 	bl	800462c <HAL_Delay>
	while (HAL_GetTick() < 100)
 8003d8a:	f000 fc43 	bl	8004614 <HAL_GetTick>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b63      	cmp	r3, #99	; 0x63
 8003d92:	d9f7      	bls.n	8003d84 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003d94:	2201      	movs	r2, #1
 8003d96:	2140      	movs	r1, #64	; 0x40
 8003d98:	4889      	ldr	r0, [pc, #548]	; (8003fc0 <W25qxx_Init+0x24c>)
 8003d9a:	f001 f9b3 	bl	8005104 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8003d9e:	2064      	movs	r0, #100	; 0x64
 8003da0:	f000 fc44 	bl	800462c <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 8003da4:	4887      	ldr	r0, [pc, #540]	; (8003fc4 <W25qxx_Init+0x250>)
 8003da6:	f009 fe7b 	bl	800daa0 <puts>
#endif
	id = W25qxx_ReadID();
 8003daa:	f7ff fef1 	bl	8003b90 <W25qxx_ReadID>
 8003dae:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4885      	ldr	r0, [pc, #532]	; (8003fc8 <W25qxx_Init+0x254>)
 8003db4:	f009 fdee 	bl	800d994 <iprintf>
#endif
	switch (id & 0x000000FF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	3b11      	subs	r3, #17
 8003dbe:	2b0f      	cmp	r3, #15
 8003dc0:	f200 808b 	bhi.w	8003eda <W25qxx_Init+0x166>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <W25qxx_Init+0x58>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ec7 	.word	0x08003ec7
 8003dd0:	08003eb3 	.word	0x08003eb3
 8003dd4:	08003e9f 	.word	0x08003e9f
 8003dd8:	08003e8b 	.word	0x08003e8b
 8003ddc:	08003e77 	.word	0x08003e77
 8003de0:	08003e63 	.word	0x08003e63
 8003de4:	08003e4f 	.word	0x08003e4f
 8003de8:	08003e39 	.word	0x08003e39
 8003dec:	08003e23 	.word	0x08003e23
 8003df0:	08003edb 	.word	0x08003edb
 8003df4:	08003edb 	.word	0x08003edb
 8003df8:	08003edb 	.word	0x08003edb
 8003dfc:	08003edb 	.word	0x08003edb
 8003e00:	08003edb 	.word	0x08003edb
 8003e04:	08003edb 	.word	0x08003edb
 8003e08:	08003e0d 	.word	0x08003e0d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8003e0c:	4b6b      	ldr	r3, [pc, #428]	; (8003fbc <W25qxx_Init+0x248>)
 8003e0e:	220a      	movs	r2, #10
 8003e10:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8003e12:	4b6a      	ldr	r3, [pc, #424]	; (8003fbc <W25qxx_Init+0x248>)
 8003e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e18:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8003e1a:	486c      	ldr	r0, [pc, #432]	; (8003fcc <W25qxx_Init+0x258>)
 8003e1c:	f009 fe40 	bl	800daa0 <puts>
#endif
		break;
 8003e20:	e064      	b.n	8003eec <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8003e22:	4b66      	ldr	r3, [pc, #408]	; (8003fbc <W25qxx_Init+0x248>)
 8003e24:	2209      	movs	r2, #9
 8003e26:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8003e28:	4b64      	ldr	r3, [pc, #400]	; (8003fbc <W25qxx_Init+0x248>)
 8003e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e2e:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8003e30:	4867      	ldr	r0, [pc, #412]	; (8003fd0 <W25qxx_Init+0x25c>)
 8003e32:	f009 fe35 	bl	800daa0 <puts>
#endif
		break;
 8003e36:	e059      	b.n	8003eec <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8003e38:	4b60      	ldr	r3, [pc, #384]	; (8003fbc <W25qxx_Init+0x248>)
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8003e3e:	4b5f      	ldr	r3, [pc, #380]	; (8003fbc <W25qxx_Init+0x248>)
 8003e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e44:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 8003e46:	4863      	ldr	r0, [pc, #396]	; (8003fd4 <W25qxx_Init+0x260>)
 8003e48:	f009 fe2a 	bl	800daa0 <puts>
#endif
		break;
 8003e4c:	e04e      	b.n	8003eec <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <W25qxx_Init+0x248>)
 8003e50:	2207      	movs	r2, #7
 8003e52:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8003e54:	4b59      	ldr	r3, [pc, #356]	; (8003fbc <W25qxx_Init+0x248>)
 8003e56:	2280      	movs	r2, #128	; 0x80
 8003e58:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8003e5a:	485f      	ldr	r0, [pc, #380]	; (8003fd8 <W25qxx_Init+0x264>)
 8003e5c:	f009 fe20 	bl	800daa0 <puts>
#endif
		break;
 8003e60:	e044      	b.n	8003eec <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8003e62:	4b56      	ldr	r3, [pc, #344]	; (8003fbc <W25qxx_Init+0x248>)
 8003e64:	2206      	movs	r2, #6
 8003e66:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8003e68:	4b54      	ldr	r3, [pc, #336]	; (8003fbc <W25qxx_Init+0x248>)
 8003e6a:	2240      	movs	r2, #64	; 0x40
 8003e6c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8003e6e:	485b      	ldr	r0, [pc, #364]	; (8003fdc <W25qxx_Init+0x268>)
 8003e70:	f009 fe16 	bl	800daa0 <puts>
#endif
		break;
 8003e74:	e03a      	b.n	8003eec <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8003e76:	4b51      	ldr	r3, [pc, #324]	; (8003fbc <W25qxx_Init+0x248>)
 8003e78:	2205      	movs	r2, #5
 8003e7a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8003e7c:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <W25qxx_Init+0x248>)
 8003e7e:	2220      	movs	r2, #32
 8003e80:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 8003e82:	4857      	ldr	r0, [pc, #348]	; (8003fe0 <W25qxx_Init+0x26c>)
 8003e84:	f009 fe0c 	bl	800daa0 <puts>
#endif
		break;
 8003e88:	e030      	b.n	8003eec <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8003e8a:	4b4c      	ldr	r3, [pc, #304]	; (8003fbc <W25qxx_Init+0x248>)
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8003e90:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <W25qxx_Init+0x248>)
 8003e92:	2210      	movs	r2, #16
 8003e94:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 8003e96:	4853      	ldr	r0, [pc, #332]	; (8003fe4 <W25qxx_Init+0x270>)
 8003e98:	f009 fe02 	bl	800daa0 <puts>
#endif
		break;
 8003e9c:	e026      	b.n	8003eec <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8003e9e:	4b47      	ldr	r3, [pc, #284]	; (8003fbc <W25qxx_Init+0x248>)
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003ea4:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <W25qxx_Init+0x248>)
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 8003eaa:	484f      	ldr	r0, [pc, #316]	; (8003fe8 <W25qxx_Init+0x274>)
 8003eac:	f009 fdf8 	bl	800daa0 <puts>
#endif
		break;
 8003eb0:	e01c      	b.n	8003eec <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8003eb2:	4b42      	ldr	r3, [pc, #264]	; (8003fbc <W25qxx_Init+0x248>)
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003eb8:	4b40      	ldr	r3, [pc, #256]	; (8003fbc <W25qxx_Init+0x248>)
 8003eba:	2204      	movs	r2, #4
 8003ebc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 8003ebe:	484b      	ldr	r0, [pc, #300]	; (8003fec <W25qxx_Init+0x278>)
 8003ec0:	f009 fdee 	bl	800daa0 <puts>
#endif
		break;
 8003ec4:	e012      	b.n	8003eec <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8003ec6:	4b3d      	ldr	r3, [pc, #244]	; (8003fbc <W25qxx_Init+0x248>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8003ecc:	4b3b      	ldr	r3, [pc, #236]	; (8003fbc <W25qxx_Init+0x248>)
 8003ece:	2202      	movs	r2, #2
 8003ed0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 8003ed2:	4847      	ldr	r0, [pc, #284]	; (8003ff0 <W25qxx_Init+0x27c>)
 8003ed4:	f009 fde4 	bl	800daa0 <puts>
#endif
		break;
 8003ed8:	e008      	b.n	8003eec <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 8003eda:	4846      	ldr	r0, [pc, #280]	; (8003ff4 <W25qxx_Init+0x280>)
 8003edc:	f009 fde0 	bl	800daa0 <puts>
#endif
		w25qxx.Lock = 0;
 8003ee0:	4b36      	ldr	r3, [pc, #216]	; (8003fbc <W25qxx_Init+0x248>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	e063      	b.n	8003fb4 <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8003eec:	4b33      	ldr	r3, [pc, #204]	; (8003fbc <W25qxx_Init+0x248>)
 8003eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ef2:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8003ef4:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <W25qxx_Init+0x248>)
 8003ef6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003efa:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003efc:	4b2f      	ldr	r3, [pc, #188]	; (8003fbc <W25qxx_Init+0x248>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4a2e      	ldr	r2, [pc, #184]	; (8003fbc <W25qxx_Init+0x248>)
 8003f04:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8003f06:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <W25qxx_Init+0x248>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	4a2c      	ldr	r2, [pc, #176]	; (8003fbc <W25qxx_Init+0x248>)
 8003f0c:	6912      	ldr	r2, [r2, #16]
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <W25qxx_Init+0x248>)
 8003f14:	8952      	ldrh	r2, [r2, #10]
 8003f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f1a:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <W25qxx_Init+0x248>)
 8003f1c:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003f1e:	4b27      	ldr	r3, [pc, #156]	; (8003fbc <W25qxx_Init+0x248>)
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	4a25      	ldr	r2, [pc, #148]	; (8003fbc <W25qxx_Init+0x248>)
 8003f26:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8003f28:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <W25qxx_Init+0x248>)
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <W25qxx_Init+0x248>)
 8003f2e:	6912      	ldr	r2, [r2, #16]
 8003f30:	fb02 f303 	mul.w	r3, r2, r3
 8003f34:	0a9b      	lsrs	r3, r3, #10
 8003f36:	4a21      	ldr	r2, [pc, #132]	; (8003fbc <W25qxx_Init+0x248>)
 8003f38:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003f3a:	f7ff fe5f 	bl	8003bfc <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003f3e:	2001      	movs	r0, #1
 8003f40:	f7ff fea8 	bl	8003c94 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8003f44:	2002      	movs	r0, #2
 8003f46:	f7ff fea5 	bl	8003c94 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003f4a:	2003      	movs	r0, #3
 8003f4c:	f7ff fea2 	bl	8003c94 <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8003f50:	4b1a      	ldr	r3, [pc, #104]	; (8003fbc <W25qxx_Init+0x248>)
 8003f52:	895b      	ldrh	r3, [r3, #10]
 8003f54:	4619      	mov	r1, r3
 8003f56:	4828      	ldr	r0, [pc, #160]	; (8003ff8 <W25qxx_Init+0x284>)
 8003f58:	f009 fd1c 	bl	800d994 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <W25qxx_Init+0x248>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4619      	mov	r1, r3
 8003f62:	4826      	ldr	r0, [pc, #152]	; (8003ffc <W25qxx_Init+0x288>)
 8003f64:	f009 fd16 	bl	800d994 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8003f68:	4b14      	ldr	r3, [pc, #80]	; (8003fbc <W25qxx_Init+0x248>)
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4824      	ldr	r0, [pc, #144]	; (8004000 <W25qxx_Init+0x28c>)
 8003f70:	f009 fd10 	bl	800d994 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 8003f74:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <W25qxx_Init+0x248>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4822      	ldr	r0, [pc, #136]	; (8004004 <W25qxx_Init+0x290>)
 8003f7c:	f009 fd0a 	bl	800d994 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <W25qxx_Init+0x248>)
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	4619      	mov	r1, r3
 8003f86:	4820      	ldr	r0, [pc, #128]	; (8004008 <W25qxx_Init+0x294>)
 8003f88:	f009 fd04 	bl	800d994 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 8003f8c:	4b0b      	ldr	r3, [pc, #44]	; (8003fbc <W25qxx_Init+0x248>)
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	4619      	mov	r1, r3
 8003f92:	481e      	ldr	r0, [pc, #120]	; (800400c <W25qxx_Init+0x298>)
 8003f94:	f009 fcfe 	bl	800d994 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 8003f98:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <W25qxx_Init+0x248>)
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	481c      	ldr	r0, [pc, #112]	; (8004010 <W25qxx_Init+0x29c>)
 8003fa0:	f009 fcf8 	bl	800d994 <iprintf>
	printf("w25qxx Init Done\r\n");
 8003fa4:	481b      	ldr	r0, [pc, #108]	; (8004014 <W25qxx_Init+0x2a0>)
 8003fa6:	f009 fd7b 	bl	800daa0 <puts>
#endif
	w25qxx.Lock = 0;
 8003faa:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <W25qxx_Init+0x248>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8003fb2:	2301      	movs	r3, #1
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200015e4 	.word	0x200015e4
 8003fc0:	40020c00 	.word	0x40020c00
 8003fc4:	0801169c 	.word	0x0801169c
 8003fc8:	080116b4 	.word	0x080116b4
 8003fcc:	080116c8 	.word	0x080116c8
 8003fd0:	080116e0 	.word	0x080116e0
 8003fd4:	080116f8 	.word	0x080116f8
 8003fd8:	08011710 	.word	0x08011710
 8003fdc:	08011728 	.word	0x08011728
 8003fe0:	08011740 	.word	0x08011740
 8003fe4:	08011758 	.word	0x08011758
 8003fe8:	08011770 	.word	0x08011770
 8003fec:	08011788 	.word	0x08011788
 8003ff0:	080117a0 	.word	0x080117a0
 8003ff4:	080117b8 	.word	0x080117b8
 8003ff8:	080117cc 	.word	0x080117cc
 8003ffc:	080117ec 	.word	0x080117ec
 8004000:	08011804 	.word	0x08011804
 8004004:	08011824 	.word	0x08011824
 8004008:	08011840 	.word	0x08011840
 800400c:	08011860 	.word	0x08011860
 8004010:	0801187c 	.word	0x0801187c
 8004014:	0801189c 	.word	0x0801189c

08004018 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8004020:	e002      	b.n	8004028 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 8004022:	2001      	movs	r0, #1
 8004024:	f000 fb02 	bl	800462c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004028:	4b31      	ldr	r3, [pc, #196]	; (80040f0 <W25qxx_EraseBlock+0xd8>)
 800402a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800402e:	2b01      	cmp	r3, #1
 8004030:	d0f7      	beq.n	8004022 <W25qxx_EraseBlock+0xa>
	w25qxx.Lock = 1;
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <W25qxx_EraseBlock+0xd8>)
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock %d Begin...\r\n", BlockAddr);
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	482d      	ldr	r0, [pc, #180]	; (80040f4 <W25qxx_EraseBlock+0xdc>)
 800403e:	f009 fca9 	bl	800d994 <iprintf>
	W25qxx_Delay(100);
 8004042:	2064      	movs	r0, #100	; 0x64
 8004044:	f000 faf2 	bl	800462c <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 8004048:	f000 fae4 	bl	8004614 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]
#endif
	W25qxx_WaitForWriteEnd();
 800404e:	f7ff fe67 	bl	8003d20 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 8004052:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <W25qxx_EraseBlock+0xd8>)
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8004060:	f7ff fe02 	bl	8003c68 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004064:	2200      	movs	r2, #0
 8004066:	2140      	movs	r1, #64	; 0x40
 8004068:	4823      	ldr	r0, [pc, #140]	; (80040f8 <W25qxx_EraseBlock+0xe0>)
 800406a:	f001 f84b 	bl	8005104 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <W25qxx_EraseBlock+0xd8>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b08      	cmp	r3, #8
 8004074:	d909      	bls.n	800408a <W25qxx_EraseBlock+0x72>
	{
		W25qxx_Spi(0xDC);
 8004076:	20dc      	movs	r0, #220	; 0xdc
 8004078:	f7ff fd74 	bl	8003b64 <W25qxx_Spi>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	0e1b      	lsrs	r3, r3, #24
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff fd6e 	bl	8003b64 <W25qxx_Spi>
 8004088:	e002      	b.n	8004090 <W25qxx_EraseBlock+0x78>
	}
	else
	{
		W25qxx_Spi(0xD8);
 800408a:	20d8      	movs	r0, #216	; 0xd8
 800408c:	f7ff fd6a 	bl	8003b64 <W25qxx_Spi>
	}
	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	b2db      	uxtb	r3, r3
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fd64 	bl	8003b64 <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0a1b      	lsrs	r3, r3, #8
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fd5e 	bl	8003b64 <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fd59 	bl	8003b64 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80040b2:	2201      	movs	r2, #1
 80040b4:	2140      	movs	r1, #64	; 0x40
 80040b6:	4810      	ldr	r0, [pc, #64]	; (80040f8 <W25qxx_EraseBlock+0xe0>)
 80040b8:	f001 f824 	bl	8005104 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80040bc:	f7ff fe30 	bl	8003d20 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms\r\n", HAL_GetTick() - StartTime);
 80040c0:	f000 faa8 	bl	8004614 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	4619      	mov	r1, r3
 80040cc:	480b      	ldr	r0, [pc, #44]	; (80040fc <W25qxx_EraseBlock+0xe4>)
 80040ce:	f009 fc61 	bl	800d994 <iprintf>
	W25qxx_Delay(100);
 80040d2:	2064      	movs	r0, #100	; 0x64
 80040d4:	f000 faaa 	bl	800462c <HAL_Delay>
#endif
	W25qxx_Delay(1);
 80040d8:	2001      	movs	r0, #1
 80040da:	f000 faa7 	bl	800462c <HAL_Delay>
	w25qxx.Lock = 0;
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <W25qxx_EraseBlock+0xd8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	200015e4 	.word	0x200015e4
 80040f4:	08011940 	.word	0x08011940
 80040f8:	40020c00 	.word	0x40020c00
 80040fc:	08011960 	.word	0x08011960

08004100 <W25qxx_PageToBlock>:
{
	return ((PageAddress * w25qxx.PageSize) / w25qxx.SectorSize);
}
//###################################################################################################################
uint32_t W25qxx_PageToBlock(uint32_t PageAddress)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	return ((PageAddress * w25qxx.PageSize) / w25qxx.BlockSize);
 8004108:	4b07      	ldr	r3, [pc, #28]	; (8004128 <W25qxx_PageToBlock+0x28>)
 800410a:	895b      	ldrh	r3, [r3, #10]
 800410c:	461a      	mov	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	fb03 f202 	mul.w	r2, r3, r2
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <W25qxx_PageToBlock+0x28>)
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	200015e4 	.word	0x200015e4

0800412c <W25qxx_IsEmptyPage>:
{
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
}
//###################################################################################################################
bool W25qxx_IsEmptyPage(uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_PageSize)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b090      	sub	sp, #64	; 0x40
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8004138:	e002      	b.n	8004140 <W25qxx_IsEmptyPage+0x14>
		W25qxx_Delay(1);
 800413a:	2001      	movs	r0, #1
 800413c:	f000 fa76 	bl	800462c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004140:	4b85      	ldr	r3, [pc, #532]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 8004142:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004146:	2b01      	cmp	r3, #1
 8004148:	d0f7      	beq.n	800413a <W25qxx_IsEmptyPage+0xe>
	w25qxx.Lock = 1;
 800414a:	4b83      	ldr	r3, [pc, #524]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToCheck_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToCheck_up_to_PageSize == 0))
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4413      	add	r3, r2
 8004158:	4a7f      	ldr	r2, [pc, #508]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 800415a:	8952      	ldrh	r2, [r2, #10]
 800415c:	4293      	cmp	r3, r2
 800415e:	d802      	bhi.n	8004166 <W25qxx_IsEmptyPage+0x3a>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d105      	bne.n	8004172 <W25qxx_IsEmptyPage+0x46>
		NumByteToCheck_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8004166:	4b7c      	ldr	r3, [pc, #496]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 8004168:	895b      	ldrh	r3, [r3, #10]
 800416a:	461a      	mov	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	607b      	str	r3, [r7, #4]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckPage:%d, Offset:%d, Bytes:%d begin...\r\n", Page_Address, OffsetInByte, NumByteToCheck_up_to_PageSize);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	68f9      	ldr	r1, [r7, #12]
 8004178:	4878      	ldr	r0, [pc, #480]	; (800435c <W25qxx_IsEmptyPage+0x230>)
 800417a:	f009 fc0b 	bl	800d994 <iprintf>
	W25qxx_Delay(100);
 800417e:	2064      	movs	r0, #100	; 0x64
 8004180:	f000 fa54 	bl	800462c <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 8004184:	f000 fa46 	bl	8004614 <HAL_GetTick>
 8004188:	6378      	str	r0, [r7, #52]	; 0x34
#endif
	uint8_t pBuffer[32];
	uint32_t WorkAddress;
	uint32_t i;
	for (i = OffsetInByte; i < w25qxx.PageSize; i += sizeof(pBuffer))
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418e:	e057      	b.n	8004240 <W25qxx_IsEmptyPage+0x114>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004190:	2200      	movs	r2, #0
 8004192:	2140      	movs	r1, #64	; 0x40
 8004194:	4872      	ldr	r0, [pc, #456]	; (8004360 <W25qxx_IsEmptyPage+0x234>)
 8004196:	f000 ffb5 	bl	8005104 <HAL_GPIO_WritePin>
		WorkAddress = (i + Page_Address * w25qxx.PageSize);
 800419a:	4b6f      	ldr	r3, [pc, #444]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 800419c:	895b      	ldrh	r3, [r3, #10]
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	fb03 f302 	mul.w	r3, r3, r2
 80041a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041a8:	4413      	add	r3, r2
 80041aa:	633b      	str	r3, [r7, #48]	; 0x30
		if (w25qxx.ID >= W25Q256)
 80041ac:	4b6a      	ldr	r3, [pc, #424]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d909      	bls.n	80041c8 <W25qxx_IsEmptyPage+0x9c>
		{
			W25qxx_Spi(0x0C);
 80041b4:	200c      	movs	r0, #12
 80041b6:	f7ff fcd5 	bl	8003b64 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	0e1b      	lsrs	r3, r3, #24
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fccf 	bl	8003b64 <W25qxx_Spi>
 80041c6:	e002      	b.n	80041ce <W25qxx_IsEmptyPage+0xa2>
		}
		else
		{
			W25qxx_Spi(0x0B);
 80041c8:	200b      	movs	r0, #11
 80041ca:	f7ff fccb 	bl	8003b64 <W25qxx_Spi>
		}
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fcc5 	bl	8003b64 <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fcbf 	bl	8003b64 <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fcba 	bl	8003b64 <W25qxx_Spi>
		W25qxx_Spi(0);
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7ff fcb7 	bl	8003b64 <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, sizeof(pBuffer), 100);
 80041f6:	f107 0110 	add.w	r1, r7, #16
 80041fa:	2364      	movs	r3, #100	; 0x64
 80041fc:	2220      	movs	r2, #32
 80041fe:	4859      	ldr	r0, [pc, #356]	; (8004364 <W25qxx_IsEmptyPage+0x238>)
 8004200:	f003 f9b7 	bl	8007572 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004204:	2201      	movs	r2, #1
 8004206:	2140      	movs	r1, #64	; 0x40
 8004208:	4855      	ldr	r0, [pc, #340]	; (8004360 <W25qxx_IsEmptyPage+0x234>)
 800420a:	f000 ff7b 	bl	8005104 <HAL_GPIO_WritePin>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 800420e:	2300      	movs	r3, #0
 8004210:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004214:	e00d      	b.n	8004232 <W25qxx_IsEmptyPage+0x106>
		{
			if (pBuffer[x] != 0xFF)
 8004216:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800421a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800421e:	4413      	add	r3, r2
 8004220:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8004224:	2bff      	cmp	r3, #255	; 0xff
 8004226:	d17e      	bne.n	8004326 <W25qxx_IsEmptyPage+0x1fa>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 8004228:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800422c:	3301      	adds	r3, #1
 800422e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004232:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004236:	2b1f      	cmp	r3, #31
 8004238:	d9ed      	bls.n	8004216 <W25qxx_IsEmptyPage+0xea>
	for (i = OffsetInByte; i < w25qxx.PageSize; i += sizeof(pBuffer))
 800423a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423c:	3320      	adds	r3, #32
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004240:	4b45      	ldr	r3, [pc, #276]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 8004242:	895b      	ldrh	r3, [r3, #10]
 8004244:	461a      	mov	r2, r3
 8004246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004248:	4293      	cmp	r3, r2
 800424a:	d3a1      	bcc.n	8004190 <W25qxx_IsEmptyPage+0x64>
				goto NOT_EMPTY;
		}
	}
	if ((w25qxx.PageSize + OffsetInByte) % sizeof(pBuffer) != 0)
 800424c:	4b42      	ldr	r3, [pc, #264]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 800424e:	895b      	ldrh	r3, [r3, #10]
 8004250:	461a      	mov	r2, r3
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	4413      	add	r3, r2
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2b00      	cmp	r3, #0
 800425c:	d051      	beq.n	8004302 <W25qxx_IsEmptyPage+0x1d6>
	{
		i -= sizeof(pBuffer);
 800425e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004260:	3b20      	subs	r3, #32
 8004262:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (; i < w25qxx.PageSize; i++)
 8004264:	e047      	b.n	80042f6 <W25qxx_IsEmptyPage+0x1ca>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8004266:	2200      	movs	r2, #0
 8004268:	2140      	movs	r1, #64	; 0x40
 800426a:	483d      	ldr	r0, [pc, #244]	; (8004360 <W25qxx_IsEmptyPage+0x234>)
 800426c:	f000 ff4a 	bl	8005104 <HAL_GPIO_WritePin>
			WorkAddress = (i + Page_Address * w25qxx.PageSize);
 8004270:	4b39      	ldr	r3, [pc, #228]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 8004272:	895b      	ldrh	r3, [r3, #10]
 8004274:	461a      	mov	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	fb03 f302 	mul.w	r3, r3, r2
 800427c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800427e:	4413      	add	r3, r2
 8004280:	633b      	str	r3, [r7, #48]	; 0x30
			W25qxx_Spi(0x0B);
 8004282:	200b      	movs	r0, #11
 8004284:	f7ff fc6e 	bl	8003b64 <W25qxx_Spi>
			if (w25qxx.ID >= W25Q256)
 8004288:	4b33      	ldr	r3, [pc, #204]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d909      	bls.n	80042a4 <W25qxx_IsEmptyPage+0x178>
			{
				W25qxx_Spi(0x0C);
 8004290:	200c      	movs	r0, #12
 8004292:	f7ff fc67 	bl	8003b64 <W25qxx_Spi>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	0e1b      	lsrs	r3, r3, #24
 800429a:	b2db      	uxtb	r3, r3
 800429c:	4618      	mov	r0, r3
 800429e:	f7ff fc61 	bl	8003b64 <W25qxx_Spi>
 80042a2:	e002      	b.n	80042aa <W25qxx_IsEmptyPage+0x17e>
			}
			else
			{
				W25qxx_Spi(0x0B);
 80042a4:	200b      	movs	r0, #11
 80042a6:	f7ff fc5d 	bl	8003b64 <W25qxx_Spi>
			}
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7ff fc57 	bl	8003b64 <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff fc51 	bl	8003b64 <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff fc4c 	bl	8003b64 <W25qxx_Spi>
			W25qxx_Spi(0);
 80042cc:	2000      	movs	r0, #0
 80042ce:	f7ff fc49 	bl	8003b64 <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, 1, 100);
 80042d2:	f107 0110 	add.w	r1, r7, #16
 80042d6:	2364      	movs	r3, #100	; 0x64
 80042d8:	2201      	movs	r2, #1
 80042da:	4822      	ldr	r0, [pc, #136]	; (8004364 <W25qxx_IsEmptyPage+0x238>)
 80042dc:	f003 f949 	bl	8007572 <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80042e0:	2201      	movs	r2, #1
 80042e2:	2140      	movs	r1, #64	; 0x40
 80042e4:	481e      	ldr	r0, [pc, #120]	; (8004360 <W25qxx_IsEmptyPage+0x234>)
 80042e6:	f000 ff0d 	bl	8005104 <HAL_GPIO_WritePin>
			if (pBuffer[0] != 0xFF)
 80042ea:	7c3b      	ldrb	r3, [r7, #16]
 80042ec:	2bff      	cmp	r3, #255	; 0xff
 80042ee:	d11c      	bne.n	800432a <W25qxx_IsEmptyPage+0x1fe>
		for (; i < w25qxx.PageSize; i++)
 80042f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f2:	3301      	adds	r3, #1
 80042f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 80042f8:	895b      	ldrh	r3, [r3, #10]
 80042fa:	461a      	mov	r2, r3
 80042fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fe:	4293      	cmp	r3, r2
 8004300:	d3b1      	bcc.n	8004266 <W25qxx_IsEmptyPage+0x13a>
				goto NOT_EMPTY;
		}
	}
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckPage is Empty in %d ms\r\n", HAL_GetTick() - StartTime);
 8004302:	f000 f987 	bl	8004614 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	4619      	mov	r1, r3
 800430e:	4816      	ldr	r0, [pc, #88]	; (8004368 <W25qxx_IsEmptyPage+0x23c>)
 8004310:	f009 fb40 	bl	800d994 <iprintf>
	W25qxx_Delay(100);
 8004314:	2064      	movs	r0, #100	; 0x64
 8004316:	f000 f989 	bl	800462c <HAL_Delay>
#endif
	w25qxx.Lock = 0;
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8004322:	2301      	movs	r3, #1
 8004324:	e013      	b.n	800434e <W25qxx_IsEmptyPage+0x222>
				goto NOT_EMPTY;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <W25qxx_IsEmptyPage+0x200>
				goto NOT_EMPTY;
 800432a:	bf00      	nop
NOT_EMPTY:
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckPage is Not Empty in %d ms\r\n", HAL_GetTick() - StartTime);
 800432c:	f000 f972 	bl	8004614 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	4619      	mov	r1, r3
 8004338:	480c      	ldr	r0, [pc, #48]	; (800436c <W25qxx_IsEmptyPage+0x240>)
 800433a:	f009 fb2b 	bl	800d994 <iprintf>
	W25qxx_Delay(100);
 800433e:	2064      	movs	r0, #100	; 0x64
 8004340:	f000 f974 	bl	800462c <HAL_Delay>
#endif
	w25qxx.Lock = 0;
 8004344:	4b04      	ldr	r3, [pc, #16]	; (8004358 <W25qxx_IsEmptyPage+0x22c>)
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3740      	adds	r7, #64	; 0x40
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	200015e4 	.word	0x200015e4
 800435c:	08011988 	.word	0x08011988
 8004360:	40020c00 	.word	0x40020c00
 8004364:	200008ac 	.word	0x200008ac
 8004368:	080119bc 	.word	0x080119bc
 800436c:	080119e4 	.word	0x080119e4

08004370 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 800437e:	e002      	b.n	8004386 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8004380:	2001      	movs	r0, #1
 8004382:	f000 f953 	bl	800462c <HAL_Delay>
	while (w25qxx.Lock == 1)
 8004386:	4b54      	ldr	r3, [pc, #336]	; (80044d8 <W25qxx_ReadPage+0x168>)
 8004388:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800438c:	2b01      	cmp	r3, #1
 800438e:	d0f7      	beq.n	8004380 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8004390:	4b51      	ldr	r3, [pc, #324]	; (80044d8 <W25qxx_ReadPage+0x168>)
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8004398:	4b4f      	ldr	r3, [pc, #316]	; (80044d8 <W25qxx_ReadPage+0x168>)
 800439a:	895b      	ldrh	r3, [r3, #10]
 800439c:	461a      	mov	r2, r3
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d802      	bhi.n	80043aa <W25qxx_ReadPage+0x3a>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d102      	bne.n	80043b0 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80043aa:	4b4b      	ldr	r3, [pc, #300]	; (80044d8 <W25qxx_ReadPage+0x168>)
 80043ac:	895b      	ldrh	r3, [r3, #10]
 80043ae:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	4413      	add	r3, r2
 80043b6:	4a48      	ldr	r2, [pc, #288]	; (80044d8 <W25qxx_ReadPage+0x168>)
 80043b8:	8952      	ldrh	r2, [r2, #10]
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d905      	bls.n	80043ca <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80043be:	4b46      	ldr	r3, [pc, #280]	; (80044d8 <W25qxx_ReadPage+0x168>)
 80043c0:	895b      	ldrh	r3, [r3, #10]
 80043c2:	461a      	mov	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	4842      	ldr	r0, [pc, #264]	; (80044dc <W25qxx_ReadPage+0x16c>)
 80043d2:	f009 fadf 	bl	800d994 <iprintf>
	W25qxx_Delay(100);
 80043d6:	2064      	movs	r0, #100	; 0x64
 80043d8:	f000 f928 	bl	800462c <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 80043dc:	f000 f91a 	bl	8004614 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80043e2:	4b3d      	ldr	r3, [pc, #244]	; (80044d8 <W25qxx_ReadPage+0x168>)
 80043e4:	895b      	ldrh	r3, [r3, #10]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	fb03 f302 	mul.w	r3, r3, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80043f4:	2200      	movs	r2, #0
 80043f6:	2140      	movs	r1, #64	; 0x40
 80043f8:	4839      	ldr	r0, [pc, #228]	; (80044e0 <W25qxx_ReadPage+0x170>)
 80043fa:	f000 fe83 	bl	8005104 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 80043fe:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <W25qxx_ReadPage+0x168>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b08      	cmp	r3, #8
 8004404:	d909      	bls.n	800441a <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8004406:	200c      	movs	r0, #12
 8004408:	f7ff fbac 	bl	8003b64 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	0e1b      	lsrs	r3, r3, #24
 8004410:	b2db      	uxtb	r3, r3
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fba6 	bl	8003b64 <W25qxx_Spi>
 8004418:	e002      	b.n	8004420 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 800441a:	200b      	movs	r0, #11
 800441c:	f7ff fba2 	bl	8003b64 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	b2db      	uxtb	r3, r3
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fb9c 	bl	8003b64 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	0a1b      	lsrs	r3, r3, #8
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff fb96 	bl	8003b64 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff fb91 	bl	8003b64 <W25qxx_Spi>
	W25qxx_Spi(0);
 8004442:	2000      	movs	r0, #0
 8004444:	f7ff fb8e 	bl	8003b64 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	b29a      	uxth	r2, r3
 800444c:	2364      	movs	r3, #100	; 0x64
 800444e:	68f9      	ldr	r1, [r7, #12]
 8004450:	4824      	ldr	r0, [pc, #144]	; (80044e4 <W25qxx_ReadPage+0x174>)
 8004452:	f003 f88e 	bl	8007572 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8004456:	2201      	movs	r2, #1
 8004458:	2140      	movs	r1, #64	; 0x40
 800445a:	4821      	ldr	r0, [pc, #132]	; (80044e0 <W25qxx_ReadPage+0x170>)
 800445c:	f000 fe52 	bl	8005104 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8004460:	f000 f8d8 	bl	8004614 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e018      	b.n	80044a4 <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 0307 	and.w	r3, r3, #7
 8004478:	2b00      	cmp	r3, #0
 800447a:	d108      	bne.n	800448e <W25qxx_ReadPage+0x11e>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d905      	bls.n	800448e <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8004482:	4819      	ldr	r0, [pc, #100]	; (80044e8 <W25qxx_ReadPage+0x178>)
 8004484:	f009 fb0c 	bl	800daa0 <puts>
			W25qxx_Delay(10);
 8004488:	200a      	movs	r0, #10
 800448a:	f000 f8cf 	bl	800462c <HAL_Delay>
		}
		printf("0x%02X,", pBuffer[i]);
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4413      	add	r3, r2
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	4619      	mov	r1, r3
 8004498:	4814      	ldr	r0, [pc, #80]	; (80044ec <W25qxx_ReadPage+0x17c>)
 800449a:	f009 fa7b 	bl	800d994 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	3301      	adds	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d3e2      	bcc.n	8004472 <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 80044ac:	480e      	ldr	r0, [pc, #56]	; (80044e8 <W25qxx_ReadPage+0x178>)
 80044ae:	f009 faf7 	bl	800daa0 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 80044b2:	6939      	ldr	r1, [r7, #16]
 80044b4:	480e      	ldr	r0, [pc, #56]	; (80044f0 <W25qxx_ReadPage+0x180>)
 80044b6:	f009 fa6d 	bl	800d994 <iprintf>
	W25qxx_Delay(100);
 80044ba:	2064      	movs	r0, #100	; 0x64
 80044bc:	f000 f8b6 	bl	800462c <HAL_Delay>
#endif
	W25qxx_Delay(1);
 80044c0:	2001      	movs	r0, #1
 80044c2:	f000 f8b3 	bl	800462c <HAL_Delay>
	w25qxx.Lock = 0;
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <W25qxx_ReadPage+0x168>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80044ce:	bf00      	nop
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	200015e4 	.word	0x200015e4
 80044dc:	08011d94 	.word	0x08011d94
 80044e0:	40020c00 	.word	0x40020c00
 80044e4:	200008ac 	.word	0x200008ac
 80044e8:	08011bb8 	.word	0x08011bb8
 80044ec:	08011bbc 	.word	0x08011bbc
 80044f0:	08011dd0 	.word	0x08011dd0

080044f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800452c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044fa:	e003      	b.n	8004504 <LoopCopyDataInit>

080044fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004500:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004502:	3104      	adds	r1, #4

08004504 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004504:	480b      	ldr	r0, [pc, #44]	; (8004534 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004506:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004508:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800450a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800450c:	d3f6      	bcc.n	80044fc <CopyDataInit>
  ldr  r2, =_sbss
 800450e:	4a0b      	ldr	r2, [pc, #44]	; (800453c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004510:	e002      	b.n	8004518 <LoopFillZerobss>

08004512 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004512:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004514:	f842 3b04 	str.w	r3, [r2], #4

08004518 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800451a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800451c:	d3f9      	bcc.n	8004512 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800451e:	f7ff fb0b 	bl	8003b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004522:	f008 fad1 	bl	800cac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004526:	f7fd fc21 	bl	8001d6c <main>
  bx  lr    
 800452a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800452c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004530:	080124dc 	.word	0x080124dc
  ldr  r0, =_sdata
 8004534:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004538:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 800453c:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 8004540:	20001a90 	.word	0x20001a90

08004544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004544:	e7fe      	b.n	8004544 <ADC_IRQHandler>
	...

08004548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800454c:	4b0e      	ldr	r3, [pc, #56]	; (8004588 <HAL_Init+0x40>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0d      	ldr	r2, [pc, #52]	; (8004588 <HAL_Init+0x40>)
 8004552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004558:	4b0b      	ldr	r3, [pc, #44]	; (8004588 <HAL_Init+0x40>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <HAL_Init+0x40>)
 800455e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004564:	4b08      	ldr	r3, [pc, #32]	; (8004588 <HAL_Init+0x40>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a07      	ldr	r2, [pc, #28]	; (8004588 <HAL_Init+0x40>)
 800456a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004570:	2003      	movs	r0, #3
 8004572:	f000 fbc1 	bl	8004cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004576:	2000      	movs	r0, #0
 8004578:	f000 f808 	bl	800458c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800457c:	f7fe fea0 	bl	80032c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40023c00 	.word	0x40023c00

0800458c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <HAL_InitTick+0x54>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <HAL_InitTick+0x58>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	4619      	mov	r1, r3
 800459e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80045a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fbd9 	bl	8004d62 <HAL_SYSTICK_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e00e      	b.n	80045d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b0f      	cmp	r3, #15
 80045be:	d80a      	bhi.n	80045d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045c0:	2200      	movs	r2, #0
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	f000 fba1 	bl	8004d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045cc:	4a06      	ldr	r2, [pc, #24]	; (80045e8 <HAL_InitTick+0x5c>)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e000      	b.n	80045d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000000 	.word	0x20000000
 80045e4:	20000008 	.word	0x20000008
 80045e8:	20000004 	.word	0x20000004

080045ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045f0:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_IncTick+0x20>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b06      	ldr	r3, [pc, #24]	; (8004610 <HAL_IncTick+0x24>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4413      	add	r3, r2
 80045fc:	4a04      	ldr	r2, [pc, #16]	; (8004610 <HAL_IncTick+0x24>)
 80045fe:	6013      	str	r3, [r2, #0]
}
 8004600:	bf00      	nop
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000008 	.word	0x20000008
 8004610:	2000160c 	.word	0x2000160c

08004614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return uwTick;
 8004618:	4b03      	ldr	r3, [pc, #12]	; (8004628 <HAL_GetTick+0x14>)
 800461a:	681b      	ldr	r3, [r3, #0]
}
 800461c:	4618      	mov	r0, r3
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	2000160c 	.word	0x2000160c

0800462c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004634:	f7ff ffee 	bl	8004614 <HAL_GetTick>
 8004638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d005      	beq.n	8004652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004646:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <HAL_Delay+0x44>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004652:	bf00      	nop
 8004654:	f7ff ffde 	bl	8004614 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	429a      	cmp	r2, r3
 8004662:	d8f7      	bhi.n	8004654 <HAL_Delay+0x28>
  {
  }
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000008 	.word	0x20000008

08004674 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e033      	b.n	80046f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fe fe3c 	bl	8003310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d118      	bne.n	80046e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046ba:	f023 0302 	bic.w	r3, r3, #2
 80046be:	f043 0202 	orr.w	r2, r3, #2
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f94a 	bl	8004960 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f023 0303 	bic.w	r3, r3, #3
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40
 80046e2:	e001      	b.n	80046e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004710:	2b01      	cmp	r3, #1
 8004712:	d101      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x1c>
 8004714:	2302      	movs	r3, #2
 8004716:	e113      	b.n	8004940 <HAL_ADC_ConfigChannel+0x244>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b09      	cmp	r3, #9
 8004726:	d925      	bls.n	8004774 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68d9      	ldr	r1, [r3, #12]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	461a      	mov	r2, r3
 8004736:	4613      	mov	r3, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4413      	add	r3, r2
 800473c:	3b1e      	subs	r3, #30
 800473e:	2207      	movs	r2, #7
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43da      	mvns	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	400a      	ands	r2, r1
 800474c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68d9      	ldr	r1, [r3, #12]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	b29b      	uxth	r3, r3
 800475e:	4618      	mov	r0, r3
 8004760:	4603      	mov	r3, r0
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4403      	add	r3, r0
 8004766:	3b1e      	subs	r3, #30
 8004768:	409a      	lsls	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	60da      	str	r2, [r3, #12]
 8004772:	e022      	b.n	80047ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6919      	ldr	r1, [r3, #16]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	461a      	mov	r2, r3
 8004782:	4613      	mov	r3, r2
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	4413      	add	r3, r2
 8004788:	2207      	movs	r2, #7
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43da      	mvns	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	400a      	ands	r2, r1
 8004796:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6919      	ldr	r1, [r3, #16]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	4618      	mov	r0, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	4403      	add	r3, r0
 80047b0:	409a      	lsls	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d824      	bhi.n	800480c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	3b05      	subs	r3, #5
 80047d4:	221f      	movs	r2, #31
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43da      	mvns	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	400a      	ands	r2, r1
 80047e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	4618      	mov	r0, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	3b05      	subs	r3, #5
 80047fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	635a      	str	r2, [r3, #52]	; 0x34
 800480a:	e04c      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d824      	bhi.n	800485e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685a      	ldr	r2, [r3, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	3b23      	subs	r3, #35	; 0x23
 8004826:	221f      	movs	r2, #31
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43da      	mvns	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	400a      	ands	r2, r1
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	4618      	mov	r0, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	3b23      	subs	r3, #35	; 0x23
 8004850:	fa00 f203 	lsl.w	r2, r0, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
 800485c:	e023      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	3b41      	subs	r3, #65	; 0x41
 8004870:	221f      	movs	r2, #31
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43da      	mvns	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	400a      	ands	r2, r1
 800487e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	4618      	mov	r0, r3
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	3b41      	subs	r3, #65	; 0x41
 800489a:	fa00 f203 	lsl.w	r2, r0, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048a6:	4b29      	ldr	r3, [pc, #164]	; (800494c <HAL_ADC_ConfigChannel+0x250>)
 80048a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a28      	ldr	r2, [pc, #160]	; (8004950 <HAL_ADC_ConfigChannel+0x254>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d10f      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1d8>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b12      	cmp	r3, #18
 80048ba:	d10b      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <HAL_ADC_ConfigChannel+0x254>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d12b      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x23a>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_ADC_ConfigChannel+0x258>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d003      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x1f4>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b11      	cmp	r3, #17
 80048ee:	d122      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a11      	ldr	r2, [pc, #68]	; (8004954 <HAL_ADC_ConfigChannel+0x258>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d111      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004912:	4b11      	ldr	r3, [pc, #68]	; (8004958 <HAL_ADC_ConfigChannel+0x25c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a11      	ldr	r2, [pc, #68]	; (800495c <HAL_ADC_ConfigChannel+0x260>)
 8004918:	fba2 2303 	umull	r2, r3, r2, r3
 800491c:	0c9a      	lsrs	r2, r3, #18
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004928:	e002      	b.n	8004930 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3b01      	subs	r3, #1
 800492e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f9      	bne.n	800492a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	40012300 	.word	0x40012300
 8004950:	40012000 	.word	0x40012000
 8004954:	10000012 	.word	0x10000012
 8004958:	20000000 	.word	0x20000000
 800495c:	431bde83 	.word	0x431bde83

08004960 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004968:	4b79      	ldr	r3, [pc, #484]	; (8004b50 <ADC_Init+0x1f0>)
 800496a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	431a      	orrs	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6859      	ldr	r1, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	021a      	lsls	r2, r3, #8
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80049b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6859      	ldr	r1, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6899      	ldr	r1, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	4a58      	ldr	r2, [pc, #352]	; (8004b54 <ADC_Init+0x1f4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d022      	beq.n	8004a3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6899      	ldr	r1, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6899      	ldr	r1, [r3, #8]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
 8004a3c:	e00f      	b.n	8004a5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0202 	bic.w	r2, r2, #2
 8004a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6899      	ldr	r1, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	7e1b      	ldrb	r3, [r3, #24]
 8004a78:	005a      	lsls	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01b      	beq.n	8004ac4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6859      	ldr	r1, [r3, #4]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	035a      	lsls	r2, r3, #13
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	e007      	b.n	8004ad4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	051a      	lsls	r2, r3, #20
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6899      	ldr	r1, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b16:	025a      	lsls	r2, r3, #9
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6899      	ldr	r1, [r3, #8]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	029a      	lsls	r2, r3, #10
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	609a      	str	r2, [r3, #8]
}
 8004b44:	bf00      	nop
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40012300 	.word	0x40012300
 8004b54:	0f000001 	.word	0x0f000001

08004b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0307 	and.w	r3, r3, #7
 8004b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b74:	4013      	ands	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b8a:	4a04      	ldr	r2, [pc, #16]	; (8004b9c <__NVIC_SetPriorityGrouping+0x44>)
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	60d3      	str	r3, [r2, #12]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	0a1b      	lsrs	r3, r3, #8
 8004baa:	f003 0307 	and.w	r3, r3, #7
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db0b      	blt.n	8004be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	f003 021f 	and.w	r2, r3, #31
 8004bd4:	4907      	ldr	r1, [pc, #28]	; (8004bf4 <__NVIC_EnableIRQ+0x38>)
 8004bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2001      	movs	r0, #1
 8004bde:	fa00 f202 	lsl.w	r2, r0, r2
 8004be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100

08004bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	6039      	str	r1, [r7, #0]
 8004c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	db0a      	blt.n	8004c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	490c      	ldr	r1, [pc, #48]	; (8004c44 <__NVIC_SetPriority+0x4c>)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	0112      	lsls	r2, r2, #4
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c20:	e00a      	b.n	8004c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <__NVIC_SetPriority+0x50>)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	f003 030f 	and.w	r3, r3, #15
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	761a      	strb	r2, [r3, #24]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	e000e100 	.word	0xe000e100
 8004c48:	e000ed00 	.word	0xe000ed00

08004c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	bf28      	it	cs
 8004c6a:	2304      	movcs	r3, #4
 8004c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2b06      	cmp	r3, #6
 8004c74:	d902      	bls.n	8004c7c <NVIC_EncodePriority+0x30>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	3b03      	subs	r3, #3
 8004c7a:	e000      	b.n	8004c7e <NVIC_EncodePriority+0x32>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c80:	f04f 32ff 	mov.w	r2, #4294967295
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8a:	43da      	mvns	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	401a      	ands	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	43d9      	mvns	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca4:	4313      	orrs	r3, r2
         );
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3724      	adds	r7, #36	; 0x24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc4:	d301      	bcc.n	8004cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e00f      	b.n	8004cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cca:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <SysTick_Config+0x40>)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd8:	f7ff ff8e 	bl	8004bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <SysTick_Config+0x40>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <SysTick_Config+0x40>)
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	e000e010 	.word	0xe000e010

08004cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff ff29 	bl	8004b58 <__NVIC_SetPriorityGrouping>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b086      	sub	sp, #24
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
 8004d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d20:	f7ff ff3e 	bl	8004ba0 <__NVIC_GetPriorityGrouping>
 8004d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	68b9      	ldr	r1, [r7, #8]
 8004d2a:	6978      	ldr	r0, [r7, #20]
 8004d2c:	f7ff ff8e 	bl	8004c4c <NVIC_EncodePriority>
 8004d30:	4602      	mov	r2, r0
 8004d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff ff5d 	bl	8004bf8 <__NVIC_SetPriority>
}
 8004d3e:	bf00      	nop
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ff31 	bl	8004bbc <__NVIC_EnableIRQ>
}
 8004d5a:	bf00      	nop
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ffa2 	bl	8004cb4 <SysTick_Config>
 8004d70:	4603      	mov	r3, r0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3708      	adds	r7, #8
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b089      	sub	sp, #36	; 0x24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	e177      	b.n	8005088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d98:	2201      	movs	r2, #1
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4013      	ands	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	f040 8166 	bne.w	8005082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_GPIO_Init+0x5a>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d007      	beq.n	8004dd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004dca:	2b11      	cmp	r3, #17
 8004dcc:	d003      	beq.n	8004dd6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b12      	cmp	r3, #18
 8004dd4:	d130      	bne.n	8004e38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	2203      	movs	r2, #3
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43db      	mvns	r3, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4013      	ands	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 0201 	and.w	r2, r3, #1
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	2203      	movs	r2, #3
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d003      	beq.n	8004e78 <HAL_GPIO_Init+0xfc>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b12      	cmp	r3, #18
 8004e76:	d123      	bne.n	8004ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	08da      	lsrs	r2, r3, #3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3208      	adds	r2, #8
 8004e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	220f      	movs	r2, #15
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43db      	mvns	r3, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	08da      	lsrs	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3208      	adds	r2, #8
 8004eba:	69b9      	ldr	r1, [r7, #24]
 8004ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	2203      	movs	r2, #3
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 0203 	and.w	r2, r3, #3
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80c0 	beq.w	8005082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	4b66      	ldr	r3, [pc, #408]	; (80050a0 <HAL_GPIO_Init+0x324>)
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	4a65      	ldr	r2, [pc, #404]	; (80050a0 <HAL_GPIO_Init+0x324>)
 8004f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f10:	6453      	str	r3, [r2, #68]	; 0x44
 8004f12:	4b63      	ldr	r3, [pc, #396]	; (80050a0 <HAL_GPIO_Init+0x324>)
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f1e:	4a61      	ldr	r2, [pc, #388]	; (80050a4 <HAL_GPIO_Init+0x328>)
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	089b      	lsrs	r3, r3, #2
 8004f24:	3302      	adds	r3, #2
 8004f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	220f      	movs	r2, #15
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a58      	ldr	r2, [pc, #352]	; (80050a8 <HAL_GPIO_Init+0x32c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d037      	beq.n	8004fba <HAL_GPIO_Init+0x23e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a57      	ldr	r2, [pc, #348]	; (80050ac <HAL_GPIO_Init+0x330>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d031      	beq.n	8004fb6 <HAL_GPIO_Init+0x23a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a56      	ldr	r2, [pc, #344]	; (80050b0 <HAL_GPIO_Init+0x334>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02b      	beq.n	8004fb2 <HAL_GPIO_Init+0x236>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a55      	ldr	r2, [pc, #340]	; (80050b4 <HAL_GPIO_Init+0x338>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d025      	beq.n	8004fae <HAL_GPIO_Init+0x232>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a54      	ldr	r2, [pc, #336]	; (80050b8 <HAL_GPIO_Init+0x33c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01f      	beq.n	8004faa <HAL_GPIO_Init+0x22e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a53      	ldr	r2, [pc, #332]	; (80050bc <HAL_GPIO_Init+0x340>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d019      	beq.n	8004fa6 <HAL_GPIO_Init+0x22a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a52      	ldr	r2, [pc, #328]	; (80050c0 <HAL_GPIO_Init+0x344>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <HAL_GPIO_Init+0x226>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a51      	ldr	r2, [pc, #324]	; (80050c4 <HAL_GPIO_Init+0x348>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00d      	beq.n	8004f9e <HAL_GPIO_Init+0x222>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a50      	ldr	r2, [pc, #320]	; (80050c8 <HAL_GPIO_Init+0x34c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <HAL_GPIO_Init+0x21e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a4f      	ldr	r2, [pc, #316]	; (80050cc <HAL_GPIO_Init+0x350>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_GPIO_Init+0x21a>
 8004f92:	2309      	movs	r3, #9
 8004f94:	e012      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004f96:	230a      	movs	r3, #10
 8004f98:	e010      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	e00e      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004f9e:	2307      	movs	r3, #7
 8004fa0:	e00c      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004fa2:	2306      	movs	r3, #6
 8004fa4:	e00a      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004fa6:	2305      	movs	r3, #5
 8004fa8:	e008      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004faa:	2304      	movs	r3, #4
 8004fac:	e006      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e004      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	e002      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <HAL_GPIO_Init+0x240>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	f002 0203 	and.w	r2, r2, #3
 8004fc2:	0092      	lsls	r2, r2, #2
 8004fc4:	4093      	lsls	r3, r2
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fcc:	4935      	ldr	r1, [pc, #212]	; (80050a4 <HAL_GPIO_Init+0x328>)
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	089b      	lsrs	r3, r3, #2
 8004fd2:	3302      	adds	r3, #2
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fda:	4b3d      	ldr	r3, [pc, #244]	; (80050d0 <HAL_GPIO_Init+0x354>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ffe:	4a34      	ldr	r2, [pc, #208]	; (80050d0 <HAL_GPIO_Init+0x354>)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005004:	4b32      	ldr	r3, [pc, #200]	; (80050d0 <HAL_GPIO_Init+0x354>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005028:	4a29      	ldr	r2, [pc, #164]	; (80050d0 <HAL_GPIO_Init+0x354>)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800502e:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <HAL_GPIO_Init+0x354>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005052:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <HAL_GPIO_Init+0x354>)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <HAL_GPIO_Init+0x354>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	43db      	mvns	r3, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4013      	ands	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4313      	orrs	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <HAL_GPIO_Init+0x354>)
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3301      	adds	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b0f      	cmp	r3, #15
 800508c:	f67f ae84 	bls.w	8004d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	3724      	adds	r7, #36	; 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40013800 	.word	0x40013800
 80050a8:	40020000 	.word	0x40020000
 80050ac:	40020400 	.word	0x40020400
 80050b0:	40020800 	.word	0x40020800
 80050b4:	40020c00 	.word	0x40020c00
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40021400 	.word	0x40021400
 80050c0:	40021800 	.word	0x40021800
 80050c4:	40021c00 	.word	0x40021c00
 80050c8:	40022000 	.word	0x40022000
 80050cc:	40022400 	.word	0x40022400
 80050d0:	40013c00 	.word	0x40013c00

080050d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	460b      	mov	r3, r1
 80050de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	887b      	ldrh	r3, [r7, #2]
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
 80050f0:	e001      	b.n	80050f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	460b      	mov	r3, r1
 800510e:	807b      	strh	r3, [r7, #2]
 8005110:	4613      	mov	r3, r2
 8005112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005114:	787b      	ldrb	r3, [r7, #1]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800511a:	887a      	ldrh	r2, [r7, #2]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005120:	e003      	b.n	800512a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005122:	887b      	ldrh	r3, [r7, #2]
 8005124:	041a      	lsls	r2, r3, #16
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	619a      	str	r2, [r3, #24]
}
 800512a:	bf00      	nop
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005142:	4b08      	ldr	r3, [pc, #32]	; (8005164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005144:	695a      	ldr	r2, [r3, #20]
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	4013      	ands	r3, r2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d006      	beq.n	800515c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800514e:	4a05      	ldr	r2, [pc, #20]	; (8005164 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f806 	bl	8005168 <HAL_GPIO_EXTI_Callback>
  }
}
 800515c:	bf00      	nop
 800515e:	3708      	adds	r7, #8
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40013c00 	.word	0x40013c00

08005168 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	4603      	mov	r3, r0
 8005170:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e12b      	b.n	80053ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fe f8f6 	bl	8003398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2224      	movs	r2, #36	; 0x24
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051e4:	f001 fc98 	bl	8006b18 <HAL_RCC_GetPCLK1Freq>
 80051e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4a81      	ldr	r2, [pc, #516]	; (80053f4 <HAL_I2C_Init+0x274>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d807      	bhi.n	8005204 <HAL_I2C_Init+0x84>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a80      	ldr	r2, [pc, #512]	; (80053f8 <HAL_I2C_Init+0x278>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	bf94      	ite	ls
 80051fc:	2301      	movls	r3, #1
 80051fe:	2300      	movhi	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e006      	b.n	8005212 <HAL_I2C_Init+0x92>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a7d      	ldr	r2, [pc, #500]	; (80053fc <HAL_I2C_Init+0x27c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	bf94      	ite	ls
 800520c:	2301      	movls	r3, #1
 800520e:	2300      	movhi	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e0e7      	b.n	80053ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a78      	ldr	r2, [pc, #480]	; (8005400 <HAL_I2C_Init+0x280>)
 800521e:	fba2 2303 	umull	r2, r3, r2, r3
 8005222:	0c9b      	lsrs	r3, r3, #18
 8005224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4a6a      	ldr	r2, [pc, #424]	; (80053f4 <HAL_I2C_Init+0x274>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d802      	bhi.n	8005254 <HAL_I2C_Init+0xd4>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	3301      	adds	r3, #1
 8005252:	e009      	b.n	8005268 <HAL_I2C_Init+0xe8>
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800525a:	fb02 f303 	mul.w	r3, r2, r3
 800525e:	4a69      	ldr	r2, [pc, #420]	; (8005404 <HAL_I2C_Init+0x284>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	099b      	lsrs	r3, r3, #6
 8005266:	3301      	adds	r3, #1
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	430b      	orrs	r3, r1
 800526e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800527a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	495c      	ldr	r1, [pc, #368]	; (80053f4 <HAL_I2C_Init+0x274>)
 8005284:	428b      	cmp	r3, r1
 8005286:	d819      	bhi.n	80052bc <HAL_I2C_Init+0x13c>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1e59      	subs	r1, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	fbb1 f3f3 	udiv	r3, r1, r3
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	f640 73fc 	movw	r3, #4092	; 0xffc
 800529c:	400b      	ands	r3, r1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <HAL_I2C_Init+0x138>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1e59      	subs	r1, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80052b0:	3301      	adds	r3, #1
 80052b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b6:	e051      	b.n	800535c <HAL_I2C_Init+0x1dc>
 80052b8:	2304      	movs	r3, #4
 80052ba:	e04f      	b.n	800535c <HAL_I2C_Init+0x1dc>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d111      	bne.n	80052e8 <HAL_I2C_Init+0x168>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1e58      	subs	r0, r3, #1
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6859      	ldr	r1, [r3, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	440b      	add	r3, r1
 80052d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d6:	3301      	adds	r3, #1
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e012      	b.n	800530e <HAL_I2C_Init+0x18e>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	1e58      	subs	r0, r3, #1
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6859      	ldr	r1, [r3, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	0099      	lsls	r1, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80052fe:	3301      	adds	r3, #1
 8005300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005304:	2b00      	cmp	r3, #0
 8005306:	bf0c      	ite	eq
 8005308:	2301      	moveq	r3, #1
 800530a:	2300      	movne	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_I2C_Init+0x196>
 8005312:	2301      	movs	r3, #1
 8005314:	e022      	b.n	800535c <HAL_I2C_Init+0x1dc>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10e      	bne.n	800533c <HAL_I2C_Init+0x1bc>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1e58      	subs	r0, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6859      	ldr	r1, [r3, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	440b      	add	r3, r1
 800532c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005330:	3301      	adds	r3, #1
 8005332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005336:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800533a:	e00f      	b.n	800535c <HAL_I2C_Init+0x1dc>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1e58      	subs	r0, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6859      	ldr	r1, [r3, #4]
 8005344:	460b      	mov	r3, r1
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	0099      	lsls	r1, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005352:	3301      	adds	r3, #1
 8005354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	6809      	ldr	r1, [r1, #0]
 8005360:	4313      	orrs	r3, r2
 8005362:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800538a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6911      	ldr	r1, [r2, #16]
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	68d2      	ldr	r2, [r2, #12]
 8005396:	4311      	orrs	r1, r2
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	430b      	orrs	r3, r1
 800539e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695a      	ldr	r2, [r3, #20]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0201 	orr.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	000186a0 	.word	0x000186a0
 80053f8:	001e847f 	.word	0x001e847f
 80053fc:	003d08ff 	.word	0x003d08ff
 8005400:	431bde83 	.word	0x431bde83
 8005404:	10624dd3 	.word	0x10624dd3

08005408 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	4608      	mov	r0, r1
 8005412:	4611      	mov	r1, r2
 8005414:	461a      	mov	r2, r3
 8005416:	4603      	mov	r3, r0
 8005418:	817b      	strh	r3, [r7, #10]
 800541a:	460b      	mov	r3, r1
 800541c:	813b      	strh	r3, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005422:	f7ff f8f7 	bl	8004614 <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b20      	cmp	r3, #32
 8005432:	f040 80d9 	bne.w	80055e8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	2319      	movs	r3, #25
 800543c:	2201      	movs	r2, #1
 800543e:	496d      	ldr	r1, [pc, #436]	; (80055f4 <HAL_I2C_Mem_Write+0x1ec>)
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fc7f 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800544c:	2302      	movs	r3, #2
 800544e:	e0cc      	b.n	80055ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_I2C_Mem_Write+0x56>
 800545a:	2302      	movs	r3, #2
 800545c:	e0c5      	b.n	80055ea <HAL_I2C_Mem_Write+0x1e2>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b01      	cmp	r3, #1
 8005472:	d007      	beq.n	8005484 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2221      	movs	r2, #33	; 0x21
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2240      	movs	r2, #64	; 0x40
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a3a      	ldr	r2, [r7, #32]
 80054ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80054b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a4d      	ldr	r2, [pc, #308]	; (80055f8 <HAL_I2C_Mem_Write+0x1f0>)
 80054c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054c6:	88f8      	ldrh	r0, [r7, #6]
 80054c8:	893a      	ldrh	r2, [r7, #8]
 80054ca:	8979      	ldrh	r1, [r7, #10]
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	9301      	str	r3, [sp, #4]
 80054d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d2:	9300      	str	r3, [sp, #0]
 80054d4:	4603      	mov	r3, r0
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fab6 	bl	8005a48 <I2C_RequestMemoryWrite>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d052      	beq.n	8005588 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e081      	b.n	80055ea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fd00 	bl	8005ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00d      	beq.n	8005512 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d107      	bne.n	800550e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800550c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e06b      	b.n	80055ea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	781a      	ldrb	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	3b01      	subs	r3, #1
 800552e:	b29a      	uxth	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695b      	ldr	r3, [r3, #20]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b04      	cmp	r3, #4
 800554e:	d11b      	bne.n	8005588 <HAL_I2C_Mem_Write+0x180>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005554:	2b00      	cmp	r3, #0
 8005556:	d017      	beq.n	8005588 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1aa      	bne.n	80054e6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fcec 	bl	8005f72 <I2C_WaitOnBTFFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d107      	bne.n	80055b8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e016      	b.n	80055ea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	e000      	b.n	80055ea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055e8:	2302      	movs	r3, #2
  }
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3718      	adds	r7, #24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	00100002 	.word	0x00100002
 80055f8:	ffff0000 	.word	0xffff0000

080055fc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08c      	sub	sp, #48	; 0x30
 8005600:	af02      	add	r7, sp, #8
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	4608      	mov	r0, r1
 8005606:	4611      	mov	r1, r2
 8005608:	461a      	mov	r2, r3
 800560a:	4603      	mov	r3, r0
 800560c:	817b      	strh	r3, [r7, #10]
 800560e:	460b      	mov	r3, r1
 8005610:	813b      	strh	r3, [r7, #8]
 8005612:	4613      	mov	r3, r2
 8005614:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005616:	f7fe fffd 	bl	8004614 <HAL_GetTick>
 800561a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b20      	cmp	r3, #32
 8005626:	f040 8208 	bne.w	8005a3a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800562a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	2319      	movs	r3, #25
 8005630:	2201      	movs	r2, #1
 8005632:	497b      	ldr	r1, [pc, #492]	; (8005820 <HAL_I2C_Mem_Read+0x224>)
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 fb85 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005640:	2302      	movs	r3, #2
 8005642:	e1fb      	b.n	8005a3c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_I2C_Mem_Read+0x56>
 800564e:	2302      	movs	r3, #2
 8005650:	e1f4      	b.n	8005a3c <HAL_I2C_Mem_Read+0x440>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b01      	cmp	r3, #1
 8005666:	d007      	beq.n	8005678 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005686:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2222      	movs	r2, #34	; 0x22
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2240      	movs	r2, #64	; 0x40
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80056a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4a5b      	ldr	r2, [pc, #364]	; (8005824 <HAL_I2C_Mem_Read+0x228>)
 80056b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ba:	88f8      	ldrh	r0, [r7, #6]
 80056bc:	893a      	ldrh	r2, [r7, #8]
 80056be:	8979      	ldrh	r1, [r7, #10]
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	4603      	mov	r3, r0
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fa52 	bl	8005b74 <I2C_RequestMemoryRead>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e1b0      	b.n	8005a3c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d113      	bne.n	800570a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056e2:	2300      	movs	r3, #0
 80056e4:	623b      	str	r3, [r7, #32]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005706:	601a      	str	r2, [r3, #0]
 8005708:	e184      	b.n	8005a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800570e:	2b01      	cmp	r3, #1
 8005710:	d11b      	bne.n	800574a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005720:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	61fb      	str	r3, [r7, #28]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e164      	b.n	8005a14 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574e:	2b02      	cmp	r3, #2
 8005750:	d11b      	bne.n	800578a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005760:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005770:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005772:	2300      	movs	r3, #0
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	e144      	b.n	8005a14 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057a0:	e138      	b.n	8005a14 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	f200 80f1 	bhi.w	800598e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d123      	bne.n	80057fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 fc1b 	bl	8005ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e139      	b.n	8005a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e4:	3b01      	subs	r3, #1
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	3b01      	subs	r3, #1
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057fa:	e10b      	b.n	8005a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005800:	2b02      	cmp	r3, #2
 8005802:	d14e      	bne.n	80058a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	2200      	movs	r2, #0
 800580c:	4906      	ldr	r1, [pc, #24]	; (8005828 <HAL_I2C_Mem_Read+0x22c>)
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fa98 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d008      	beq.n	800582c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e10e      	b.n	8005a3c <HAL_I2C_Mem_Read+0x440>
 800581e:	bf00      	nop
 8005820:	00100002 	.word	0x00100002
 8005824:	ffff0000 	.word	0xffff0000
 8005828:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800583a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691a      	ldr	r2, [r3, #16]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005858:	3b01      	subs	r3, #1
 800585a:	b29a      	uxth	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691a      	ldr	r2, [r3, #16]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588a:	3b01      	subs	r3, #1
 800588c:	b29a      	uxth	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058a0:	e0b8      	b.n	8005a14 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	2200      	movs	r2, #0
 80058aa:	4966      	ldr	r1, [pc, #408]	; (8005a44 <HAL_I2C_Mem_Read+0x448>)
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fa49 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0bf      	b.n	8005a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058e8:	3b01      	subs	r3, #1
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	3b01      	subs	r3, #1
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005904:	2200      	movs	r2, #0
 8005906:	494f      	ldr	r1, [pc, #316]	; (8005a44 <HAL_I2C_Mem_Read+0x448>)
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fa1b 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e091      	b.n	8005a3c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005926:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800598c:	e042      	b.n	8005a14 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 fb2e 	bl	8005ff4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e04c      	b.n	8005a3c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ac:	b2d2      	uxtb	r2, r2
 80059ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	3b01      	subs	r3, #1
 80059ce:	b29a      	uxth	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d118      	bne.n	8005a14 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f47f aec2 	bne.w	80057a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e000      	b.n	8005a3c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
  }
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3728      	adds	r7, #40	; 0x28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	00010004 	.word	0x00010004

08005a48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	4608      	mov	r0, r1
 8005a52:	4611      	mov	r1, r2
 8005a54:	461a      	mov	r2, r3
 8005a56:	4603      	mov	r3, r0
 8005a58:	817b      	strh	r3, [r7, #10]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	813b      	strh	r3, [r7, #8]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 f960 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00d      	beq.n	8005aa6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a98:	d103      	bne.n	8005aa2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e05f      	b.n	8005b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aa6:	897b      	ldrh	r3, [r7, #10]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ab4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	492d      	ldr	r1, [pc, #180]	; (8005b70 <I2C_RequestMemoryWrite+0x128>)
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f998 	bl	8005df2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e04c      	b.n	8005b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae4:	6a39      	ldr	r1, [r7, #32]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fa02 	bl	8005ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d107      	bne.n	8005b0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e02b      	b.n	8005b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d105      	bne.n	8005b20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b14:	893b      	ldrh	r3, [r7, #8]
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	611a      	str	r2, [r3, #16]
 8005b1e:	e021      	b.n	8005b64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b20:	893b      	ldrh	r3, [r7, #8]
 8005b22:	0a1b      	lsrs	r3, r3, #8
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b30:	6a39      	ldr	r1, [r7, #32]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 f9dc 	bl	8005ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00d      	beq.n	8005b5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d107      	bne.n	8005b56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e005      	b.n	8005b66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b5a:	893b      	ldrh	r3, [r7, #8]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	00010002 	.word	0x00010002

08005b74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	461a      	mov	r2, r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	817b      	strh	r3, [r7, #10]
 8005b86:	460b      	mov	r3, r1
 8005b88:	813b      	strh	r3, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f8c2 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00d      	beq.n	8005be2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bd4:	d103      	bne.n	8005bde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0aa      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005be2:	897b      	ldrh	r3, [r7, #10]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005bf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	4952      	ldr	r1, [pc, #328]	; (8005d40 <I2C_RequestMemoryRead+0x1cc>)
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f8fa 	bl	8005df2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e097      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c20:	6a39      	ldr	r1, [r7, #32]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f964 	bl	8005ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00d      	beq.n	8005c4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d107      	bne.n	8005c46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e076      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	611a      	str	r2, [r3, #16]
 8005c5a:	e021      	b.n	8005ca0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c5c:	893b      	ldrh	r3, [r7, #8]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c6c:	6a39      	ldr	r1, [r7, #32]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f93e 	bl	8005ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d107      	bne.n	8005c92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e050      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c96:	893b      	ldrh	r3, [r7, #8]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca2:	6a39      	ldr	r1, [r7, #32]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f923 	bl	8005ef0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d107      	bne.n	8005cc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e035      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f82b 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00d      	beq.n	8005d10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d02:	d103      	bne.n	8005d0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e013      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d10:	897b      	ldrh	r3, [r7, #10]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d22:	6a3a      	ldr	r2, [r7, #32]
 8005d24:	4906      	ldr	r1, [pc, #24]	; (8005d40 <I2C_RequestMemoryRead+0x1cc>)
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f863 	bl	8005df2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	00010002 	.word	0x00010002

08005d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d54:	e025      	b.n	8005da2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d021      	beq.n	8005da2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5e:	f7fe fc59 	bl	8004614 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d116      	bne.n	8005da2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	f043 0220 	orr.w	r2, r3, #32
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e023      	b.n	8005dea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	0c1b      	lsrs	r3, r3, #16
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d10d      	bne.n	8005dc8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	43da      	mvns	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4013      	ands	r3, r2
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	2300      	movne	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	e00c      	b.n	8005de2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	43da      	mvns	r2, r3
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	bf0c      	ite	eq
 8005dda:	2301      	moveq	r3, #1
 8005ddc:	2300      	movne	r3, #0
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	461a      	mov	r2, r3
 8005de2:	79fb      	ldrb	r3, [r7, #7]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d0b6      	beq.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e00:	e051      	b.n	8005ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e10:	d123      	bne.n	8005e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e20:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e2a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2220      	movs	r2, #32
 8005e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f043 0204 	orr.w	r2, r3, #4
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e046      	b.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d021      	beq.n	8005ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e62:	f7fe fbd7 	bl	8004614 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d302      	bcc.n	8005e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d116      	bne.n	8005ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2220      	movs	r2, #32
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	f043 0220 	orr.w	r2, r3, #32
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e020      	b.n	8005ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	0c1b      	lsrs	r3, r3, #16
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d10c      	bne.n	8005eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	43da      	mvns	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bf14      	ite	ne
 8005ec2:	2301      	movne	r3, #1
 8005ec4:	2300      	moveq	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	e00b      	b.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	43da      	mvns	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d18d      	bne.n	8005e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005efc:	e02d      	b.n	8005f5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	f000 f8ce 	bl	80060a0 <I2C_IsAcknowledgeFailed>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e02d      	b.n	8005f6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d021      	beq.n	8005f5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f16:	f7fe fb7d 	bl	8004614 <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d302      	bcc.n	8005f2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d116      	bne.n	8005f5a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f043 0220 	orr.w	r2, r3, #32
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e007      	b.n	8005f6a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d1ca      	bne.n	8005efe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f7e:	e02d      	b.n	8005fdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f88d 	bl	80060a0 <I2C_IsAcknowledgeFailed>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e02d      	b.n	8005fec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f96:	d021      	beq.n	8005fdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f98:	f7fe fb3c 	bl	8004614 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d302      	bcc.n	8005fae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d116      	bne.n	8005fdc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc8:	f043 0220 	orr.w	r2, r3, #32
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e007      	b.n	8005fec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d1ca      	bne.n	8005f80 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006000:	e042      	b.n	8006088 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	f003 0310 	and.w	r3, r3, #16
 800600c:	2b10      	cmp	r3, #16
 800600e:	d119      	bne.n	8006044 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0210 	mvn.w	r2, #16
 8006018:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e029      	b.n	8006098 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006044:	f7fe fae6 	bl	8004614 <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	429a      	cmp	r2, r3
 8006052:	d302      	bcc.n	800605a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d116      	bne.n	8006088 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2220      	movs	r2, #32
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	f043 0220 	orr.w	r2, r3, #32
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e007      	b.n	8006098 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d1b5      	bne.n	8006002 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b6:	d11b      	bne.n	80060f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	f043 0204 	orr.w	r2, r3, #4
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b20      	cmp	r3, #32
 8006112:	d129      	bne.n	8006168 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2224      	movs	r2, #36	; 0x24
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0201 	bic.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0210 	bic.w	r2, r2, #16
 800613a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	4618      	mov	r0, r3
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006176:	b480      	push	{r7}
 8006178:	b085      	sub	sp, #20
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
 800617e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006180:	2300      	movs	r3, #0
 8006182:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b20      	cmp	r3, #32
 800618e:	d12a      	bne.n	80061e6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2224      	movs	r2, #36	; 0x24
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80061b0:	89fb      	ldrh	r3, [r7, #14]
 80061b2:	f023 030f 	bic.w	r3, r3, #15
 80061b6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	89fb      	ldrh	r3, [r7, #14]
 80061be:	4313      	orrs	r3, r2
 80061c0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	89fa      	ldrh	r2, [r7, #14]
 80061c8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	e000      	b.n	80061e8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80061e6:	2302      	movs	r3, #2
  }
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80061fe:	2300      	movs	r3, #0
 8006200:	603b      	str	r3, [r7, #0]
 8006202:	4b20      	ldr	r3, [pc, #128]	; (8006284 <HAL_PWREx_EnableOverDrive+0x90>)
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <HAL_PWREx_EnableOverDrive+0x90>)
 8006208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800620c:	6413      	str	r3, [r2, #64]	; 0x40
 800620e:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <HAL_PWREx_EnableOverDrive+0x90>)
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <HAL_PWREx_EnableOverDrive+0x94>)
 800621c:	2201      	movs	r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006220:	f7fe f9f8 	bl	8004614 <HAL_GetTick>
 8006224:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006226:	e009      	b.n	800623c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006228:	f7fe f9f4 	bl	8004614 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006236:	d901      	bls.n	800623c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e01f      	b.n	800627c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800623c:	4b13      	ldr	r3, [pc, #76]	; (800628c <HAL_PWREx_EnableOverDrive+0x98>)
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006248:	d1ee      	bne.n	8006228 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800624a:	4b11      	ldr	r3, [pc, #68]	; (8006290 <HAL_PWREx_EnableOverDrive+0x9c>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006250:	f7fe f9e0 	bl	8004614 <HAL_GetTick>
 8006254:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006256:	e009      	b.n	800626c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006258:	f7fe f9dc 	bl	8004614 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006266:	d901      	bls.n	800626c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e007      	b.n	800627c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <HAL_PWREx_EnableOverDrive+0x98>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006278:	d1ee      	bne.n	8006258 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3708      	adds	r7, #8
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	40023800 	.word	0x40023800
 8006288:	420e0040 	.word	0x420e0040
 800628c:	40007000 	.word	0x40007000
 8006290:	420e0044 	.word	0x420e0044

08006294 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e25b      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d075      	beq.n	800639e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062b2:	4ba3      	ldr	r3, [pc, #652]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 030c 	and.w	r3, r3, #12
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d00c      	beq.n	80062d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062be:	4ba0      	ldr	r3, [pc, #640]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d112      	bne.n	80062f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ca:	4b9d      	ldr	r3, [pc, #628]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d6:	d10b      	bne.n	80062f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d8:	4b99      	ldr	r3, [pc, #612]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d05b      	beq.n	800639c <HAL_RCC_OscConfig+0x108>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d157      	bne.n	800639c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e236      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f8:	d106      	bne.n	8006308 <HAL_RCC_OscConfig+0x74>
 80062fa:	4b91      	ldr	r3, [pc, #580]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a90      	ldr	r2, [pc, #576]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	e01d      	b.n	8006344 <HAL_RCC_OscConfig+0xb0>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006310:	d10c      	bne.n	800632c <HAL_RCC_OscConfig+0x98>
 8006312:	4b8b      	ldr	r3, [pc, #556]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a8a      	ldr	r2, [pc, #552]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800631c:	6013      	str	r3, [r2, #0]
 800631e:	4b88      	ldr	r3, [pc, #544]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a87      	ldr	r2, [pc, #540]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006328:	6013      	str	r3, [r2, #0]
 800632a:	e00b      	b.n	8006344 <HAL_RCC_OscConfig+0xb0>
 800632c:	4b84      	ldr	r3, [pc, #528]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a83      	ldr	r2, [pc, #524]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	4b81      	ldr	r3, [pc, #516]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a80      	ldr	r2, [pc, #512]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 800633e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d013      	beq.n	8006374 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634c:	f7fe f962 	bl	8004614 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006354:	f7fe f95e 	bl	8004614 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b64      	cmp	r3, #100	; 0x64
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e1fb      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006366:	4b76      	ldr	r3, [pc, #472]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0f0      	beq.n	8006354 <HAL_RCC_OscConfig+0xc0>
 8006372:	e014      	b.n	800639e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006374:	f7fe f94e 	bl	8004614 <HAL_GetTick>
 8006378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800637a:	e008      	b.n	800638e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800637c:	f7fe f94a 	bl	8004614 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b64      	cmp	r3, #100	; 0x64
 8006388:	d901      	bls.n	800638e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e1e7      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800638e:	4b6c      	ldr	r3, [pc, #432]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f0      	bne.n	800637c <HAL_RCC_OscConfig+0xe8>
 800639a:	e000      	b.n	800639e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800639c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d063      	beq.n	8006472 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063aa:	4b65      	ldr	r3, [pc, #404]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 030c 	and.w	r3, r3, #12
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00b      	beq.n	80063ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063b6:	4b62      	ldr	r3, [pc, #392]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d11c      	bne.n	80063fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063c2:	4b5f      	ldr	r3, [pc, #380]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d116      	bne.n	80063fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ce:	4b5c      	ldr	r3, [pc, #368]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d005      	beq.n	80063e6 <HAL_RCC_OscConfig+0x152>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d001      	beq.n	80063e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e1bb      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e6:	4b56      	ldr	r3, [pc, #344]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	00db      	lsls	r3, r3, #3
 80063f4:	4952      	ldr	r1, [pc, #328]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fa:	e03a      	b.n	8006472 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d020      	beq.n	8006446 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006404:	4b4f      	ldr	r3, [pc, #316]	; (8006544 <HAL_RCC_OscConfig+0x2b0>)
 8006406:	2201      	movs	r2, #1
 8006408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640a:	f7fe f903 	bl	8004614 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006410:	e008      	b.n	8006424 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006412:	f7fe f8ff 	bl	8004614 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e19c      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006424:	4b46      	ldr	r3, [pc, #280]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0302 	and.w	r3, r3, #2
 800642c:	2b00      	cmp	r3, #0
 800642e:	d0f0      	beq.n	8006412 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006430:	4b43      	ldr	r3, [pc, #268]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4940      	ldr	r1, [pc, #256]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006440:	4313      	orrs	r3, r2
 8006442:	600b      	str	r3, [r1, #0]
 8006444:	e015      	b.n	8006472 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006446:	4b3f      	ldr	r3, [pc, #252]	; (8006544 <HAL_RCC_OscConfig+0x2b0>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644c:	f7fe f8e2 	bl	8004614 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006454:	f7fe f8de 	bl	8004614 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e17b      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006466:	4b36      	ldr	r3, [pc, #216]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f0      	bne.n	8006454 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d030      	beq.n	80064e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d016      	beq.n	80064b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006486:	4b30      	ldr	r3, [pc, #192]	; (8006548 <HAL_RCC_OscConfig+0x2b4>)
 8006488:	2201      	movs	r2, #1
 800648a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648c:	f7fe f8c2 	bl	8004614 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006494:	f7fe f8be 	bl	8004614 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e15b      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064a6:	4b26      	ldr	r3, [pc, #152]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80064a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064aa:	f003 0302 	and.w	r3, r3, #2
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f0      	beq.n	8006494 <HAL_RCC_OscConfig+0x200>
 80064b2:	e015      	b.n	80064e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064b4:	4b24      	ldr	r3, [pc, #144]	; (8006548 <HAL_RCC_OscConfig+0x2b4>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ba:	f7fe f8ab 	bl	8004614 <HAL_GetTick>
 80064be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064c0:	e008      	b.n	80064d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c2:	f7fe f8a7 	bl	8004614 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e144      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064d4:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80064d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	f000 80a0 	beq.w	800662e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ee:	2300      	movs	r3, #0
 80064f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064f2:	4b13      	ldr	r3, [pc, #76]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10f      	bne.n	800651e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064fe:	2300      	movs	r3, #0
 8006500:	60bb      	str	r3, [r7, #8]
 8006502:	4b0f      	ldr	r3, [pc, #60]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006506:	4a0e      	ldr	r2, [pc, #56]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650c:	6413      	str	r3, [r2, #64]	; 0x40
 800650e:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <HAL_RCC_OscConfig+0x2ac>)
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006516:	60bb      	str	r3, [r7, #8]
 8006518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800651a:	2301      	movs	r3, #1
 800651c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651e:	4b0b      	ldr	r3, [pc, #44]	; (800654c <HAL_RCC_OscConfig+0x2b8>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d121      	bne.n	800656e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800652a:	4b08      	ldr	r3, [pc, #32]	; (800654c <HAL_RCC_OscConfig+0x2b8>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a07      	ldr	r2, [pc, #28]	; (800654c <HAL_RCC_OscConfig+0x2b8>)
 8006530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006536:	f7fe f86d 	bl	8004614 <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800653c:	e011      	b.n	8006562 <HAL_RCC_OscConfig+0x2ce>
 800653e:	bf00      	nop
 8006540:	40023800 	.word	0x40023800
 8006544:	42470000 	.word	0x42470000
 8006548:	42470e80 	.word	0x42470e80
 800654c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006550:	f7fe f860 	bl	8004614 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e0fd      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006562:	4b81      	ldr	r3, [pc, #516]	; (8006768 <HAL_RCC_OscConfig+0x4d4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f0      	beq.n	8006550 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d106      	bne.n	8006584 <HAL_RCC_OscConfig+0x2f0>
 8006576:	4b7d      	ldr	r3, [pc, #500]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	4a7c      	ldr	r2, [pc, #496]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 800657c:	f043 0301 	orr.w	r3, r3, #1
 8006580:	6713      	str	r3, [r2, #112]	; 0x70
 8006582:	e01c      	b.n	80065be <HAL_RCC_OscConfig+0x32a>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	2b05      	cmp	r3, #5
 800658a:	d10c      	bne.n	80065a6 <HAL_RCC_OscConfig+0x312>
 800658c:	4b77      	ldr	r3, [pc, #476]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 800658e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006590:	4a76      	ldr	r2, [pc, #472]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 8006592:	f043 0304 	orr.w	r3, r3, #4
 8006596:	6713      	str	r3, [r2, #112]	; 0x70
 8006598:	4b74      	ldr	r3, [pc, #464]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 800659a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800659c:	4a73      	ldr	r2, [pc, #460]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 800659e:	f043 0301 	orr.w	r3, r3, #1
 80065a2:	6713      	str	r3, [r2, #112]	; 0x70
 80065a4:	e00b      	b.n	80065be <HAL_RCC_OscConfig+0x32a>
 80065a6:	4b71      	ldr	r3, [pc, #452]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	4a70      	ldr	r2, [pc, #448]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	6713      	str	r3, [r2, #112]	; 0x70
 80065b2:	4b6e      	ldr	r3, [pc, #440]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 80065b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b6:	4a6d      	ldr	r2, [pc, #436]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 80065b8:	f023 0304 	bic.w	r3, r3, #4
 80065bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d015      	beq.n	80065f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065c6:	f7fe f825 	bl	8004614 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065cc:	e00a      	b.n	80065e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065ce:	f7fe f821 	bl	8004614 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065dc:	4293      	cmp	r3, r2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e0bc      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065e4:	4b61      	ldr	r3, [pc, #388]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 80065e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0ee      	beq.n	80065ce <HAL_RCC_OscConfig+0x33a>
 80065f0:	e014      	b.n	800661c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065f2:	f7fe f80f 	bl	8004614 <HAL_GetTick>
 80065f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f8:	e00a      	b.n	8006610 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065fa:	f7fe f80b 	bl	8004614 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f241 3288 	movw	r2, #5000	; 0x1388
 8006608:	4293      	cmp	r3, r2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e0a6      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006610:	4b56      	ldr	r3, [pc, #344]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006614:	f003 0302 	and.w	r3, r3, #2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1ee      	bne.n	80065fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b01      	cmp	r3, #1
 8006620:	d105      	bne.n	800662e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006622:	4b52      	ldr	r3, [pc, #328]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	4a51      	ldr	r2, [pc, #324]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 8006628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800662c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8092 	beq.w	800675c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006638:	4b4c      	ldr	r3, [pc, #304]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 030c 	and.w	r3, r3, #12
 8006640:	2b08      	cmp	r3, #8
 8006642:	d05c      	beq.n	80066fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d141      	bne.n	80066d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800664c:	4b48      	ldr	r3, [pc, #288]	; (8006770 <HAL_RCC_OscConfig+0x4dc>)
 800664e:	2200      	movs	r2, #0
 8006650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006652:	f7fd ffdf 	bl	8004614 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800665a:	f7fd ffdb 	bl	8004614 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e078      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800666c:	4b3f      	ldr	r3, [pc, #252]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1f0      	bne.n	800665a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	431a      	orrs	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	019b      	lsls	r3, r3, #6
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	3b01      	subs	r3, #1
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	431a      	orrs	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	4933      	ldr	r1, [pc, #204]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066a2:	4b33      	ldr	r3, [pc, #204]	; (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80066a4:	2201      	movs	r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a8:	f7fd ffb4 	bl	8004614 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066b0:	f7fd ffb0 	bl	8004614 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e04d      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066c2:	4b2a      	ldr	r3, [pc, #168]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f0      	beq.n	80066b0 <HAL_RCC_OscConfig+0x41c>
 80066ce:	e045      	b.n	800675c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066d0:	4b27      	ldr	r3, [pc, #156]	; (8006770 <HAL_RCC_OscConfig+0x4dc>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d6:	f7fd ff9d 	bl	8004614 <HAL_GetTick>
 80066da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066de:	f7fd ff99 	bl	8004614 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e036      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f0:	4b1e      	ldr	r3, [pc, #120]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1f0      	bne.n	80066de <HAL_RCC_OscConfig+0x44a>
 80066fc:	e02e      	b.n	800675c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e029      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800670a:	4b18      	ldr	r3, [pc, #96]	; (800676c <HAL_RCC_OscConfig+0x4d8>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	429a      	cmp	r2, r3
 800671c:	d11c      	bne.n	8006758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006728:	429a      	cmp	r2, r3
 800672a:	d115      	bne.n	8006758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006732:	4013      	ands	r3, r2
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006738:	4293      	cmp	r3, r2
 800673a:	d10d      	bne.n	8006758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006746:	429a      	cmp	r2, r3
 8006748:	d106      	bne.n	8006758 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006754:	429a      	cmp	r2, r3
 8006756:	d001      	beq.n	800675c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e000      	b.n	800675e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	40007000 	.word	0x40007000
 800676c:	40023800 	.word	0x40023800
 8006770:	42470060 	.word	0x42470060

08006774 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e0cc      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006788:	4b68      	ldr	r3, [pc, #416]	; (800692c <HAL_RCC_ClockConfig+0x1b8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d90c      	bls.n	80067b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006796:	4b65      	ldr	r3, [pc, #404]	; (800692c <HAL_RCC_ClockConfig+0x1b8>)
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800679e:	4b63      	ldr	r3, [pc, #396]	; (800692c <HAL_RCC_ClockConfig+0x1b8>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d001      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0b8      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d020      	beq.n	80067fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0304 	and.w	r3, r3, #4
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067c8:	4b59      	ldr	r3, [pc, #356]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	4a58      	ldr	r2, [pc, #352]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80067ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0308 	and.w	r3, r3, #8
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d005      	beq.n	80067ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067e0:	4b53      	ldr	r3, [pc, #332]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	4a52      	ldr	r2, [pc, #328]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80067e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067ec:	4b50      	ldr	r3, [pc, #320]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	494d      	ldr	r1, [pc, #308]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d044      	beq.n	8006894 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d107      	bne.n	8006822 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006812:	4b47      	ldr	r3, [pc, #284]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d119      	bne.n	8006852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e07f      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d003      	beq.n	8006832 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800682e:	2b03      	cmp	r3, #3
 8006830:	d107      	bne.n	8006842 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006832:	4b3f      	ldr	r3, [pc, #252]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d109      	bne.n	8006852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e06f      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006842:	4b3b      	ldr	r3, [pc, #236]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e067      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006852:	4b37      	ldr	r3, [pc, #220]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f023 0203 	bic.w	r2, r3, #3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	4934      	ldr	r1, [pc, #208]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 8006860:	4313      	orrs	r3, r2
 8006862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006864:	f7fd fed6 	bl	8004614 <HAL_GetTick>
 8006868:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686a:	e00a      	b.n	8006882 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800686c:	f7fd fed2 	bl	8004614 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	f241 3288 	movw	r2, #5000	; 0x1388
 800687a:	4293      	cmp	r3, r2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e04f      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006882:	4b2b      	ldr	r3, [pc, #172]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f003 020c 	and.w	r2, r3, #12
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	429a      	cmp	r2, r3
 8006892:	d1eb      	bne.n	800686c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006894:	4b25      	ldr	r3, [pc, #148]	; (800692c <HAL_RCC_ClockConfig+0x1b8>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 030f 	and.w	r3, r3, #15
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d20c      	bcs.n	80068bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a2:	4b22      	ldr	r3, [pc, #136]	; (800692c <HAL_RCC_ClockConfig+0x1b8>)
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068aa:	4b20      	ldr	r3, [pc, #128]	; (800692c <HAL_RCC_ClockConfig+0x1b8>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e032      	b.n	8006922 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d008      	beq.n	80068da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068c8:	4b19      	ldr	r3, [pc, #100]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	4916      	ldr	r1, [pc, #88]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d009      	beq.n	80068fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068e6:	4b12      	ldr	r3, [pc, #72]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	490e      	ldr	r1, [pc, #56]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068fa:	f000 f821 	bl	8006940 <HAL_RCC_GetSysClockFreq>
 80068fe:	4602      	mov	r2, r0
 8006900:	4b0b      	ldr	r3, [pc, #44]	; (8006930 <HAL_RCC_ClockConfig+0x1bc>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	091b      	lsrs	r3, r3, #4
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	490a      	ldr	r1, [pc, #40]	; (8006934 <HAL_RCC_ClockConfig+0x1c0>)
 800690c:	5ccb      	ldrb	r3, [r1, r3]
 800690e:	fa22 f303 	lsr.w	r3, r2, r3
 8006912:	4a09      	ldr	r2, [pc, #36]	; (8006938 <HAL_RCC_ClockConfig+0x1c4>)
 8006914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <HAL_RCC_ClockConfig+0x1c8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4618      	mov	r0, r3
 800691c:	f7fd fe36 	bl	800458c <HAL_InitTick>

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40023c00 	.word	0x40023c00
 8006930:	40023800 	.word	0x40023800
 8006934:	08011f7c 	.word	0x08011f7c
 8006938:	20000000 	.word	0x20000000
 800693c:	20000004 	.word	0x20000004

08006940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006940:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	607b      	str	r3, [r7, #4]
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
 8006950:	2300      	movs	r3, #0
 8006952:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006958:	4b67      	ldr	r3, [pc, #412]	; (8006af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f003 030c 	and.w	r3, r3, #12
 8006960:	2b08      	cmp	r3, #8
 8006962:	d00d      	beq.n	8006980 <HAL_RCC_GetSysClockFreq+0x40>
 8006964:	2b08      	cmp	r3, #8
 8006966:	f200 80bd 	bhi.w	8006ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d002      	beq.n	8006974 <HAL_RCC_GetSysClockFreq+0x34>
 800696e:	2b04      	cmp	r3, #4
 8006970:	d003      	beq.n	800697a <HAL_RCC_GetSysClockFreq+0x3a>
 8006972:	e0b7      	b.n	8006ae4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006974:	4b61      	ldr	r3, [pc, #388]	; (8006afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006976:	60bb      	str	r3, [r7, #8]
       break;
 8006978:	e0b7      	b.n	8006aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800697a:	4b60      	ldr	r3, [pc, #384]	; (8006afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 800697c:	60bb      	str	r3, [r7, #8]
      break;
 800697e:	e0b4      	b.n	8006aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006980:	4b5d      	ldr	r3, [pc, #372]	; (8006af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006988:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800698a:	4b5b      	ldr	r3, [pc, #364]	; (8006af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d04d      	beq.n	8006a32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006996:	4b58      	ldr	r3, [pc, #352]	; (8006af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	099b      	lsrs	r3, r3, #6
 800699c:	461a      	mov	r2, r3
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80069a6:	f04f 0100 	mov.w	r1, #0
 80069aa:	ea02 0800 	and.w	r8, r2, r0
 80069ae:	ea03 0901 	and.w	r9, r3, r1
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	014b      	lsls	r3, r1, #5
 80069c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80069c4:	0142      	lsls	r2, r0, #5
 80069c6:	4610      	mov	r0, r2
 80069c8:	4619      	mov	r1, r3
 80069ca:	ebb0 0008 	subs.w	r0, r0, r8
 80069ce:	eb61 0109 	sbc.w	r1, r1, r9
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	018b      	lsls	r3, r1, #6
 80069dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80069e0:	0182      	lsls	r2, r0, #6
 80069e2:	1a12      	subs	r2, r2, r0
 80069e4:	eb63 0301 	sbc.w	r3, r3, r1
 80069e8:	f04f 0000 	mov.w	r0, #0
 80069ec:	f04f 0100 	mov.w	r1, #0
 80069f0:	00d9      	lsls	r1, r3, #3
 80069f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80069f6:	00d0      	lsls	r0, r2, #3
 80069f8:	4602      	mov	r2, r0
 80069fa:	460b      	mov	r3, r1
 80069fc:	eb12 0208 	adds.w	r2, r2, r8
 8006a00:	eb43 0309 	adc.w	r3, r3, r9
 8006a04:	f04f 0000 	mov.w	r0, #0
 8006a08:	f04f 0100 	mov.w	r1, #0
 8006a0c:	0299      	lsls	r1, r3, #10
 8006a0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006a12:	0290      	lsls	r0, r2, #10
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	4610      	mov	r0, r2
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	f7fa f940 	bl	8000ca8 <__aeabi_uldivmod>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	e04a      	b.n	8006ac8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a32:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	099b      	lsrs	r3, r3, #6
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006a42:	f04f 0100 	mov.w	r1, #0
 8006a46:	ea02 0400 	and.w	r4, r2, r0
 8006a4a:	ea03 0501 	and.w	r5, r3, r1
 8006a4e:	4620      	mov	r0, r4
 8006a50:	4629      	mov	r1, r5
 8006a52:	f04f 0200 	mov.w	r2, #0
 8006a56:	f04f 0300 	mov.w	r3, #0
 8006a5a:	014b      	lsls	r3, r1, #5
 8006a5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006a60:	0142      	lsls	r2, r0, #5
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	1b00      	subs	r0, r0, r4
 8006a68:	eb61 0105 	sbc.w	r1, r1, r5
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	f04f 0300 	mov.w	r3, #0
 8006a74:	018b      	lsls	r3, r1, #6
 8006a76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006a7a:	0182      	lsls	r2, r0, #6
 8006a7c:	1a12      	subs	r2, r2, r0
 8006a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8006a82:	f04f 0000 	mov.w	r0, #0
 8006a86:	f04f 0100 	mov.w	r1, #0
 8006a8a:	00d9      	lsls	r1, r3, #3
 8006a8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a90:	00d0      	lsls	r0, r2, #3
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	1912      	adds	r2, r2, r4
 8006a98:	eb45 0303 	adc.w	r3, r5, r3
 8006a9c:	f04f 0000 	mov.w	r0, #0
 8006aa0:	f04f 0100 	mov.w	r1, #0
 8006aa4:	0299      	lsls	r1, r3, #10
 8006aa6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006aaa:	0290      	lsls	r0, r2, #10
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	f7fa f8f4 	bl	8000ca8 <__aeabi_uldivmod>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ac8:	4b0b      	ldr	r3, [pc, #44]	; (8006af8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	0c1b      	lsrs	r3, r3, #16
 8006ace:	f003 0303 	and.w	r3, r3, #3
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae0:	60bb      	str	r3, [r7, #8]
      break;
 8006ae2:	e002      	b.n	8006aea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ae4:	4b05      	ldr	r3, [pc, #20]	; (8006afc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006ae6:	60bb      	str	r3, [r7, #8]
      break;
 8006ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aea:	68bb      	ldr	r3, [r7, #8]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006af6:	bf00      	nop
 8006af8:	40023800 	.word	0x40023800
 8006afc:	00f42400 	.word	0x00f42400

08006b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b04:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b06:	681b      	ldr	r3, [r3, #0]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20000000 	.word	0x20000000

08006b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b1c:	f7ff fff0 	bl	8006b00 <HAL_RCC_GetHCLKFreq>
 8006b20:	4602      	mov	r2, r0
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	0a9b      	lsrs	r3, r3, #10
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	4903      	ldr	r1, [pc, #12]	; (8006b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b2e:	5ccb      	ldrb	r3, [r1, r3]
 8006b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	40023800 	.word	0x40023800
 8006b3c:	08011f8c 	.word	0x08011f8c

08006b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b44:	f7ff ffdc 	bl	8006b00 <HAL_RCC_GetHCLKFreq>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	0b5b      	lsrs	r3, r3, #13
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	4903      	ldr	r1, [pc, #12]	; (8006b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b56:	5ccb      	ldrb	r3, [r1, r3]
 8006b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	40023800 	.word	0x40023800
 8006b64:	08011f8c 	.word	0x08011f8c

08006b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10b      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d105      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d075      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b9c:	4bad      	ldr	r3, [pc, #692]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ba2:	f7fd fd37 	bl	8004614 <HAL_GetTick>
 8006ba6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ba8:	e008      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006baa:	f7fd fd33 	bl	8004614 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e18b      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bbc:	4ba6      	ldr	r3, [pc, #664]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1f0      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d009      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	019a      	lsls	r2, r3, #6
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	071b      	lsls	r3, r3, #28
 8006be0:	499d      	ldr	r1, [pc, #628]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01f      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006bf4:	4b98      	ldr	r3, [pc, #608]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bfa:	0f1b      	lsrs	r3, r3, #28
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	019a      	lsls	r2, r3, #6
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	061b      	lsls	r3, r3, #24
 8006c0e:	431a      	orrs	r2, r3
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	071b      	lsls	r3, r3, #28
 8006c14:	4990      	ldr	r1, [pc, #576]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c1c:	4b8e      	ldr	r3, [pc, #568]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c22:	f023 021f 	bic.w	r2, r3, #31
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	498a      	ldr	r1, [pc, #552]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00d      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	019a      	lsls	r2, r3, #6
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	061b      	lsls	r3, r3, #24
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	071b      	lsls	r3, r3, #28
 8006c54:	4980      	ldr	r1, [pc, #512]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c5c:	4b7d      	ldr	r3, [pc, #500]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c62:	f7fd fcd7 	bl	8004614 <HAL_GetTick>
 8006c66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c6a:	f7fd fcd3 	bl	8004614 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e12b      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c7c:	4b76      	ldr	r3, [pc, #472]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d105      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d079      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ca0:	4b6e      	ldr	r3, [pc, #440]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ca6:	f7fd fcb5 	bl	8004614 <HAL_GetTick>
 8006caa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cac:	e008      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006cae:	f7fd fcb1 	bl	8004614 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d901      	bls.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e109      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006cc0:	4b65      	ldr	r3, [pc, #404]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ccc:	d0ef      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0304 	and.w	r3, r3, #4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d020      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006cda:	4b5f      	ldr	r3, [pc, #380]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce0:	0f1b      	lsrs	r3, r3, #28
 8006ce2:	f003 0307 	and.w	r3, r3, #7
 8006ce6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	019a      	lsls	r2, r3, #6
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	061b      	lsls	r3, r3, #24
 8006cf4:	431a      	orrs	r2, r3
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	071b      	lsls	r3, r3, #28
 8006cfa:	4957      	ldr	r1, [pc, #348]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d02:	4b55      	ldr	r3, [pc, #340]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d08:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	021b      	lsls	r3, r3, #8
 8006d14:	4950      	ldr	r1, [pc, #320]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0308 	and.w	r3, r3, #8
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01e      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d28:	4b4b      	ldr	r3, [pc, #300]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2e:	0e1b      	lsrs	r3, r3, #24
 8006d30:	f003 030f 	and.w	r3, r3, #15
 8006d34:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	019a      	lsls	r2, r3, #6
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	061b      	lsls	r3, r3, #24
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	071b      	lsls	r3, r3, #28
 8006d48:	4943      	ldr	r1, [pc, #268]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d50:	4b41      	ldr	r3, [pc, #260]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5e:	493e      	ldr	r1, [pc, #248]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d66:	4b3d      	ldr	r3, [pc, #244]	; (8006e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d6c:	f7fd fc52 	bl	8004614 <HAL_GetTick>
 8006d70:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d72:	e008      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d74:	f7fd fc4e 	bl	8004614 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e0a6      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d86:	4b34      	ldr	r3, [pc, #208]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d92:	d1ef      	bne.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0320 	and.w	r3, r3, #32
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 808d 	beq.w	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006da2:	2300      	movs	r3, #0
 8006da4:	60fb      	str	r3, [r7, #12]
 8006da6:	4b2c      	ldr	r3, [pc, #176]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006daa:	4a2b      	ldr	r2, [pc, #172]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006db0:	6413      	str	r3, [r2, #64]	; 0x40
 8006db2:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006dbe:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a27      	ldr	r2, [pc, #156]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006dca:	f7fd fc23 	bl	8004614 <HAL_GetTick>
 8006dce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006dd0:	e008      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006dd2:	f7fd fc1f 	bl	8004614 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e077      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006de4:	4b1e      	ldr	r3, [pc, #120]	; (8006e60 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f0      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006df0:	4b19      	ldr	r3, [pc, #100]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d039      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d032      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e18:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e1e:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e24:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b01      	cmp	r3, #1
 8006e34:	d11e      	bne.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006e36:	f7fd fbed 	bl	8004614 <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e3c:	e014      	b.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e3e:	f7fd fbe9 	bl	8004614 <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d90b      	bls.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e03f      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006e54:	42470068 	.word	0x42470068
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	42470070 	.word	0x42470070
 8006e60:	40007000 	.word	0x40007000
 8006e64:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e68:	4b1c      	ldr	r3, [pc, #112]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0e4      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e80:	d10d      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006e82:	4b16      	ldr	r3, [pc, #88]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006e92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e96:	4911      	ldr	r1, [pc, #68]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	608b      	str	r3, [r1, #8]
 8006e9c:	e005      	b.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006e9e:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	4a0e      	ldr	r2, [pc, #56]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ea4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006ea8:	6093      	str	r3, [r2, #8]
 8006eaa:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb6:	4909      	ldr	r1, [pc, #36]	; (8006edc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006ece:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006ed0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40023800 	.word	0x40023800
 8006ee0:	424711e0 	.word	0x424711e0

08006ee4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e083      	b.n	8006ffe <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7f5b      	ldrb	r3, [r3, #29]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d105      	bne.n	8006f0c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fc fb1c 	bl	8003544 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	22ca      	movs	r2, #202	; 0xca
 8006f18:	625a      	str	r2, [r3, #36]	; 0x24
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2253      	movs	r2, #83	; 0x53
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa59 	bl	80073da <RTC_EnterInitMode>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	22ff      	movs	r2, #255	; 0xff
 8006f34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e05e      	b.n	8006ffe <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f52:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6899      	ldr	r1, [r3, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	431a      	orrs	r2, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	68d2      	ldr	r2, [r2, #12]
 8006f7a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6919      	ldr	r1, [r3, #16]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	041a      	lsls	r2, r3, #16
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f9e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10e      	bne.n	8006fcc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f9eb 	bl	800738a <HAL_RTC_WaitForSynchro>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d008      	beq.n	8006fcc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	22ff      	movs	r2, #255	; 0xff
 8006fc0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e018      	b.n	8006ffe <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fda:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699a      	ldr	r2, [r3, #24]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	22ff      	movs	r2, #255	; 0xff
 8006ff4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007006:	b590      	push	{r4, r7, lr}
 8007008:	b087      	sub	sp, #28
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	7f1b      	ldrb	r3, [r3, #28]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d101      	bne.n	8007022 <HAL_RTC_SetTime+0x1c>
 800701e:	2302      	movs	r3, #2
 8007020:	e0aa      	b.n	8007178 <HAL_RTC_SetTime+0x172>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2202      	movs	r2, #2
 800702c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d126      	bne.n	8007082 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d102      	bne.n	8007048 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2200      	movs	r2, #0
 8007046:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f000 f9f0 	bl	8007432 <RTC_ByteToBcd2>
 8007052:	4603      	mov	r3, r0
 8007054:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	4618      	mov	r0, r3
 800705c:	f000 f9e9 	bl	8007432 <RTC_ByteToBcd2>
 8007060:	4603      	mov	r3, r0
 8007062:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007064:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	789b      	ldrb	r3, [r3, #2]
 800706a:	4618      	mov	r0, r3
 800706c:	f000 f9e1 	bl	8007432 <RTC_ByteToBcd2>
 8007070:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007072:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	78db      	ldrb	r3, [r3, #3]
 800707a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	e018      	b.n	80070b4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2200      	movs	r2, #0
 8007094:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070a2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80070a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	78db      	ldrb	r3, [r3, #3]
 80070ae:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	22ca      	movs	r2, #202	; 0xca
 80070ba:	625a      	str	r2, [r3, #36]	; 0x24
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2253      	movs	r2, #83	; 0x53
 80070c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f000 f988 	bl	80073da <RTC_EnterInitMode>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	22ff      	movs	r2, #255	; 0xff
 80070d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2204      	movs	r2, #4
 80070dc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2200      	movs	r2, #0
 80070e2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e047      	b.n	8007178 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80070f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80070f6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007106:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6899      	ldr	r1, [r3, #8]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	431a      	orrs	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	430a      	orrs	r2, r1
 800711e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800712e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d111      	bne.n	8007162 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 f923 	bl	800738a <HAL_RTC_WaitForSynchro>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	22ff      	movs	r2, #255	; 0xff
 8007150:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2204      	movs	r2, #4
 8007156:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e00a      	b.n	8007178 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	22ff      	movs	r2, #255	; 0xff
 8007168:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2201      	movs	r2, #1
 800716e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007176:	2300      	movs	r3, #0
  }
}
 8007178:	4618      	mov	r0, r3
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	bd90      	pop	{r4, r7, pc}

08007180 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80071b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80071b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	0c1b      	lsrs	r3, r3, #16
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	0a1b      	lsrs	r3, r3, #8
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d2:	b2da      	uxtb	r2, r3
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d11a      	bne.n	8007232 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f934 	bl	800746e <RTC_Bcd2ToByte>
 8007206:	4603      	mov	r3, r0
 8007208:	461a      	mov	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	4618      	mov	r0, r3
 8007214:	f000 f92b 	bl	800746e <RTC_Bcd2ToByte>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	789b      	ldrb	r3, [r3, #2]
 8007224:	4618      	mov	r0, r3
 8007226:	f000 f922 	bl	800746e <RTC_Bcd2ToByte>
 800722a:	4603      	mov	r3, r0
 800722c:	461a      	mov	r2, r3
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800723c:	b590      	push	{r4, r7, lr}
 800723e:	b087      	sub	sp, #28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	7f1b      	ldrb	r3, [r3, #28]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_RTC_SetDate+0x1c>
 8007254:	2302      	movs	r3, #2
 8007256:	e094      	b.n	8007382 <HAL_RTC_SetDate+0x146>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2202      	movs	r2, #2
 8007262:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10e      	bne.n	8007288 <HAL_RTC_SetDate+0x4c>
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	f003 0310 	and.w	r3, r3, #16
 8007272:	2b00      	cmp	r3, #0
 8007274:	d008      	beq.n	8007288 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	f023 0310 	bic.w	r3, r3, #16
 800727e:	b2db      	uxtb	r3, r3
 8007280:	330a      	adds	r3, #10
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d11c      	bne.n	80072c8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	78db      	ldrb	r3, [r3, #3]
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f8cd 	bl	8007432 <RTC_ByteToBcd2>
 8007298:	4603      	mov	r3, r0
 800729a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 f8c6 	bl	8007432 <RTC_ByteToBcd2>
 80072a6:	4603      	mov	r3, r0
 80072a8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80072aa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	789b      	ldrb	r3, [r3, #2]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f000 f8be 	bl	8007432 <RTC_ByteToBcd2>
 80072b6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80072b8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	e00e      	b.n	80072e6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	78db      	ldrb	r3, [r3, #3]
 80072cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	785b      	ldrb	r3, [r3, #1]
 80072d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80072d4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80072da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	22ca      	movs	r2, #202	; 0xca
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2253      	movs	r2, #83	; 0x53
 80072f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f86f 	bl	80073da <RTC_EnterInitMode>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00b      	beq.n	800731a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	22ff      	movs	r2, #255	; 0xff
 8007308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2204      	movs	r2, #4
 800730e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e033      	b.n	8007382 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007324:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007328:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007338:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d111      	bne.n	800736c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f81e 	bl	800738a <HAL_RTC_WaitForSynchro>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00b      	beq.n	800736c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	22ff      	movs	r2, #255	; 0xff
 800735a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2204      	movs	r2, #4
 8007360:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e00a      	b.n	8007382 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	22ff      	movs	r2, #255	; 0xff
 8007372:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007380:	2300      	movs	r3, #0
  }
}
 8007382:	4618      	mov	r0, r3
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	bd90      	pop	{r4, r7, pc}

0800738a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68da      	ldr	r2, [r3, #12]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80073a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073a6:	f7fd f935 	bl	8004614 <HAL_GetTick>
 80073aa:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80073ac:	e009      	b.n	80073c2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80073ae:	f7fd f931 	bl	8004614 <HAL_GetTick>
 80073b2:	4602      	mov	r2, r0
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073bc:	d901      	bls.n	80073c2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e007      	b.n	80073d2 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d0ee      	beq.n	80073ae <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d119      	bne.n	8007428 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f04f 32ff 	mov.w	r2, #4294967295
 80073fc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80073fe:	f7fd f909 	bl	8004614 <HAL_GetTick>
 8007402:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007404:	e009      	b.n	800741a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007406:	f7fd f905 	bl	8004614 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007414:	d901      	bls.n	800741a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e007      	b.n	800742a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0ee      	beq.n	8007406 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007432:	b480      	push	{r7}
 8007434:	b085      	sub	sp, #20
 8007436:	af00      	add	r7, sp, #0
 8007438:	4603      	mov	r3, r0
 800743a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8007440:	e005      	b.n	800744e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	3b0a      	subs	r3, #10
 800744c:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800744e:	79fb      	ldrb	r3, [r7, #7]
 8007450:	2b09      	cmp	r3, #9
 8007452:	d8f6      	bhi.n	8007442 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	b2da      	uxtb	r2, r3
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	4313      	orrs	r3, r2
 8007460:	b2db      	uxtb	r3, r3
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	4603      	mov	r3, r0
 8007476:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	091b      	lsrs	r3, r3, #4
 8007480:	b2db      	uxtb	r3, r3
 8007482:	461a      	mov	r2, r3
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	b2da      	uxtb	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	4413      	add	r3, r2
 800749c:	b2db      	uxtb	r3, r3
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3714      	adds	r7, #20
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e056      	b.n	800756a <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d106      	bne.n	80074dc <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7fc f84a 	bl	8003570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	431a      	orrs	r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	431a      	orrs	r2, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	69db      	ldr	r3, [r3, #28]
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	ea42 0103 	orr.w	r1, r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	430a      	orrs	r2, r1
 8007532:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	0c1b      	lsrs	r3, r3, #16
 800753a:	f003 0104 	and.w	r1, r3, #4
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	69da      	ldr	r2, [r3, #28]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007558:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3708      	adds	r7, #8
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b088      	sub	sp, #32
 8007576:	af02      	add	r7, sp, #8
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	4613      	mov	r3, r2
 8007580:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800758e:	d112      	bne.n	80075b6 <HAL_SPI_Receive+0x44>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10e      	bne.n	80075b6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2204      	movs	r2, #4
 800759c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80075a0:	88fa      	ldrh	r2, [r7, #6]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	4613      	mov	r3, r2
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 f8e9 	bl	8007784 <HAL_SPI_TransmitReceive>
 80075b2:	4603      	mov	r3, r0
 80075b4:	e0e2      	b.n	800777c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_SPI_Receive+0x52>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e0db      	b.n	800777c <HAL_SPI_Receive+0x20a>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075cc:	f7fd f822 	bl	8004614 <HAL_GetTick>
 80075d0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d002      	beq.n	80075e4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80075de:	2302      	movs	r3, #2
 80075e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075e2:	e0c2      	b.n	800776a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_SPI_Receive+0x7e>
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d102      	bne.n	80075f6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075f4:	e0b9      	b.n	800776a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2204      	movs	r2, #4
 80075fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	88fa      	ldrh	r2, [r7, #6]
 800760e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	88fa      	ldrh	r2, [r7, #6]
 8007614:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800763c:	d107      	bne.n	800764e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800764c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	d007      	beq.n	800766c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800766a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d162      	bne.n	800773a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007674:	e02e      	b.n	80076d4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b01      	cmp	r3, #1
 8007682:	d115      	bne.n	80076b0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f103 020c 	add.w	r2, r3, #12
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076ae:	e011      	b.n	80076d4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076b0:	f7fc ffb0 	bl	8004614 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d803      	bhi.n	80076c8 <HAL_SPI_Receive+0x156>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d102      	bne.n	80076ce <HAL_SPI_Receive+0x15c>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076d2:	e04a      	b.n	800776a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076d8:	b29b      	uxth	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1cb      	bne.n	8007676 <HAL_SPI_Receive+0x104>
 80076de:	e031      	b.n	8007744 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d113      	bne.n	8007716 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	b292      	uxth	r2, r2
 80076fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007700:	1c9a      	adds	r2, r3, #2
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007714:	e011      	b.n	800773a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007716:	f7fc ff7d 	bl	8004614 <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	429a      	cmp	r2, r3
 8007724:	d803      	bhi.n	800772e <HAL_SPI_Receive+0x1bc>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772c:	d102      	bne.n	8007734 <HAL_SPI_Receive+0x1c2>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d102      	bne.n	800773a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8007734:	2303      	movs	r3, #3
 8007736:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007738:	e017      	b.n	800776a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773e:	b29b      	uxth	r3, r3
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1cd      	bne.n	80076e0 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 fa27 	bl	8007b9c <SPI_EndRxTransaction>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2220      	movs	r2, #32
 8007758:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775e:	2b00      	cmp	r3, #0
 8007760:	d002      	beq.n	8007768 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	75fb      	strb	r3, [r7, #23]
 8007766:	e000      	b.n	800776a <HAL_SPI_Receive+0x1f8>
  }

error :
 8007768:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800777a:	7dfb      	ldrb	r3, [r7, #23]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08c      	sub	sp, #48	; 0x30
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007792:	2301      	movs	r3, #1
 8007794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_SPI_TransmitReceive+0x26>
 80077a6:	2302      	movs	r3, #2
 80077a8:	e18a      	b.n	8007ac0 <HAL_SPI_TransmitReceive+0x33c>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077b2:	f7fc ff2f 	bl	8004614 <HAL_GetTick>
 80077b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80077c8:	887b      	ldrh	r3, [r7, #2]
 80077ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d00f      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0x70>
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077da:	d107      	bne.n	80077ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <HAL_SPI_TransmitReceive+0x68>
 80077e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077e8:	2b04      	cmp	r3, #4
 80077ea:	d003      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077ec:	2302      	movs	r3, #2
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80077f2:	e15b      	b.n	8007aac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d005      	beq.n	8007806 <HAL_SPI_TransmitReceive+0x82>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <HAL_SPI_TransmitReceive+0x82>
 8007800:	887b      	ldrh	r3, [r7, #2]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800780c:	e14e      	b.n	8007aac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b04      	cmp	r3, #4
 8007818:	d003      	beq.n	8007822 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2205      	movs	r2, #5
 800781e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	887a      	ldrh	r2, [r7, #2]
 8007832:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	887a      	ldrh	r2, [r7, #2]
 8007838:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	887a      	ldrh	r2, [r7, #2]
 8007844:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	887a      	ldrh	r2, [r7, #2]
 800784a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007862:	2b40      	cmp	r3, #64	; 0x40
 8007864:	d007      	beq.n	8007876 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007874:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800787e:	d178      	bne.n	8007972 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <HAL_SPI_TransmitReceive+0x10a>
 8007888:	8b7b      	ldrh	r3, [r7, #26]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d166      	bne.n	800795c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	881a      	ldrh	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789e:	1c9a      	adds	r2, r3, #2
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078b2:	e053      	b.n	800795c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d11b      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x176>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d016      	beq.n	80078fa <HAL_SPI_TransmitReceive+0x176>
 80078cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d113      	bne.n	80078fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d6:	881a      	ldrh	r2, [r3, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e2:	1c9a      	adds	r2, r3, #2
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b01      	cmp	r3, #1
 8007906:	d119      	bne.n	800793c <HAL_SPI_TransmitReceive+0x1b8>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d014      	beq.n	800793c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	b292      	uxth	r2, r2
 800791e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007924:	1c9a      	adds	r2, r3, #2
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800792e:	b29b      	uxth	r3, r3
 8007930:	3b01      	subs	r3, #1
 8007932:	b29a      	uxth	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007938:	2301      	movs	r3, #1
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800793c:	f7fc fe6a 	bl	8004614 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007948:	429a      	cmp	r2, r3
 800794a:	d807      	bhi.n	800795c <HAL_SPI_TransmitReceive+0x1d8>
 800794c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007952:	d003      	beq.n	800795c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800795a:	e0a7      	b.n	8007aac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1a6      	bne.n	80078b4 <HAL_SPI_TransmitReceive+0x130>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800796a:	b29b      	uxth	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1a1      	bne.n	80078b4 <HAL_SPI_TransmitReceive+0x130>
 8007970:	e07c      	b.n	8007a6c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d002      	beq.n	8007980 <HAL_SPI_TransmitReceive+0x1fc>
 800797a:	8b7b      	ldrh	r3, [r7, #26]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d16b      	bne.n	8007a58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	330c      	adds	r3, #12
 800798a:	7812      	ldrb	r2, [r2, #0]
 800798c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800799c:	b29b      	uxth	r3, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	b29a      	uxth	r2, r3
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079a6:	e057      	b.n	8007a58 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d11c      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x26c>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d017      	beq.n	80079f0 <HAL_SPI_TransmitReceive+0x26c>
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d114      	bne.n	80079f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	330c      	adds	r3, #12
 80079d0:	7812      	ldrb	r2, [r2, #0]
 80079d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079ec:	2300      	movs	r3, #0
 80079ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d119      	bne.n	8007a32 <HAL_SPI_TransmitReceive+0x2ae>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d014      	beq.n	8007a32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	b2d2      	uxtb	r2, r2
 8007a14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	3b01      	subs	r3, #1
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007a32:	f7fc fdef 	bl	8004614 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d803      	bhi.n	8007a4a <HAL_SPI_TransmitReceive+0x2c6>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a48:	d102      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x2cc>
 8007a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d103      	bne.n	8007a58 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a56:	e029      	b.n	8007aac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1a2      	bne.n	80079a8 <HAL_SPI_TransmitReceive+0x224>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d19d      	bne.n	80079a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f000 f8f9 	bl	8007c68 <SPI_EndRxTxTransaction>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007a88:	e010      	b.n	8007aac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10b      	bne.n	8007aaa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	617b      	str	r3, [r7, #20]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	e000      	b.n	8007aac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007aaa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007abc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3730      	adds	r7, #48	; 0x30
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	60f8      	str	r0, [r7, #12]
 8007ad0:	60b9      	str	r1, [r7, #8]
 8007ad2:	603b      	str	r3, [r7, #0]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ad8:	e04c      	b.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae0:	d048      	beq.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007ae2:	f7fc fd97 	bl	8004614 <HAL_GetTick>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d902      	bls.n	8007af8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d13d      	bne.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007b06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b10:	d111      	bne.n	8007b36 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b1a:	d004      	beq.n	8007b26 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b24:	d107      	bne.n	8007b36 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b3e:	d10f      	bne.n	8007b60 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e00f      	b.n	8007b94 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689a      	ldr	r2, [r3, #8]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	bf0c      	ite	eq
 8007b84:	2301      	moveq	r3, #1
 8007b86:	2300      	movne	r3, #0
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d1a3      	bne.n	8007ada <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bb0:	d111      	bne.n	8007bd6 <SPI_EndRxTransaction+0x3a>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bba:	d004      	beq.n	8007bc6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc4:	d107      	bne.n	8007bd6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bd4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bde:	d12a      	bne.n	8007c36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be8:	d012      	beq.n	8007c10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	2180      	movs	r1, #128	; 0x80
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f7ff ff67 	bl	8007ac8 <SPI_WaitFlagStateUntilTimeout>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d02d      	beq.n	8007c5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c04:	f043 0220 	orr.w	r2, r3, #32
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e026      	b.n	8007c5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2200      	movs	r2, #0
 8007c18:	2101      	movs	r1, #1
 8007c1a:	68f8      	ldr	r0, [r7, #12]
 8007c1c:	f7ff ff54 	bl	8007ac8 <SPI_WaitFlagStateUntilTimeout>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d01a      	beq.n	8007c5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2a:	f043 0220 	orr.w	r2, r3, #32
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e013      	b.n	8007c5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2101      	movs	r1, #1
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f7ff ff41 	bl	8007ac8 <SPI_WaitFlagStateUntilTimeout>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d007      	beq.n	8007c5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c50:	f043 0220 	orr.w	r2, r3, #32
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e000      	b.n	8007c5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c74:	4b1b      	ldr	r3, [pc, #108]	; (8007ce4 <SPI_EndRxTxTransaction+0x7c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a1b      	ldr	r2, [pc, #108]	; (8007ce8 <SPI_EndRxTxTransaction+0x80>)
 8007c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7e:	0d5b      	lsrs	r3, r3, #21
 8007c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c84:	fb02 f303 	mul.w	r3, r2, r3
 8007c88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c92:	d112      	bne.n	8007cba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2180      	movs	r1, #128	; 0x80
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f7ff ff12 	bl	8007ac8 <SPI_WaitFlagStateUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d016      	beq.n	8007cd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cae:	f043 0220 	orr.w	r2, r3, #32
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e00f      	b.n	8007cda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	3b01      	subs	r3, #1
 8007cc4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd0:	2b80      	cmp	r3, #128	; 0x80
 8007cd2:	d0f2      	beq.n	8007cba <SPI_EndRxTxTransaction+0x52>
 8007cd4:	e000      	b.n	8007cd8 <SPI_EndRxTxTransaction+0x70>
        break;
 8007cd6:	bf00      	nop
  }

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000000 	.word	0x20000000
 8007ce8:	165e9f81 	.word	0x165e9f81

08007cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e01d      	b.n	8007d3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d106      	bne.n	8007d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7fb fce2 	bl	80036dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f000 fbb2 	bl	8008494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b085      	sub	sp, #20
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0201 	orr.w	r2, r2, #1
 8007d58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	f003 0307 	and.w	r3, r3, #7
 8007d64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b06      	cmp	r3, #6
 8007d6a:	d007      	beq.n	8007d7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e01d      	b.n	8007dd8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 f815 	bl	8007de0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2202      	movs	r2, #2
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	3304      	adds	r3, #4
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4610      	mov	r0, r2
 8007dca:	f000 fb63 	bl	8008494 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2201      	movs	r2, #1
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fe2e 	bl	8008a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a15      	ldr	r2, [pc, #84]	; (8007e68 <HAL_TIM_PWM_Start+0x74>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d004      	beq.n	8007e20 <HAL_TIM_PWM_Start+0x2c>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a14      	ldr	r2, [pc, #80]	; (8007e6c <HAL_TIM_PWM_Start+0x78>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d101      	bne.n	8007e24 <HAL_TIM_PWM_Start+0x30>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <HAL_TIM_PWM_Start+0x32>
 8007e24:	2300      	movs	r3, #0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d007      	beq.n	8007e3a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f003 0307 	and.w	r3, r3, #7
 8007e44:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b06      	cmp	r3, #6
 8007e4a:	d007      	beq.n	8007e5c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	40010000 	.word	0x40010000
 8007e6c:	40010400 	.word	0x40010400

08007e70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fdf0 	bl	8008a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a22      	ldr	r2, [pc, #136]	; (8007f18 <HAL_TIM_PWM_Stop+0xa8>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d004      	beq.n	8007e9c <HAL_TIM_PWM_Stop+0x2c>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a21      	ldr	r2, [pc, #132]	; (8007f1c <HAL_TIM_PWM_Stop+0xac>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d101      	bne.n	8007ea0 <HAL_TIM_PWM_Stop+0x30>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <HAL_TIM_PWM_Stop+0x32>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d017      	beq.n	8007ed6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6a1a      	ldr	r2, [r3, #32]
 8007eac:	f241 1311 	movw	r3, #4369	; 0x1111
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10f      	bne.n	8007ed6 <HAL_TIM_PWM_Stop+0x66>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6a1a      	ldr	r2, [r3, #32]
 8007ebc:	f240 4344 	movw	r3, #1092	; 0x444
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d107      	bne.n	8007ed6 <HAL_TIM_PWM_Stop+0x66>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6a1a      	ldr	r2, [r3, #32]
 8007edc:	f241 1311 	movw	r3, #4369	; 0x1111
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10f      	bne.n	8007f06 <HAL_TIM_PWM_Stop+0x96>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6a1a      	ldr	r2, [r3, #32]
 8007eec:	f240 4344 	movw	r3, #1092	; 0x444
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <HAL_TIM_PWM_Stop+0x96>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	40010400 	.word	0x40010400

08007f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d122      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d11b      	bne.n	8007f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0202 	mvn.w	r2, #2
 8007f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa78 	bl	8008458 <HAL_TIM_IC_CaptureCallback>
 8007f68:	e005      	b.n	8007f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 fa6a 	bl	8008444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fa7b 	bl	800846c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	f003 0304 	and.w	r3, r3, #4
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d122      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d11b      	bne.n	8007fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f06f 0204 	mvn.w	r2, #4
 8007fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa4e 	bl	8008458 <HAL_TIM_IC_CaptureCallback>
 8007fbc:	e005      	b.n	8007fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fa40 	bl	8008444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fa51 	bl	800846c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0308 	and.w	r3, r3, #8
 8007fda:	2b08      	cmp	r3, #8
 8007fdc:	d122      	bne.n	8008024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0308 	and.w	r3, r3, #8
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d11b      	bne.n	8008024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0208 	mvn.w	r2, #8
 8007ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2204      	movs	r2, #4
 8007ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fa24 	bl	8008458 <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa16 	bl	8008444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fa27 	bl	800846c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0310 	and.w	r3, r3, #16
 800802e:	2b10      	cmp	r3, #16
 8008030:	d122      	bne.n	8008078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0310 	and.w	r3, r3, #16
 800803c:	2b10      	cmp	r3, #16
 800803e:	d11b      	bne.n	8008078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0210 	mvn.w	r2, #16
 8008048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2208      	movs	r2, #8
 800804e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f9fa 	bl	8008458 <HAL_TIM_IC_CaptureCallback>
 8008064:	e005      	b.n	8008072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f9ec 	bl	8008444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f9fd 	bl	800846c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b01      	cmp	r3, #1
 8008084:	d10e      	bne.n	80080a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b01      	cmp	r3, #1
 8008092:	d107      	bne.n	80080a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0201 	mvn.w	r2, #1
 800809c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7fa fcf6 	bl	8002a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ae:	2b80      	cmp	r3, #128	; 0x80
 80080b0:	d10e      	bne.n	80080d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080bc:	2b80      	cmp	r3, #128	; 0x80
 80080be:	d107      	bne.n	80080d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80080c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fd78 	bl	8008bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080da:	2b40      	cmp	r3, #64	; 0x40
 80080dc:	d10e      	bne.n	80080fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e8:	2b40      	cmp	r3, #64	; 0x40
 80080ea:	d107      	bne.n	80080fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f9c2 	bl	8008480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0320 	and.w	r3, r3, #32
 8008106:	2b20      	cmp	r3, #32
 8008108:	d10e      	bne.n	8008128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f003 0320 	and.w	r3, r3, #32
 8008114:	2b20      	cmp	r3, #32
 8008116:	d107      	bne.n	8008128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0220 	mvn.w	r2, #32
 8008120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fd42 	bl	8008bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008146:	2302      	movs	r3, #2
 8008148:	e0b4      	b.n	80082b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2202      	movs	r2, #2
 8008156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b0c      	cmp	r3, #12
 800815e:	f200 809f 	bhi.w	80082a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008162:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008168:	0800819d 	.word	0x0800819d
 800816c:	080082a1 	.word	0x080082a1
 8008170:	080082a1 	.word	0x080082a1
 8008174:	080082a1 	.word	0x080082a1
 8008178:	080081dd 	.word	0x080081dd
 800817c:	080082a1 	.word	0x080082a1
 8008180:	080082a1 	.word	0x080082a1
 8008184:	080082a1 	.word	0x080082a1
 8008188:	0800821f 	.word	0x0800821f
 800818c:	080082a1 	.word	0x080082a1
 8008190:	080082a1 	.word	0x080082a1
 8008194:	080082a1 	.word	0x080082a1
 8008198:	0800825f 	.word	0x0800825f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68b9      	ldr	r1, [r7, #8]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fa16 	bl	80085d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0208 	orr.w	r2, r2, #8
 80081b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	699a      	ldr	r2, [r3, #24]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f022 0204 	bic.w	r2, r2, #4
 80081c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6999      	ldr	r1, [r3, #24]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	691a      	ldr	r2, [r3, #16]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	619a      	str	r2, [r3, #24]
      break;
 80081da:	e062      	b.n	80082a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fa66 	bl	80086b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6999      	ldr	r1, [r3, #24]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	021a      	lsls	r2, r3, #8
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	430a      	orrs	r2, r1
 800821a:	619a      	str	r2, [r3, #24]
      break;
 800821c:	e041      	b.n	80082a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	4618      	mov	r0, r3
 8008226:	f000 fabb 	bl	80087a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0208 	orr.w	r2, r2, #8
 8008238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69da      	ldr	r2, [r3, #28]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0204 	bic.w	r2, r2, #4
 8008248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	69d9      	ldr	r1, [r3, #28]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	691a      	ldr	r2, [r3, #16]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	61da      	str	r2, [r3, #28]
      break;
 800825c:	e021      	b.n	80082a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fb0f 	bl	8008888 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69da      	ldr	r2, [r3, #28]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69d9      	ldr	r1, [r3, #28]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	021a      	lsls	r2, r3, #8
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	430a      	orrs	r2, r1
 800829c:	61da      	str	r2, [r3, #28]
      break;
 800829e:	e000      	b.n	80082a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80082a0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_TIM_ConfigClockSource+0x18>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e0b3      	b.n	800843c <HAL_TIM_ConfigClockSource+0x180>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80082f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082fa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800830c:	d03e      	beq.n	800838c <HAL_TIM_ConfigClockSource+0xd0>
 800830e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008312:	f200 8087 	bhi.w	8008424 <HAL_TIM_ConfigClockSource+0x168>
 8008316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800831a:	f000 8085 	beq.w	8008428 <HAL_TIM_ConfigClockSource+0x16c>
 800831e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008322:	d87f      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x168>
 8008324:	2b70      	cmp	r3, #112	; 0x70
 8008326:	d01a      	beq.n	800835e <HAL_TIM_ConfigClockSource+0xa2>
 8008328:	2b70      	cmp	r3, #112	; 0x70
 800832a:	d87b      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x168>
 800832c:	2b60      	cmp	r3, #96	; 0x60
 800832e:	d050      	beq.n	80083d2 <HAL_TIM_ConfigClockSource+0x116>
 8008330:	2b60      	cmp	r3, #96	; 0x60
 8008332:	d877      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x168>
 8008334:	2b50      	cmp	r3, #80	; 0x50
 8008336:	d03c      	beq.n	80083b2 <HAL_TIM_ConfigClockSource+0xf6>
 8008338:	2b50      	cmp	r3, #80	; 0x50
 800833a:	d873      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x168>
 800833c:	2b40      	cmp	r3, #64	; 0x40
 800833e:	d058      	beq.n	80083f2 <HAL_TIM_ConfigClockSource+0x136>
 8008340:	2b40      	cmp	r3, #64	; 0x40
 8008342:	d86f      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x168>
 8008344:	2b30      	cmp	r3, #48	; 0x30
 8008346:	d064      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x156>
 8008348:	2b30      	cmp	r3, #48	; 0x30
 800834a:	d86b      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x168>
 800834c:	2b20      	cmp	r3, #32
 800834e:	d060      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x156>
 8008350:	2b20      	cmp	r3, #32
 8008352:	d867      	bhi.n	8008424 <HAL_TIM_ConfigClockSource+0x168>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d05c      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x156>
 8008358:	2b10      	cmp	r3, #16
 800835a:	d05a      	beq.n	8008412 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800835c:	e062      	b.n	8008424 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	6899      	ldr	r1, [r3, #8]
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f000 fb5b 	bl	8008a28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008380:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	609a      	str	r2, [r3, #8]
      break;
 800838a:	e04e      	b.n	800842a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6818      	ldr	r0, [r3, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	6899      	ldr	r1, [r3, #8]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	f000 fb44 	bl	8008a28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689a      	ldr	r2, [r3, #8]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083ae:	609a      	str	r2, [r3, #8]
      break;
 80083b0:	e03b      	b.n	800842a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	6859      	ldr	r1, [r3, #4]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	461a      	mov	r2, r3
 80083c0:	f000 fab8 	bl	8008934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2150      	movs	r1, #80	; 0x50
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 fb11 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 80083d0:	e02b      	b.n	800842a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6859      	ldr	r1, [r3, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	461a      	mov	r2, r3
 80083e0:	f000 fad7 	bl	8008992 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2160      	movs	r1, #96	; 0x60
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fb01 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 80083f0:	e01b      	b.n	800842a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	6859      	ldr	r1, [r3, #4]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	461a      	mov	r2, r3
 8008400:	f000 fa98 	bl	8008934 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2140      	movs	r1, #64	; 0x40
 800840a:	4618      	mov	r0, r3
 800840c:	f000 faf1 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 8008410:	e00b      	b.n	800842a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4619      	mov	r1, r3
 800841c:	4610      	mov	r0, r2
 800841e:	f000 fae8 	bl	80089f2 <TIM_ITRx_SetConfig>
      break;
 8008422:	e002      	b.n	800842a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008424:	bf00      	nop
 8008426:	e000      	b.n	800842a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008428:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800844c:	bf00      	nop
 800844e:	370c      	adds	r7, #12
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a40      	ldr	r2, [pc, #256]	; (80085a8 <TIM_Base_SetConfig+0x114>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d013      	beq.n	80084d4 <TIM_Base_SetConfig+0x40>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b2:	d00f      	beq.n	80084d4 <TIM_Base_SetConfig+0x40>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a3d      	ldr	r2, [pc, #244]	; (80085ac <TIM_Base_SetConfig+0x118>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d00b      	beq.n	80084d4 <TIM_Base_SetConfig+0x40>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a3c      	ldr	r2, [pc, #240]	; (80085b0 <TIM_Base_SetConfig+0x11c>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d007      	beq.n	80084d4 <TIM_Base_SetConfig+0x40>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a3b      	ldr	r2, [pc, #236]	; (80085b4 <TIM_Base_SetConfig+0x120>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d003      	beq.n	80084d4 <TIM_Base_SetConfig+0x40>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a3a      	ldr	r2, [pc, #232]	; (80085b8 <TIM_Base_SetConfig+0x124>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d108      	bne.n	80084e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a2f      	ldr	r2, [pc, #188]	; (80085a8 <TIM_Base_SetConfig+0x114>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d02b      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f4:	d027      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a2c      	ldr	r2, [pc, #176]	; (80085ac <TIM_Base_SetConfig+0x118>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d023      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a2b      	ldr	r2, [pc, #172]	; (80085b0 <TIM_Base_SetConfig+0x11c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d01f      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a2a      	ldr	r2, [pc, #168]	; (80085b4 <TIM_Base_SetConfig+0x120>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d01b      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a29      	ldr	r2, [pc, #164]	; (80085b8 <TIM_Base_SetConfig+0x124>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d017      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a28      	ldr	r2, [pc, #160]	; (80085bc <TIM_Base_SetConfig+0x128>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d013      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a27      	ldr	r2, [pc, #156]	; (80085c0 <TIM_Base_SetConfig+0x12c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d00f      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a26      	ldr	r2, [pc, #152]	; (80085c4 <TIM_Base_SetConfig+0x130>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00b      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a25      	ldr	r2, [pc, #148]	; (80085c8 <TIM_Base_SetConfig+0x134>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d007      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a24      	ldr	r2, [pc, #144]	; (80085cc <TIM_Base_SetConfig+0x138>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d003      	beq.n	8008546 <TIM_Base_SetConfig+0xb2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a23      	ldr	r2, [pc, #140]	; (80085d0 <TIM_Base_SetConfig+0x13c>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d108      	bne.n	8008558 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800854c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	4313      	orrs	r3, r2
 8008556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	4313      	orrs	r3, r2
 8008564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a0a      	ldr	r2, [pc, #40]	; (80085a8 <TIM_Base_SetConfig+0x114>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d003      	beq.n	800858c <TIM_Base_SetConfig+0xf8>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a0c      	ldr	r2, [pc, #48]	; (80085b8 <TIM_Base_SetConfig+0x124>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d103      	bne.n	8008594 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	691a      	ldr	r2, [r3, #16]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	615a      	str	r2, [r3, #20]
}
 800859a:	bf00      	nop
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	40010000 	.word	0x40010000
 80085ac:	40000400 	.word	0x40000400
 80085b0:	40000800 	.word	0x40000800
 80085b4:	40000c00 	.word	0x40000c00
 80085b8:	40010400 	.word	0x40010400
 80085bc:	40014000 	.word	0x40014000
 80085c0:	40014400 	.word	0x40014400
 80085c4:	40014800 	.word	0x40014800
 80085c8:	40001800 	.word	0x40001800
 80085cc:	40001c00 	.word	0x40001c00
 80085d0:	40002000 	.word	0x40002000

080085d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	f023 0201 	bic.w	r2, r3, #1
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0303 	bic.w	r3, r3, #3
 800860a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f023 0302 	bic.w	r3, r3, #2
 800861c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	4313      	orrs	r3, r2
 8008626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a20      	ldr	r2, [pc, #128]	; (80086ac <TIM_OC1_SetConfig+0xd8>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_OC1_SetConfig+0x64>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a1f      	ldr	r2, [pc, #124]	; (80086b0 <TIM_OC1_SetConfig+0xdc>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d10c      	bne.n	8008652 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f023 0308 	bic.w	r3, r3, #8
 800863e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f023 0304 	bic.w	r3, r3, #4
 8008650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a15      	ldr	r2, [pc, #84]	; (80086ac <TIM_OC1_SetConfig+0xd8>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d003      	beq.n	8008662 <TIM_OC1_SetConfig+0x8e>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a14      	ldr	r2, [pc, #80]	; (80086b0 <TIM_OC1_SetConfig+0xdc>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d111      	bne.n	8008686 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	4313      	orrs	r3, r2
 8008684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	685a      	ldr	r2, [r3, #4]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	621a      	str	r2, [r3, #32]
}
 80086a0:	bf00      	nop
 80086a2:	371c      	adds	r7, #28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	40010000 	.word	0x40010000
 80086b0:	40010400 	.word	0x40010400

080086b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	f023 0210 	bic.w	r2, r3, #16
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a1b      	ldr	r3, [r3, #32]
 80086ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f023 0320 	bic.w	r3, r3, #32
 80086fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	4313      	orrs	r3, r2
 800870a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a22      	ldr	r2, [pc, #136]	; (8008798 <TIM_OC2_SetConfig+0xe4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d003      	beq.n	800871c <TIM_OC2_SetConfig+0x68>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a21      	ldr	r2, [pc, #132]	; (800879c <TIM_OC2_SetConfig+0xe8>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d10d      	bne.n	8008738 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	4313      	orrs	r3, r2
 800872e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008736:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a17      	ldr	r2, [pc, #92]	; (8008798 <TIM_OC2_SetConfig+0xe4>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d003      	beq.n	8008748 <TIM_OC2_SetConfig+0x94>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a16      	ldr	r2, [pc, #88]	; (800879c <TIM_OC2_SetConfig+0xe8>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d113      	bne.n	8008770 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800874e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008756:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	009b      	lsls	r3, r3, #2
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	4313      	orrs	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685a      	ldr	r2, [r3, #4]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	621a      	str	r2, [r3, #32]
}
 800878a:	bf00      	nop
 800878c:	371c      	adds	r7, #28
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	40010000 	.word	0x40010000
 800879c:	40010400 	.word	0x40010400

080087a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f023 0303 	bic.w	r3, r3, #3
 80087d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a21      	ldr	r2, [pc, #132]	; (8008880 <TIM_OC3_SetConfig+0xe0>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d003      	beq.n	8008806 <TIM_OC3_SetConfig+0x66>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a20      	ldr	r2, [pc, #128]	; (8008884 <TIM_OC3_SetConfig+0xe4>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d10d      	bne.n	8008822 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800880c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	4313      	orrs	r3, r2
 8008818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a16      	ldr	r2, [pc, #88]	; (8008880 <TIM_OC3_SetConfig+0xe0>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d003      	beq.n	8008832 <TIM_OC3_SetConfig+0x92>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a15      	ldr	r2, [pc, #84]	; (8008884 <TIM_OC3_SetConfig+0xe4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d113      	bne.n	800885a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	693a      	ldr	r2, [r7, #16]
 8008856:	4313      	orrs	r3, r2
 8008858:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	621a      	str	r2, [r3, #32]
}
 8008874:	bf00      	nop
 8008876:	371c      	adds	r7, #28
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	40010000 	.word	0x40010000
 8008884:	40010400 	.word	0x40010400

08008888 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	021b      	lsls	r3, r3, #8
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	031b      	lsls	r3, r3, #12
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	4313      	orrs	r3, r2
 80088de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a12      	ldr	r2, [pc, #72]	; (800892c <TIM_OC4_SetConfig+0xa4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d003      	beq.n	80088f0 <TIM_OC4_SetConfig+0x68>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a11      	ldr	r2, [pc, #68]	; (8008930 <TIM_OC4_SetConfig+0xa8>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d109      	bne.n	8008904 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	019b      	lsls	r3, r3, #6
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	4313      	orrs	r3, r2
 8008902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	621a      	str	r2, [r3, #32]
}
 800891e:	bf00      	nop
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	40010000 	.word	0x40010000
 8008930:	40010400 	.word	0x40010400

08008934 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	f023 0201 	bic.w	r2, r3, #1
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800895e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	011b      	lsls	r3, r3, #4
 8008964:	693a      	ldr	r2, [r7, #16]
 8008966:	4313      	orrs	r3, r2
 8008968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f023 030a 	bic.w	r3, r3, #10
 8008970:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008972:	697a      	ldr	r2, [r7, #20]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4313      	orrs	r3, r2
 8008978:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	621a      	str	r2, [r3, #32]
}
 8008986:	bf00      	nop
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008992:	b480      	push	{r7}
 8008994:	b087      	sub	sp, #28
 8008996:	af00      	add	r7, sp, #0
 8008998:	60f8      	str	r0, [r7, #12]
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f023 0210 	bic.w	r2, r3, #16
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	031b      	lsls	r3, r3, #12
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80089ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	011b      	lsls	r3, r3, #4
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	621a      	str	r2, [r3, #32]
}
 80089e6:	bf00      	nop
 80089e8:	371c      	adds	r7, #28
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b085      	sub	sp, #20
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	f043 0307 	orr.w	r3, r3, #7
 8008a14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	609a      	str	r2, [r3, #8]
}
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b087      	sub	sp, #28
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
 8008a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	021a      	lsls	r2, r3, #8
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	697a      	ldr	r2, [r7, #20]
 8008a5a:	609a      	str	r2, [r3, #8]
}
 8008a5c:	bf00      	nop
 8008a5e:	371c      	adds	r7, #28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b087      	sub	sp, #28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a1a      	ldr	r2, [r3, #32]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	401a      	ands	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6a1a      	ldr	r2, [r3, #32]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f003 031f 	and.w	r3, r3, #31
 8008a9a:	6879      	ldr	r1, [r7, #4]
 8008a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	621a      	str	r2, [r3, #32]
}
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d101      	bne.n	8008acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e05a      	b.n	8008b82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a21      	ldr	r2, [pc, #132]	; (8008b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d022      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b18:	d01d      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a1d      	ldr	r2, [pc, #116]	; (8008b94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d018      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1b      	ldr	r2, [pc, #108]	; (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d013      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a1a      	ldr	r2, [pc, #104]	; (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d00e      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a18      	ldr	r2, [pc, #96]	; (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d009      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a17      	ldr	r2, [pc, #92]	; (8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d004      	beq.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a15      	ldr	r2, [pc, #84]	; (8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d10c      	bne.n	8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	40010000 	.word	0x40010000
 8008b94:	40000400 	.word	0x40000400
 8008b98:	40000800 	.word	0x40000800
 8008b9c:	40000c00 	.word	0x40000c00
 8008ba0:	40010400 	.word	0x40010400
 8008ba4:	40014000 	.word	0x40014000
 8008ba8:	40001800 	.word	0x40001800

08008bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b083      	sub	sp, #12
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d101      	bne.n	8008be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e03f      	b.n	8008c66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d106      	bne.n	8008c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fa fde2 	bl	80037c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2224      	movs	r2, #36	; 0x24
 8008c04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68da      	ldr	r2, [r3, #12]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f90b 	bl	8008e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	695a      	ldr	r2, [r3, #20]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2220      	movs	r2, #32
 8008c58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3708      	adds	r7, #8
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b088      	sub	sp, #32
 8008c72:	af02      	add	r7, sp, #8
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	60b9      	str	r1, [r7, #8]
 8008c78:	603b      	str	r3, [r7, #0]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b20      	cmp	r3, #32
 8008c8c:	f040 8083 	bne.w	8008d96 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <HAL_UART_Transmit+0x2e>
 8008c96:	88fb      	ldrh	r3, [r7, #6]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e07b      	b.n	8008d98 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d101      	bne.n	8008cae <HAL_UART_Transmit+0x40>
 8008caa:	2302      	movs	r3, #2
 8008cac:	e074      	b.n	8008d98 <HAL_UART_Transmit+0x12a>
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2221      	movs	r2, #33	; 0x21
 8008cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008cc4:	f7fb fca6 	bl	8004614 <HAL_GetTick>
 8008cc8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	88fa      	ldrh	r2, [r7, #6]
 8008cce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008cde:	e042      	b.n	8008d66 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf6:	d122      	bne.n	8008d3e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	2180      	movs	r1, #128	; 0x80
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 f84c 	bl	8008da0 <UART_WaitOnFlagUntilTimeout>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e042      	b.n	8008d98 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d24:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d103      	bne.n	8008d36 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	3302      	adds	r3, #2
 8008d32:	60bb      	str	r3, [r7, #8]
 8008d34:	e017      	b.n	8008d66 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	60bb      	str	r3, [r7, #8]
 8008d3c:	e013      	b.n	8008d66 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	2200      	movs	r2, #0
 8008d46:	2180      	movs	r1, #128	; 0x80
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 f829 	bl	8008da0 <UART_WaitOnFlagUntilTimeout>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008d54:	2303      	movs	r3, #3
 8008d56:	e01f      	b.n	8008d98 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	1c5a      	adds	r2, r3, #1
 8008d5c:	60ba      	str	r2, [r7, #8]
 8008d5e:	781a      	ldrb	r2, [r3, #0]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1b7      	bne.n	8008ce0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	2200      	movs	r2, #0
 8008d78:	2140      	movs	r1, #64	; 0x40
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 f810 	bl	8008da0 <UART_WaitOnFlagUntilTimeout>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e006      	b.n	8008d98 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e000      	b.n	8008d98 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008d96:	2302      	movs	r3, #2
  }
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	4613      	mov	r3, r2
 8008dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008db0:	e02c      	b.n	8008e0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d028      	beq.n	8008e0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d007      	beq.n	8008dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dc0:	f7fb fc28 	bl	8004614 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d21d      	bcs.n	8008e0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008dde:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	695a      	ldr	r2, [r3, #20]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f022 0201 	bic.w	r2, r2, #1
 8008dee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2220      	movs	r2, #32
 8008df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e00f      	b.n	8008e2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	4013      	ands	r3, r2
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2301      	moveq	r3, #1
 8008e1e:	2300      	movne	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	461a      	mov	r2, r3
 8008e24:	79fb      	ldrb	r3, [r7, #7]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d0c3      	beq.n	8008db2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e2a:	2300      	movs	r3, #0
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	b0bd      	sub	sp, #244	; 0xf4
 8008e3a:	af00      	add	r7, sp, #0
 8008e3c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e50:	68d9      	ldr	r1, [r3, #12]
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	ea40 0301 	orr.w	r3, r0, r1
 8008e5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	431a      	orrs	r2, r3
 8008e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	431a      	orrs	r2, r3
 8008e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8008e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e8c:	f021 010c 	bic.w	r1, r1, #12
 8008e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e9a:	430b      	orrs	r3, r1
 8008e9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eae:	6999      	ldr	r1, [r3, #24]
 8008eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	ea40 0301 	orr.w	r3, r0, r1
 8008eba:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ec6:	f040 81a5 	bne.w	8009214 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	4bcd      	ldr	r3, [pc, #820]	; (8009208 <UART_SetConfig+0x3d4>)
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d006      	beq.n	8008ee4 <UART_SetConfig+0xb0>
 8008ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	4bcb      	ldr	r3, [pc, #812]	; (800920c <UART_SetConfig+0x3d8>)
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	f040 80cb 	bne.w	800907a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ee4:	f7fd fe2c 	bl	8006b40 <HAL_RCC_GetPCLK2Freq>
 8008ee8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ef0:	461c      	mov	r4, r3
 8008ef2:	f04f 0500 	mov.w	r5, #0
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	462b      	mov	r3, r5
 8008efa:	1891      	adds	r1, r2, r2
 8008efc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008f00:	415b      	adcs	r3, r3
 8008f02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f06:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008f0a:	1912      	adds	r2, r2, r4
 8008f0c:	eb45 0303 	adc.w	r3, r5, r3
 8008f10:	f04f 0000 	mov.w	r0, #0
 8008f14:	f04f 0100 	mov.w	r1, #0
 8008f18:	00d9      	lsls	r1, r3, #3
 8008f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f1e:	00d0      	lsls	r0, r2, #3
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	1911      	adds	r1, r2, r4
 8008f26:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008f2a:	416b      	adcs	r3, r5
 8008f2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	461a      	mov	r2, r3
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	1891      	adds	r1, r2, r2
 8008f3e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8008f42:	415b      	adcs	r3, r3
 8008f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f48:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008f4c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8008f50:	f7f7 feaa 	bl	8000ca8 <__aeabi_uldivmod>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	4bad      	ldr	r3, [pc, #692]	; (8009210 <UART_SetConfig+0x3dc>)
 8008f5a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	011e      	lsls	r6, r3, #4
 8008f62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008f66:	461c      	mov	r4, r3
 8008f68:	f04f 0500 	mov.w	r5, #0
 8008f6c:	4622      	mov	r2, r4
 8008f6e:	462b      	mov	r3, r5
 8008f70:	1891      	adds	r1, r2, r2
 8008f72:	67b9      	str	r1, [r7, #120]	; 0x78
 8008f74:	415b      	adcs	r3, r3
 8008f76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f78:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008f7c:	1912      	adds	r2, r2, r4
 8008f7e:	eb45 0303 	adc.w	r3, r5, r3
 8008f82:	f04f 0000 	mov.w	r0, #0
 8008f86:	f04f 0100 	mov.w	r1, #0
 8008f8a:	00d9      	lsls	r1, r3, #3
 8008f8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f90:	00d0      	lsls	r0, r2, #3
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	1911      	adds	r1, r2, r4
 8008f98:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008f9c:	416b      	adcs	r3, r5
 8008f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f04f 0300 	mov.w	r3, #0
 8008fae:	1891      	adds	r1, r2, r2
 8008fb0:	6739      	str	r1, [r7, #112]	; 0x70
 8008fb2:	415b      	adcs	r3, r3
 8008fb4:	677b      	str	r3, [r7, #116]	; 0x74
 8008fb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8008fba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8008fbe:	f7f7 fe73 	bl	8000ca8 <__aeabi_uldivmod>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4b92      	ldr	r3, [pc, #584]	; (8009210 <UART_SetConfig+0x3dc>)
 8008fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	2164      	movs	r1, #100	; 0x64
 8008fd0:	fb01 f303 	mul.w	r3, r1, r3
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	00db      	lsls	r3, r3, #3
 8008fd8:	3332      	adds	r3, #50	; 0x32
 8008fda:	4a8d      	ldr	r2, [pc, #564]	; (8009210 <UART_SetConfig+0x3dc>)
 8008fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fe8:	441e      	add	r6, r3
 8008fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f04f 0100 	mov.w	r1, #0
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	1894      	adds	r4, r2, r2
 8008ffa:	66bc      	str	r4, [r7, #104]	; 0x68
 8008ffc:	415b      	adcs	r3, r3
 8008ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009000:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009004:	1812      	adds	r2, r2, r0
 8009006:	eb41 0303 	adc.w	r3, r1, r3
 800900a:	f04f 0400 	mov.w	r4, #0
 800900e:	f04f 0500 	mov.w	r5, #0
 8009012:	00dd      	lsls	r5, r3, #3
 8009014:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009018:	00d4      	lsls	r4, r2, #3
 800901a:	4622      	mov	r2, r4
 800901c:	462b      	mov	r3, r5
 800901e:	1814      	adds	r4, r2, r0
 8009020:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8009024:	414b      	adcs	r3, r1
 8009026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800902a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	461a      	mov	r2, r3
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	1891      	adds	r1, r2, r2
 8009038:	6639      	str	r1, [r7, #96]	; 0x60
 800903a:	415b      	adcs	r3, r3
 800903c:	667b      	str	r3, [r7, #100]	; 0x64
 800903e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009046:	f7f7 fe2f 	bl	8000ca8 <__aeabi_uldivmod>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4b70      	ldr	r3, [pc, #448]	; (8009210 <UART_SetConfig+0x3dc>)
 8009050:	fba3 1302 	umull	r1, r3, r3, r2
 8009054:	095b      	lsrs	r3, r3, #5
 8009056:	2164      	movs	r1, #100	; 0x64
 8009058:	fb01 f303 	mul.w	r3, r1, r3
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	00db      	lsls	r3, r3, #3
 8009060:	3332      	adds	r3, #50	; 0x32
 8009062:	4a6b      	ldr	r2, [pc, #428]	; (8009210 <UART_SetConfig+0x3dc>)
 8009064:	fba2 2303 	umull	r2, r3, r2, r3
 8009068:	095b      	lsrs	r3, r3, #5
 800906a:	f003 0207 	and.w	r2, r3, #7
 800906e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4432      	add	r2, r6
 8009076:	609a      	str	r2, [r3, #8]
 8009078:	e26d      	b.n	8009556 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800907a:	f7fd fd4d 	bl	8006b18 <HAL_RCC_GetPCLK1Freq>
 800907e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009082:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009086:	461c      	mov	r4, r3
 8009088:	f04f 0500 	mov.w	r5, #0
 800908c:	4622      	mov	r2, r4
 800908e:	462b      	mov	r3, r5
 8009090:	1891      	adds	r1, r2, r2
 8009092:	65b9      	str	r1, [r7, #88]	; 0x58
 8009094:	415b      	adcs	r3, r3
 8009096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009098:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800909c:	1912      	adds	r2, r2, r4
 800909e:	eb45 0303 	adc.w	r3, r5, r3
 80090a2:	f04f 0000 	mov.w	r0, #0
 80090a6:	f04f 0100 	mov.w	r1, #0
 80090aa:	00d9      	lsls	r1, r3, #3
 80090ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80090b0:	00d0      	lsls	r0, r2, #3
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	1911      	adds	r1, r2, r4
 80090b8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80090bc:	416b      	adcs	r3, r5
 80090be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80090c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	461a      	mov	r2, r3
 80090ca:	f04f 0300 	mov.w	r3, #0
 80090ce:	1891      	adds	r1, r2, r2
 80090d0:	6539      	str	r1, [r7, #80]	; 0x50
 80090d2:	415b      	adcs	r3, r3
 80090d4:	657b      	str	r3, [r7, #84]	; 0x54
 80090d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090da:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80090de:	f7f7 fde3 	bl	8000ca8 <__aeabi_uldivmod>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	4b4a      	ldr	r3, [pc, #296]	; (8009210 <UART_SetConfig+0x3dc>)
 80090e8:	fba3 2302 	umull	r2, r3, r3, r2
 80090ec:	095b      	lsrs	r3, r3, #5
 80090ee:	011e      	lsls	r6, r3, #4
 80090f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090f4:	461c      	mov	r4, r3
 80090f6:	f04f 0500 	mov.w	r5, #0
 80090fa:	4622      	mov	r2, r4
 80090fc:	462b      	mov	r3, r5
 80090fe:	1891      	adds	r1, r2, r2
 8009100:	64b9      	str	r1, [r7, #72]	; 0x48
 8009102:	415b      	adcs	r3, r3
 8009104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009106:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800910a:	1912      	adds	r2, r2, r4
 800910c:	eb45 0303 	adc.w	r3, r5, r3
 8009110:	f04f 0000 	mov.w	r0, #0
 8009114:	f04f 0100 	mov.w	r1, #0
 8009118:	00d9      	lsls	r1, r3, #3
 800911a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800911e:	00d0      	lsls	r0, r2, #3
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	1911      	adds	r1, r2, r4
 8009126:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800912a:	416b      	adcs	r3, r5
 800912c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	461a      	mov	r2, r3
 8009138:	f04f 0300 	mov.w	r3, #0
 800913c:	1891      	adds	r1, r2, r2
 800913e:	6439      	str	r1, [r7, #64]	; 0x40
 8009140:	415b      	adcs	r3, r3
 8009142:	647b      	str	r3, [r7, #68]	; 0x44
 8009144:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009148:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800914c:	f7f7 fdac 	bl	8000ca8 <__aeabi_uldivmod>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4b2e      	ldr	r3, [pc, #184]	; (8009210 <UART_SetConfig+0x3dc>)
 8009156:	fba3 1302 	umull	r1, r3, r3, r2
 800915a:	095b      	lsrs	r3, r3, #5
 800915c:	2164      	movs	r1, #100	; 0x64
 800915e:	fb01 f303 	mul.w	r3, r1, r3
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	3332      	adds	r3, #50	; 0x32
 8009168:	4a29      	ldr	r2, [pc, #164]	; (8009210 <UART_SetConfig+0x3dc>)
 800916a:	fba2 2303 	umull	r2, r3, r2, r3
 800916e:	095b      	lsrs	r3, r3, #5
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009176:	441e      	add	r6, r3
 8009178:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800917c:	4618      	mov	r0, r3
 800917e:	f04f 0100 	mov.w	r1, #0
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	1894      	adds	r4, r2, r2
 8009188:	63bc      	str	r4, [r7, #56]	; 0x38
 800918a:	415b      	adcs	r3, r3
 800918c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009192:	1812      	adds	r2, r2, r0
 8009194:	eb41 0303 	adc.w	r3, r1, r3
 8009198:	f04f 0400 	mov.w	r4, #0
 800919c:	f04f 0500 	mov.w	r5, #0
 80091a0:	00dd      	lsls	r5, r3, #3
 80091a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091a6:	00d4      	lsls	r4, r2, #3
 80091a8:	4622      	mov	r2, r4
 80091aa:	462b      	mov	r3, r5
 80091ac:	1814      	adds	r4, r2, r0
 80091ae:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80091b2:	414b      	adcs	r3, r1
 80091b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	461a      	mov	r2, r3
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	1891      	adds	r1, r2, r2
 80091c6:	6339      	str	r1, [r7, #48]	; 0x30
 80091c8:	415b      	adcs	r3, r3
 80091ca:	637b      	str	r3, [r7, #52]	; 0x34
 80091cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80091d0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80091d4:	f7f7 fd68 	bl	8000ca8 <__aeabi_uldivmod>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <UART_SetConfig+0x3dc>)
 80091de:	fba3 1302 	umull	r1, r3, r3, r2
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	2164      	movs	r1, #100	; 0x64
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	3332      	adds	r3, #50	; 0x32
 80091f0:	4a07      	ldr	r2, [pc, #28]	; (8009210 <UART_SetConfig+0x3dc>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	095b      	lsrs	r3, r3, #5
 80091f8:	f003 0207 	and.w	r2, r3, #7
 80091fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4432      	add	r2, r6
 8009204:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009206:	e1a6      	b.n	8009556 <UART_SetConfig+0x722>
 8009208:	40011000 	.word	0x40011000
 800920c:	40011400 	.word	0x40011400
 8009210:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	4bd1      	ldr	r3, [pc, #836]	; (8009560 <UART_SetConfig+0x72c>)
 800921c:	429a      	cmp	r2, r3
 800921e:	d006      	beq.n	800922e <UART_SetConfig+0x3fa>
 8009220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	4bcf      	ldr	r3, [pc, #828]	; (8009564 <UART_SetConfig+0x730>)
 8009228:	429a      	cmp	r2, r3
 800922a:	f040 80ca 	bne.w	80093c2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800922e:	f7fd fc87 	bl	8006b40 <HAL_RCC_GetPCLK2Freq>
 8009232:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009236:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800923a:	461c      	mov	r4, r3
 800923c:	f04f 0500 	mov.w	r5, #0
 8009240:	4622      	mov	r2, r4
 8009242:	462b      	mov	r3, r5
 8009244:	1891      	adds	r1, r2, r2
 8009246:	62b9      	str	r1, [r7, #40]	; 0x28
 8009248:	415b      	adcs	r3, r3
 800924a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800924c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009250:	1912      	adds	r2, r2, r4
 8009252:	eb45 0303 	adc.w	r3, r5, r3
 8009256:	f04f 0000 	mov.w	r0, #0
 800925a:	f04f 0100 	mov.w	r1, #0
 800925e:	00d9      	lsls	r1, r3, #3
 8009260:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009264:	00d0      	lsls	r0, r2, #3
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	eb12 0a04 	adds.w	sl, r2, r4
 800926e:	eb43 0b05 	adc.w	fp, r3, r5
 8009272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	4618      	mov	r0, r3
 800927a:	f04f 0100 	mov.w	r1, #0
 800927e:	f04f 0200 	mov.w	r2, #0
 8009282:	f04f 0300 	mov.w	r3, #0
 8009286:	008b      	lsls	r3, r1, #2
 8009288:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800928c:	0082      	lsls	r2, r0, #2
 800928e:	4650      	mov	r0, sl
 8009290:	4659      	mov	r1, fp
 8009292:	f7f7 fd09 	bl	8000ca8 <__aeabi_uldivmod>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4bb3      	ldr	r3, [pc, #716]	; (8009568 <UART_SetConfig+0x734>)
 800929c:	fba3 2302 	umull	r2, r3, r3, r2
 80092a0:	095b      	lsrs	r3, r3, #5
 80092a2:	011e      	lsls	r6, r3, #4
 80092a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092a8:	4618      	mov	r0, r3
 80092aa:	f04f 0100 	mov.w	r1, #0
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	1894      	adds	r4, r2, r2
 80092b4:	623c      	str	r4, [r7, #32]
 80092b6:	415b      	adcs	r3, r3
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
 80092ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80092be:	1812      	adds	r2, r2, r0
 80092c0:	eb41 0303 	adc.w	r3, r1, r3
 80092c4:	f04f 0400 	mov.w	r4, #0
 80092c8:	f04f 0500 	mov.w	r5, #0
 80092cc:	00dd      	lsls	r5, r3, #3
 80092ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80092d2:	00d4      	lsls	r4, r2, #3
 80092d4:	4622      	mov	r2, r4
 80092d6:	462b      	mov	r3, r5
 80092d8:	1814      	adds	r4, r2, r0
 80092da:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80092de:	414b      	adcs	r3, r1
 80092e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f04f 0100 	mov.w	r1, #0
 80092f0:	f04f 0200 	mov.w	r2, #0
 80092f4:	f04f 0300 	mov.w	r3, #0
 80092f8:	008b      	lsls	r3, r1, #2
 80092fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80092fe:	0082      	lsls	r2, r0, #2
 8009300:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8009304:	f7f7 fcd0 	bl	8000ca8 <__aeabi_uldivmod>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4b96      	ldr	r3, [pc, #600]	; (8009568 <UART_SetConfig+0x734>)
 800930e:	fba3 1302 	umull	r1, r3, r3, r2
 8009312:	095b      	lsrs	r3, r3, #5
 8009314:	2164      	movs	r1, #100	; 0x64
 8009316:	fb01 f303 	mul.w	r3, r1, r3
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	3332      	adds	r3, #50	; 0x32
 8009320:	4a91      	ldr	r2, [pc, #580]	; (8009568 <UART_SetConfig+0x734>)
 8009322:	fba2 2303 	umull	r2, r3, r2, r3
 8009326:	095b      	lsrs	r3, r3, #5
 8009328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800932c:	441e      	add	r6, r3
 800932e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009332:	4618      	mov	r0, r3
 8009334:	f04f 0100 	mov.w	r1, #0
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	1894      	adds	r4, r2, r2
 800933e:	61bc      	str	r4, [r7, #24]
 8009340:	415b      	adcs	r3, r3
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009348:	1812      	adds	r2, r2, r0
 800934a:	eb41 0303 	adc.w	r3, r1, r3
 800934e:	f04f 0400 	mov.w	r4, #0
 8009352:	f04f 0500 	mov.w	r5, #0
 8009356:	00dd      	lsls	r5, r3, #3
 8009358:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800935c:	00d4      	lsls	r4, r2, #3
 800935e:	4622      	mov	r2, r4
 8009360:	462b      	mov	r3, r5
 8009362:	1814      	adds	r4, r2, r0
 8009364:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8009368:	414b      	adcs	r3, r1
 800936a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800936e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	4618      	mov	r0, r3
 8009376:	f04f 0100 	mov.w	r1, #0
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	008b      	lsls	r3, r1, #2
 8009384:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009388:	0082      	lsls	r2, r0, #2
 800938a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800938e:	f7f7 fc8b 	bl	8000ca8 <__aeabi_uldivmod>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4b74      	ldr	r3, [pc, #464]	; (8009568 <UART_SetConfig+0x734>)
 8009398:	fba3 1302 	umull	r1, r3, r3, r2
 800939c:	095b      	lsrs	r3, r3, #5
 800939e:	2164      	movs	r1, #100	; 0x64
 80093a0:	fb01 f303 	mul.w	r3, r1, r3
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	011b      	lsls	r3, r3, #4
 80093a8:	3332      	adds	r3, #50	; 0x32
 80093aa:	4a6f      	ldr	r2, [pc, #444]	; (8009568 <UART_SetConfig+0x734>)
 80093ac:	fba2 2303 	umull	r2, r3, r2, r3
 80093b0:	095b      	lsrs	r3, r3, #5
 80093b2:	f003 020f 	and.w	r2, r3, #15
 80093b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4432      	add	r2, r6
 80093be:	609a      	str	r2, [r3, #8]
 80093c0:	e0c9      	b.n	8009556 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80093c2:	f7fd fba9 	bl	8006b18 <HAL_RCC_GetPCLK1Freq>
 80093c6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80093ce:	461c      	mov	r4, r3
 80093d0:	f04f 0500 	mov.w	r5, #0
 80093d4:	4622      	mov	r2, r4
 80093d6:	462b      	mov	r3, r5
 80093d8:	1891      	adds	r1, r2, r2
 80093da:	6139      	str	r1, [r7, #16]
 80093dc:	415b      	adcs	r3, r3
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80093e4:	1912      	adds	r2, r2, r4
 80093e6:	eb45 0303 	adc.w	r3, r5, r3
 80093ea:	f04f 0000 	mov.w	r0, #0
 80093ee:	f04f 0100 	mov.w	r1, #0
 80093f2:	00d9      	lsls	r1, r3, #3
 80093f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80093f8:	00d0      	lsls	r0, r2, #3
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	eb12 0804 	adds.w	r8, r2, r4
 8009402:	eb43 0905 	adc.w	r9, r3, r5
 8009406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	4618      	mov	r0, r3
 800940e:	f04f 0100 	mov.w	r1, #0
 8009412:	f04f 0200 	mov.w	r2, #0
 8009416:	f04f 0300 	mov.w	r3, #0
 800941a:	008b      	lsls	r3, r1, #2
 800941c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009420:	0082      	lsls	r2, r0, #2
 8009422:	4640      	mov	r0, r8
 8009424:	4649      	mov	r1, r9
 8009426:	f7f7 fc3f 	bl	8000ca8 <__aeabi_uldivmod>
 800942a:	4602      	mov	r2, r0
 800942c:	460b      	mov	r3, r1
 800942e:	4b4e      	ldr	r3, [pc, #312]	; (8009568 <UART_SetConfig+0x734>)
 8009430:	fba3 2302 	umull	r2, r3, r3, r2
 8009434:	095b      	lsrs	r3, r3, #5
 8009436:	011e      	lsls	r6, r3, #4
 8009438:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800943c:	4618      	mov	r0, r3
 800943e:	f04f 0100 	mov.w	r1, #0
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	1894      	adds	r4, r2, r2
 8009448:	60bc      	str	r4, [r7, #8]
 800944a:	415b      	adcs	r3, r3
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009452:	1812      	adds	r2, r2, r0
 8009454:	eb41 0303 	adc.w	r3, r1, r3
 8009458:	f04f 0400 	mov.w	r4, #0
 800945c:	f04f 0500 	mov.w	r5, #0
 8009460:	00dd      	lsls	r5, r3, #3
 8009462:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009466:	00d4      	lsls	r4, r2, #3
 8009468:	4622      	mov	r2, r4
 800946a:	462b      	mov	r3, r5
 800946c:	1814      	adds	r4, r2, r0
 800946e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8009472:	414b      	adcs	r3, r1
 8009474:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	4618      	mov	r0, r3
 8009480:	f04f 0100 	mov.w	r1, #0
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	f04f 0300 	mov.w	r3, #0
 800948c:	008b      	lsls	r3, r1, #2
 800948e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009492:	0082      	lsls	r2, r0, #2
 8009494:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009498:	f7f7 fc06 	bl	8000ca8 <__aeabi_uldivmod>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4b31      	ldr	r3, [pc, #196]	; (8009568 <UART_SetConfig+0x734>)
 80094a2:	fba3 1302 	umull	r1, r3, r3, r2
 80094a6:	095b      	lsrs	r3, r3, #5
 80094a8:	2164      	movs	r1, #100	; 0x64
 80094aa:	fb01 f303 	mul.w	r3, r1, r3
 80094ae:	1ad3      	subs	r3, r2, r3
 80094b0:	011b      	lsls	r3, r3, #4
 80094b2:	3332      	adds	r3, #50	; 0x32
 80094b4:	4a2c      	ldr	r2, [pc, #176]	; (8009568 <UART_SetConfig+0x734>)
 80094b6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ba:	095b      	lsrs	r3, r3, #5
 80094bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094c0:	441e      	add	r6, r3
 80094c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094c6:	4618      	mov	r0, r3
 80094c8:	f04f 0100 	mov.w	r1, #0
 80094cc:	4602      	mov	r2, r0
 80094ce:	460b      	mov	r3, r1
 80094d0:	1894      	adds	r4, r2, r2
 80094d2:	603c      	str	r4, [r7, #0]
 80094d4:	415b      	adcs	r3, r3
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094dc:	1812      	adds	r2, r2, r0
 80094de:	eb41 0303 	adc.w	r3, r1, r3
 80094e2:	f04f 0400 	mov.w	r4, #0
 80094e6:	f04f 0500 	mov.w	r5, #0
 80094ea:	00dd      	lsls	r5, r3, #3
 80094ec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094f0:	00d4      	lsls	r4, r2, #3
 80094f2:	4622      	mov	r2, r4
 80094f4:	462b      	mov	r3, r5
 80094f6:	1814      	adds	r4, r2, r0
 80094f8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 80094fc:	414b      	adcs	r3, r1
 80094fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	4618      	mov	r0, r3
 800950a:	f04f 0100 	mov.w	r1, #0
 800950e:	f04f 0200 	mov.w	r2, #0
 8009512:	f04f 0300 	mov.w	r3, #0
 8009516:	008b      	lsls	r3, r1, #2
 8009518:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800951c:	0082      	lsls	r2, r0, #2
 800951e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8009522:	f7f7 fbc1 	bl	8000ca8 <__aeabi_uldivmod>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4b0f      	ldr	r3, [pc, #60]	; (8009568 <UART_SetConfig+0x734>)
 800952c:	fba3 1302 	umull	r1, r3, r3, r2
 8009530:	095b      	lsrs	r3, r3, #5
 8009532:	2164      	movs	r1, #100	; 0x64
 8009534:	fb01 f303 	mul.w	r3, r1, r3
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	3332      	adds	r3, #50	; 0x32
 800953e:	4a0a      	ldr	r2, [pc, #40]	; (8009568 <UART_SetConfig+0x734>)
 8009540:	fba2 2303 	umull	r2, r3, r2, r3
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	f003 020f 	and.w	r2, r3, #15
 800954a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4432      	add	r2, r6
 8009552:	609a      	str	r2, [r3, #8]
}
 8009554:	e7ff      	b.n	8009556 <UART_SetConfig+0x722>
 8009556:	bf00      	nop
 8009558:	37f4      	adds	r7, #244	; 0xf4
 800955a:	46bd      	mov	sp, r7
 800955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009560:	40011000 	.word	0x40011000
 8009564:	40011400 	.word	0x40011400
 8009568:	51eb851f 	.word	0x51eb851f

0800956c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009570:	4904      	ldr	r1, [pc, #16]	; (8009584 <MX_FATFS_Init+0x18>)
 8009572:	4805      	ldr	r0, [pc, #20]	; (8009588 <MX_FATFS_Init+0x1c>)
 8009574:	f003 fa92 	bl	800ca9c <FATFS_LinkDriver>
 8009578:	4603      	mov	r3, r0
 800957a:	461a      	mov	r2, r3
 800957c:	4b03      	ldr	r3, [pc, #12]	; (800958c <MX_FATFS_Init+0x20>)
 800957e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009580:	bf00      	nop
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20001610 	.word	0x20001610
 8009588:	2000000c 	.word	0x2000000c
 800958c:	20001614 	.word	0x20001614

08009590 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009590:	b480      	push	{r7}
 8009592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009594:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009596:	4618      	mov	r0, r3
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80095aa:	79fb      	ldrb	r3, [r7, #7]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 f9dd 	bl	800996c <USER_SPI_initialize>
 80095b2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	4603      	mov	r3, r0
 80095c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80095c6:	79fb      	ldrb	r3, [r7, #7]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fab9 	bl	8009b40 <USER_SPI_status>
 80095ce:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	607a      	str	r2, [r7, #4]
 80095e2:	603b      	str	r3, [r7, #0]
 80095e4:	4603      	mov	r3, r0
 80095e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80095e8:	7bf8      	ldrb	r0, [r7, #15]
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	f000 fabc 	bl	8009b6c <USER_SPI_read>
 80095f4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3710      	adds	r7, #16
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}

080095fe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]
 800960a:	4603      	mov	r3, r0
 800960c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800960e:	7bf8      	ldrb	r0, [r7, #15]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	f000 fb0f 	bl	8009c38 <USER_SPI_write>
 800961a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	603a      	str	r2, [r7, #0]
 800962e:	71fb      	strb	r3, [r7, #7]
 8009630:	460b      	mov	r3, r1
 8009632:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8009634:	79b9      	ldrb	r1, [r7, #6]
 8009636:	79fb      	ldrb	r3, [r7, #7]
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	4618      	mov	r0, r3
 800963c:	f000 fb78 	bl	8009d30 <USER_SPI_ioctl>
 8009640:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009642:	4618      	mov	r0, r3
 8009644:	3708      	adds	r7, #8
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
	...

0800964c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009654:	f7fa ffde 	bl	8004614 <HAL_GetTick>
 8009658:	4603      	mov	r3, r0
 800965a:	4a04      	ldr	r2, [pc, #16]	; (800966c <SPI_Timer_On+0x20>)
 800965c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800965e:	4a04      	ldr	r2, [pc, #16]	; (8009670 <SPI_Timer_On+0x24>)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6013      	str	r3, [r2, #0]
}
 8009664:	bf00      	nop
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	20001a78 	.word	0x20001a78
 8009670:	20001a7c 	.word	0x20001a7c

08009674 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009678:	f7fa ffcc 	bl	8004614 <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	4b06      	ldr	r3, [pc, #24]	; (8009698 <SPI_Timer_Status+0x24>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	1ad2      	subs	r2, r2, r3
 8009684:	4b05      	ldr	r3, [pc, #20]	; (800969c <SPI_Timer_Status+0x28>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	429a      	cmp	r2, r3
 800968a:	bf34      	ite	cc
 800968c:	2301      	movcc	r3, #1
 800968e:	2300      	movcs	r3, #0
 8009690:	b2db      	uxtb	r3, r3
}
 8009692:	4618      	mov	r0, r3
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	20001a78 	.word	0x20001a78
 800969c:	20001a7c 	.word	0x20001a7c

080096a0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af02      	add	r7, sp, #8
 80096a6:	4603      	mov	r3, r0
 80096a8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80096aa:	f107 020f 	add.w	r2, r7, #15
 80096ae:	1df9      	adds	r1, r7, #7
 80096b0:	2332      	movs	r3, #50	; 0x32
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	2301      	movs	r3, #1
 80096b6:	4804      	ldr	r0, [pc, #16]	; (80096c8 <xchg_spi+0x28>)
 80096b8:	f7fe f864 	bl	8007784 <HAL_SPI_TransmitReceive>
    return rxDat;
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	200008ac 	.word	0x200008ac

080096cc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80096cc:	b590      	push	{r4, r7, lr}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
 80096da:	e00a      	b.n	80096f2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	18d4      	adds	r4, r2, r3
 80096e2:	20ff      	movs	r0, #255	; 0xff
 80096e4:	f7ff ffdc 	bl	80096a0 <xchg_spi>
 80096e8:	4603      	mov	r3, r0
 80096ea:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	3301      	adds	r3, #1
 80096f0:	60fb      	str	r3, [r7, #12]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d3f0      	bcc.n	80096dc <rcvr_spi_multi+0x10>
	}
}
 80096fa:	bf00      	nop
 80096fc:	bf00      	nop
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	bd90      	pop	{r4, r7, pc}

08009704 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800970e:	2300      	movs	r3, #0
 8009710:	60fb      	str	r3, [r7, #12]
 8009712:	e009      	b.n	8009728 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4413      	add	r3, r2
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff ffbf 	bl	80096a0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3301      	adds	r3, #1
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	429a      	cmp	r2, r3
 800972e:	d3f1      	bcc.n	8009714 <xmit_spi_multi+0x10>
	}
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b086      	sub	sp, #24
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009742:	f7fa ff67 	bl	8004614 <HAL_GetTick>
 8009746:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800974c:	20ff      	movs	r0, #255	; 0xff
 800974e:	f7ff ffa7 	bl	80096a0 <xchg_spi>
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	2bff      	cmp	r3, #255	; 0xff
 800975a:	d007      	beq.n	800976c <wait_ready+0x32>
 800975c:	f7fa ff5a 	bl	8004614 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	429a      	cmp	r2, r3
 800976a:	d8ef      	bhi.n	800974c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	2bff      	cmp	r3, #255	; 0xff
 8009770:	bf0c      	ite	eq
 8009772:	2301      	moveq	r3, #1
 8009774:	2300      	movne	r3, #0
 8009776:	b2db      	uxtb	r3, r3
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009784:	2201      	movs	r2, #1
 8009786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800978a:	4804      	ldr	r0, [pc, #16]	; (800979c <despiselect+0x1c>)
 800978c:	f7fb fcba 	bl	8005104 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009790:	20ff      	movs	r0, #255	; 0xff
 8009792:	f7ff ff85 	bl	80096a0 <xchg_spi>

}
 8009796:	bf00      	nop
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	40021400 	.word	0x40021400

080097a0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80097a4:	2200      	movs	r2, #0
 80097a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80097aa:	480a      	ldr	r0, [pc, #40]	; (80097d4 <spiselect+0x34>)
 80097ac:	f7fb fcaa 	bl	8005104 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80097b0:	20ff      	movs	r0, #255	; 0xff
 80097b2:	f7ff ff75 	bl	80096a0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80097b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80097ba:	f7ff ffbe 	bl	800973a <wait_ready>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d001      	beq.n	80097c8 <spiselect+0x28>
 80097c4:	2301      	movs	r3, #1
 80097c6:	e002      	b.n	80097ce <spiselect+0x2e>

	despiselect();
 80097c8:	f7ff ffda 	bl	8009780 <despiselect>
	return 0;	/* Timeout */
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	40021400 	.word	0x40021400

080097d8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80097e2:	20c8      	movs	r0, #200	; 0xc8
 80097e4:	f7ff ff32 	bl	800964c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80097e8:	20ff      	movs	r0, #255	; 0xff
 80097ea:	f7ff ff59 	bl	80096a0 <xchg_spi>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	2bff      	cmp	r3, #255	; 0xff
 80097f6:	d104      	bne.n	8009802 <rcvr_datablock+0x2a>
 80097f8:	f7ff ff3c 	bl	8009674 <SPI_Timer_Status>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1f2      	bne.n	80097e8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2bfe      	cmp	r3, #254	; 0xfe
 8009806:	d001      	beq.n	800980c <rcvr_datablock+0x34>
 8009808:	2300      	movs	r3, #0
 800980a:	e00a      	b.n	8009822 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff ff5c 	bl	80096cc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009814:	20ff      	movs	r0, #255	; 0xff
 8009816:	f7ff ff43 	bl	80096a0 <xchg_spi>
 800981a:	20ff      	movs	r0, #255	; 0xff
 800981c:	f7ff ff40 	bl	80096a0 <xchg_spi>

	return 1;						/* Function succeeded */
 8009820:	2301      	movs	r3, #1
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	460b      	mov	r3, r1
 8009834:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009836:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800983a:	f7ff ff7e 	bl	800973a <wait_ready>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <xmit_datablock+0x1e>
 8009844:	2300      	movs	r3, #0
 8009846:	e01e      	b.n	8009886 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff ff28 	bl	80096a0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	2bfd      	cmp	r3, #253	; 0xfd
 8009854:	d016      	beq.n	8009884 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7ff ff52 	bl	8009704 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009860:	20ff      	movs	r0, #255	; 0xff
 8009862:	f7ff ff1d 	bl	80096a0 <xchg_spi>
 8009866:	20ff      	movs	r0, #255	; 0xff
 8009868:	f7ff ff1a 	bl	80096a0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800986c:	20ff      	movs	r0, #255	; 0xff
 800986e:	f7ff ff17 	bl	80096a0 <xchg_spi>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	f003 031f 	and.w	r3, r3, #31
 800987c:	2b05      	cmp	r3, #5
 800987e:	d001      	beq.n	8009884 <xmit_datablock+0x5a>
 8009880:	2300      	movs	r3, #0
 8009882:	e000      	b.n	8009886 <xmit_datablock+0x5c>
	}
	return 1;
 8009884:	2301      	movs	r3, #1
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	4603      	mov	r3, r0
 8009896:	6039      	str	r1, [r7, #0]
 8009898:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800989a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	da0e      	bge.n	80098c0 <send_cmd+0x32>
		cmd &= 0x7F;
 80098a2:	79fb      	ldrb	r3, [r7, #7]
 80098a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80098aa:	2100      	movs	r1, #0
 80098ac:	2037      	movs	r0, #55	; 0x37
 80098ae:	f7ff ffee 	bl	800988e <send_cmd>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d901      	bls.n	80098c0 <send_cmd+0x32>
 80098bc:	7bbb      	ldrb	r3, [r7, #14]
 80098be:	e051      	b.n	8009964 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80098c0:	79fb      	ldrb	r3, [r7, #7]
 80098c2:	2b0c      	cmp	r3, #12
 80098c4:	d008      	beq.n	80098d8 <send_cmd+0x4a>
		despiselect();
 80098c6:	f7ff ff5b 	bl	8009780 <despiselect>
		if (!spiselect()) return 0xFF;
 80098ca:	f7ff ff69 	bl	80097a0 <spiselect>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <send_cmd+0x4a>
 80098d4:	23ff      	movs	r3, #255	; 0xff
 80098d6:	e045      	b.n	8009964 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7ff fedd 	bl	80096a0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	0e1b      	lsrs	r3, r3, #24
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff fed7 	bl	80096a0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	0c1b      	lsrs	r3, r3, #16
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff fed1 	bl	80096a0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	0a1b      	lsrs	r3, r3, #8
 8009902:	b2db      	uxtb	r3, r3
 8009904:	4618      	mov	r0, r3
 8009906:	f7ff fecb 	bl	80096a0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	b2db      	uxtb	r3, r3
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff fec6 	bl	80096a0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009914:	2301      	movs	r3, #1
 8009916:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009918:	79fb      	ldrb	r3, [r7, #7]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <send_cmd+0x94>
 800991e:	2395      	movs	r3, #149	; 0x95
 8009920:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	2b08      	cmp	r3, #8
 8009926:	d101      	bne.n	800992c <send_cmd+0x9e>
 8009928:	2387      	movs	r3, #135	; 0x87
 800992a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff feb6 	bl	80096a0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009934:	79fb      	ldrb	r3, [r7, #7]
 8009936:	2b0c      	cmp	r3, #12
 8009938:	d102      	bne.n	8009940 <send_cmd+0xb2>
 800993a:	20ff      	movs	r0, #255	; 0xff
 800993c:	f7ff feb0 	bl	80096a0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009940:	230a      	movs	r3, #10
 8009942:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009944:	20ff      	movs	r0, #255	; 0xff
 8009946:	f7ff feab 	bl	80096a0 <xchg_spi>
 800994a:	4603      	mov	r3, r0
 800994c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800994e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009952:	2b00      	cmp	r3, #0
 8009954:	da05      	bge.n	8009962 <send_cmd+0xd4>
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	3b01      	subs	r3, #1
 800995a:	73fb      	strb	r3, [r7, #15]
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d1f0      	bne.n	8009944 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009962:	7bbb      	ldrb	r3, [r7, #14]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800996c:	b590      	push	{r4, r7, lr}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8009976:	79fb      	ldrb	r3, [r7, #7]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d001      	beq.n	8009980 <USER_SPI_initialize+0x14>
 800997c:	2301      	movs	r3, #1
 800997e:	e0d4      	b.n	8009b2a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8009980:	4b6c      	ldr	r3, [pc, #432]	; (8009b34 <USER_SPI_initialize+0x1c8>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	f003 0302 	and.w	r3, r3, #2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d003      	beq.n	8009996 <USER_SPI_initialize+0x2a>
 800998e:	4b69      	ldr	r3, [pc, #420]	; (8009b34 <USER_SPI_initialize+0x1c8>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	e0c9      	b.n	8009b2a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8009996:	4b68      	ldr	r3, [pc, #416]	; (8009b38 <USER_SPI_initialize+0x1cc>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	4b66      	ldr	r3, [pc, #408]	; (8009b38 <USER_SPI_initialize+0x1cc>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80099a4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80099a6:	230a      	movs	r3, #10
 80099a8:	73fb      	strb	r3, [r7, #15]
 80099aa:	e005      	b.n	80099b8 <USER_SPI_initialize+0x4c>
 80099ac:	20ff      	movs	r0, #255	; 0xff
 80099ae:	f7ff fe77 	bl	80096a0 <xchg_spi>
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	73fb      	strb	r3, [r7, #15]
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1f6      	bne.n	80099ac <USER_SPI_initialize+0x40>

	ty = 0;
 80099be:	2300      	movs	r3, #0
 80099c0:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80099c2:	2100      	movs	r1, #0
 80099c4:	2000      	movs	r0, #0
 80099c6:	f7ff ff62 	bl	800988e <send_cmd>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	f040 808b 	bne.w	8009ae8 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80099d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099d6:	f7ff fe39 	bl	800964c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80099da:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80099de:	2008      	movs	r0, #8
 80099e0:	f7ff ff55 	bl	800988e <send_cmd>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d151      	bne.n	8009a8e <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80099ea:	2300      	movs	r3, #0
 80099ec:	73fb      	strb	r3, [r7, #15]
 80099ee:	e00d      	b.n	8009a0c <USER_SPI_initialize+0xa0>
 80099f0:	7bfc      	ldrb	r4, [r7, #15]
 80099f2:	20ff      	movs	r0, #255	; 0xff
 80099f4:	f7ff fe54 	bl	80096a0 <xchg_spi>
 80099f8:	4603      	mov	r3, r0
 80099fa:	461a      	mov	r2, r3
 80099fc:	f107 0310 	add.w	r3, r7, #16
 8009a00:	4423      	add	r3, r4
 8009a02:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	73fb      	strb	r3, [r7, #15]
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	2b03      	cmp	r3, #3
 8009a10:	d9ee      	bls.n	80099f0 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009a12:	7abb      	ldrb	r3, [r7, #10]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d167      	bne.n	8009ae8 <USER_SPI_initialize+0x17c>
 8009a18:	7afb      	ldrb	r3, [r7, #11]
 8009a1a:	2baa      	cmp	r3, #170	; 0xaa
 8009a1c:	d164      	bne.n	8009ae8 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009a1e:	bf00      	nop
 8009a20:	f7ff fe28 	bl	8009674 <SPI_Timer_Status>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d007      	beq.n	8009a3a <USER_SPI_initialize+0xce>
 8009a2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8009a2e:	20a9      	movs	r0, #169	; 0xa9
 8009a30:	f7ff ff2d 	bl	800988e <send_cmd>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1f2      	bne.n	8009a20 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8009a3a:	f7ff fe1b 	bl	8009674 <SPI_Timer_Status>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d051      	beq.n	8009ae8 <USER_SPI_initialize+0x17c>
 8009a44:	2100      	movs	r1, #0
 8009a46:	203a      	movs	r0, #58	; 0x3a
 8009a48:	f7ff ff21 	bl	800988e <send_cmd>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d14a      	bne.n	8009ae8 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009a52:	2300      	movs	r3, #0
 8009a54:	73fb      	strb	r3, [r7, #15]
 8009a56:	e00d      	b.n	8009a74 <USER_SPI_initialize+0x108>
 8009a58:	7bfc      	ldrb	r4, [r7, #15]
 8009a5a:	20ff      	movs	r0, #255	; 0xff
 8009a5c:	f7ff fe20 	bl	80096a0 <xchg_spi>
 8009a60:	4603      	mov	r3, r0
 8009a62:	461a      	mov	r2, r3
 8009a64:	f107 0310 	add.w	r3, r7, #16
 8009a68:	4423      	add	r3, r4
 8009a6a:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	3301      	adds	r3, #1
 8009a72:	73fb      	strb	r3, [r7, #15]
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d9ee      	bls.n	8009a58 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8009a7a:	7a3b      	ldrb	r3, [r7, #8]
 8009a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <USER_SPI_initialize+0x11c>
 8009a84:	230c      	movs	r3, #12
 8009a86:	e000      	b.n	8009a8a <USER_SPI_initialize+0x11e>
 8009a88:	2304      	movs	r3, #4
 8009a8a:	737b      	strb	r3, [r7, #13]
 8009a8c:	e02c      	b.n	8009ae8 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009a8e:	2100      	movs	r1, #0
 8009a90:	20a9      	movs	r0, #169	; 0xa9
 8009a92:	f7ff fefc 	bl	800988e <send_cmd>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d804      	bhi.n	8009aa6 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	737b      	strb	r3, [r7, #13]
 8009aa0:	23a9      	movs	r3, #169	; 0xa9
 8009aa2:	73bb      	strb	r3, [r7, #14]
 8009aa4:	e003      	b.n	8009aae <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	737b      	strb	r3, [r7, #13]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009aae:	bf00      	nop
 8009ab0:	f7ff fde0 	bl	8009674 <SPI_Timer_Status>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d007      	beq.n	8009aca <USER_SPI_initialize+0x15e>
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	2100      	movs	r1, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fee5 	bl	800988e <send_cmd>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1f2      	bne.n	8009ab0 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8009aca:	f7ff fdd3 	bl	8009674 <SPI_Timer_Status>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d007      	beq.n	8009ae4 <USER_SPI_initialize+0x178>
 8009ad4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ad8:	2010      	movs	r0, #16
 8009ada:	f7ff fed8 	bl	800988e <send_cmd>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d001      	beq.n	8009ae8 <USER_SPI_initialize+0x17c>
				ty = 0;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009ae8:	4a14      	ldr	r2, [pc, #80]	; (8009b3c <USER_SPI_initialize+0x1d0>)
 8009aea:	7b7b      	ldrb	r3, [r7, #13]
 8009aec:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009aee:	f7ff fe47 	bl	8009780 <despiselect>

	if (ty) {			/* OK */
 8009af2:	7b7b      	ldrb	r3, [r7, #13]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d012      	beq.n	8009b1e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8009af8:	4b0f      	ldr	r3, [pc, #60]	; (8009b38 <USER_SPI_initialize+0x1cc>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b02:	4b0d      	ldr	r3, [pc, #52]	; (8009b38 <USER_SPI_initialize+0x1cc>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f042 0220 	orr.w	r2, r2, #32
 8009b0a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8009b0c:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <USER_SPI_initialize+0x1c8>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	f023 0301 	bic.w	r3, r3, #1
 8009b16:	b2da      	uxtb	r2, r3
 8009b18:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <USER_SPI_initialize+0x1c8>)
 8009b1a:	701a      	strb	r2, [r3, #0]
 8009b1c:	e002      	b.n	8009b24 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8009b1e:	4b05      	ldr	r3, [pc, #20]	; (8009b34 <USER_SPI_initialize+0x1c8>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009b24:	4b03      	ldr	r3, [pc, #12]	; (8009b34 <USER_SPI_initialize+0x1c8>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	b2db      	uxtb	r3, r3
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3714      	adds	r7, #20
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd90      	pop	{r4, r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20000020 	.word	0x20000020
 8009b38:	200008ac 	.word	0x200008ac
 8009b3c:	20000764 	.word	0x20000764

08009b40 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	4603      	mov	r3, r0
 8009b48:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <USER_SPI_status+0x14>
 8009b50:	2301      	movs	r3, #1
 8009b52:	e002      	b.n	8009b5a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009b54:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <USER_SPI_status+0x28>)
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	b2db      	uxtb	r3, r3
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	20000020 	.word	0x20000020

08009b6c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	607a      	str	r2, [r7, #4]
 8009b76:	603b      	str	r3, [r7, #0]
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d102      	bne.n	8009b88 <USER_SPI_read+0x1c>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <USER_SPI_read+0x20>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	e04d      	b.n	8009c28 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009b8c:	4b28      	ldr	r3, [pc, #160]	; (8009c30 <USER_SPI_read+0xc4>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <USER_SPI_read+0x32>
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e044      	b.n	8009c28 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8009b9e:	4b25      	ldr	r3, [pc, #148]	; (8009c34 <USER_SPI_read+0xc8>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	f003 0308 	and.w	r3, r3, #8
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d102      	bne.n	8009bb0 <USER_SPI_read+0x44>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	025b      	lsls	r3, r3, #9
 8009bae:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d111      	bne.n	8009bda <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009bb6:	6879      	ldr	r1, [r7, #4]
 8009bb8:	2011      	movs	r0, #17
 8009bba:	f7ff fe68 	bl	800988e <send_cmd>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d129      	bne.n	8009c18 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009bc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bc8:	68b8      	ldr	r0, [r7, #8]
 8009bca:	f7ff fe05 	bl	80097d8 <rcvr_datablock>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d021      	beq.n	8009c18 <USER_SPI_read+0xac>
			count = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	e01e      	b.n	8009c18 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009bda:	6879      	ldr	r1, [r7, #4]
 8009bdc:	2012      	movs	r0, #18
 8009bde:	f7ff fe56 	bl	800988e <send_cmd>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d117      	bne.n	8009c18 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bec:	68b8      	ldr	r0, [r7, #8]
 8009bee:	f7ff fdf3 	bl	80097d8 <rcvr_datablock>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00a      	beq.n	8009c0e <USER_SPI_read+0xa2>
				buff += 512;
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009bfe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	603b      	str	r3, [r7, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1ed      	bne.n	8009be8 <USER_SPI_read+0x7c>
 8009c0c:	e000      	b.n	8009c10 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009c0e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009c10:	2100      	movs	r1, #0
 8009c12:	200c      	movs	r0, #12
 8009c14:	f7ff fe3b 	bl	800988e <send_cmd>
		}
	}
	despiselect();
 8009c18:	f7ff fdb2 	bl	8009780 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	bf14      	ite	ne
 8009c22:	2301      	movne	r3, #1
 8009c24:	2300      	moveq	r3, #0
 8009c26:	b2db      	uxtb	r3, r3
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}
 8009c30:	20000020 	.word	0x20000020
 8009c34:	20000764 	.word	0x20000764

08009c38 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60b9      	str	r1, [r7, #8]
 8009c40:	607a      	str	r2, [r7, #4]
 8009c42:	603b      	str	r3, [r7, #0]
 8009c44:	4603      	mov	r3, r0
 8009c46:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <USER_SPI_write+0x1c>
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <USER_SPI_write+0x20>
 8009c54:	2304      	movs	r3, #4
 8009c56:	e063      	b.n	8009d20 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009c58:	4b33      	ldr	r3, [pc, #204]	; (8009d28 <USER_SPI_write+0xf0>)
 8009c5a:	781b      	ldrb	r3, [r3, #0]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <USER_SPI_write+0x32>
 8009c66:	2303      	movs	r3, #3
 8009c68:	e05a      	b.n	8009d20 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009c6a:	4b2f      	ldr	r3, [pc, #188]	; (8009d28 <USER_SPI_write+0xf0>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	f003 0304 	and.w	r3, r3, #4
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d001      	beq.n	8009c7c <USER_SPI_write+0x44>
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e051      	b.n	8009d20 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009c7c:	4b2b      	ldr	r3, [pc, #172]	; (8009d2c <USER_SPI_write+0xf4>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	f003 0308 	and.w	r3, r3, #8
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d102      	bne.n	8009c8e <USER_SPI_write+0x56>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	025b      	lsls	r3, r3, #9
 8009c8c:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d110      	bne.n	8009cb6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009c94:	6879      	ldr	r1, [r7, #4]
 8009c96:	2018      	movs	r0, #24
 8009c98:	f7ff fdf9 	bl	800988e <send_cmd>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d136      	bne.n	8009d10 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009ca2:	21fe      	movs	r1, #254	; 0xfe
 8009ca4:	68b8      	ldr	r0, [r7, #8]
 8009ca6:	f7ff fdc0 	bl	800982a <xmit_datablock>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d02f      	beq.n	8009d10 <USER_SPI_write+0xd8>
			count = 0;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	e02c      	b.n	8009d10 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009cb6:	4b1d      	ldr	r3, [pc, #116]	; (8009d2c <USER_SPI_write+0xf4>)
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	f003 0306 	and.w	r3, r3, #6
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <USER_SPI_write+0x92>
 8009cc2:	6839      	ldr	r1, [r7, #0]
 8009cc4:	2097      	movs	r0, #151	; 0x97
 8009cc6:	f7ff fde2 	bl	800988e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009cca:	6879      	ldr	r1, [r7, #4]
 8009ccc:	2019      	movs	r0, #25
 8009cce:	f7ff fdde 	bl	800988e <send_cmd>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d11b      	bne.n	8009d10 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009cd8:	21fc      	movs	r1, #252	; 0xfc
 8009cda:	68b8      	ldr	r0, [r7, #8]
 8009cdc:	f7ff fda5 	bl	800982a <xmit_datablock>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <USER_SPI_write+0xc4>
				buff += 512;
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009cec:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d1ee      	bne.n	8009cd8 <USER_SPI_write+0xa0>
 8009cfa:	e000      	b.n	8009cfe <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009cfc:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009cfe:	21fd      	movs	r1, #253	; 0xfd
 8009d00:	2000      	movs	r0, #0
 8009d02:	f7ff fd92 	bl	800982a <xmit_datablock>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <USER_SPI_write+0xd8>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009d10:	f7ff fd36 	bl	8009780 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	bf14      	ite	ne
 8009d1a:	2301      	movne	r3, #1
 8009d1c:	2300      	moveq	r3, #0
 8009d1e:	b2db      	uxtb	r3, r3
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20000020 	.word	0x20000020
 8009d2c:	20000764 	.word	0x20000764

08009d30 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b08c      	sub	sp, #48	; 0x30
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	603a      	str	r2, [r7, #0]
 8009d3a:	71fb      	strb	r3, [r7, #7]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009d40:	79fb      	ldrb	r3, [r7, #7]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d001      	beq.n	8009d4a <USER_SPI_ioctl+0x1a>
 8009d46:	2304      	movs	r3, #4
 8009d48:	e15a      	b.n	800a000 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009d4a:	4baf      	ldr	r3, [pc, #700]	; (800a008 <USER_SPI_ioctl+0x2d8>)
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d001      	beq.n	8009d5c <USER_SPI_ioctl+0x2c>
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e151      	b.n	800a000 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8009d62:	79bb      	ldrb	r3, [r7, #6]
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	f200 8136 	bhi.w	8009fd6 <USER_SPI_ioctl+0x2a6>
 8009d6a:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <USER_SPI_ioctl+0x40>)
 8009d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d70:	08009d85 	.word	0x08009d85
 8009d74:	08009d99 	.word	0x08009d99
 8009d78:	08009fd7 	.word	0x08009fd7
 8009d7c:	08009e45 	.word	0x08009e45
 8009d80:	08009f3b 	.word	0x08009f3b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009d84:	f7ff fd0c 	bl	80097a0 <spiselect>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 8127 	beq.w	8009fde <USER_SPI_ioctl+0x2ae>
 8009d90:	2300      	movs	r3, #0
 8009d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009d96:	e122      	b.n	8009fde <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009d98:	2100      	movs	r1, #0
 8009d9a:	2009      	movs	r0, #9
 8009d9c:	f7ff fd77 	bl	800988e <send_cmd>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 811d 	bne.w	8009fe2 <USER_SPI_ioctl+0x2b2>
 8009da8:	f107 030c 	add.w	r3, r7, #12
 8009dac:	2110      	movs	r1, #16
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff fd12 	bl	80097d8 <rcvr_datablock>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 8113 	beq.w	8009fe2 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009dbc:	7b3b      	ldrb	r3, [r7, #12]
 8009dbe:	099b      	lsrs	r3, r3, #6
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d111      	bne.n	8009dea <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009dc6:	7d7b      	ldrb	r3, [r7, #21]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	7d3b      	ldrb	r3, [r7, #20]
 8009dcc:	021b      	lsls	r3, r3, #8
 8009dce:	4413      	add	r3, r2
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	7cfb      	ldrb	r3, [r7, #19]
 8009dd4:	041b      	lsls	r3, r3, #16
 8009dd6:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8009dda:	4413      	add	r3, r2
 8009ddc:	3301      	adds	r3, #1
 8009dde:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	029a      	lsls	r2, r3, #10
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	e028      	b.n	8009e3c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009dea:	7c7b      	ldrb	r3, [r7, #17]
 8009dec:	f003 030f 	and.w	r3, r3, #15
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	7dbb      	ldrb	r3, [r7, #22]
 8009df4:	09db      	lsrs	r3, r3, #7
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	4413      	add	r3, r2
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	7d7b      	ldrb	r3, [r7, #21]
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	f003 0306 	and.w	r3, r3, #6
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	4413      	add	r3, r2
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	3302      	adds	r3, #2
 8009e0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009e12:	7d3b      	ldrb	r3, [r7, #20]
 8009e14:	099b      	lsrs	r3, r3, #6
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	461a      	mov	r2, r3
 8009e1a:	7cfb      	ldrb	r3, [r7, #19]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	441a      	add	r2, r3
 8009e20:	7cbb      	ldrb	r3, [r7, #18]
 8009e22:	029b      	lsls	r3, r3, #10
 8009e24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009e28:	4413      	add	r3, r2
 8009e2a:	3301      	adds	r3, #1
 8009e2c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e32:	3b09      	subs	r3, #9
 8009e34:	69fa      	ldr	r2, [r7, #28]
 8009e36:	409a      	lsls	r2, r3
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009e42:	e0ce      	b.n	8009fe2 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009e44:	4b71      	ldr	r3, [pc, #452]	; (800a00c <USER_SPI_ioctl+0x2dc>)
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 0304 	and.w	r3, r3, #4
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d031      	beq.n	8009eb4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009e50:	2100      	movs	r1, #0
 8009e52:	208d      	movs	r0, #141	; 0x8d
 8009e54:	f7ff fd1b 	bl	800988e <send_cmd>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f040 80c3 	bne.w	8009fe6 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009e60:	20ff      	movs	r0, #255	; 0xff
 8009e62:	f7ff fc1d 	bl	80096a0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009e66:	f107 030c 	add.w	r3, r7, #12
 8009e6a:	2110      	movs	r1, #16
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7ff fcb3 	bl	80097d8 <rcvr_datablock>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	f000 80b6 	beq.w	8009fe6 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009e7a:	2330      	movs	r3, #48	; 0x30
 8009e7c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009e80:	e007      	b.n	8009e92 <USER_SPI_ioctl+0x162>
 8009e82:	20ff      	movs	r0, #255	; 0xff
 8009e84:	f7ff fc0c 	bl	80096a0 <xchg_spi>
 8009e88:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009e92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1f3      	bne.n	8009e82 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009e9a:	7dbb      	ldrb	r3, [r7, #22]
 8009e9c:	091b      	lsrs	r3, r3, #4
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	2310      	movs	r3, #16
 8009ea4:	fa03 f202 	lsl.w	r2, r3, r2
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009eb2:	e098      	b.n	8009fe6 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	2009      	movs	r0, #9
 8009eb8:	f7ff fce9 	bl	800988e <send_cmd>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f040 8091 	bne.w	8009fe6 <USER_SPI_ioctl+0x2b6>
 8009ec4:	f107 030c 	add.w	r3, r7, #12
 8009ec8:	2110      	movs	r1, #16
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7ff fc84 	bl	80097d8 <rcvr_datablock>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	f000 8087 	beq.w	8009fe6 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009ed8:	4b4c      	ldr	r3, [pc, #304]	; (800a00c <USER_SPI_ioctl+0x2dc>)
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f003 0302 	and.w	r3, r3, #2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d012      	beq.n	8009f0a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009ee4:	7dbb      	ldrb	r3, [r7, #22]
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8009eec:	7dfa      	ldrb	r2, [r7, #23]
 8009eee:	09d2      	lsrs	r2, r2, #7
 8009ef0:	b2d2      	uxtb	r2, r2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	1c5a      	adds	r2, r3, #1
 8009ef6:	7e7b      	ldrb	r3, [r7, #25]
 8009ef8:	099b      	lsrs	r3, r3, #6
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	3b01      	subs	r3, #1
 8009efe:	fa02 f303 	lsl.w	r3, r2, r3
 8009f02:	461a      	mov	r2, r3
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	e013      	b.n	8009f32 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009f0a:	7dbb      	ldrb	r3, [r7, #22]
 8009f0c:	109b      	asrs	r3, r3, #2
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	f003 031f 	and.w	r3, r3, #31
 8009f14:	3301      	adds	r3, #1
 8009f16:	7dfa      	ldrb	r2, [r7, #23]
 8009f18:	00d2      	lsls	r2, r2, #3
 8009f1a:	f002 0218 	and.w	r2, r2, #24
 8009f1e:	7df9      	ldrb	r1, [r7, #23]
 8009f20:	0949      	lsrs	r1, r1, #5
 8009f22:	b2c9      	uxtb	r1, r1
 8009f24:	440a      	add	r2, r1
 8009f26:	3201      	adds	r2, #1
 8009f28:	fb02 f303 	mul.w	r3, r2, r3
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009f32:	2300      	movs	r3, #0
 8009f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009f38:	e055      	b.n	8009fe6 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009f3a:	4b34      	ldr	r3, [pc, #208]	; (800a00c <USER_SPI_ioctl+0x2dc>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	f003 0306 	and.w	r3, r3, #6
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d051      	beq.n	8009fea <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009f46:	f107 020c 	add.w	r2, r7, #12
 8009f4a:	79fb      	ldrb	r3, [r7, #7]
 8009f4c:	210b      	movs	r1, #11
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7ff feee 	bl	8009d30 <USER_SPI_ioctl>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d149      	bne.n	8009fee <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009f5a:	7b3b      	ldrb	r3, [r7, #12]
 8009f5c:	099b      	lsrs	r3, r3, #6
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d104      	bne.n	8009f6e <USER_SPI_ioctl+0x23e>
 8009f64:	7dbb      	ldrb	r3, [r7, #22]
 8009f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d041      	beq.n	8009ff2 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	623b      	str	r3, [r7, #32]
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8009f7e:	4b23      	ldr	r3, [pc, #140]	; (800a00c <USER_SPI_ioctl+0x2dc>)
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	f003 0308 	and.w	r3, r3, #8
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d105      	bne.n	8009f96 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8c:	025b      	lsls	r3, r3, #9
 8009f8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	025b      	lsls	r3, r3, #9
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009f96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f98:	2020      	movs	r0, #32
 8009f9a:	f7ff fc78 	bl	800988e <send_cmd>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d128      	bne.n	8009ff6 <USER_SPI_ioctl+0x2c6>
 8009fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fa6:	2021      	movs	r0, #33	; 0x21
 8009fa8:	f7ff fc71 	bl	800988e <send_cmd>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d121      	bne.n	8009ff6 <USER_SPI_ioctl+0x2c6>
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	2026      	movs	r0, #38	; 0x26
 8009fb6:	f7ff fc6a 	bl	800988e <send_cmd>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d11a      	bne.n	8009ff6 <USER_SPI_ioctl+0x2c6>
 8009fc0:	f247 5030 	movw	r0, #30000	; 0x7530
 8009fc4:	f7ff fbb9 	bl	800973a <wait_ready>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d013      	beq.n	8009ff6 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009fce:	2300      	movs	r3, #0
 8009fd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009fd4:	e00f      	b.n	8009ff6 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009fd6:	2304      	movs	r3, #4
 8009fd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009fdc:	e00c      	b.n	8009ff8 <USER_SPI_ioctl+0x2c8>
		break;
 8009fde:	bf00      	nop
 8009fe0:	e00a      	b.n	8009ff8 <USER_SPI_ioctl+0x2c8>
		break;
 8009fe2:	bf00      	nop
 8009fe4:	e008      	b.n	8009ff8 <USER_SPI_ioctl+0x2c8>
		break;
 8009fe6:	bf00      	nop
 8009fe8:	e006      	b.n	8009ff8 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009fea:	bf00      	nop
 8009fec:	e004      	b.n	8009ff8 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009fee:	bf00      	nop
 8009ff0:	e002      	b.n	8009ff8 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009ff2:	bf00      	nop
 8009ff4:	e000      	b.n	8009ff8 <USER_SPI_ioctl+0x2c8>
		break;
 8009ff6:	bf00      	nop
	}

	despiselect();
 8009ff8:	f7ff fbc2 	bl	8009780 <despiselect>

	return res;
 8009ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a000:	4618      	mov	r0, r3
 800a002:	3730      	adds	r7, #48	; 0x30
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000020 	.word	0x20000020
 800a00c:	20000764 	.word	0x20000764

0800a010 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a01a:	79fb      	ldrb	r3, [r7, #7]
 800a01c:	4a08      	ldr	r2, [pc, #32]	; (800a040 <disk_status+0x30>)
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	4413      	add	r3, r2
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	79fa      	ldrb	r2, [r7, #7]
 800a028:	4905      	ldr	r1, [pc, #20]	; (800a040 <disk_status+0x30>)
 800a02a:	440a      	add	r2, r1
 800a02c:	7a12      	ldrb	r2, [r2, #8]
 800a02e:	4610      	mov	r0, r2
 800a030:	4798      	blx	r3
 800a032:	4603      	mov	r3, r0
 800a034:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a036:	7bfb      	ldrb	r3, [r7, #15]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20000790 	.word	0x20000790

0800a044 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a052:	79fb      	ldrb	r3, [r7, #7]
 800a054:	4a0d      	ldr	r2, [pc, #52]	; (800a08c <disk_initialize+0x48>)
 800a056:	5cd3      	ldrb	r3, [r2, r3]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d111      	bne.n	800a080 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a05c:	79fb      	ldrb	r3, [r7, #7]
 800a05e:	4a0b      	ldr	r2, [pc, #44]	; (800a08c <disk_initialize+0x48>)
 800a060:	2101      	movs	r1, #1
 800a062:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a064:	79fb      	ldrb	r3, [r7, #7]
 800a066:	4a09      	ldr	r2, [pc, #36]	; (800a08c <disk_initialize+0x48>)
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	4413      	add	r3, r2
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	79fa      	ldrb	r2, [r7, #7]
 800a072:	4906      	ldr	r1, [pc, #24]	; (800a08c <disk_initialize+0x48>)
 800a074:	440a      	add	r2, r1
 800a076:	7a12      	ldrb	r2, [r2, #8]
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a080:	7bfb      	ldrb	r3, [r7, #15]
}
 800a082:	4618      	mov	r0, r3
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000790 	.word	0x20000790

0800a090 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a090:	b590      	push	{r4, r7, lr}
 800a092:	b087      	sub	sp, #28
 800a094:	af00      	add	r7, sp, #0
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	607a      	str	r2, [r7, #4]
 800a09a:	603b      	str	r3, [r7, #0]
 800a09c:	4603      	mov	r3, r0
 800a09e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	4a0a      	ldr	r2, [pc, #40]	; (800a0cc <disk_read+0x3c>)
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	689c      	ldr	r4, [r3, #8]
 800a0ac:	7bfb      	ldrb	r3, [r7, #15]
 800a0ae:	4a07      	ldr	r2, [pc, #28]	; (800a0cc <disk_read+0x3c>)
 800a0b0:	4413      	add	r3, r2
 800a0b2:	7a18      	ldrb	r0, [r3, #8]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	47a0      	blx	r4
 800a0bc:	4603      	mov	r3, r0
 800a0be:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	371c      	adds	r7, #28
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd90      	pop	{r4, r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	20000790 	.word	0x20000790

0800a0d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a0d0:	b590      	push	{r4, r7, lr}
 800a0d2:	b087      	sub	sp, #28
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	607a      	str	r2, [r7, #4]
 800a0da:	603b      	str	r3, [r7, #0]
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	4a0a      	ldr	r2, [pc, #40]	; (800a10c <disk_write+0x3c>)
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	68dc      	ldr	r4, [r3, #12]
 800a0ec:	7bfb      	ldrb	r3, [r7, #15]
 800a0ee:	4a07      	ldr	r2, [pc, #28]	; (800a10c <disk_write+0x3c>)
 800a0f0:	4413      	add	r3, r2
 800a0f2:	7a18      	ldrb	r0, [r3, #8]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	68b9      	ldr	r1, [r7, #8]
 800a0fa:	47a0      	blx	r4
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800a100:	7dfb      	ldrb	r3, [r7, #23]
}
 800a102:	4618      	mov	r0, r3
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	bd90      	pop	{r4, r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000790 	.word	0x20000790

0800a110 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	4603      	mov	r3, r0
 800a118:	603a      	str	r2, [r7, #0]
 800a11a:	71fb      	strb	r3, [r7, #7]
 800a11c:	460b      	mov	r3, r1
 800a11e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	4a09      	ldr	r2, [pc, #36]	; (800a148 <disk_ioctl+0x38>)
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	4413      	add	r3, r2
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	691b      	ldr	r3, [r3, #16]
 800a12c:	79fa      	ldrb	r2, [r7, #7]
 800a12e:	4906      	ldr	r1, [pc, #24]	; (800a148 <disk_ioctl+0x38>)
 800a130:	440a      	add	r2, r1
 800a132:	7a10      	ldrb	r0, [r2, #8]
 800a134:	79b9      	ldrb	r1, [r7, #6]
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	4798      	blx	r3
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	20000790 	.word	0x20000790

0800a14c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3301      	adds	r3, #1
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a15c:	89fb      	ldrh	r3, [r7, #14]
 800a15e:	021b      	lsls	r3, r3, #8
 800a160:	b21a      	sxth	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	b21b      	sxth	r3, r3
 800a168:	4313      	orrs	r3, r2
 800a16a:	b21b      	sxth	r3, r3
 800a16c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a16e:	89fb      	ldrh	r3, [r7, #14]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a17c:	b480      	push	{r7}
 800a17e:	b085      	sub	sp, #20
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3303      	adds	r3, #3
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	3202      	adds	r2, #2
 800a194:	7812      	ldrb	r2, [r2, #0]
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	021b      	lsls	r3, r3, #8
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	3201      	adds	r2, #1
 800a1a2:	7812      	ldrb	r2, [r2, #0]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	021b      	lsls	r3, r3, #8
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	7812      	ldrb	r2, [r2, #0]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]
	return rv;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr

0800a1c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a1c2:	b480      	push	{r7}
 800a1c4:	b083      	sub	sp, #12
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	1c5a      	adds	r2, r3, #1
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	887a      	ldrh	r2, [r7, #2]
 800a1d6:	b2d2      	uxtb	r2, r2
 800a1d8:	701a      	strb	r2, [r3, #0]
 800a1da:	887b      	ldrh	r3, [r7, #2]
 800a1dc:	0a1b      	lsrs	r3, r3, #8
 800a1de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	1c5a      	adds	r2, r3, #1
 800a1e4:	607a      	str	r2, [r7, #4]
 800a1e6:	887a      	ldrh	r2, [r7, #2]
 800a1e8:	b2d2      	uxtb	r2, r2
 800a1ea:	701a      	strb	r2, [r3, #0]
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	683a      	ldr	r2, [r7, #0]
 800a20a:	b2d2      	uxtb	r2, r2
 800a20c:	701a      	strb	r2, [r3, #0]
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	0a1b      	lsrs	r3, r3, #8
 800a212:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	607a      	str	r2, [r7, #4]
 800a21a:	683a      	ldr	r2, [r7, #0]
 800a21c:	b2d2      	uxtb	r2, r2
 800a21e:	701a      	strb	r2, [r3, #0]
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	0a1b      	lsrs	r3, r3, #8
 800a224:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	607a      	str	r2, [r7, #4]
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	b2d2      	uxtb	r2, r2
 800a230:	701a      	strb	r2, [r3, #0]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	0a1b      	lsrs	r3, r3, #8
 800a236:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	607a      	str	r2, [r7, #4]
 800a23e:	683a      	ldr	r2, [r7, #0]
 800a240:	b2d2      	uxtb	r2, r2
 800a242:	701a      	strb	r2, [r3, #0]
}
 800a244:	bf00      	nop
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a250:	b480      	push	{r7}
 800a252:	b087      	sub	sp, #28
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00d      	beq.n	800a286 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a26a:	693a      	ldr	r2, [r7, #16]
 800a26c:	1c53      	adds	r3, r2, #1
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	1c59      	adds	r1, r3, #1
 800a274:	6179      	str	r1, [r7, #20]
 800a276:	7812      	ldrb	r2, [r2, #0]
 800a278:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3b01      	subs	r3, #1
 800a27e:	607b      	str	r3, [r7, #4]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1f1      	bne.n	800a26a <mem_cpy+0x1a>
	}
}
 800a286:	bf00      	nop
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a292:	b480      	push	{r7}
 800a294:	b087      	sub	sp, #28
 800a296:	af00      	add	r7, sp, #0
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	617a      	str	r2, [r7, #20]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	b2d2      	uxtb	r2, r2
 800a2ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	607b      	str	r3, [r7, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1f3      	bne.n	800a2a2 <mem_set+0x10>
}
 800a2ba:	bf00      	nop
 800a2bc:	bf00      	nop
 800a2be:	371c      	adds	r7, #28
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a2c8:	b480      	push	{r7}
 800a2ca:	b089      	sub	sp, #36	; 0x24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	61fb      	str	r3, [r7, #28]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a2e0:	69fb      	ldr	r3, [r7, #28]
 800a2e2:	1c5a      	adds	r2, r3, #1
 800a2e4:	61fa      	str	r2, [r7, #28]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	61ba      	str	r2, [r7, #24]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	1acb      	subs	r3, r1, r3
 800a2f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	607b      	str	r3, [r7, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d002      	beq.n	800a308 <mem_cmp+0x40>
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d0eb      	beq.n	800a2e0 <mem_cmp+0x18>

	return r;
 800a308:	697b      	ldr	r3, [r7, #20]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3724      	adds	r7, #36	; 0x24
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a320:	e002      	b.n	800a328 <chk_chr+0x12>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	3301      	adds	r3, #1
 800a326:	607b      	str	r3, [r7, #4]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <chk_chr+0x26>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	461a      	mov	r2, r3
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	4293      	cmp	r3, r2
 800a33a:	d1f2      	bne.n	800a322 <chk_chr+0xc>
	return *str;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	781b      	ldrb	r3, [r3, #0]
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a356:	2300      	movs	r3, #0
 800a358:	60bb      	str	r3, [r7, #8]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	60fb      	str	r3, [r7, #12]
 800a35e:	e029      	b.n	800a3b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a360:	4a27      	ldr	r2, [pc, #156]	; (800a400 <chk_lock+0xb4>)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	011b      	lsls	r3, r3, #4
 800a366:	4413      	add	r3, r2
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d01d      	beq.n	800a3aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a36e:	4a24      	ldr	r2, [pc, #144]	; (800a400 <chk_lock+0xb4>)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	4413      	add	r3, r2
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d116      	bne.n	800a3ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a380:	4a1f      	ldr	r2, [pc, #124]	; (800a400 <chk_lock+0xb4>)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	4413      	add	r3, r2
 800a388:	3304      	adds	r3, #4
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a390:	429a      	cmp	r2, r3
 800a392:	d10c      	bne.n	800a3ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a394:	4a1a      	ldr	r2, [pc, #104]	; (800a400 <chk_lock+0xb4>)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	011b      	lsls	r3, r3, #4
 800a39a:	4413      	add	r3, r2
 800a39c:	3308      	adds	r3, #8
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d102      	bne.n	800a3ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a3a8:	e007      	b.n	800a3ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d9d2      	bls.n	800a360 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d109      	bne.n	800a3d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d102      	bne.n	800a3cc <chk_lock+0x80>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d101      	bne.n	800a3d0 <chk_lock+0x84>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	e010      	b.n	800a3f2 <chk_lock+0xa6>
 800a3d0:	2312      	movs	r3, #18
 800a3d2:	e00e      	b.n	800a3f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d108      	bne.n	800a3ec <chk_lock+0xa0>
 800a3da:	4a09      	ldr	r2, [pc, #36]	; (800a400 <chk_lock+0xb4>)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	011b      	lsls	r3, r3, #4
 800a3e0:	4413      	add	r3, r2
 800a3e2:	330c      	adds	r3, #12
 800a3e4:	881b      	ldrh	r3, [r3, #0]
 800a3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3ea:	d101      	bne.n	800a3f0 <chk_lock+0xa4>
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	e000      	b.n	800a3f2 <chk_lock+0xa6>
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20000770 	.word	0x20000770

0800a404 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a40a:	2300      	movs	r3, #0
 800a40c:	607b      	str	r3, [r7, #4]
 800a40e:	e002      	b.n	800a416 <enq_lock+0x12>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	3301      	adds	r3, #1
 800a414:	607b      	str	r3, [r7, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d806      	bhi.n	800a42a <enq_lock+0x26>
 800a41c:	4a09      	ldr	r2, [pc, #36]	; (800a444 <enq_lock+0x40>)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	011b      	lsls	r3, r3, #4
 800a422:	4413      	add	r3, r2
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1f2      	bne.n	800a410 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	bf14      	ite	ne
 800a430:	2301      	movne	r3, #1
 800a432:	2300      	moveq	r3, #0
 800a434:	b2db      	uxtb	r3, r3
}
 800a436:	4618      	mov	r0, r3
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	20000770 	.word	0x20000770

0800a448 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a452:	2300      	movs	r3, #0
 800a454:	60fb      	str	r3, [r7, #12]
 800a456:	e01f      	b.n	800a498 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a458:	4a41      	ldr	r2, [pc, #260]	; (800a560 <inc_lock+0x118>)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	4413      	add	r3, r2
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d113      	bne.n	800a492 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a46a:	4a3d      	ldr	r2, [pc, #244]	; (800a560 <inc_lock+0x118>)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	011b      	lsls	r3, r3, #4
 800a470:	4413      	add	r3, r2
 800a472:	3304      	adds	r3, #4
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d109      	bne.n	800a492 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a47e:	4a38      	ldr	r2, [pc, #224]	; (800a560 <inc_lock+0x118>)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	011b      	lsls	r3, r3, #4
 800a484:	4413      	add	r3, r2
 800a486:	3308      	adds	r3, #8
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a48e:	429a      	cmp	r2, r3
 800a490:	d006      	beq.n	800a4a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3301      	adds	r3, #1
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d9dc      	bls.n	800a458 <inc_lock+0x10>
 800a49e:	e000      	b.n	800a4a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a4a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d132      	bne.n	800a50e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e002      	b.n	800a4b4 <inc_lock+0x6c>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	60fb      	str	r3, [r7, #12]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d806      	bhi.n	800a4c8 <inc_lock+0x80>
 800a4ba:	4a29      	ldr	r2, [pc, #164]	; (800a560 <inc_lock+0x118>)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	011b      	lsls	r3, r3, #4
 800a4c0:	4413      	add	r3, r2
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1f2      	bne.n	800a4ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d101      	bne.n	800a4d2 <inc_lock+0x8a>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e040      	b.n	800a554 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	4922      	ldr	r1, [pc, #136]	; (800a560 <inc_lock+0x118>)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	011b      	lsls	r3, r3, #4
 800a4dc:	440b      	add	r3, r1
 800a4de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	689a      	ldr	r2, [r3, #8]
 800a4e4:	491e      	ldr	r1, [pc, #120]	; (800a560 <inc_lock+0x118>)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	440b      	add	r3, r1
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	695a      	ldr	r2, [r3, #20]
 800a4f4:	491a      	ldr	r1, [pc, #104]	; (800a560 <inc_lock+0x118>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	011b      	lsls	r3, r3, #4
 800a4fa:	440b      	add	r3, r1
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a500:	4a17      	ldr	r2, [pc, #92]	; (800a560 <inc_lock+0x118>)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	4413      	add	r3, r2
 800a508:	330c      	adds	r3, #12
 800a50a:	2200      	movs	r2, #0
 800a50c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d009      	beq.n	800a528 <inc_lock+0xe0>
 800a514:	4a12      	ldr	r2, [pc, #72]	; (800a560 <inc_lock+0x118>)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	011b      	lsls	r3, r3, #4
 800a51a:	4413      	add	r3, r2
 800a51c:	330c      	adds	r3, #12
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d001      	beq.n	800a528 <inc_lock+0xe0>
 800a524:	2300      	movs	r3, #0
 800a526:	e015      	b.n	800a554 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d108      	bne.n	800a540 <inc_lock+0xf8>
 800a52e:	4a0c      	ldr	r2, [pc, #48]	; (800a560 <inc_lock+0x118>)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	011b      	lsls	r3, r3, #4
 800a534:	4413      	add	r3, r2
 800a536:	330c      	adds	r3, #12
 800a538:	881b      	ldrh	r3, [r3, #0]
 800a53a:	3301      	adds	r3, #1
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	e001      	b.n	800a544 <inc_lock+0xfc>
 800a540:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a544:	4906      	ldr	r1, [pc, #24]	; (800a560 <inc_lock+0x118>)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	011b      	lsls	r3, r3, #4
 800a54a:	440b      	add	r3, r1
 800a54c:	330c      	adds	r3, #12
 800a54e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	3301      	adds	r3, #1
}
 800a554:	4618      	mov	r0, r3
 800a556:	3714      	adds	r7, #20
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr
 800a560:	20000770 	.word	0x20000770

0800a564 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3b01      	subs	r3, #1
 800a570:	607b      	str	r3, [r7, #4]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d825      	bhi.n	800a5c4 <dec_lock+0x60>
		n = Files[i].ctr;
 800a578:	4a17      	ldr	r2, [pc, #92]	; (800a5d8 <dec_lock+0x74>)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	011b      	lsls	r3, r3, #4
 800a57e:	4413      	add	r3, r2
 800a580:	330c      	adds	r3, #12
 800a582:	881b      	ldrh	r3, [r3, #0]
 800a584:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a586:	89fb      	ldrh	r3, [r7, #14]
 800a588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a58c:	d101      	bne.n	800a592 <dec_lock+0x2e>
 800a58e:	2300      	movs	r3, #0
 800a590:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a592:	89fb      	ldrh	r3, [r7, #14]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <dec_lock+0x3a>
 800a598:	89fb      	ldrh	r3, [r7, #14]
 800a59a:	3b01      	subs	r3, #1
 800a59c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a59e:	4a0e      	ldr	r2, [pc, #56]	; (800a5d8 <dec_lock+0x74>)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	011b      	lsls	r3, r3, #4
 800a5a4:	4413      	add	r3, r2
 800a5a6:	330c      	adds	r3, #12
 800a5a8:	89fa      	ldrh	r2, [r7, #14]
 800a5aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a5ac:	89fb      	ldrh	r3, [r7, #14]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d105      	bne.n	800a5be <dec_lock+0x5a>
 800a5b2:	4a09      	ldr	r2, [pc, #36]	; (800a5d8 <dec_lock+0x74>)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	011b      	lsls	r3, r3, #4
 800a5b8:	4413      	add	r3, r2
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	737b      	strb	r3, [r7, #13]
 800a5c2:	e001      	b.n	800a5c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a5c8:	7b7b      	ldrb	r3, [r7, #13]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	20000770 	.word	0x20000770

0800a5dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
 800a5e8:	e010      	b.n	800a60c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a5ea:	4a0d      	ldr	r2, [pc, #52]	; (800a620 <clear_lock+0x44>)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	011b      	lsls	r3, r3, #4
 800a5f0:	4413      	add	r3, r2
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d105      	bne.n	800a606 <clear_lock+0x2a>
 800a5fa:	4a09      	ldr	r2, [pc, #36]	; (800a620 <clear_lock+0x44>)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	011b      	lsls	r3, r3, #4
 800a600:	4413      	add	r3, r2
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3301      	adds	r3, #1
 800a60a:	60fb      	str	r3, [r7, #12]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d9eb      	bls.n	800a5ea <clear_lock+0xe>
	}
}
 800a612:	bf00      	nop
 800a614:	bf00      	nop
 800a616:	3714      	adds	r7, #20
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr
 800a620:	20000770 	.word	0x20000770

0800a624 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	78db      	ldrb	r3, [r3, #3]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d034      	beq.n	800a6a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	7858      	ldrb	r0, [r3, #1]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a648:	2301      	movs	r3, #1
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	f7ff fd40 	bl	800a0d0 <disk_write>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d002      	beq.n	800a65c <sync_window+0x38>
			res = FR_DISK_ERR;
 800a656:	2301      	movs	r3, #1
 800a658:	73fb      	strb	r3, [r7, #15]
 800a65a:	e022      	b.n	800a6a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	1ad2      	subs	r2, r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d217      	bcs.n	800a6a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	789b      	ldrb	r3, [r3, #2]
 800a676:	613b      	str	r3, [r7, #16]
 800a678:	e010      	b.n	800a69c <sync_window+0x78>
					wsect += fs->fsize;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	699b      	ldr	r3, [r3, #24]
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4413      	add	r3, r2
 800a682:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	7858      	ldrb	r0, [r3, #1]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a68e:	2301      	movs	r3, #1
 800a690:	697a      	ldr	r2, [r7, #20]
 800a692:	f7ff fd1d 	bl	800a0d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	3b01      	subs	r3, #1
 800a69a:	613b      	str	r3, [r7, #16]
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d8eb      	bhi.n	800a67a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d01b      	beq.n	800a6fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff ffad 	bl	800a624 <sync_window>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d113      	bne.n	800a6fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	7858      	ldrb	r0, [r3, #1]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a6de:	2301      	movs	r3, #1
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	f7ff fcd5 	bl	800a090 <disk_read>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d004      	beq.n	800a6f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
	...

0800a708 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7ff ff87 	bl	800a624 <sync_window>
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a71a:	7bfb      	ldrb	r3, [r7, #15]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d158      	bne.n	800a7d2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b03      	cmp	r3, #3
 800a726:	d148      	bne.n	800a7ba <sync_fs+0xb2>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	791b      	ldrb	r3, [r3, #4]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d144      	bne.n	800a7ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3330      	adds	r3, #48	; 0x30
 800a734:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a738:	2100      	movs	r1, #0
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff fda9 	bl	800a292 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	3330      	adds	r3, #48	; 0x30
 800a744:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a748:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7ff fd38 	bl	800a1c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	3330      	adds	r3, #48	; 0x30
 800a756:	4921      	ldr	r1, [pc, #132]	; (800a7dc <sync_fs+0xd4>)
 800a758:	4618      	mov	r0, r3
 800a75a:	f7ff fd4d 	bl	800a1f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3330      	adds	r3, #48	; 0x30
 800a762:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a766:	491e      	ldr	r1, [pc, #120]	; (800a7e0 <sync_fs+0xd8>)
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff fd45 	bl	800a1f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3330      	adds	r3, #48	; 0x30
 800a772:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	4619      	mov	r1, r3
 800a77c:	4610      	mov	r0, r2
 800a77e:	f7ff fd3b 	bl	800a1f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	3330      	adds	r3, #48	; 0x30
 800a786:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	4619      	mov	r1, r3
 800a790:	4610      	mov	r0, r2
 800a792:	f7ff fd31 	bl	800a1f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7858      	ldrb	r0, [r3, #1]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	f7ff fc8e 	bl	800a0d0 <disk_write>
			fs->fsi_flag = 0;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	785b      	ldrb	r3, [r3, #1]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	2100      	movs	r1, #0
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7ff fca4 	bl	800a110 <disk_ioctl>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <sync_fs+0xca>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	41615252 	.word	0x41615252
 800a7e0:	61417272 	.word	0x61417272

0800a7e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	3b02      	subs	r3, #2
 800a7f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	3b02      	subs	r3, #2
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d301      	bcc.n	800a804 <clust2sect+0x20>
 800a800:	2300      	movs	r3, #0
 800a802:	e008      	b.n	800a816 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	895b      	ldrh	r3, [r3, #10]
 800a808:	461a      	mov	r2, r3
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	fb03 f202 	mul.w	r2, r3, r2
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a814:	4413      	add	r3, r2
}
 800a816:	4618      	mov	r0, r3
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b086      	sub	sp, #24
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2b01      	cmp	r3, #1
 800a836:	d904      	bls.n	800a842 <get_fat+0x20>
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	695b      	ldr	r3, [r3, #20]
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d302      	bcc.n	800a848 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a842:	2301      	movs	r3, #1
 800a844:	617b      	str	r3, [r7, #20]
 800a846:	e08f      	b.n	800a968 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a848:	f04f 33ff 	mov.w	r3, #4294967295
 800a84c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	2b03      	cmp	r3, #3
 800a854:	d062      	beq.n	800a91c <get_fat+0xfa>
 800a856:	2b03      	cmp	r3, #3
 800a858:	dc7c      	bgt.n	800a954 <get_fat+0x132>
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d002      	beq.n	800a864 <get_fat+0x42>
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d042      	beq.n	800a8e8 <get_fat+0xc6>
 800a862:	e077      	b.n	800a954 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	085b      	lsrs	r3, r3, #1
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	4413      	add	r3, r2
 800a870:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	6a1a      	ldr	r2, [r3, #32]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	0a5b      	lsrs	r3, r3, #9
 800a87a:	4413      	add	r3, r2
 800a87c:	4619      	mov	r1, r3
 800a87e:	6938      	ldr	r0, [r7, #16]
 800a880:	f7ff ff14 	bl	800a6ac <move_window>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d167      	bne.n	800a95a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	1c5a      	adds	r2, r3, #1
 800a88e:	60fa      	str	r2, [r7, #12]
 800a890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4413      	add	r3, r2
 800a898:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a89c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	6a1a      	ldr	r2, [r3, #32]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	0a5b      	lsrs	r3, r3, #9
 800a8a6:	4413      	add	r3, r2
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6938      	ldr	r0, [r7, #16]
 800a8ac:	f7ff fefe 	bl	800a6ac <move_window>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d153      	bne.n	800a95e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8c4:	021b      	lsls	r3, r3, #8
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <get_fat+0xbc>
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	091b      	lsrs	r3, r3, #4
 800a8dc:	e002      	b.n	800a8e4 <get_fat+0xc2>
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8e4:	617b      	str	r3, [r7, #20]
			break;
 800a8e6:	e03f      	b.n	800a968 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	6a1a      	ldr	r2, [r3, #32]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	0a1b      	lsrs	r3, r3, #8
 800a8f0:	4413      	add	r3, r2
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	6938      	ldr	r0, [r7, #16]
 800a8f6:	f7ff fed9 	bl	800a6ac <move_window>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d130      	bne.n	800a962 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	005b      	lsls	r3, r3, #1
 800a90a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a90e:	4413      	add	r3, r2
 800a910:	4618      	mov	r0, r3
 800a912:	f7ff fc1b 	bl	800a14c <ld_word>
 800a916:	4603      	mov	r3, r0
 800a918:	617b      	str	r3, [r7, #20]
			break;
 800a91a:	e025      	b.n	800a968 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	6a1a      	ldr	r2, [r3, #32]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	09db      	lsrs	r3, r3, #7
 800a924:	4413      	add	r3, r2
 800a926:	4619      	mov	r1, r3
 800a928:	6938      	ldr	r0, [r7, #16]
 800a92a:	f7ff febf 	bl	800a6ac <move_window>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d118      	bne.n	800a966 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a942:	4413      	add	r3, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff fc19 	bl	800a17c <ld_dword>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a950:	617b      	str	r3, [r7, #20]
			break;
 800a952:	e009      	b.n	800a968 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a954:	2301      	movs	r3, #1
 800a956:	617b      	str	r3, [r7, #20]
 800a958:	e006      	b.n	800a968 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a95a:	bf00      	nop
 800a95c:	e004      	b.n	800a968 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a95e:	bf00      	nop
 800a960:	e002      	b.n	800a968 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a962:	bf00      	nop
 800a964:	e000      	b.n	800a968 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a966:	bf00      	nop
		}
	}

	return val;
 800a968:	697b      	ldr	r3, [r7, #20]
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3718      	adds	r7, #24
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a972:	b590      	push	{r4, r7, lr}
 800a974:	b089      	sub	sp, #36	; 0x24
 800a976:	af00      	add	r7, sp, #0
 800a978:	60f8      	str	r0, [r7, #12]
 800a97a:	60b9      	str	r1, [r7, #8]
 800a97c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a97e:	2302      	movs	r3, #2
 800a980:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	2b01      	cmp	r3, #1
 800a986:	f240 80d2 	bls.w	800ab2e <put_fat+0x1bc>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	429a      	cmp	r2, r3
 800a992:	f080 80cc 	bcs.w	800ab2e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	f000 8096 	beq.w	800aacc <put_fat+0x15a>
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	f300 80cd 	bgt.w	800ab40 <put_fat+0x1ce>
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d002      	beq.n	800a9b0 <put_fat+0x3e>
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	d06e      	beq.n	800aa8c <put_fat+0x11a>
 800a9ae:	e0c7      	b.n	800ab40 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	61bb      	str	r3, [r7, #24]
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	085b      	lsrs	r3, r3, #1
 800a9b8:	69ba      	ldr	r2, [r7, #24]
 800a9ba:	4413      	add	r3, r2
 800a9bc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	6a1a      	ldr	r2, [r3, #32]
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	0a5b      	lsrs	r3, r3, #9
 800a9c6:	4413      	add	r3, r2
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f7ff fe6e 	bl	800a6ac <move_window>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9d4:	7ffb      	ldrb	r3, [r7, #31]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f040 80ab 	bne.w	800ab32 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	1c59      	adds	r1, r3, #1
 800a9e6:	61b9      	str	r1, [r7, #24]
 800a9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ec:	4413      	add	r3, r2
 800a9ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00d      	beq.n	800aa16 <put_fat+0xa4>
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	b25b      	sxtb	r3, r3
 800aa00:	f003 030f 	and.w	r3, r3, #15
 800aa04:	b25a      	sxtb	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	011b      	lsls	r3, r3, #4
 800aa0c:	b25b      	sxtb	r3, r3
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	b25b      	sxtb	r3, r3
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	e001      	b.n	800aa1a <put_fat+0xa8>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2201      	movs	r2, #1
 800aa22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6a1a      	ldr	r2, [r3, #32]
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	0a5b      	lsrs	r3, r3, #9
 800aa2c:	4413      	add	r3, r2
 800aa2e:	4619      	mov	r1, r3
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f7ff fe3b 	bl	800a6ac <move_window>
 800aa36:	4603      	mov	r3, r0
 800aa38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa3a:	7ffb      	ldrb	r3, [r7, #31]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d17a      	bne.n	800ab36 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa4c:	4413      	add	r3, r2
 800aa4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <put_fat+0xf0>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	091b      	lsrs	r3, r3, #4
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	e00e      	b.n	800aa80 <put_fat+0x10e>
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	b25b      	sxtb	r3, r3
 800aa68:	f023 030f 	bic.w	r3, r3, #15
 800aa6c:	b25a      	sxtb	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	0a1b      	lsrs	r3, r3, #8
 800aa72:	b25b      	sxtb	r3, r3
 800aa74:	f003 030f 	and.w	r3, r3, #15
 800aa78:	b25b      	sxtb	r3, r3
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	b25b      	sxtb	r3, r3
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2201      	movs	r2, #1
 800aa88:	70da      	strb	r2, [r3, #3]
			break;
 800aa8a:	e059      	b.n	800ab40 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a1a      	ldr	r2, [r3, #32]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	0a1b      	lsrs	r3, r3, #8
 800aa94:	4413      	add	r3, r2
 800aa96:	4619      	mov	r1, r3
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f7ff fe07 	bl	800a6ac <move_window>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aaa2:	7ffb      	ldrb	r3, [r7, #31]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d148      	bne.n	800ab3a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	005b      	lsls	r3, r3, #1
 800aab2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aab6:	4413      	add	r3, r2
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	b292      	uxth	r2, r2
 800aabc:	4611      	mov	r1, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7ff fb7f 	bl	800a1c2 <st_word>
			fs->wflag = 1;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2201      	movs	r2, #1
 800aac8:	70da      	strb	r2, [r3, #3]
			break;
 800aaca:	e039      	b.n	800ab40 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6a1a      	ldr	r2, [r3, #32]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	09db      	lsrs	r3, r3, #7
 800aad4:	4413      	add	r3, r2
 800aad6:	4619      	mov	r1, r3
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f7ff fde7 	bl	800a6ac <move_window>
 800aade:	4603      	mov	r3, r0
 800aae0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aae2:	7ffb      	ldrb	r3, [r7, #31]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d12a      	bne.n	800ab3e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aafc:	4413      	add	r3, r2
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fb3c 	bl	800a17c <ld_dword>
 800ab04:	4603      	mov	r3, r0
 800ab06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ab0a:	4323      	orrs	r3, r4
 800ab0c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ab1c:	4413      	add	r3, r2
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff fb69 	bl	800a1f8 <st_dword>
			fs->wflag = 1;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	70da      	strb	r2, [r3, #3]
			break;
 800ab2c:	e008      	b.n	800ab40 <put_fat+0x1ce>
		}
	}
 800ab2e:	bf00      	nop
 800ab30:	e006      	b.n	800ab40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab32:	bf00      	nop
 800ab34:	e004      	b.n	800ab40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab36:	bf00      	nop
 800ab38:	e002      	b.n	800ab40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab3a:	bf00      	nop
 800ab3c:	e000      	b.n	800ab40 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800ab3e:	bf00      	nop
	return res;
 800ab40:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3724      	adds	r7, #36	; 0x24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd90      	pop	{r4, r7, pc}

0800ab4a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b088      	sub	sp, #32
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	60f8      	str	r0, [r7, #12]
 800ab52:	60b9      	str	r1, [r7, #8]
 800ab54:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d904      	bls.n	800ab70 <remove_chain+0x26>
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	695b      	ldr	r3, [r3, #20]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d301      	bcc.n	800ab74 <remove_chain+0x2a>
 800ab70:	2302      	movs	r3, #2
 800ab72:	e04b      	b.n	800ac0c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00c      	beq.n	800ab94 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ab7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	69b8      	ldr	r0, [r7, #24]
 800ab82:	f7ff fef6 	bl	800a972 <put_fat>
 800ab86:	4603      	mov	r3, r0
 800ab88:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ab8a:	7ffb      	ldrb	r3, [r7, #31]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <remove_chain+0x4a>
 800ab90:	7ffb      	ldrb	r3, [r7, #31]
 800ab92:	e03b      	b.n	800ac0c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ab94:	68b9      	ldr	r1, [r7, #8]
 800ab96:	68f8      	ldr	r0, [r7, #12]
 800ab98:	f7ff fe43 	bl	800a822 <get_fat>
 800ab9c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d031      	beq.n	800ac08 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d101      	bne.n	800abae <remove_chain+0x64>
 800abaa:	2302      	movs	r3, #2
 800abac:	e02e      	b.n	800ac0c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb4:	d101      	bne.n	800abba <remove_chain+0x70>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e028      	b.n	800ac0c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800abba:	2200      	movs	r2, #0
 800abbc:	68b9      	ldr	r1, [r7, #8]
 800abbe:	69b8      	ldr	r0, [r7, #24]
 800abc0:	f7ff fed7 	bl	800a972 <put_fat>
 800abc4:	4603      	mov	r3, r0
 800abc6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800abc8:	7ffb      	ldrb	r3, [r7, #31]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <remove_chain+0x88>
 800abce:	7ffb      	ldrb	r3, [r7, #31]
 800abd0:	e01c      	b.n	800ac0c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	691a      	ldr	r2, [r3, #16]
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	3b02      	subs	r3, #2
 800abdc:	429a      	cmp	r2, r3
 800abde:	d20b      	bcs.n	800abf8 <remove_chain+0xae>
			fs->free_clst++;
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	791b      	ldrb	r3, [r3, #4]
 800abee:	f043 0301 	orr.w	r3, r3, #1
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d3c6      	bcc.n	800ab94 <remove_chain+0x4a>
 800ac06:	e000      	b.n	800ac0a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ac08:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3720      	adds	r7, #32
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10d      	bne.n	800ac46 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d004      	beq.n	800ac40 <create_chain+0x2c>
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d31b      	bcc.n	800ac78 <create_chain+0x64>
 800ac40:	2301      	movs	r3, #1
 800ac42:	61bb      	str	r3, [r7, #24]
 800ac44:	e018      	b.n	800ac78 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff fdea 	bl	800a822 <get_fat>
 800ac4e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d801      	bhi.n	800ac5a <create_chain+0x46>
 800ac56:	2301      	movs	r3, #1
 800ac58:	e070      	b.n	800ad3c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac60:	d101      	bne.n	800ac66 <create_chain+0x52>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	e06a      	b.n	800ad3c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d201      	bcs.n	800ac74 <create_chain+0x60>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	e063      	b.n	800ad3c <create_chain+0x128>
		scl = clst;
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	695b      	ldr	r3, [r3, #20]
 800ac86:	69fa      	ldr	r2, [r7, #28]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d307      	bcc.n	800ac9c <create_chain+0x88>
				ncl = 2;
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ac90:	69fa      	ldr	r2, [r7, #28]
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d901      	bls.n	800ac9c <create_chain+0x88>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	e04f      	b.n	800ad3c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ac9c:	69f9      	ldr	r1, [r7, #28]
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f7ff fdbf 	bl	800a822 <get_fat>
 800aca4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d00e      	beq.n	800acca <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d003      	beq.n	800acba <create_chain+0xa6>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb8:	d101      	bne.n	800acbe <create_chain+0xaa>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	e03e      	b.n	800ad3c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800acbe:	69fa      	ldr	r2, [r7, #28]
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d1da      	bne.n	800ac7c <create_chain+0x68>
 800acc6:	2300      	movs	r3, #0
 800acc8:	e038      	b.n	800ad3c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800acca:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800accc:	f04f 32ff 	mov.w	r2, #4294967295
 800acd0:	69f9      	ldr	r1, [r7, #28]
 800acd2:	6938      	ldr	r0, [r7, #16]
 800acd4:	f7ff fe4d 	bl	800a972 <put_fat>
 800acd8:	4603      	mov	r3, r0
 800acda:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800acdc:	7dfb      	ldrb	r3, [r7, #23]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d109      	bne.n	800acf6 <create_chain+0xe2>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d006      	beq.n	800acf6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ace8:	69fa      	ldr	r2, [r7, #28]
 800acea:	6839      	ldr	r1, [r7, #0]
 800acec:	6938      	ldr	r0, [r7, #16]
 800acee:	f7ff fe40 	bl	800a972 <put_fat>
 800acf2:	4603      	mov	r3, r0
 800acf4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d116      	bne.n	800ad2a <create_chain+0x116>
		fs->last_clst = ncl;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	69fa      	ldr	r2, [r7, #28]
 800ad00:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	691a      	ldr	r2, [r3, #16]
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	3b02      	subs	r3, #2
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d804      	bhi.n	800ad1a <create_chain+0x106>
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	1e5a      	subs	r2, r3, #1
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	791b      	ldrb	r3, [r3, #4]
 800ad1e:	f043 0301 	orr.w	r3, r3, #1
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	711a      	strb	r2, [r3, #4]
 800ad28:	e007      	b.n	800ad3a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ad2a:	7dfb      	ldrb	r3, [r7, #23]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d102      	bne.n	800ad36 <create_chain+0x122>
 800ad30:	f04f 33ff 	mov.w	r3, #4294967295
 800ad34:	e000      	b.n	800ad38 <create_chain+0x124>
 800ad36:	2301      	movs	r3, #1
 800ad38:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ad3a:	69fb      	ldr	r3, [r7, #28]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3720      	adds	r7, #32
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad58:	3304      	adds	r3, #4
 800ad5a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	0a5b      	lsrs	r3, r3, #9
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	8952      	ldrh	r2, [r2, #10]
 800ad64:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad68:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	1d1a      	adds	r2, r3, #4
 800ad6e:	613a      	str	r2, [r7, #16]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d101      	bne.n	800ad7e <clmt_clust+0x3a>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	e010      	b.n	800ada0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ad7e:	697a      	ldr	r2, [r7, #20]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d307      	bcc.n	800ad96 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	617b      	str	r3, [r7, #20]
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	3304      	adds	r3, #4
 800ad92:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ad94:	e7e9      	b.n	800ad6a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ad96:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ad98:	693b      	ldr	r3, [r7, #16]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	4413      	add	r3, r2
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	371c      	adds	r7, #28
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr

0800adac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800adc2:	d204      	bcs.n	800adce <dir_sdi+0x22>
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	f003 031f 	and.w	r3, r3, #31
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800adce:	2302      	movs	r3, #2
 800add0:	e063      	b.n	800ae9a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	683a      	ldr	r2, [r7, #0]
 800add6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d106      	bne.n	800adf2 <dir_sdi+0x46>
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d902      	bls.n	800adf2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d10c      	bne.n	800ae12 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	095b      	lsrs	r3, r3, #5
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	8912      	ldrh	r2, [r2, #8]
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d301      	bcc.n	800ae08 <dir_sdi+0x5c>
 800ae04:	2302      	movs	r3, #2
 800ae06:	e048      	b.n	800ae9a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	61da      	str	r2, [r3, #28]
 800ae10:	e029      	b.n	800ae66 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	895b      	ldrh	r3, [r3, #10]
 800ae16:	025b      	lsls	r3, r3, #9
 800ae18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae1a:	e019      	b.n	800ae50 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6979      	ldr	r1, [r7, #20]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fcfe 	bl	800a822 <get_fat>
 800ae26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2e:	d101      	bne.n	800ae34 <dir_sdi+0x88>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e032      	b.n	800ae9a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d904      	bls.n	800ae44 <dir_sdi+0x98>
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	695b      	ldr	r3, [r3, #20]
 800ae3e:	697a      	ldr	r2, [r7, #20]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d301      	bcc.n	800ae48 <dir_sdi+0x9c>
 800ae44:	2302      	movs	r3, #2
 800ae46:	e028      	b.n	800ae9a <dir_sdi+0xee>
			ofs -= csz;
 800ae48:	683a      	ldr	r2, [r7, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	1ad3      	subs	r3, r2, r3
 800ae4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ae50:	683a      	ldr	r2, [r7, #0]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d2e1      	bcs.n	800ae1c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ae58:	6979      	ldr	r1, [r7, #20]
 800ae5a:	6938      	ldr	r0, [r7, #16]
 800ae5c:	f7ff fcc2 	bl	800a7e4 <clust2sect>
 800ae60:	4602      	mov	r2, r0
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	69db      	ldr	r3, [r3, #28]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d101      	bne.n	800ae78 <dir_sdi+0xcc>
 800ae74:	2302      	movs	r3, #2
 800ae76:	e010      	b.n	800ae9a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	69da      	ldr	r2, [r3, #28]
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	0a5b      	lsrs	r3, r3, #9
 800ae80:	441a      	add	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae92:	441a      	add	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3718      	adds	r7, #24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b086      	sub	sp, #24
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
 800aeaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	3320      	adds	r3, #32
 800aeb8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <dir_next+0x28>
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aec8:	d301      	bcc.n	800aece <dir_next+0x2c>
 800aeca:	2304      	movs	r3, #4
 800aecc:	e0aa      	b.n	800b024 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f040 8098 	bne.w	800b00a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	1c5a      	adds	r2, r3, #1
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	699b      	ldr	r3, [r3, #24]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10b      	bne.n	800af04 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	095b      	lsrs	r3, r3, #5
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	8912      	ldrh	r2, [r2, #8]
 800aef4:	4293      	cmp	r3, r2
 800aef6:	f0c0 8088 	bcc.w	800b00a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	61da      	str	r2, [r3, #28]
 800af00:	2304      	movs	r3, #4
 800af02:	e08f      	b.n	800b024 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	0a5b      	lsrs	r3, r3, #9
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	8952      	ldrh	r2, [r2, #10]
 800af0c:	3a01      	subs	r2, #1
 800af0e:	4013      	ands	r3, r2
 800af10:	2b00      	cmp	r3, #0
 800af12:	d17a      	bne.n	800b00a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	4619      	mov	r1, r3
 800af1c:	4610      	mov	r0, r2
 800af1e:	f7ff fc80 	bl	800a822 <get_fat>
 800af22:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d801      	bhi.n	800af2e <dir_next+0x8c>
 800af2a:	2302      	movs	r3, #2
 800af2c:	e07a      	b.n	800b024 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af34:	d101      	bne.n	800af3a <dir_next+0x98>
 800af36:	2301      	movs	r3, #1
 800af38:	e074      	b.n	800b024 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	697a      	ldr	r2, [r7, #20]
 800af40:	429a      	cmp	r2, r3
 800af42:	d358      	bcc.n	800aff6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d104      	bne.n	800af54 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	61da      	str	r2, [r3, #28]
 800af50:	2304      	movs	r3, #4
 800af52:	e067      	b.n	800b024 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	4619      	mov	r1, r3
 800af5c:	4610      	mov	r0, r2
 800af5e:	f7ff fe59 	bl	800ac14 <create_chain>
 800af62:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d101      	bne.n	800af6e <dir_next+0xcc>
 800af6a:	2307      	movs	r3, #7
 800af6c:	e05a      	b.n	800b024 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2b01      	cmp	r3, #1
 800af72:	d101      	bne.n	800af78 <dir_next+0xd6>
 800af74:	2302      	movs	r3, #2
 800af76:	e055      	b.n	800b024 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af7e:	d101      	bne.n	800af84 <dir_next+0xe2>
 800af80:	2301      	movs	r3, #1
 800af82:	e04f      	b.n	800b024 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7ff fb4d 	bl	800a624 <sync_window>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <dir_next+0xf2>
 800af90:	2301      	movs	r3, #1
 800af92:	e047      	b.n	800b024 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3330      	adds	r3, #48	; 0x30
 800af98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af9c:	2100      	movs	r1, #0
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff f977 	bl	800a292 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afa4:	2300      	movs	r3, #0
 800afa6:	613b      	str	r3, [r7, #16]
 800afa8:	6979      	ldr	r1, [r7, #20]
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7ff fc1a 	bl	800a7e4 <clust2sect>
 800afb0:	4602      	mov	r2, r0
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	62da      	str	r2, [r3, #44]	; 0x2c
 800afb6:	e012      	b.n	800afde <dir_next+0x13c>
						fs->wflag = 1;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	2201      	movs	r2, #1
 800afbc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800afbe:	68f8      	ldr	r0, [r7, #12]
 800afc0:	f7ff fb30 	bl	800a624 <sync_window>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <dir_next+0x12c>
 800afca:	2301      	movs	r3, #1
 800afcc:	e02a      	b.n	800b024 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3301      	adds	r3, #1
 800afd2:	613b      	str	r3, [r7, #16]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd8:	1c5a      	adds	r2, r3, #1
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	62da      	str	r2, [r3, #44]	; 0x2c
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	895b      	ldrh	r3, [r3, #10]
 800afe2:	461a      	mov	r2, r3
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d3e6      	bcc.n	800afb8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	1ad2      	subs	r2, r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800affc:	6979      	ldr	r1, [r7, #20]
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7ff fbf0 	bl	800a7e4 <clust2sect>
 800b004:	4602      	mov	r2, r0
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01c:	441a      	add	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	3718      	adds	r7, #24
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b086      	sub	sp, #24
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b03c:	2100      	movs	r1, #0
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f7ff feb4 	bl	800adac <dir_sdi>
 800b044:	4603      	mov	r3, r0
 800b046:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b048:	7dfb      	ldrb	r3, [r7, #23]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d12b      	bne.n	800b0a6 <dir_alloc+0x7a>
		n = 0;
 800b04e:	2300      	movs	r3, #0
 800b050:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	69db      	ldr	r3, [r3, #28]
 800b056:	4619      	mov	r1, r3
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7ff fb27 	bl	800a6ac <move_window>
 800b05e:	4603      	mov	r3, r0
 800b060:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b062:	7dfb      	ldrb	r3, [r7, #23]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d11d      	bne.n	800b0a4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a1b      	ldr	r3, [r3, #32]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	2be5      	cmp	r3, #229	; 0xe5
 800b070:	d004      	beq.n	800b07c <dir_alloc+0x50>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d107      	bne.n	800b08c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	3301      	adds	r3, #1
 800b080:	613b      	str	r3, [r7, #16]
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d102      	bne.n	800b090 <dir_alloc+0x64>
 800b08a:	e00c      	b.n	800b0a6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b08c:	2300      	movs	r3, #0
 800b08e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b090:	2101      	movs	r1, #1
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7ff ff05 	bl	800aea2 <dir_next>
 800b098:	4603      	mov	r3, r0
 800b09a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d0d7      	beq.n	800b052 <dir_alloc+0x26>
 800b0a2:	e000      	b.n	800b0a6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b0a4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b0a6:	7dfb      	ldrb	r3, [r7, #23]
 800b0a8:	2b04      	cmp	r3, #4
 800b0aa:	d101      	bne.n	800b0b0 <dir_alloc+0x84>
 800b0ac:	2307      	movs	r3, #7
 800b0ae:	75fb      	strb	r3, [r7, #23]
	return res;
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}

0800b0ba <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b0ba:	b580      	push	{r7, lr}
 800b0bc:	b084      	sub	sp, #16
 800b0be:	af00      	add	r7, sp, #0
 800b0c0:	6078      	str	r0, [r7, #4]
 800b0c2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	331a      	adds	r3, #26
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff f83f 	bl	800a14c <ld_word>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d109      	bne.n	800b0ee <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	3314      	adds	r3, #20
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7ff f834 	bl	800a14c <ld_word>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	041b      	lsls	r3, r3, #16
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	331a      	adds	r3, #26
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	b292      	uxth	r2, r2
 800b10c:	4611      	mov	r1, r2
 800b10e:	4618      	mov	r0, r3
 800b110:	f7ff f857 	bl	800a1c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d109      	bne.n	800b130 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f103 0214 	add.w	r2, r3, #20
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	0c1b      	lsrs	r3, r3, #16
 800b126:	b29b      	uxth	r3, r3
 800b128:	4619      	mov	r1, r3
 800b12a:	4610      	mov	r0, r2
 800b12c:	f7ff f849 	bl	800a1c2 <st_word>
	}
}
 800b130:	bf00      	nop
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b142:	2304      	movs	r3, #4
 800b144:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b14c:	e03c      	b.n	800b1c8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	69db      	ldr	r3, [r3, #28]
 800b152:	4619      	mov	r1, r3
 800b154:	6938      	ldr	r0, [r7, #16]
 800b156:	f7ff faa9 	bl	800a6ac <move_window>
 800b15a:	4603      	mov	r3, r0
 800b15c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d136      	bne.n	800b1d2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d102      	bne.n	800b178 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b172:	2304      	movs	r3, #4
 800b174:	75fb      	strb	r3, [r7, #23]
 800b176:	e031      	b.n	800b1dc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a1b      	ldr	r3, [r3, #32]
 800b17c:	330b      	adds	r3, #11
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b184:	73bb      	strb	r3, [r7, #14]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	7bba      	ldrb	r2, [r7, #14]
 800b18a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
 800b18e:	2be5      	cmp	r3, #229	; 0xe5
 800b190:	d011      	beq.n	800b1b6 <dir_read+0x7e>
 800b192:	7bfb      	ldrb	r3, [r7, #15]
 800b194:	2b2e      	cmp	r3, #46	; 0x2e
 800b196:	d00e      	beq.n	800b1b6 <dir_read+0x7e>
 800b198:	7bbb      	ldrb	r3, [r7, #14]
 800b19a:	2b0f      	cmp	r3, #15
 800b19c:	d00b      	beq.n	800b1b6 <dir_read+0x7e>
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
 800b1a0:	f023 0320 	bic.w	r3, r3, #32
 800b1a4:	2b08      	cmp	r3, #8
 800b1a6:	bf0c      	ite	eq
 800b1a8:	2301      	moveq	r3, #1
 800b1aa:	2300      	movne	r3, #0
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d00f      	beq.n	800b1d6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b1b6:	2100      	movs	r1, #0
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f7ff fe72 	bl	800aea2 <dir_next>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d108      	bne.n	800b1da <dir_read+0xa2>
	while (dp->sect) {
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1be      	bne.n	800b14e <dir_read+0x16>
 800b1d0:	e004      	b.n	800b1dc <dir_read+0xa4>
		if (res != FR_OK) break;
 800b1d2:	bf00      	nop
 800b1d4:	e002      	b.n	800b1dc <dir_read+0xa4>
				break;
 800b1d6:	bf00      	nop
 800b1d8:	e000      	b.n	800b1dc <dir_read+0xa4>
		if (res != FR_OK) break;
 800b1da:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d002      	beq.n	800b1e8 <dir_read+0xb0>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	61da      	str	r2, [r3, #28]
	return res;
 800b1e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b086      	sub	sp, #24
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b200:	2100      	movs	r1, #0
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f7ff fdd2 	bl	800adac <dir_sdi>
 800b208:	4603      	mov	r3, r0
 800b20a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b20c:	7dfb      	ldrb	r3, [r7, #23]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d001      	beq.n	800b216 <dir_find+0x24>
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	e03e      	b.n	800b294 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	4619      	mov	r1, r3
 800b21c:	6938      	ldr	r0, [r7, #16]
 800b21e:	f7ff fa45 	bl	800a6ac <move_window>
 800b222:	4603      	mov	r3, r0
 800b224:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b226:	7dfb      	ldrb	r3, [r7, #23]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d12f      	bne.n	800b28c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a1b      	ldr	r3, [r3, #32]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b234:	7bfb      	ldrb	r3, [r7, #15]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d102      	bne.n	800b240 <dir_find+0x4e>
 800b23a:	2304      	movs	r3, #4
 800b23c:	75fb      	strb	r3, [r7, #23]
 800b23e:	e028      	b.n	800b292 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6a1b      	ldr	r3, [r3, #32]
 800b244:	330b      	adds	r3, #11
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6a1b      	ldr	r3, [r3, #32]
 800b256:	330b      	adds	r3, #11
 800b258:	781b      	ldrb	r3, [r3, #0]
 800b25a:	f003 0308 	and.w	r3, r3, #8
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10a      	bne.n	800b278 <dir_find+0x86>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a18      	ldr	r0, [r3, #32]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3324      	adds	r3, #36	; 0x24
 800b26a:	220b      	movs	r2, #11
 800b26c:	4619      	mov	r1, r3
 800b26e:	f7ff f82b 	bl	800a2c8 <mem_cmp>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d00b      	beq.n	800b290 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b278:	2100      	movs	r1, #0
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff fe11 	bl	800aea2 <dir_next>
 800b280:	4603      	mov	r3, r0
 800b282:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b284:	7dfb      	ldrb	r3, [r7, #23]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d0c5      	beq.n	800b216 <dir_find+0x24>
 800b28a:	e002      	b.n	800b292 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b28c:	bf00      	nop
 800b28e:	e000      	b.n	800b292 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b290:	bf00      	nop

	return res;
 800b292:	7dfb      	ldrb	r3, [r7, #23]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3718      	adds	r7, #24
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b2aa:	2101      	movs	r1, #1
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f7ff febd 	bl	800b02c <dir_alloc>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d11c      	bne.n	800b2f6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	69db      	ldr	r3, [r3, #28]
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	68b8      	ldr	r0, [r7, #8]
 800b2c4:	f7ff f9f2 	bl	800a6ac <move_window>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d111      	bne.n	800b2f6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	2100      	movs	r1, #0
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7fe ffd9 	bl	800a292 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a18      	ldr	r0, [r3, #32]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3324      	adds	r3, #36	; 0x24
 800b2e8:	220b      	movs	r2, #11
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	f7fe ffb0 	bl	800a250 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	2200      	movs	r2, #0
 800b30e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	69db      	ldr	r3, [r3, #28]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d04e      	beq.n	800b3b6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b318:	2300      	movs	r3, #0
 800b31a:	613b      	str	r3, [r7, #16]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b320:	e021      	b.n	800b366 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1a      	ldr	r2, [r3, #32]
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	1c59      	adds	r1, r3, #1
 800b32a:	6179      	str	r1, [r7, #20]
 800b32c:	4413      	add	r3, r2
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b332:	7bfb      	ldrb	r3, [r7, #15]
 800b334:	2b20      	cmp	r3, #32
 800b336:	d100      	bne.n	800b33a <get_fileinfo+0x3a>
 800b338:	e015      	b.n	800b366 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b33a:	7bfb      	ldrb	r3, [r7, #15]
 800b33c:	2b05      	cmp	r3, #5
 800b33e:	d101      	bne.n	800b344 <get_fileinfo+0x44>
 800b340:	23e5      	movs	r3, #229	; 0xe5
 800b342:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	2b09      	cmp	r3, #9
 800b348:	d106      	bne.n	800b358 <get_fileinfo+0x58>
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	1c5a      	adds	r2, r3, #1
 800b34e:	613a      	str	r2, [r7, #16]
 800b350:	683a      	ldr	r2, [r7, #0]
 800b352:	4413      	add	r3, r2
 800b354:	222e      	movs	r2, #46	; 0x2e
 800b356:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	613a      	str	r2, [r7, #16]
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	4413      	add	r3, r2
 800b362:	7bfa      	ldrb	r2, [r7, #15]
 800b364:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	2b0a      	cmp	r3, #10
 800b36a:	d9da      	bls.n	800b322 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	4413      	add	r3, r2
 800b372:	3309      	adds	r3, #9
 800b374:	2200      	movs	r2, #0
 800b376:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a1b      	ldr	r3, [r3, #32]
 800b37c:	7ada      	ldrb	r2, [r3, #11]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	331c      	adds	r3, #28
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe fef7 	bl	800a17c <ld_dword>
 800b38e:	4602      	mov	r2, r0
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6a1b      	ldr	r3, [r3, #32]
 800b398:	3316      	adds	r3, #22
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fe feee 	bl	800a17c <ld_dword>
 800b3a0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	80da      	strh	r2, [r3, #6]
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	0c1b      	lsrs	r3, r3, #16
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	809a      	strh	r2, [r3, #4]
 800b3b4:	e000      	b.n	800b3b8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b3b6:	bf00      	nop
}
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
	...

0800b3c0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b088      	sub	sp, #32
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	3324      	adds	r3, #36	; 0x24
 800b3d4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b3d6:	220b      	movs	r2, #11
 800b3d8:	2120      	movs	r1, #32
 800b3da:	68b8      	ldr	r0, [r7, #8]
 800b3dc:	f7fe ff59 	bl	800a292 <mem_set>
	si = i = 0; ni = 8;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	613b      	str	r3, [r7, #16]
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	61fb      	str	r3, [r7, #28]
 800b3e8:	2308      	movs	r3, #8
 800b3ea:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	61fa      	str	r2, [r7, #28]
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b3fa:	7efb      	ldrb	r3, [r7, #27]
 800b3fc:	2b20      	cmp	r3, #32
 800b3fe:	d94e      	bls.n	800b49e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b400:	7efb      	ldrb	r3, [r7, #27]
 800b402:	2b2f      	cmp	r3, #47	; 0x2f
 800b404:	d006      	beq.n	800b414 <create_name+0x54>
 800b406:	7efb      	ldrb	r3, [r7, #27]
 800b408:	2b5c      	cmp	r3, #92	; 0x5c
 800b40a:	d110      	bne.n	800b42e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b40c:	e002      	b.n	800b414 <create_name+0x54>
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	3301      	adds	r3, #1
 800b412:	61fb      	str	r3, [r7, #28]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	4413      	add	r3, r2
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b2f      	cmp	r3, #47	; 0x2f
 800b41e:	d0f6      	beq.n	800b40e <create_name+0x4e>
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	4413      	add	r3, r2
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	2b5c      	cmp	r3, #92	; 0x5c
 800b42a:	d0f0      	beq.n	800b40e <create_name+0x4e>
			break;
 800b42c:	e038      	b.n	800b4a0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b42e:	7efb      	ldrb	r3, [r7, #27]
 800b430:	2b2e      	cmp	r3, #46	; 0x2e
 800b432:	d003      	beq.n	800b43c <create_name+0x7c>
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d30c      	bcc.n	800b456 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b43c:	697b      	ldr	r3, [r7, #20]
 800b43e:	2b0b      	cmp	r3, #11
 800b440:	d002      	beq.n	800b448 <create_name+0x88>
 800b442:	7efb      	ldrb	r3, [r7, #27]
 800b444:	2b2e      	cmp	r3, #46	; 0x2e
 800b446:	d001      	beq.n	800b44c <create_name+0x8c>
 800b448:	2306      	movs	r3, #6
 800b44a:	e044      	b.n	800b4d6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b44c:	2308      	movs	r3, #8
 800b44e:	613b      	str	r3, [r7, #16]
 800b450:	230b      	movs	r3, #11
 800b452:	617b      	str	r3, [r7, #20]
			continue;
 800b454:	e022      	b.n	800b49c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b456:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	da04      	bge.n	800b468 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b45e:	7efb      	ldrb	r3, [r7, #27]
 800b460:	3b80      	subs	r3, #128	; 0x80
 800b462:	4a1f      	ldr	r2, [pc, #124]	; (800b4e0 <create_name+0x120>)
 800b464:	5cd3      	ldrb	r3, [r2, r3]
 800b466:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b468:	7efb      	ldrb	r3, [r7, #27]
 800b46a:	4619      	mov	r1, r3
 800b46c:	481d      	ldr	r0, [pc, #116]	; (800b4e4 <create_name+0x124>)
 800b46e:	f7fe ff52 	bl	800a316 <chk_chr>
 800b472:	4603      	mov	r3, r0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d001      	beq.n	800b47c <create_name+0xbc>
 800b478:	2306      	movs	r3, #6
 800b47a:	e02c      	b.n	800b4d6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b47c:	7efb      	ldrb	r3, [r7, #27]
 800b47e:	2b60      	cmp	r3, #96	; 0x60
 800b480:	d905      	bls.n	800b48e <create_name+0xce>
 800b482:	7efb      	ldrb	r3, [r7, #27]
 800b484:	2b7a      	cmp	r3, #122	; 0x7a
 800b486:	d802      	bhi.n	800b48e <create_name+0xce>
 800b488:	7efb      	ldrb	r3, [r7, #27]
 800b48a:	3b20      	subs	r3, #32
 800b48c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	1c5a      	adds	r2, r3, #1
 800b492:	613a      	str	r2, [r7, #16]
 800b494:	68ba      	ldr	r2, [r7, #8]
 800b496:	4413      	add	r3, r2
 800b498:	7efa      	ldrb	r2, [r7, #27]
 800b49a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b49c:	e7a6      	b.n	800b3ec <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b49e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <create_name+0xf4>
 800b4b0:	2306      	movs	r3, #6
 800b4b2:	e010      	b.n	800b4d6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2be5      	cmp	r3, #229	; 0xe5
 800b4ba:	d102      	bne.n	800b4c2 <create_name+0x102>
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2205      	movs	r2, #5
 800b4c0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b4c2:	7efb      	ldrb	r3, [r7, #27]
 800b4c4:	2b20      	cmp	r3, #32
 800b4c6:	d801      	bhi.n	800b4cc <create_name+0x10c>
 800b4c8:	2204      	movs	r2, #4
 800b4ca:	e000      	b.n	800b4ce <create_name+0x10e>
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	330b      	adds	r3, #11
 800b4d2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b4d4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3720      	adds	r7, #32
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	08011f94 	.word	0x08011f94
 800b4e4:	08011ee8 	.word	0x08011ee8

0800b4e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b4fc:	e002      	b.n	800b504 <follow_path+0x1c>
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	3301      	adds	r3, #1
 800b502:	603b      	str	r3, [r7, #0]
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	2b2f      	cmp	r3, #47	; 0x2f
 800b50a:	d0f8      	beq.n	800b4fe <follow_path+0x16>
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	2b5c      	cmp	r3, #92	; 0x5c
 800b512:	d0f4      	beq.n	800b4fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	2200      	movs	r2, #0
 800b518:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b1f      	cmp	r3, #31
 800b520:	d80a      	bhi.n	800b538 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2280      	movs	r2, #128	; 0x80
 800b526:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b52a:	2100      	movs	r1, #0
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff fc3d 	bl	800adac <dir_sdi>
 800b532:	4603      	mov	r3, r0
 800b534:	75fb      	strb	r3, [r7, #23]
 800b536:	e043      	b.n	800b5c0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b538:	463b      	mov	r3, r7
 800b53a:	4619      	mov	r1, r3
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff ff3f 	bl	800b3c0 <create_name>
 800b542:	4603      	mov	r3, r0
 800b544:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b546:	7dfb      	ldrb	r3, [r7, #23]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d134      	bne.n	800b5b6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff fe50 	bl	800b1f2 <dir_find>
 800b552:	4603      	mov	r3, r0
 800b554:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b55c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b55e:	7dfb      	ldrb	r3, [r7, #23]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00a      	beq.n	800b57a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b564:	7dfb      	ldrb	r3, [r7, #23]
 800b566:	2b04      	cmp	r3, #4
 800b568:	d127      	bne.n	800b5ba <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b56a:	7afb      	ldrb	r3, [r7, #11]
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b00      	cmp	r3, #0
 800b572:	d122      	bne.n	800b5ba <follow_path+0xd2>
 800b574:	2305      	movs	r3, #5
 800b576:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b578:	e01f      	b.n	800b5ba <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b57a:	7afb      	ldrb	r3, [r7, #11]
 800b57c:	f003 0304 	and.w	r3, r3, #4
 800b580:	2b00      	cmp	r3, #0
 800b582:	d11c      	bne.n	800b5be <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	799b      	ldrb	r3, [r3, #6]
 800b588:	f003 0310 	and.w	r3, r3, #16
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d102      	bne.n	800b596 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b590:	2305      	movs	r3, #5
 800b592:	75fb      	strb	r3, [r7, #23]
 800b594:	e014      	b.n	800b5c0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5a4:	4413      	add	r3, r2
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f7ff fd86 	bl	800b0ba <ld_clust>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5b4:	e7c0      	b.n	800b538 <follow_path+0x50>
			if (res != FR_OK) break;
 800b5b6:	bf00      	nop
 800b5b8:	e002      	b.n	800b5c0 <follow_path+0xd8>
				break;
 800b5ba:	bf00      	nop
 800b5bc:	e000      	b.n	800b5c0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5be:	bf00      	nop
			}
		}
	}

	return res;
 800b5c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3718      	adds	r7, #24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b087      	sub	sp, #28
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d031      	beq.n	800b644 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	617b      	str	r3, [r7, #20]
 800b5e6:	e002      	b.n	800b5ee <get_ldnumber+0x24>
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	3301      	adds	r3, #1
 800b5ec:	617b      	str	r3, [r7, #20]
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d903      	bls.n	800b5fe <get_ldnumber+0x34>
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	2b3a      	cmp	r3, #58	; 0x3a
 800b5fc:	d1f4      	bne.n	800b5e8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b3a      	cmp	r3, #58	; 0x3a
 800b604:	d11c      	bne.n	800b640 <get_ldnumber+0x76>
			tp = *path;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	60fa      	str	r2, [r7, #12]
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	3b30      	subs	r3, #48	; 0x30
 800b616:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	2b09      	cmp	r3, #9
 800b61c:	d80e      	bhi.n	800b63c <get_ldnumber+0x72>
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	429a      	cmp	r2, r3
 800b624:	d10a      	bne.n	800b63c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d107      	bne.n	800b63c <get_ldnumber+0x72>
					vol = (int)i;
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	3301      	adds	r3, #1
 800b634:	617b      	str	r3, [r7, #20]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	697a      	ldr	r2, [r7, #20]
 800b63a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	e002      	b.n	800b646 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b640:	2300      	movs	r3, #0
 800b642:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b644:	693b      	ldr	r3, [r7, #16]
}
 800b646:	4618      	mov	r0, r3
 800b648:	371c      	adds	r7, #28
 800b64a:	46bd      	mov	sp, r7
 800b64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b650:	4770      	bx	lr
	...

0800b654 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	70da      	strb	r2, [r3, #3]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f04f 32ff 	mov.w	r2, #4294967295
 800b66a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b66c:	6839      	ldr	r1, [r7, #0]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff f81c 	bl	800a6ac <move_window>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <check_fs+0x2a>
 800b67a:	2304      	movs	r3, #4
 800b67c:	e038      	b.n	800b6f0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	3330      	adds	r3, #48	; 0x30
 800b682:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b686:	4618      	mov	r0, r3
 800b688:	f7fe fd60 	bl	800a14c <ld_word>
 800b68c:	4603      	mov	r3, r0
 800b68e:	461a      	mov	r2, r3
 800b690:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b694:	429a      	cmp	r2, r3
 800b696:	d001      	beq.n	800b69c <check_fs+0x48>
 800b698:	2303      	movs	r3, #3
 800b69a:	e029      	b.n	800b6f0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6a2:	2be9      	cmp	r3, #233	; 0xe9
 800b6a4:	d009      	beq.n	800b6ba <check_fs+0x66>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6ac:	2beb      	cmp	r3, #235	; 0xeb
 800b6ae:	d11e      	bne.n	800b6ee <check_fs+0x9a>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b6b6:	2b90      	cmp	r3, #144	; 0x90
 800b6b8:	d119      	bne.n	800b6ee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	3330      	adds	r3, #48	; 0x30
 800b6be:	3336      	adds	r3, #54	; 0x36
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7fe fd5b 	bl	800a17c <ld_dword>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6cc:	4a0a      	ldr	r2, [pc, #40]	; (800b6f8 <check_fs+0xa4>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d101      	bne.n	800b6d6 <check_fs+0x82>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e00c      	b.n	800b6f0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	3330      	adds	r3, #48	; 0x30
 800b6da:	3352      	adds	r3, #82	; 0x52
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fe fd4d 	bl	800a17c <ld_dword>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	4a05      	ldr	r2, [pc, #20]	; (800b6fc <check_fs+0xa8>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d101      	bne.n	800b6ee <check_fs+0x9a>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	e000      	b.n	800b6f0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b6ee:	2302      	movs	r3, #2
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	00544146 	.word	0x00544146
 800b6fc:	33544146 	.word	0x33544146

0800b700 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b096      	sub	sp, #88	; 0x58
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	4613      	mov	r3, r2
 800b70c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	2200      	movs	r2, #0
 800b712:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7ff ff58 	bl	800b5ca <get_ldnumber>
 800b71a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b71e:	2b00      	cmp	r3, #0
 800b720:	da01      	bge.n	800b726 <find_volume+0x26>
 800b722:	230b      	movs	r3, #11
 800b724:	e22e      	b.n	800bb84 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b726:	4aa8      	ldr	r2, [pc, #672]	; (800b9c8 <find_volume+0x2c8>)
 800b728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b72a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b72e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	2b00      	cmp	r3, #0
 800b734:	d101      	bne.n	800b73a <find_volume+0x3a>
 800b736:	230c      	movs	r3, #12
 800b738:	e224      	b.n	800bb84 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b73e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b740:	79fb      	ldrb	r3, [r7, #7]
 800b742:	f023 0301 	bic.w	r3, r3, #1
 800b746:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d01a      	beq.n	800b786 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b752:	785b      	ldrb	r3, [r3, #1]
 800b754:	4618      	mov	r0, r3
 800b756:	f7fe fc5b 	bl	800a010 <disk_status>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b760:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b764:	f003 0301 	and.w	r3, r3, #1
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10c      	bne.n	800b786 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b76c:	79fb      	ldrb	r3, [r7, #7]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d007      	beq.n	800b782 <find_volume+0x82>
 800b772:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b776:	f003 0304 	and.w	r3, r3, #4
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b77e:	230a      	movs	r3, #10
 800b780:	e200      	b.n	800bb84 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b782:	2300      	movs	r3, #0
 800b784:	e1fe      	b.n	800bb84 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b788:	2200      	movs	r2, #0
 800b78a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b78e:	b2da      	uxtb	r2, r3
 800b790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b792:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b796:	785b      	ldrb	r3, [r3, #1]
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fe fc53 	bl	800a044 <disk_initialize>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b7a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7a8:	f003 0301 	and.w	r3, r3, #1
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b7b0:	2303      	movs	r3, #3
 800b7b2:	e1e7      	b.n	800bb84 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b7b4:	79fb      	ldrb	r3, [r7, #7]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d007      	beq.n	800b7ca <find_volume+0xca>
 800b7ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7be:	f003 0304 	and.w	r3, r3, #4
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b7c6:	230a      	movs	r3, #10
 800b7c8:	e1dc      	b.n	800bb84 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b7ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b7d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7d2:	f7ff ff3f 	bl	800b654 <check_fs>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b7dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d14b      	bne.n	800b87c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	643b      	str	r3, [r7, #64]	; 0x40
 800b7e8:	e01f      	b.n	800b82a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b7f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7f2:	011b      	lsls	r3, r3, #4
 800b7f4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b7f8:	4413      	add	r3, r2
 800b7fa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fe:	3304      	adds	r3, #4
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d006      	beq.n	800b814 <find_volume+0x114>
 800b806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b808:	3308      	adds	r3, #8
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fe fcb6 	bl	800a17c <ld_dword>
 800b810:	4602      	mov	r2, r0
 800b812:	e000      	b.n	800b816 <find_volume+0x116>
 800b814:	2200      	movs	r2, #0
 800b816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b81e:	440b      	add	r3, r1
 800b820:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b826:	3301      	adds	r3, #1
 800b828:	643b      	str	r3, [r7, #64]	; 0x40
 800b82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d9dc      	bls.n	800b7ea <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b830:	2300      	movs	r3, #0
 800b832:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b836:	2b00      	cmp	r3, #0
 800b838:	d002      	beq.n	800b840 <find_volume+0x140>
 800b83a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83c:	3b01      	subs	r3, #1
 800b83e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b848:	4413      	add	r3, r2
 800b84a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b84e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b852:	2b00      	cmp	r3, #0
 800b854:	d005      	beq.n	800b862 <find_volume+0x162>
 800b856:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b858:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b85a:	f7ff fefb 	bl	800b654 <check_fs>
 800b85e:	4603      	mov	r3, r0
 800b860:	e000      	b.n	800b864 <find_volume+0x164>
 800b862:	2303      	movs	r3, #3
 800b864:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b868:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d905      	bls.n	800b87c <find_volume+0x17c>
 800b870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b872:	3301      	adds	r3, #1
 800b874:	643b      	str	r3, [r7, #64]	; 0x40
 800b876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d9e1      	bls.n	800b840 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b87c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b880:	2b04      	cmp	r3, #4
 800b882:	d101      	bne.n	800b888 <find_volume+0x188>
 800b884:	2301      	movs	r3, #1
 800b886:	e17d      	b.n	800bb84 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d901      	bls.n	800b894 <find_volume+0x194>
 800b890:	230d      	movs	r3, #13
 800b892:	e177      	b.n	800bb84 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	3330      	adds	r3, #48	; 0x30
 800b898:	330b      	adds	r3, #11
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fc56 	bl	800a14c <ld_word>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8a6:	d001      	beq.n	800b8ac <find_volume+0x1ac>
 800b8a8:	230d      	movs	r3, #13
 800b8aa:	e16b      	b.n	800bb84 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	3330      	adds	r3, #48	; 0x30
 800b8b0:	3316      	adds	r3, #22
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fe fc4a 	bl	800a14c <ld_word>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <find_volume+0x1d0>
 800b8c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c4:	3330      	adds	r3, #48	; 0x30
 800b8c6:	3324      	adds	r3, #36	; 0x24
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe fc57 	bl	800a17c <ld_dword>
 800b8ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8d4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	789b      	ldrb	r3, [r3, #2]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d005      	beq.n	800b8f4 <find_volume+0x1f4>
 800b8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ea:	789b      	ldrb	r3, [r3, #2]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d001      	beq.n	800b8f4 <find_volume+0x1f4>
 800b8f0:	230d      	movs	r3, #13
 800b8f2:	e147      	b.n	800bb84 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f6:	789b      	ldrb	r3, [r3, #2]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fc:	fb02 f303 	mul.w	r3, r2, r3
 800b900:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b908:	b29a      	uxth	r2, r3
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b910:	895b      	ldrh	r3, [r3, #10]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d008      	beq.n	800b928 <find_volume+0x228>
 800b916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b918:	895b      	ldrh	r3, [r3, #10]
 800b91a:	461a      	mov	r2, r3
 800b91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91e:	895b      	ldrh	r3, [r3, #10]
 800b920:	3b01      	subs	r3, #1
 800b922:	4013      	ands	r3, r2
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <find_volume+0x22c>
 800b928:	230d      	movs	r3, #13
 800b92a:	e12b      	b.n	800bb84 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	3330      	adds	r3, #48	; 0x30
 800b930:	3311      	adds	r3, #17
 800b932:	4618      	mov	r0, r3
 800b934:	f7fe fc0a 	bl	800a14c <ld_word>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b942:	891b      	ldrh	r3, [r3, #8]
 800b944:	f003 030f 	and.w	r3, r3, #15
 800b948:	b29b      	uxth	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <find_volume+0x252>
 800b94e:	230d      	movs	r3, #13
 800b950:	e118      	b.n	800bb84 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b954:	3330      	adds	r3, #48	; 0x30
 800b956:	3313      	adds	r3, #19
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe fbf7 	bl	800a14c <ld_word>
 800b95e:	4603      	mov	r3, r0
 800b960:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b964:	2b00      	cmp	r3, #0
 800b966:	d106      	bne.n	800b976 <find_volume+0x276>
 800b968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96a:	3330      	adds	r3, #48	; 0x30
 800b96c:	3320      	adds	r3, #32
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe fc04 	bl	800a17c <ld_dword>
 800b974:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b978:	3330      	adds	r3, #48	; 0x30
 800b97a:	330e      	adds	r3, #14
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fe fbe5 	bl	800a14c <ld_word>
 800b982:	4603      	mov	r3, r0
 800b984:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b986:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d101      	bne.n	800b990 <find_volume+0x290>
 800b98c:	230d      	movs	r3, #13
 800b98e:	e0f9      	b.n	800bb84 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b990:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b994:	4413      	add	r3, r2
 800b996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b998:	8912      	ldrh	r2, [r2, #8]
 800b99a:	0912      	lsrs	r2, r2, #4
 800b99c:	b292      	uxth	r2, r2
 800b99e:	4413      	add	r3, r2
 800b9a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b9a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d201      	bcs.n	800b9ae <find_volume+0x2ae>
 800b9aa:	230d      	movs	r3, #13
 800b9ac:	e0ea      	b.n	800bb84 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b9ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	1ad3      	subs	r3, r2, r3
 800b9b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9b6:	8952      	ldrh	r2, [r2, #10]
 800b9b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d103      	bne.n	800b9cc <find_volume+0x2cc>
 800b9c4:	230d      	movs	r3, #13
 800b9c6:	e0dd      	b.n	800bb84 <find_volume+0x484>
 800b9c8:	20000768 	.word	0x20000768
		fmt = FS_FAT32;
 800b9cc:	2303      	movs	r3, #3
 800b9ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d802      	bhi.n	800b9e2 <find_volume+0x2e2>
 800b9dc:	2302      	movs	r3, #2
 800b9de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d802      	bhi.n	800b9f2 <find_volume+0x2f2>
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	1c9a      	adds	r2, r3, #2
 800b9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f8:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9fe:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ba00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba04:	441a      	add	r2, r3
 800ba06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba08:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800ba0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	441a      	add	r2, r3
 800ba10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba12:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800ba14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d11e      	bne.n	800ba5a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ba1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1e:	3330      	adds	r3, #48	; 0x30
 800ba20:	332a      	adds	r3, #42	; 0x2a
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7fe fb92 	bl	800a14c <ld_word>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <find_volume+0x332>
 800ba2e:	230d      	movs	r3, #13
 800ba30:	e0a8      	b.n	800bb84 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ba32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba34:	891b      	ldrh	r3, [r3, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d001      	beq.n	800ba3e <find_volume+0x33e>
 800ba3a:	230d      	movs	r3, #13
 800ba3c:	e0a2      	b.n	800bb84 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ba3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba40:	3330      	adds	r3, #48	; 0x30
 800ba42:	332c      	adds	r3, #44	; 0x2c
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7fe fb99 	bl	800a17c <ld_dword>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ba50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	647b      	str	r3, [r7, #68]	; 0x44
 800ba58:	e01f      	b.n	800ba9a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ba5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5c:	891b      	ldrh	r3, [r3, #8]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <find_volume+0x366>
 800ba62:	230d      	movs	r3, #13
 800ba64:	e08e      	b.n	800bb84 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ba66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba68:	6a1a      	ldr	r2, [r3, #32]
 800ba6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6c:	441a      	add	r2, r3
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba70:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ba72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	d103      	bne.n	800ba82 <find_volume+0x382>
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	695b      	ldr	r3, [r3, #20]
 800ba7e:	005b      	lsls	r3, r3, #1
 800ba80:	e00a      	b.n	800ba98 <find_volume+0x398>
 800ba82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba84:	695a      	ldr	r2, [r3, #20]
 800ba86:	4613      	mov	r3, r2
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	4413      	add	r3, r2
 800ba8c:	085a      	lsrs	r2, r3, #1
 800ba8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba90:	695b      	ldr	r3, [r3, #20]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ba98:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	699a      	ldr	r2, [r3, #24]
 800ba9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baa0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800baa4:	0a5b      	lsrs	r3, r3, #9
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d201      	bcs.n	800baae <find_volume+0x3ae>
 800baaa:	230d      	movs	r3, #13
 800baac:	e06a      	b.n	800bb84 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800baae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab0:	f04f 32ff 	mov.w	r2, #4294967295
 800bab4:	611a      	str	r2, [r3, #16]
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	691a      	ldr	r2, [r3, #16]
 800baba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800babe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac0:	2280      	movs	r2, #128	; 0x80
 800bac2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d149      	bne.n	800bb60 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bacc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bace:	3330      	adds	r3, #48	; 0x30
 800bad0:	3330      	adds	r3, #48	; 0x30
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7fe fb3a 	bl	800a14c <ld_word>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b01      	cmp	r3, #1
 800badc:	d140      	bne.n	800bb60 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bae0:	3301      	adds	r3, #1
 800bae2:	4619      	mov	r1, r3
 800bae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bae6:	f7fe fde1 	bl	800a6ac <move_window>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d137      	bne.n	800bb60 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	2200      	movs	r2, #0
 800baf4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf8:	3330      	adds	r3, #48	; 0x30
 800bafa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bafe:	4618      	mov	r0, r3
 800bb00:	f7fe fb24 	bl	800a14c <ld_word>
 800bb04:	4603      	mov	r3, r0
 800bb06:	461a      	mov	r2, r3
 800bb08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d127      	bne.n	800bb60 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb12:	3330      	adds	r3, #48	; 0x30
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fe fb31 	bl	800a17c <ld_dword>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	4a1b      	ldr	r2, [pc, #108]	; (800bb8c <find_volume+0x48c>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d11e      	bne.n	800bb60 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	3330      	adds	r3, #48	; 0x30
 800bb26:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fe fb26 	bl	800a17c <ld_dword>
 800bb30:	4603      	mov	r3, r0
 800bb32:	4a17      	ldr	r2, [pc, #92]	; (800bb90 <find_volume+0x490>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d113      	bne.n	800bb60 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3a:	3330      	adds	r3, #48	; 0x30
 800bb3c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fe fb1b 	bl	800a17c <ld_dword>
 800bb46:	4602      	mov	r2, r0
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4e:	3330      	adds	r3, #48	; 0x30
 800bb50:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fe fb11 	bl	800a17c <ld_dword>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bb66:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bb68:	4b0a      	ldr	r3, [pc, #40]	; (800bb94 <find_volume+0x494>)
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	b29a      	uxth	r2, r3
 800bb70:	4b08      	ldr	r3, [pc, #32]	; (800bb94 <find_volume+0x494>)
 800bb72:	801a      	strh	r2, [r3, #0]
 800bb74:	4b07      	ldr	r3, [pc, #28]	; (800bb94 <find_volume+0x494>)
 800bb76:	881a      	ldrh	r2, [r3, #0]
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bb7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb7e:	f7fe fd2d 	bl	800a5dc <clear_lock>
#endif
	return FR_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3758      	adds	r7, #88	; 0x58
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}
 800bb8c:	41615252 	.word	0x41615252
 800bb90:	61417272 	.word	0x61417272
 800bb94:	2000076c 	.word	0x2000076c

0800bb98 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bba2:	2309      	movs	r3, #9
 800bba4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d01c      	beq.n	800bbe6 <validate+0x4e>
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d018      	beq.n	800bbe6 <validate+0x4e>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d013      	beq.n	800bbe6 <validate+0x4e>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	889a      	ldrh	r2, [r3, #4]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	88db      	ldrh	r3, [r3, #6]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d10c      	bne.n	800bbe6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	785b      	ldrb	r3, [r3, #1]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fa1c 	bl	800a010 <disk_status>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d101      	bne.n	800bbe6 <validate+0x4e>
			res = FR_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bbe6:	7bfb      	ldrb	r3, [r7, #15]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <validate+0x5a>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	e000      	b.n	800bbf4 <validate+0x5c>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	683a      	ldr	r2, [r7, #0]
 800bbf6:	6013      	str	r3, [r2, #0]
	return res;
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bc16:	f107 0310 	add.w	r3, r7, #16
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7ff fcd5 	bl	800b5ca <get_ldnumber>
 800bc20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	da01      	bge.n	800bc2c <f_mount+0x28>
 800bc28:	230b      	movs	r3, #11
 800bc2a:	e02b      	b.n	800bc84 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bc2c:	4a17      	ldr	r2, [pc, #92]	; (800bc8c <f_mount+0x88>)
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc34:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d005      	beq.n	800bc48 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bc3c:	69b8      	ldr	r0, [r7, #24]
 800bc3e:	f7fe fccd 	bl	800a5dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bc42:	69bb      	ldr	r3, [r7, #24]
 800bc44:	2200      	movs	r2, #0
 800bc46:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d002      	beq.n	800bc54 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	490d      	ldr	r1, [pc, #52]	; (800bc8c <f_mount+0x88>)
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d002      	beq.n	800bc6a <f_mount+0x66>
 800bc64:	79fb      	ldrb	r3, [r7, #7]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d001      	beq.n	800bc6e <f_mount+0x6a>
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e00a      	b.n	800bc84 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bc6e:	f107 010c 	add.w	r1, r7, #12
 800bc72:	f107 0308 	add.w	r3, r7, #8
 800bc76:	2200      	movs	r2, #0
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7ff fd41 	bl	800b700 <find_volume>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bc82:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3720      	adds	r7, #32
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	20000768 	.word	0x20000768

0800bc90 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b098      	sub	sp, #96	; 0x60
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d101      	bne.n	800bca8 <f_open+0x18>
 800bca4:	2309      	movs	r3, #9
 800bca6:	e1ad      	b.n	800c004 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bca8:	79fb      	ldrb	r3, [r7, #7]
 800bcaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcae:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bcb0:	79fa      	ldrb	r2, [r7, #7]
 800bcb2:	f107 0110 	add.w	r1, r7, #16
 800bcb6:	f107 0308 	add.w	r3, r7, #8
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff fd20 	bl	800b700 <find_volume>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800bcc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f040 8191 	bne.w	800bff2 <f_open+0x362>
		dj.obj.fs = fs;
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	f107 0314 	add.w	r3, r7, #20
 800bcda:	4611      	mov	r1, r2
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7ff fc03 	bl	800b4e8 <follow_path>
 800bce2:	4603      	mov	r3, r0
 800bce4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bce8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d11a      	bne.n	800bd26 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bcf0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bcf4:	b25b      	sxtb	r3, r3
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	da03      	bge.n	800bd02 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bcfa:	2306      	movs	r3, #6
 800bcfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd00:	e011      	b.n	800bd26 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bd02:	79fb      	ldrb	r3, [r7, #7]
 800bd04:	f023 0301 	bic.w	r3, r3, #1
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	bf14      	ite	ne
 800bd0c:	2301      	movne	r3, #1
 800bd0e:	2300      	moveq	r3, #0
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	461a      	mov	r2, r3
 800bd14:	f107 0314 	add.w	r3, r7, #20
 800bd18:	4611      	mov	r1, r2
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7fe fb16 	bl	800a34c <chk_lock>
 800bd20:	4603      	mov	r3, r0
 800bd22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	f003 031c 	and.w	r3, r3, #28
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d07f      	beq.n	800be30 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bd30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d017      	beq.n	800bd68 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bd38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd3c:	2b04      	cmp	r3, #4
 800bd3e:	d10e      	bne.n	800bd5e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bd40:	f7fe fb60 	bl	800a404 <enq_lock>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d006      	beq.n	800bd58 <f_open+0xc8>
 800bd4a:	f107 0314 	add.w	r3, r7, #20
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff faa4 	bl	800b29c <dir_register>
 800bd54:	4603      	mov	r3, r0
 800bd56:	e000      	b.n	800bd5a <f_open+0xca>
 800bd58:	2312      	movs	r3, #18
 800bd5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bd5e:	79fb      	ldrb	r3, [r7, #7]
 800bd60:	f043 0308 	orr.w	r3, r3, #8
 800bd64:	71fb      	strb	r3, [r7, #7]
 800bd66:	e010      	b.n	800bd8a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bd68:	7ebb      	ldrb	r3, [r7, #26]
 800bd6a:	f003 0311 	and.w	r3, r3, #17
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d003      	beq.n	800bd7a <f_open+0xea>
					res = FR_DENIED;
 800bd72:	2307      	movs	r3, #7
 800bd74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bd78:	e007      	b.n	800bd8a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bd7a:	79fb      	ldrb	r3, [r7, #7]
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <f_open+0xfa>
 800bd84:	2308      	movs	r3, #8
 800bd86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bd8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d168      	bne.n	800be64 <f_open+0x1d4>
 800bd92:	79fb      	ldrb	r3, [r7, #7]
 800bd94:	f003 0308 	and.w	r3, r3, #8
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d063      	beq.n	800be64 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bd9c:	f7fd fbf8 	bl	8009590 <get_fattime>
 800bda0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda4:	330e      	adds	r3, #14
 800bda6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7fe fa25 	bl	800a1f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bdae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb0:	3316      	adds	r3, #22
 800bdb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fe fa1f 	bl	800a1f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800bdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdbc:	330b      	adds	r3, #11
 800bdbe:	2220      	movs	r2, #32
 800bdc0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bdc2:	693b      	ldr	r3, [r7, #16]
 800bdc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff f976 	bl	800b0ba <ld_clust>
 800bdce:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7ff f98e 	bl	800b0f8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800bddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdde:	331c      	adds	r3, #28
 800bde0:	2100      	movs	r1, #0
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fa08 	bl	800a1f8 <st_dword>
					fs->wflag = 1;
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	2201      	movs	r2, #1
 800bdec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bdee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d037      	beq.n	800be64 <f_open+0x1d4>
						dw = fs->winsect;
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800bdfa:	f107 0314 	add.w	r3, r7, #20
 800bdfe:	2200      	movs	r2, #0
 800be00:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe fea1 	bl	800ab4a <remove_chain>
 800be08:	4603      	mov	r3, r0
 800be0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800be0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be12:	2b00      	cmp	r3, #0
 800be14:	d126      	bne.n	800be64 <f_open+0x1d4>
							res = move_window(fs, dw);
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe fc46 	bl	800a6ac <move_window>
 800be20:	4603      	mov	r3, r0
 800be22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be2a:	3a01      	subs	r2, #1
 800be2c:	60da      	str	r2, [r3, #12]
 800be2e:	e019      	b.n	800be64 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800be30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be34:	2b00      	cmp	r3, #0
 800be36:	d115      	bne.n	800be64 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800be38:	7ebb      	ldrb	r3, [r7, #26]
 800be3a:	f003 0310 	and.w	r3, r3, #16
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <f_open+0x1ba>
					res = FR_NO_FILE;
 800be42:	2304      	movs	r3, #4
 800be44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800be48:	e00c      	b.n	800be64 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800be4a:	79fb      	ldrb	r3, [r7, #7]
 800be4c:	f003 0302 	and.w	r3, r3, #2
 800be50:	2b00      	cmp	r3, #0
 800be52:	d007      	beq.n	800be64 <f_open+0x1d4>
 800be54:	7ebb      	ldrb	r3, [r7, #26]
 800be56:	f003 0301 	and.w	r3, r3, #1
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d002      	beq.n	800be64 <f_open+0x1d4>
						res = FR_DENIED;
 800be5e:	2307      	movs	r3, #7
 800be60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800be64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d128      	bne.n	800bebe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800be6c:	79fb      	ldrb	r3, [r7, #7]
 800be6e:	f003 0308 	and.w	r3, r3, #8
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be7c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800be86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800be8c:	79fb      	ldrb	r3, [r7, #7]
 800be8e:	f023 0301 	bic.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	bf14      	ite	ne
 800be96:	2301      	movne	r3, #1
 800be98:	2300      	moveq	r3, #0
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	461a      	mov	r2, r3
 800be9e:	f107 0314 	add.w	r3, r7, #20
 800bea2:	4611      	mov	r1, r2
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe facf 	bl	800a448 <inc_lock>
 800beaa:	4602      	mov	r2, r0
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d102      	bne.n	800bebe <f_open+0x22e>
 800beb8:	2302      	movs	r3, #2
 800beba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bebe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f040 8095 	bne.w	800bff2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800becc:	4611      	mov	r1, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff f8f3 	bl	800b0ba <ld_clust>
 800bed4:	4602      	mov	r2, r0
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800beda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bedc:	331c      	adds	r3, #28
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fe f94c 	bl	800a17c <ld_dword>
 800bee4:	4602      	mov	r2, r0
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2200      	movs	r2, #0
 800beee:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	88da      	ldrh	r2, [r3, #6]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	79fa      	ldrb	r2, [r7, #7]
 800bf02:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	3330      	adds	r3, #48	; 0x30
 800bf1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf1e:	2100      	movs	r1, #0
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7fe f9b6 	bl	800a292 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bf26:	79fb      	ldrb	r3, [r7, #7]
 800bf28:	f003 0320 	and.w	r3, r3, #32
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d060      	beq.n	800bff2 <f_open+0x362>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d05c      	beq.n	800bff2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	68da      	ldr	r2, [r3, #12]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	895b      	ldrh	r3, [r3, #10]
 800bf44:	025b      	lsls	r3, r3, #9
 800bf46:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	657b      	str	r3, [r7, #84]	; 0x54
 800bf54:	e016      	b.n	800bf84 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe fc61 	bl	800a822 <get_fat>
 800bf60:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bf62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d802      	bhi.n	800bf6e <f_open+0x2de>
 800bf68:	2302      	movs	r3, #2
 800bf6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bf6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf74:	d102      	bne.n	800bf7c <f_open+0x2ec>
 800bf76:	2301      	movs	r3, #1
 800bf78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	657b      	str	r3, [r7, #84]	; 0x54
 800bf84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d103      	bne.n	800bf94 <f_open+0x304>
 800bf8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d8e0      	bhi.n	800bf56 <f_open+0x2c6>
				}
				fp->clust = clst;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bf98:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bf9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d127      	bne.n	800bff2 <f_open+0x362>
 800bfa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d022      	beq.n	800bff2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fe fc17 	bl	800a7e4 <clust2sect>
 800bfb6:	6478      	str	r0, [r7, #68]	; 0x44
 800bfb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d103      	bne.n	800bfc6 <f_open+0x336>
						res = FR_INT_ERR;
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800bfc4:	e015      	b.n	800bff2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bfc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfc8:	0a5a      	lsrs	r2, r3, #9
 800bfca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfcc:	441a      	add	r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	7858      	ldrb	r0, [r3, #1]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6a1a      	ldr	r2, [r3, #32]
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	f7fe f855 	bl	800a090 <disk_read>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d002      	beq.n	800bff2 <f_open+0x362>
 800bfec:	2301      	movs	r3, #1
 800bfee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d002      	beq.n	800c000 <f_open+0x370>
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c004:	4618      	mov	r0, r3
 800c006:	3760      	adds	r7, #96	; 0x60
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08c      	sub	sp, #48	; 0x30
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	607a      	str	r2, [r7, #4]
 800c018:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	2200      	movs	r2, #0
 800c022:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f107 0210 	add.w	r2, r7, #16
 800c02a:	4611      	mov	r1, r2
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7ff fdb3 	bl	800bb98 <validate>
 800c032:	4603      	mov	r3, r0
 800c034:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d107      	bne.n	800c050 <f_write+0x44>
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	7d5b      	ldrb	r3, [r3, #21]
 800c044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c048:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <f_write+0x4a>
 800c050:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c054:	e14b      	b.n	800c2ee <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	7d1b      	ldrb	r3, [r3, #20]
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <f_write+0x5a>
 800c062:	2307      	movs	r3, #7
 800c064:	e143      	b.n	800c2ee <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	699a      	ldr	r2, [r3, #24]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	441a      	add	r2, r3
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	429a      	cmp	r2, r3
 800c074:	f080 812d 	bcs.w	800c2d2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	43db      	mvns	r3, r3
 800c07e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c080:	e127      	b.n	800c2d2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f040 80e3 	bne.w	800c256 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	0a5b      	lsrs	r3, r3, #9
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	8952      	ldrh	r2, [r2, #10]
 800c09a:	3a01      	subs	r2, #1
 800c09c:	4013      	ands	r3, r2
 800c09e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d143      	bne.n	800c12e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10c      	bne.n	800c0c8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d11a      	bne.n	800c0f0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2100      	movs	r1, #0
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fe fda8 	bl	800ac14 <create_chain>
 800c0c4:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0c6:	e013      	b.n	800c0f0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d007      	beq.n	800c0e0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	68f8      	ldr	r0, [r7, #12]
 800c0d8:	f7fe fe34 	bl	800ad44 <clmt_clust>
 800c0dc:	62b8      	str	r0, [r7, #40]	; 0x28
 800c0de:	e007      	b.n	800c0f0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c0e0:	68fa      	ldr	r2, [r7, #12]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	69db      	ldr	r3, [r3, #28]
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	f7fe fd93 	bl	800ac14 <create_chain>
 800c0ee:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f000 80f2 	beq.w	800c2dc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d104      	bne.n	800c108 <f_write+0xfc>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2202      	movs	r2, #2
 800c102:	755a      	strb	r2, [r3, #21]
 800c104:	2302      	movs	r3, #2
 800c106:	e0f2      	b.n	800c2ee <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	d104      	bne.n	800c11a <f_write+0x10e>
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2201      	movs	r2, #1
 800c114:	755a      	strb	r2, [r3, #21]
 800c116:	2301      	movs	r3, #1
 800c118:	e0e9      	b.n	800c2ee <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c11e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d102      	bne.n	800c12e <f_write+0x122>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c12c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	7d1b      	ldrb	r3, [r3, #20]
 800c132:	b25b      	sxtb	r3, r3
 800c134:	2b00      	cmp	r3, #0
 800c136:	da18      	bge.n	800c16a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	7858      	ldrb	r0, [r3, #1]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	6a1a      	ldr	r2, [r3, #32]
 800c146:	2301      	movs	r3, #1
 800c148:	f7fd ffc2 	bl	800a0d0 <disk_write>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d004      	beq.n	800c15c <f_write+0x150>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2201      	movs	r2, #1
 800c156:	755a      	strb	r2, [r3, #21]
 800c158:	2301      	movs	r3, #1
 800c15a:	e0c8      	b.n	800c2ee <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	7d1b      	ldrb	r3, [r3, #20]
 800c160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c164:	b2da      	uxtb	r2, r3
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	69db      	ldr	r3, [r3, #28]
 800c170:	4619      	mov	r1, r3
 800c172:	4610      	mov	r0, r2
 800c174:	f7fe fb36 	bl	800a7e4 <clust2sect>
 800c178:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d104      	bne.n	800c18a <f_write+0x17e>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2202      	movs	r2, #2
 800c184:	755a      	strb	r2, [r3, #21]
 800c186:	2302      	movs	r3, #2
 800c188:	e0b1      	b.n	800c2ee <f_write+0x2e2>
			sect += csect;
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	4413      	add	r3, r2
 800c190:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	0a5b      	lsrs	r3, r3, #9
 800c196:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d03c      	beq.n	800c218 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c19e:	69ba      	ldr	r2, [r7, #24]
 800c1a0:	6a3b      	ldr	r3, [r7, #32]
 800c1a2:	4413      	add	r3, r2
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	8952      	ldrh	r2, [r2, #10]
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d905      	bls.n	800c1b8 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	895b      	ldrh	r3, [r3, #10]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	1ad3      	subs	r3, r2, r3
 800c1b6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	7858      	ldrb	r0, [r3, #1]
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	69f9      	ldr	r1, [r7, #28]
 800c1c2:	f7fd ff85 	bl	800a0d0 <disk_write>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d004      	beq.n	800c1d6 <f_write+0x1ca>
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	755a      	strb	r2, [r3, #21]
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	e08b      	b.n	800c2ee <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6a1a      	ldr	r2, [r3, #32]
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	6a3a      	ldr	r2, [r7, #32]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d915      	bls.n	800c210 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6a1a      	ldr	r2, [r3, #32]
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	1ad3      	subs	r3, r2, r3
 800c1f2:	025b      	lsls	r3, r3, #9
 800c1f4:	69fa      	ldr	r2, [r7, #28]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	f7fe f827 	bl	800a250 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	7d1b      	ldrb	r3, [r3, #20]
 800c206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c210:	6a3b      	ldr	r3, [r7, #32]
 800c212:	025b      	lsls	r3, r3, #9
 800c214:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c216:	e03f      	b.n	800c298 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	6a1b      	ldr	r3, [r3, #32]
 800c21c:	697a      	ldr	r2, [r7, #20]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d016      	beq.n	800c250 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	699a      	ldr	r2, [r3, #24]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d210      	bcs.n	800c250 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	7858      	ldrb	r0, [r3, #1]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c238:	2301      	movs	r3, #1
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	f7fd ff28 	bl	800a090 <disk_read>
 800c240:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c242:	2b00      	cmp	r3, #0
 800c244:	d004      	beq.n	800c250 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2201      	movs	r2, #1
 800c24a:	755a      	strb	r2, [r3, #21]
 800c24c:	2301      	movs	r3, #1
 800c24e:	e04e      	b.n	800c2ee <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c25e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	429a      	cmp	r2, r3
 800c26a:	d901      	bls.n	800c270 <f_write+0x264>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c27e:	4413      	add	r3, r2
 800c280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c282:	69f9      	ldr	r1, [r7, #28]
 800c284:	4618      	mov	r0, r3
 800c286:	f7fd ffe3 	bl	800a250 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	7d1b      	ldrb	r3, [r3, #20]
 800c28e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c292:	b2da      	uxtb	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c298:	69fa      	ldr	r2, [r7, #28]
 800c29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c29c:	4413      	add	r3, r2
 800c29e:	61fb      	str	r3, [r7, #28]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	699a      	ldr	r2, [r3, #24]
 800c2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a6:	441a      	add	r2, r3
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	619a      	str	r2, [r3, #24]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	68da      	ldr	r2, [r3, #12]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	699b      	ldr	r3, [r3, #24]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	bf38      	it	cc
 800c2b8:	461a      	movcc	r2, r3
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	60da      	str	r2, [r3, #12]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c4:	441a      	add	r2, r3
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	601a      	str	r2, [r3, #0]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ce:	1ad3      	subs	r3, r2, r3
 800c2d0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f47f aed4 	bne.w	800c082 <f_write+0x76>
 800c2da:	e000      	b.n	800c2de <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c2dc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	7d1b      	ldrb	r3, [r3, #20]
 800c2e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3730      	adds	r7, #48	; 0x30
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c2f6:	b580      	push	{r7, lr}
 800c2f8:	b086      	sub	sp, #24
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f107 0208 	add.w	r2, r7, #8
 800c304:	4611      	mov	r1, r2
 800c306:	4618      	mov	r0, r3
 800c308:	f7ff fc46 	bl	800bb98 <validate>
 800c30c:	4603      	mov	r3, r0
 800c30e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c310:	7dfb      	ldrb	r3, [r7, #23]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d168      	bne.n	800c3e8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	7d1b      	ldrb	r3, [r3, #20]
 800c31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d062      	beq.n	800c3e8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	7d1b      	ldrb	r3, [r3, #20]
 800c326:	b25b      	sxtb	r3, r3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	da15      	bge.n	800c358 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	7858      	ldrb	r0, [r3, #1]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1a      	ldr	r2, [r3, #32]
 800c33a:	2301      	movs	r3, #1
 800c33c:	f7fd fec8 	bl	800a0d0 <disk_write>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d001      	beq.n	800c34a <f_sync+0x54>
 800c346:	2301      	movs	r3, #1
 800c348:	e04f      	b.n	800c3ea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7d1b      	ldrb	r3, [r3, #20]
 800c34e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c352:	b2da      	uxtb	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c358:	f7fd f91a 	bl	8009590 <get_fattime>
 800c35c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c364:	4619      	mov	r1, r3
 800c366:	4610      	mov	r0, r2
 800c368:	f7fe f9a0 	bl	800a6ac <move_window>
 800c36c:	4603      	mov	r3, r0
 800c36e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c370:	7dfb      	ldrb	r3, [r7, #23]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d138      	bne.n	800c3e8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c37a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	330b      	adds	r3, #11
 800c380:	781a      	ldrb	r2, [r3, #0]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	330b      	adds	r3, #11
 800c386:	f042 0220 	orr.w	r2, r2, #32
 800c38a:	b2d2      	uxtb	r2, r2
 800c38c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6818      	ldr	r0, [r3, #0]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	461a      	mov	r2, r3
 800c398:	68f9      	ldr	r1, [r7, #12]
 800c39a:	f7fe fead 	bl	800b0f8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f103 021c 	add.w	r2, r3, #28
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	4619      	mov	r1, r3
 800c3aa:	4610      	mov	r0, r2
 800c3ac:	f7fd ff24 	bl	800a1f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	3316      	adds	r3, #22
 800c3b4:	6939      	ldr	r1, [r7, #16]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7fd ff1e 	bl	800a1f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3312      	adds	r3, #18
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7fd fefd 	bl	800a1c2 <st_word>
					fs->wflag = 1;
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7fe f999 	bl	800a708 <sync_fs>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	7d1b      	ldrb	r3, [r3, #20]
 800c3de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3e2:	b2da      	uxtb	r2, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}

0800c3f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b084      	sub	sp, #16
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7ff ff7b 	bl	800c2f6 <f_sync>
 800c400:	4603      	mov	r3, r0
 800c402:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c404:	7bfb      	ldrb	r3, [r7, #15]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d118      	bne.n	800c43c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f107 0208 	add.w	r2, r7, #8
 800c410:	4611      	mov	r1, r2
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fbc0 	bl	800bb98 <validate>
 800c418:	4603      	mov	r3, r0
 800c41a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10c      	bne.n	800c43c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	4618      	mov	r0, r3
 800c428:	f7fe f89c 	bl	800a564 <dec_lock>
 800c42c:	4603      	mov	r3, r0
 800c42e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c430:	7bfb      	ldrb	r3, [r7, #15]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d102      	bne.n	800c43c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3710      	adds	r7, #16
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b090      	sub	sp, #64	; 0x40
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f107 0208 	add.w	r2, r7, #8
 800c456:	4611      	mov	r1, r2
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff fb9d 	bl	800bb98 <validate>
 800c45e:	4603      	mov	r3, r0
 800c460:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c464:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d103      	bne.n	800c474 <f_lseek+0x2e>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7d5b      	ldrb	r3, [r3, #21]
 800c470:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c474:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d002      	beq.n	800c482 <f_lseek+0x3c>
 800c47c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c480:	e1e6      	b.n	800c850 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c486:	2b00      	cmp	r3, #0
 800c488:	f000 80d1 	beq.w	800c62e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c492:	d15a      	bne.n	800c54a <f_lseek+0x104>
			tbl = fp->cltbl;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49c:	1d1a      	adds	r2, r3, #4
 800c49e:	627a      	str	r2, [r7, #36]	; 0x24
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	617b      	str	r3, [r7, #20]
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d03a      	beq.n	800c52a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	613b      	str	r3, [r7, #16]
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4be:	3302      	adds	r3, #2
 800c4c0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c4:	60fb      	str	r3, [r7, #12]
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fe f9a6 	bl	800a822 <get_fat>
 800c4d6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d804      	bhi.n	800c4e8 <f_lseek+0xa2>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2202      	movs	r2, #2
 800c4e2:	755a      	strb	r2, [r3, #21]
 800c4e4:	2302      	movs	r3, #2
 800c4e6:	e1b3      	b.n	800c850 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ee:	d104      	bne.n	800c4fa <f_lseek+0xb4>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	755a      	strb	r2, [r3, #21]
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e1aa      	b.n	800c850 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c500:	429a      	cmp	r2, r3
 800c502:	d0de      	beq.n	800c4c2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d809      	bhi.n	800c520 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50e:	1d1a      	adds	r2, r3, #4
 800c510:	627a      	str	r2, [r7, #36]	; 0x24
 800c512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	1d1a      	adds	r2, r3, #4
 800c51a:	627a      	str	r2, [r7, #36]	; 0x24
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c526:	429a      	cmp	r2, r3
 800c528:	d3c4      	bcc.n	800c4b4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c530:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	429a      	cmp	r2, r3
 800c538:	d803      	bhi.n	800c542 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	2200      	movs	r2, #0
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	e184      	b.n	800c84c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c542:	2311      	movs	r3, #17
 800c544:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c548:	e180      	b.n	800c84c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	683a      	ldr	r2, [r7, #0]
 800c550:	429a      	cmp	r2, r3
 800c552:	d902      	bls.n	800c55a <f_lseek+0x114>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	68db      	ldr	r3, [r3, #12]
 800c558:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	f000 8172 	beq.w	800c84c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	4619      	mov	r1, r3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7fe fbe8 	bl	800ad44 <clmt_clust>
 800c574:	4602      	mov	r2, r0
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	69db      	ldr	r3, [r3, #28]
 800c580:	4619      	mov	r1, r3
 800c582:	4610      	mov	r0, r2
 800c584:	f7fe f92e 	bl	800a7e4 <clust2sect>
 800c588:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c58a:	69bb      	ldr	r3, [r7, #24]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d104      	bne.n	800c59a <f_lseek+0x154>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2202      	movs	r2, #2
 800c594:	755a      	strb	r2, [r3, #21]
 800c596:	2302      	movs	r3, #2
 800c598:	e15a      	b.n	800c850 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	3b01      	subs	r3, #1
 800c59e:	0a5b      	lsrs	r3, r3, #9
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	8952      	ldrh	r2, [r2, #10]
 800c5a4:	3a01      	subs	r2, #1
 800c5a6:	4013      	ands	r3, r2
 800c5a8:	69ba      	ldr	r2, [r7, #24]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	699b      	ldr	r3, [r3, #24]
 800c5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	f000 8148 	beq.w	800c84c <f_lseek+0x406>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	69ba      	ldr	r2, [r7, #24]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	f000 8142 	beq.w	800c84c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	7d1b      	ldrb	r3, [r3, #20]
 800c5cc:	b25b      	sxtb	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	da18      	bge.n	800c604 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	7858      	ldrb	r0, [r3, #1]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6a1a      	ldr	r2, [r3, #32]
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	f7fd fd75 	bl	800a0d0 <disk_write>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d004      	beq.n	800c5f6 <f_lseek+0x1b0>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	755a      	strb	r2, [r3, #21]
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	e12c      	b.n	800c850 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	7d1b      	ldrb	r3, [r3, #20]
 800c5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5fe:	b2da      	uxtb	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	7858      	ldrb	r0, [r3, #1]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c60e:	2301      	movs	r3, #1
 800c610:	69ba      	ldr	r2, [r7, #24]
 800c612:	f7fd fd3d 	bl	800a090 <disk_read>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d004      	beq.n	800c626 <f_lseek+0x1e0>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2201      	movs	r2, #1
 800c620:	755a      	strb	r2, [r3, #21]
 800c622:	2301      	movs	r3, #1
 800c624:	e114      	b.n	800c850 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	69ba      	ldr	r2, [r7, #24]
 800c62a:	621a      	str	r2, [r3, #32]
 800c62c:	e10e      	b.n	800c84c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	68db      	ldr	r3, [r3, #12]
 800c632:	683a      	ldr	r2, [r7, #0]
 800c634:	429a      	cmp	r2, r3
 800c636:	d908      	bls.n	800c64a <f_lseek+0x204>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	7d1b      	ldrb	r3, [r3, #20]
 800c63c:	f003 0302 	and.w	r3, r3, #2
 800c640:	2b00      	cmp	r3, #0
 800c642:	d102      	bne.n	800c64a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	699b      	ldr	r3, [r3, #24]
 800c64e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800c650:	2300      	movs	r3, #0
 800c652:	637b      	str	r3, [r7, #52]	; 0x34
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c658:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 80a7 	beq.w	800c7b0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	895b      	ldrh	r3, [r3, #10]
 800c666:	025b      	lsls	r3, r3, #9
 800c668:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800c66a:	6a3b      	ldr	r3, [r7, #32]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d01b      	beq.n	800c6a8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	1e5a      	subs	r2, r3, #1
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	fbb2 f2f3 	udiv	r2, r2, r3
 800c67a:	6a3b      	ldr	r3, [r7, #32]
 800c67c:	1e59      	subs	r1, r3, #1
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800c684:	429a      	cmp	r2, r3
 800c686:	d30f      	bcc.n	800c6a8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	1e5a      	subs	r2, r3, #1
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	425b      	negs	r3, r3
 800c690:	401a      	ands	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6a6:	e022      	b.n	800c6ee <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	689b      	ldr	r3, [r3, #8]
 800c6ac:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800c6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d119      	bne.n	800c6e8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7fe faab 	bl	800ac14 <create_chain>
 800c6be:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d104      	bne.n	800c6d0 <f_lseek+0x28a>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2202      	movs	r2, #2
 800c6ca:	755a      	strb	r2, [r3, #21]
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	e0bf      	b.n	800c850 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6d6:	d104      	bne.n	800c6e2 <f_lseek+0x29c>
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	755a      	strb	r2, [r3, #21]
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e0b6      	b.n	800c850 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6e6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6ec:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800c6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d05d      	beq.n	800c7b0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800c6f4:	e03a      	b.n	800c76c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	1ad3      	subs	r3, r2, r3
 800c6fc:	603b      	str	r3, [r7, #0]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	699a      	ldr	r2, [r3, #24]
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	441a      	add	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	7d1b      	ldrb	r3, [r3, #20]
 800c70e:	f003 0302 	and.w	r3, r3, #2
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00b      	beq.n	800c72e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fe fa7a 	bl	800ac14 <create_chain>
 800c720:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800c722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c724:	2b00      	cmp	r3, #0
 800c726:	d108      	bne.n	800c73a <f_lseek+0x2f4>
							ofs = 0; break;
 800c728:	2300      	movs	r3, #0
 800c72a:	603b      	str	r3, [r7, #0]
 800c72c:	e022      	b.n	800c774 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe f875 	bl	800a822 <get_fat>
 800c738:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c740:	d104      	bne.n	800c74c <f_lseek+0x306>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2201      	movs	r2, #1
 800c746:	755a      	strb	r2, [r3, #21]
 800c748:	2301      	movs	r3, #1
 800c74a:	e081      	b.n	800c850 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d904      	bls.n	800c75c <f_lseek+0x316>
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	695b      	ldr	r3, [r3, #20]
 800c756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c758:	429a      	cmp	r2, r3
 800c75a:	d304      	bcc.n	800c766 <f_lseek+0x320>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2202      	movs	r2, #2
 800c760:	755a      	strb	r2, [r3, #21]
 800c762:	2302      	movs	r3, #2
 800c764:	e074      	b.n	800c850 <f_lseek+0x40a>
					fp->clust = clst;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c76a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800c76c:	683a      	ldr	r2, [r7, #0]
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	429a      	cmp	r2, r3
 800c772:	d8c0      	bhi.n	800c6f6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	699a      	ldr	r2, [r3, #24]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	441a      	add	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c786:	2b00      	cmp	r3, #0
 800c788:	d012      	beq.n	800c7b0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c78e:	4618      	mov	r0, r3
 800c790:	f7fe f828 	bl	800a7e4 <clust2sect>
 800c794:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800c796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d104      	bne.n	800c7a6 <f_lseek+0x360>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2202      	movs	r2, #2
 800c7a0:	755a      	strb	r2, [r3, #21]
 800c7a2:	2302      	movs	r3, #2
 800c7a4:	e054      	b.n	800c850 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	0a5b      	lsrs	r3, r3, #9
 800c7aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7ac:	4413      	add	r3, r2
 800c7ae:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	699a      	ldr	r2, [r3, #24]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d90a      	bls.n	800c7d2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	699a      	ldr	r2, [r3, #24]
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7d1b      	ldrb	r3, [r3, #20]
 800c7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d036      	beq.n	800c84c <f_lseek+0x406>
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6a1b      	ldr	r3, [r3, #32]
 800c7e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d031      	beq.n	800c84c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7d1b      	ldrb	r3, [r3, #20]
 800c7ec:	b25b      	sxtb	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	da18      	bge.n	800c824 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	7858      	ldrb	r0, [r3, #1]
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	6a1a      	ldr	r2, [r3, #32]
 800c800:	2301      	movs	r3, #1
 800c802:	f7fd fc65 	bl	800a0d0 <disk_write>
 800c806:	4603      	mov	r3, r0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d004      	beq.n	800c816 <f_lseek+0x3d0>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	755a      	strb	r2, [r3, #21]
 800c812:	2301      	movs	r3, #1
 800c814:	e01c      	b.n	800c850 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	7d1b      	ldrb	r3, [r3, #20]
 800c81a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	7858      	ldrb	r0, [r3, #1]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c82e:	2301      	movs	r3, #1
 800c830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c832:	f7fd fc2d 	bl	800a090 <disk_read>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d004      	beq.n	800c846 <f_lseek+0x400>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	755a      	strb	r2, [r3, #21]
 800c842:	2301      	movs	r3, #1
 800c844:	e004      	b.n	800c850 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c84a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800c84c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800c850:	4618      	mov	r0, r3
 800c852:	3740      	adds	r7, #64	; 0x40
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b086      	sub	sp, #24
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d101      	bne.n	800c86c <f_opendir+0x14>
 800c868:	2309      	movs	r3, #9
 800c86a:	e064      	b.n	800c936 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c870:	f107 010c 	add.w	r1, r7, #12
 800c874:	463b      	mov	r3, r7
 800c876:	2200      	movs	r2, #0
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fe ff41 	bl	800b700 <find_volume>
 800c87e:	4603      	mov	r3, r0
 800c880:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c882:	7dfb      	ldrb	r3, [r7, #23]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d14f      	bne.n	800c928 <f_opendir+0xd0>
		obj->fs = fs;
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	4619      	mov	r1, r3
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f7fe fe28 	bl	800b4e8 <follow_path>
 800c898:	4603      	mov	r3, r0
 800c89a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c89c:	7dfb      	ldrb	r3, [r7, #23]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d13d      	bne.n	800c91e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c8a8:	b25b      	sxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	db12      	blt.n	800c8d4 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	799b      	ldrb	r3, [r3, #6]
 800c8b2:	f003 0310 	and.w	r3, r3, #16
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d00a      	beq.n	800c8d0 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6a1b      	ldr	r3, [r3, #32]
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	f7fe fbf9 	bl	800b0ba <ld_clust>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	609a      	str	r2, [r3, #8]
 800c8ce:	e001      	b.n	800c8d4 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c8d0:	2305      	movs	r3, #5
 800c8d2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d121      	bne.n	800c91e <f_opendir+0xc6>
				obj->id = fs->id;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	88da      	ldrh	r2, [r3, #6]
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c8e2:	2100      	movs	r1, #0
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f7fe fa61 	bl	800adac <dir_sdi>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d114      	bne.n	800c91e <f_opendir+0xc6>
					if (obj->sclust) {
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d00d      	beq.n	800c918 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7fd fda2 	bl	800a448 <inc_lock>
 800c904:	4602      	mov	r2, r0
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d105      	bne.n	800c91e <f_opendir+0xc6>
 800c912:	2312      	movs	r3, #18
 800c914:	75fb      	strb	r3, [r7, #23]
 800c916:	e002      	b.n	800c91e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	2200      	movs	r2, #0
 800c91c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
 800c920:	2b04      	cmp	r3, #4
 800c922:	d101      	bne.n	800c928 <f_opendir+0xd0>
 800c924:	2305      	movs	r3, #5
 800c926:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <f_opendir+0xdc>
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2200      	movs	r2, #0
 800c932:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c934:	7dfb      	ldrb	r3, [r7, #23]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3718      	adds	r7, #24
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f107 0208 	add.w	r2, r7, #8
 800c94c:	4611      	mov	r1, r2
 800c94e:	4618      	mov	r0, r3
 800c950:	f7ff f922 	bl	800bb98 <validate>
 800c954:	4603      	mov	r3, r0
 800c956:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c958:	7bfb      	ldrb	r3, [r7, #15]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d110      	bne.n	800c980 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fd fdfa 	bl	800a564 <dec_lock>
 800c970:	4603      	mov	r3, r0
 800c972:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c974:	7bfb      	ldrb	r3, [r7, #15]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d102      	bne.n	800c980 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c980:	7bfb      	ldrb	r3, [r7, #15]
}
 800c982:	4618      	mov	r0, r3
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}

0800c98a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b084      	sub	sp, #16
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
 800c992:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f107 0208 	add.w	r2, r7, #8
 800c99a:	4611      	mov	r1, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7ff f8fb 	bl	800bb98 <validate>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d126      	bne.n	800c9fa <f_readdir+0x70>
		if (!fno) {
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d106      	bne.n	800c9c0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7fe f9f9 	bl	800adac <dir_sdi>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	73fb      	strb	r3, [r7, #15]
 800c9be:	e01c      	b.n	800c9fa <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7fe fbb8 	bl	800b138 <dir_read>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	d101      	bne.n	800c9d6 <f_readdir+0x4c>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c9d6:	7bfb      	ldrb	r3, [r7, #15]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10e      	bne.n	800c9fa <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c9dc:	6839      	ldr	r1, [r7, #0]
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f7fe fc8e 	bl	800b300 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7fe fa5b 	bl	800aea2 <dir_next>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	2b04      	cmp	r3, #4
 800c9f4:	d101      	bne.n	800c9fa <f_readdir+0x70>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800c9fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3710      	adds	r7, #16
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b087      	sub	sp, #28
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ca12:	2301      	movs	r3, #1
 800ca14:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca1a:	4b1f      	ldr	r3, [pc, #124]	; (800ca98 <FATFS_LinkDriverEx+0x94>)
 800ca1c:	7a5b      	ldrb	r3, [r3, #9]
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d131      	bne.n	800ca88 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca24:	4b1c      	ldr	r3, [pc, #112]	; (800ca98 <FATFS_LinkDriverEx+0x94>)
 800ca26:	7a5b      	ldrb	r3, [r3, #9]
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	4b1a      	ldr	r3, [pc, #104]	; (800ca98 <FATFS_LinkDriverEx+0x94>)
 800ca2e:	2100      	movs	r1, #0
 800ca30:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca32:	4b19      	ldr	r3, [pc, #100]	; (800ca98 <FATFS_LinkDriverEx+0x94>)
 800ca34:	7a5b      	ldrb	r3, [r3, #9]
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	4a17      	ldr	r2, [pc, #92]	; (800ca98 <FATFS_LinkDriverEx+0x94>)
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca42:	4b15      	ldr	r3, [pc, #84]	; (800ca98 <FATFS_LinkDriverEx+0x94>)
 800ca44:	7a5b      	ldrb	r3, [r3, #9]
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	461a      	mov	r2, r3
 800ca4a:	4b13      	ldr	r3, [pc, #76]	; (800ca98 <FATFS_LinkDriverEx+0x94>)
 800ca4c:	4413      	add	r3, r2
 800ca4e:	79fa      	ldrb	r2, [r7, #7]
 800ca50:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca52:	4b11      	ldr	r3, [pc, #68]	; (800ca98 <FATFS_LinkDriverEx+0x94>)
 800ca54:	7a5b      	ldrb	r3, [r3, #9]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	1c5a      	adds	r2, r3, #1
 800ca5a:	b2d1      	uxtb	r1, r2
 800ca5c:	4a0e      	ldr	r2, [pc, #56]	; (800ca98 <FATFS_LinkDriverEx+0x94>)
 800ca5e:	7251      	strb	r1, [r2, #9]
 800ca60:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca62:	7dbb      	ldrb	r3, [r7, #22]
 800ca64:	3330      	adds	r3, #48	; 0x30
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	223a      	movs	r2, #58	; 0x3a
 800ca72:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	3302      	adds	r3, #2
 800ca78:	222f      	movs	r2, #47	; 0x2f
 800ca7a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	3303      	adds	r3, #3
 800ca80:	2200      	movs	r2, #0
 800ca82:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	371c      	adds	r7, #28
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	20000790 	.word	0x20000790

0800ca9c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800caa6:	2200      	movs	r2, #0
 800caa8:	6839      	ldr	r1, [r7, #0]
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff ffaa 	bl	800ca04 <FATFS_LinkDriverEx>
 800cab0:	4603      	mov	r3, r0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
	...

0800cabc <__errno>:
 800cabc:	4b01      	ldr	r3, [pc, #4]	; (800cac4 <__errno+0x8>)
 800cabe:	6818      	ldr	r0, [r3, #0]
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	20000024 	.word	0x20000024

0800cac8 <__libc_init_array>:
 800cac8:	b570      	push	{r4, r5, r6, lr}
 800caca:	4d0d      	ldr	r5, [pc, #52]	; (800cb00 <__libc_init_array+0x38>)
 800cacc:	4c0d      	ldr	r4, [pc, #52]	; (800cb04 <__libc_init_array+0x3c>)
 800cace:	1b64      	subs	r4, r4, r5
 800cad0:	10a4      	asrs	r4, r4, #2
 800cad2:	2600      	movs	r6, #0
 800cad4:	42a6      	cmp	r6, r4
 800cad6:	d109      	bne.n	800caec <__libc_init_array+0x24>
 800cad8:	4d0b      	ldr	r5, [pc, #44]	; (800cb08 <__libc_init_array+0x40>)
 800cada:	4c0c      	ldr	r4, [pc, #48]	; (800cb0c <__libc_init_array+0x44>)
 800cadc:	f004 fd1c 	bl	8011518 <_init>
 800cae0:	1b64      	subs	r4, r4, r5
 800cae2:	10a4      	asrs	r4, r4, #2
 800cae4:	2600      	movs	r6, #0
 800cae6:	42a6      	cmp	r6, r4
 800cae8:	d105      	bne.n	800caf6 <__libc_init_array+0x2e>
 800caea:	bd70      	pop	{r4, r5, r6, pc}
 800caec:	f855 3b04 	ldr.w	r3, [r5], #4
 800caf0:	4798      	blx	r3
 800caf2:	3601      	adds	r6, #1
 800caf4:	e7ee      	b.n	800cad4 <__libc_init_array+0xc>
 800caf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cafa:	4798      	blx	r3
 800cafc:	3601      	adds	r6, #1
 800cafe:	e7f2      	b.n	800cae6 <__libc_init_array+0x1e>
 800cb00:	080124d4 	.word	0x080124d4
 800cb04:	080124d4 	.word	0x080124d4
 800cb08:	080124d4 	.word	0x080124d4
 800cb0c:	080124d8 	.word	0x080124d8

0800cb10 <malloc>:
 800cb10:	4b02      	ldr	r3, [pc, #8]	; (800cb1c <malloc+0xc>)
 800cb12:	4601      	mov	r1, r0
 800cb14:	6818      	ldr	r0, [r3, #0]
 800cb16:	f000 b869 	b.w	800cbec <_malloc_r>
 800cb1a:	bf00      	nop
 800cb1c:	20000024 	.word	0x20000024

0800cb20 <memcpy>:
 800cb20:	440a      	add	r2, r1
 800cb22:	4291      	cmp	r1, r2
 800cb24:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb28:	d100      	bne.n	800cb2c <memcpy+0xc>
 800cb2a:	4770      	bx	lr
 800cb2c:	b510      	push	{r4, lr}
 800cb2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb36:	4291      	cmp	r1, r2
 800cb38:	d1f9      	bne.n	800cb2e <memcpy+0xe>
 800cb3a:	bd10      	pop	{r4, pc}

0800cb3c <memset>:
 800cb3c:	4402      	add	r2, r0
 800cb3e:	4603      	mov	r3, r0
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d100      	bne.n	800cb46 <memset+0xa>
 800cb44:	4770      	bx	lr
 800cb46:	f803 1b01 	strb.w	r1, [r3], #1
 800cb4a:	e7f9      	b.n	800cb40 <memset+0x4>

0800cb4c <_free_r>:
 800cb4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d048      	beq.n	800cbe4 <_free_r+0x98>
 800cb52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb56:	9001      	str	r0, [sp, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb5e:	bfb8      	it	lt
 800cb60:	18e4      	addlt	r4, r4, r3
 800cb62:	f003 fc3f 	bl	80103e4 <__malloc_lock>
 800cb66:	4a20      	ldr	r2, [pc, #128]	; (800cbe8 <_free_r+0x9c>)
 800cb68:	9801      	ldr	r0, [sp, #4]
 800cb6a:	6813      	ldr	r3, [r2, #0]
 800cb6c:	4615      	mov	r5, r2
 800cb6e:	b933      	cbnz	r3, 800cb7e <_free_r+0x32>
 800cb70:	6063      	str	r3, [r4, #4]
 800cb72:	6014      	str	r4, [r2, #0]
 800cb74:	b003      	add	sp, #12
 800cb76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb7a:	f003 bc39 	b.w	80103f0 <__malloc_unlock>
 800cb7e:	42a3      	cmp	r3, r4
 800cb80:	d90b      	bls.n	800cb9a <_free_r+0x4e>
 800cb82:	6821      	ldr	r1, [r4, #0]
 800cb84:	1862      	adds	r2, r4, r1
 800cb86:	4293      	cmp	r3, r2
 800cb88:	bf04      	itt	eq
 800cb8a:	681a      	ldreq	r2, [r3, #0]
 800cb8c:	685b      	ldreq	r3, [r3, #4]
 800cb8e:	6063      	str	r3, [r4, #4]
 800cb90:	bf04      	itt	eq
 800cb92:	1852      	addeq	r2, r2, r1
 800cb94:	6022      	streq	r2, [r4, #0]
 800cb96:	602c      	str	r4, [r5, #0]
 800cb98:	e7ec      	b.n	800cb74 <_free_r+0x28>
 800cb9a:	461a      	mov	r2, r3
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	b10b      	cbz	r3, 800cba4 <_free_r+0x58>
 800cba0:	42a3      	cmp	r3, r4
 800cba2:	d9fa      	bls.n	800cb9a <_free_r+0x4e>
 800cba4:	6811      	ldr	r1, [r2, #0]
 800cba6:	1855      	adds	r5, r2, r1
 800cba8:	42a5      	cmp	r5, r4
 800cbaa:	d10b      	bne.n	800cbc4 <_free_r+0x78>
 800cbac:	6824      	ldr	r4, [r4, #0]
 800cbae:	4421      	add	r1, r4
 800cbb0:	1854      	adds	r4, r2, r1
 800cbb2:	42a3      	cmp	r3, r4
 800cbb4:	6011      	str	r1, [r2, #0]
 800cbb6:	d1dd      	bne.n	800cb74 <_free_r+0x28>
 800cbb8:	681c      	ldr	r4, [r3, #0]
 800cbba:	685b      	ldr	r3, [r3, #4]
 800cbbc:	6053      	str	r3, [r2, #4]
 800cbbe:	4421      	add	r1, r4
 800cbc0:	6011      	str	r1, [r2, #0]
 800cbc2:	e7d7      	b.n	800cb74 <_free_r+0x28>
 800cbc4:	d902      	bls.n	800cbcc <_free_r+0x80>
 800cbc6:	230c      	movs	r3, #12
 800cbc8:	6003      	str	r3, [r0, #0]
 800cbca:	e7d3      	b.n	800cb74 <_free_r+0x28>
 800cbcc:	6825      	ldr	r5, [r4, #0]
 800cbce:	1961      	adds	r1, r4, r5
 800cbd0:	428b      	cmp	r3, r1
 800cbd2:	bf04      	itt	eq
 800cbd4:	6819      	ldreq	r1, [r3, #0]
 800cbd6:	685b      	ldreq	r3, [r3, #4]
 800cbd8:	6063      	str	r3, [r4, #4]
 800cbda:	bf04      	itt	eq
 800cbdc:	1949      	addeq	r1, r1, r5
 800cbde:	6021      	streq	r1, [r4, #0]
 800cbe0:	6054      	str	r4, [r2, #4]
 800cbe2:	e7c7      	b.n	800cb74 <_free_r+0x28>
 800cbe4:	b003      	add	sp, #12
 800cbe6:	bd30      	pop	{r4, r5, pc}
 800cbe8:	2000079c 	.word	0x2000079c

0800cbec <_malloc_r>:
 800cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbee:	1ccd      	adds	r5, r1, #3
 800cbf0:	f025 0503 	bic.w	r5, r5, #3
 800cbf4:	3508      	adds	r5, #8
 800cbf6:	2d0c      	cmp	r5, #12
 800cbf8:	bf38      	it	cc
 800cbfa:	250c      	movcc	r5, #12
 800cbfc:	2d00      	cmp	r5, #0
 800cbfe:	4606      	mov	r6, r0
 800cc00:	db01      	blt.n	800cc06 <_malloc_r+0x1a>
 800cc02:	42a9      	cmp	r1, r5
 800cc04:	d903      	bls.n	800cc0e <_malloc_r+0x22>
 800cc06:	230c      	movs	r3, #12
 800cc08:	6033      	str	r3, [r6, #0]
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc0e:	f003 fbe9 	bl	80103e4 <__malloc_lock>
 800cc12:	4921      	ldr	r1, [pc, #132]	; (800cc98 <_malloc_r+0xac>)
 800cc14:	680a      	ldr	r2, [r1, #0]
 800cc16:	4614      	mov	r4, r2
 800cc18:	b99c      	cbnz	r4, 800cc42 <_malloc_r+0x56>
 800cc1a:	4f20      	ldr	r7, [pc, #128]	; (800cc9c <_malloc_r+0xb0>)
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	b923      	cbnz	r3, 800cc2a <_malloc_r+0x3e>
 800cc20:	4621      	mov	r1, r4
 800cc22:	4630      	mov	r0, r6
 800cc24:	f000 ff44 	bl	800dab0 <_sbrk_r>
 800cc28:	6038      	str	r0, [r7, #0]
 800cc2a:	4629      	mov	r1, r5
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	f000 ff3f 	bl	800dab0 <_sbrk_r>
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	d123      	bne.n	800cc7e <_malloc_r+0x92>
 800cc36:	230c      	movs	r3, #12
 800cc38:	6033      	str	r3, [r6, #0]
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f003 fbd8 	bl	80103f0 <__malloc_unlock>
 800cc40:	e7e3      	b.n	800cc0a <_malloc_r+0x1e>
 800cc42:	6823      	ldr	r3, [r4, #0]
 800cc44:	1b5b      	subs	r3, r3, r5
 800cc46:	d417      	bmi.n	800cc78 <_malloc_r+0x8c>
 800cc48:	2b0b      	cmp	r3, #11
 800cc4a:	d903      	bls.n	800cc54 <_malloc_r+0x68>
 800cc4c:	6023      	str	r3, [r4, #0]
 800cc4e:	441c      	add	r4, r3
 800cc50:	6025      	str	r5, [r4, #0]
 800cc52:	e004      	b.n	800cc5e <_malloc_r+0x72>
 800cc54:	6863      	ldr	r3, [r4, #4]
 800cc56:	42a2      	cmp	r2, r4
 800cc58:	bf0c      	ite	eq
 800cc5a:	600b      	streq	r3, [r1, #0]
 800cc5c:	6053      	strne	r3, [r2, #4]
 800cc5e:	4630      	mov	r0, r6
 800cc60:	f003 fbc6 	bl	80103f0 <__malloc_unlock>
 800cc64:	f104 000b 	add.w	r0, r4, #11
 800cc68:	1d23      	adds	r3, r4, #4
 800cc6a:	f020 0007 	bic.w	r0, r0, #7
 800cc6e:	1ac2      	subs	r2, r0, r3
 800cc70:	d0cc      	beq.n	800cc0c <_malloc_r+0x20>
 800cc72:	1a1b      	subs	r3, r3, r0
 800cc74:	50a3      	str	r3, [r4, r2]
 800cc76:	e7c9      	b.n	800cc0c <_malloc_r+0x20>
 800cc78:	4622      	mov	r2, r4
 800cc7a:	6864      	ldr	r4, [r4, #4]
 800cc7c:	e7cc      	b.n	800cc18 <_malloc_r+0x2c>
 800cc7e:	1cc4      	adds	r4, r0, #3
 800cc80:	f024 0403 	bic.w	r4, r4, #3
 800cc84:	42a0      	cmp	r0, r4
 800cc86:	d0e3      	beq.n	800cc50 <_malloc_r+0x64>
 800cc88:	1a21      	subs	r1, r4, r0
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f000 ff10 	bl	800dab0 <_sbrk_r>
 800cc90:	3001      	adds	r0, #1
 800cc92:	d1dd      	bne.n	800cc50 <_malloc_r+0x64>
 800cc94:	e7cf      	b.n	800cc36 <_malloc_r+0x4a>
 800cc96:	bf00      	nop
 800cc98:	2000079c 	.word	0x2000079c
 800cc9c:	200007a0 	.word	0x200007a0

0800cca0 <__cvt>:
 800cca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cca4:	ec55 4b10 	vmov	r4, r5, d0
 800cca8:	2d00      	cmp	r5, #0
 800ccaa:	460e      	mov	r6, r1
 800ccac:	4619      	mov	r1, r3
 800ccae:	462b      	mov	r3, r5
 800ccb0:	bfbb      	ittet	lt
 800ccb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ccb6:	461d      	movlt	r5, r3
 800ccb8:	2300      	movge	r3, #0
 800ccba:	232d      	movlt	r3, #45	; 0x2d
 800ccbc:	700b      	strb	r3, [r1, #0]
 800ccbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ccc4:	4691      	mov	r9, r2
 800ccc6:	f023 0820 	bic.w	r8, r3, #32
 800ccca:	bfbc      	itt	lt
 800cccc:	4622      	movlt	r2, r4
 800ccce:	4614      	movlt	r4, r2
 800ccd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ccd4:	d005      	beq.n	800cce2 <__cvt+0x42>
 800ccd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ccda:	d100      	bne.n	800ccde <__cvt+0x3e>
 800ccdc:	3601      	adds	r6, #1
 800ccde:	2102      	movs	r1, #2
 800cce0:	e000      	b.n	800cce4 <__cvt+0x44>
 800cce2:	2103      	movs	r1, #3
 800cce4:	ab03      	add	r3, sp, #12
 800cce6:	9301      	str	r3, [sp, #4]
 800cce8:	ab02      	add	r3, sp, #8
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	ec45 4b10 	vmov	d0, r4, r5
 800ccf0:	4653      	mov	r3, sl
 800ccf2:	4632      	mov	r2, r6
 800ccf4:	f001 ffd4 	bl	800eca0 <_dtoa_r>
 800ccf8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ccfc:	4607      	mov	r7, r0
 800ccfe:	d102      	bne.n	800cd06 <__cvt+0x66>
 800cd00:	f019 0f01 	tst.w	r9, #1
 800cd04:	d022      	beq.n	800cd4c <__cvt+0xac>
 800cd06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd0a:	eb07 0906 	add.w	r9, r7, r6
 800cd0e:	d110      	bne.n	800cd32 <__cvt+0x92>
 800cd10:	783b      	ldrb	r3, [r7, #0]
 800cd12:	2b30      	cmp	r3, #48	; 0x30
 800cd14:	d10a      	bne.n	800cd2c <__cvt+0x8c>
 800cd16:	2200      	movs	r2, #0
 800cd18:	2300      	movs	r3, #0
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	4629      	mov	r1, r5
 800cd1e:	f7f3 fee3 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd22:	b918      	cbnz	r0, 800cd2c <__cvt+0x8c>
 800cd24:	f1c6 0601 	rsb	r6, r6, #1
 800cd28:	f8ca 6000 	str.w	r6, [sl]
 800cd2c:	f8da 3000 	ldr.w	r3, [sl]
 800cd30:	4499      	add	r9, r3
 800cd32:	2200      	movs	r2, #0
 800cd34:	2300      	movs	r3, #0
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	f7f3 fed5 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd3e:	b108      	cbz	r0, 800cd44 <__cvt+0xa4>
 800cd40:	f8cd 900c 	str.w	r9, [sp, #12]
 800cd44:	2230      	movs	r2, #48	; 0x30
 800cd46:	9b03      	ldr	r3, [sp, #12]
 800cd48:	454b      	cmp	r3, r9
 800cd4a:	d307      	bcc.n	800cd5c <__cvt+0xbc>
 800cd4c:	9b03      	ldr	r3, [sp, #12]
 800cd4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd50:	1bdb      	subs	r3, r3, r7
 800cd52:	4638      	mov	r0, r7
 800cd54:	6013      	str	r3, [r2, #0]
 800cd56:	b004      	add	sp, #16
 800cd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd5c:	1c59      	adds	r1, r3, #1
 800cd5e:	9103      	str	r1, [sp, #12]
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	e7f0      	b.n	800cd46 <__cvt+0xa6>

0800cd64 <__exponent>:
 800cd64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd66:	4603      	mov	r3, r0
 800cd68:	2900      	cmp	r1, #0
 800cd6a:	bfb8      	it	lt
 800cd6c:	4249      	neglt	r1, r1
 800cd6e:	f803 2b02 	strb.w	r2, [r3], #2
 800cd72:	bfb4      	ite	lt
 800cd74:	222d      	movlt	r2, #45	; 0x2d
 800cd76:	222b      	movge	r2, #43	; 0x2b
 800cd78:	2909      	cmp	r1, #9
 800cd7a:	7042      	strb	r2, [r0, #1]
 800cd7c:	dd2a      	ble.n	800cdd4 <__exponent+0x70>
 800cd7e:	f10d 0407 	add.w	r4, sp, #7
 800cd82:	46a4      	mov	ip, r4
 800cd84:	270a      	movs	r7, #10
 800cd86:	46a6      	mov	lr, r4
 800cd88:	460a      	mov	r2, r1
 800cd8a:	fb91 f6f7 	sdiv	r6, r1, r7
 800cd8e:	fb07 1516 	mls	r5, r7, r6, r1
 800cd92:	3530      	adds	r5, #48	; 0x30
 800cd94:	2a63      	cmp	r2, #99	; 0x63
 800cd96:	f104 34ff 	add.w	r4, r4, #4294967295
 800cd9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cd9e:	4631      	mov	r1, r6
 800cda0:	dcf1      	bgt.n	800cd86 <__exponent+0x22>
 800cda2:	3130      	adds	r1, #48	; 0x30
 800cda4:	f1ae 0502 	sub.w	r5, lr, #2
 800cda8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cdac:	1c44      	adds	r4, r0, #1
 800cdae:	4629      	mov	r1, r5
 800cdb0:	4561      	cmp	r1, ip
 800cdb2:	d30a      	bcc.n	800cdca <__exponent+0x66>
 800cdb4:	f10d 0209 	add.w	r2, sp, #9
 800cdb8:	eba2 020e 	sub.w	r2, r2, lr
 800cdbc:	4565      	cmp	r5, ip
 800cdbe:	bf88      	it	hi
 800cdc0:	2200      	movhi	r2, #0
 800cdc2:	4413      	add	r3, r2
 800cdc4:	1a18      	subs	r0, r3, r0
 800cdc6:	b003      	add	sp, #12
 800cdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cdd2:	e7ed      	b.n	800cdb0 <__exponent+0x4c>
 800cdd4:	2330      	movs	r3, #48	; 0x30
 800cdd6:	3130      	adds	r1, #48	; 0x30
 800cdd8:	7083      	strb	r3, [r0, #2]
 800cdda:	70c1      	strb	r1, [r0, #3]
 800cddc:	1d03      	adds	r3, r0, #4
 800cdde:	e7f1      	b.n	800cdc4 <__exponent+0x60>

0800cde0 <_printf_float>:
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	ed2d 8b02 	vpush	{d8}
 800cde8:	b08d      	sub	sp, #52	; 0x34
 800cdea:	460c      	mov	r4, r1
 800cdec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cdf0:	4616      	mov	r6, r2
 800cdf2:	461f      	mov	r7, r3
 800cdf4:	4605      	mov	r5, r0
 800cdf6:	f003 fa65 	bl	80102c4 <_localeconv_r>
 800cdfa:	f8d0 a000 	ldr.w	sl, [r0]
 800cdfe:	4650      	mov	r0, sl
 800ce00:	f7f3 f9f6 	bl	80001f0 <strlen>
 800ce04:	2300      	movs	r3, #0
 800ce06:	930a      	str	r3, [sp, #40]	; 0x28
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	9305      	str	r3, [sp, #20]
 800ce0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce10:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ce14:	3307      	adds	r3, #7
 800ce16:	f023 0307 	bic.w	r3, r3, #7
 800ce1a:	f103 0208 	add.w	r2, r3, #8
 800ce1e:	f8c8 2000 	str.w	r2, [r8]
 800ce22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ce2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ce2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce32:	9307      	str	r3, [sp, #28]
 800ce34:	f8cd 8018 	str.w	r8, [sp, #24]
 800ce38:	ee08 0a10 	vmov	s16, r0
 800ce3c:	4b9f      	ldr	r3, [pc, #636]	; (800d0bc <_printf_float+0x2dc>)
 800ce3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce42:	f04f 32ff 	mov.w	r2, #4294967295
 800ce46:	f7f3 fe81 	bl	8000b4c <__aeabi_dcmpun>
 800ce4a:	bb88      	cbnz	r0, 800ceb0 <_printf_float+0xd0>
 800ce4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ce50:	4b9a      	ldr	r3, [pc, #616]	; (800d0bc <_printf_float+0x2dc>)
 800ce52:	f04f 32ff 	mov.w	r2, #4294967295
 800ce56:	f7f3 fe5b 	bl	8000b10 <__aeabi_dcmple>
 800ce5a:	bb48      	cbnz	r0, 800ceb0 <_printf_float+0xd0>
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	2300      	movs	r3, #0
 800ce60:	4640      	mov	r0, r8
 800ce62:	4649      	mov	r1, r9
 800ce64:	f7f3 fe4a 	bl	8000afc <__aeabi_dcmplt>
 800ce68:	b110      	cbz	r0, 800ce70 <_printf_float+0x90>
 800ce6a:	232d      	movs	r3, #45	; 0x2d
 800ce6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce70:	4b93      	ldr	r3, [pc, #588]	; (800d0c0 <_printf_float+0x2e0>)
 800ce72:	4894      	ldr	r0, [pc, #592]	; (800d0c4 <_printf_float+0x2e4>)
 800ce74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ce78:	bf94      	ite	ls
 800ce7a:	4698      	movls	r8, r3
 800ce7c:	4680      	movhi	r8, r0
 800ce7e:	2303      	movs	r3, #3
 800ce80:	6123      	str	r3, [r4, #16]
 800ce82:	9b05      	ldr	r3, [sp, #20]
 800ce84:	f023 0204 	bic.w	r2, r3, #4
 800ce88:	6022      	str	r2, [r4, #0]
 800ce8a:	f04f 0900 	mov.w	r9, #0
 800ce8e:	9700      	str	r7, [sp, #0]
 800ce90:	4633      	mov	r3, r6
 800ce92:	aa0b      	add	r2, sp, #44	; 0x2c
 800ce94:	4621      	mov	r1, r4
 800ce96:	4628      	mov	r0, r5
 800ce98:	f000 f9d8 	bl	800d24c <_printf_common>
 800ce9c:	3001      	adds	r0, #1
 800ce9e:	f040 8090 	bne.w	800cfc2 <_printf_float+0x1e2>
 800cea2:	f04f 30ff 	mov.w	r0, #4294967295
 800cea6:	b00d      	add	sp, #52	; 0x34
 800cea8:	ecbd 8b02 	vpop	{d8}
 800ceac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceb0:	4642      	mov	r2, r8
 800ceb2:	464b      	mov	r3, r9
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	f7f3 fe48 	bl	8000b4c <__aeabi_dcmpun>
 800cebc:	b140      	cbz	r0, 800ced0 <_printf_float+0xf0>
 800cebe:	464b      	mov	r3, r9
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	bfbc      	itt	lt
 800cec4:	232d      	movlt	r3, #45	; 0x2d
 800cec6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ceca:	487f      	ldr	r0, [pc, #508]	; (800d0c8 <_printf_float+0x2e8>)
 800cecc:	4b7f      	ldr	r3, [pc, #508]	; (800d0cc <_printf_float+0x2ec>)
 800cece:	e7d1      	b.n	800ce74 <_printf_float+0x94>
 800ced0:	6863      	ldr	r3, [r4, #4]
 800ced2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ced6:	9206      	str	r2, [sp, #24]
 800ced8:	1c5a      	adds	r2, r3, #1
 800ceda:	d13f      	bne.n	800cf5c <_printf_float+0x17c>
 800cedc:	2306      	movs	r3, #6
 800cede:	6063      	str	r3, [r4, #4]
 800cee0:	9b05      	ldr	r3, [sp, #20]
 800cee2:	6861      	ldr	r1, [r4, #4]
 800cee4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cee8:	2300      	movs	r3, #0
 800ceea:	9303      	str	r3, [sp, #12]
 800ceec:	ab0a      	add	r3, sp, #40	; 0x28
 800ceee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cef2:	ab09      	add	r3, sp, #36	; 0x24
 800cef4:	ec49 8b10 	vmov	d0, r8, r9
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	6022      	str	r2, [r4, #0]
 800cefc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cf00:	4628      	mov	r0, r5
 800cf02:	f7ff fecd 	bl	800cca0 <__cvt>
 800cf06:	9b06      	ldr	r3, [sp, #24]
 800cf08:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf0a:	2b47      	cmp	r3, #71	; 0x47
 800cf0c:	4680      	mov	r8, r0
 800cf0e:	d108      	bne.n	800cf22 <_printf_float+0x142>
 800cf10:	1cc8      	adds	r0, r1, #3
 800cf12:	db02      	blt.n	800cf1a <_printf_float+0x13a>
 800cf14:	6863      	ldr	r3, [r4, #4]
 800cf16:	4299      	cmp	r1, r3
 800cf18:	dd41      	ble.n	800cf9e <_printf_float+0x1be>
 800cf1a:	f1ab 0b02 	sub.w	fp, fp, #2
 800cf1e:	fa5f fb8b 	uxtb.w	fp, fp
 800cf22:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cf26:	d820      	bhi.n	800cf6a <_printf_float+0x18a>
 800cf28:	3901      	subs	r1, #1
 800cf2a:	465a      	mov	r2, fp
 800cf2c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf30:	9109      	str	r1, [sp, #36]	; 0x24
 800cf32:	f7ff ff17 	bl	800cd64 <__exponent>
 800cf36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf38:	1813      	adds	r3, r2, r0
 800cf3a:	2a01      	cmp	r2, #1
 800cf3c:	4681      	mov	r9, r0
 800cf3e:	6123      	str	r3, [r4, #16]
 800cf40:	dc02      	bgt.n	800cf48 <_printf_float+0x168>
 800cf42:	6822      	ldr	r2, [r4, #0]
 800cf44:	07d2      	lsls	r2, r2, #31
 800cf46:	d501      	bpl.n	800cf4c <_printf_float+0x16c>
 800cf48:	3301      	adds	r3, #1
 800cf4a:	6123      	str	r3, [r4, #16]
 800cf4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d09c      	beq.n	800ce8e <_printf_float+0xae>
 800cf54:	232d      	movs	r3, #45	; 0x2d
 800cf56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf5a:	e798      	b.n	800ce8e <_printf_float+0xae>
 800cf5c:	9a06      	ldr	r2, [sp, #24]
 800cf5e:	2a47      	cmp	r2, #71	; 0x47
 800cf60:	d1be      	bne.n	800cee0 <_printf_float+0x100>
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1bc      	bne.n	800cee0 <_printf_float+0x100>
 800cf66:	2301      	movs	r3, #1
 800cf68:	e7b9      	b.n	800cede <_printf_float+0xfe>
 800cf6a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cf6e:	d118      	bne.n	800cfa2 <_printf_float+0x1c2>
 800cf70:	2900      	cmp	r1, #0
 800cf72:	6863      	ldr	r3, [r4, #4]
 800cf74:	dd0b      	ble.n	800cf8e <_printf_float+0x1ae>
 800cf76:	6121      	str	r1, [r4, #16]
 800cf78:	b913      	cbnz	r3, 800cf80 <_printf_float+0x1a0>
 800cf7a:	6822      	ldr	r2, [r4, #0]
 800cf7c:	07d0      	lsls	r0, r2, #31
 800cf7e:	d502      	bpl.n	800cf86 <_printf_float+0x1a6>
 800cf80:	3301      	adds	r3, #1
 800cf82:	440b      	add	r3, r1
 800cf84:	6123      	str	r3, [r4, #16]
 800cf86:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf88:	f04f 0900 	mov.w	r9, #0
 800cf8c:	e7de      	b.n	800cf4c <_printf_float+0x16c>
 800cf8e:	b913      	cbnz	r3, 800cf96 <_printf_float+0x1b6>
 800cf90:	6822      	ldr	r2, [r4, #0]
 800cf92:	07d2      	lsls	r2, r2, #31
 800cf94:	d501      	bpl.n	800cf9a <_printf_float+0x1ba>
 800cf96:	3302      	adds	r3, #2
 800cf98:	e7f4      	b.n	800cf84 <_printf_float+0x1a4>
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e7f2      	b.n	800cf84 <_printf_float+0x1a4>
 800cf9e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cfa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa4:	4299      	cmp	r1, r3
 800cfa6:	db05      	blt.n	800cfb4 <_printf_float+0x1d4>
 800cfa8:	6823      	ldr	r3, [r4, #0]
 800cfaa:	6121      	str	r1, [r4, #16]
 800cfac:	07d8      	lsls	r0, r3, #31
 800cfae:	d5ea      	bpl.n	800cf86 <_printf_float+0x1a6>
 800cfb0:	1c4b      	adds	r3, r1, #1
 800cfb2:	e7e7      	b.n	800cf84 <_printf_float+0x1a4>
 800cfb4:	2900      	cmp	r1, #0
 800cfb6:	bfd4      	ite	le
 800cfb8:	f1c1 0202 	rsble	r2, r1, #2
 800cfbc:	2201      	movgt	r2, #1
 800cfbe:	4413      	add	r3, r2
 800cfc0:	e7e0      	b.n	800cf84 <_printf_float+0x1a4>
 800cfc2:	6823      	ldr	r3, [r4, #0]
 800cfc4:	055a      	lsls	r2, r3, #21
 800cfc6:	d407      	bmi.n	800cfd8 <_printf_float+0x1f8>
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	4642      	mov	r2, r8
 800cfcc:	4631      	mov	r1, r6
 800cfce:	4628      	mov	r0, r5
 800cfd0:	47b8      	blx	r7
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	d12c      	bne.n	800d030 <_printf_float+0x250>
 800cfd6:	e764      	b.n	800cea2 <_printf_float+0xc2>
 800cfd8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cfdc:	f240 80e0 	bls.w	800d1a0 <_printf_float+0x3c0>
 800cfe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f7f3 fd7e 	bl	8000ae8 <__aeabi_dcmpeq>
 800cfec:	2800      	cmp	r0, #0
 800cfee:	d034      	beq.n	800d05a <_printf_float+0x27a>
 800cff0:	4a37      	ldr	r2, [pc, #220]	; (800d0d0 <_printf_float+0x2f0>)
 800cff2:	2301      	movs	r3, #1
 800cff4:	4631      	mov	r1, r6
 800cff6:	4628      	mov	r0, r5
 800cff8:	47b8      	blx	r7
 800cffa:	3001      	adds	r0, #1
 800cffc:	f43f af51 	beq.w	800cea2 <_printf_float+0xc2>
 800d000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d004:	429a      	cmp	r2, r3
 800d006:	db02      	blt.n	800d00e <_printf_float+0x22e>
 800d008:	6823      	ldr	r3, [r4, #0]
 800d00a:	07d8      	lsls	r0, r3, #31
 800d00c:	d510      	bpl.n	800d030 <_printf_float+0x250>
 800d00e:	ee18 3a10 	vmov	r3, s16
 800d012:	4652      	mov	r2, sl
 800d014:	4631      	mov	r1, r6
 800d016:	4628      	mov	r0, r5
 800d018:	47b8      	blx	r7
 800d01a:	3001      	adds	r0, #1
 800d01c:	f43f af41 	beq.w	800cea2 <_printf_float+0xc2>
 800d020:	f04f 0800 	mov.w	r8, #0
 800d024:	f104 091a 	add.w	r9, r4, #26
 800d028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d02a:	3b01      	subs	r3, #1
 800d02c:	4543      	cmp	r3, r8
 800d02e:	dc09      	bgt.n	800d044 <_printf_float+0x264>
 800d030:	6823      	ldr	r3, [r4, #0]
 800d032:	079b      	lsls	r3, r3, #30
 800d034:	f100 8105 	bmi.w	800d242 <_printf_float+0x462>
 800d038:	68e0      	ldr	r0, [r4, #12]
 800d03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d03c:	4298      	cmp	r0, r3
 800d03e:	bfb8      	it	lt
 800d040:	4618      	movlt	r0, r3
 800d042:	e730      	b.n	800cea6 <_printf_float+0xc6>
 800d044:	2301      	movs	r3, #1
 800d046:	464a      	mov	r2, r9
 800d048:	4631      	mov	r1, r6
 800d04a:	4628      	mov	r0, r5
 800d04c:	47b8      	blx	r7
 800d04e:	3001      	adds	r0, #1
 800d050:	f43f af27 	beq.w	800cea2 <_printf_float+0xc2>
 800d054:	f108 0801 	add.w	r8, r8, #1
 800d058:	e7e6      	b.n	800d028 <_printf_float+0x248>
 800d05a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	dc39      	bgt.n	800d0d4 <_printf_float+0x2f4>
 800d060:	4a1b      	ldr	r2, [pc, #108]	; (800d0d0 <_printf_float+0x2f0>)
 800d062:	2301      	movs	r3, #1
 800d064:	4631      	mov	r1, r6
 800d066:	4628      	mov	r0, r5
 800d068:	47b8      	blx	r7
 800d06a:	3001      	adds	r0, #1
 800d06c:	f43f af19 	beq.w	800cea2 <_printf_float+0xc2>
 800d070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d074:	4313      	orrs	r3, r2
 800d076:	d102      	bne.n	800d07e <_printf_float+0x29e>
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	07d9      	lsls	r1, r3, #31
 800d07c:	d5d8      	bpl.n	800d030 <_printf_float+0x250>
 800d07e:	ee18 3a10 	vmov	r3, s16
 800d082:	4652      	mov	r2, sl
 800d084:	4631      	mov	r1, r6
 800d086:	4628      	mov	r0, r5
 800d088:	47b8      	blx	r7
 800d08a:	3001      	adds	r0, #1
 800d08c:	f43f af09 	beq.w	800cea2 <_printf_float+0xc2>
 800d090:	f04f 0900 	mov.w	r9, #0
 800d094:	f104 0a1a 	add.w	sl, r4, #26
 800d098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d09a:	425b      	negs	r3, r3
 800d09c:	454b      	cmp	r3, r9
 800d09e:	dc01      	bgt.n	800d0a4 <_printf_float+0x2c4>
 800d0a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0a2:	e792      	b.n	800cfca <_printf_float+0x1ea>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	4652      	mov	r2, sl
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	47b8      	blx	r7
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	f43f aef7 	beq.w	800cea2 <_printf_float+0xc2>
 800d0b4:	f109 0901 	add.w	r9, r9, #1
 800d0b8:	e7ee      	b.n	800d098 <_printf_float+0x2b8>
 800d0ba:	bf00      	nop
 800d0bc:	7fefffff 	.word	0x7fefffff
 800d0c0:	0801211c 	.word	0x0801211c
 800d0c4:	08012120 	.word	0x08012120
 800d0c8:	08012128 	.word	0x08012128
 800d0cc:	08012124 	.word	0x08012124
 800d0d0:	0801212c 	.word	0x0801212c
 800d0d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	bfa8      	it	ge
 800d0dc:	461a      	movge	r2, r3
 800d0de:	2a00      	cmp	r2, #0
 800d0e0:	4691      	mov	r9, r2
 800d0e2:	dc37      	bgt.n	800d154 <_printf_float+0x374>
 800d0e4:	f04f 0b00 	mov.w	fp, #0
 800d0e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0ec:	f104 021a 	add.w	r2, r4, #26
 800d0f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0f2:	9305      	str	r3, [sp, #20]
 800d0f4:	eba3 0309 	sub.w	r3, r3, r9
 800d0f8:	455b      	cmp	r3, fp
 800d0fa:	dc33      	bgt.n	800d164 <_printf_float+0x384>
 800d0fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d100:	429a      	cmp	r2, r3
 800d102:	db3b      	blt.n	800d17c <_printf_float+0x39c>
 800d104:	6823      	ldr	r3, [r4, #0]
 800d106:	07da      	lsls	r2, r3, #31
 800d108:	d438      	bmi.n	800d17c <_printf_float+0x39c>
 800d10a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d10c:	9b05      	ldr	r3, [sp, #20]
 800d10e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	eba2 0901 	sub.w	r9, r2, r1
 800d116:	4599      	cmp	r9, r3
 800d118:	bfa8      	it	ge
 800d11a:	4699      	movge	r9, r3
 800d11c:	f1b9 0f00 	cmp.w	r9, #0
 800d120:	dc35      	bgt.n	800d18e <_printf_float+0x3ae>
 800d122:	f04f 0800 	mov.w	r8, #0
 800d126:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d12a:	f104 0a1a 	add.w	sl, r4, #26
 800d12e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d132:	1a9b      	subs	r3, r3, r2
 800d134:	eba3 0309 	sub.w	r3, r3, r9
 800d138:	4543      	cmp	r3, r8
 800d13a:	f77f af79 	ble.w	800d030 <_printf_float+0x250>
 800d13e:	2301      	movs	r3, #1
 800d140:	4652      	mov	r2, sl
 800d142:	4631      	mov	r1, r6
 800d144:	4628      	mov	r0, r5
 800d146:	47b8      	blx	r7
 800d148:	3001      	adds	r0, #1
 800d14a:	f43f aeaa 	beq.w	800cea2 <_printf_float+0xc2>
 800d14e:	f108 0801 	add.w	r8, r8, #1
 800d152:	e7ec      	b.n	800d12e <_printf_float+0x34e>
 800d154:	4613      	mov	r3, r2
 800d156:	4631      	mov	r1, r6
 800d158:	4642      	mov	r2, r8
 800d15a:	4628      	mov	r0, r5
 800d15c:	47b8      	blx	r7
 800d15e:	3001      	adds	r0, #1
 800d160:	d1c0      	bne.n	800d0e4 <_printf_float+0x304>
 800d162:	e69e      	b.n	800cea2 <_printf_float+0xc2>
 800d164:	2301      	movs	r3, #1
 800d166:	4631      	mov	r1, r6
 800d168:	4628      	mov	r0, r5
 800d16a:	9205      	str	r2, [sp, #20]
 800d16c:	47b8      	blx	r7
 800d16e:	3001      	adds	r0, #1
 800d170:	f43f ae97 	beq.w	800cea2 <_printf_float+0xc2>
 800d174:	9a05      	ldr	r2, [sp, #20]
 800d176:	f10b 0b01 	add.w	fp, fp, #1
 800d17a:	e7b9      	b.n	800d0f0 <_printf_float+0x310>
 800d17c:	ee18 3a10 	vmov	r3, s16
 800d180:	4652      	mov	r2, sl
 800d182:	4631      	mov	r1, r6
 800d184:	4628      	mov	r0, r5
 800d186:	47b8      	blx	r7
 800d188:	3001      	adds	r0, #1
 800d18a:	d1be      	bne.n	800d10a <_printf_float+0x32a>
 800d18c:	e689      	b.n	800cea2 <_printf_float+0xc2>
 800d18e:	9a05      	ldr	r2, [sp, #20]
 800d190:	464b      	mov	r3, r9
 800d192:	4442      	add	r2, r8
 800d194:	4631      	mov	r1, r6
 800d196:	4628      	mov	r0, r5
 800d198:	47b8      	blx	r7
 800d19a:	3001      	adds	r0, #1
 800d19c:	d1c1      	bne.n	800d122 <_printf_float+0x342>
 800d19e:	e680      	b.n	800cea2 <_printf_float+0xc2>
 800d1a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1a2:	2a01      	cmp	r2, #1
 800d1a4:	dc01      	bgt.n	800d1aa <_printf_float+0x3ca>
 800d1a6:	07db      	lsls	r3, r3, #31
 800d1a8:	d538      	bpl.n	800d21c <_printf_float+0x43c>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	4642      	mov	r2, r8
 800d1ae:	4631      	mov	r1, r6
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	47b8      	blx	r7
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	f43f ae74 	beq.w	800cea2 <_printf_float+0xc2>
 800d1ba:	ee18 3a10 	vmov	r3, s16
 800d1be:	4652      	mov	r2, sl
 800d1c0:	4631      	mov	r1, r6
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	47b8      	blx	r7
 800d1c6:	3001      	adds	r0, #1
 800d1c8:	f43f ae6b 	beq.w	800cea2 <_printf_float+0xc2>
 800d1cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	f7f3 fc88 	bl	8000ae8 <__aeabi_dcmpeq>
 800d1d8:	b9d8      	cbnz	r0, 800d212 <_printf_float+0x432>
 800d1da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1dc:	f108 0201 	add.w	r2, r8, #1
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	4631      	mov	r1, r6
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	47b8      	blx	r7
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d10e      	bne.n	800d20a <_printf_float+0x42a>
 800d1ec:	e659      	b.n	800cea2 <_printf_float+0xc2>
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	4652      	mov	r2, sl
 800d1f2:	4631      	mov	r1, r6
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	47b8      	blx	r7
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	f43f ae52 	beq.w	800cea2 <_printf_float+0xc2>
 800d1fe:	f108 0801 	add.w	r8, r8, #1
 800d202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d204:	3b01      	subs	r3, #1
 800d206:	4543      	cmp	r3, r8
 800d208:	dcf1      	bgt.n	800d1ee <_printf_float+0x40e>
 800d20a:	464b      	mov	r3, r9
 800d20c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d210:	e6dc      	b.n	800cfcc <_printf_float+0x1ec>
 800d212:	f04f 0800 	mov.w	r8, #0
 800d216:	f104 0a1a 	add.w	sl, r4, #26
 800d21a:	e7f2      	b.n	800d202 <_printf_float+0x422>
 800d21c:	2301      	movs	r3, #1
 800d21e:	4642      	mov	r2, r8
 800d220:	e7df      	b.n	800d1e2 <_printf_float+0x402>
 800d222:	2301      	movs	r3, #1
 800d224:	464a      	mov	r2, r9
 800d226:	4631      	mov	r1, r6
 800d228:	4628      	mov	r0, r5
 800d22a:	47b8      	blx	r7
 800d22c:	3001      	adds	r0, #1
 800d22e:	f43f ae38 	beq.w	800cea2 <_printf_float+0xc2>
 800d232:	f108 0801 	add.w	r8, r8, #1
 800d236:	68e3      	ldr	r3, [r4, #12]
 800d238:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d23a:	1a5b      	subs	r3, r3, r1
 800d23c:	4543      	cmp	r3, r8
 800d23e:	dcf0      	bgt.n	800d222 <_printf_float+0x442>
 800d240:	e6fa      	b.n	800d038 <_printf_float+0x258>
 800d242:	f04f 0800 	mov.w	r8, #0
 800d246:	f104 0919 	add.w	r9, r4, #25
 800d24a:	e7f4      	b.n	800d236 <_printf_float+0x456>

0800d24c <_printf_common>:
 800d24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d250:	4616      	mov	r6, r2
 800d252:	4699      	mov	r9, r3
 800d254:	688a      	ldr	r2, [r1, #8]
 800d256:	690b      	ldr	r3, [r1, #16]
 800d258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d25c:	4293      	cmp	r3, r2
 800d25e:	bfb8      	it	lt
 800d260:	4613      	movlt	r3, r2
 800d262:	6033      	str	r3, [r6, #0]
 800d264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d268:	4607      	mov	r7, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	b10a      	cbz	r2, 800d272 <_printf_common+0x26>
 800d26e:	3301      	adds	r3, #1
 800d270:	6033      	str	r3, [r6, #0]
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	0699      	lsls	r1, r3, #26
 800d276:	bf42      	ittt	mi
 800d278:	6833      	ldrmi	r3, [r6, #0]
 800d27a:	3302      	addmi	r3, #2
 800d27c:	6033      	strmi	r3, [r6, #0]
 800d27e:	6825      	ldr	r5, [r4, #0]
 800d280:	f015 0506 	ands.w	r5, r5, #6
 800d284:	d106      	bne.n	800d294 <_printf_common+0x48>
 800d286:	f104 0a19 	add.w	sl, r4, #25
 800d28a:	68e3      	ldr	r3, [r4, #12]
 800d28c:	6832      	ldr	r2, [r6, #0]
 800d28e:	1a9b      	subs	r3, r3, r2
 800d290:	42ab      	cmp	r3, r5
 800d292:	dc26      	bgt.n	800d2e2 <_printf_common+0x96>
 800d294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d298:	1e13      	subs	r3, r2, #0
 800d29a:	6822      	ldr	r2, [r4, #0]
 800d29c:	bf18      	it	ne
 800d29e:	2301      	movne	r3, #1
 800d2a0:	0692      	lsls	r2, r2, #26
 800d2a2:	d42b      	bmi.n	800d2fc <_printf_common+0xb0>
 800d2a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2a8:	4649      	mov	r1, r9
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	47c0      	blx	r8
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	d01e      	beq.n	800d2f0 <_printf_common+0xa4>
 800d2b2:	6823      	ldr	r3, [r4, #0]
 800d2b4:	68e5      	ldr	r5, [r4, #12]
 800d2b6:	6832      	ldr	r2, [r6, #0]
 800d2b8:	f003 0306 	and.w	r3, r3, #6
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	bf08      	it	eq
 800d2c0:	1aad      	subeq	r5, r5, r2
 800d2c2:	68a3      	ldr	r3, [r4, #8]
 800d2c4:	6922      	ldr	r2, [r4, #16]
 800d2c6:	bf0c      	ite	eq
 800d2c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2cc:	2500      	movne	r5, #0
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	bfc4      	itt	gt
 800d2d2:	1a9b      	subgt	r3, r3, r2
 800d2d4:	18ed      	addgt	r5, r5, r3
 800d2d6:	2600      	movs	r6, #0
 800d2d8:	341a      	adds	r4, #26
 800d2da:	42b5      	cmp	r5, r6
 800d2dc:	d11a      	bne.n	800d314 <_printf_common+0xc8>
 800d2de:	2000      	movs	r0, #0
 800d2e0:	e008      	b.n	800d2f4 <_printf_common+0xa8>
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	4652      	mov	r2, sl
 800d2e6:	4649      	mov	r1, r9
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	47c0      	blx	r8
 800d2ec:	3001      	adds	r0, #1
 800d2ee:	d103      	bne.n	800d2f8 <_printf_common+0xac>
 800d2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2f8:	3501      	adds	r5, #1
 800d2fa:	e7c6      	b.n	800d28a <_printf_common+0x3e>
 800d2fc:	18e1      	adds	r1, r4, r3
 800d2fe:	1c5a      	adds	r2, r3, #1
 800d300:	2030      	movs	r0, #48	; 0x30
 800d302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d306:	4422      	add	r2, r4
 800d308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d30c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d310:	3302      	adds	r3, #2
 800d312:	e7c7      	b.n	800d2a4 <_printf_common+0x58>
 800d314:	2301      	movs	r3, #1
 800d316:	4622      	mov	r2, r4
 800d318:	4649      	mov	r1, r9
 800d31a:	4638      	mov	r0, r7
 800d31c:	47c0      	blx	r8
 800d31e:	3001      	adds	r0, #1
 800d320:	d0e6      	beq.n	800d2f0 <_printf_common+0xa4>
 800d322:	3601      	adds	r6, #1
 800d324:	e7d9      	b.n	800d2da <_printf_common+0x8e>
	...

0800d328 <_printf_i>:
 800d328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d32c:	460c      	mov	r4, r1
 800d32e:	4691      	mov	r9, r2
 800d330:	7e27      	ldrb	r7, [r4, #24]
 800d332:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d334:	2f78      	cmp	r7, #120	; 0x78
 800d336:	4680      	mov	r8, r0
 800d338:	469a      	mov	sl, r3
 800d33a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d33e:	d807      	bhi.n	800d350 <_printf_i+0x28>
 800d340:	2f62      	cmp	r7, #98	; 0x62
 800d342:	d80a      	bhi.n	800d35a <_printf_i+0x32>
 800d344:	2f00      	cmp	r7, #0
 800d346:	f000 80d8 	beq.w	800d4fa <_printf_i+0x1d2>
 800d34a:	2f58      	cmp	r7, #88	; 0x58
 800d34c:	f000 80a3 	beq.w	800d496 <_printf_i+0x16e>
 800d350:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d358:	e03a      	b.n	800d3d0 <_printf_i+0xa8>
 800d35a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d35e:	2b15      	cmp	r3, #21
 800d360:	d8f6      	bhi.n	800d350 <_printf_i+0x28>
 800d362:	a001      	add	r0, pc, #4	; (adr r0, 800d368 <_printf_i+0x40>)
 800d364:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d368:	0800d3c1 	.word	0x0800d3c1
 800d36c:	0800d3d5 	.word	0x0800d3d5
 800d370:	0800d351 	.word	0x0800d351
 800d374:	0800d351 	.word	0x0800d351
 800d378:	0800d351 	.word	0x0800d351
 800d37c:	0800d351 	.word	0x0800d351
 800d380:	0800d3d5 	.word	0x0800d3d5
 800d384:	0800d351 	.word	0x0800d351
 800d388:	0800d351 	.word	0x0800d351
 800d38c:	0800d351 	.word	0x0800d351
 800d390:	0800d351 	.word	0x0800d351
 800d394:	0800d4e1 	.word	0x0800d4e1
 800d398:	0800d405 	.word	0x0800d405
 800d39c:	0800d4c3 	.word	0x0800d4c3
 800d3a0:	0800d351 	.word	0x0800d351
 800d3a4:	0800d351 	.word	0x0800d351
 800d3a8:	0800d503 	.word	0x0800d503
 800d3ac:	0800d351 	.word	0x0800d351
 800d3b0:	0800d405 	.word	0x0800d405
 800d3b4:	0800d351 	.word	0x0800d351
 800d3b8:	0800d351 	.word	0x0800d351
 800d3bc:	0800d4cb 	.word	0x0800d4cb
 800d3c0:	680b      	ldr	r3, [r1, #0]
 800d3c2:	1d1a      	adds	r2, r3, #4
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	600a      	str	r2, [r1, #0]
 800d3c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d3cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e0a3      	b.n	800d51c <_printf_i+0x1f4>
 800d3d4:	6825      	ldr	r5, [r4, #0]
 800d3d6:	6808      	ldr	r0, [r1, #0]
 800d3d8:	062e      	lsls	r6, r5, #24
 800d3da:	f100 0304 	add.w	r3, r0, #4
 800d3de:	d50a      	bpl.n	800d3f6 <_printf_i+0xce>
 800d3e0:	6805      	ldr	r5, [r0, #0]
 800d3e2:	600b      	str	r3, [r1, #0]
 800d3e4:	2d00      	cmp	r5, #0
 800d3e6:	da03      	bge.n	800d3f0 <_printf_i+0xc8>
 800d3e8:	232d      	movs	r3, #45	; 0x2d
 800d3ea:	426d      	negs	r5, r5
 800d3ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3f0:	485e      	ldr	r0, [pc, #376]	; (800d56c <_printf_i+0x244>)
 800d3f2:	230a      	movs	r3, #10
 800d3f4:	e019      	b.n	800d42a <_printf_i+0x102>
 800d3f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d3fa:	6805      	ldr	r5, [r0, #0]
 800d3fc:	600b      	str	r3, [r1, #0]
 800d3fe:	bf18      	it	ne
 800d400:	b22d      	sxthne	r5, r5
 800d402:	e7ef      	b.n	800d3e4 <_printf_i+0xbc>
 800d404:	680b      	ldr	r3, [r1, #0]
 800d406:	6825      	ldr	r5, [r4, #0]
 800d408:	1d18      	adds	r0, r3, #4
 800d40a:	6008      	str	r0, [r1, #0]
 800d40c:	0628      	lsls	r0, r5, #24
 800d40e:	d501      	bpl.n	800d414 <_printf_i+0xec>
 800d410:	681d      	ldr	r5, [r3, #0]
 800d412:	e002      	b.n	800d41a <_printf_i+0xf2>
 800d414:	0669      	lsls	r1, r5, #25
 800d416:	d5fb      	bpl.n	800d410 <_printf_i+0xe8>
 800d418:	881d      	ldrh	r5, [r3, #0]
 800d41a:	4854      	ldr	r0, [pc, #336]	; (800d56c <_printf_i+0x244>)
 800d41c:	2f6f      	cmp	r7, #111	; 0x6f
 800d41e:	bf0c      	ite	eq
 800d420:	2308      	moveq	r3, #8
 800d422:	230a      	movne	r3, #10
 800d424:	2100      	movs	r1, #0
 800d426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d42a:	6866      	ldr	r6, [r4, #4]
 800d42c:	60a6      	str	r6, [r4, #8]
 800d42e:	2e00      	cmp	r6, #0
 800d430:	bfa2      	ittt	ge
 800d432:	6821      	ldrge	r1, [r4, #0]
 800d434:	f021 0104 	bicge.w	r1, r1, #4
 800d438:	6021      	strge	r1, [r4, #0]
 800d43a:	b90d      	cbnz	r5, 800d440 <_printf_i+0x118>
 800d43c:	2e00      	cmp	r6, #0
 800d43e:	d04d      	beq.n	800d4dc <_printf_i+0x1b4>
 800d440:	4616      	mov	r6, r2
 800d442:	fbb5 f1f3 	udiv	r1, r5, r3
 800d446:	fb03 5711 	mls	r7, r3, r1, r5
 800d44a:	5dc7      	ldrb	r7, [r0, r7]
 800d44c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d450:	462f      	mov	r7, r5
 800d452:	42bb      	cmp	r3, r7
 800d454:	460d      	mov	r5, r1
 800d456:	d9f4      	bls.n	800d442 <_printf_i+0x11a>
 800d458:	2b08      	cmp	r3, #8
 800d45a:	d10b      	bne.n	800d474 <_printf_i+0x14c>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	07df      	lsls	r7, r3, #31
 800d460:	d508      	bpl.n	800d474 <_printf_i+0x14c>
 800d462:	6923      	ldr	r3, [r4, #16]
 800d464:	6861      	ldr	r1, [r4, #4]
 800d466:	4299      	cmp	r1, r3
 800d468:	bfde      	ittt	le
 800d46a:	2330      	movle	r3, #48	; 0x30
 800d46c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d470:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d474:	1b92      	subs	r2, r2, r6
 800d476:	6122      	str	r2, [r4, #16]
 800d478:	f8cd a000 	str.w	sl, [sp]
 800d47c:	464b      	mov	r3, r9
 800d47e:	aa03      	add	r2, sp, #12
 800d480:	4621      	mov	r1, r4
 800d482:	4640      	mov	r0, r8
 800d484:	f7ff fee2 	bl	800d24c <_printf_common>
 800d488:	3001      	adds	r0, #1
 800d48a:	d14c      	bne.n	800d526 <_printf_i+0x1fe>
 800d48c:	f04f 30ff 	mov.w	r0, #4294967295
 800d490:	b004      	add	sp, #16
 800d492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d496:	4835      	ldr	r0, [pc, #212]	; (800d56c <_printf_i+0x244>)
 800d498:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d49c:	6823      	ldr	r3, [r4, #0]
 800d49e:	680e      	ldr	r6, [r1, #0]
 800d4a0:	061f      	lsls	r7, r3, #24
 800d4a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800d4a6:	600e      	str	r6, [r1, #0]
 800d4a8:	d514      	bpl.n	800d4d4 <_printf_i+0x1ac>
 800d4aa:	07d9      	lsls	r1, r3, #31
 800d4ac:	bf44      	itt	mi
 800d4ae:	f043 0320 	orrmi.w	r3, r3, #32
 800d4b2:	6023      	strmi	r3, [r4, #0]
 800d4b4:	b91d      	cbnz	r5, 800d4be <_printf_i+0x196>
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	f023 0320 	bic.w	r3, r3, #32
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	2310      	movs	r3, #16
 800d4c0:	e7b0      	b.n	800d424 <_printf_i+0xfc>
 800d4c2:	6823      	ldr	r3, [r4, #0]
 800d4c4:	f043 0320 	orr.w	r3, r3, #32
 800d4c8:	6023      	str	r3, [r4, #0]
 800d4ca:	2378      	movs	r3, #120	; 0x78
 800d4cc:	4828      	ldr	r0, [pc, #160]	; (800d570 <_printf_i+0x248>)
 800d4ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4d2:	e7e3      	b.n	800d49c <_printf_i+0x174>
 800d4d4:	065e      	lsls	r6, r3, #25
 800d4d6:	bf48      	it	mi
 800d4d8:	b2ad      	uxthmi	r5, r5
 800d4da:	e7e6      	b.n	800d4aa <_printf_i+0x182>
 800d4dc:	4616      	mov	r6, r2
 800d4de:	e7bb      	b.n	800d458 <_printf_i+0x130>
 800d4e0:	680b      	ldr	r3, [r1, #0]
 800d4e2:	6826      	ldr	r6, [r4, #0]
 800d4e4:	6960      	ldr	r0, [r4, #20]
 800d4e6:	1d1d      	adds	r5, r3, #4
 800d4e8:	600d      	str	r5, [r1, #0]
 800d4ea:	0635      	lsls	r5, r6, #24
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	d501      	bpl.n	800d4f4 <_printf_i+0x1cc>
 800d4f0:	6018      	str	r0, [r3, #0]
 800d4f2:	e002      	b.n	800d4fa <_printf_i+0x1d2>
 800d4f4:	0671      	lsls	r1, r6, #25
 800d4f6:	d5fb      	bpl.n	800d4f0 <_printf_i+0x1c8>
 800d4f8:	8018      	strh	r0, [r3, #0]
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	6123      	str	r3, [r4, #16]
 800d4fe:	4616      	mov	r6, r2
 800d500:	e7ba      	b.n	800d478 <_printf_i+0x150>
 800d502:	680b      	ldr	r3, [r1, #0]
 800d504:	1d1a      	adds	r2, r3, #4
 800d506:	600a      	str	r2, [r1, #0]
 800d508:	681e      	ldr	r6, [r3, #0]
 800d50a:	6862      	ldr	r2, [r4, #4]
 800d50c:	2100      	movs	r1, #0
 800d50e:	4630      	mov	r0, r6
 800d510:	f7f2 fe76 	bl	8000200 <memchr>
 800d514:	b108      	cbz	r0, 800d51a <_printf_i+0x1f2>
 800d516:	1b80      	subs	r0, r0, r6
 800d518:	6060      	str	r0, [r4, #4]
 800d51a:	6863      	ldr	r3, [r4, #4]
 800d51c:	6123      	str	r3, [r4, #16]
 800d51e:	2300      	movs	r3, #0
 800d520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d524:	e7a8      	b.n	800d478 <_printf_i+0x150>
 800d526:	6923      	ldr	r3, [r4, #16]
 800d528:	4632      	mov	r2, r6
 800d52a:	4649      	mov	r1, r9
 800d52c:	4640      	mov	r0, r8
 800d52e:	47d0      	blx	sl
 800d530:	3001      	adds	r0, #1
 800d532:	d0ab      	beq.n	800d48c <_printf_i+0x164>
 800d534:	6823      	ldr	r3, [r4, #0]
 800d536:	079b      	lsls	r3, r3, #30
 800d538:	d413      	bmi.n	800d562 <_printf_i+0x23a>
 800d53a:	68e0      	ldr	r0, [r4, #12]
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	4298      	cmp	r0, r3
 800d540:	bfb8      	it	lt
 800d542:	4618      	movlt	r0, r3
 800d544:	e7a4      	b.n	800d490 <_printf_i+0x168>
 800d546:	2301      	movs	r3, #1
 800d548:	4632      	mov	r2, r6
 800d54a:	4649      	mov	r1, r9
 800d54c:	4640      	mov	r0, r8
 800d54e:	47d0      	blx	sl
 800d550:	3001      	adds	r0, #1
 800d552:	d09b      	beq.n	800d48c <_printf_i+0x164>
 800d554:	3501      	adds	r5, #1
 800d556:	68e3      	ldr	r3, [r4, #12]
 800d558:	9903      	ldr	r1, [sp, #12]
 800d55a:	1a5b      	subs	r3, r3, r1
 800d55c:	42ab      	cmp	r3, r5
 800d55e:	dcf2      	bgt.n	800d546 <_printf_i+0x21e>
 800d560:	e7eb      	b.n	800d53a <_printf_i+0x212>
 800d562:	2500      	movs	r5, #0
 800d564:	f104 0619 	add.w	r6, r4, #25
 800d568:	e7f5      	b.n	800d556 <_printf_i+0x22e>
 800d56a:	bf00      	nop
 800d56c:	0801212e 	.word	0x0801212e
 800d570:	0801213f 	.word	0x0801213f

0800d574 <_scanf_float>:
 800d574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	b087      	sub	sp, #28
 800d57a:	4617      	mov	r7, r2
 800d57c:	9303      	str	r3, [sp, #12]
 800d57e:	688b      	ldr	r3, [r1, #8]
 800d580:	1e5a      	subs	r2, r3, #1
 800d582:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d586:	bf83      	ittte	hi
 800d588:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d58c:	195b      	addhi	r3, r3, r5
 800d58e:	9302      	strhi	r3, [sp, #8]
 800d590:	2300      	movls	r3, #0
 800d592:	bf86      	itte	hi
 800d594:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d598:	608b      	strhi	r3, [r1, #8]
 800d59a:	9302      	strls	r3, [sp, #8]
 800d59c:	680b      	ldr	r3, [r1, #0]
 800d59e:	468b      	mov	fp, r1
 800d5a0:	2500      	movs	r5, #0
 800d5a2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d5a6:	f84b 3b1c 	str.w	r3, [fp], #28
 800d5aa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d5ae:	4680      	mov	r8, r0
 800d5b0:	460c      	mov	r4, r1
 800d5b2:	465e      	mov	r6, fp
 800d5b4:	46aa      	mov	sl, r5
 800d5b6:	46a9      	mov	r9, r5
 800d5b8:	9501      	str	r5, [sp, #4]
 800d5ba:	68a2      	ldr	r2, [r4, #8]
 800d5bc:	b152      	cbz	r2, 800d5d4 <_scanf_float+0x60>
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	2b4e      	cmp	r3, #78	; 0x4e
 800d5c4:	d864      	bhi.n	800d690 <_scanf_float+0x11c>
 800d5c6:	2b40      	cmp	r3, #64	; 0x40
 800d5c8:	d83c      	bhi.n	800d644 <_scanf_float+0xd0>
 800d5ca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d5ce:	b2c8      	uxtb	r0, r1
 800d5d0:	280e      	cmp	r0, #14
 800d5d2:	d93a      	bls.n	800d64a <_scanf_float+0xd6>
 800d5d4:	f1b9 0f00 	cmp.w	r9, #0
 800d5d8:	d003      	beq.n	800d5e2 <_scanf_float+0x6e>
 800d5da:	6823      	ldr	r3, [r4, #0]
 800d5dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5e0:	6023      	str	r3, [r4, #0]
 800d5e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5e6:	f1ba 0f01 	cmp.w	sl, #1
 800d5ea:	f200 8113 	bhi.w	800d814 <_scanf_float+0x2a0>
 800d5ee:	455e      	cmp	r6, fp
 800d5f0:	f200 8105 	bhi.w	800d7fe <_scanf_float+0x28a>
 800d5f4:	2501      	movs	r5, #1
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	b007      	add	sp, #28
 800d5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5fe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d602:	2a0d      	cmp	r2, #13
 800d604:	d8e6      	bhi.n	800d5d4 <_scanf_float+0x60>
 800d606:	a101      	add	r1, pc, #4	; (adr r1, 800d60c <_scanf_float+0x98>)
 800d608:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d60c:	0800d74b 	.word	0x0800d74b
 800d610:	0800d5d5 	.word	0x0800d5d5
 800d614:	0800d5d5 	.word	0x0800d5d5
 800d618:	0800d5d5 	.word	0x0800d5d5
 800d61c:	0800d7ab 	.word	0x0800d7ab
 800d620:	0800d783 	.word	0x0800d783
 800d624:	0800d5d5 	.word	0x0800d5d5
 800d628:	0800d5d5 	.word	0x0800d5d5
 800d62c:	0800d759 	.word	0x0800d759
 800d630:	0800d5d5 	.word	0x0800d5d5
 800d634:	0800d5d5 	.word	0x0800d5d5
 800d638:	0800d5d5 	.word	0x0800d5d5
 800d63c:	0800d5d5 	.word	0x0800d5d5
 800d640:	0800d711 	.word	0x0800d711
 800d644:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d648:	e7db      	b.n	800d602 <_scanf_float+0x8e>
 800d64a:	290e      	cmp	r1, #14
 800d64c:	d8c2      	bhi.n	800d5d4 <_scanf_float+0x60>
 800d64e:	a001      	add	r0, pc, #4	; (adr r0, 800d654 <_scanf_float+0xe0>)
 800d650:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d654:	0800d703 	.word	0x0800d703
 800d658:	0800d5d5 	.word	0x0800d5d5
 800d65c:	0800d703 	.word	0x0800d703
 800d660:	0800d797 	.word	0x0800d797
 800d664:	0800d5d5 	.word	0x0800d5d5
 800d668:	0800d6b1 	.word	0x0800d6b1
 800d66c:	0800d6ed 	.word	0x0800d6ed
 800d670:	0800d6ed 	.word	0x0800d6ed
 800d674:	0800d6ed 	.word	0x0800d6ed
 800d678:	0800d6ed 	.word	0x0800d6ed
 800d67c:	0800d6ed 	.word	0x0800d6ed
 800d680:	0800d6ed 	.word	0x0800d6ed
 800d684:	0800d6ed 	.word	0x0800d6ed
 800d688:	0800d6ed 	.word	0x0800d6ed
 800d68c:	0800d6ed 	.word	0x0800d6ed
 800d690:	2b6e      	cmp	r3, #110	; 0x6e
 800d692:	d809      	bhi.n	800d6a8 <_scanf_float+0x134>
 800d694:	2b60      	cmp	r3, #96	; 0x60
 800d696:	d8b2      	bhi.n	800d5fe <_scanf_float+0x8a>
 800d698:	2b54      	cmp	r3, #84	; 0x54
 800d69a:	d077      	beq.n	800d78c <_scanf_float+0x218>
 800d69c:	2b59      	cmp	r3, #89	; 0x59
 800d69e:	d199      	bne.n	800d5d4 <_scanf_float+0x60>
 800d6a0:	2d07      	cmp	r5, #7
 800d6a2:	d197      	bne.n	800d5d4 <_scanf_float+0x60>
 800d6a4:	2508      	movs	r5, #8
 800d6a6:	e029      	b.n	800d6fc <_scanf_float+0x188>
 800d6a8:	2b74      	cmp	r3, #116	; 0x74
 800d6aa:	d06f      	beq.n	800d78c <_scanf_float+0x218>
 800d6ac:	2b79      	cmp	r3, #121	; 0x79
 800d6ae:	e7f6      	b.n	800d69e <_scanf_float+0x12a>
 800d6b0:	6821      	ldr	r1, [r4, #0]
 800d6b2:	05c8      	lsls	r0, r1, #23
 800d6b4:	d51a      	bpl.n	800d6ec <_scanf_float+0x178>
 800d6b6:	9b02      	ldr	r3, [sp, #8]
 800d6b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d6bc:	6021      	str	r1, [r4, #0]
 800d6be:	f109 0901 	add.w	r9, r9, #1
 800d6c2:	b11b      	cbz	r3, 800d6cc <_scanf_float+0x158>
 800d6c4:	3b01      	subs	r3, #1
 800d6c6:	3201      	adds	r2, #1
 800d6c8:	9302      	str	r3, [sp, #8]
 800d6ca:	60a2      	str	r2, [r4, #8]
 800d6cc:	68a3      	ldr	r3, [r4, #8]
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	60a3      	str	r3, [r4, #8]
 800d6d2:	6923      	ldr	r3, [r4, #16]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	6123      	str	r3, [r4, #16]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	607b      	str	r3, [r7, #4]
 800d6e0:	f340 8084 	ble.w	800d7ec <_scanf_float+0x278>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	603b      	str	r3, [r7, #0]
 800d6ea:	e766      	b.n	800d5ba <_scanf_float+0x46>
 800d6ec:	eb1a 0f05 	cmn.w	sl, r5
 800d6f0:	f47f af70 	bne.w	800d5d4 <_scanf_float+0x60>
 800d6f4:	6822      	ldr	r2, [r4, #0]
 800d6f6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d6fa:	6022      	str	r2, [r4, #0]
 800d6fc:	f806 3b01 	strb.w	r3, [r6], #1
 800d700:	e7e4      	b.n	800d6cc <_scanf_float+0x158>
 800d702:	6822      	ldr	r2, [r4, #0]
 800d704:	0610      	lsls	r0, r2, #24
 800d706:	f57f af65 	bpl.w	800d5d4 <_scanf_float+0x60>
 800d70a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d70e:	e7f4      	b.n	800d6fa <_scanf_float+0x186>
 800d710:	f1ba 0f00 	cmp.w	sl, #0
 800d714:	d10e      	bne.n	800d734 <_scanf_float+0x1c0>
 800d716:	f1b9 0f00 	cmp.w	r9, #0
 800d71a:	d10e      	bne.n	800d73a <_scanf_float+0x1c6>
 800d71c:	6822      	ldr	r2, [r4, #0]
 800d71e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d722:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d726:	d108      	bne.n	800d73a <_scanf_float+0x1c6>
 800d728:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d72c:	6022      	str	r2, [r4, #0]
 800d72e:	f04f 0a01 	mov.w	sl, #1
 800d732:	e7e3      	b.n	800d6fc <_scanf_float+0x188>
 800d734:	f1ba 0f02 	cmp.w	sl, #2
 800d738:	d055      	beq.n	800d7e6 <_scanf_float+0x272>
 800d73a:	2d01      	cmp	r5, #1
 800d73c:	d002      	beq.n	800d744 <_scanf_float+0x1d0>
 800d73e:	2d04      	cmp	r5, #4
 800d740:	f47f af48 	bne.w	800d5d4 <_scanf_float+0x60>
 800d744:	3501      	adds	r5, #1
 800d746:	b2ed      	uxtb	r5, r5
 800d748:	e7d8      	b.n	800d6fc <_scanf_float+0x188>
 800d74a:	f1ba 0f01 	cmp.w	sl, #1
 800d74e:	f47f af41 	bne.w	800d5d4 <_scanf_float+0x60>
 800d752:	f04f 0a02 	mov.w	sl, #2
 800d756:	e7d1      	b.n	800d6fc <_scanf_float+0x188>
 800d758:	b97d      	cbnz	r5, 800d77a <_scanf_float+0x206>
 800d75a:	f1b9 0f00 	cmp.w	r9, #0
 800d75e:	f47f af3c 	bne.w	800d5da <_scanf_float+0x66>
 800d762:	6822      	ldr	r2, [r4, #0]
 800d764:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d768:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d76c:	f47f af39 	bne.w	800d5e2 <_scanf_float+0x6e>
 800d770:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d774:	6022      	str	r2, [r4, #0]
 800d776:	2501      	movs	r5, #1
 800d778:	e7c0      	b.n	800d6fc <_scanf_float+0x188>
 800d77a:	2d03      	cmp	r5, #3
 800d77c:	d0e2      	beq.n	800d744 <_scanf_float+0x1d0>
 800d77e:	2d05      	cmp	r5, #5
 800d780:	e7de      	b.n	800d740 <_scanf_float+0x1cc>
 800d782:	2d02      	cmp	r5, #2
 800d784:	f47f af26 	bne.w	800d5d4 <_scanf_float+0x60>
 800d788:	2503      	movs	r5, #3
 800d78a:	e7b7      	b.n	800d6fc <_scanf_float+0x188>
 800d78c:	2d06      	cmp	r5, #6
 800d78e:	f47f af21 	bne.w	800d5d4 <_scanf_float+0x60>
 800d792:	2507      	movs	r5, #7
 800d794:	e7b2      	b.n	800d6fc <_scanf_float+0x188>
 800d796:	6822      	ldr	r2, [r4, #0]
 800d798:	0591      	lsls	r1, r2, #22
 800d79a:	f57f af1b 	bpl.w	800d5d4 <_scanf_float+0x60>
 800d79e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d7a2:	6022      	str	r2, [r4, #0]
 800d7a4:	f8cd 9004 	str.w	r9, [sp, #4]
 800d7a8:	e7a8      	b.n	800d6fc <_scanf_float+0x188>
 800d7aa:	6822      	ldr	r2, [r4, #0]
 800d7ac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d7b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d7b4:	d006      	beq.n	800d7c4 <_scanf_float+0x250>
 800d7b6:	0550      	lsls	r0, r2, #21
 800d7b8:	f57f af0c 	bpl.w	800d5d4 <_scanf_float+0x60>
 800d7bc:	f1b9 0f00 	cmp.w	r9, #0
 800d7c0:	f43f af0f 	beq.w	800d5e2 <_scanf_float+0x6e>
 800d7c4:	0591      	lsls	r1, r2, #22
 800d7c6:	bf58      	it	pl
 800d7c8:	9901      	ldrpl	r1, [sp, #4]
 800d7ca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d7ce:	bf58      	it	pl
 800d7d0:	eba9 0101 	subpl.w	r1, r9, r1
 800d7d4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d7d8:	bf58      	it	pl
 800d7da:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d7de:	6022      	str	r2, [r4, #0]
 800d7e0:	f04f 0900 	mov.w	r9, #0
 800d7e4:	e78a      	b.n	800d6fc <_scanf_float+0x188>
 800d7e6:	f04f 0a03 	mov.w	sl, #3
 800d7ea:	e787      	b.n	800d6fc <_scanf_float+0x188>
 800d7ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d7f0:	4639      	mov	r1, r7
 800d7f2:	4640      	mov	r0, r8
 800d7f4:	4798      	blx	r3
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	f43f aedf 	beq.w	800d5ba <_scanf_float+0x46>
 800d7fc:	e6ea      	b.n	800d5d4 <_scanf_float+0x60>
 800d7fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d802:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d806:	463a      	mov	r2, r7
 800d808:	4640      	mov	r0, r8
 800d80a:	4798      	blx	r3
 800d80c:	6923      	ldr	r3, [r4, #16]
 800d80e:	3b01      	subs	r3, #1
 800d810:	6123      	str	r3, [r4, #16]
 800d812:	e6ec      	b.n	800d5ee <_scanf_float+0x7a>
 800d814:	1e6b      	subs	r3, r5, #1
 800d816:	2b06      	cmp	r3, #6
 800d818:	d825      	bhi.n	800d866 <_scanf_float+0x2f2>
 800d81a:	2d02      	cmp	r5, #2
 800d81c:	d836      	bhi.n	800d88c <_scanf_float+0x318>
 800d81e:	455e      	cmp	r6, fp
 800d820:	f67f aee8 	bls.w	800d5f4 <_scanf_float+0x80>
 800d824:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d828:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d82c:	463a      	mov	r2, r7
 800d82e:	4640      	mov	r0, r8
 800d830:	4798      	blx	r3
 800d832:	6923      	ldr	r3, [r4, #16]
 800d834:	3b01      	subs	r3, #1
 800d836:	6123      	str	r3, [r4, #16]
 800d838:	e7f1      	b.n	800d81e <_scanf_float+0x2aa>
 800d83a:	9802      	ldr	r0, [sp, #8]
 800d83c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d840:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d844:	9002      	str	r0, [sp, #8]
 800d846:	463a      	mov	r2, r7
 800d848:	4640      	mov	r0, r8
 800d84a:	4798      	blx	r3
 800d84c:	6923      	ldr	r3, [r4, #16]
 800d84e:	3b01      	subs	r3, #1
 800d850:	6123      	str	r3, [r4, #16]
 800d852:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d856:	fa5f fa8a 	uxtb.w	sl, sl
 800d85a:	f1ba 0f02 	cmp.w	sl, #2
 800d85e:	d1ec      	bne.n	800d83a <_scanf_float+0x2c6>
 800d860:	3d03      	subs	r5, #3
 800d862:	b2ed      	uxtb	r5, r5
 800d864:	1b76      	subs	r6, r6, r5
 800d866:	6823      	ldr	r3, [r4, #0]
 800d868:	05da      	lsls	r2, r3, #23
 800d86a:	d52f      	bpl.n	800d8cc <_scanf_float+0x358>
 800d86c:	055b      	lsls	r3, r3, #21
 800d86e:	d510      	bpl.n	800d892 <_scanf_float+0x31e>
 800d870:	455e      	cmp	r6, fp
 800d872:	f67f aebf 	bls.w	800d5f4 <_scanf_float+0x80>
 800d876:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d87a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d87e:	463a      	mov	r2, r7
 800d880:	4640      	mov	r0, r8
 800d882:	4798      	blx	r3
 800d884:	6923      	ldr	r3, [r4, #16]
 800d886:	3b01      	subs	r3, #1
 800d888:	6123      	str	r3, [r4, #16]
 800d88a:	e7f1      	b.n	800d870 <_scanf_float+0x2fc>
 800d88c:	46aa      	mov	sl, r5
 800d88e:	9602      	str	r6, [sp, #8]
 800d890:	e7df      	b.n	800d852 <_scanf_float+0x2de>
 800d892:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d896:	6923      	ldr	r3, [r4, #16]
 800d898:	2965      	cmp	r1, #101	; 0x65
 800d89a:	f103 33ff 	add.w	r3, r3, #4294967295
 800d89e:	f106 35ff 	add.w	r5, r6, #4294967295
 800d8a2:	6123      	str	r3, [r4, #16]
 800d8a4:	d00c      	beq.n	800d8c0 <_scanf_float+0x34c>
 800d8a6:	2945      	cmp	r1, #69	; 0x45
 800d8a8:	d00a      	beq.n	800d8c0 <_scanf_float+0x34c>
 800d8aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d8ae:	463a      	mov	r2, r7
 800d8b0:	4640      	mov	r0, r8
 800d8b2:	4798      	blx	r3
 800d8b4:	6923      	ldr	r3, [r4, #16]
 800d8b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	1eb5      	subs	r5, r6, #2
 800d8be:	6123      	str	r3, [r4, #16]
 800d8c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d8c4:	463a      	mov	r2, r7
 800d8c6:	4640      	mov	r0, r8
 800d8c8:	4798      	blx	r3
 800d8ca:	462e      	mov	r6, r5
 800d8cc:	6825      	ldr	r5, [r4, #0]
 800d8ce:	f015 0510 	ands.w	r5, r5, #16
 800d8d2:	d158      	bne.n	800d986 <_scanf_float+0x412>
 800d8d4:	7035      	strb	r5, [r6, #0]
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d8dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8e0:	d11c      	bne.n	800d91c <_scanf_float+0x3a8>
 800d8e2:	9b01      	ldr	r3, [sp, #4]
 800d8e4:	454b      	cmp	r3, r9
 800d8e6:	eba3 0209 	sub.w	r2, r3, r9
 800d8ea:	d124      	bne.n	800d936 <_scanf_float+0x3c2>
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	4659      	mov	r1, fp
 800d8f0:	4640      	mov	r0, r8
 800d8f2:	f000 ff97 	bl	800e824 <_strtod_r>
 800d8f6:	9b03      	ldr	r3, [sp, #12]
 800d8f8:	6821      	ldr	r1, [r4, #0]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f011 0f02 	tst.w	r1, #2
 800d900:	ec57 6b10 	vmov	r6, r7, d0
 800d904:	f103 0204 	add.w	r2, r3, #4
 800d908:	d020      	beq.n	800d94c <_scanf_float+0x3d8>
 800d90a:	9903      	ldr	r1, [sp, #12]
 800d90c:	600a      	str	r2, [r1, #0]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	e9c3 6700 	strd	r6, r7, [r3]
 800d914:	68e3      	ldr	r3, [r4, #12]
 800d916:	3301      	adds	r3, #1
 800d918:	60e3      	str	r3, [r4, #12]
 800d91a:	e66c      	b.n	800d5f6 <_scanf_float+0x82>
 800d91c:	9b04      	ldr	r3, [sp, #16]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d0e4      	beq.n	800d8ec <_scanf_float+0x378>
 800d922:	9905      	ldr	r1, [sp, #20]
 800d924:	230a      	movs	r3, #10
 800d926:	462a      	mov	r2, r5
 800d928:	3101      	adds	r1, #1
 800d92a:	4640      	mov	r0, r8
 800d92c:	f001 f804 	bl	800e938 <_strtol_r>
 800d930:	9b04      	ldr	r3, [sp, #16]
 800d932:	9e05      	ldr	r6, [sp, #20]
 800d934:	1ac2      	subs	r2, r0, r3
 800d936:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d93a:	429e      	cmp	r6, r3
 800d93c:	bf28      	it	cs
 800d93e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d942:	4912      	ldr	r1, [pc, #72]	; (800d98c <_scanf_float+0x418>)
 800d944:	4630      	mov	r0, r6
 800d946:	f000 f8c9 	bl	800dadc <siprintf>
 800d94a:	e7cf      	b.n	800d8ec <_scanf_float+0x378>
 800d94c:	f011 0f04 	tst.w	r1, #4
 800d950:	9903      	ldr	r1, [sp, #12]
 800d952:	600a      	str	r2, [r1, #0]
 800d954:	d1db      	bne.n	800d90e <_scanf_float+0x39a>
 800d956:	f8d3 8000 	ldr.w	r8, [r3]
 800d95a:	ee10 2a10 	vmov	r2, s0
 800d95e:	ee10 0a10 	vmov	r0, s0
 800d962:	463b      	mov	r3, r7
 800d964:	4639      	mov	r1, r7
 800d966:	f7f3 f8f1 	bl	8000b4c <__aeabi_dcmpun>
 800d96a:	b128      	cbz	r0, 800d978 <_scanf_float+0x404>
 800d96c:	4808      	ldr	r0, [pc, #32]	; (800d990 <_scanf_float+0x41c>)
 800d96e:	f000 f8af 	bl	800dad0 <nanf>
 800d972:	ed88 0a00 	vstr	s0, [r8]
 800d976:	e7cd      	b.n	800d914 <_scanf_float+0x3a0>
 800d978:	4630      	mov	r0, r6
 800d97a:	4639      	mov	r1, r7
 800d97c:	f7f3 f944 	bl	8000c08 <__aeabi_d2f>
 800d980:	f8c8 0000 	str.w	r0, [r8]
 800d984:	e7c6      	b.n	800d914 <_scanf_float+0x3a0>
 800d986:	2500      	movs	r5, #0
 800d988:	e635      	b.n	800d5f6 <_scanf_float+0x82>
 800d98a:	bf00      	nop
 800d98c:	08012150 	.word	0x08012150
 800d990:	080124c8 	.word	0x080124c8

0800d994 <iprintf>:
 800d994:	b40f      	push	{r0, r1, r2, r3}
 800d996:	4b0a      	ldr	r3, [pc, #40]	; (800d9c0 <iprintf+0x2c>)
 800d998:	b513      	push	{r0, r1, r4, lr}
 800d99a:	681c      	ldr	r4, [r3, #0]
 800d99c:	b124      	cbz	r4, 800d9a8 <iprintf+0x14>
 800d99e:	69a3      	ldr	r3, [r4, #24]
 800d9a0:	b913      	cbnz	r3, 800d9a8 <iprintf+0x14>
 800d9a2:	4620      	mov	r0, r4
 800d9a4:	f002 f882 	bl	800faac <__sinit>
 800d9a8:	ab05      	add	r3, sp, #20
 800d9aa:	9a04      	ldr	r2, [sp, #16]
 800d9ac:	68a1      	ldr	r1, [r4, #8]
 800d9ae:	9301      	str	r3, [sp, #4]
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f003 fb73 	bl	801109c <_vfiprintf_r>
 800d9b6:	b002      	add	sp, #8
 800d9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9bc:	b004      	add	sp, #16
 800d9be:	4770      	bx	lr
 800d9c0:	20000024 	.word	0x20000024

0800d9c4 <_puts_r>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	460e      	mov	r6, r1
 800d9c8:	4605      	mov	r5, r0
 800d9ca:	b118      	cbz	r0, 800d9d4 <_puts_r+0x10>
 800d9cc:	6983      	ldr	r3, [r0, #24]
 800d9ce:	b90b      	cbnz	r3, 800d9d4 <_puts_r+0x10>
 800d9d0:	f002 f86c 	bl	800faac <__sinit>
 800d9d4:	69ab      	ldr	r3, [r5, #24]
 800d9d6:	68ac      	ldr	r4, [r5, #8]
 800d9d8:	b913      	cbnz	r3, 800d9e0 <_puts_r+0x1c>
 800d9da:	4628      	mov	r0, r5
 800d9dc:	f002 f866 	bl	800faac <__sinit>
 800d9e0:	4b2c      	ldr	r3, [pc, #176]	; (800da94 <_puts_r+0xd0>)
 800d9e2:	429c      	cmp	r4, r3
 800d9e4:	d120      	bne.n	800da28 <_puts_r+0x64>
 800d9e6:	686c      	ldr	r4, [r5, #4]
 800d9e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9ea:	07db      	lsls	r3, r3, #31
 800d9ec:	d405      	bmi.n	800d9fa <_puts_r+0x36>
 800d9ee:	89a3      	ldrh	r3, [r4, #12]
 800d9f0:	0598      	lsls	r0, r3, #22
 800d9f2:	d402      	bmi.n	800d9fa <_puts_r+0x36>
 800d9f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9f6:	f002 fc6a 	bl	80102ce <__retarget_lock_acquire_recursive>
 800d9fa:	89a3      	ldrh	r3, [r4, #12]
 800d9fc:	0719      	lsls	r1, r3, #28
 800d9fe:	d51d      	bpl.n	800da3c <_puts_r+0x78>
 800da00:	6923      	ldr	r3, [r4, #16]
 800da02:	b1db      	cbz	r3, 800da3c <_puts_r+0x78>
 800da04:	3e01      	subs	r6, #1
 800da06:	68a3      	ldr	r3, [r4, #8]
 800da08:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800da0c:	3b01      	subs	r3, #1
 800da0e:	60a3      	str	r3, [r4, #8]
 800da10:	bb39      	cbnz	r1, 800da62 <_puts_r+0x9e>
 800da12:	2b00      	cmp	r3, #0
 800da14:	da38      	bge.n	800da88 <_puts_r+0xc4>
 800da16:	4622      	mov	r2, r4
 800da18:	210a      	movs	r1, #10
 800da1a:	4628      	mov	r0, r5
 800da1c:	f000 ffd2 	bl	800e9c4 <__swbuf_r>
 800da20:	3001      	adds	r0, #1
 800da22:	d011      	beq.n	800da48 <_puts_r+0x84>
 800da24:	250a      	movs	r5, #10
 800da26:	e011      	b.n	800da4c <_puts_r+0x88>
 800da28:	4b1b      	ldr	r3, [pc, #108]	; (800da98 <_puts_r+0xd4>)
 800da2a:	429c      	cmp	r4, r3
 800da2c:	d101      	bne.n	800da32 <_puts_r+0x6e>
 800da2e:	68ac      	ldr	r4, [r5, #8]
 800da30:	e7da      	b.n	800d9e8 <_puts_r+0x24>
 800da32:	4b1a      	ldr	r3, [pc, #104]	; (800da9c <_puts_r+0xd8>)
 800da34:	429c      	cmp	r4, r3
 800da36:	bf08      	it	eq
 800da38:	68ec      	ldreq	r4, [r5, #12]
 800da3a:	e7d5      	b.n	800d9e8 <_puts_r+0x24>
 800da3c:	4621      	mov	r1, r4
 800da3e:	4628      	mov	r0, r5
 800da40:	f001 f824 	bl	800ea8c <__swsetup_r>
 800da44:	2800      	cmp	r0, #0
 800da46:	d0dd      	beq.n	800da04 <_puts_r+0x40>
 800da48:	f04f 35ff 	mov.w	r5, #4294967295
 800da4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da4e:	07da      	lsls	r2, r3, #31
 800da50:	d405      	bmi.n	800da5e <_puts_r+0x9a>
 800da52:	89a3      	ldrh	r3, [r4, #12]
 800da54:	059b      	lsls	r3, r3, #22
 800da56:	d402      	bmi.n	800da5e <_puts_r+0x9a>
 800da58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da5a:	f002 fc39 	bl	80102d0 <__retarget_lock_release_recursive>
 800da5e:	4628      	mov	r0, r5
 800da60:	bd70      	pop	{r4, r5, r6, pc}
 800da62:	2b00      	cmp	r3, #0
 800da64:	da04      	bge.n	800da70 <_puts_r+0xac>
 800da66:	69a2      	ldr	r2, [r4, #24]
 800da68:	429a      	cmp	r2, r3
 800da6a:	dc06      	bgt.n	800da7a <_puts_r+0xb6>
 800da6c:	290a      	cmp	r1, #10
 800da6e:	d004      	beq.n	800da7a <_puts_r+0xb6>
 800da70:	6823      	ldr	r3, [r4, #0]
 800da72:	1c5a      	adds	r2, r3, #1
 800da74:	6022      	str	r2, [r4, #0]
 800da76:	7019      	strb	r1, [r3, #0]
 800da78:	e7c5      	b.n	800da06 <_puts_r+0x42>
 800da7a:	4622      	mov	r2, r4
 800da7c:	4628      	mov	r0, r5
 800da7e:	f000 ffa1 	bl	800e9c4 <__swbuf_r>
 800da82:	3001      	adds	r0, #1
 800da84:	d1bf      	bne.n	800da06 <_puts_r+0x42>
 800da86:	e7df      	b.n	800da48 <_puts_r+0x84>
 800da88:	6823      	ldr	r3, [r4, #0]
 800da8a:	250a      	movs	r5, #10
 800da8c:	1c5a      	adds	r2, r3, #1
 800da8e:	6022      	str	r2, [r4, #0]
 800da90:	701d      	strb	r5, [r3, #0]
 800da92:	e7db      	b.n	800da4c <_puts_r+0x88>
 800da94:	0801225c 	.word	0x0801225c
 800da98:	0801227c 	.word	0x0801227c
 800da9c:	0801223c 	.word	0x0801223c

0800daa0 <puts>:
 800daa0:	4b02      	ldr	r3, [pc, #8]	; (800daac <puts+0xc>)
 800daa2:	4601      	mov	r1, r0
 800daa4:	6818      	ldr	r0, [r3, #0]
 800daa6:	f7ff bf8d 	b.w	800d9c4 <_puts_r>
 800daaa:	bf00      	nop
 800daac:	20000024 	.word	0x20000024

0800dab0 <_sbrk_r>:
 800dab0:	b538      	push	{r3, r4, r5, lr}
 800dab2:	4d06      	ldr	r5, [pc, #24]	; (800dacc <_sbrk_r+0x1c>)
 800dab4:	2300      	movs	r3, #0
 800dab6:	4604      	mov	r4, r0
 800dab8:	4608      	mov	r0, r1
 800daba:	602b      	str	r3, [r5, #0]
 800dabc:	f7f6 f806 	bl	8003acc <_sbrk>
 800dac0:	1c43      	adds	r3, r0, #1
 800dac2:	d102      	bne.n	800daca <_sbrk_r+0x1a>
 800dac4:	682b      	ldr	r3, [r5, #0]
 800dac6:	b103      	cbz	r3, 800daca <_sbrk_r+0x1a>
 800dac8:	6023      	str	r3, [r4, #0]
 800daca:	bd38      	pop	{r3, r4, r5, pc}
 800dacc:	20001a8c 	.word	0x20001a8c

0800dad0 <nanf>:
 800dad0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dad8 <nanf+0x8>
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	7fc00000 	.word	0x7fc00000

0800dadc <siprintf>:
 800dadc:	b40e      	push	{r1, r2, r3}
 800dade:	b500      	push	{lr}
 800dae0:	b09c      	sub	sp, #112	; 0x70
 800dae2:	ab1d      	add	r3, sp, #116	; 0x74
 800dae4:	9002      	str	r0, [sp, #8]
 800dae6:	9006      	str	r0, [sp, #24]
 800dae8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800daec:	4809      	ldr	r0, [pc, #36]	; (800db14 <siprintf+0x38>)
 800daee:	9107      	str	r1, [sp, #28]
 800daf0:	9104      	str	r1, [sp, #16]
 800daf2:	4909      	ldr	r1, [pc, #36]	; (800db18 <siprintf+0x3c>)
 800daf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800daf8:	9105      	str	r1, [sp, #20]
 800dafa:	6800      	ldr	r0, [r0, #0]
 800dafc:	9301      	str	r3, [sp, #4]
 800dafe:	a902      	add	r1, sp, #8
 800db00:	f003 f9a2 	bl	8010e48 <_svfiprintf_r>
 800db04:	9b02      	ldr	r3, [sp, #8]
 800db06:	2200      	movs	r2, #0
 800db08:	701a      	strb	r2, [r3, #0]
 800db0a:	b01c      	add	sp, #112	; 0x70
 800db0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db10:	b003      	add	sp, #12
 800db12:	4770      	bx	lr
 800db14:	20000024 	.word	0x20000024
 800db18:	ffff0208 	.word	0xffff0208

0800db1c <__sread>:
 800db1c:	b510      	push	{r4, lr}
 800db1e:	460c      	mov	r4, r1
 800db20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db24:	f003 fbea 	bl	80112fc <_read_r>
 800db28:	2800      	cmp	r0, #0
 800db2a:	bfab      	itete	ge
 800db2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db2e:	89a3      	ldrhlt	r3, [r4, #12]
 800db30:	181b      	addge	r3, r3, r0
 800db32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db36:	bfac      	ite	ge
 800db38:	6563      	strge	r3, [r4, #84]	; 0x54
 800db3a:	81a3      	strhlt	r3, [r4, #12]
 800db3c:	bd10      	pop	{r4, pc}

0800db3e <__swrite>:
 800db3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db42:	461f      	mov	r7, r3
 800db44:	898b      	ldrh	r3, [r1, #12]
 800db46:	05db      	lsls	r3, r3, #23
 800db48:	4605      	mov	r5, r0
 800db4a:	460c      	mov	r4, r1
 800db4c:	4616      	mov	r6, r2
 800db4e:	d505      	bpl.n	800db5c <__swrite+0x1e>
 800db50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db54:	2302      	movs	r3, #2
 800db56:	2200      	movs	r2, #0
 800db58:	f002 fbbc 	bl	80102d4 <_lseek_r>
 800db5c:	89a3      	ldrh	r3, [r4, #12]
 800db5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db66:	81a3      	strh	r3, [r4, #12]
 800db68:	4632      	mov	r2, r6
 800db6a:	463b      	mov	r3, r7
 800db6c:	4628      	mov	r0, r5
 800db6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db72:	f000 bf79 	b.w	800ea68 <_write_r>

0800db76 <__sseek>:
 800db76:	b510      	push	{r4, lr}
 800db78:	460c      	mov	r4, r1
 800db7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db7e:	f002 fba9 	bl	80102d4 <_lseek_r>
 800db82:	1c43      	adds	r3, r0, #1
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	bf15      	itete	ne
 800db88:	6560      	strne	r0, [r4, #84]	; 0x54
 800db8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db92:	81a3      	strheq	r3, [r4, #12]
 800db94:	bf18      	it	ne
 800db96:	81a3      	strhne	r3, [r4, #12]
 800db98:	bd10      	pop	{r4, pc}

0800db9a <__sclose>:
 800db9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db9e:	f000 bfe3 	b.w	800eb68 <_close_r>

0800dba2 <strcpy>:
 800dba2:	4603      	mov	r3, r0
 800dba4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dba8:	f803 2b01 	strb.w	r2, [r3], #1
 800dbac:	2a00      	cmp	r2, #0
 800dbae:	d1f9      	bne.n	800dba4 <strcpy+0x2>
 800dbb0:	4770      	bx	lr

0800dbb2 <strncmp>:
 800dbb2:	b510      	push	{r4, lr}
 800dbb4:	b16a      	cbz	r2, 800dbd2 <strncmp+0x20>
 800dbb6:	3901      	subs	r1, #1
 800dbb8:	1884      	adds	r4, r0, r2
 800dbba:	f810 3b01 	ldrb.w	r3, [r0], #1
 800dbbe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d103      	bne.n	800dbce <strncmp+0x1c>
 800dbc6:	42a0      	cmp	r0, r4
 800dbc8:	d001      	beq.n	800dbce <strncmp+0x1c>
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1f5      	bne.n	800dbba <strncmp+0x8>
 800dbce:	1a98      	subs	r0, r3, r2
 800dbd0:	bd10      	pop	{r4, pc}
 800dbd2:	4610      	mov	r0, r2
 800dbd4:	e7fc      	b.n	800dbd0 <strncmp+0x1e>

0800dbd6 <sulp>:
 800dbd6:	b570      	push	{r4, r5, r6, lr}
 800dbd8:	4604      	mov	r4, r0
 800dbda:	460d      	mov	r5, r1
 800dbdc:	ec45 4b10 	vmov	d0, r4, r5
 800dbe0:	4616      	mov	r6, r2
 800dbe2:	f002 ff77 	bl	8010ad4 <__ulp>
 800dbe6:	ec51 0b10 	vmov	r0, r1, d0
 800dbea:	b17e      	cbz	r6, 800dc0c <sulp+0x36>
 800dbec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dbf0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	dd09      	ble.n	800dc0c <sulp+0x36>
 800dbf8:	051b      	lsls	r3, r3, #20
 800dbfa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dbfe:	2400      	movs	r4, #0
 800dc00:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dc04:	4622      	mov	r2, r4
 800dc06:	462b      	mov	r3, r5
 800dc08:	f7f2 fd06 	bl	8000618 <__aeabi_dmul>
 800dc0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dc10 <_strtod_l>:
 800dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc14:	b0a3      	sub	sp, #140	; 0x8c
 800dc16:	461f      	mov	r7, r3
 800dc18:	2300      	movs	r3, #0
 800dc1a:	931e      	str	r3, [sp, #120]	; 0x78
 800dc1c:	4ba4      	ldr	r3, [pc, #656]	; (800deb0 <_strtod_l+0x2a0>)
 800dc1e:	9219      	str	r2, [sp, #100]	; 0x64
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	9307      	str	r3, [sp, #28]
 800dc24:	4604      	mov	r4, r0
 800dc26:	4618      	mov	r0, r3
 800dc28:	4688      	mov	r8, r1
 800dc2a:	f7f2 fae1 	bl	80001f0 <strlen>
 800dc2e:	f04f 0a00 	mov.w	sl, #0
 800dc32:	4605      	mov	r5, r0
 800dc34:	f04f 0b00 	mov.w	fp, #0
 800dc38:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dc3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dc3e:	781a      	ldrb	r2, [r3, #0]
 800dc40:	2a2b      	cmp	r2, #43	; 0x2b
 800dc42:	d04c      	beq.n	800dcde <_strtod_l+0xce>
 800dc44:	d839      	bhi.n	800dcba <_strtod_l+0xaa>
 800dc46:	2a0d      	cmp	r2, #13
 800dc48:	d832      	bhi.n	800dcb0 <_strtod_l+0xa0>
 800dc4a:	2a08      	cmp	r2, #8
 800dc4c:	d832      	bhi.n	800dcb4 <_strtod_l+0xa4>
 800dc4e:	2a00      	cmp	r2, #0
 800dc50:	d03c      	beq.n	800dccc <_strtod_l+0xbc>
 800dc52:	2300      	movs	r3, #0
 800dc54:	930e      	str	r3, [sp, #56]	; 0x38
 800dc56:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800dc58:	7833      	ldrb	r3, [r6, #0]
 800dc5a:	2b30      	cmp	r3, #48	; 0x30
 800dc5c:	f040 80b4 	bne.w	800ddc8 <_strtod_l+0x1b8>
 800dc60:	7873      	ldrb	r3, [r6, #1]
 800dc62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dc66:	2b58      	cmp	r3, #88	; 0x58
 800dc68:	d16c      	bne.n	800dd44 <_strtod_l+0x134>
 800dc6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc6c:	9301      	str	r3, [sp, #4]
 800dc6e:	ab1e      	add	r3, sp, #120	; 0x78
 800dc70:	9702      	str	r7, [sp, #8]
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	4a8f      	ldr	r2, [pc, #572]	; (800deb4 <_strtod_l+0x2a4>)
 800dc76:	ab1f      	add	r3, sp, #124	; 0x7c
 800dc78:	a91d      	add	r1, sp, #116	; 0x74
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	f002 f81a 	bl	800fcb4 <__gethex>
 800dc80:	f010 0707 	ands.w	r7, r0, #7
 800dc84:	4605      	mov	r5, r0
 800dc86:	d005      	beq.n	800dc94 <_strtod_l+0x84>
 800dc88:	2f06      	cmp	r7, #6
 800dc8a:	d12a      	bne.n	800dce2 <_strtod_l+0xd2>
 800dc8c:	3601      	adds	r6, #1
 800dc8e:	2300      	movs	r3, #0
 800dc90:	961d      	str	r6, [sp, #116]	; 0x74
 800dc92:	930e      	str	r3, [sp, #56]	; 0x38
 800dc94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	f040 8596 	bne.w	800e7c8 <_strtod_l+0xbb8>
 800dc9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc9e:	b1db      	cbz	r3, 800dcd8 <_strtod_l+0xc8>
 800dca0:	4652      	mov	r2, sl
 800dca2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dca6:	ec43 2b10 	vmov	d0, r2, r3
 800dcaa:	b023      	add	sp, #140	; 0x8c
 800dcac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcb0:	2a20      	cmp	r2, #32
 800dcb2:	d1ce      	bne.n	800dc52 <_strtod_l+0x42>
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	931d      	str	r3, [sp, #116]	; 0x74
 800dcb8:	e7c0      	b.n	800dc3c <_strtod_l+0x2c>
 800dcba:	2a2d      	cmp	r2, #45	; 0x2d
 800dcbc:	d1c9      	bne.n	800dc52 <_strtod_l+0x42>
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	920e      	str	r2, [sp, #56]	; 0x38
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	921d      	str	r2, [sp, #116]	; 0x74
 800dcc6:	785b      	ldrb	r3, [r3, #1]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d1c4      	bne.n	800dc56 <_strtod_l+0x46>
 800dccc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dcce:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f040 8576 	bne.w	800e7c4 <_strtod_l+0xbb4>
 800dcd8:	4652      	mov	r2, sl
 800dcda:	465b      	mov	r3, fp
 800dcdc:	e7e3      	b.n	800dca6 <_strtod_l+0x96>
 800dcde:	2200      	movs	r2, #0
 800dce0:	e7ee      	b.n	800dcc0 <_strtod_l+0xb0>
 800dce2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dce4:	b13a      	cbz	r2, 800dcf6 <_strtod_l+0xe6>
 800dce6:	2135      	movs	r1, #53	; 0x35
 800dce8:	a820      	add	r0, sp, #128	; 0x80
 800dcea:	f002 fffe 	bl	8010cea <__copybits>
 800dcee:	991e      	ldr	r1, [sp, #120]	; 0x78
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f002 fbc3 	bl	801047c <_Bfree>
 800dcf6:	3f01      	subs	r7, #1
 800dcf8:	2f05      	cmp	r7, #5
 800dcfa:	d807      	bhi.n	800dd0c <_strtod_l+0xfc>
 800dcfc:	e8df f007 	tbb	[pc, r7]
 800dd00:	1d180b0e 	.word	0x1d180b0e
 800dd04:	030e      	.short	0x030e
 800dd06:	f04f 0b00 	mov.w	fp, #0
 800dd0a:	46da      	mov	sl, fp
 800dd0c:	0728      	lsls	r0, r5, #28
 800dd0e:	d5c1      	bpl.n	800dc94 <_strtod_l+0x84>
 800dd10:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800dd14:	e7be      	b.n	800dc94 <_strtod_l+0x84>
 800dd16:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800dd1a:	e7f7      	b.n	800dd0c <_strtod_l+0xfc>
 800dd1c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800dd20:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dd22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800dd26:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dd2a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800dd2e:	e7ed      	b.n	800dd0c <_strtod_l+0xfc>
 800dd30:	f8df b184 	ldr.w	fp, [pc, #388]	; 800deb8 <_strtod_l+0x2a8>
 800dd34:	f04f 0a00 	mov.w	sl, #0
 800dd38:	e7e8      	b.n	800dd0c <_strtod_l+0xfc>
 800dd3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800dd3e:	f04f 3aff 	mov.w	sl, #4294967295
 800dd42:	e7e3      	b.n	800dd0c <_strtod_l+0xfc>
 800dd44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	921d      	str	r2, [sp, #116]	; 0x74
 800dd4a:	785b      	ldrb	r3, [r3, #1]
 800dd4c:	2b30      	cmp	r3, #48	; 0x30
 800dd4e:	d0f9      	beq.n	800dd44 <_strtod_l+0x134>
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d09f      	beq.n	800dc94 <_strtod_l+0x84>
 800dd54:	2301      	movs	r3, #1
 800dd56:	f04f 0900 	mov.w	r9, #0
 800dd5a:	9304      	str	r3, [sp, #16]
 800dd5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd5e:	930a      	str	r3, [sp, #40]	; 0x28
 800dd60:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dd64:	464f      	mov	r7, r9
 800dd66:	220a      	movs	r2, #10
 800dd68:	981d      	ldr	r0, [sp, #116]	; 0x74
 800dd6a:	7806      	ldrb	r6, [r0, #0]
 800dd6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800dd70:	b2d9      	uxtb	r1, r3
 800dd72:	2909      	cmp	r1, #9
 800dd74:	d92a      	bls.n	800ddcc <_strtod_l+0x1bc>
 800dd76:	9907      	ldr	r1, [sp, #28]
 800dd78:	462a      	mov	r2, r5
 800dd7a:	f7ff ff1a 	bl	800dbb2 <strncmp>
 800dd7e:	b398      	cbz	r0, 800dde8 <_strtod_l+0x1d8>
 800dd80:	2000      	movs	r0, #0
 800dd82:	4633      	mov	r3, r6
 800dd84:	463d      	mov	r5, r7
 800dd86:	9007      	str	r0, [sp, #28]
 800dd88:	4602      	mov	r2, r0
 800dd8a:	2b65      	cmp	r3, #101	; 0x65
 800dd8c:	d001      	beq.n	800dd92 <_strtod_l+0x182>
 800dd8e:	2b45      	cmp	r3, #69	; 0x45
 800dd90:	d118      	bne.n	800ddc4 <_strtod_l+0x1b4>
 800dd92:	b91d      	cbnz	r5, 800dd9c <_strtod_l+0x18c>
 800dd94:	9b04      	ldr	r3, [sp, #16]
 800dd96:	4303      	orrs	r3, r0
 800dd98:	d098      	beq.n	800dccc <_strtod_l+0xbc>
 800dd9a:	2500      	movs	r5, #0
 800dd9c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800dda0:	f108 0301 	add.w	r3, r8, #1
 800dda4:	931d      	str	r3, [sp, #116]	; 0x74
 800dda6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ddaa:	2b2b      	cmp	r3, #43	; 0x2b
 800ddac:	d075      	beq.n	800de9a <_strtod_l+0x28a>
 800ddae:	2b2d      	cmp	r3, #45	; 0x2d
 800ddb0:	d07b      	beq.n	800deaa <_strtod_l+0x29a>
 800ddb2:	f04f 0c00 	mov.w	ip, #0
 800ddb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ddba:	2909      	cmp	r1, #9
 800ddbc:	f240 8082 	bls.w	800dec4 <_strtod_l+0x2b4>
 800ddc0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ddc4:	2600      	movs	r6, #0
 800ddc6:	e09d      	b.n	800df04 <_strtod_l+0x2f4>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	e7c4      	b.n	800dd56 <_strtod_l+0x146>
 800ddcc:	2f08      	cmp	r7, #8
 800ddce:	bfd8      	it	le
 800ddd0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ddd2:	f100 0001 	add.w	r0, r0, #1
 800ddd6:	bfda      	itte	le
 800ddd8:	fb02 3301 	mlale	r3, r2, r1, r3
 800dddc:	9309      	strle	r3, [sp, #36]	; 0x24
 800ddde:	fb02 3909 	mlagt	r9, r2, r9, r3
 800dde2:	3701      	adds	r7, #1
 800dde4:	901d      	str	r0, [sp, #116]	; 0x74
 800dde6:	e7bf      	b.n	800dd68 <_strtod_l+0x158>
 800dde8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddea:	195a      	adds	r2, r3, r5
 800ddec:	921d      	str	r2, [sp, #116]	; 0x74
 800ddee:	5d5b      	ldrb	r3, [r3, r5]
 800ddf0:	2f00      	cmp	r7, #0
 800ddf2:	d037      	beq.n	800de64 <_strtod_l+0x254>
 800ddf4:	9007      	str	r0, [sp, #28]
 800ddf6:	463d      	mov	r5, r7
 800ddf8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800ddfc:	2a09      	cmp	r2, #9
 800ddfe:	d912      	bls.n	800de26 <_strtod_l+0x216>
 800de00:	2201      	movs	r2, #1
 800de02:	e7c2      	b.n	800dd8a <_strtod_l+0x17a>
 800de04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de06:	1c5a      	adds	r2, r3, #1
 800de08:	921d      	str	r2, [sp, #116]	; 0x74
 800de0a:	785b      	ldrb	r3, [r3, #1]
 800de0c:	3001      	adds	r0, #1
 800de0e:	2b30      	cmp	r3, #48	; 0x30
 800de10:	d0f8      	beq.n	800de04 <_strtod_l+0x1f4>
 800de12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800de16:	2a08      	cmp	r2, #8
 800de18:	f200 84db 	bhi.w	800e7d2 <_strtod_l+0xbc2>
 800de1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800de1e:	9007      	str	r0, [sp, #28]
 800de20:	2000      	movs	r0, #0
 800de22:	920a      	str	r2, [sp, #40]	; 0x28
 800de24:	4605      	mov	r5, r0
 800de26:	3b30      	subs	r3, #48	; 0x30
 800de28:	f100 0201 	add.w	r2, r0, #1
 800de2c:	d014      	beq.n	800de58 <_strtod_l+0x248>
 800de2e:	9907      	ldr	r1, [sp, #28]
 800de30:	4411      	add	r1, r2
 800de32:	9107      	str	r1, [sp, #28]
 800de34:	462a      	mov	r2, r5
 800de36:	eb00 0e05 	add.w	lr, r0, r5
 800de3a:	210a      	movs	r1, #10
 800de3c:	4572      	cmp	r2, lr
 800de3e:	d113      	bne.n	800de68 <_strtod_l+0x258>
 800de40:	182a      	adds	r2, r5, r0
 800de42:	2a08      	cmp	r2, #8
 800de44:	f105 0501 	add.w	r5, r5, #1
 800de48:	4405      	add	r5, r0
 800de4a:	dc1c      	bgt.n	800de86 <_strtod_l+0x276>
 800de4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de4e:	220a      	movs	r2, #10
 800de50:	fb02 3301 	mla	r3, r2, r1, r3
 800de54:	9309      	str	r3, [sp, #36]	; 0x24
 800de56:	2200      	movs	r2, #0
 800de58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800de5a:	1c59      	adds	r1, r3, #1
 800de5c:	911d      	str	r1, [sp, #116]	; 0x74
 800de5e:	785b      	ldrb	r3, [r3, #1]
 800de60:	4610      	mov	r0, r2
 800de62:	e7c9      	b.n	800ddf8 <_strtod_l+0x1e8>
 800de64:	4638      	mov	r0, r7
 800de66:	e7d2      	b.n	800de0e <_strtod_l+0x1fe>
 800de68:	2a08      	cmp	r2, #8
 800de6a:	dc04      	bgt.n	800de76 <_strtod_l+0x266>
 800de6c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800de6e:	434e      	muls	r6, r1
 800de70:	9609      	str	r6, [sp, #36]	; 0x24
 800de72:	3201      	adds	r2, #1
 800de74:	e7e2      	b.n	800de3c <_strtod_l+0x22c>
 800de76:	f102 0c01 	add.w	ip, r2, #1
 800de7a:	f1bc 0f10 	cmp.w	ip, #16
 800de7e:	bfd8      	it	le
 800de80:	fb01 f909 	mulle.w	r9, r1, r9
 800de84:	e7f5      	b.n	800de72 <_strtod_l+0x262>
 800de86:	2d10      	cmp	r5, #16
 800de88:	bfdc      	itt	le
 800de8a:	220a      	movle	r2, #10
 800de8c:	fb02 3909 	mlale	r9, r2, r9, r3
 800de90:	e7e1      	b.n	800de56 <_strtod_l+0x246>
 800de92:	2300      	movs	r3, #0
 800de94:	9307      	str	r3, [sp, #28]
 800de96:	2201      	movs	r2, #1
 800de98:	e77c      	b.n	800dd94 <_strtod_l+0x184>
 800de9a:	f04f 0c00 	mov.w	ip, #0
 800de9e:	f108 0302 	add.w	r3, r8, #2
 800dea2:	931d      	str	r3, [sp, #116]	; 0x74
 800dea4:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dea8:	e785      	b.n	800ddb6 <_strtod_l+0x1a6>
 800deaa:	f04f 0c01 	mov.w	ip, #1
 800deae:	e7f6      	b.n	800de9e <_strtod_l+0x28e>
 800deb0:	08012308 	.word	0x08012308
 800deb4:	08012158 	.word	0x08012158
 800deb8:	7ff00000 	.word	0x7ff00000
 800debc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800debe:	1c59      	adds	r1, r3, #1
 800dec0:	911d      	str	r1, [sp, #116]	; 0x74
 800dec2:	785b      	ldrb	r3, [r3, #1]
 800dec4:	2b30      	cmp	r3, #48	; 0x30
 800dec6:	d0f9      	beq.n	800debc <_strtod_l+0x2ac>
 800dec8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800decc:	2908      	cmp	r1, #8
 800dece:	f63f af79 	bhi.w	800ddc4 <_strtod_l+0x1b4>
 800ded2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ded6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ded8:	9308      	str	r3, [sp, #32]
 800deda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dedc:	1c59      	adds	r1, r3, #1
 800dede:	911d      	str	r1, [sp, #116]	; 0x74
 800dee0:	785b      	ldrb	r3, [r3, #1]
 800dee2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800dee6:	2e09      	cmp	r6, #9
 800dee8:	d937      	bls.n	800df5a <_strtod_l+0x34a>
 800deea:	9e08      	ldr	r6, [sp, #32]
 800deec:	1b89      	subs	r1, r1, r6
 800deee:	2908      	cmp	r1, #8
 800def0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800def4:	dc02      	bgt.n	800defc <_strtod_l+0x2ec>
 800def6:	4576      	cmp	r6, lr
 800def8:	bfa8      	it	ge
 800defa:	4676      	movge	r6, lr
 800defc:	f1bc 0f00 	cmp.w	ip, #0
 800df00:	d000      	beq.n	800df04 <_strtod_l+0x2f4>
 800df02:	4276      	negs	r6, r6
 800df04:	2d00      	cmp	r5, #0
 800df06:	d14f      	bne.n	800dfa8 <_strtod_l+0x398>
 800df08:	9904      	ldr	r1, [sp, #16]
 800df0a:	4301      	orrs	r1, r0
 800df0c:	f47f aec2 	bne.w	800dc94 <_strtod_l+0x84>
 800df10:	2a00      	cmp	r2, #0
 800df12:	f47f aedb 	bne.w	800dccc <_strtod_l+0xbc>
 800df16:	2b69      	cmp	r3, #105	; 0x69
 800df18:	d027      	beq.n	800df6a <_strtod_l+0x35a>
 800df1a:	dc24      	bgt.n	800df66 <_strtod_l+0x356>
 800df1c:	2b49      	cmp	r3, #73	; 0x49
 800df1e:	d024      	beq.n	800df6a <_strtod_l+0x35a>
 800df20:	2b4e      	cmp	r3, #78	; 0x4e
 800df22:	f47f aed3 	bne.w	800dccc <_strtod_l+0xbc>
 800df26:	499e      	ldr	r1, [pc, #632]	; (800e1a0 <_strtod_l+0x590>)
 800df28:	a81d      	add	r0, sp, #116	; 0x74
 800df2a:	f002 f91b 	bl	8010164 <__match>
 800df2e:	2800      	cmp	r0, #0
 800df30:	f43f aecc 	beq.w	800dccc <_strtod_l+0xbc>
 800df34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df36:	781b      	ldrb	r3, [r3, #0]
 800df38:	2b28      	cmp	r3, #40	; 0x28
 800df3a:	d12d      	bne.n	800df98 <_strtod_l+0x388>
 800df3c:	4999      	ldr	r1, [pc, #612]	; (800e1a4 <_strtod_l+0x594>)
 800df3e:	aa20      	add	r2, sp, #128	; 0x80
 800df40:	a81d      	add	r0, sp, #116	; 0x74
 800df42:	f002 f923 	bl	801018c <__hexnan>
 800df46:	2805      	cmp	r0, #5
 800df48:	d126      	bne.n	800df98 <_strtod_l+0x388>
 800df4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df4c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800df50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800df54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800df58:	e69c      	b.n	800dc94 <_strtod_l+0x84>
 800df5a:	210a      	movs	r1, #10
 800df5c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800df60:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800df64:	e7b9      	b.n	800deda <_strtod_l+0x2ca>
 800df66:	2b6e      	cmp	r3, #110	; 0x6e
 800df68:	e7db      	b.n	800df22 <_strtod_l+0x312>
 800df6a:	498f      	ldr	r1, [pc, #572]	; (800e1a8 <_strtod_l+0x598>)
 800df6c:	a81d      	add	r0, sp, #116	; 0x74
 800df6e:	f002 f8f9 	bl	8010164 <__match>
 800df72:	2800      	cmp	r0, #0
 800df74:	f43f aeaa 	beq.w	800dccc <_strtod_l+0xbc>
 800df78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df7a:	498c      	ldr	r1, [pc, #560]	; (800e1ac <_strtod_l+0x59c>)
 800df7c:	3b01      	subs	r3, #1
 800df7e:	a81d      	add	r0, sp, #116	; 0x74
 800df80:	931d      	str	r3, [sp, #116]	; 0x74
 800df82:	f002 f8ef 	bl	8010164 <__match>
 800df86:	b910      	cbnz	r0, 800df8e <_strtod_l+0x37e>
 800df88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800df8a:	3301      	adds	r3, #1
 800df8c:	931d      	str	r3, [sp, #116]	; 0x74
 800df8e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800e1bc <_strtod_l+0x5ac>
 800df92:	f04f 0a00 	mov.w	sl, #0
 800df96:	e67d      	b.n	800dc94 <_strtod_l+0x84>
 800df98:	4885      	ldr	r0, [pc, #532]	; (800e1b0 <_strtod_l+0x5a0>)
 800df9a:	f003 f9c1 	bl	8011320 <nan>
 800df9e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800dfa2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dfa6:	e675      	b.n	800dc94 <_strtod_l+0x84>
 800dfa8:	9b07      	ldr	r3, [sp, #28]
 800dfaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfac:	1af3      	subs	r3, r6, r3
 800dfae:	2f00      	cmp	r7, #0
 800dfb0:	bf08      	it	eq
 800dfb2:	462f      	moveq	r7, r5
 800dfb4:	2d10      	cmp	r5, #16
 800dfb6:	9308      	str	r3, [sp, #32]
 800dfb8:	46a8      	mov	r8, r5
 800dfba:	bfa8      	it	ge
 800dfbc:	f04f 0810 	movge.w	r8, #16
 800dfc0:	f7f2 fab0 	bl	8000524 <__aeabi_ui2d>
 800dfc4:	2d09      	cmp	r5, #9
 800dfc6:	4682      	mov	sl, r0
 800dfc8:	468b      	mov	fp, r1
 800dfca:	dd13      	ble.n	800dff4 <_strtod_l+0x3e4>
 800dfcc:	4b79      	ldr	r3, [pc, #484]	; (800e1b4 <_strtod_l+0x5a4>)
 800dfce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dfd2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dfd6:	f7f2 fb1f 	bl	8000618 <__aeabi_dmul>
 800dfda:	4682      	mov	sl, r0
 800dfdc:	4648      	mov	r0, r9
 800dfde:	468b      	mov	fp, r1
 800dfe0:	f7f2 faa0 	bl	8000524 <__aeabi_ui2d>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	4650      	mov	r0, sl
 800dfea:	4659      	mov	r1, fp
 800dfec:	f7f2 f95e 	bl	80002ac <__adddf3>
 800dff0:	4682      	mov	sl, r0
 800dff2:	468b      	mov	fp, r1
 800dff4:	2d0f      	cmp	r5, #15
 800dff6:	dc38      	bgt.n	800e06a <_strtod_l+0x45a>
 800dff8:	9b08      	ldr	r3, [sp, #32]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	f43f ae4a 	beq.w	800dc94 <_strtod_l+0x84>
 800e000:	dd24      	ble.n	800e04c <_strtod_l+0x43c>
 800e002:	2b16      	cmp	r3, #22
 800e004:	dc0b      	bgt.n	800e01e <_strtod_l+0x40e>
 800e006:	4d6b      	ldr	r5, [pc, #428]	; (800e1b4 <_strtod_l+0x5a4>)
 800e008:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e00c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e010:	4652      	mov	r2, sl
 800e012:	465b      	mov	r3, fp
 800e014:	f7f2 fb00 	bl	8000618 <__aeabi_dmul>
 800e018:	4682      	mov	sl, r0
 800e01a:	468b      	mov	fp, r1
 800e01c:	e63a      	b.n	800dc94 <_strtod_l+0x84>
 800e01e:	9a08      	ldr	r2, [sp, #32]
 800e020:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800e024:	4293      	cmp	r3, r2
 800e026:	db20      	blt.n	800e06a <_strtod_l+0x45a>
 800e028:	4c62      	ldr	r4, [pc, #392]	; (800e1b4 <_strtod_l+0x5a4>)
 800e02a:	f1c5 050f 	rsb	r5, r5, #15
 800e02e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e032:	4652      	mov	r2, sl
 800e034:	465b      	mov	r3, fp
 800e036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e03a:	f7f2 faed 	bl	8000618 <__aeabi_dmul>
 800e03e:	9b08      	ldr	r3, [sp, #32]
 800e040:	1b5d      	subs	r5, r3, r5
 800e042:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e046:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e04a:	e7e3      	b.n	800e014 <_strtod_l+0x404>
 800e04c:	9b08      	ldr	r3, [sp, #32]
 800e04e:	3316      	adds	r3, #22
 800e050:	db0b      	blt.n	800e06a <_strtod_l+0x45a>
 800e052:	9b07      	ldr	r3, [sp, #28]
 800e054:	4a57      	ldr	r2, [pc, #348]	; (800e1b4 <_strtod_l+0x5a4>)
 800e056:	1b9e      	subs	r6, r3, r6
 800e058:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800e05c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e060:	4650      	mov	r0, sl
 800e062:	4659      	mov	r1, fp
 800e064:	f7f2 fc02 	bl	800086c <__aeabi_ddiv>
 800e068:	e7d6      	b.n	800e018 <_strtod_l+0x408>
 800e06a:	9b08      	ldr	r3, [sp, #32]
 800e06c:	eba5 0808 	sub.w	r8, r5, r8
 800e070:	4498      	add	r8, r3
 800e072:	f1b8 0f00 	cmp.w	r8, #0
 800e076:	dd71      	ble.n	800e15c <_strtod_l+0x54c>
 800e078:	f018 030f 	ands.w	r3, r8, #15
 800e07c:	d00a      	beq.n	800e094 <_strtod_l+0x484>
 800e07e:	494d      	ldr	r1, [pc, #308]	; (800e1b4 <_strtod_l+0x5a4>)
 800e080:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e084:	4652      	mov	r2, sl
 800e086:	465b      	mov	r3, fp
 800e088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e08c:	f7f2 fac4 	bl	8000618 <__aeabi_dmul>
 800e090:	4682      	mov	sl, r0
 800e092:	468b      	mov	fp, r1
 800e094:	f038 080f 	bics.w	r8, r8, #15
 800e098:	d04d      	beq.n	800e136 <_strtod_l+0x526>
 800e09a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e09e:	dd22      	ble.n	800e0e6 <_strtod_l+0x4d6>
 800e0a0:	2500      	movs	r5, #0
 800e0a2:	462e      	mov	r6, r5
 800e0a4:	9509      	str	r5, [sp, #36]	; 0x24
 800e0a6:	9507      	str	r5, [sp, #28]
 800e0a8:	2322      	movs	r3, #34	; 0x22
 800e0aa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800e1bc <_strtod_l+0x5ac>
 800e0ae:	6023      	str	r3, [r4, #0]
 800e0b0:	f04f 0a00 	mov.w	sl, #0
 800e0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	f43f adec 	beq.w	800dc94 <_strtod_l+0x84>
 800e0bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e0be:	4620      	mov	r0, r4
 800e0c0:	f002 f9dc 	bl	801047c <_Bfree>
 800e0c4:	9907      	ldr	r1, [sp, #28]
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f002 f9d8 	bl	801047c <_Bfree>
 800e0cc:	4631      	mov	r1, r6
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	f002 f9d4 	bl	801047c <_Bfree>
 800e0d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0d6:	4620      	mov	r0, r4
 800e0d8:	f002 f9d0 	bl	801047c <_Bfree>
 800e0dc:	4629      	mov	r1, r5
 800e0de:	4620      	mov	r0, r4
 800e0e0:	f002 f9cc 	bl	801047c <_Bfree>
 800e0e4:	e5d6      	b.n	800dc94 <_strtod_l+0x84>
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e0ec:	4650      	mov	r0, sl
 800e0ee:	4659      	mov	r1, fp
 800e0f0:	4699      	mov	r9, r3
 800e0f2:	f1b8 0f01 	cmp.w	r8, #1
 800e0f6:	dc21      	bgt.n	800e13c <_strtod_l+0x52c>
 800e0f8:	b10b      	cbz	r3, 800e0fe <_strtod_l+0x4ee>
 800e0fa:	4682      	mov	sl, r0
 800e0fc:	468b      	mov	fp, r1
 800e0fe:	4b2e      	ldr	r3, [pc, #184]	; (800e1b8 <_strtod_l+0x5a8>)
 800e100:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e104:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800e108:	4652      	mov	r2, sl
 800e10a:	465b      	mov	r3, fp
 800e10c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800e110:	f7f2 fa82 	bl	8000618 <__aeabi_dmul>
 800e114:	4b29      	ldr	r3, [pc, #164]	; (800e1bc <_strtod_l+0x5ac>)
 800e116:	460a      	mov	r2, r1
 800e118:	400b      	ands	r3, r1
 800e11a:	4929      	ldr	r1, [pc, #164]	; (800e1c0 <_strtod_l+0x5b0>)
 800e11c:	428b      	cmp	r3, r1
 800e11e:	4682      	mov	sl, r0
 800e120:	d8be      	bhi.n	800e0a0 <_strtod_l+0x490>
 800e122:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e126:	428b      	cmp	r3, r1
 800e128:	bf86      	itte	hi
 800e12a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e1c4 <_strtod_l+0x5b4>
 800e12e:	f04f 3aff 	movhi.w	sl, #4294967295
 800e132:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e136:	2300      	movs	r3, #0
 800e138:	9304      	str	r3, [sp, #16]
 800e13a:	e081      	b.n	800e240 <_strtod_l+0x630>
 800e13c:	f018 0f01 	tst.w	r8, #1
 800e140:	d007      	beq.n	800e152 <_strtod_l+0x542>
 800e142:	4b1d      	ldr	r3, [pc, #116]	; (800e1b8 <_strtod_l+0x5a8>)
 800e144:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14c:	f7f2 fa64 	bl	8000618 <__aeabi_dmul>
 800e150:	2301      	movs	r3, #1
 800e152:	f109 0901 	add.w	r9, r9, #1
 800e156:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e15a:	e7ca      	b.n	800e0f2 <_strtod_l+0x4e2>
 800e15c:	d0eb      	beq.n	800e136 <_strtod_l+0x526>
 800e15e:	f1c8 0800 	rsb	r8, r8, #0
 800e162:	f018 020f 	ands.w	r2, r8, #15
 800e166:	d00a      	beq.n	800e17e <_strtod_l+0x56e>
 800e168:	4b12      	ldr	r3, [pc, #72]	; (800e1b4 <_strtod_l+0x5a4>)
 800e16a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e16e:	4650      	mov	r0, sl
 800e170:	4659      	mov	r1, fp
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	f7f2 fb79 	bl	800086c <__aeabi_ddiv>
 800e17a:	4682      	mov	sl, r0
 800e17c:	468b      	mov	fp, r1
 800e17e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e182:	d0d8      	beq.n	800e136 <_strtod_l+0x526>
 800e184:	f1b8 0f1f 	cmp.w	r8, #31
 800e188:	dd1e      	ble.n	800e1c8 <_strtod_l+0x5b8>
 800e18a:	2500      	movs	r5, #0
 800e18c:	462e      	mov	r6, r5
 800e18e:	9509      	str	r5, [sp, #36]	; 0x24
 800e190:	9507      	str	r5, [sp, #28]
 800e192:	2322      	movs	r3, #34	; 0x22
 800e194:	f04f 0a00 	mov.w	sl, #0
 800e198:	f04f 0b00 	mov.w	fp, #0
 800e19c:	6023      	str	r3, [r4, #0]
 800e19e:	e789      	b.n	800e0b4 <_strtod_l+0x4a4>
 800e1a0:	08012129 	.word	0x08012129
 800e1a4:	0801216c 	.word	0x0801216c
 800e1a8:	08012121 	.word	0x08012121
 800e1ac:	080121ab 	.word	0x080121ab
 800e1b0:	080124c8 	.word	0x080124c8
 800e1b4:	080123a8 	.word	0x080123a8
 800e1b8:	08012380 	.word	0x08012380
 800e1bc:	7ff00000 	.word	0x7ff00000
 800e1c0:	7ca00000 	.word	0x7ca00000
 800e1c4:	7fefffff 	.word	0x7fefffff
 800e1c8:	f018 0310 	ands.w	r3, r8, #16
 800e1cc:	bf18      	it	ne
 800e1ce:	236a      	movne	r3, #106	; 0x6a
 800e1d0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800e588 <_strtod_l+0x978>
 800e1d4:	9304      	str	r3, [sp, #16]
 800e1d6:	4650      	mov	r0, sl
 800e1d8:	4659      	mov	r1, fp
 800e1da:	2300      	movs	r3, #0
 800e1dc:	f018 0f01 	tst.w	r8, #1
 800e1e0:	d004      	beq.n	800e1ec <_strtod_l+0x5dc>
 800e1e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e1e6:	f7f2 fa17 	bl	8000618 <__aeabi_dmul>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 800e1f0:	f109 0908 	add.w	r9, r9, #8
 800e1f4:	d1f2      	bne.n	800e1dc <_strtod_l+0x5cc>
 800e1f6:	b10b      	cbz	r3, 800e1fc <_strtod_l+0x5ec>
 800e1f8:	4682      	mov	sl, r0
 800e1fa:	468b      	mov	fp, r1
 800e1fc:	9b04      	ldr	r3, [sp, #16]
 800e1fe:	b1bb      	cbz	r3, 800e230 <_strtod_l+0x620>
 800e200:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e204:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e208:	2b00      	cmp	r3, #0
 800e20a:	4659      	mov	r1, fp
 800e20c:	dd10      	ble.n	800e230 <_strtod_l+0x620>
 800e20e:	2b1f      	cmp	r3, #31
 800e210:	f340 8128 	ble.w	800e464 <_strtod_l+0x854>
 800e214:	2b34      	cmp	r3, #52	; 0x34
 800e216:	bfde      	ittt	le
 800e218:	3b20      	suble	r3, #32
 800e21a:	f04f 32ff 	movle.w	r2, #4294967295
 800e21e:	fa02 f303 	lslle.w	r3, r2, r3
 800e222:	f04f 0a00 	mov.w	sl, #0
 800e226:	bfcc      	ite	gt
 800e228:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e22c:	ea03 0b01 	andle.w	fp, r3, r1
 800e230:	2200      	movs	r2, #0
 800e232:	2300      	movs	r3, #0
 800e234:	4650      	mov	r0, sl
 800e236:	4659      	mov	r1, fp
 800e238:	f7f2 fc56 	bl	8000ae8 <__aeabi_dcmpeq>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d1a4      	bne.n	800e18a <_strtod_l+0x57a>
 800e240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e242:	9300      	str	r3, [sp, #0]
 800e244:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e246:	462b      	mov	r3, r5
 800e248:	463a      	mov	r2, r7
 800e24a:	4620      	mov	r0, r4
 800e24c:	f002 f982 	bl	8010554 <__s2b>
 800e250:	9009      	str	r0, [sp, #36]	; 0x24
 800e252:	2800      	cmp	r0, #0
 800e254:	f43f af24 	beq.w	800e0a0 <_strtod_l+0x490>
 800e258:	9b07      	ldr	r3, [sp, #28]
 800e25a:	1b9e      	subs	r6, r3, r6
 800e25c:	9b08      	ldr	r3, [sp, #32]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	bfb4      	ite	lt
 800e262:	4633      	movlt	r3, r6
 800e264:	2300      	movge	r3, #0
 800e266:	9310      	str	r3, [sp, #64]	; 0x40
 800e268:	9b08      	ldr	r3, [sp, #32]
 800e26a:	2500      	movs	r5, #0
 800e26c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e270:	9318      	str	r3, [sp, #96]	; 0x60
 800e272:	462e      	mov	r6, r5
 800e274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e276:	4620      	mov	r0, r4
 800e278:	6859      	ldr	r1, [r3, #4]
 800e27a:	f002 f8bf 	bl	80103fc <_Balloc>
 800e27e:	9007      	str	r0, [sp, #28]
 800e280:	2800      	cmp	r0, #0
 800e282:	f43f af11 	beq.w	800e0a8 <_strtod_l+0x498>
 800e286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e288:	691a      	ldr	r2, [r3, #16]
 800e28a:	3202      	adds	r2, #2
 800e28c:	f103 010c 	add.w	r1, r3, #12
 800e290:	0092      	lsls	r2, r2, #2
 800e292:	300c      	adds	r0, #12
 800e294:	f7fe fc44 	bl	800cb20 <memcpy>
 800e298:	ec4b ab10 	vmov	d0, sl, fp
 800e29c:	aa20      	add	r2, sp, #128	; 0x80
 800e29e:	a91f      	add	r1, sp, #124	; 0x7c
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800e2a6:	f002 fc91 	bl	8010bcc <__d2b>
 800e2aa:	901e      	str	r0, [sp, #120]	; 0x78
 800e2ac:	2800      	cmp	r0, #0
 800e2ae:	f43f aefb 	beq.w	800e0a8 <_strtod_l+0x498>
 800e2b2:	2101      	movs	r1, #1
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	f002 f9e7 	bl	8010688 <__i2b>
 800e2ba:	4606      	mov	r6, r0
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	f43f aef3 	beq.w	800e0a8 <_strtod_l+0x498>
 800e2c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e2c4:	9904      	ldr	r1, [sp, #16]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	bfab      	itete	ge
 800e2ca:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800e2cc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800e2ce:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800e2d0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800e2d4:	bfac      	ite	ge
 800e2d6:	eb03 0902 	addge.w	r9, r3, r2
 800e2da:	1ad7      	sublt	r7, r2, r3
 800e2dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e2de:	eba3 0801 	sub.w	r8, r3, r1
 800e2e2:	4490      	add	r8, r2
 800e2e4:	4ba3      	ldr	r3, [pc, #652]	; (800e574 <_strtod_l+0x964>)
 800e2e6:	f108 38ff 	add.w	r8, r8, #4294967295
 800e2ea:	4598      	cmp	r8, r3
 800e2ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e2f0:	f280 80cc 	bge.w	800e48c <_strtod_l+0x87c>
 800e2f4:	eba3 0308 	sub.w	r3, r3, r8
 800e2f8:	2b1f      	cmp	r3, #31
 800e2fa:	eba2 0203 	sub.w	r2, r2, r3
 800e2fe:	f04f 0101 	mov.w	r1, #1
 800e302:	f300 80b6 	bgt.w	800e472 <_strtod_l+0x862>
 800e306:	fa01 f303 	lsl.w	r3, r1, r3
 800e30a:	9311      	str	r3, [sp, #68]	; 0x44
 800e30c:	2300      	movs	r3, #0
 800e30e:	930c      	str	r3, [sp, #48]	; 0x30
 800e310:	eb09 0802 	add.w	r8, r9, r2
 800e314:	9b04      	ldr	r3, [sp, #16]
 800e316:	45c1      	cmp	r9, r8
 800e318:	4417      	add	r7, r2
 800e31a:	441f      	add	r7, r3
 800e31c:	464b      	mov	r3, r9
 800e31e:	bfa8      	it	ge
 800e320:	4643      	movge	r3, r8
 800e322:	42bb      	cmp	r3, r7
 800e324:	bfa8      	it	ge
 800e326:	463b      	movge	r3, r7
 800e328:	2b00      	cmp	r3, #0
 800e32a:	bfc2      	ittt	gt
 800e32c:	eba8 0803 	subgt.w	r8, r8, r3
 800e330:	1aff      	subgt	r7, r7, r3
 800e332:	eba9 0903 	subgt.w	r9, r9, r3
 800e336:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e338:	2b00      	cmp	r3, #0
 800e33a:	dd17      	ble.n	800e36c <_strtod_l+0x75c>
 800e33c:	4631      	mov	r1, r6
 800e33e:	461a      	mov	r2, r3
 800e340:	4620      	mov	r0, r4
 800e342:	f002 fa5d 	bl	8010800 <__pow5mult>
 800e346:	4606      	mov	r6, r0
 800e348:	2800      	cmp	r0, #0
 800e34a:	f43f aead 	beq.w	800e0a8 <_strtod_l+0x498>
 800e34e:	4601      	mov	r1, r0
 800e350:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e352:	4620      	mov	r0, r4
 800e354:	f002 f9ae 	bl	80106b4 <__multiply>
 800e358:	900f      	str	r0, [sp, #60]	; 0x3c
 800e35a:	2800      	cmp	r0, #0
 800e35c:	f43f aea4 	beq.w	800e0a8 <_strtod_l+0x498>
 800e360:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e362:	4620      	mov	r0, r4
 800e364:	f002 f88a 	bl	801047c <_Bfree>
 800e368:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e36a:	931e      	str	r3, [sp, #120]	; 0x78
 800e36c:	f1b8 0f00 	cmp.w	r8, #0
 800e370:	f300 8091 	bgt.w	800e496 <_strtod_l+0x886>
 800e374:	9b08      	ldr	r3, [sp, #32]
 800e376:	2b00      	cmp	r3, #0
 800e378:	dd08      	ble.n	800e38c <_strtod_l+0x77c>
 800e37a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e37c:	9907      	ldr	r1, [sp, #28]
 800e37e:	4620      	mov	r0, r4
 800e380:	f002 fa3e 	bl	8010800 <__pow5mult>
 800e384:	9007      	str	r0, [sp, #28]
 800e386:	2800      	cmp	r0, #0
 800e388:	f43f ae8e 	beq.w	800e0a8 <_strtod_l+0x498>
 800e38c:	2f00      	cmp	r7, #0
 800e38e:	dd08      	ble.n	800e3a2 <_strtod_l+0x792>
 800e390:	9907      	ldr	r1, [sp, #28]
 800e392:	463a      	mov	r2, r7
 800e394:	4620      	mov	r0, r4
 800e396:	f002 fa8d 	bl	80108b4 <__lshift>
 800e39a:	9007      	str	r0, [sp, #28]
 800e39c:	2800      	cmp	r0, #0
 800e39e:	f43f ae83 	beq.w	800e0a8 <_strtod_l+0x498>
 800e3a2:	f1b9 0f00 	cmp.w	r9, #0
 800e3a6:	dd08      	ble.n	800e3ba <_strtod_l+0x7aa>
 800e3a8:	4631      	mov	r1, r6
 800e3aa:	464a      	mov	r2, r9
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f002 fa81 	bl	80108b4 <__lshift>
 800e3b2:	4606      	mov	r6, r0
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	f43f ae77 	beq.w	800e0a8 <_strtod_l+0x498>
 800e3ba:	9a07      	ldr	r2, [sp, #28]
 800e3bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e3be:	4620      	mov	r0, r4
 800e3c0:	f002 fb00 	bl	80109c4 <__mdiff>
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	2800      	cmp	r0, #0
 800e3c8:	f43f ae6e 	beq.w	800e0a8 <_strtod_l+0x498>
 800e3cc:	68c3      	ldr	r3, [r0, #12]
 800e3ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	60c3      	str	r3, [r0, #12]
 800e3d4:	4631      	mov	r1, r6
 800e3d6:	f002 fad9 	bl	801098c <__mcmp>
 800e3da:	2800      	cmp	r0, #0
 800e3dc:	da65      	bge.n	800e4aa <_strtod_l+0x89a>
 800e3de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3e0:	ea53 030a 	orrs.w	r3, r3, sl
 800e3e4:	f040 8087 	bne.w	800e4f6 <_strtod_l+0x8e6>
 800e3e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	f040 8082 	bne.w	800e4f6 <_strtod_l+0x8e6>
 800e3f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e3f6:	0d1b      	lsrs	r3, r3, #20
 800e3f8:	051b      	lsls	r3, r3, #20
 800e3fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e3fe:	d97a      	bls.n	800e4f6 <_strtod_l+0x8e6>
 800e400:	696b      	ldr	r3, [r5, #20]
 800e402:	b913      	cbnz	r3, 800e40a <_strtod_l+0x7fa>
 800e404:	692b      	ldr	r3, [r5, #16]
 800e406:	2b01      	cmp	r3, #1
 800e408:	dd75      	ble.n	800e4f6 <_strtod_l+0x8e6>
 800e40a:	4629      	mov	r1, r5
 800e40c:	2201      	movs	r2, #1
 800e40e:	4620      	mov	r0, r4
 800e410:	f002 fa50 	bl	80108b4 <__lshift>
 800e414:	4631      	mov	r1, r6
 800e416:	4605      	mov	r5, r0
 800e418:	f002 fab8 	bl	801098c <__mcmp>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	dd6a      	ble.n	800e4f6 <_strtod_l+0x8e6>
 800e420:	9904      	ldr	r1, [sp, #16]
 800e422:	4a55      	ldr	r2, [pc, #340]	; (800e578 <_strtod_l+0x968>)
 800e424:	465b      	mov	r3, fp
 800e426:	2900      	cmp	r1, #0
 800e428:	f000 8085 	beq.w	800e536 <_strtod_l+0x926>
 800e42c:	ea02 010b 	and.w	r1, r2, fp
 800e430:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e434:	dc7f      	bgt.n	800e536 <_strtod_l+0x926>
 800e436:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e43a:	f77f aeaa 	ble.w	800e192 <_strtod_l+0x582>
 800e43e:	4a4f      	ldr	r2, [pc, #316]	; (800e57c <_strtod_l+0x96c>)
 800e440:	2300      	movs	r3, #0
 800e442:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800e446:	4650      	mov	r0, sl
 800e448:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800e44c:	4659      	mov	r1, fp
 800e44e:	f7f2 f8e3 	bl	8000618 <__aeabi_dmul>
 800e452:	460b      	mov	r3, r1
 800e454:	4303      	orrs	r3, r0
 800e456:	bf08      	it	eq
 800e458:	2322      	moveq	r3, #34	; 0x22
 800e45a:	4682      	mov	sl, r0
 800e45c:	468b      	mov	fp, r1
 800e45e:	bf08      	it	eq
 800e460:	6023      	streq	r3, [r4, #0]
 800e462:	e62b      	b.n	800e0bc <_strtod_l+0x4ac>
 800e464:	f04f 32ff 	mov.w	r2, #4294967295
 800e468:	fa02 f303 	lsl.w	r3, r2, r3
 800e46c:	ea03 0a0a 	and.w	sl, r3, sl
 800e470:	e6de      	b.n	800e230 <_strtod_l+0x620>
 800e472:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e476:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e47a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e47e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e482:	fa01 f308 	lsl.w	r3, r1, r8
 800e486:	930c      	str	r3, [sp, #48]	; 0x30
 800e488:	9111      	str	r1, [sp, #68]	; 0x44
 800e48a:	e741      	b.n	800e310 <_strtod_l+0x700>
 800e48c:	2300      	movs	r3, #0
 800e48e:	930c      	str	r3, [sp, #48]	; 0x30
 800e490:	2301      	movs	r3, #1
 800e492:	9311      	str	r3, [sp, #68]	; 0x44
 800e494:	e73c      	b.n	800e310 <_strtod_l+0x700>
 800e496:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e498:	4642      	mov	r2, r8
 800e49a:	4620      	mov	r0, r4
 800e49c:	f002 fa0a 	bl	80108b4 <__lshift>
 800e4a0:	901e      	str	r0, [sp, #120]	; 0x78
 800e4a2:	2800      	cmp	r0, #0
 800e4a4:	f47f af66 	bne.w	800e374 <_strtod_l+0x764>
 800e4a8:	e5fe      	b.n	800e0a8 <_strtod_l+0x498>
 800e4aa:	465f      	mov	r7, fp
 800e4ac:	d16e      	bne.n	800e58c <_strtod_l+0x97c>
 800e4ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e4b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4b4:	b342      	cbz	r2, 800e508 <_strtod_l+0x8f8>
 800e4b6:	4a32      	ldr	r2, [pc, #200]	; (800e580 <_strtod_l+0x970>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d128      	bne.n	800e50e <_strtod_l+0x8fe>
 800e4bc:	9b04      	ldr	r3, [sp, #16]
 800e4be:	4650      	mov	r0, sl
 800e4c0:	b1eb      	cbz	r3, 800e4fe <_strtod_l+0x8ee>
 800e4c2:	4a2d      	ldr	r2, [pc, #180]	; (800e578 <_strtod_l+0x968>)
 800e4c4:	403a      	ands	r2, r7
 800e4c6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800e4ca:	f04f 31ff 	mov.w	r1, #4294967295
 800e4ce:	d819      	bhi.n	800e504 <_strtod_l+0x8f4>
 800e4d0:	0d12      	lsrs	r2, r2, #20
 800e4d2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e4d6:	fa01 f303 	lsl.w	r3, r1, r3
 800e4da:	4298      	cmp	r0, r3
 800e4dc:	d117      	bne.n	800e50e <_strtod_l+0x8fe>
 800e4de:	4b29      	ldr	r3, [pc, #164]	; (800e584 <_strtod_l+0x974>)
 800e4e0:	429f      	cmp	r7, r3
 800e4e2:	d102      	bne.n	800e4ea <_strtod_l+0x8da>
 800e4e4:	3001      	adds	r0, #1
 800e4e6:	f43f addf 	beq.w	800e0a8 <_strtod_l+0x498>
 800e4ea:	4b23      	ldr	r3, [pc, #140]	; (800e578 <_strtod_l+0x968>)
 800e4ec:	403b      	ands	r3, r7
 800e4ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e4f2:	f04f 0a00 	mov.w	sl, #0
 800e4f6:	9b04      	ldr	r3, [sp, #16]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1a0      	bne.n	800e43e <_strtod_l+0x82e>
 800e4fc:	e5de      	b.n	800e0bc <_strtod_l+0x4ac>
 800e4fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e502:	e7ea      	b.n	800e4da <_strtod_l+0x8ca>
 800e504:	460b      	mov	r3, r1
 800e506:	e7e8      	b.n	800e4da <_strtod_l+0x8ca>
 800e508:	ea53 030a 	orrs.w	r3, r3, sl
 800e50c:	d088      	beq.n	800e420 <_strtod_l+0x810>
 800e50e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e510:	b1db      	cbz	r3, 800e54a <_strtod_l+0x93a>
 800e512:	423b      	tst	r3, r7
 800e514:	d0ef      	beq.n	800e4f6 <_strtod_l+0x8e6>
 800e516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e518:	9a04      	ldr	r2, [sp, #16]
 800e51a:	4650      	mov	r0, sl
 800e51c:	4659      	mov	r1, fp
 800e51e:	b1c3      	cbz	r3, 800e552 <_strtod_l+0x942>
 800e520:	f7ff fb59 	bl	800dbd6 <sulp>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e52c:	f7f1 febe 	bl	80002ac <__adddf3>
 800e530:	4682      	mov	sl, r0
 800e532:	468b      	mov	fp, r1
 800e534:	e7df      	b.n	800e4f6 <_strtod_l+0x8e6>
 800e536:	4013      	ands	r3, r2
 800e538:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e53c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e540:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e544:	f04f 3aff 	mov.w	sl, #4294967295
 800e548:	e7d5      	b.n	800e4f6 <_strtod_l+0x8e6>
 800e54a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e54c:	ea13 0f0a 	tst.w	r3, sl
 800e550:	e7e0      	b.n	800e514 <_strtod_l+0x904>
 800e552:	f7ff fb40 	bl	800dbd6 <sulp>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e55e:	f7f1 fea3 	bl	80002a8 <__aeabi_dsub>
 800e562:	2200      	movs	r2, #0
 800e564:	2300      	movs	r3, #0
 800e566:	4682      	mov	sl, r0
 800e568:	468b      	mov	fp, r1
 800e56a:	f7f2 fabd 	bl	8000ae8 <__aeabi_dcmpeq>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d0c1      	beq.n	800e4f6 <_strtod_l+0x8e6>
 800e572:	e60e      	b.n	800e192 <_strtod_l+0x582>
 800e574:	fffffc02 	.word	0xfffffc02
 800e578:	7ff00000 	.word	0x7ff00000
 800e57c:	39500000 	.word	0x39500000
 800e580:	000fffff 	.word	0x000fffff
 800e584:	7fefffff 	.word	0x7fefffff
 800e588:	08012180 	.word	0x08012180
 800e58c:	4631      	mov	r1, r6
 800e58e:	4628      	mov	r0, r5
 800e590:	f002 fb78 	bl	8010c84 <__ratio>
 800e594:	ec59 8b10 	vmov	r8, r9, d0
 800e598:	ee10 0a10 	vmov	r0, s0
 800e59c:	2200      	movs	r2, #0
 800e59e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e5a2:	4649      	mov	r1, r9
 800e5a4:	f7f2 fab4 	bl	8000b10 <__aeabi_dcmple>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	d07c      	beq.n	800e6a6 <_strtod_l+0xa96>
 800e5ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d04c      	beq.n	800e64c <_strtod_l+0xa3c>
 800e5b2:	4b95      	ldr	r3, [pc, #596]	; (800e808 <_strtod_l+0xbf8>)
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e5ba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e808 <_strtod_l+0xbf8>
 800e5be:	f04f 0800 	mov.w	r8, #0
 800e5c2:	4b92      	ldr	r3, [pc, #584]	; (800e80c <_strtod_l+0xbfc>)
 800e5c4:	403b      	ands	r3, r7
 800e5c6:	9311      	str	r3, [sp, #68]	; 0x44
 800e5c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e5ca:	4b91      	ldr	r3, [pc, #580]	; (800e810 <_strtod_l+0xc00>)
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	f040 80b2 	bne.w	800e736 <_strtod_l+0xb26>
 800e5d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e5d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e5da:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e5de:	ec4b ab10 	vmov	d0, sl, fp
 800e5e2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800e5e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e5ea:	f002 fa73 	bl	8010ad4 <__ulp>
 800e5ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e5f2:	ec53 2b10 	vmov	r2, r3, d0
 800e5f6:	f7f2 f80f 	bl	8000618 <__aeabi_dmul>
 800e5fa:	4652      	mov	r2, sl
 800e5fc:	465b      	mov	r3, fp
 800e5fe:	f7f1 fe55 	bl	80002ac <__adddf3>
 800e602:	460b      	mov	r3, r1
 800e604:	4981      	ldr	r1, [pc, #516]	; (800e80c <_strtod_l+0xbfc>)
 800e606:	4a83      	ldr	r2, [pc, #524]	; (800e814 <_strtod_l+0xc04>)
 800e608:	4019      	ands	r1, r3
 800e60a:	4291      	cmp	r1, r2
 800e60c:	4682      	mov	sl, r0
 800e60e:	d95e      	bls.n	800e6ce <_strtod_l+0xabe>
 800e610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e612:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e616:	4293      	cmp	r3, r2
 800e618:	d103      	bne.n	800e622 <_strtod_l+0xa12>
 800e61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e61c:	3301      	adds	r3, #1
 800e61e:	f43f ad43 	beq.w	800e0a8 <_strtod_l+0x498>
 800e622:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800e820 <_strtod_l+0xc10>
 800e626:	f04f 3aff 	mov.w	sl, #4294967295
 800e62a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e62c:	4620      	mov	r0, r4
 800e62e:	f001 ff25 	bl	801047c <_Bfree>
 800e632:	9907      	ldr	r1, [sp, #28]
 800e634:	4620      	mov	r0, r4
 800e636:	f001 ff21 	bl	801047c <_Bfree>
 800e63a:	4631      	mov	r1, r6
 800e63c:	4620      	mov	r0, r4
 800e63e:	f001 ff1d 	bl	801047c <_Bfree>
 800e642:	4629      	mov	r1, r5
 800e644:	4620      	mov	r0, r4
 800e646:	f001 ff19 	bl	801047c <_Bfree>
 800e64a:	e613      	b.n	800e274 <_strtod_l+0x664>
 800e64c:	f1ba 0f00 	cmp.w	sl, #0
 800e650:	d11b      	bne.n	800e68a <_strtod_l+0xa7a>
 800e652:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e656:	b9f3      	cbnz	r3, 800e696 <_strtod_l+0xa86>
 800e658:	4b6b      	ldr	r3, [pc, #428]	; (800e808 <_strtod_l+0xbf8>)
 800e65a:	2200      	movs	r2, #0
 800e65c:	4640      	mov	r0, r8
 800e65e:	4649      	mov	r1, r9
 800e660:	f7f2 fa4c 	bl	8000afc <__aeabi_dcmplt>
 800e664:	b9d0      	cbnz	r0, 800e69c <_strtod_l+0xa8c>
 800e666:	4640      	mov	r0, r8
 800e668:	4649      	mov	r1, r9
 800e66a:	4b6b      	ldr	r3, [pc, #428]	; (800e818 <_strtod_l+0xc08>)
 800e66c:	2200      	movs	r2, #0
 800e66e:	f7f1 ffd3 	bl	8000618 <__aeabi_dmul>
 800e672:	4680      	mov	r8, r0
 800e674:	4689      	mov	r9, r1
 800e676:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e67a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800e67e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e680:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800e684:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e688:	e79b      	b.n	800e5c2 <_strtod_l+0x9b2>
 800e68a:	f1ba 0f01 	cmp.w	sl, #1
 800e68e:	d102      	bne.n	800e696 <_strtod_l+0xa86>
 800e690:	2f00      	cmp	r7, #0
 800e692:	f43f ad7e 	beq.w	800e192 <_strtod_l+0x582>
 800e696:	4b61      	ldr	r3, [pc, #388]	; (800e81c <_strtod_l+0xc0c>)
 800e698:	2200      	movs	r2, #0
 800e69a:	e78c      	b.n	800e5b6 <_strtod_l+0x9a6>
 800e69c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800e818 <_strtod_l+0xc08>
 800e6a0:	f04f 0800 	mov.w	r8, #0
 800e6a4:	e7e7      	b.n	800e676 <_strtod_l+0xa66>
 800e6a6:	4b5c      	ldr	r3, [pc, #368]	; (800e818 <_strtod_l+0xc08>)
 800e6a8:	4640      	mov	r0, r8
 800e6aa:	4649      	mov	r1, r9
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f7f1 ffb3 	bl	8000618 <__aeabi_dmul>
 800e6b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6b4:	4680      	mov	r8, r0
 800e6b6:	4689      	mov	r9, r1
 800e6b8:	b933      	cbnz	r3, 800e6c8 <_strtod_l+0xab8>
 800e6ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6be:	9012      	str	r0, [sp, #72]	; 0x48
 800e6c0:	9313      	str	r3, [sp, #76]	; 0x4c
 800e6c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800e6c6:	e7dd      	b.n	800e684 <_strtod_l+0xa74>
 800e6c8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800e6cc:	e7f9      	b.n	800e6c2 <_strtod_l+0xab2>
 800e6ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e6d2:	9b04      	ldr	r3, [sp, #16]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1a8      	bne.n	800e62a <_strtod_l+0xa1a>
 800e6d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e6dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e6de:	0d1b      	lsrs	r3, r3, #20
 800e6e0:	051b      	lsls	r3, r3, #20
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d1a1      	bne.n	800e62a <_strtod_l+0xa1a>
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	f7f2 faf5 	bl	8000cd8 <__aeabi_d2lz>
 800e6ee:	f7f1 ff65 	bl	80005bc <__aeabi_l2d>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	4649      	mov	r1, r9
 800e6fa:	f7f1 fdd5 	bl	80002a8 <__aeabi_dsub>
 800e6fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e700:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e704:	ea43 030a 	orr.w	r3, r3, sl
 800e708:	4313      	orrs	r3, r2
 800e70a:	4680      	mov	r8, r0
 800e70c:	4689      	mov	r9, r1
 800e70e:	d053      	beq.n	800e7b8 <_strtod_l+0xba8>
 800e710:	a335      	add	r3, pc, #212	; (adr r3, 800e7e8 <_strtod_l+0xbd8>)
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	f7f2 f9f1 	bl	8000afc <__aeabi_dcmplt>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	f47f acce 	bne.w	800e0bc <_strtod_l+0x4ac>
 800e720:	a333      	add	r3, pc, #204	; (adr r3, 800e7f0 <_strtod_l+0xbe0>)
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e726:	4640      	mov	r0, r8
 800e728:	4649      	mov	r1, r9
 800e72a:	f7f2 fa05 	bl	8000b38 <__aeabi_dcmpgt>
 800e72e:	2800      	cmp	r0, #0
 800e730:	f43f af7b 	beq.w	800e62a <_strtod_l+0xa1a>
 800e734:	e4c2      	b.n	800e0bc <_strtod_l+0x4ac>
 800e736:	9b04      	ldr	r3, [sp, #16]
 800e738:	b333      	cbz	r3, 800e788 <_strtod_l+0xb78>
 800e73a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e73c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e740:	d822      	bhi.n	800e788 <_strtod_l+0xb78>
 800e742:	a32d      	add	r3, pc, #180	; (adr r3, 800e7f8 <_strtod_l+0xbe8>)
 800e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e748:	4640      	mov	r0, r8
 800e74a:	4649      	mov	r1, r9
 800e74c:	f7f2 f9e0 	bl	8000b10 <__aeabi_dcmple>
 800e750:	b1a0      	cbz	r0, 800e77c <_strtod_l+0xb6c>
 800e752:	4649      	mov	r1, r9
 800e754:	4640      	mov	r0, r8
 800e756:	f7f2 fa37 	bl	8000bc8 <__aeabi_d2uiz>
 800e75a:	2801      	cmp	r0, #1
 800e75c:	bf38      	it	cc
 800e75e:	2001      	movcc	r0, #1
 800e760:	f7f1 fee0 	bl	8000524 <__aeabi_ui2d>
 800e764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e766:	4680      	mov	r8, r0
 800e768:	4689      	mov	r9, r1
 800e76a:	bb13      	cbnz	r3, 800e7b2 <_strtod_l+0xba2>
 800e76c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e770:	9014      	str	r0, [sp, #80]	; 0x50
 800e772:	9315      	str	r3, [sp, #84]	; 0x54
 800e774:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e778:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800e77c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e77e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e780:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e784:	1a9b      	subs	r3, r3, r2
 800e786:	930d      	str	r3, [sp, #52]	; 0x34
 800e788:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e78c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e790:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e794:	f002 f99e 	bl	8010ad4 <__ulp>
 800e798:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e79c:	ec53 2b10 	vmov	r2, r3, d0
 800e7a0:	f7f1 ff3a 	bl	8000618 <__aeabi_dmul>
 800e7a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e7a8:	f7f1 fd80 	bl	80002ac <__adddf3>
 800e7ac:	4682      	mov	sl, r0
 800e7ae:	468b      	mov	fp, r1
 800e7b0:	e78f      	b.n	800e6d2 <_strtod_l+0xac2>
 800e7b2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800e7b6:	e7dd      	b.n	800e774 <_strtod_l+0xb64>
 800e7b8:	a311      	add	r3, pc, #68	; (adr r3, 800e800 <_strtod_l+0xbf0>)
 800e7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7be:	f7f2 f99d 	bl	8000afc <__aeabi_dcmplt>
 800e7c2:	e7b4      	b.n	800e72e <_strtod_l+0xb1e>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	930e      	str	r3, [sp, #56]	; 0x38
 800e7c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e7ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e7cc:	6013      	str	r3, [r2, #0]
 800e7ce:	f7ff ba65 	b.w	800dc9c <_strtod_l+0x8c>
 800e7d2:	2b65      	cmp	r3, #101	; 0x65
 800e7d4:	f43f ab5d 	beq.w	800de92 <_strtod_l+0x282>
 800e7d8:	2b45      	cmp	r3, #69	; 0x45
 800e7da:	f43f ab5a 	beq.w	800de92 <_strtod_l+0x282>
 800e7de:	2201      	movs	r2, #1
 800e7e0:	f7ff bb92 	b.w	800df08 <_strtod_l+0x2f8>
 800e7e4:	f3af 8000 	nop.w
 800e7e8:	94a03595 	.word	0x94a03595
 800e7ec:	3fdfffff 	.word	0x3fdfffff
 800e7f0:	35afe535 	.word	0x35afe535
 800e7f4:	3fe00000 	.word	0x3fe00000
 800e7f8:	ffc00000 	.word	0xffc00000
 800e7fc:	41dfffff 	.word	0x41dfffff
 800e800:	94a03595 	.word	0x94a03595
 800e804:	3fcfffff 	.word	0x3fcfffff
 800e808:	3ff00000 	.word	0x3ff00000
 800e80c:	7ff00000 	.word	0x7ff00000
 800e810:	7fe00000 	.word	0x7fe00000
 800e814:	7c9fffff 	.word	0x7c9fffff
 800e818:	3fe00000 	.word	0x3fe00000
 800e81c:	bff00000 	.word	0xbff00000
 800e820:	7fefffff 	.word	0x7fefffff

0800e824 <_strtod_r>:
 800e824:	4b01      	ldr	r3, [pc, #4]	; (800e82c <_strtod_r+0x8>)
 800e826:	f7ff b9f3 	b.w	800dc10 <_strtod_l>
 800e82a:	bf00      	nop
 800e82c:	2000008c 	.word	0x2000008c

0800e830 <_strtol_l.isra.0>:
 800e830:	2b01      	cmp	r3, #1
 800e832:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e836:	d001      	beq.n	800e83c <_strtol_l.isra.0+0xc>
 800e838:	2b24      	cmp	r3, #36	; 0x24
 800e83a:	d906      	bls.n	800e84a <_strtol_l.isra.0+0x1a>
 800e83c:	f7fe f93e 	bl	800cabc <__errno>
 800e840:	2316      	movs	r3, #22
 800e842:	6003      	str	r3, [r0, #0]
 800e844:	2000      	movs	r0, #0
 800e846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e84a:	4f3a      	ldr	r7, [pc, #232]	; (800e934 <_strtol_l.isra.0+0x104>)
 800e84c:	468e      	mov	lr, r1
 800e84e:	4676      	mov	r6, lr
 800e850:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e854:	5de5      	ldrb	r5, [r4, r7]
 800e856:	f015 0508 	ands.w	r5, r5, #8
 800e85a:	d1f8      	bne.n	800e84e <_strtol_l.isra.0+0x1e>
 800e85c:	2c2d      	cmp	r4, #45	; 0x2d
 800e85e:	d134      	bne.n	800e8ca <_strtol_l.isra.0+0x9a>
 800e860:	f89e 4000 	ldrb.w	r4, [lr]
 800e864:	f04f 0801 	mov.w	r8, #1
 800e868:	f106 0e02 	add.w	lr, r6, #2
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d05c      	beq.n	800e92a <_strtol_l.isra.0+0xfa>
 800e870:	2b10      	cmp	r3, #16
 800e872:	d10c      	bne.n	800e88e <_strtol_l.isra.0+0x5e>
 800e874:	2c30      	cmp	r4, #48	; 0x30
 800e876:	d10a      	bne.n	800e88e <_strtol_l.isra.0+0x5e>
 800e878:	f89e 4000 	ldrb.w	r4, [lr]
 800e87c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e880:	2c58      	cmp	r4, #88	; 0x58
 800e882:	d14d      	bne.n	800e920 <_strtol_l.isra.0+0xf0>
 800e884:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800e888:	2310      	movs	r3, #16
 800e88a:	f10e 0e02 	add.w	lr, lr, #2
 800e88e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800e892:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e896:	2600      	movs	r6, #0
 800e898:	fbbc f9f3 	udiv	r9, ip, r3
 800e89c:	4635      	mov	r5, r6
 800e89e:	fb03 ca19 	mls	sl, r3, r9, ip
 800e8a2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800e8a6:	2f09      	cmp	r7, #9
 800e8a8:	d818      	bhi.n	800e8dc <_strtol_l.isra.0+0xac>
 800e8aa:	463c      	mov	r4, r7
 800e8ac:	42a3      	cmp	r3, r4
 800e8ae:	dd24      	ble.n	800e8fa <_strtol_l.isra.0+0xca>
 800e8b0:	2e00      	cmp	r6, #0
 800e8b2:	db1f      	blt.n	800e8f4 <_strtol_l.isra.0+0xc4>
 800e8b4:	45a9      	cmp	r9, r5
 800e8b6:	d31d      	bcc.n	800e8f4 <_strtol_l.isra.0+0xc4>
 800e8b8:	d101      	bne.n	800e8be <_strtol_l.isra.0+0x8e>
 800e8ba:	45a2      	cmp	sl, r4
 800e8bc:	db1a      	blt.n	800e8f4 <_strtol_l.isra.0+0xc4>
 800e8be:	fb05 4503 	mla	r5, r5, r3, r4
 800e8c2:	2601      	movs	r6, #1
 800e8c4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800e8c8:	e7eb      	b.n	800e8a2 <_strtol_l.isra.0+0x72>
 800e8ca:	2c2b      	cmp	r4, #43	; 0x2b
 800e8cc:	bf08      	it	eq
 800e8ce:	f89e 4000 	ldrbeq.w	r4, [lr]
 800e8d2:	46a8      	mov	r8, r5
 800e8d4:	bf08      	it	eq
 800e8d6:	f106 0e02 	addeq.w	lr, r6, #2
 800e8da:	e7c7      	b.n	800e86c <_strtol_l.isra.0+0x3c>
 800e8dc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800e8e0:	2f19      	cmp	r7, #25
 800e8e2:	d801      	bhi.n	800e8e8 <_strtol_l.isra.0+0xb8>
 800e8e4:	3c37      	subs	r4, #55	; 0x37
 800e8e6:	e7e1      	b.n	800e8ac <_strtol_l.isra.0+0x7c>
 800e8e8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800e8ec:	2f19      	cmp	r7, #25
 800e8ee:	d804      	bhi.n	800e8fa <_strtol_l.isra.0+0xca>
 800e8f0:	3c57      	subs	r4, #87	; 0x57
 800e8f2:	e7db      	b.n	800e8ac <_strtol_l.isra.0+0x7c>
 800e8f4:	f04f 36ff 	mov.w	r6, #4294967295
 800e8f8:	e7e4      	b.n	800e8c4 <_strtol_l.isra.0+0x94>
 800e8fa:	2e00      	cmp	r6, #0
 800e8fc:	da05      	bge.n	800e90a <_strtol_l.isra.0+0xda>
 800e8fe:	2322      	movs	r3, #34	; 0x22
 800e900:	6003      	str	r3, [r0, #0]
 800e902:	4665      	mov	r5, ip
 800e904:	b942      	cbnz	r2, 800e918 <_strtol_l.isra.0+0xe8>
 800e906:	4628      	mov	r0, r5
 800e908:	e79d      	b.n	800e846 <_strtol_l.isra.0+0x16>
 800e90a:	f1b8 0f00 	cmp.w	r8, #0
 800e90e:	d000      	beq.n	800e912 <_strtol_l.isra.0+0xe2>
 800e910:	426d      	negs	r5, r5
 800e912:	2a00      	cmp	r2, #0
 800e914:	d0f7      	beq.n	800e906 <_strtol_l.isra.0+0xd6>
 800e916:	b10e      	cbz	r6, 800e91c <_strtol_l.isra.0+0xec>
 800e918:	f10e 31ff 	add.w	r1, lr, #4294967295
 800e91c:	6011      	str	r1, [r2, #0]
 800e91e:	e7f2      	b.n	800e906 <_strtol_l.isra.0+0xd6>
 800e920:	2430      	movs	r4, #48	; 0x30
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1b3      	bne.n	800e88e <_strtol_l.isra.0+0x5e>
 800e926:	2308      	movs	r3, #8
 800e928:	e7b1      	b.n	800e88e <_strtol_l.isra.0+0x5e>
 800e92a:	2c30      	cmp	r4, #48	; 0x30
 800e92c:	d0a4      	beq.n	800e878 <_strtol_l.isra.0+0x48>
 800e92e:	230a      	movs	r3, #10
 800e930:	e7ad      	b.n	800e88e <_strtol_l.isra.0+0x5e>
 800e932:	bf00      	nop
 800e934:	08012015 	.word	0x08012015

0800e938 <_strtol_r>:
 800e938:	f7ff bf7a 	b.w	800e830 <_strtol_l.isra.0>

0800e93c <strtol>:
 800e93c:	4613      	mov	r3, r2
 800e93e:	460a      	mov	r2, r1
 800e940:	4601      	mov	r1, r0
 800e942:	4802      	ldr	r0, [pc, #8]	; (800e94c <strtol+0x10>)
 800e944:	6800      	ldr	r0, [r0, #0]
 800e946:	f7ff bf73 	b.w	800e830 <_strtol_l.isra.0>
 800e94a:	bf00      	nop
 800e94c:	20000024 	.word	0x20000024

0800e950 <_vsniprintf_r>:
 800e950:	b530      	push	{r4, r5, lr}
 800e952:	1e14      	subs	r4, r2, #0
 800e954:	4605      	mov	r5, r0
 800e956:	b09b      	sub	sp, #108	; 0x6c
 800e958:	4618      	mov	r0, r3
 800e95a:	da05      	bge.n	800e968 <_vsniprintf_r+0x18>
 800e95c:	238b      	movs	r3, #139	; 0x8b
 800e95e:	602b      	str	r3, [r5, #0]
 800e960:	f04f 30ff 	mov.w	r0, #4294967295
 800e964:	b01b      	add	sp, #108	; 0x6c
 800e966:	bd30      	pop	{r4, r5, pc}
 800e968:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e96c:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e970:	bf14      	ite	ne
 800e972:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e976:	4623      	moveq	r3, r4
 800e978:	9302      	str	r3, [sp, #8]
 800e97a:	9305      	str	r3, [sp, #20]
 800e97c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e980:	9100      	str	r1, [sp, #0]
 800e982:	9104      	str	r1, [sp, #16]
 800e984:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e988:	4602      	mov	r2, r0
 800e98a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e98c:	4669      	mov	r1, sp
 800e98e:	4628      	mov	r0, r5
 800e990:	f002 fa5a 	bl	8010e48 <_svfiprintf_r>
 800e994:	1c43      	adds	r3, r0, #1
 800e996:	bfbc      	itt	lt
 800e998:	238b      	movlt	r3, #139	; 0x8b
 800e99a:	602b      	strlt	r3, [r5, #0]
 800e99c:	2c00      	cmp	r4, #0
 800e99e:	d0e1      	beq.n	800e964 <_vsniprintf_r+0x14>
 800e9a0:	9b00      	ldr	r3, [sp, #0]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	701a      	strb	r2, [r3, #0]
 800e9a6:	e7dd      	b.n	800e964 <_vsniprintf_r+0x14>

0800e9a8 <vsniprintf>:
 800e9a8:	b507      	push	{r0, r1, r2, lr}
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	460a      	mov	r2, r1
 800e9b0:	4601      	mov	r1, r0
 800e9b2:	4803      	ldr	r0, [pc, #12]	; (800e9c0 <vsniprintf+0x18>)
 800e9b4:	6800      	ldr	r0, [r0, #0]
 800e9b6:	f7ff ffcb 	bl	800e950 <_vsniprintf_r>
 800e9ba:	b003      	add	sp, #12
 800e9bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9c0:	20000024 	.word	0x20000024

0800e9c4 <__swbuf_r>:
 800e9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c6:	460e      	mov	r6, r1
 800e9c8:	4614      	mov	r4, r2
 800e9ca:	4605      	mov	r5, r0
 800e9cc:	b118      	cbz	r0, 800e9d6 <__swbuf_r+0x12>
 800e9ce:	6983      	ldr	r3, [r0, #24]
 800e9d0:	b90b      	cbnz	r3, 800e9d6 <__swbuf_r+0x12>
 800e9d2:	f001 f86b 	bl	800faac <__sinit>
 800e9d6:	4b21      	ldr	r3, [pc, #132]	; (800ea5c <__swbuf_r+0x98>)
 800e9d8:	429c      	cmp	r4, r3
 800e9da:	d12b      	bne.n	800ea34 <__swbuf_r+0x70>
 800e9dc:	686c      	ldr	r4, [r5, #4]
 800e9de:	69a3      	ldr	r3, [r4, #24]
 800e9e0:	60a3      	str	r3, [r4, #8]
 800e9e2:	89a3      	ldrh	r3, [r4, #12]
 800e9e4:	071a      	lsls	r2, r3, #28
 800e9e6:	d52f      	bpl.n	800ea48 <__swbuf_r+0x84>
 800e9e8:	6923      	ldr	r3, [r4, #16]
 800e9ea:	b36b      	cbz	r3, 800ea48 <__swbuf_r+0x84>
 800e9ec:	6923      	ldr	r3, [r4, #16]
 800e9ee:	6820      	ldr	r0, [r4, #0]
 800e9f0:	1ac0      	subs	r0, r0, r3
 800e9f2:	6963      	ldr	r3, [r4, #20]
 800e9f4:	b2f6      	uxtb	r6, r6
 800e9f6:	4283      	cmp	r3, r0
 800e9f8:	4637      	mov	r7, r6
 800e9fa:	dc04      	bgt.n	800ea06 <__swbuf_r+0x42>
 800e9fc:	4621      	mov	r1, r4
 800e9fe:	4628      	mov	r0, r5
 800ea00:	f000 ffc0 	bl	800f984 <_fflush_r>
 800ea04:	bb30      	cbnz	r0, 800ea54 <__swbuf_r+0x90>
 800ea06:	68a3      	ldr	r3, [r4, #8]
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	60a3      	str	r3, [r4, #8]
 800ea0c:	6823      	ldr	r3, [r4, #0]
 800ea0e:	1c5a      	adds	r2, r3, #1
 800ea10:	6022      	str	r2, [r4, #0]
 800ea12:	701e      	strb	r6, [r3, #0]
 800ea14:	6963      	ldr	r3, [r4, #20]
 800ea16:	3001      	adds	r0, #1
 800ea18:	4283      	cmp	r3, r0
 800ea1a:	d004      	beq.n	800ea26 <__swbuf_r+0x62>
 800ea1c:	89a3      	ldrh	r3, [r4, #12]
 800ea1e:	07db      	lsls	r3, r3, #31
 800ea20:	d506      	bpl.n	800ea30 <__swbuf_r+0x6c>
 800ea22:	2e0a      	cmp	r6, #10
 800ea24:	d104      	bne.n	800ea30 <__swbuf_r+0x6c>
 800ea26:	4621      	mov	r1, r4
 800ea28:	4628      	mov	r0, r5
 800ea2a:	f000 ffab 	bl	800f984 <_fflush_r>
 800ea2e:	b988      	cbnz	r0, 800ea54 <__swbuf_r+0x90>
 800ea30:	4638      	mov	r0, r7
 800ea32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea34:	4b0a      	ldr	r3, [pc, #40]	; (800ea60 <__swbuf_r+0x9c>)
 800ea36:	429c      	cmp	r4, r3
 800ea38:	d101      	bne.n	800ea3e <__swbuf_r+0x7a>
 800ea3a:	68ac      	ldr	r4, [r5, #8]
 800ea3c:	e7cf      	b.n	800e9de <__swbuf_r+0x1a>
 800ea3e:	4b09      	ldr	r3, [pc, #36]	; (800ea64 <__swbuf_r+0xa0>)
 800ea40:	429c      	cmp	r4, r3
 800ea42:	bf08      	it	eq
 800ea44:	68ec      	ldreq	r4, [r5, #12]
 800ea46:	e7ca      	b.n	800e9de <__swbuf_r+0x1a>
 800ea48:	4621      	mov	r1, r4
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	f000 f81e 	bl	800ea8c <__swsetup_r>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	d0cb      	beq.n	800e9ec <__swbuf_r+0x28>
 800ea54:	f04f 37ff 	mov.w	r7, #4294967295
 800ea58:	e7ea      	b.n	800ea30 <__swbuf_r+0x6c>
 800ea5a:	bf00      	nop
 800ea5c:	0801225c 	.word	0x0801225c
 800ea60:	0801227c 	.word	0x0801227c
 800ea64:	0801223c 	.word	0x0801223c

0800ea68 <_write_r>:
 800ea68:	b538      	push	{r3, r4, r5, lr}
 800ea6a:	4d07      	ldr	r5, [pc, #28]	; (800ea88 <_write_r+0x20>)
 800ea6c:	4604      	mov	r4, r0
 800ea6e:	4608      	mov	r0, r1
 800ea70:	4611      	mov	r1, r2
 800ea72:	2200      	movs	r2, #0
 800ea74:	602a      	str	r2, [r5, #0]
 800ea76:	461a      	mov	r2, r3
 800ea78:	f7f4 ffd7 	bl	8003a2a <_write>
 800ea7c:	1c43      	adds	r3, r0, #1
 800ea7e:	d102      	bne.n	800ea86 <_write_r+0x1e>
 800ea80:	682b      	ldr	r3, [r5, #0]
 800ea82:	b103      	cbz	r3, 800ea86 <_write_r+0x1e>
 800ea84:	6023      	str	r3, [r4, #0]
 800ea86:	bd38      	pop	{r3, r4, r5, pc}
 800ea88:	20001a8c 	.word	0x20001a8c

0800ea8c <__swsetup_r>:
 800ea8c:	4b32      	ldr	r3, [pc, #200]	; (800eb58 <__swsetup_r+0xcc>)
 800ea8e:	b570      	push	{r4, r5, r6, lr}
 800ea90:	681d      	ldr	r5, [r3, #0]
 800ea92:	4606      	mov	r6, r0
 800ea94:	460c      	mov	r4, r1
 800ea96:	b125      	cbz	r5, 800eaa2 <__swsetup_r+0x16>
 800ea98:	69ab      	ldr	r3, [r5, #24]
 800ea9a:	b913      	cbnz	r3, 800eaa2 <__swsetup_r+0x16>
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	f001 f805 	bl	800faac <__sinit>
 800eaa2:	4b2e      	ldr	r3, [pc, #184]	; (800eb5c <__swsetup_r+0xd0>)
 800eaa4:	429c      	cmp	r4, r3
 800eaa6:	d10f      	bne.n	800eac8 <__swsetup_r+0x3c>
 800eaa8:	686c      	ldr	r4, [r5, #4]
 800eaaa:	89a3      	ldrh	r3, [r4, #12]
 800eaac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eab0:	0719      	lsls	r1, r3, #28
 800eab2:	d42c      	bmi.n	800eb0e <__swsetup_r+0x82>
 800eab4:	06dd      	lsls	r5, r3, #27
 800eab6:	d411      	bmi.n	800eadc <__swsetup_r+0x50>
 800eab8:	2309      	movs	r3, #9
 800eaba:	6033      	str	r3, [r6, #0]
 800eabc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eac0:	81a3      	strh	r3, [r4, #12]
 800eac2:	f04f 30ff 	mov.w	r0, #4294967295
 800eac6:	e03e      	b.n	800eb46 <__swsetup_r+0xba>
 800eac8:	4b25      	ldr	r3, [pc, #148]	; (800eb60 <__swsetup_r+0xd4>)
 800eaca:	429c      	cmp	r4, r3
 800eacc:	d101      	bne.n	800ead2 <__swsetup_r+0x46>
 800eace:	68ac      	ldr	r4, [r5, #8]
 800ead0:	e7eb      	b.n	800eaaa <__swsetup_r+0x1e>
 800ead2:	4b24      	ldr	r3, [pc, #144]	; (800eb64 <__swsetup_r+0xd8>)
 800ead4:	429c      	cmp	r4, r3
 800ead6:	bf08      	it	eq
 800ead8:	68ec      	ldreq	r4, [r5, #12]
 800eada:	e7e6      	b.n	800eaaa <__swsetup_r+0x1e>
 800eadc:	0758      	lsls	r0, r3, #29
 800eade:	d512      	bpl.n	800eb06 <__swsetup_r+0x7a>
 800eae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eae2:	b141      	cbz	r1, 800eaf6 <__swsetup_r+0x6a>
 800eae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eae8:	4299      	cmp	r1, r3
 800eaea:	d002      	beq.n	800eaf2 <__swsetup_r+0x66>
 800eaec:	4630      	mov	r0, r6
 800eaee:	f7fe f82d 	bl	800cb4c <_free_r>
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	6363      	str	r3, [r4, #52]	; 0x34
 800eaf6:	89a3      	ldrh	r3, [r4, #12]
 800eaf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eafc:	81a3      	strh	r3, [r4, #12]
 800eafe:	2300      	movs	r3, #0
 800eb00:	6063      	str	r3, [r4, #4]
 800eb02:	6923      	ldr	r3, [r4, #16]
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	89a3      	ldrh	r3, [r4, #12]
 800eb08:	f043 0308 	orr.w	r3, r3, #8
 800eb0c:	81a3      	strh	r3, [r4, #12]
 800eb0e:	6923      	ldr	r3, [r4, #16]
 800eb10:	b94b      	cbnz	r3, 800eb26 <__swsetup_r+0x9a>
 800eb12:	89a3      	ldrh	r3, [r4, #12]
 800eb14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb1c:	d003      	beq.n	800eb26 <__swsetup_r+0x9a>
 800eb1e:	4621      	mov	r1, r4
 800eb20:	4630      	mov	r0, r6
 800eb22:	f001 fc0d 	bl	8010340 <__smakebuf_r>
 800eb26:	89a0      	ldrh	r0, [r4, #12]
 800eb28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb2c:	f010 0301 	ands.w	r3, r0, #1
 800eb30:	d00a      	beq.n	800eb48 <__swsetup_r+0xbc>
 800eb32:	2300      	movs	r3, #0
 800eb34:	60a3      	str	r3, [r4, #8]
 800eb36:	6963      	ldr	r3, [r4, #20]
 800eb38:	425b      	negs	r3, r3
 800eb3a:	61a3      	str	r3, [r4, #24]
 800eb3c:	6923      	ldr	r3, [r4, #16]
 800eb3e:	b943      	cbnz	r3, 800eb52 <__swsetup_r+0xc6>
 800eb40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb44:	d1ba      	bne.n	800eabc <__swsetup_r+0x30>
 800eb46:	bd70      	pop	{r4, r5, r6, pc}
 800eb48:	0781      	lsls	r1, r0, #30
 800eb4a:	bf58      	it	pl
 800eb4c:	6963      	ldrpl	r3, [r4, #20]
 800eb4e:	60a3      	str	r3, [r4, #8]
 800eb50:	e7f4      	b.n	800eb3c <__swsetup_r+0xb0>
 800eb52:	2000      	movs	r0, #0
 800eb54:	e7f7      	b.n	800eb46 <__swsetup_r+0xba>
 800eb56:	bf00      	nop
 800eb58:	20000024 	.word	0x20000024
 800eb5c:	0801225c 	.word	0x0801225c
 800eb60:	0801227c 	.word	0x0801227c
 800eb64:	0801223c 	.word	0x0801223c

0800eb68 <_close_r>:
 800eb68:	b538      	push	{r3, r4, r5, lr}
 800eb6a:	4d06      	ldr	r5, [pc, #24]	; (800eb84 <_close_r+0x1c>)
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	4604      	mov	r4, r0
 800eb70:	4608      	mov	r0, r1
 800eb72:	602b      	str	r3, [r5, #0]
 800eb74:	f7f4 ff75 	bl	8003a62 <_close>
 800eb78:	1c43      	adds	r3, r0, #1
 800eb7a:	d102      	bne.n	800eb82 <_close_r+0x1a>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	b103      	cbz	r3, 800eb82 <_close_r+0x1a>
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	bd38      	pop	{r3, r4, r5, pc}
 800eb84:	20001a8c 	.word	0x20001a8c

0800eb88 <quorem>:
 800eb88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb8c:	6903      	ldr	r3, [r0, #16]
 800eb8e:	690c      	ldr	r4, [r1, #16]
 800eb90:	42a3      	cmp	r3, r4
 800eb92:	4607      	mov	r7, r0
 800eb94:	f2c0 8081 	blt.w	800ec9a <quorem+0x112>
 800eb98:	3c01      	subs	r4, #1
 800eb9a:	f101 0814 	add.w	r8, r1, #20
 800eb9e:	f100 0514 	add.w	r5, r0, #20
 800eba2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eba6:	9301      	str	r3, [sp, #4]
 800eba8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ebac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ebb0:	3301      	adds	r3, #1
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ebb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ebbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ebc0:	d331      	bcc.n	800ec26 <quorem+0x9e>
 800ebc2:	f04f 0e00 	mov.w	lr, #0
 800ebc6:	4640      	mov	r0, r8
 800ebc8:	46ac      	mov	ip, r5
 800ebca:	46f2      	mov	sl, lr
 800ebcc:	f850 2b04 	ldr.w	r2, [r0], #4
 800ebd0:	b293      	uxth	r3, r2
 800ebd2:	fb06 e303 	mla	r3, r6, r3, lr
 800ebd6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	ebaa 0303 	sub.w	r3, sl, r3
 800ebe0:	0c12      	lsrs	r2, r2, #16
 800ebe2:	f8dc a000 	ldr.w	sl, [ip]
 800ebe6:	fb06 e202 	mla	r2, r6, r2, lr
 800ebea:	fa13 f38a 	uxtah	r3, r3, sl
 800ebee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ebf2:	fa1f fa82 	uxth.w	sl, r2
 800ebf6:	f8dc 2000 	ldr.w	r2, [ip]
 800ebfa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ebfe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec08:	4581      	cmp	r9, r0
 800ec0a:	f84c 3b04 	str.w	r3, [ip], #4
 800ec0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ec12:	d2db      	bcs.n	800ebcc <quorem+0x44>
 800ec14:	f855 300b 	ldr.w	r3, [r5, fp]
 800ec18:	b92b      	cbnz	r3, 800ec26 <quorem+0x9e>
 800ec1a:	9b01      	ldr	r3, [sp, #4]
 800ec1c:	3b04      	subs	r3, #4
 800ec1e:	429d      	cmp	r5, r3
 800ec20:	461a      	mov	r2, r3
 800ec22:	d32e      	bcc.n	800ec82 <quorem+0xfa>
 800ec24:	613c      	str	r4, [r7, #16]
 800ec26:	4638      	mov	r0, r7
 800ec28:	f001 feb0 	bl	801098c <__mcmp>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	db24      	blt.n	800ec7a <quorem+0xf2>
 800ec30:	3601      	adds	r6, #1
 800ec32:	4628      	mov	r0, r5
 800ec34:	f04f 0c00 	mov.w	ip, #0
 800ec38:	f858 2b04 	ldr.w	r2, [r8], #4
 800ec3c:	f8d0 e000 	ldr.w	lr, [r0]
 800ec40:	b293      	uxth	r3, r2
 800ec42:	ebac 0303 	sub.w	r3, ip, r3
 800ec46:	0c12      	lsrs	r2, r2, #16
 800ec48:	fa13 f38e 	uxtah	r3, r3, lr
 800ec4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ec50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ec54:	b29b      	uxth	r3, r3
 800ec56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ec5a:	45c1      	cmp	r9, r8
 800ec5c:	f840 3b04 	str.w	r3, [r0], #4
 800ec60:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ec64:	d2e8      	bcs.n	800ec38 <quorem+0xb0>
 800ec66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec6e:	b922      	cbnz	r2, 800ec7a <quorem+0xf2>
 800ec70:	3b04      	subs	r3, #4
 800ec72:	429d      	cmp	r5, r3
 800ec74:	461a      	mov	r2, r3
 800ec76:	d30a      	bcc.n	800ec8e <quorem+0x106>
 800ec78:	613c      	str	r4, [r7, #16]
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	b003      	add	sp, #12
 800ec7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec82:	6812      	ldr	r2, [r2, #0]
 800ec84:	3b04      	subs	r3, #4
 800ec86:	2a00      	cmp	r2, #0
 800ec88:	d1cc      	bne.n	800ec24 <quorem+0x9c>
 800ec8a:	3c01      	subs	r4, #1
 800ec8c:	e7c7      	b.n	800ec1e <quorem+0x96>
 800ec8e:	6812      	ldr	r2, [r2, #0]
 800ec90:	3b04      	subs	r3, #4
 800ec92:	2a00      	cmp	r2, #0
 800ec94:	d1f0      	bne.n	800ec78 <quorem+0xf0>
 800ec96:	3c01      	subs	r4, #1
 800ec98:	e7eb      	b.n	800ec72 <quorem+0xea>
 800ec9a:	2000      	movs	r0, #0
 800ec9c:	e7ee      	b.n	800ec7c <quorem+0xf4>
	...

0800eca0 <_dtoa_r>:
 800eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca4:	ed2d 8b02 	vpush	{d8}
 800eca8:	ec57 6b10 	vmov	r6, r7, d0
 800ecac:	b095      	sub	sp, #84	; 0x54
 800ecae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ecb0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ecb4:	9105      	str	r1, [sp, #20]
 800ecb6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ecba:	4604      	mov	r4, r0
 800ecbc:	9209      	str	r2, [sp, #36]	; 0x24
 800ecbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecc0:	b975      	cbnz	r5, 800ece0 <_dtoa_r+0x40>
 800ecc2:	2010      	movs	r0, #16
 800ecc4:	f7fd ff24 	bl	800cb10 <malloc>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	6260      	str	r0, [r4, #36]	; 0x24
 800eccc:	b920      	cbnz	r0, 800ecd8 <_dtoa_r+0x38>
 800ecce:	4bb2      	ldr	r3, [pc, #712]	; (800ef98 <_dtoa_r+0x2f8>)
 800ecd0:	21ea      	movs	r1, #234	; 0xea
 800ecd2:	48b2      	ldr	r0, [pc, #712]	; (800ef9c <_dtoa_r+0x2fc>)
 800ecd4:	f002 fb3a 	bl	801134c <__assert_func>
 800ecd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ecdc:	6005      	str	r5, [r0, #0]
 800ecde:	60c5      	str	r5, [r0, #12]
 800ece0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ece2:	6819      	ldr	r1, [r3, #0]
 800ece4:	b151      	cbz	r1, 800ecfc <_dtoa_r+0x5c>
 800ece6:	685a      	ldr	r2, [r3, #4]
 800ece8:	604a      	str	r2, [r1, #4]
 800ecea:	2301      	movs	r3, #1
 800ecec:	4093      	lsls	r3, r2
 800ecee:	608b      	str	r3, [r1, #8]
 800ecf0:	4620      	mov	r0, r4
 800ecf2:	f001 fbc3 	bl	801047c <_Bfree>
 800ecf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	601a      	str	r2, [r3, #0]
 800ecfc:	1e3b      	subs	r3, r7, #0
 800ecfe:	bfb9      	ittee	lt
 800ed00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ed04:	9303      	strlt	r3, [sp, #12]
 800ed06:	2300      	movge	r3, #0
 800ed08:	f8c8 3000 	strge.w	r3, [r8]
 800ed0c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ed10:	4ba3      	ldr	r3, [pc, #652]	; (800efa0 <_dtoa_r+0x300>)
 800ed12:	bfbc      	itt	lt
 800ed14:	2201      	movlt	r2, #1
 800ed16:	f8c8 2000 	strlt.w	r2, [r8]
 800ed1a:	ea33 0309 	bics.w	r3, r3, r9
 800ed1e:	d11b      	bne.n	800ed58 <_dtoa_r+0xb8>
 800ed20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed22:	f242 730f 	movw	r3, #9999	; 0x270f
 800ed26:	6013      	str	r3, [r2, #0]
 800ed28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed2c:	4333      	orrs	r3, r6
 800ed2e:	f000 857a 	beq.w	800f826 <_dtoa_r+0xb86>
 800ed32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed34:	b963      	cbnz	r3, 800ed50 <_dtoa_r+0xb0>
 800ed36:	4b9b      	ldr	r3, [pc, #620]	; (800efa4 <_dtoa_r+0x304>)
 800ed38:	e024      	b.n	800ed84 <_dtoa_r+0xe4>
 800ed3a:	4b9b      	ldr	r3, [pc, #620]	; (800efa8 <_dtoa_r+0x308>)
 800ed3c:	9300      	str	r3, [sp, #0]
 800ed3e:	3308      	adds	r3, #8
 800ed40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ed42:	6013      	str	r3, [r2, #0]
 800ed44:	9800      	ldr	r0, [sp, #0]
 800ed46:	b015      	add	sp, #84	; 0x54
 800ed48:	ecbd 8b02 	vpop	{d8}
 800ed4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed50:	4b94      	ldr	r3, [pc, #592]	; (800efa4 <_dtoa_r+0x304>)
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	3303      	adds	r3, #3
 800ed56:	e7f3      	b.n	800ed40 <_dtoa_r+0xa0>
 800ed58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	ec51 0b17 	vmov	r0, r1, d7
 800ed62:	2300      	movs	r3, #0
 800ed64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ed68:	f7f1 febe 	bl	8000ae8 <__aeabi_dcmpeq>
 800ed6c:	4680      	mov	r8, r0
 800ed6e:	b158      	cbz	r0, 800ed88 <_dtoa_r+0xe8>
 800ed70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed72:	2301      	movs	r3, #1
 800ed74:	6013      	str	r3, [r2, #0]
 800ed76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	f000 8551 	beq.w	800f820 <_dtoa_r+0xb80>
 800ed7e:	488b      	ldr	r0, [pc, #556]	; (800efac <_dtoa_r+0x30c>)
 800ed80:	6018      	str	r0, [r3, #0]
 800ed82:	1e43      	subs	r3, r0, #1
 800ed84:	9300      	str	r3, [sp, #0]
 800ed86:	e7dd      	b.n	800ed44 <_dtoa_r+0xa4>
 800ed88:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ed8c:	aa12      	add	r2, sp, #72	; 0x48
 800ed8e:	a913      	add	r1, sp, #76	; 0x4c
 800ed90:	4620      	mov	r0, r4
 800ed92:	f001 ff1b 	bl	8010bcc <__d2b>
 800ed96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed9a:	4683      	mov	fp, r0
 800ed9c:	2d00      	cmp	r5, #0
 800ed9e:	d07c      	beq.n	800ee9a <_dtoa_r+0x1fa>
 800eda0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eda2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800eda6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800edaa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800edae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800edb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800edb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800edba:	4b7d      	ldr	r3, [pc, #500]	; (800efb0 <_dtoa_r+0x310>)
 800edbc:	2200      	movs	r2, #0
 800edbe:	4630      	mov	r0, r6
 800edc0:	4639      	mov	r1, r7
 800edc2:	f7f1 fa71 	bl	80002a8 <__aeabi_dsub>
 800edc6:	a36e      	add	r3, pc, #440	; (adr r3, 800ef80 <_dtoa_r+0x2e0>)
 800edc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edcc:	f7f1 fc24 	bl	8000618 <__aeabi_dmul>
 800edd0:	a36d      	add	r3, pc, #436	; (adr r3, 800ef88 <_dtoa_r+0x2e8>)
 800edd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd6:	f7f1 fa69 	bl	80002ac <__adddf3>
 800edda:	4606      	mov	r6, r0
 800eddc:	4628      	mov	r0, r5
 800edde:	460f      	mov	r7, r1
 800ede0:	f7f1 fbb0 	bl	8000544 <__aeabi_i2d>
 800ede4:	a36a      	add	r3, pc, #424	; (adr r3, 800ef90 <_dtoa_r+0x2f0>)
 800ede6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edea:	f7f1 fc15 	bl	8000618 <__aeabi_dmul>
 800edee:	4602      	mov	r2, r0
 800edf0:	460b      	mov	r3, r1
 800edf2:	4630      	mov	r0, r6
 800edf4:	4639      	mov	r1, r7
 800edf6:	f7f1 fa59 	bl	80002ac <__adddf3>
 800edfa:	4606      	mov	r6, r0
 800edfc:	460f      	mov	r7, r1
 800edfe:	f7f1 febb 	bl	8000b78 <__aeabi_d2iz>
 800ee02:	2200      	movs	r2, #0
 800ee04:	4682      	mov	sl, r0
 800ee06:	2300      	movs	r3, #0
 800ee08:	4630      	mov	r0, r6
 800ee0a:	4639      	mov	r1, r7
 800ee0c:	f7f1 fe76 	bl	8000afc <__aeabi_dcmplt>
 800ee10:	b148      	cbz	r0, 800ee26 <_dtoa_r+0x186>
 800ee12:	4650      	mov	r0, sl
 800ee14:	f7f1 fb96 	bl	8000544 <__aeabi_i2d>
 800ee18:	4632      	mov	r2, r6
 800ee1a:	463b      	mov	r3, r7
 800ee1c:	f7f1 fe64 	bl	8000ae8 <__aeabi_dcmpeq>
 800ee20:	b908      	cbnz	r0, 800ee26 <_dtoa_r+0x186>
 800ee22:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee26:	f1ba 0f16 	cmp.w	sl, #22
 800ee2a:	d854      	bhi.n	800eed6 <_dtoa_r+0x236>
 800ee2c:	4b61      	ldr	r3, [pc, #388]	; (800efb4 <_dtoa_r+0x314>)
 800ee2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee3a:	f7f1 fe5f 	bl	8000afc <__aeabi_dcmplt>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d04b      	beq.n	800eeda <_dtoa_r+0x23a>
 800ee42:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee46:	2300      	movs	r3, #0
 800ee48:	930e      	str	r3, [sp, #56]	; 0x38
 800ee4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee4c:	1b5d      	subs	r5, r3, r5
 800ee4e:	1e6b      	subs	r3, r5, #1
 800ee50:	9304      	str	r3, [sp, #16]
 800ee52:	bf43      	ittte	mi
 800ee54:	2300      	movmi	r3, #0
 800ee56:	f1c5 0801 	rsbmi	r8, r5, #1
 800ee5a:	9304      	strmi	r3, [sp, #16]
 800ee5c:	f04f 0800 	movpl.w	r8, #0
 800ee60:	f1ba 0f00 	cmp.w	sl, #0
 800ee64:	db3b      	blt.n	800eede <_dtoa_r+0x23e>
 800ee66:	9b04      	ldr	r3, [sp, #16]
 800ee68:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ee6c:	4453      	add	r3, sl
 800ee6e:	9304      	str	r3, [sp, #16]
 800ee70:	2300      	movs	r3, #0
 800ee72:	9306      	str	r3, [sp, #24]
 800ee74:	9b05      	ldr	r3, [sp, #20]
 800ee76:	2b09      	cmp	r3, #9
 800ee78:	d869      	bhi.n	800ef4e <_dtoa_r+0x2ae>
 800ee7a:	2b05      	cmp	r3, #5
 800ee7c:	bfc4      	itt	gt
 800ee7e:	3b04      	subgt	r3, #4
 800ee80:	9305      	strgt	r3, [sp, #20]
 800ee82:	9b05      	ldr	r3, [sp, #20]
 800ee84:	f1a3 0302 	sub.w	r3, r3, #2
 800ee88:	bfcc      	ite	gt
 800ee8a:	2500      	movgt	r5, #0
 800ee8c:	2501      	movle	r5, #1
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	d869      	bhi.n	800ef66 <_dtoa_r+0x2c6>
 800ee92:	e8df f003 	tbb	[pc, r3]
 800ee96:	4e2c      	.short	0x4e2c
 800ee98:	5a4c      	.short	0x5a4c
 800ee9a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ee9e:	441d      	add	r5, r3
 800eea0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800eea4:	2b20      	cmp	r3, #32
 800eea6:	bfc1      	itttt	gt
 800eea8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800eeac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800eeb0:	fa09 f303 	lslgt.w	r3, r9, r3
 800eeb4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800eeb8:	bfda      	itte	le
 800eeba:	f1c3 0320 	rsble	r3, r3, #32
 800eebe:	fa06 f003 	lslle.w	r0, r6, r3
 800eec2:	4318      	orrgt	r0, r3
 800eec4:	f7f1 fb2e 	bl	8000524 <__aeabi_ui2d>
 800eec8:	2301      	movs	r3, #1
 800eeca:	4606      	mov	r6, r0
 800eecc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800eed0:	3d01      	subs	r5, #1
 800eed2:	9310      	str	r3, [sp, #64]	; 0x40
 800eed4:	e771      	b.n	800edba <_dtoa_r+0x11a>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e7b6      	b.n	800ee48 <_dtoa_r+0x1a8>
 800eeda:	900e      	str	r0, [sp, #56]	; 0x38
 800eedc:	e7b5      	b.n	800ee4a <_dtoa_r+0x1aa>
 800eede:	f1ca 0300 	rsb	r3, sl, #0
 800eee2:	9306      	str	r3, [sp, #24]
 800eee4:	2300      	movs	r3, #0
 800eee6:	eba8 080a 	sub.w	r8, r8, sl
 800eeea:	930d      	str	r3, [sp, #52]	; 0x34
 800eeec:	e7c2      	b.n	800ee74 <_dtoa_r+0x1d4>
 800eeee:	2300      	movs	r3, #0
 800eef0:	9308      	str	r3, [sp, #32]
 800eef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	dc39      	bgt.n	800ef6c <_dtoa_r+0x2cc>
 800eef8:	f04f 0901 	mov.w	r9, #1
 800eefc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ef00:	464b      	mov	r3, r9
 800ef02:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ef06:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ef08:	2200      	movs	r2, #0
 800ef0a:	6042      	str	r2, [r0, #4]
 800ef0c:	2204      	movs	r2, #4
 800ef0e:	f102 0614 	add.w	r6, r2, #20
 800ef12:	429e      	cmp	r6, r3
 800ef14:	6841      	ldr	r1, [r0, #4]
 800ef16:	d92f      	bls.n	800ef78 <_dtoa_r+0x2d8>
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f001 fa6f 	bl	80103fc <_Balloc>
 800ef1e:	9000      	str	r0, [sp, #0]
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d14b      	bne.n	800efbc <_dtoa_r+0x31c>
 800ef24:	4b24      	ldr	r3, [pc, #144]	; (800efb8 <_dtoa_r+0x318>)
 800ef26:	4602      	mov	r2, r0
 800ef28:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ef2c:	e6d1      	b.n	800ecd2 <_dtoa_r+0x32>
 800ef2e:	2301      	movs	r3, #1
 800ef30:	e7de      	b.n	800eef0 <_dtoa_r+0x250>
 800ef32:	2300      	movs	r3, #0
 800ef34:	9308      	str	r3, [sp, #32]
 800ef36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef38:	eb0a 0903 	add.w	r9, sl, r3
 800ef3c:	f109 0301 	add.w	r3, r9, #1
 800ef40:	2b01      	cmp	r3, #1
 800ef42:	9301      	str	r3, [sp, #4]
 800ef44:	bfb8      	it	lt
 800ef46:	2301      	movlt	r3, #1
 800ef48:	e7dd      	b.n	800ef06 <_dtoa_r+0x266>
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	e7f2      	b.n	800ef34 <_dtoa_r+0x294>
 800ef4e:	2501      	movs	r5, #1
 800ef50:	2300      	movs	r3, #0
 800ef52:	9305      	str	r3, [sp, #20]
 800ef54:	9508      	str	r5, [sp, #32]
 800ef56:	f04f 39ff 	mov.w	r9, #4294967295
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ef60:	2312      	movs	r3, #18
 800ef62:	9209      	str	r2, [sp, #36]	; 0x24
 800ef64:	e7cf      	b.n	800ef06 <_dtoa_r+0x266>
 800ef66:	2301      	movs	r3, #1
 800ef68:	9308      	str	r3, [sp, #32]
 800ef6a:	e7f4      	b.n	800ef56 <_dtoa_r+0x2b6>
 800ef6c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ef70:	f8cd 9004 	str.w	r9, [sp, #4]
 800ef74:	464b      	mov	r3, r9
 800ef76:	e7c6      	b.n	800ef06 <_dtoa_r+0x266>
 800ef78:	3101      	adds	r1, #1
 800ef7a:	6041      	str	r1, [r0, #4]
 800ef7c:	0052      	lsls	r2, r2, #1
 800ef7e:	e7c6      	b.n	800ef0e <_dtoa_r+0x26e>
 800ef80:	636f4361 	.word	0x636f4361
 800ef84:	3fd287a7 	.word	0x3fd287a7
 800ef88:	8b60c8b3 	.word	0x8b60c8b3
 800ef8c:	3fc68a28 	.word	0x3fc68a28
 800ef90:	509f79fb 	.word	0x509f79fb
 800ef94:	3fd34413 	.word	0x3fd34413
 800ef98:	080121b5 	.word	0x080121b5
 800ef9c:	080121cc 	.word	0x080121cc
 800efa0:	7ff00000 	.word	0x7ff00000
 800efa4:	080121b1 	.word	0x080121b1
 800efa8:	080121a8 	.word	0x080121a8
 800efac:	0801212d 	.word	0x0801212d
 800efb0:	3ff80000 	.word	0x3ff80000
 800efb4:	080123a8 	.word	0x080123a8
 800efb8:	0801222b 	.word	0x0801222b
 800efbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efbe:	9a00      	ldr	r2, [sp, #0]
 800efc0:	601a      	str	r2, [r3, #0]
 800efc2:	9b01      	ldr	r3, [sp, #4]
 800efc4:	2b0e      	cmp	r3, #14
 800efc6:	f200 80ad 	bhi.w	800f124 <_dtoa_r+0x484>
 800efca:	2d00      	cmp	r5, #0
 800efcc:	f000 80aa 	beq.w	800f124 <_dtoa_r+0x484>
 800efd0:	f1ba 0f00 	cmp.w	sl, #0
 800efd4:	dd36      	ble.n	800f044 <_dtoa_r+0x3a4>
 800efd6:	4ac3      	ldr	r2, [pc, #780]	; (800f2e4 <_dtoa_r+0x644>)
 800efd8:	f00a 030f 	and.w	r3, sl, #15
 800efdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800efe0:	ed93 7b00 	vldr	d7, [r3]
 800efe4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800efe8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800efec:	eeb0 8a47 	vmov.f32	s16, s14
 800eff0:	eef0 8a67 	vmov.f32	s17, s15
 800eff4:	d016      	beq.n	800f024 <_dtoa_r+0x384>
 800eff6:	4bbc      	ldr	r3, [pc, #752]	; (800f2e8 <_dtoa_r+0x648>)
 800eff8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800effc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f000:	f7f1 fc34 	bl	800086c <__aeabi_ddiv>
 800f004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f008:	f007 070f 	and.w	r7, r7, #15
 800f00c:	2503      	movs	r5, #3
 800f00e:	4eb6      	ldr	r6, [pc, #728]	; (800f2e8 <_dtoa_r+0x648>)
 800f010:	b957      	cbnz	r7, 800f028 <_dtoa_r+0x388>
 800f012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f016:	ec53 2b18 	vmov	r2, r3, d8
 800f01a:	f7f1 fc27 	bl	800086c <__aeabi_ddiv>
 800f01e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f022:	e029      	b.n	800f078 <_dtoa_r+0x3d8>
 800f024:	2502      	movs	r5, #2
 800f026:	e7f2      	b.n	800f00e <_dtoa_r+0x36e>
 800f028:	07f9      	lsls	r1, r7, #31
 800f02a:	d508      	bpl.n	800f03e <_dtoa_r+0x39e>
 800f02c:	ec51 0b18 	vmov	r0, r1, d8
 800f030:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f034:	f7f1 faf0 	bl	8000618 <__aeabi_dmul>
 800f038:	ec41 0b18 	vmov	d8, r0, r1
 800f03c:	3501      	adds	r5, #1
 800f03e:	107f      	asrs	r7, r7, #1
 800f040:	3608      	adds	r6, #8
 800f042:	e7e5      	b.n	800f010 <_dtoa_r+0x370>
 800f044:	f000 80a6 	beq.w	800f194 <_dtoa_r+0x4f4>
 800f048:	f1ca 0600 	rsb	r6, sl, #0
 800f04c:	4ba5      	ldr	r3, [pc, #660]	; (800f2e4 <_dtoa_r+0x644>)
 800f04e:	4fa6      	ldr	r7, [pc, #664]	; (800f2e8 <_dtoa_r+0x648>)
 800f050:	f006 020f 	and.w	r2, r6, #15
 800f054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f060:	f7f1 fada 	bl	8000618 <__aeabi_dmul>
 800f064:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f068:	1136      	asrs	r6, r6, #4
 800f06a:	2300      	movs	r3, #0
 800f06c:	2502      	movs	r5, #2
 800f06e:	2e00      	cmp	r6, #0
 800f070:	f040 8085 	bne.w	800f17e <_dtoa_r+0x4de>
 800f074:	2b00      	cmp	r3, #0
 800f076:	d1d2      	bne.n	800f01e <_dtoa_r+0x37e>
 800f078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	f000 808c 	beq.w	800f198 <_dtoa_r+0x4f8>
 800f080:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f084:	4b99      	ldr	r3, [pc, #612]	; (800f2ec <_dtoa_r+0x64c>)
 800f086:	2200      	movs	r2, #0
 800f088:	4630      	mov	r0, r6
 800f08a:	4639      	mov	r1, r7
 800f08c:	f7f1 fd36 	bl	8000afc <__aeabi_dcmplt>
 800f090:	2800      	cmp	r0, #0
 800f092:	f000 8081 	beq.w	800f198 <_dtoa_r+0x4f8>
 800f096:	9b01      	ldr	r3, [sp, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d07d      	beq.n	800f198 <_dtoa_r+0x4f8>
 800f09c:	f1b9 0f00 	cmp.w	r9, #0
 800f0a0:	dd3c      	ble.n	800f11c <_dtoa_r+0x47c>
 800f0a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f0a6:	9307      	str	r3, [sp, #28]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	4b91      	ldr	r3, [pc, #580]	; (800f2f0 <_dtoa_r+0x650>)
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	4639      	mov	r1, r7
 800f0b0:	f7f1 fab2 	bl	8000618 <__aeabi_dmul>
 800f0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0b8:	3501      	adds	r5, #1
 800f0ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800f0be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f0c2:	4628      	mov	r0, r5
 800f0c4:	f7f1 fa3e 	bl	8000544 <__aeabi_i2d>
 800f0c8:	4632      	mov	r2, r6
 800f0ca:	463b      	mov	r3, r7
 800f0cc:	f7f1 faa4 	bl	8000618 <__aeabi_dmul>
 800f0d0:	4b88      	ldr	r3, [pc, #544]	; (800f2f4 <_dtoa_r+0x654>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f7f1 f8ea 	bl	80002ac <__adddf3>
 800f0d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0e0:	9303      	str	r3, [sp, #12]
 800f0e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d15c      	bne.n	800f1a2 <_dtoa_r+0x502>
 800f0e8:	4b83      	ldr	r3, [pc, #524]	; (800f2f8 <_dtoa_r+0x658>)
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	4639      	mov	r1, r7
 800f0f0:	f7f1 f8da 	bl	80002a8 <__aeabi_dsub>
 800f0f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0f8:	4606      	mov	r6, r0
 800f0fa:	460f      	mov	r7, r1
 800f0fc:	f7f1 fd1c 	bl	8000b38 <__aeabi_dcmpgt>
 800f100:	2800      	cmp	r0, #0
 800f102:	f040 8296 	bne.w	800f632 <_dtoa_r+0x992>
 800f106:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f10a:	4630      	mov	r0, r6
 800f10c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f110:	4639      	mov	r1, r7
 800f112:	f7f1 fcf3 	bl	8000afc <__aeabi_dcmplt>
 800f116:	2800      	cmp	r0, #0
 800f118:	f040 8288 	bne.w	800f62c <_dtoa_r+0x98c>
 800f11c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f126:	2b00      	cmp	r3, #0
 800f128:	f2c0 8158 	blt.w	800f3dc <_dtoa_r+0x73c>
 800f12c:	f1ba 0f0e 	cmp.w	sl, #14
 800f130:	f300 8154 	bgt.w	800f3dc <_dtoa_r+0x73c>
 800f134:	4b6b      	ldr	r3, [pc, #428]	; (800f2e4 <_dtoa_r+0x644>)
 800f136:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f13a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f13e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f140:	2b00      	cmp	r3, #0
 800f142:	f280 80e3 	bge.w	800f30c <_dtoa_r+0x66c>
 800f146:	9b01      	ldr	r3, [sp, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f300 80df 	bgt.w	800f30c <_dtoa_r+0x66c>
 800f14e:	f040 826d 	bne.w	800f62c <_dtoa_r+0x98c>
 800f152:	4b69      	ldr	r3, [pc, #420]	; (800f2f8 <_dtoa_r+0x658>)
 800f154:	2200      	movs	r2, #0
 800f156:	4640      	mov	r0, r8
 800f158:	4649      	mov	r1, r9
 800f15a:	f7f1 fa5d 	bl	8000618 <__aeabi_dmul>
 800f15e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f162:	f7f1 fcdf 	bl	8000b24 <__aeabi_dcmpge>
 800f166:	9e01      	ldr	r6, [sp, #4]
 800f168:	4637      	mov	r7, r6
 800f16a:	2800      	cmp	r0, #0
 800f16c:	f040 8243 	bne.w	800f5f6 <_dtoa_r+0x956>
 800f170:	9d00      	ldr	r5, [sp, #0]
 800f172:	2331      	movs	r3, #49	; 0x31
 800f174:	f805 3b01 	strb.w	r3, [r5], #1
 800f178:	f10a 0a01 	add.w	sl, sl, #1
 800f17c:	e23f      	b.n	800f5fe <_dtoa_r+0x95e>
 800f17e:	07f2      	lsls	r2, r6, #31
 800f180:	d505      	bpl.n	800f18e <_dtoa_r+0x4ee>
 800f182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f186:	f7f1 fa47 	bl	8000618 <__aeabi_dmul>
 800f18a:	3501      	adds	r5, #1
 800f18c:	2301      	movs	r3, #1
 800f18e:	1076      	asrs	r6, r6, #1
 800f190:	3708      	adds	r7, #8
 800f192:	e76c      	b.n	800f06e <_dtoa_r+0x3ce>
 800f194:	2502      	movs	r5, #2
 800f196:	e76f      	b.n	800f078 <_dtoa_r+0x3d8>
 800f198:	9b01      	ldr	r3, [sp, #4]
 800f19a:	f8cd a01c 	str.w	sl, [sp, #28]
 800f19e:	930c      	str	r3, [sp, #48]	; 0x30
 800f1a0:	e78d      	b.n	800f0be <_dtoa_r+0x41e>
 800f1a2:	9900      	ldr	r1, [sp, #0]
 800f1a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f1a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f1a8:	4b4e      	ldr	r3, [pc, #312]	; (800f2e4 <_dtoa_r+0x644>)
 800f1aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1ae:	4401      	add	r1, r0
 800f1b0:	9102      	str	r1, [sp, #8]
 800f1b2:	9908      	ldr	r1, [sp, #32]
 800f1b4:	eeb0 8a47 	vmov.f32	s16, s14
 800f1b8:	eef0 8a67 	vmov.f32	s17, s15
 800f1bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f1c4:	2900      	cmp	r1, #0
 800f1c6:	d045      	beq.n	800f254 <_dtoa_r+0x5b4>
 800f1c8:	494c      	ldr	r1, [pc, #304]	; (800f2fc <_dtoa_r+0x65c>)
 800f1ca:	2000      	movs	r0, #0
 800f1cc:	f7f1 fb4e 	bl	800086c <__aeabi_ddiv>
 800f1d0:	ec53 2b18 	vmov	r2, r3, d8
 800f1d4:	f7f1 f868 	bl	80002a8 <__aeabi_dsub>
 800f1d8:	9d00      	ldr	r5, [sp, #0]
 800f1da:	ec41 0b18 	vmov	d8, r0, r1
 800f1de:	4639      	mov	r1, r7
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	f7f1 fcc9 	bl	8000b78 <__aeabi_d2iz>
 800f1e6:	900c      	str	r0, [sp, #48]	; 0x30
 800f1e8:	f7f1 f9ac 	bl	8000544 <__aeabi_i2d>
 800f1ec:	4602      	mov	r2, r0
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	4639      	mov	r1, r7
 800f1f4:	f7f1 f858 	bl	80002a8 <__aeabi_dsub>
 800f1f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1fa:	3330      	adds	r3, #48	; 0x30
 800f1fc:	f805 3b01 	strb.w	r3, [r5], #1
 800f200:	ec53 2b18 	vmov	r2, r3, d8
 800f204:	4606      	mov	r6, r0
 800f206:	460f      	mov	r7, r1
 800f208:	f7f1 fc78 	bl	8000afc <__aeabi_dcmplt>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d165      	bne.n	800f2dc <_dtoa_r+0x63c>
 800f210:	4632      	mov	r2, r6
 800f212:	463b      	mov	r3, r7
 800f214:	4935      	ldr	r1, [pc, #212]	; (800f2ec <_dtoa_r+0x64c>)
 800f216:	2000      	movs	r0, #0
 800f218:	f7f1 f846 	bl	80002a8 <__aeabi_dsub>
 800f21c:	ec53 2b18 	vmov	r2, r3, d8
 800f220:	f7f1 fc6c 	bl	8000afc <__aeabi_dcmplt>
 800f224:	2800      	cmp	r0, #0
 800f226:	f040 80b9 	bne.w	800f39c <_dtoa_r+0x6fc>
 800f22a:	9b02      	ldr	r3, [sp, #8]
 800f22c:	429d      	cmp	r5, r3
 800f22e:	f43f af75 	beq.w	800f11c <_dtoa_r+0x47c>
 800f232:	4b2f      	ldr	r3, [pc, #188]	; (800f2f0 <_dtoa_r+0x650>)
 800f234:	ec51 0b18 	vmov	r0, r1, d8
 800f238:	2200      	movs	r2, #0
 800f23a:	f7f1 f9ed 	bl	8000618 <__aeabi_dmul>
 800f23e:	4b2c      	ldr	r3, [pc, #176]	; (800f2f0 <_dtoa_r+0x650>)
 800f240:	ec41 0b18 	vmov	d8, r0, r1
 800f244:	2200      	movs	r2, #0
 800f246:	4630      	mov	r0, r6
 800f248:	4639      	mov	r1, r7
 800f24a:	f7f1 f9e5 	bl	8000618 <__aeabi_dmul>
 800f24e:	4606      	mov	r6, r0
 800f250:	460f      	mov	r7, r1
 800f252:	e7c4      	b.n	800f1de <_dtoa_r+0x53e>
 800f254:	ec51 0b17 	vmov	r0, r1, d7
 800f258:	f7f1 f9de 	bl	8000618 <__aeabi_dmul>
 800f25c:	9b02      	ldr	r3, [sp, #8]
 800f25e:	9d00      	ldr	r5, [sp, #0]
 800f260:	930c      	str	r3, [sp, #48]	; 0x30
 800f262:	ec41 0b18 	vmov	d8, r0, r1
 800f266:	4639      	mov	r1, r7
 800f268:	4630      	mov	r0, r6
 800f26a:	f7f1 fc85 	bl	8000b78 <__aeabi_d2iz>
 800f26e:	9011      	str	r0, [sp, #68]	; 0x44
 800f270:	f7f1 f968 	bl	8000544 <__aeabi_i2d>
 800f274:	4602      	mov	r2, r0
 800f276:	460b      	mov	r3, r1
 800f278:	4630      	mov	r0, r6
 800f27a:	4639      	mov	r1, r7
 800f27c:	f7f1 f814 	bl	80002a8 <__aeabi_dsub>
 800f280:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f282:	3330      	adds	r3, #48	; 0x30
 800f284:	f805 3b01 	strb.w	r3, [r5], #1
 800f288:	9b02      	ldr	r3, [sp, #8]
 800f28a:	429d      	cmp	r5, r3
 800f28c:	4606      	mov	r6, r0
 800f28e:	460f      	mov	r7, r1
 800f290:	f04f 0200 	mov.w	r2, #0
 800f294:	d134      	bne.n	800f300 <_dtoa_r+0x660>
 800f296:	4b19      	ldr	r3, [pc, #100]	; (800f2fc <_dtoa_r+0x65c>)
 800f298:	ec51 0b18 	vmov	r0, r1, d8
 800f29c:	f7f1 f806 	bl	80002ac <__adddf3>
 800f2a0:	4602      	mov	r2, r0
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	4639      	mov	r1, r7
 800f2a8:	f7f1 fc46 	bl	8000b38 <__aeabi_dcmpgt>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d175      	bne.n	800f39c <_dtoa_r+0x6fc>
 800f2b0:	ec53 2b18 	vmov	r2, r3, d8
 800f2b4:	4911      	ldr	r1, [pc, #68]	; (800f2fc <_dtoa_r+0x65c>)
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	f7f0 fff6 	bl	80002a8 <__aeabi_dsub>
 800f2bc:	4602      	mov	r2, r0
 800f2be:	460b      	mov	r3, r1
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	4639      	mov	r1, r7
 800f2c4:	f7f1 fc1a 	bl	8000afc <__aeabi_dcmplt>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	f43f af27 	beq.w	800f11c <_dtoa_r+0x47c>
 800f2ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f2d0:	1e6b      	subs	r3, r5, #1
 800f2d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f2d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2d8:	2b30      	cmp	r3, #48	; 0x30
 800f2da:	d0f8      	beq.n	800f2ce <_dtoa_r+0x62e>
 800f2dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f2e0:	e04a      	b.n	800f378 <_dtoa_r+0x6d8>
 800f2e2:	bf00      	nop
 800f2e4:	080123a8 	.word	0x080123a8
 800f2e8:	08012380 	.word	0x08012380
 800f2ec:	3ff00000 	.word	0x3ff00000
 800f2f0:	40240000 	.word	0x40240000
 800f2f4:	401c0000 	.word	0x401c0000
 800f2f8:	40140000 	.word	0x40140000
 800f2fc:	3fe00000 	.word	0x3fe00000
 800f300:	4baf      	ldr	r3, [pc, #700]	; (800f5c0 <_dtoa_r+0x920>)
 800f302:	f7f1 f989 	bl	8000618 <__aeabi_dmul>
 800f306:	4606      	mov	r6, r0
 800f308:	460f      	mov	r7, r1
 800f30a:	e7ac      	b.n	800f266 <_dtoa_r+0x5c6>
 800f30c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f310:	9d00      	ldr	r5, [sp, #0]
 800f312:	4642      	mov	r2, r8
 800f314:	464b      	mov	r3, r9
 800f316:	4630      	mov	r0, r6
 800f318:	4639      	mov	r1, r7
 800f31a:	f7f1 faa7 	bl	800086c <__aeabi_ddiv>
 800f31e:	f7f1 fc2b 	bl	8000b78 <__aeabi_d2iz>
 800f322:	9002      	str	r0, [sp, #8]
 800f324:	f7f1 f90e 	bl	8000544 <__aeabi_i2d>
 800f328:	4642      	mov	r2, r8
 800f32a:	464b      	mov	r3, r9
 800f32c:	f7f1 f974 	bl	8000618 <__aeabi_dmul>
 800f330:	4602      	mov	r2, r0
 800f332:	460b      	mov	r3, r1
 800f334:	4630      	mov	r0, r6
 800f336:	4639      	mov	r1, r7
 800f338:	f7f0 ffb6 	bl	80002a8 <__aeabi_dsub>
 800f33c:	9e02      	ldr	r6, [sp, #8]
 800f33e:	9f01      	ldr	r7, [sp, #4]
 800f340:	3630      	adds	r6, #48	; 0x30
 800f342:	f805 6b01 	strb.w	r6, [r5], #1
 800f346:	9e00      	ldr	r6, [sp, #0]
 800f348:	1bae      	subs	r6, r5, r6
 800f34a:	42b7      	cmp	r7, r6
 800f34c:	4602      	mov	r2, r0
 800f34e:	460b      	mov	r3, r1
 800f350:	d137      	bne.n	800f3c2 <_dtoa_r+0x722>
 800f352:	f7f0 ffab 	bl	80002ac <__adddf3>
 800f356:	4642      	mov	r2, r8
 800f358:	464b      	mov	r3, r9
 800f35a:	4606      	mov	r6, r0
 800f35c:	460f      	mov	r7, r1
 800f35e:	f7f1 fbeb 	bl	8000b38 <__aeabi_dcmpgt>
 800f362:	b9c8      	cbnz	r0, 800f398 <_dtoa_r+0x6f8>
 800f364:	4642      	mov	r2, r8
 800f366:	464b      	mov	r3, r9
 800f368:	4630      	mov	r0, r6
 800f36a:	4639      	mov	r1, r7
 800f36c:	f7f1 fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 800f370:	b110      	cbz	r0, 800f378 <_dtoa_r+0x6d8>
 800f372:	9b02      	ldr	r3, [sp, #8]
 800f374:	07d9      	lsls	r1, r3, #31
 800f376:	d40f      	bmi.n	800f398 <_dtoa_r+0x6f8>
 800f378:	4620      	mov	r0, r4
 800f37a:	4659      	mov	r1, fp
 800f37c:	f001 f87e 	bl	801047c <_Bfree>
 800f380:	2300      	movs	r3, #0
 800f382:	702b      	strb	r3, [r5, #0]
 800f384:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f386:	f10a 0001 	add.w	r0, sl, #1
 800f38a:	6018      	str	r0, [r3, #0]
 800f38c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f43f acd8 	beq.w	800ed44 <_dtoa_r+0xa4>
 800f394:	601d      	str	r5, [r3, #0]
 800f396:	e4d5      	b.n	800ed44 <_dtoa_r+0xa4>
 800f398:	f8cd a01c 	str.w	sl, [sp, #28]
 800f39c:	462b      	mov	r3, r5
 800f39e:	461d      	mov	r5, r3
 800f3a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3a4:	2a39      	cmp	r2, #57	; 0x39
 800f3a6:	d108      	bne.n	800f3ba <_dtoa_r+0x71a>
 800f3a8:	9a00      	ldr	r2, [sp, #0]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d1f7      	bne.n	800f39e <_dtoa_r+0x6fe>
 800f3ae:	9a07      	ldr	r2, [sp, #28]
 800f3b0:	9900      	ldr	r1, [sp, #0]
 800f3b2:	3201      	adds	r2, #1
 800f3b4:	9207      	str	r2, [sp, #28]
 800f3b6:	2230      	movs	r2, #48	; 0x30
 800f3b8:	700a      	strb	r2, [r1, #0]
 800f3ba:	781a      	ldrb	r2, [r3, #0]
 800f3bc:	3201      	adds	r2, #1
 800f3be:	701a      	strb	r2, [r3, #0]
 800f3c0:	e78c      	b.n	800f2dc <_dtoa_r+0x63c>
 800f3c2:	4b7f      	ldr	r3, [pc, #508]	; (800f5c0 <_dtoa_r+0x920>)
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	f7f1 f927 	bl	8000618 <__aeabi_dmul>
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4606      	mov	r6, r0
 800f3d0:	460f      	mov	r7, r1
 800f3d2:	f7f1 fb89 	bl	8000ae8 <__aeabi_dcmpeq>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d09b      	beq.n	800f312 <_dtoa_r+0x672>
 800f3da:	e7cd      	b.n	800f378 <_dtoa_r+0x6d8>
 800f3dc:	9a08      	ldr	r2, [sp, #32]
 800f3de:	2a00      	cmp	r2, #0
 800f3e0:	f000 80c4 	beq.w	800f56c <_dtoa_r+0x8cc>
 800f3e4:	9a05      	ldr	r2, [sp, #20]
 800f3e6:	2a01      	cmp	r2, #1
 800f3e8:	f300 80a8 	bgt.w	800f53c <_dtoa_r+0x89c>
 800f3ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f3ee:	2a00      	cmp	r2, #0
 800f3f0:	f000 80a0 	beq.w	800f534 <_dtoa_r+0x894>
 800f3f4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f3f8:	9e06      	ldr	r6, [sp, #24]
 800f3fa:	4645      	mov	r5, r8
 800f3fc:	9a04      	ldr	r2, [sp, #16]
 800f3fe:	2101      	movs	r1, #1
 800f400:	441a      	add	r2, r3
 800f402:	4620      	mov	r0, r4
 800f404:	4498      	add	r8, r3
 800f406:	9204      	str	r2, [sp, #16]
 800f408:	f001 f93e 	bl	8010688 <__i2b>
 800f40c:	4607      	mov	r7, r0
 800f40e:	2d00      	cmp	r5, #0
 800f410:	dd0b      	ble.n	800f42a <_dtoa_r+0x78a>
 800f412:	9b04      	ldr	r3, [sp, #16]
 800f414:	2b00      	cmp	r3, #0
 800f416:	dd08      	ble.n	800f42a <_dtoa_r+0x78a>
 800f418:	42ab      	cmp	r3, r5
 800f41a:	9a04      	ldr	r2, [sp, #16]
 800f41c:	bfa8      	it	ge
 800f41e:	462b      	movge	r3, r5
 800f420:	eba8 0803 	sub.w	r8, r8, r3
 800f424:	1aed      	subs	r5, r5, r3
 800f426:	1ad3      	subs	r3, r2, r3
 800f428:	9304      	str	r3, [sp, #16]
 800f42a:	9b06      	ldr	r3, [sp, #24]
 800f42c:	b1fb      	cbz	r3, 800f46e <_dtoa_r+0x7ce>
 800f42e:	9b08      	ldr	r3, [sp, #32]
 800f430:	2b00      	cmp	r3, #0
 800f432:	f000 809f 	beq.w	800f574 <_dtoa_r+0x8d4>
 800f436:	2e00      	cmp	r6, #0
 800f438:	dd11      	ble.n	800f45e <_dtoa_r+0x7be>
 800f43a:	4639      	mov	r1, r7
 800f43c:	4632      	mov	r2, r6
 800f43e:	4620      	mov	r0, r4
 800f440:	f001 f9de 	bl	8010800 <__pow5mult>
 800f444:	465a      	mov	r2, fp
 800f446:	4601      	mov	r1, r0
 800f448:	4607      	mov	r7, r0
 800f44a:	4620      	mov	r0, r4
 800f44c:	f001 f932 	bl	80106b4 <__multiply>
 800f450:	4659      	mov	r1, fp
 800f452:	9007      	str	r0, [sp, #28]
 800f454:	4620      	mov	r0, r4
 800f456:	f001 f811 	bl	801047c <_Bfree>
 800f45a:	9b07      	ldr	r3, [sp, #28]
 800f45c:	469b      	mov	fp, r3
 800f45e:	9b06      	ldr	r3, [sp, #24]
 800f460:	1b9a      	subs	r2, r3, r6
 800f462:	d004      	beq.n	800f46e <_dtoa_r+0x7ce>
 800f464:	4659      	mov	r1, fp
 800f466:	4620      	mov	r0, r4
 800f468:	f001 f9ca 	bl	8010800 <__pow5mult>
 800f46c:	4683      	mov	fp, r0
 800f46e:	2101      	movs	r1, #1
 800f470:	4620      	mov	r0, r4
 800f472:	f001 f909 	bl	8010688 <__i2b>
 800f476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f478:	2b00      	cmp	r3, #0
 800f47a:	4606      	mov	r6, r0
 800f47c:	dd7c      	ble.n	800f578 <_dtoa_r+0x8d8>
 800f47e:	461a      	mov	r2, r3
 800f480:	4601      	mov	r1, r0
 800f482:	4620      	mov	r0, r4
 800f484:	f001 f9bc 	bl	8010800 <__pow5mult>
 800f488:	9b05      	ldr	r3, [sp, #20]
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	4606      	mov	r6, r0
 800f48e:	dd76      	ble.n	800f57e <_dtoa_r+0x8de>
 800f490:	2300      	movs	r3, #0
 800f492:	9306      	str	r3, [sp, #24]
 800f494:	6933      	ldr	r3, [r6, #16]
 800f496:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f49a:	6918      	ldr	r0, [r3, #16]
 800f49c:	f001 f8a4 	bl	80105e8 <__hi0bits>
 800f4a0:	f1c0 0020 	rsb	r0, r0, #32
 800f4a4:	9b04      	ldr	r3, [sp, #16]
 800f4a6:	4418      	add	r0, r3
 800f4a8:	f010 001f 	ands.w	r0, r0, #31
 800f4ac:	f000 8086 	beq.w	800f5bc <_dtoa_r+0x91c>
 800f4b0:	f1c0 0320 	rsb	r3, r0, #32
 800f4b4:	2b04      	cmp	r3, #4
 800f4b6:	dd7f      	ble.n	800f5b8 <_dtoa_r+0x918>
 800f4b8:	f1c0 001c 	rsb	r0, r0, #28
 800f4bc:	9b04      	ldr	r3, [sp, #16]
 800f4be:	4403      	add	r3, r0
 800f4c0:	4480      	add	r8, r0
 800f4c2:	4405      	add	r5, r0
 800f4c4:	9304      	str	r3, [sp, #16]
 800f4c6:	f1b8 0f00 	cmp.w	r8, #0
 800f4ca:	dd05      	ble.n	800f4d8 <_dtoa_r+0x838>
 800f4cc:	4659      	mov	r1, fp
 800f4ce:	4642      	mov	r2, r8
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f001 f9ef 	bl	80108b4 <__lshift>
 800f4d6:	4683      	mov	fp, r0
 800f4d8:	9b04      	ldr	r3, [sp, #16]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	dd05      	ble.n	800f4ea <_dtoa_r+0x84a>
 800f4de:	4631      	mov	r1, r6
 800f4e0:	461a      	mov	r2, r3
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f001 f9e6 	bl	80108b4 <__lshift>
 800f4e8:	4606      	mov	r6, r0
 800f4ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d069      	beq.n	800f5c4 <_dtoa_r+0x924>
 800f4f0:	4631      	mov	r1, r6
 800f4f2:	4658      	mov	r0, fp
 800f4f4:	f001 fa4a 	bl	801098c <__mcmp>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	da63      	bge.n	800f5c4 <_dtoa_r+0x924>
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4659      	mov	r1, fp
 800f500:	220a      	movs	r2, #10
 800f502:	4620      	mov	r0, r4
 800f504:	f000 ffdc 	bl	80104c0 <__multadd>
 800f508:	9b08      	ldr	r3, [sp, #32]
 800f50a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f50e:	4683      	mov	fp, r0
 800f510:	2b00      	cmp	r3, #0
 800f512:	f000 818f 	beq.w	800f834 <_dtoa_r+0xb94>
 800f516:	4639      	mov	r1, r7
 800f518:	2300      	movs	r3, #0
 800f51a:	220a      	movs	r2, #10
 800f51c:	4620      	mov	r0, r4
 800f51e:	f000 ffcf 	bl	80104c0 <__multadd>
 800f522:	f1b9 0f00 	cmp.w	r9, #0
 800f526:	4607      	mov	r7, r0
 800f528:	f300 808e 	bgt.w	800f648 <_dtoa_r+0x9a8>
 800f52c:	9b05      	ldr	r3, [sp, #20]
 800f52e:	2b02      	cmp	r3, #2
 800f530:	dc50      	bgt.n	800f5d4 <_dtoa_r+0x934>
 800f532:	e089      	b.n	800f648 <_dtoa_r+0x9a8>
 800f534:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f536:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f53a:	e75d      	b.n	800f3f8 <_dtoa_r+0x758>
 800f53c:	9b01      	ldr	r3, [sp, #4]
 800f53e:	1e5e      	subs	r6, r3, #1
 800f540:	9b06      	ldr	r3, [sp, #24]
 800f542:	42b3      	cmp	r3, r6
 800f544:	bfbf      	itttt	lt
 800f546:	9b06      	ldrlt	r3, [sp, #24]
 800f548:	9606      	strlt	r6, [sp, #24]
 800f54a:	1af2      	sublt	r2, r6, r3
 800f54c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f54e:	bfb6      	itet	lt
 800f550:	189b      	addlt	r3, r3, r2
 800f552:	1b9e      	subge	r6, r3, r6
 800f554:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f556:	9b01      	ldr	r3, [sp, #4]
 800f558:	bfb8      	it	lt
 800f55a:	2600      	movlt	r6, #0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	bfb5      	itete	lt
 800f560:	eba8 0503 	sublt.w	r5, r8, r3
 800f564:	9b01      	ldrge	r3, [sp, #4]
 800f566:	2300      	movlt	r3, #0
 800f568:	4645      	movge	r5, r8
 800f56a:	e747      	b.n	800f3fc <_dtoa_r+0x75c>
 800f56c:	9e06      	ldr	r6, [sp, #24]
 800f56e:	9f08      	ldr	r7, [sp, #32]
 800f570:	4645      	mov	r5, r8
 800f572:	e74c      	b.n	800f40e <_dtoa_r+0x76e>
 800f574:	9a06      	ldr	r2, [sp, #24]
 800f576:	e775      	b.n	800f464 <_dtoa_r+0x7c4>
 800f578:	9b05      	ldr	r3, [sp, #20]
 800f57a:	2b01      	cmp	r3, #1
 800f57c:	dc18      	bgt.n	800f5b0 <_dtoa_r+0x910>
 800f57e:	9b02      	ldr	r3, [sp, #8]
 800f580:	b9b3      	cbnz	r3, 800f5b0 <_dtoa_r+0x910>
 800f582:	9b03      	ldr	r3, [sp, #12]
 800f584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f588:	b9a3      	cbnz	r3, 800f5b4 <_dtoa_r+0x914>
 800f58a:	9b03      	ldr	r3, [sp, #12]
 800f58c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f590:	0d1b      	lsrs	r3, r3, #20
 800f592:	051b      	lsls	r3, r3, #20
 800f594:	b12b      	cbz	r3, 800f5a2 <_dtoa_r+0x902>
 800f596:	9b04      	ldr	r3, [sp, #16]
 800f598:	3301      	adds	r3, #1
 800f59a:	9304      	str	r3, [sp, #16]
 800f59c:	f108 0801 	add.w	r8, r8, #1
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	9306      	str	r3, [sp, #24]
 800f5a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f47f af74 	bne.w	800f494 <_dtoa_r+0x7f4>
 800f5ac:	2001      	movs	r0, #1
 800f5ae:	e779      	b.n	800f4a4 <_dtoa_r+0x804>
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	e7f6      	b.n	800f5a2 <_dtoa_r+0x902>
 800f5b4:	9b02      	ldr	r3, [sp, #8]
 800f5b6:	e7f4      	b.n	800f5a2 <_dtoa_r+0x902>
 800f5b8:	d085      	beq.n	800f4c6 <_dtoa_r+0x826>
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	301c      	adds	r0, #28
 800f5be:	e77d      	b.n	800f4bc <_dtoa_r+0x81c>
 800f5c0:	40240000 	.word	0x40240000
 800f5c4:	9b01      	ldr	r3, [sp, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	dc38      	bgt.n	800f63c <_dtoa_r+0x99c>
 800f5ca:	9b05      	ldr	r3, [sp, #20]
 800f5cc:	2b02      	cmp	r3, #2
 800f5ce:	dd35      	ble.n	800f63c <_dtoa_r+0x99c>
 800f5d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f5d4:	f1b9 0f00 	cmp.w	r9, #0
 800f5d8:	d10d      	bne.n	800f5f6 <_dtoa_r+0x956>
 800f5da:	4631      	mov	r1, r6
 800f5dc:	464b      	mov	r3, r9
 800f5de:	2205      	movs	r2, #5
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f000 ff6d 	bl	80104c0 <__multadd>
 800f5e6:	4601      	mov	r1, r0
 800f5e8:	4606      	mov	r6, r0
 800f5ea:	4658      	mov	r0, fp
 800f5ec:	f001 f9ce 	bl	801098c <__mcmp>
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	f73f adbd 	bgt.w	800f170 <_dtoa_r+0x4d0>
 800f5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5f8:	9d00      	ldr	r5, [sp, #0]
 800f5fa:	ea6f 0a03 	mvn.w	sl, r3
 800f5fe:	f04f 0800 	mov.w	r8, #0
 800f602:	4631      	mov	r1, r6
 800f604:	4620      	mov	r0, r4
 800f606:	f000 ff39 	bl	801047c <_Bfree>
 800f60a:	2f00      	cmp	r7, #0
 800f60c:	f43f aeb4 	beq.w	800f378 <_dtoa_r+0x6d8>
 800f610:	f1b8 0f00 	cmp.w	r8, #0
 800f614:	d005      	beq.n	800f622 <_dtoa_r+0x982>
 800f616:	45b8      	cmp	r8, r7
 800f618:	d003      	beq.n	800f622 <_dtoa_r+0x982>
 800f61a:	4641      	mov	r1, r8
 800f61c:	4620      	mov	r0, r4
 800f61e:	f000 ff2d 	bl	801047c <_Bfree>
 800f622:	4639      	mov	r1, r7
 800f624:	4620      	mov	r0, r4
 800f626:	f000 ff29 	bl	801047c <_Bfree>
 800f62a:	e6a5      	b.n	800f378 <_dtoa_r+0x6d8>
 800f62c:	2600      	movs	r6, #0
 800f62e:	4637      	mov	r7, r6
 800f630:	e7e1      	b.n	800f5f6 <_dtoa_r+0x956>
 800f632:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f634:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f638:	4637      	mov	r7, r6
 800f63a:	e599      	b.n	800f170 <_dtoa_r+0x4d0>
 800f63c:	9b08      	ldr	r3, [sp, #32]
 800f63e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	f000 80fd 	beq.w	800f842 <_dtoa_r+0xba2>
 800f648:	2d00      	cmp	r5, #0
 800f64a:	dd05      	ble.n	800f658 <_dtoa_r+0x9b8>
 800f64c:	4639      	mov	r1, r7
 800f64e:	462a      	mov	r2, r5
 800f650:	4620      	mov	r0, r4
 800f652:	f001 f92f 	bl	80108b4 <__lshift>
 800f656:	4607      	mov	r7, r0
 800f658:	9b06      	ldr	r3, [sp, #24]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d05c      	beq.n	800f718 <_dtoa_r+0xa78>
 800f65e:	6879      	ldr	r1, [r7, #4]
 800f660:	4620      	mov	r0, r4
 800f662:	f000 fecb 	bl	80103fc <_Balloc>
 800f666:	4605      	mov	r5, r0
 800f668:	b928      	cbnz	r0, 800f676 <_dtoa_r+0x9d6>
 800f66a:	4b80      	ldr	r3, [pc, #512]	; (800f86c <_dtoa_r+0xbcc>)
 800f66c:	4602      	mov	r2, r0
 800f66e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f672:	f7ff bb2e 	b.w	800ecd2 <_dtoa_r+0x32>
 800f676:	693a      	ldr	r2, [r7, #16]
 800f678:	3202      	adds	r2, #2
 800f67a:	0092      	lsls	r2, r2, #2
 800f67c:	f107 010c 	add.w	r1, r7, #12
 800f680:	300c      	adds	r0, #12
 800f682:	f7fd fa4d 	bl	800cb20 <memcpy>
 800f686:	2201      	movs	r2, #1
 800f688:	4629      	mov	r1, r5
 800f68a:	4620      	mov	r0, r4
 800f68c:	f001 f912 	bl	80108b4 <__lshift>
 800f690:	9b00      	ldr	r3, [sp, #0]
 800f692:	3301      	adds	r3, #1
 800f694:	9301      	str	r3, [sp, #4]
 800f696:	9b00      	ldr	r3, [sp, #0]
 800f698:	444b      	add	r3, r9
 800f69a:	9307      	str	r3, [sp, #28]
 800f69c:	9b02      	ldr	r3, [sp, #8]
 800f69e:	f003 0301 	and.w	r3, r3, #1
 800f6a2:	46b8      	mov	r8, r7
 800f6a4:	9306      	str	r3, [sp, #24]
 800f6a6:	4607      	mov	r7, r0
 800f6a8:	9b01      	ldr	r3, [sp, #4]
 800f6aa:	4631      	mov	r1, r6
 800f6ac:	3b01      	subs	r3, #1
 800f6ae:	4658      	mov	r0, fp
 800f6b0:	9302      	str	r3, [sp, #8]
 800f6b2:	f7ff fa69 	bl	800eb88 <quorem>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	3330      	adds	r3, #48	; 0x30
 800f6ba:	9004      	str	r0, [sp, #16]
 800f6bc:	4641      	mov	r1, r8
 800f6be:	4658      	mov	r0, fp
 800f6c0:	9308      	str	r3, [sp, #32]
 800f6c2:	f001 f963 	bl	801098c <__mcmp>
 800f6c6:	463a      	mov	r2, r7
 800f6c8:	4681      	mov	r9, r0
 800f6ca:	4631      	mov	r1, r6
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	f001 f979 	bl	80109c4 <__mdiff>
 800f6d2:	68c2      	ldr	r2, [r0, #12]
 800f6d4:	9b08      	ldr	r3, [sp, #32]
 800f6d6:	4605      	mov	r5, r0
 800f6d8:	bb02      	cbnz	r2, 800f71c <_dtoa_r+0xa7c>
 800f6da:	4601      	mov	r1, r0
 800f6dc:	4658      	mov	r0, fp
 800f6de:	f001 f955 	bl	801098c <__mcmp>
 800f6e2:	9b08      	ldr	r3, [sp, #32]
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f6ee:	f000 fec5 	bl	801047c <_Bfree>
 800f6f2:	9b05      	ldr	r3, [sp, #20]
 800f6f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6f6:	9d01      	ldr	r5, [sp, #4]
 800f6f8:	ea43 0102 	orr.w	r1, r3, r2
 800f6fc:	9b06      	ldr	r3, [sp, #24]
 800f6fe:	430b      	orrs	r3, r1
 800f700:	9b08      	ldr	r3, [sp, #32]
 800f702:	d10d      	bne.n	800f720 <_dtoa_r+0xa80>
 800f704:	2b39      	cmp	r3, #57	; 0x39
 800f706:	d029      	beq.n	800f75c <_dtoa_r+0xabc>
 800f708:	f1b9 0f00 	cmp.w	r9, #0
 800f70c:	dd01      	ble.n	800f712 <_dtoa_r+0xa72>
 800f70e:	9b04      	ldr	r3, [sp, #16]
 800f710:	3331      	adds	r3, #49	; 0x31
 800f712:	9a02      	ldr	r2, [sp, #8]
 800f714:	7013      	strb	r3, [r2, #0]
 800f716:	e774      	b.n	800f602 <_dtoa_r+0x962>
 800f718:	4638      	mov	r0, r7
 800f71a:	e7b9      	b.n	800f690 <_dtoa_r+0x9f0>
 800f71c:	2201      	movs	r2, #1
 800f71e:	e7e2      	b.n	800f6e6 <_dtoa_r+0xa46>
 800f720:	f1b9 0f00 	cmp.w	r9, #0
 800f724:	db06      	blt.n	800f734 <_dtoa_r+0xa94>
 800f726:	9905      	ldr	r1, [sp, #20]
 800f728:	ea41 0909 	orr.w	r9, r1, r9
 800f72c:	9906      	ldr	r1, [sp, #24]
 800f72e:	ea59 0101 	orrs.w	r1, r9, r1
 800f732:	d120      	bne.n	800f776 <_dtoa_r+0xad6>
 800f734:	2a00      	cmp	r2, #0
 800f736:	ddec      	ble.n	800f712 <_dtoa_r+0xa72>
 800f738:	4659      	mov	r1, fp
 800f73a:	2201      	movs	r2, #1
 800f73c:	4620      	mov	r0, r4
 800f73e:	9301      	str	r3, [sp, #4]
 800f740:	f001 f8b8 	bl	80108b4 <__lshift>
 800f744:	4631      	mov	r1, r6
 800f746:	4683      	mov	fp, r0
 800f748:	f001 f920 	bl	801098c <__mcmp>
 800f74c:	2800      	cmp	r0, #0
 800f74e:	9b01      	ldr	r3, [sp, #4]
 800f750:	dc02      	bgt.n	800f758 <_dtoa_r+0xab8>
 800f752:	d1de      	bne.n	800f712 <_dtoa_r+0xa72>
 800f754:	07da      	lsls	r2, r3, #31
 800f756:	d5dc      	bpl.n	800f712 <_dtoa_r+0xa72>
 800f758:	2b39      	cmp	r3, #57	; 0x39
 800f75a:	d1d8      	bne.n	800f70e <_dtoa_r+0xa6e>
 800f75c:	9a02      	ldr	r2, [sp, #8]
 800f75e:	2339      	movs	r3, #57	; 0x39
 800f760:	7013      	strb	r3, [r2, #0]
 800f762:	462b      	mov	r3, r5
 800f764:	461d      	mov	r5, r3
 800f766:	3b01      	subs	r3, #1
 800f768:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f76c:	2a39      	cmp	r2, #57	; 0x39
 800f76e:	d050      	beq.n	800f812 <_dtoa_r+0xb72>
 800f770:	3201      	adds	r2, #1
 800f772:	701a      	strb	r2, [r3, #0]
 800f774:	e745      	b.n	800f602 <_dtoa_r+0x962>
 800f776:	2a00      	cmp	r2, #0
 800f778:	dd03      	ble.n	800f782 <_dtoa_r+0xae2>
 800f77a:	2b39      	cmp	r3, #57	; 0x39
 800f77c:	d0ee      	beq.n	800f75c <_dtoa_r+0xabc>
 800f77e:	3301      	adds	r3, #1
 800f780:	e7c7      	b.n	800f712 <_dtoa_r+0xa72>
 800f782:	9a01      	ldr	r2, [sp, #4]
 800f784:	9907      	ldr	r1, [sp, #28]
 800f786:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f78a:	428a      	cmp	r2, r1
 800f78c:	d02a      	beq.n	800f7e4 <_dtoa_r+0xb44>
 800f78e:	4659      	mov	r1, fp
 800f790:	2300      	movs	r3, #0
 800f792:	220a      	movs	r2, #10
 800f794:	4620      	mov	r0, r4
 800f796:	f000 fe93 	bl	80104c0 <__multadd>
 800f79a:	45b8      	cmp	r8, r7
 800f79c:	4683      	mov	fp, r0
 800f79e:	f04f 0300 	mov.w	r3, #0
 800f7a2:	f04f 020a 	mov.w	r2, #10
 800f7a6:	4641      	mov	r1, r8
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	d107      	bne.n	800f7bc <_dtoa_r+0xb1c>
 800f7ac:	f000 fe88 	bl	80104c0 <__multadd>
 800f7b0:	4680      	mov	r8, r0
 800f7b2:	4607      	mov	r7, r0
 800f7b4:	9b01      	ldr	r3, [sp, #4]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	9301      	str	r3, [sp, #4]
 800f7ba:	e775      	b.n	800f6a8 <_dtoa_r+0xa08>
 800f7bc:	f000 fe80 	bl	80104c0 <__multadd>
 800f7c0:	4639      	mov	r1, r7
 800f7c2:	4680      	mov	r8, r0
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	220a      	movs	r2, #10
 800f7c8:	4620      	mov	r0, r4
 800f7ca:	f000 fe79 	bl	80104c0 <__multadd>
 800f7ce:	4607      	mov	r7, r0
 800f7d0:	e7f0      	b.n	800f7b4 <_dtoa_r+0xb14>
 800f7d2:	f1b9 0f00 	cmp.w	r9, #0
 800f7d6:	9a00      	ldr	r2, [sp, #0]
 800f7d8:	bfcc      	ite	gt
 800f7da:	464d      	movgt	r5, r9
 800f7dc:	2501      	movle	r5, #1
 800f7de:	4415      	add	r5, r2
 800f7e0:	f04f 0800 	mov.w	r8, #0
 800f7e4:	4659      	mov	r1, fp
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	9301      	str	r3, [sp, #4]
 800f7ec:	f001 f862 	bl	80108b4 <__lshift>
 800f7f0:	4631      	mov	r1, r6
 800f7f2:	4683      	mov	fp, r0
 800f7f4:	f001 f8ca 	bl	801098c <__mcmp>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	dcb2      	bgt.n	800f762 <_dtoa_r+0xac2>
 800f7fc:	d102      	bne.n	800f804 <_dtoa_r+0xb64>
 800f7fe:	9b01      	ldr	r3, [sp, #4]
 800f800:	07db      	lsls	r3, r3, #31
 800f802:	d4ae      	bmi.n	800f762 <_dtoa_r+0xac2>
 800f804:	462b      	mov	r3, r5
 800f806:	461d      	mov	r5, r3
 800f808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f80c:	2a30      	cmp	r2, #48	; 0x30
 800f80e:	d0fa      	beq.n	800f806 <_dtoa_r+0xb66>
 800f810:	e6f7      	b.n	800f602 <_dtoa_r+0x962>
 800f812:	9a00      	ldr	r2, [sp, #0]
 800f814:	429a      	cmp	r2, r3
 800f816:	d1a5      	bne.n	800f764 <_dtoa_r+0xac4>
 800f818:	f10a 0a01 	add.w	sl, sl, #1
 800f81c:	2331      	movs	r3, #49	; 0x31
 800f81e:	e779      	b.n	800f714 <_dtoa_r+0xa74>
 800f820:	4b13      	ldr	r3, [pc, #76]	; (800f870 <_dtoa_r+0xbd0>)
 800f822:	f7ff baaf 	b.w	800ed84 <_dtoa_r+0xe4>
 800f826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f47f aa86 	bne.w	800ed3a <_dtoa_r+0x9a>
 800f82e:	4b11      	ldr	r3, [pc, #68]	; (800f874 <_dtoa_r+0xbd4>)
 800f830:	f7ff baa8 	b.w	800ed84 <_dtoa_r+0xe4>
 800f834:	f1b9 0f00 	cmp.w	r9, #0
 800f838:	dc03      	bgt.n	800f842 <_dtoa_r+0xba2>
 800f83a:	9b05      	ldr	r3, [sp, #20]
 800f83c:	2b02      	cmp	r3, #2
 800f83e:	f73f aec9 	bgt.w	800f5d4 <_dtoa_r+0x934>
 800f842:	9d00      	ldr	r5, [sp, #0]
 800f844:	4631      	mov	r1, r6
 800f846:	4658      	mov	r0, fp
 800f848:	f7ff f99e 	bl	800eb88 <quorem>
 800f84c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f850:	f805 3b01 	strb.w	r3, [r5], #1
 800f854:	9a00      	ldr	r2, [sp, #0]
 800f856:	1aaa      	subs	r2, r5, r2
 800f858:	4591      	cmp	r9, r2
 800f85a:	ddba      	ble.n	800f7d2 <_dtoa_r+0xb32>
 800f85c:	4659      	mov	r1, fp
 800f85e:	2300      	movs	r3, #0
 800f860:	220a      	movs	r2, #10
 800f862:	4620      	mov	r0, r4
 800f864:	f000 fe2c 	bl	80104c0 <__multadd>
 800f868:	4683      	mov	fp, r0
 800f86a:	e7eb      	b.n	800f844 <_dtoa_r+0xba4>
 800f86c:	0801222b 	.word	0x0801222b
 800f870:	0801212c 	.word	0x0801212c
 800f874:	080121a8 	.word	0x080121a8

0800f878 <__sflush_r>:
 800f878:	898a      	ldrh	r2, [r1, #12]
 800f87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f87e:	4605      	mov	r5, r0
 800f880:	0710      	lsls	r0, r2, #28
 800f882:	460c      	mov	r4, r1
 800f884:	d458      	bmi.n	800f938 <__sflush_r+0xc0>
 800f886:	684b      	ldr	r3, [r1, #4]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	dc05      	bgt.n	800f898 <__sflush_r+0x20>
 800f88c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f88e:	2b00      	cmp	r3, #0
 800f890:	dc02      	bgt.n	800f898 <__sflush_r+0x20>
 800f892:	2000      	movs	r0, #0
 800f894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f898:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f89a:	2e00      	cmp	r6, #0
 800f89c:	d0f9      	beq.n	800f892 <__sflush_r+0x1a>
 800f89e:	2300      	movs	r3, #0
 800f8a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f8a4:	682f      	ldr	r7, [r5, #0]
 800f8a6:	602b      	str	r3, [r5, #0]
 800f8a8:	d032      	beq.n	800f910 <__sflush_r+0x98>
 800f8aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f8ac:	89a3      	ldrh	r3, [r4, #12]
 800f8ae:	075a      	lsls	r2, r3, #29
 800f8b0:	d505      	bpl.n	800f8be <__sflush_r+0x46>
 800f8b2:	6863      	ldr	r3, [r4, #4]
 800f8b4:	1ac0      	subs	r0, r0, r3
 800f8b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8b8:	b10b      	cbz	r3, 800f8be <__sflush_r+0x46>
 800f8ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8bc:	1ac0      	subs	r0, r0, r3
 800f8be:	2300      	movs	r3, #0
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8c4:	6a21      	ldr	r1, [r4, #32]
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	47b0      	blx	r6
 800f8ca:	1c43      	adds	r3, r0, #1
 800f8cc:	89a3      	ldrh	r3, [r4, #12]
 800f8ce:	d106      	bne.n	800f8de <__sflush_r+0x66>
 800f8d0:	6829      	ldr	r1, [r5, #0]
 800f8d2:	291d      	cmp	r1, #29
 800f8d4:	d82c      	bhi.n	800f930 <__sflush_r+0xb8>
 800f8d6:	4a2a      	ldr	r2, [pc, #168]	; (800f980 <__sflush_r+0x108>)
 800f8d8:	40ca      	lsrs	r2, r1
 800f8da:	07d6      	lsls	r6, r2, #31
 800f8dc:	d528      	bpl.n	800f930 <__sflush_r+0xb8>
 800f8de:	2200      	movs	r2, #0
 800f8e0:	6062      	str	r2, [r4, #4]
 800f8e2:	04d9      	lsls	r1, r3, #19
 800f8e4:	6922      	ldr	r2, [r4, #16]
 800f8e6:	6022      	str	r2, [r4, #0]
 800f8e8:	d504      	bpl.n	800f8f4 <__sflush_r+0x7c>
 800f8ea:	1c42      	adds	r2, r0, #1
 800f8ec:	d101      	bne.n	800f8f2 <__sflush_r+0x7a>
 800f8ee:	682b      	ldr	r3, [r5, #0]
 800f8f0:	b903      	cbnz	r3, 800f8f4 <__sflush_r+0x7c>
 800f8f2:	6560      	str	r0, [r4, #84]	; 0x54
 800f8f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8f6:	602f      	str	r7, [r5, #0]
 800f8f8:	2900      	cmp	r1, #0
 800f8fa:	d0ca      	beq.n	800f892 <__sflush_r+0x1a>
 800f8fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f900:	4299      	cmp	r1, r3
 800f902:	d002      	beq.n	800f90a <__sflush_r+0x92>
 800f904:	4628      	mov	r0, r5
 800f906:	f7fd f921 	bl	800cb4c <_free_r>
 800f90a:	2000      	movs	r0, #0
 800f90c:	6360      	str	r0, [r4, #52]	; 0x34
 800f90e:	e7c1      	b.n	800f894 <__sflush_r+0x1c>
 800f910:	6a21      	ldr	r1, [r4, #32]
 800f912:	2301      	movs	r3, #1
 800f914:	4628      	mov	r0, r5
 800f916:	47b0      	blx	r6
 800f918:	1c41      	adds	r1, r0, #1
 800f91a:	d1c7      	bne.n	800f8ac <__sflush_r+0x34>
 800f91c:	682b      	ldr	r3, [r5, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d0c4      	beq.n	800f8ac <__sflush_r+0x34>
 800f922:	2b1d      	cmp	r3, #29
 800f924:	d001      	beq.n	800f92a <__sflush_r+0xb2>
 800f926:	2b16      	cmp	r3, #22
 800f928:	d101      	bne.n	800f92e <__sflush_r+0xb6>
 800f92a:	602f      	str	r7, [r5, #0]
 800f92c:	e7b1      	b.n	800f892 <__sflush_r+0x1a>
 800f92e:	89a3      	ldrh	r3, [r4, #12]
 800f930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f934:	81a3      	strh	r3, [r4, #12]
 800f936:	e7ad      	b.n	800f894 <__sflush_r+0x1c>
 800f938:	690f      	ldr	r7, [r1, #16]
 800f93a:	2f00      	cmp	r7, #0
 800f93c:	d0a9      	beq.n	800f892 <__sflush_r+0x1a>
 800f93e:	0793      	lsls	r3, r2, #30
 800f940:	680e      	ldr	r6, [r1, #0]
 800f942:	bf08      	it	eq
 800f944:	694b      	ldreq	r3, [r1, #20]
 800f946:	600f      	str	r7, [r1, #0]
 800f948:	bf18      	it	ne
 800f94a:	2300      	movne	r3, #0
 800f94c:	eba6 0807 	sub.w	r8, r6, r7
 800f950:	608b      	str	r3, [r1, #8]
 800f952:	f1b8 0f00 	cmp.w	r8, #0
 800f956:	dd9c      	ble.n	800f892 <__sflush_r+0x1a>
 800f958:	6a21      	ldr	r1, [r4, #32]
 800f95a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f95c:	4643      	mov	r3, r8
 800f95e:	463a      	mov	r2, r7
 800f960:	4628      	mov	r0, r5
 800f962:	47b0      	blx	r6
 800f964:	2800      	cmp	r0, #0
 800f966:	dc06      	bgt.n	800f976 <__sflush_r+0xfe>
 800f968:	89a3      	ldrh	r3, [r4, #12]
 800f96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f96e:	81a3      	strh	r3, [r4, #12]
 800f970:	f04f 30ff 	mov.w	r0, #4294967295
 800f974:	e78e      	b.n	800f894 <__sflush_r+0x1c>
 800f976:	4407      	add	r7, r0
 800f978:	eba8 0800 	sub.w	r8, r8, r0
 800f97c:	e7e9      	b.n	800f952 <__sflush_r+0xda>
 800f97e:	bf00      	nop
 800f980:	20400001 	.word	0x20400001

0800f984 <_fflush_r>:
 800f984:	b538      	push	{r3, r4, r5, lr}
 800f986:	690b      	ldr	r3, [r1, #16]
 800f988:	4605      	mov	r5, r0
 800f98a:	460c      	mov	r4, r1
 800f98c:	b913      	cbnz	r3, 800f994 <_fflush_r+0x10>
 800f98e:	2500      	movs	r5, #0
 800f990:	4628      	mov	r0, r5
 800f992:	bd38      	pop	{r3, r4, r5, pc}
 800f994:	b118      	cbz	r0, 800f99e <_fflush_r+0x1a>
 800f996:	6983      	ldr	r3, [r0, #24]
 800f998:	b90b      	cbnz	r3, 800f99e <_fflush_r+0x1a>
 800f99a:	f000 f887 	bl	800faac <__sinit>
 800f99e:	4b14      	ldr	r3, [pc, #80]	; (800f9f0 <_fflush_r+0x6c>)
 800f9a0:	429c      	cmp	r4, r3
 800f9a2:	d11b      	bne.n	800f9dc <_fflush_r+0x58>
 800f9a4:	686c      	ldr	r4, [r5, #4]
 800f9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d0ef      	beq.n	800f98e <_fflush_r+0xa>
 800f9ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f9b0:	07d0      	lsls	r0, r2, #31
 800f9b2:	d404      	bmi.n	800f9be <_fflush_r+0x3a>
 800f9b4:	0599      	lsls	r1, r3, #22
 800f9b6:	d402      	bmi.n	800f9be <_fflush_r+0x3a>
 800f9b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9ba:	f000 fc88 	bl	80102ce <__retarget_lock_acquire_recursive>
 800f9be:	4628      	mov	r0, r5
 800f9c0:	4621      	mov	r1, r4
 800f9c2:	f7ff ff59 	bl	800f878 <__sflush_r>
 800f9c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9c8:	07da      	lsls	r2, r3, #31
 800f9ca:	4605      	mov	r5, r0
 800f9cc:	d4e0      	bmi.n	800f990 <_fflush_r+0xc>
 800f9ce:	89a3      	ldrh	r3, [r4, #12]
 800f9d0:	059b      	lsls	r3, r3, #22
 800f9d2:	d4dd      	bmi.n	800f990 <_fflush_r+0xc>
 800f9d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9d6:	f000 fc7b 	bl	80102d0 <__retarget_lock_release_recursive>
 800f9da:	e7d9      	b.n	800f990 <_fflush_r+0xc>
 800f9dc:	4b05      	ldr	r3, [pc, #20]	; (800f9f4 <_fflush_r+0x70>)
 800f9de:	429c      	cmp	r4, r3
 800f9e0:	d101      	bne.n	800f9e6 <_fflush_r+0x62>
 800f9e2:	68ac      	ldr	r4, [r5, #8]
 800f9e4:	e7df      	b.n	800f9a6 <_fflush_r+0x22>
 800f9e6:	4b04      	ldr	r3, [pc, #16]	; (800f9f8 <_fflush_r+0x74>)
 800f9e8:	429c      	cmp	r4, r3
 800f9ea:	bf08      	it	eq
 800f9ec:	68ec      	ldreq	r4, [r5, #12]
 800f9ee:	e7da      	b.n	800f9a6 <_fflush_r+0x22>
 800f9f0:	0801225c 	.word	0x0801225c
 800f9f4:	0801227c 	.word	0x0801227c
 800f9f8:	0801223c 	.word	0x0801223c

0800f9fc <std>:
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	b510      	push	{r4, lr}
 800fa00:	4604      	mov	r4, r0
 800fa02:	e9c0 3300 	strd	r3, r3, [r0]
 800fa06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa0a:	6083      	str	r3, [r0, #8]
 800fa0c:	8181      	strh	r1, [r0, #12]
 800fa0e:	6643      	str	r3, [r0, #100]	; 0x64
 800fa10:	81c2      	strh	r2, [r0, #14]
 800fa12:	6183      	str	r3, [r0, #24]
 800fa14:	4619      	mov	r1, r3
 800fa16:	2208      	movs	r2, #8
 800fa18:	305c      	adds	r0, #92	; 0x5c
 800fa1a:	f7fd f88f 	bl	800cb3c <memset>
 800fa1e:	4b05      	ldr	r3, [pc, #20]	; (800fa34 <std+0x38>)
 800fa20:	6263      	str	r3, [r4, #36]	; 0x24
 800fa22:	4b05      	ldr	r3, [pc, #20]	; (800fa38 <std+0x3c>)
 800fa24:	62a3      	str	r3, [r4, #40]	; 0x28
 800fa26:	4b05      	ldr	r3, [pc, #20]	; (800fa3c <std+0x40>)
 800fa28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fa2a:	4b05      	ldr	r3, [pc, #20]	; (800fa40 <std+0x44>)
 800fa2c:	6224      	str	r4, [r4, #32]
 800fa2e:	6323      	str	r3, [r4, #48]	; 0x30
 800fa30:	bd10      	pop	{r4, pc}
 800fa32:	bf00      	nop
 800fa34:	0800db1d 	.word	0x0800db1d
 800fa38:	0800db3f 	.word	0x0800db3f
 800fa3c:	0800db77 	.word	0x0800db77
 800fa40:	0800db9b 	.word	0x0800db9b

0800fa44 <_cleanup_r>:
 800fa44:	4901      	ldr	r1, [pc, #4]	; (800fa4c <_cleanup_r+0x8>)
 800fa46:	f000 b8af 	b.w	800fba8 <_fwalk_reent>
 800fa4a:	bf00      	nop
 800fa4c:	0800f985 	.word	0x0800f985

0800fa50 <__sfmoreglue>:
 800fa50:	b570      	push	{r4, r5, r6, lr}
 800fa52:	1e4a      	subs	r2, r1, #1
 800fa54:	2568      	movs	r5, #104	; 0x68
 800fa56:	4355      	muls	r5, r2
 800fa58:	460e      	mov	r6, r1
 800fa5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fa5e:	f7fd f8c5 	bl	800cbec <_malloc_r>
 800fa62:	4604      	mov	r4, r0
 800fa64:	b140      	cbz	r0, 800fa78 <__sfmoreglue+0x28>
 800fa66:	2100      	movs	r1, #0
 800fa68:	e9c0 1600 	strd	r1, r6, [r0]
 800fa6c:	300c      	adds	r0, #12
 800fa6e:	60a0      	str	r0, [r4, #8]
 800fa70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fa74:	f7fd f862 	bl	800cb3c <memset>
 800fa78:	4620      	mov	r0, r4
 800fa7a:	bd70      	pop	{r4, r5, r6, pc}

0800fa7c <__sfp_lock_acquire>:
 800fa7c:	4801      	ldr	r0, [pc, #4]	; (800fa84 <__sfp_lock_acquire+0x8>)
 800fa7e:	f000 bc26 	b.w	80102ce <__retarget_lock_acquire_recursive>
 800fa82:	bf00      	nop
 800fa84:	20001a88 	.word	0x20001a88

0800fa88 <__sfp_lock_release>:
 800fa88:	4801      	ldr	r0, [pc, #4]	; (800fa90 <__sfp_lock_release+0x8>)
 800fa8a:	f000 bc21 	b.w	80102d0 <__retarget_lock_release_recursive>
 800fa8e:	bf00      	nop
 800fa90:	20001a88 	.word	0x20001a88

0800fa94 <__sinit_lock_acquire>:
 800fa94:	4801      	ldr	r0, [pc, #4]	; (800fa9c <__sinit_lock_acquire+0x8>)
 800fa96:	f000 bc1a 	b.w	80102ce <__retarget_lock_acquire_recursive>
 800fa9a:	bf00      	nop
 800fa9c:	20001a83 	.word	0x20001a83

0800faa0 <__sinit_lock_release>:
 800faa0:	4801      	ldr	r0, [pc, #4]	; (800faa8 <__sinit_lock_release+0x8>)
 800faa2:	f000 bc15 	b.w	80102d0 <__retarget_lock_release_recursive>
 800faa6:	bf00      	nop
 800faa8:	20001a83 	.word	0x20001a83

0800faac <__sinit>:
 800faac:	b510      	push	{r4, lr}
 800faae:	4604      	mov	r4, r0
 800fab0:	f7ff fff0 	bl	800fa94 <__sinit_lock_acquire>
 800fab4:	69a3      	ldr	r3, [r4, #24]
 800fab6:	b11b      	cbz	r3, 800fac0 <__sinit+0x14>
 800fab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fabc:	f7ff bff0 	b.w	800faa0 <__sinit_lock_release>
 800fac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fac4:	6523      	str	r3, [r4, #80]	; 0x50
 800fac6:	4b13      	ldr	r3, [pc, #76]	; (800fb14 <__sinit+0x68>)
 800fac8:	4a13      	ldr	r2, [pc, #76]	; (800fb18 <__sinit+0x6c>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	62a2      	str	r2, [r4, #40]	; 0x28
 800face:	42a3      	cmp	r3, r4
 800fad0:	bf04      	itt	eq
 800fad2:	2301      	moveq	r3, #1
 800fad4:	61a3      	streq	r3, [r4, #24]
 800fad6:	4620      	mov	r0, r4
 800fad8:	f000 f820 	bl	800fb1c <__sfp>
 800fadc:	6060      	str	r0, [r4, #4]
 800fade:	4620      	mov	r0, r4
 800fae0:	f000 f81c 	bl	800fb1c <__sfp>
 800fae4:	60a0      	str	r0, [r4, #8]
 800fae6:	4620      	mov	r0, r4
 800fae8:	f000 f818 	bl	800fb1c <__sfp>
 800faec:	2200      	movs	r2, #0
 800faee:	60e0      	str	r0, [r4, #12]
 800faf0:	2104      	movs	r1, #4
 800faf2:	6860      	ldr	r0, [r4, #4]
 800faf4:	f7ff ff82 	bl	800f9fc <std>
 800faf8:	68a0      	ldr	r0, [r4, #8]
 800fafa:	2201      	movs	r2, #1
 800fafc:	2109      	movs	r1, #9
 800fafe:	f7ff ff7d 	bl	800f9fc <std>
 800fb02:	68e0      	ldr	r0, [r4, #12]
 800fb04:	2202      	movs	r2, #2
 800fb06:	2112      	movs	r1, #18
 800fb08:	f7ff ff78 	bl	800f9fc <std>
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	61a3      	str	r3, [r4, #24]
 800fb10:	e7d2      	b.n	800fab8 <__sinit+0xc>
 800fb12:	bf00      	nop
 800fb14:	08012118 	.word	0x08012118
 800fb18:	0800fa45 	.word	0x0800fa45

0800fb1c <__sfp>:
 800fb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb1e:	4607      	mov	r7, r0
 800fb20:	f7ff ffac 	bl	800fa7c <__sfp_lock_acquire>
 800fb24:	4b1e      	ldr	r3, [pc, #120]	; (800fba0 <__sfp+0x84>)
 800fb26:	681e      	ldr	r6, [r3, #0]
 800fb28:	69b3      	ldr	r3, [r6, #24]
 800fb2a:	b913      	cbnz	r3, 800fb32 <__sfp+0x16>
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	f7ff ffbd 	bl	800faac <__sinit>
 800fb32:	3648      	adds	r6, #72	; 0x48
 800fb34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fb38:	3b01      	subs	r3, #1
 800fb3a:	d503      	bpl.n	800fb44 <__sfp+0x28>
 800fb3c:	6833      	ldr	r3, [r6, #0]
 800fb3e:	b30b      	cbz	r3, 800fb84 <__sfp+0x68>
 800fb40:	6836      	ldr	r6, [r6, #0]
 800fb42:	e7f7      	b.n	800fb34 <__sfp+0x18>
 800fb44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fb48:	b9d5      	cbnz	r5, 800fb80 <__sfp+0x64>
 800fb4a:	4b16      	ldr	r3, [pc, #88]	; (800fba4 <__sfp+0x88>)
 800fb4c:	60e3      	str	r3, [r4, #12]
 800fb4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fb52:	6665      	str	r5, [r4, #100]	; 0x64
 800fb54:	f000 fbba 	bl	80102cc <__retarget_lock_init_recursive>
 800fb58:	f7ff ff96 	bl	800fa88 <__sfp_lock_release>
 800fb5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fb60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fb64:	6025      	str	r5, [r4, #0]
 800fb66:	61a5      	str	r5, [r4, #24]
 800fb68:	2208      	movs	r2, #8
 800fb6a:	4629      	mov	r1, r5
 800fb6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fb70:	f7fc ffe4 	bl	800cb3c <memset>
 800fb74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fb78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb80:	3468      	adds	r4, #104	; 0x68
 800fb82:	e7d9      	b.n	800fb38 <__sfp+0x1c>
 800fb84:	2104      	movs	r1, #4
 800fb86:	4638      	mov	r0, r7
 800fb88:	f7ff ff62 	bl	800fa50 <__sfmoreglue>
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	6030      	str	r0, [r6, #0]
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d1d5      	bne.n	800fb40 <__sfp+0x24>
 800fb94:	f7ff ff78 	bl	800fa88 <__sfp_lock_release>
 800fb98:	230c      	movs	r3, #12
 800fb9a:	603b      	str	r3, [r7, #0]
 800fb9c:	e7ee      	b.n	800fb7c <__sfp+0x60>
 800fb9e:	bf00      	nop
 800fba0:	08012118 	.word	0x08012118
 800fba4:	ffff0001 	.word	0xffff0001

0800fba8 <_fwalk_reent>:
 800fba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbac:	4606      	mov	r6, r0
 800fbae:	4688      	mov	r8, r1
 800fbb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fbb4:	2700      	movs	r7, #0
 800fbb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fbba:	f1b9 0901 	subs.w	r9, r9, #1
 800fbbe:	d505      	bpl.n	800fbcc <_fwalk_reent+0x24>
 800fbc0:	6824      	ldr	r4, [r4, #0]
 800fbc2:	2c00      	cmp	r4, #0
 800fbc4:	d1f7      	bne.n	800fbb6 <_fwalk_reent+0xe>
 800fbc6:	4638      	mov	r0, r7
 800fbc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbcc:	89ab      	ldrh	r3, [r5, #12]
 800fbce:	2b01      	cmp	r3, #1
 800fbd0:	d907      	bls.n	800fbe2 <_fwalk_reent+0x3a>
 800fbd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fbd6:	3301      	adds	r3, #1
 800fbd8:	d003      	beq.n	800fbe2 <_fwalk_reent+0x3a>
 800fbda:	4629      	mov	r1, r5
 800fbdc:	4630      	mov	r0, r6
 800fbde:	47c0      	blx	r8
 800fbe0:	4307      	orrs	r7, r0
 800fbe2:	3568      	adds	r5, #104	; 0x68
 800fbe4:	e7e9      	b.n	800fbba <_fwalk_reent+0x12>

0800fbe6 <rshift>:
 800fbe6:	6903      	ldr	r3, [r0, #16]
 800fbe8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fbec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbf0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fbf4:	f100 0414 	add.w	r4, r0, #20
 800fbf8:	dd45      	ble.n	800fc86 <rshift+0xa0>
 800fbfa:	f011 011f 	ands.w	r1, r1, #31
 800fbfe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fc02:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fc06:	d10c      	bne.n	800fc22 <rshift+0x3c>
 800fc08:	f100 0710 	add.w	r7, r0, #16
 800fc0c:	4629      	mov	r1, r5
 800fc0e:	42b1      	cmp	r1, r6
 800fc10:	d334      	bcc.n	800fc7c <rshift+0x96>
 800fc12:	1a9b      	subs	r3, r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	1eea      	subs	r2, r5, #3
 800fc18:	4296      	cmp	r6, r2
 800fc1a:	bf38      	it	cc
 800fc1c:	2300      	movcc	r3, #0
 800fc1e:	4423      	add	r3, r4
 800fc20:	e015      	b.n	800fc4e <rshift+0x68>
 800fc22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fc26:	f1c1 0820 	rsb	r8, r1, #32
 800fc2a:	40cf      	lsrs	r7, r1
 800fc2c:	f105 0e04 	add.w	lr, r5, #4
 800fc30:	46a1      	mov	r9, r4
 800fc32:	4576      	cmp	r6, lr
 800fc34:	46f4      	mov	ip, lr
 800fc36:	d815      	bhi.n	800fc64 <rshift+0x7e>
 800fc38:	1a9b      	subs	r3, r3, r2
 800fc3a:	009a      	lsls	r2, r3, #2
 800fc3c:	3a04      	subs	r2, #4
 800fc3e:	3501      	adds	r5, #1
 800fc40:	42ae      	cmp	r6, r5
 800fc42:	bf38      	it	cc
 800fc44:	2200      	movcc	r2, #0
 800fc46:	18a3      	adds	r3, r4, r2
 800fc48:	50a7      	str	r7, [r4, r2]
 800fc4a:	b107      	cbz	r7, 800fc4e <rshift+0x68>
 800fc4c:	3304      	adds	r3, #4
 800fc4e:	1b1a      	subs	r2, r3, r4
 800fc50:	42a3      	cmp	r3, r4
 800fc52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fc56:	bf08      	it	eq
 800fc58:	2300      	moveq	r3, #0
 800fc5a:	6102      	str	r2, [r0, #16]
 800fc5c:	bf08      	it	eq
 800fc5e:	6143      	streq	r3, [r0, #20]
 800fc60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc64:	f8dc c000 	ldr.w	ip, [ip]
 800fc68:	fa0c fc08 	lsl.w	ip, ip, r8
 800fc6c:	ea4c 0707 	orr.w	r7, ip, r7
 800fc70:	f849 7b04 	str.w	r7, [r9], #4
 800fc74:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fc78:	40cf      	lsrs	r7, r1
 800fc7a:	e7da      	b.n	800fc32 <rshift+0x4c>
 800fc7c:	f851 cb04 	ldr.w	ip, [r1], #4
 800fc80:	f847 cf04 	str.w	ip, [r7, #4]!
 800fc84:	e7c3      	b.n	800fc0e <rshift+0x28>
 800fc86:	4623      	mov	r3, r4
 800fc88:	e7e1      	b.n	800fc4e <rshift+0x68>

0800fc8a <__hexdig_fun>:
 800fc8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fc8e:	2b09      	cmp	r3, #9
 800fc90:	d802      	bhi.n	800fc98 <__hexdig_fun+0xe>
 800fc92:	3820      	subs	r0, #32
 800fc94:	b2c0      	uxtb	r0, r0
 800fc96:	4770      	bx	lr
 800fc98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fc9c:	2b05      	cmp	r3, #5
 800fc9e:	d801      	bhi.n	800fca4 <__hexdig_fun+0x1a>
 800fca0:	3847      	subs	r0, #71	; 0x47
 800fca2:	e7f7      	b.n	800fc94 <__hexdig_fun+0xa>
 800fca4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fca8:	2b05      	cmp	r3, #5
 800fcaa:	d801      	bhi.n	800fcb0 <__hexdig_fun+0x26>
 800fcac:	3827      	subs	r0, #39	; 0x27
 800fcae:	e7f1      	b.n	800fc94 <__hexdig_fun+0xa>
 800fcb0:	2000      	movs	r0, #0
 800fcb2:	4770      	bx	lr

0800fcb4 <__gethex>:
 800fcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb8:	ed2d 8b02 	vpush	{d8}
 800fcbc:	b089      	sub	sp, #36	; 0x24
 800fcbe:	ee08 0a10 	vmov	s16, r0
 800fcc2:	9304      	str	r3, [sp, #16]
 800fcc4:	4bbc      	ldr	r3, [pc, #752]	; (800ffb8 <__gethex+0x304>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	9301      	str	r3, [sp, #4]
 800fcca:	4618      	mov	r0, r3
 800fccc:	468b      	mov	fp, r1
 800fcce:	4690      	mov	r8, r2
 800fcd0:	f7f0 fa8e 	bl	80001f0 <strlen>
 800fcd4:	9b01      	ldr	r3, [sp, #4]
 800fcd6:	f8db 2000 	ldr.w	r2, [fp]
 800fcda:	4403      	add	r3, r0
 800fcdc:	4682      	mov	sl, r0
 800fcde:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fce2:	9305      	str	r3, [sp, #20]
 800fce4:	1c93      	adds	r3, r2, #2
 800fce6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fcea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fcee:	32fe      	adds	r2, #254	; 0xfe
 800fcf0:	18d1      	adds	r1, r2, r3
 800fcf2:	461f      	mov	r7, r3
 800fcf4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fcf8:	9100      	str	r1, [sp, #0]
 800fcfa:	2830      	cmp	r0, #48	; 0x30
 800fcfc:	d0f8      	beq.n	800fcf0 <__gethex+0x3c>
 800fcfe:	f7ff ffc4 	bl	800fc8a <__hexdig_fun>
 800fd02:	4604      	mov	r4, r0
 800fd04:	2800      	cmp	r0, #0
 800fd06:	d13a      	bne.n	800fd7e <__gethex+0xca>
 800fd08:	9901      	ldr	r1, [sp, #4]
 800fd0a:	4652      	mov	r2, sl
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	f7fd ff50 	bl	800dbb2 <strncmp>
 800fd12:	4605      	mov	r5, r0
 800fd14:	2800      	cmp	r0, #0
 800fd16:	d168      	bne.n	800fdea <__gethex+0x136>
 800fd18:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fd1c:	eb07 060a 	add.w	r6, r7, sl
 800fd20:	f7ff ffb3 	bl	800fc8a <__hexdig_fun>
 800fd24:	2800      	cmp	r0, #0
 800fd26:	d062      	beq.n	800fdee <__gethex+0x13a>
 800fd28:	4633      	mov	r3, r6
 800fd2a:	7818      	ldrb	r0, [r3, #0]
 800fd2c:	2830      	cmp	r0, #48	; 0x30
 800fd2e:	461f      	mov	r7, r3
 800fd30:	f103 0301 	add.w	r3, r3, #1
 800fd34:	d0f9      	beq.n	800fd2a <__gethex+0x76>
 800fd36:	f7ff ffa8 	bl	800fc8a <__hexdig_fun>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	fab0 f480 	clz	r4, r0
 800fd40:	0964      	lsrs	r4, r4, #5
 800fd42:	4635      	mov	r5, r6
 800fd44:	9300      	str	r3, [sp, #0]
 800fd46:	463a      	mov	r2, r7
 800fd48:	4616      	mov	r6, r2
 800fd4a:	3201      	adds	r2, #1
 800fd4c:	7830      	ldrb	r0, [r6, #0]
 800fd4e:	f7ff ff9c 	bl	800fc8a <__hexdig_fun>
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d1f8      	bne.n	800fd48 <__gethex+0x94>
 800fd56:	9901      	ldr	r1, [sp, #4]
 800fd58:	4652      	mov	r2, sl
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	f7fd ff29 	bl	800dbb2 <strncmp>
 800fd60:	b980      	cbnz	r0, 800fd84 <__gethex+0xd0>
 800fd62:	b94d      	cbnz	r5, 800fd78 <__gethex+0xc4>
 800fd64:	eb06 050a 	add.w	r5, r6, sl
 800fd68:	462a      	mov	r2, r5
 800fd6a:	4616      	mov	r6, r2
 800fd6c:	3201      	adds	r2, #1
 800fd6e:	7830      	ldrb	r0, [r6, #0]
 800fd70:	f7ff ff8b 	bl	800fc8a <__hexdig_fun>
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d1f8      	bne.n	800fd6a <__gethex+0xb6>
 800fd78:	1bad      	subs	r5, r5, r6
 800fd7a:	00ad      	lsls	r5, r5, #2
 800fd7c:	e004      	b.n	800fd88 <__gethex+0xd4>
 800fd7e:	2400      	movs	r4, #0
 800fd80:	4625      	mov	r5, r4
 800fd82:	e7e0      	b.n	800fd46 <__gethex+0x92>
 800fd84:	2d00      	cmp	r5, #0
 800fd86:	d1f7      	bne.n	800fd78 <__gethex+0xc4>
 800fd88:	7833      	ldrb	r3, [r6, #0]
 800fd8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fd8e:	2b50      	cmp	r3, #80	; 0x50
 800fd90:	d13b      	bne.n	800fe0a <__gethex+0x156>
 800fd92:	7873      	ldrb	r3, [r6, #1]
 800fd94:	2b2b      	cmp	r3, #43	; 0x2b
 800fd96:	d02c      	beq.n	800fdf2 <__gethex+0x13e>
 800fd98:	2b2d      	cmp	r3, #45	; 0x2d
 800fd9a:	d02e      	beq.n	800fdfa <__gethex+0x146>
 800fd9c:	1c71      	adds	r1, r6, #1
 800fd9e:	f04f 0900 	mov.w	r9, #0
 800fda2:	7808      	ldrb	r0, [r1, #0]
 800fda4:	f7ff ff71 	bl	800fc8a <__hexdig_fun>
 800fda8:	1e43      	subs	r3, r0, #1
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b18      	cmp	r3, #24
 800fdae:	d82c      	bhi.n	800fe0a <__gethex+0x156>
 800fdb0:	f1a0 0210 	sub.w	r2, r0, #16
 800fdb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fdb8:	f7ff ff67 	bl	800fc8a <__hexdig_fun>
 800fdbc:	1e43      	subs	r3, r0, #1
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b18      	cmp	r3, #24
 800fdc2:	d91d      	bls.n	800fe00 <__gethex+0x14c>
 800fdc4:	f1b9 0f00 	cmp.w	r9, #0
 800fdc8:	d000      	beq.n	800fdcc <__gethex+0x118>
 800fdca:	4252      	negs	r2, r2
 800fdcc:	4415      	add	r5, r2
 800fdce:	f8cb 1000 	str.w	r1, [fp]
 800fdd2:	b1e4      	cbz	r4, 800fe0e <__gethex+0x15a>
 800fdd4:	9b00      	ldr	r3, [sp, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	bf14      	ite	ne
 800fdda:	2700      	movne	r7, #0
 800fddc:	2706      	moveq	r7, #6
 800fdde:	4638      	mov	r0, r7
 800fde0:	b009      	add	sp, #36	; 0x24
 800fde2:	ecbd 8b02 	vpop	{d8}
 800fde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdea:	463e      	mov	r6, r7
 800fdec:	4625      	mov	r5, r4
 800fdee:	2401      	movs	r4, #1
 800fdf0:	e7ca      	b.n	800fd88 <__gethex+0xd4>
 800fdf2:	f04f 0900 	mov.w	r9, #0
 800fdf6:	1cb1      	adds	r1, r6, #2
 800fdf8:	e7d3      	b.n	800fda2 <__gethex+0xee>
 800fdfa:	f04f 0901 	mov.w	r9, #1
 800fdfe:	e7fa      	b.n	800fdf6 <__gethex+0x142>
 800fe00:	230a      	movs	r3, #10
 800fe02:	fb03 0202 	mla	r2, r3, r2, r0
 800fe06:	3a10      	subs	r2, #16
 800fe08:	e7d4      	b.n	800fdb4 <__gethex+0x100>
 800fe0a:	4631      	mov	r1, r6
 800fe0c:	e7df      	b.n	800fdce <__gethex+0x11a>
 800fe0e:	1bf3      	subs	r3, r6, r7
 800fe10:	3b01      	subs	r3, #1
 800fe12:	4621      	mov	r1, r4
 800fe14:	2b07      	cmp	r3, #7
 800fe16:	dc0b      	bgt.n	800fe30 <__gethex+0x17c>
 800fe18:	ee18 0a10 	vmov	r0, s16
 800fe1c:	f000 faee 	bl	80103fc <_Balloc>
 800fe20:	4604      	mov	r4, r0
 800fe22:	b940      	cbnz	r0, 800fe36 <__gethex+0x182>
 800fe24:	4b65      	ldr	r3, [pc, #404]	; (800ffbc <__gethex+0x308>)
 800fe26:	4602      	mov	r2, r0
 800fe28:	21de      	movs	r1, #222	; 0xde
 800fe2a:	4865      	ldr	r0, [pc, #404]	; (800ffc0 <__gethex+0x30c>)
 800fe2c:	f001 fa8e 	bl	801134c <__assert_func>
 800fe30:	3101      	adds	r1, #1
 800fe32:	105b      	asrs	r3, r3, #1
 800fe34:	e7ee      	b.n	800fe14 <__gethex+0x160>
 800fe36:	f100 0914 	add.w	r9, r0, #20
 800fe3a:	f04f 0b00 	mov.w	fp, #0
 800fe3e:	f1ca 0301 	rsb	r3, sl, #1
 800fe42:	f8cd 9008 	str.w	r9, [sp, #8]
 800fe46:	f8cd b000 	str.w	fp, [sp]
 800fe4a:	9306      	str	r3, [sp, #24]
 800fe4c:	42b7      	cmp	r7, r6
 800fe4e:	d340      	bcc.n	800fed2 <__gethex+0x21e>
 800fe50:	9802      	ldr	r0, [sp, #8]
 800fe52:	9b00      	ldr	r3, [sp, #0]
 800fe54:	f840 3b04 	str.w	r3, [r0], #4
 800fe58:	eba0 0009 	sub.w	r0, r0, r9
 800fe5c:	1080      	asrs	r0, r0, #2
 800fe5e:	0146      	lsls	r6, r0, #5
 800fe60:	6120      	str	r0, [r4, #16]
 800fe62:	4618      	mov	r0, r3
 800fe64:	f000 fbc0 	bl	80105e8 <__hi0bits>
 800fe68:	1a30      	subs	r0, r6, r0
 800fe6a:	f8d8 6000 	ldr.w	r6, [r8]
 800fe6e:	42b0      	cmp	r0, r6
 800fe70:	dd63      	ble.n	800ff3a <__gethex+0x286>
 800fe72:	1b87      	subs	r7, r0, r6
 800fe74:	4639      	mov	r1, r7
 800fe76:	4620      	mov	r0, r4
 800fe78:	f000 ff5a 	bl	8010d30 <__any_on>
 800fe7c:	4682      	mov	sl, r0
 800fe7e:	b1a8      	cbz	r0, 800feac <__gethex+0x1f8>
 800fe80:	1e7b      	subs	r3, r7, #1
 800fe82:	1159      	asrs	r1, r3, #5
 800fe84:	f003 021f 	and.w	r2, r3, #31
 800fe88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fe8c:	f04f 0a01 	mov.w	sl, #1
 800fe90:	fa0a f202 	lsl.w	r2, sl, r2
 800fe94:	420a      	tst	r2, r1
 800fe96:	d009      	beq.n	800feac <__gethex+0x1f8>
 800fe98:	4553      	cmp	r3, sl
 800fe9a:	dd05      	ble.n	800fea8 <__gethex+0x1f4>
 800fe9c:	1eb9      	subs	r1, r7, #2
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f000 ff46 	bl	8010d30 <__any_on>
 800fea4:	2800      	cmp	r0, #0
 800fea6:	d145      	bne.n	800ff34 <__gethex+0x280>
 800fea8:	f04f 0a02 	mov.w	sl, #2
 800feac:	4639      	mov	r1, r7
 800feae:	4620      	mov	r0, r4
 800feb0:	f7ff fe99 	bl	800fbe6 <rshift>
 800feb4:	443d      	add	r5, r7
 800feb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800feba:	42ab      	cmp	r3, r5
 800febc:	da4c      	bge.n	800ff58 <__gethex+0x2a4>
 800febe:	ee18 0a10 	vmov	r0, s16
 800fec2:	4621      	mov	r1, r4
 800fec4:	f000 fada 	bl	801047c <_Bfree>
 800fec8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800feca:	2300      	movs	r3, #0
 800fecc:	6013      	str	r3, [r2, #0]
 800fece:	27a3      	movs	r7, #163	; 0xa3
 800fed0:	e785      	b.n	800fdde <__gethex+0x12a>
 800fed2:	1e73      	subs	r3, r6, #1
 800fed4:	9a05      	ldr	r2, [sp, #20]
 800fed6:	9303      	str	r3, [sp, #12]
 800fed8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fedc:	4293      	cmp	r3, r2
 800fede:	d019      	beq.n	800ff14 <__gethex+0x260>
 800fee0:	f1bb 0f20 	cmp.w	fp, #32
 800fee4:	d107      	bne.n	800fef6 <__gethex+0x242>
 800fee6:	9b02      	ldr	r3, [sp, #8]
 800fee8:	9a00      	ldr	r2, [sp, #0]
 800feea:	f843 2b04 	str.w	r2, [r3], #4
 800feee:	9302      	str	r3, [sp, #8]
 800fef0:	2300      	movs	r3, #0
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	469b      	mov	fp, r3
 800fef6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fefa:	f7ff fec6 	bl	800fc8a <__hexdig_fun>
 800fefe:	9b00      	ldr	r3, [sp, #0]
 800ff00:	f000 000f 	and.w	r0, r0, #15
 800ff04:	fa00 f00b 	lsl.w	r0, r0, fp
 800ff08:	4303      	orrs	r3, r0
 800ff0a:	9300      	str	r3, [sp, #0]
 800ff0c:	f10b 0b04 	add.w	fp, fp, #4
 800ff10:	9b03      	ldr	r3, [sp, #12]
 800ff12:	e00d      	b.n	800ff30 <__gethex+0x27c>
 800ff14:	9b03      	ldr	r3, [sp, #12]
 800ff16:	9a06      	ldr	r2, [sp, #24]
 800ff18:	4413      	add	r3, r2
 800ff1a:	42bb      	cmp	r3, r7
 800ff1c:	d3e0      	bcc.n	800fee0 <__gethex+0x22c>
 800ff1e:	4618      	mov	r0, r3
 800ff20:	9901      	ldr	r1, [sp, #4]
 800ff22:	9307      	str	r3, [sp, #28]
 800ff24:	4652      	mov	r2, sl
 800ff26:	f7fd fe44 	bl	800dbb2 <strncmp>
 800ff2a:	9b07      	ldr	r3, [sp, #28]
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d1d7      	bne.n	800fee0 <__gethex+0x22c>
 800ff30:	461e      	mov	r6, r3
 800ff32:	e78b      	b.n	800fe4c <__gethex+0x198>
 800ff34:	f04f 0a03 	mov.w	sl, #3
 800ff38:	e7b8      	b.n	800feac <__gethex+0x1f8>
 800ff3a:	da0a      	bge.n	800ff52 <__gethex+0x29e>
 800ff3c:	1a37      	subs	r7, r6, r0
 800ff3e:	4621      	mov	r1, r4
 800ff40:	ee18 0a10 	vmov	r0, s16
 800ff44:	463a      	mov	r2, r7
 800ff46:	f000 fcb5 	bl	80108b4 <__lshift>
 800ff4a:	1bed      	subs	r5, r5, r7
 800ff4c:	4604      	mov	r4, r0
 800ff4e:	f100 0914 	add.w	r9, r0, #20
 800ff52:	f04f 0a00 	mov.w	sl, #0
 800ff56:	e7ae      	b.n	800feb6 <__gethex+0x202>
 800ff58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ff5c:	42a8      	cmp	r0, r5
 800ff5e:	dd72      	ble.n	8010046 <__gethex+0x392>
 800ff60:	1b45      	subs	r5, r0, r5
 800ff62:	42ae      	cmp	r6, r5
 800ff64:	dc36      	bgt.n	800ffd4 <__gethex+0x320>
 800ff66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff6a:	2b02      	cmp	r3, #2
 800ff6c:	d02a      	beq.n	800ffc4 <__gethex+0x310>
 800ff6e:	2b03      	cmp	r3, #3
 800ff70:	d02c      	beq.n	800ffcc <__gethex+0x318>
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d115      	bne.n	800ffa2 <__gethex+0x2ee>
 800ff76:	42ae      	cmp	r6, r5
 800ff78:	d113      	bne.n	800ffa2 <__gethex+0x2ee>
 800ff7a:	2e01      	cmp	r6, #1
 800ff7c:	d10b      	bne.n	800ff96 <__gethex+0x2e2>
 800ff7e:	9a04      	ldr	r2, [sp, #16]
 800ff80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff84:	6013      	str	r3, [r2, #0]
 800ff86:	2301      	movs	r3, #1
 800ff88:	6123      	str	r3, [r4, #16]
 800ff8a:	f8c9 3000 	str.w	r3, [r9]
 800ff8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff90:	2762      	movs	r7, #98	; 0x62
 800ff92:	601c      	str	r4, [r3, #0]
 800ff94:	e723      	b.n	800fdde <__gethex+0x12a>
 800ff96:	1e71      	subs	r1, r6, #1
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f000 fec9 	bl	8010d30 <__any_on>
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d1ed      	bne.n	800ff7e <__gethex+0x2ca>
 800ffa2:	ee18 0a10 	vmov	r0, s16
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	f000 fa68 	bl	801047c <_Bfree>
 800ffac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ffae:	2300      	movs	r3, #0
 800ffb0:	6013      	str	r3, [r2, #0]
 800ffb2:	2750      	movs	r7, #80	; 0x50
 800ffb4:	e713      	b.n	800fdde <__gethex+0x12a>
 800ffb6:	bf00      	nop
 800ffb8:	08012308 	.word	0x08012308
 800ffbc:	0801222b 	.word	0x0801222b
 800ffc0:	0801229c 	.word	0x0801229c
 800ffc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d1eb      	bne.n	800ffa2 <__gethex+0x2ee>
 800ffca:	e7d8      	b.n	800ff7e <__gethex+0x2ca>
 800ffcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d1d5      	bne.n	800ff7e <__gethex+0x2ca>
 800ffd2:	e7e6      	b.n	800ffa2 <__gethex+0x2ee>
 800ffd4:	1e6f      	subs	r7, r5, #1
 800ffd6:	f1ba 0f00 	cmp.w	sl, #0
 800ffda:	d131      	bne.n	8010040 <__gethex+0x38c>
 800ffdc:	b127      	cbz	r7, 800ffe8 <__gethex+0x334>
 800ffde:	4639      	mov	r1, r7
 800ffe0:	4620      	mov	r0, r4
 800ffe2:	f000 fea5 	bl	8010d30 <__any_on>
 800ffe6:	4682      	mov	sl, r0
 800ffe8:	117b      	asrs	r3, r7, #5
 800ffea:	2101      	movs	r1, #1
 800ffec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fff0:	f007 071f 	and.w	r7, r7, #31
 800fff4:	fa01 f707 	lsl.w	r7, r1, r7
 800fff8:	421f      	tst	r7, r3
 800fffa:	4629      	mov	r1, r5
 800fffc:	4620      	mov	r0, r4
 800fffe:	bf18      	it	ne
 8010000:	f04a 0a02 	orrne.w	sl, sl, #2
 8010004:	1b76      	subs	r6, r6, r5
 8010006:	f7ff fdee 	bl	800fbe6 <rshift>
 801000a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801000e:	2702      	movs	r7, #2
 8010010:	f1ba 0f00 	cmp.w	sl, #0
 8010014:	d048      	beq.n	80100a8 <__gethex+0x3f4>
 8010016:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801001a:	2b02      	cmp	r3, #2
 801001c:	d015      	beq.n	801004a <__gethex+0x396>
 801001e:	2b03      	cmp	r3, #3
 8010020:	d017      	beq.n	8010052 <__gethex+0x39e>
 8010022:	2b01      	cmp	r3, #1
 8010024:	d109      	bne.n	801003a <__gethex+0x386>
 8010026:	f01a 0f02 	tst.w	sl, #2
 801002a:	d006      	beq.n	801003a <__gethex+0x386>
 801002c:	f8d9 0000 	ldr.w	r0, [r9]
 8010030:	ea4a 0a00 	orr.w	sl, sl, r0
 8010034:	f01a 0f01 	tst.w	sl, #1
 8010038:	d10e      	bne.n	8010058 <__gethex+0x3a4>
 801003a:	f047 0710 	orr.w	r7, r7, #16
 801003e:	e033      	b.n	80100a8 <__gethex+0x3f4>
 8010040:	f04f 0a01 	mov.w	sl, #1
 8010044:	e7d0      	b.n	800ffe8 <__gethex+0x334>
 8010046:	2701      	movs	r7, #1
 8010048:	e7e2      	b.n	8010010 <__gethex+0x35c>
 801004a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801004c:	f1c3 0301 	rsb	r3, r3, #1
 8010050:	9315      	str	r3, [sp, #84]	; 0x54
 8010052:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010054:	2b00      	cmp	r3, #0
 8010056:	d0f0      	beq.n	801003a <__gethex+0x386>
 8010058:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801005c:	f104 0314 	add.w	r3, r4, #20
 8010060:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010064:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010068:	f04f 0c00 	mov.w	ip, #0
 801006c:	4618      	mov	r0, r3
 801006e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010072:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010076:	d01c      	beq.n	80100b2 <__gethex+0x3fe>
 8010078:	3201      	adds	r2, #1
 801007a:	6002      	str	r2, [r0, #0]
 801007c:	2f02      	cmp	r7, #2
 801007e:	f104 0314 	add.w	r3, r4, #20
 8010082:	d13f      	bne.n	8010104 <__gethex+0x450>
 8010084:	f8d8 2000 	ldr.w	r2, [r8]
 8010088:	3a01      	subs	r2, #1
 801008a:	42b2      	cmp	r2, r6
 801008c:	d10a      	bne.n	80100a4 <__gethex+0x3f0>
 801008e:	1171      	asrs	r1, r6, #5
 8010090:	2201      	movs	r2, #1
 8010092:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010096:	f006 061f 	and.w	r6, r6, #31
 801009a:	fa02 f606 	lsl.w	r6, r2, r6
 801009e:	421e      	tst	r6, r3
 80100a0:	bf18      	it	ne
 80100a2:	4617      	movne	r7, r2
 80100a4:	f047 0720 	orr.w	r7, r7, #32
 80100a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80100aa:	601c      	str	r4, [r3, #0]
 80100ac:	9b04      	ldr	r3, [sp, #16]
 80100ae:	601d      	str	r5, [r3, #0]
 80100b0:	e695      	b.n	800fdde <__gethex+0x12a>
 80100b2:	4299      	cmp	r1, r3
 80100b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80100b8:	d8d8      	bhi.n	801006c <__gethex+0x3b8>
 80100ba:	68a3      	ldr	r3, [r4, #8]
 80100bc:	459b      	cmp	fp, r3
 80100be:	db19      	blt.n	80100f4 <__gethex+0x440>
 80100c0:	6861      	ldr	r1, [r4, #4]
 80100c2:	ee18 0a10 	vmov	r0, s16
 80100c6:	3101      	adds	r1, #1
 80100c8:	f000 f998 	bl	80103fc <_Balloc>
 80100cc:	4681      	mov	r9, r0
 80100ce:	b918      	cbnz	r0, 80100d8 <__gethex+0x424>
 80100d0:	4b1a      	ldr	r3, [pc, #104]	; (801013c <__gethex+0x488>)
 80100d2:	4602      	mov	r2, r0
 80100d4:	2184      	movs	r1, #132	; 0x84
 80100d6:	e6a8      	b.n	800fe2a <__gethex+0x176>
 80100d8:	6922      	ldr	r2, [r4, #16]
 80100da:	3202      	adds	r2, #2
 80100dc:	f104 010c 	add.w	r1, r4, #12
 80100e0:	0092      	lsls	r2, r2, #2
 80100e2:	300c      	adds	r0, #12
 80100e4:	f7fc fd1c 	bl	800cb20 <memcpy>
 80100e8:	4621      	mov	r1, r4
 80100ea:	ee18 0a10 	vmov	r0, s16
 80100ee:	f000 f9c5 	bl	801047c <_Bfree>
 80100f2:	464c      	mov	r4, r9
 80100f4:	6923      	ldr	r3, [r4, #16]
 80100f6:	1c5a      	adds	r2, r3, #1
 80100f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80100fc:	6122      	str	r2, [r4, #16]
 80100fe:	2201      	movs	r2, #1
 8010100:	615a      	str	r2, [r3, #20]
 8010102:	e7bb      	b.n	801007c <__gethex+0x3c8>
 8010104:	6922      	ldr	r2, [r4, #16]
 8010106:	455a      	cmp	r2, fp
 8010108:	dd0b      	ble.n	8010122 <__gethex+0x46e>
 801010a:	2101      	movs	r1, #1
 801010c:	4620      	mov	r0, r4
 801010e:	f7ff fd6a 	bl	800fbe6 <rshift>
 8010112:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010116:	3501      	adds	r5, #1
 8010118:	42ab      	cmp	r3, r5
 801011a:	f6ff aed0 	blt.w	800febe <__gethex+0x20a>
 801011e:	2701      	movs	r7, #1
 8010120:	e7c0      	b.n	80100a4 <__gethex+0x3f0>
 8010122:	f016 061f 	ands.w	r6, r6, #31
 8010126:	d0fa      	beq.n	801011e <__gethex+0x46a>
 8010128:	449a      	add	sl, r3
 801012a:	f1c6 0620 	rsb	r6, r6, #32
 801012e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010132:	f000 fa59 	bl	80105e8 <__hi0bits>
 8010136:	42b0      	cmp	r0, r6
 8010138:	dbe7      	blt.n	801010a <__gethex+0x456>
 801013a:	e7f0      	b.n	801011e <__gethex+0x46a>
 801013c:	0801222b 	.word	0x0801222b

08010140 <L_shift>:
 8010140:	f1c2 0208 	rsb	r2, r2, #8
 8010144:	0092      	lsls	r2, r2, #2
 8010146:	b570      	push	{r4, r5, r6, lr}
 8010148:	f1c2 0620 	rsb	r6, r2, #32
 801014c:	6843      	ldr	r3, [r0, #4]
 801014e:	6804      	ldr	r4, [r0, #0]
 8010150:	fa03 f506 	lsl.w	r5, r3, r6
 8010154:	432c      	orrs	r4, r5
 8010156:	40d3      	lsrs	r3, r2
 8010158:	6004      	str	r4, [r0, #0]
 801015a:	f840 3f04 	str.w	r3, [r0, #4]!
 801015e:	4288      	cmp	r0, r1
 8010160:	d3f4      	bcc.n	801014c <L_shift+0xc>
 8010162:	bd70      	pop	{r4, r5, r6, pc}

08010164 <__match>:
 8010164:	b530      	push	{r4, r5, lr}
 8010166:	6803      	ldr	r3, [r0, #0]
 8010168:	3301      	adds	r3, #1
 801016a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801016e:	b914      	cbnz	r4, 8010176 <__match+0x12>
 8010170:	6003      	str	r3, [r0, #0]
 8010172:	2001      	movs	r0, #1
 8010174:	bd30      	pop	{r4, r5, pc}
 8010176:	f813 2b01 	ldrb.w	r2, [r3], #1
 801017a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801017e:	2d19      	cmp	r5, #25
 8010180:	bf98      	it	ls
 8010182:	3220      	addls	r2, #32
 8010184:	42a2      	cmp	r2, r4
 8010186:	d0f0      	beq.n	801016a <__match+0x6>
 8010188:	2000      	movs	r0, #0
 801018a:	e7f3      	b.n	8010174 <__match+0x10>

0801018c <__hexnan>:
 801018c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010190:	680b      	ldr	r3, [r1, #0]
 8010192:	6801      	ldr	r1, [r0, #0]
 8010194:	115e      	asrs	r6, r3, #5
 8010196:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801019a:	f013 031f 	ands.w	r3, r3, #31
 801019e:	b087      	sub	sp, #28
 80101a0:	bf18      	it	ne
 80101a2:	3604      	addne	r6, #4
 80101a4:	2500      	movs	r5, #0
 80101a6:	1f37      	subs	r7, r6, #4
 80101a8:	4682      	mov	sl, r0
 80101aa:	4690      	mov	r8, r2
 80101ac:	9301      	str	r3, [sp, #4]
 80101ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80101b2:	46b9      	mov	r9, r7
 80101b4:	463c      	mov	r4, r7
 80101b6:	9502      	str	r5, [sp, #8]
 80101b8:	46ab      	mov	fp, r5
 80101ba:	784a      	ldrb	r2, [r1, #1]
 80101bc:	1c4b      	adds	r3, r1, #1
 80101be:	9303      	str	r3, [sp, #12]
 80101c0:	b342      	cbz	r2, 8010214 <__hexnan+0x88>
 80101c2:	4610      	mov	r0, r2
 80101c4:	9105      	str	r1, [sp, #20]
 80101c6:	9204      	str	r2, [sp, #16]
 80101c8:	f7ff fd5f 	bl	800fc8a <__hexdig_fun>
 80101cc:	2800      	cmp	r0, #0
 80101ce:	d14f      	bne.n	8010270 <__hexnan+0xe4>
 80101d0:	9a04      	ldr	r2, [sp, #16]
 80101d2:	9905      	ldr	r1, [sp, #20]
 80101d4:	2a20      	cmp	r2, #32
 80101d6:	d818      	bhi.n	801020a <__hexnan+0x7e>
 80101d8:	9b02      	ldr	r3, [sp, #8]
 80101da:	459b      	cmp	fp, r3
 80101dc:	dd13      	ble.n	8010206 <__hexnan+0x7a>
 80101de:	454c      	cmp	r4, r9
 80101e0:	d206      	bcs.n	80101f0 <__hexnan+0x64>
 80101e2:	2d07      	cmp	r5, #7
 80101e4:	dc04      	bgt.n	80101f0 <__hexnan+0x64>
 80101e6:	462a      	mov	r2, r5
 80101e8:	4649      	mov	r1, r9
 80101ea:	4620      	mov	r0, r4
 80101ec:	f7ff ffa8 	bl	8010140 <L_shift>
 80101f0:	4544      	cmp	r4, r8
 80101f2:	d950      	bls.n	8010296 <__hexnan+0x10a>
 80101f4:	2300      	movs	r3, #0
 80101f6:	f1a4 0904 	sub.w	r9, r4, #4
 80101fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80101fe:	f8cd b008 	str.w	fp, [sp, #8]
 8010202:	464c      	mov	r4, r9
 8010204:	461d      	mov	r5, r3
 8010206:	9903      	ldr	r1, [sp, #12]
 8010208:	e7d7      	b.n	80101ba <__hexnan+0x2e>
 801020a:	2a29      	cmp	r2, #41	; 0x29
 801020c:	d156      	bne.n	80102bc <__hexnan+0x130>
 801020e:	3102      	adds	r1, #2
 8010210:	f8ca 1000 	str.w	r1, [sl]
 8010214:	f1bb 0f00 	cmp.w	fp, #0
 8010218:	d050      	beq.n	80102bc <__hexnan+0x130>
 801021a:	454c      	cmp	r4, r9
 801021c:	d206      	bcs.n	801022c <__hexnan+0xa0>
 801021e:	2d07      	cmp	r5, #7
 8010220:	dc04      	bgt.n	801022c <__hexnan+0xa0>
 8010222:	462a      	mov	r2, r5
 8010224:	4649      	mov	r1, r9
 8010226:	4620      	mov	r0, r4
 8010228:	f7ff ff8a 	bl	8010140 <L_shift>
 801022c:	4544      	cmp	r4, r8
 801022e:	d934      	bls.n	801029a <__hexnan+0x10e>
 8010230:	f1a8 0204 	sub.w	r2, r8, #4
 8010234:	4623      	mov	r3, r4
 8010236:	f853 1b04 	ldr.w	r1, [r3], #4
 801023a:	f842 1f04 	str.w	r1, [r2, #4]!
 801023e:	429f      	cmp	r7, r3
 8010240:	d2f9      	bcs.n	8010236 <__hexnan+0xaa>
 8010242:	1b3b      	subs	r3, r7, r4
 8010244:	f023 0303 	bic.w	r3, r3, #3
 8010248:	3304      	adds	r3, #4
 801024a:	3401      	adds	r4, #1
 801024c:	3e03      	subs	r6, #3
 801024e:	42b4      	cmp	r4, r6
 8010250:	bf88      	it	hi
 8010252:	2304      	movhi	r3, #4
 8010254:	4443      	add	r3, r8
 8010256:	2200      	movs	r2, #0
 8010258:	f843 2b04 	str.w	r2, [r3], #4
 801025c:	429f      	cmp	r7, r3
 801025e:	d2fb      	bcs.n	8010258 <__hexnan+0xcc>
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	b91b      	cbnz	r3, 801026c <__hexnan+0xe0>
 8010264:	4547      	cmp	r7, r8
 8010266:	d127      	bne.n	80102b8 <__hexnan+0x12c>
 8010268:	2301      	movs	r3, #1
 801026a:	603b      	str	r3, [r7, #0]
 801026c:	2005      	movs	r0, #5
 801026e:	e026      	b.n	80102be <__hexnan+0x132>
 8010270:	3501      	adds	r5, #1
 8010272:	2d08      	cmp	r5, #8
 8010274:	f10b 0b01 	add.w	fp, fp, #1
 8010278:	dd06      	ble.n	8010288 <__hexnan+0xfc>
 801027a:	4544      	cmp	r4, r8
 801027c:	d9c3      	bls.n	8010206 <__hexnan+0x7a>
 801027e:	2300      	movs	r3, #0
 8010280:	f844 3c04 	str.w	r3, [r4, #-4]
 8010284:	2501      	movs	r5, #1
 8010286:	3c04      	subs	r4, #4
 8010288:	6822      	ldr	r2, [r4, #0]
 801028a:	f000 000f 	and.w	r0, r0, #15
 801028e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010292:	6022      	str	r2, [r4, #0]
 8010294:	e7b7      	b.n	8010206 <__hexnan+0x7a>
 8010296:	2508      	movs	r5, #8
 8010298:	e7b5      	b.n	8010206 <__hexnan+0x7a>
 801029a:	9b01      	ldr	r3, [sp, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d0df      	beq.n	8010260 <__hexnan+0xd4>
 80102a0:	f04f 32ff 	mov.w	r2, #4294967295
 80102a4:	f1c3 0320 	rsb	r3, r3, #32
 80102a8:	fa22 f303 	lsr.w	r3, r2, r3
 80102ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80102b0:	401a      	ands	r2, r3
 80102b2:	f846 2c04 	str.w	r2, [r6, #-4]
 80102b6:	e7d3      	b.n	8010260 <__hexnan+0xd4>
 80102b8:	3f04      	subs	r7, #4
 80102ba:	e7d1      	b.n	8010260 <__hexnan+0xd4>
 80102bc:	2004      	movs	r0, #4
 80102be:	b007      	add	sp, #28
 80102c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080102c4 <_localeconv_r>:
 80102c4:	4800      	ldr	r0, [pc, #0]	; (80102c8 <_localeconv_r+0x4>)
 80102c6:	4770      	bx	lr
 80102c8:	2000017c 	.word	0x2000017c

080102cc <__retarget_lock_init_recursive>:
 80102cc:	4770      	bx	lr

080102ce <__retarget_lock_acquire_recursive>:
 80102ce:	4770      	bx	lr

080102d0 <__retarget_lock_release_recursive>:
 80102d0:	4770      	bx	lr
	...

080102d4 <_lseek_r>:
 80102d4:	b538      	push	{r3, r4, r5, lr}
 80102d6:	4d07      	ldr	r5, [pc, #28]	; (80102f4 <_lseek_r+0x20>)
 80102d8:	4604      	mov	r4, r0
 80102da:	4608      	mov	r0, r1
 80102dc:	4611      	mov	r1, r2
 80102de:	2200      	movs	r2, #0
 80102e0:	602a      	str	r2, [r5, #0]
 80102e2:	461a      	mov	r2, r3
 80102e4:	f7f3 fbe4 	bl	8003ab0 <_lseek>
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	d102      	bne.n	80102f2 <_lseek_r+0x1e>
 80102ec:	682b      	ldr	r3, [r5, #0]
 80102ee:	b103      	cbz	r3, 80102f2 <_lseek_r+0x1e>
 80102f0:	6023      	str	r3, [r4, #0]
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
 80102f4:	20001a8c 	.word	0x20001a8c

080102f8 <__swhatbuf_r>:
 80102f8:	b570      	push	{r4, r5, r6, lr}
 80102fa:	460e      	mov	r6, r1
 80102fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010300:	2900      	cmp	r1, #0
 8010302:	b096      	sub	sp, #88	; 0x58
 8010304:	4614      	mov	r4, r2
 8010306:	461d      	mov	r5, r3
 8010308:	da07      	bge.n	801031a <__swhatbuf_r+0x22>
 801030a:	2300      	movs	r3, #0
 801030c:	602b      	str	r3, [r5, #0]
 801030e:	89b3      	ldrh	r3, [r6, #12]
 8010310:	061a      	lsls	r2, r3, #24
 8010312:	d410      	bmi.n	8010336 <__swhatbuf_r+0x3e>
 8010314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010318:	e00e      	b.n	8010338 <__swhatbuf_r+0x40>
 801031a:	466a      	mov	r2, sp
 801031c:	f001 f846 	bl	80113ac <_fstat_r>
 8010320:	2800      	cmp	r0, #0
 8010322:	dbf2      	blt.n	801030a <__swhatbuf_r+0x12>
 8010324:	9a01      	ldr	r2, [sp, #4]
 8010326:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801032a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801032e:	425a      	negs	r2, r3
 8010330:	415a      	adcs	r2, r3
 8010332:	602a      	str	r2, [r5, #0]
 8010334:	e7ee      	b.n	8010314 <__swhatbuf_r+0x1c>
 8010336:	2340      	movs	r3, #64	; 0x40
 8010338:	2000      	movs	r0, #0
 801033a:	6023      	str	r3, [r4, #0]
 801033c:	b016      	add	sp, #88	; 0x58
 801033e:	bd70      	pop	{r4, r5, r6, pc}

08010340 <__smakebuf_r>:
 8010340:	898b      	ldrh	r3, [r1, #12]
 8010342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010344:	079d      	lsls	r5, r3, #30
 8010346:	4606      	mov	r6, r0
 8010348:	460c      	mov	r4, r1
 801034a:	d507      	bpl.n	801035c <__smakebuf_r+0x1c>
 801034c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010350:	6023      	str	r3, [r4, #0]
 8010352:	6123      	str	r3, [r4, #16]
 8010354:	2301      	movs	r3, #1
 8010356:	6163      	str	r3, [r4, #20]
 8010358:	b002      	add	sp, #8
 801035a:	bd70      	pop	{r4, r5, r6, pc}
 801035c:	ab01      	add	r3, sp, #4
 801035e:	466a      	mov	r2, sp
 8010360:	f7ff ffca 	bl	80102f8 <__swhatbuf_r>
 8010364:	9900      	ldr	r1, [sp, #0]
 8010366:	4605      	mov	r5, r0
 8010368:	4630      	mov	r0, r6
 801036a:	f7fc fc3f 	bl	800cbec <_malloc_r>
 801036e:	b948      	cbnz	r0, 8010384 <__smakebuf_r+0x44>
 8010370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010374:	059a      	lsls	r2, r3, #22
 8010376:	d4ef      	bmi.n	8010358 <__smakebuf_r+0x18>
 8010378:	f023 0303 	bic.w	r3, r3, #3
 801037c:	f043 0302 	orr.w	r3, r3, #2
 8010380:	81a3      	strh	r3, [r4, #12]
 8010382:	e7e3      	b.n	801034c <__smakebuf_r+0xc>
 8010384:	4b0d      	ldr	r3, [pc, #52]	; (80103bc <__smakebuf_r+0x7c>)
 8010386:	62b3      	str	r3, [r6, #40]	; 0x28
 8010388:	89a3      	ldrh	r3, [r4, #12]
 801038a:	6020      	str	r0, [r4, #0]
 801038c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010390:	81a3      	strh	r3, [r4, #12]
 8010392:	9b00      	ldr	r3, [sp, #0]
 8010394:	6163      	str	r3, [r4, #20]
 8010396:	9b01      	ldr	r3, [sp, #4]
 8010398:	6120      	str	r0, [r4, #16]
 801039a:	b15b      	cbz	r3, 80103b4 <__smakebuf_r+0x74>
 801039c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103a0:	4630      	mov	r0, r6
 80103a2:	f001 f815 	bl	80113d0 <_isatty_r>
 80103a6:	b128      	cbz	r0, 80103b4 <__smakebuf_r+0x74>
 80103a8:	89a3      	ldrh	r3, [r4, #12]
 80103aa:	f023 0303 	bic.w	r3, r3, #3
 80103ae:	f043 0301 	orr.w	r3, r3, #1
 80103b2:	81a3      	strh	r3, [r4, #12]
 80103b4:	89a0      	ldrh	r0, [r4, #12]
 80103b6:	4305      	orrs	r5, r0
 80103b8:	81a5      	strh	r5, [r4, #12]
 80103ba:	e7cd      	b.n	8010358 <__smakebuf_r+0x18>
 80103bc:	0800fa45 	.word	0x0800fa45

080103c0 <__ascii_mbtowc>:
 80103c0:	b082      	sub	sp, #8
 80103c2:	b901      	cbnz	r1, 80103c6 <__ascii_mbtowc+0x6>
 80103c4:	a901      	add	r1, sp, #4
 80103c6:	b142      	cbz	r2, 80103da <__ascii_mbtowc+0x1a>
 80103c8:	b14b      	cbz	r3, 80103de <__ascii_mbtowc+0x1e>
 80103ca:	7813      	ldrb	r3, [r2, #0]
 80103cc:	600b      	str	r3, [r1, #0]
 80103ce:	7812      	ldrb	r2, [r2, #0]
 80103d0:	1e10      	subs	r0, r2, #0
 80103d2:	bf18      	it	ne
 80103d4:	2001      	movne	r0, #1
 80103d6:	b002      	add	sp, #8
 80103d8:	4770      	bx	lr
 80103da:	4610      	mov	r0, r2
 80103dc:	e7fb      	b.n	80103d6 <__ascii_mbtowc+0x16>
 80103de:	f06f 0001 	mvn.w	r0, #1
 80103e2:	e7f8      	b.n	80103d6 <__ascii_mbtowc+0x16>

080103e4 <__malloc_lock>:
 80103e4:	4801      	ldr	r0, [pc, #4]	; (80103ec <__malloc_lock+0x8>)
 80103e6:	f7ff bf72 	b.w	80102ce <__retarget_lock_acquire_recursive>
 80103ea:	bf00      	nop
 80103ec:	20001a84 	.word	0x20001a84

080103f0 <__malloc_unlock>:
 80103f0:	4801      	ldr	r0, [pc, #4]	; (80103f8 <__malloc_unlock+0x8>)
 80103f2:	f7ff bf6d 	b.w	80102d0 <__retarget_lock_release_recursive>
 80103f6:	bf00      	nop
 80103f8:	20001a84 	.word	0x20001a84

080103fc <_Balloc>:
 80103fc:	b570      	push	{r4, r5, r6, lr}
 80103fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010400:	4604      	mov	r4, r0
 8010402:	460d      	mov	r5, r1
 8010404:	b976      	cbnz	r6, 8010424 <_Balloc+0x28>
 8010406:	2010      	movs	r0, #16
 8010408:	f7fc fb82 	bl	800cb10 <malloc>
 801040c:	4602      	mov	r2, r0
 801040e:	6260      	str	r0, [r4, #36]	; 0x24
 8010410:	b920      	cbnz	r0, 801041c <_Balloc+0x20>
 8010412:	4b18      	ldr	r3, [pc, #96]	; (8010474 <_Balloc+0x78>)
 8010414:	4818      	ldr	r0, [pc, #96]	; (8010478 <_Balloc+0x7c>)
 8010416:	2166      	movs	r1, #102	; 0x66
 8010418:	f000 ff98 	bl	801134c <__assert_func>
 801041c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010420:	6006      	str	r6, [r0, #0]
 8010422:	60c6      	str	r6, [r0, #12]
 8010424:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010426:	68f3      	ldr	r3, [r6, #12]
 8010428:	b183      	cbz	r3, 801044c <_Balloc+0x50>
 801042a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010432:	b9b8      	cbnz	r0, 8010464 <_Balloc+0x68>
 8010434:	2101      	movs	r1, #1
 8010436:	fa01 f605 	lsl.w	r6, r1, r5
 801043a:	1d72      	adds	r2, r6, #5
 801043c:	0092      	lsls	r2, r2, #2
 801043e:	4620      	mov	r0, r4
 8010440:	f000 fc97 	bl	8010d72 <_calloc_r>
 8010444:	b160      	cbz	r0, 8010460 <_Balloc+0x64>
 8010446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801044a:	e00e      	b.n	801046a <_Balloc+0x6e>
 801044c:	2221      	movs	r2, #33	; 0x21
 801044e:	2104      	movs	r1, #4
 8010450:	4620      	mov	r0, r4
 8010452:	f000 fc8e 	bl	8010d72 <_calloc_r>
 8010456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010458:	60f0      	str	r0, [r6, #12]
 801045a:	68db      	ldr	r3, [r3, #12]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d1e4      	bne.n	801042a <_Balloc+0x2e>
 8010460:	2000      	movs	r0, #0
 8010462:	bd70      	pop	{r4, r5, r6, pc}
 8010464:	6802      	ldr	r2, [r0, #0]
 8010466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801046a:	2300      	movs	r3, #0
 801046c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010470:	e7f7      	b.n	8010462 <_Balloc+0x66>
 8010472:	bf00      	nop
 8010474:	080121b5 	.word	0x080121b5
 8010478:	0801231c 	.word	0x0801231c

0801047c <_Bfree>:
 801047c:	b570      	push	{r4, r5, r6, lr}
 801047e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010480:	4605      	mov	r5, r0
 8010482:	460c      	mov	r4, r1
 8010484:	b976      	cbnz	r6, 80104a4 <_Bfree+0x28>
 8010486:	2010      	movs	r0, #16
 8010488:	f7fc fb42 	bl	800cb10 <malloc>
 801048c:	4602      	mov	r2, r0
 801048e:	6268      	str	r0, [r5, #36]	; 0x24
 8010490:	b920      	cbnz	r0, 801049c <_Bfree+0x20>
 8010492:	4b09      	ldr	r3, [pc, #36]	; (80104b8 <_Bfree+0x3c>)
 8010494:	4809      	ldr	r0, [pc, #36]	; (80104bc <_Bfree+0x40>)
 8010496:	218a      	movs	r1, #138	; 0x8a
 8010498:	f000 ff58 	bl	801134c <__assert_func>
 801049c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104a0:	6006      	str	r6, [r0, #0]
 80104a2:	60c6      	str	r6, [r0, #12]
 80104a4:	b13c      	cbz	r4, 80104b6 <_Bfree+0x3a>
 80104a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80104a8:	6862      	ldr	r2, [r4, #4]
 80104aa:	68db      	ldr	r3, [r3, #12]
 80104ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80104b0:	6021      	str	r1, [r4, #0]
 80104b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80104b6:	bd70      	pop	{r4, r5, r6, pc}
 80104b8:	080121b5 	.word	0x080121b5
 80104bc:	0801231c 	.word	0x0801231c

080104c0 <__multadd>:
 80104c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104c4:	690e      	ldr	r6, [r1, #16]
 80104c6:	4607      	mov	r7, r0
 80104c8:	4698      	mov	r8, r3
 80104ca:	460c      	mov	r4, r1
 80104cc:	f101 0014 	add.w	r0, r1, #20
 80104d0:	2300      	movs	r3, #0
 80104d2:	6805      	ldr	r5, [r0, #0]
 80104d4:	b2a9      	uxth	r1, r5
 80104d6:	fb02 8101 	mla	r1, r2, r1, r8
 80104da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80104de:	0c2d      	lsrs	r5, r5, #16
 80104e0:	fb02 c505 	mla	r5, r2, r5, ip
 80104e4:	b289      	uxth	r1, r1
 80104e6:	3301      	adds	r3, #1
 80104e8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80104ec:	429e      	cmp	r6, r3
 80104ee:	f840 1b04 	str.w	r1, [r0], #4
 80104f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80104f6:	dcec      	bgt.n	80104d2 <__multadd+0x12>
 80104f8:	f1b8 0f00 	cmp.w	r8, #0
 80104fc:	d022      	beq.n	8010544 <__multadd+0x84>
 80104fe:	68a3      	ldr	r3, [r4, #8]
 8010500:	42b3      	cmp	r3, r6
 8010502:	dc19      	bgt.n	8010538 <__multadd+0x78>
 8010504:	6861      	ldr	r1, [r4, #4]
 8010506:	4638      	mov	r0, r7
 8010508:	3101      	adds	r1, #1
 801050a:	f7ff ff77 	bl	80103fc <_Balloc>
 801050e:	4605      	mov	r5, r0
 8010510:	b928      	cbnz	r0, 801051e <__multadd+0x5e>
 8010512:	4602      	mov	r2, r0
 8010514:	4b0d      	ldr	r3, [pc, #52]	; (801054c <__multadd+0x8c>)
 8010516:	480e      	ldr	r0, [pc, #56]	; (8010550 <__multadd+0x90>)
 8010518:	21b5      	movs	r1, #181	; 0xb5
 801051a:	f000 ff17 	bl	801134c <__assert_func>
 801051e:	6922      	ldr	r2, [r4, #16]
 8010520:	3202      	adds	r2, #2
 8010522:	f104 010c 	add.w	r1, r4, #12
 8010526:	0092      	lsls	r2, r2, #2
 8010528:	300c      	adds	r0, #12
 801052a:	f7fc faf9 	bl	800cb20 <memcpy>
 801052e:	4621      	mov	r1, r4
 8010530:	4638      	mov	r0, r7
 8010532:	f7ff ffa3 	bl	801047c <_Bfree>
 8010536:	462c      	mov	r4, r5
 8010538:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801053c:	3601      	adds	r6, #1
 801053e:	f8c3 8014 	str.w	r8, [r3, #20]
 8010542:	6126      	str	r6, [r4, #16]
 8010544:	4620      	mov	r0, r4
 8010546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801054a:	bf00      	nop
 801054c:	0801222b 	.word	0x0801222b
 8010550:	0801231c 	.word	0x0801231c

08010554 <__s2b>:
 8010554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010558:	460c      	mov	r4, r1
 801055a:	4615      	mov	r5, r2
 801055c:	461f      	mov	r7, r3
 801055e:	2209      	movs	r2, #9
 8010560:	3308      	adds	r3, #8
 8010562:	4606      	mov	r6, r0
 8010564:	fb93 f3f2 	sdiv	r3, r3, r2
 8010568:	2100      	movs	r1, #0
 801056a:	2201      	movs	r2, #1
 801056c:	429a      	cmp	r2, r3
 801056e:	db09      	blt.n	8010584 <__s2b+0x30>
 8010570:	4630      	mov	r0, r6
 8010572:	f7ff ff43 	bl	80103fc <_Balloc>
 8010576:	b940      	cbnz	r0, 801058a <__s2b+0x36>
 8010578:	4602      	mov	r2, r0
 801057a:	4b19      	ldr	r3, [pc, #100]	; (80105e0 <__s2b+0x8c>)
 801057c:	4819      	ldr	r0, [pc, #100]	; (80105e4 <__s2b+0x90>)
 801057e:	21ce      	movs	r1, #206	; 0xce
 8010580:	f000 fee4 	bl	801134c <__assert_func>
 8010584:	0052      	lsls	r2, r2, #1
 8010586:	3101      	adds	r1, #1
 8010588:	e7f0      	b.n	801056c <__s2b+0x18>
 801058a:	9b08      	ldr	r3, [sp, #32]
 801058c:	6143      	str	r3, [r0, #20]
 801058e:	2d09      	cmp	r5, #9
 8010590:	f04f 0301 	mov.w	r3, #1
 8010594:	6103      	str	r3, [r0, #16]
 8010596:	dd16      	ble.n	80105c6 <__s2b+0x72>
 8010598:	f104 0909 	add.w	r9, r4, #9
 801059c:	46c8      	mov	r8, r9
 801059e:	442c      	add	r4, r5
 80105a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80105a4:	4601      	mov	r1, r0
 80105a6:	3b30      	subs	r3, #48	; 0x30
 80105a8:	220a      	movs	r2, #10
 80105aa:	4630      	mov	r0, r6
 80105ac:	f7ff ff88 	bl	80104c0 <__multadd>
 80105b0:	45a0      	cmp	r8, r4
 80105b2:	d1f5      	bne.n	80105a0 <__s2b+0x4c>
 80105b4:	f1a5 0408 	sub.w	r4, r5, #8
 80105b8:	444c      	add	r4, r9
 80105ba:	1b2d      	subs	r5, r5, r4
 80105bc:	1963      	adds	r3, r4, r5
 80105be:	42bb      	cmp	r3, r7
 80105c0:	db04      	blt.n	80105cc <__s2b+0x78>
 80105c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105c6:	340a      	adds	r4, #10
 80105c8:	2509      	movs	r5, #9
 80105ca:	e7f6      	b.n	80105ba <__s2b+0x66>
 80105cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80105d0:	4601      	mov	r1, r0
 80105d2:	3b30      	subs	r3, #48	; 0x30
 80105d4:	220a      	movs	r2, #10
 80105d6:	4630      	mov	r0, r6
 80105d8:	f7ff ff72 	bl	80104c0 <__multadd>
 80105dc:	e7ee      	b.n	80105bc <__s2b+0x68>
 80105de:	bf00      	nop
 80105e0:	0801222b 	.word	0x0801222b
 80105e4:	0801231c 	.word	0x0801231c

080105e8 <__hi0bits>:
 80105e8:	0c03      	lsrs	r3, r0, #16
 80105ea:	041b      	lsls	r3, r3, #16
 80105ec:	b9d3      	cbnz	r3, 8010624 <__hi0bits+0x3c>
 80105ee:	0400      	lsls	r0, r0, #16
 80105f0:	2310      	movs	r3, #16
 80105f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80105f6:	bf04      	itt	eq
 80105f8:	0200      	lsleq	r0, r0, #8
 80105fa:	3308      	addeq	r3, #8
 80105fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010600:	bf04      	itt	eq
 8010602:	0100      	lsleq	r0, r0, #4
 8010604:	3304      	addeq	r3, #4
 8010606:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801060a:	bf04      	itt	eq
 801060c:	0080      	lsleq	r0, r0, #2
 801060e:	3302      	addeq	r3, #2
 8010610:	2800      	cmp	r0, #0
 8010612:	db05      	blt.n	8010620 <__hi0bits+0x38>
 8010614:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010618:	f103 0301 	add.w	r3, r3, #1
 801061c:	bf08      	it	eq
 801061e:	2320      	moveq	r3, #32
 8010620:	4618      	mov	r0, r3
 8010622:	4770      	bx	lr
 8010624:	2300      	movs	r3, #0
 8010626:	e7e4      	b.n	80105f2 <__hi0bits+0xa>

08010628 <__lo0bits>:
 8010628:	6803      	ldr	r3, [r0, #0]
 801062a:	f013 0207 	ands.w	r2, r3, #7
 801062e:	4601      	mov	r1, r0
 8010630:	d00b      	beq.n	801064a <__lo0bits+0x22>
 8010632:	07da      	lsls	r2, r3, #31
 8010634:	d424      	bmi.n	8010680 <__lo0bits+0x58>
 8010636:	0798      	lsls	r0, r3, #30
 8010638:	bf49      	itett	mi
 801063a:	085b      	lsrmi	r3, r3, #1
 801063c:	089b      	lsrpl	r3, r3, #2
 801063e:	2001      	movmi	r0, #1
 8010640:	600b      	strmi	r3, [r1, #0]
 8010642:	bf5c      	itt	pl
 8010644:	600b      	strpl	r3, [r1, #0]
 8010646:	2002      	movpl	r0, #2
 8010648:	4770      	bx	lr
 801064a:	b298      	uxth	r0, r3
 801064c:	b9b0      	cbnz	r0, 801067c <__lo0bits+0x54>
 801064e:	0c1b      	lsrs	r3, r3, #16
 8010650:	2010      	movs	r0, #16
 8010652:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010656:	bf04      	itt	eq
 8010658:	0a1b      	lsreq	r3, r3, #8
 801065a:	3008      	addeq	r0, #8
 801065c:	071a      	lsls	r2, r3, #28
 801065e:	bf04      	itt	eq
 8010660:	091b      	lsreq	r3, r3, #4
 8010662:	3004      	addeq	r0, #4
 8010664:	079a      	lsls	r2, r3, #30
 8010666:	bf04      	itt	eq
 8010668:	089b      	lsreq	r3, r3, #2
 801066a:	3002      	addeq	r0, #2
 801066c:	07da      	lsls	r2, r3, #31
 801066e:	d403      	bmi.n	8010678 <__lo0bits+0x50>
 8010670:	085b      	lsrs	r3, r3, #1
 8010672:	f100 0001 	add.w	r0, r0, #1
 8010676:	d005      	beq.n	8010684 <__lo0bits+0x5c>
 8010678:	600b      	str	r3, [r1, #0]
 801067a:	4770      	bx	lr
 801067c:	4610      	mov	r0, r2
 801067e:	e7e8      	b.n	8010652 <__lo0bits+0x2a>
 8010680:	2000      	movs	r0, #0
 8010682:	4770      	bx	lr
 8010684:	2020      	movs	r0, #32
 8010686:	4770      	bx	lr

08010688 <__i2b>:
 8010688:	b510      	push	{r4, lr}
 801068a:	460c      	mov	r4, r1
 801068c:	2101      	movs	r1, #1
 801068e:	f7ff feb5 	bl	80103fc <_Balloc>
 8010692:	4602      	mov	r2, r0
 8010694:	b928      	cbnz	r0, 80106a2 <__i2b+0x1a>
 8010696:	4b05      	ldr	r3, [pc, #20]	; (80106ac <__i2b+0x24>)
 8010698:	4805      	ldr	r0, [pc, #20]	; (80106b0 <__i2b+0x28>)
 801069a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801069e:	f000 fe55 	bl	801134c <__assert_func>
 80106a2:	2301      	movs	r3, #1
 80106a4:	6144      	str	r4, [r0, #20]
 80106a6:	6103      	str	r3, [r0, #16]
 80106a8:	bd10      	pop	{r4, pc}
 80106aa:	bf00      	nop
 80106ac:	0801222b 	.word	0x0801222b
 80106b0:	0801231c 	.word	0x0801231c

080106b4 <__multiply>:
 80106b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b8:	4614      	mov	r4, r2
 80106ba:	690a      	ldr	r2, [r1, #16]
 80106bc:	6923      	ldr	r3, [r4, #16]
 80106be:	429a      	cmp	r2, r3
 80106c0:	bfb8      	it	lt
 80106c2:	460b      	movlt	r3, r1
 80106c4:	460d      	mov	r5, r1
 80106c6:	bfbc      	itt	lt
 80106c8:	4625      	movlt	r5, r4
 80106ca:	461c      	movlt	r4, r3
 80106cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80106d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80106d4:	68ab      	ldr	r3, [r5, #8]
 80106d6:	6869      	ldr	r1, [r5, #4]
 80106d8:	eb0a 0709 	add.w	r7, sl, r9
 80106dc:	42bb      	cmp	r3, r7
 80106de:	b085      	sub	sp, #20
 80106e0:	bfb8      	it	lt
 80106e2:	3101      	addlt	r1, #1
 80106e4:	f7ff fe8a 	bl	80103fc <_Balloc>
 80106e8:	b930      	cbnz	r0, 80106f8 <__multiply+0x44>
 80106ea:	4602      	mov	r2, r0
 80106ec:	4b42      	ldr	r3, [pc, #264]	; (80107f8 <__multiply+0x144>)
 80106ee:	4843      	ldr	r0, [pc, #268]	; (80107fc <__multiply+0x148>)
 80106f0:	f240 115d 	movw	r1, #349	; 0x15d
 80106f4:	f000 fe2a 	bl	801134c <__assert_func>
 80106f8:	f100 0614 	add.w	r6, r0, #20
 80106fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8010700:	4633      	mov	r3, r6
 8010702:	2200      	movs	r2, #0
 8010704:	4543      	cmp	r3, r8
 8010706:	d31e      	bcc.n	8010746 <__multiply+0x92>
 8010708:	f105 0c14 	add.w	ip, r5, #20
 801070c:	f104 0314 	add.w	r3, r4, #20
 8010710:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8010714:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8010718:	9202      	str	r2, [sp, #8]
 801071a:	ebac 0205 	sub.w	r2, ip, r5
 801071e:	3a15      	subs	r2, #21
 8010720:	f022 0203 	bic.w	r2, r2, #3
 8010724:	3204      	adds	r2, #4
 8010726:	f105 0115 	add.w	r1, r5, #21
 801072a:	458c      	cmp	ip, r1
 801072c:	bf38      	it	cc
 801072e:	2204      	movcc	r2, #4
 8010730:	9201      	str	r2, [sp, #4]
 8010732:	9a02      	ldr	r2, [sp, #8]
 8010734:	9303      	str	r3, [sp, #12]
 8010736:	429a      	cmp	r2, r3
 8010738:	d808      	bhi.n	801074c <__multiply+0x98>
 801073a:	2f00      	cmp	r7, #0
 801073c:	dc55      	bgt.n	80107ea <__multiply+0x136>
 801073e:	6107      	str	r7, [r0, #16]
 8010740:	b005      	add	sp, #20
 8010742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010746:	f843 2b04 	str.w	r2, [r3], #4
 801074a:	e7db      	b.n	8010704 <__multiply+0x50>
 801074c:	f8b3 a000 	ldrh.w	sl, [r3]
 8010750:	f1ba 0f00 	cmp.w	sl, #0
 8010754:	d020      	beq.n	8010798 <__multiply+0xe4>
 8010756:	f105 0e14 	add.w	lr, r5, #20
 801075a:	46b1      	mov	r9, r6
 801075c:	2200      	movs	r2, #0
 801075e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8010762:	f8d9 b000 	ldr.w	fp, [r9]
 8010766:	b2a1      	uxth	r1, r4
 8010768:	fa1f fb8b 	uxth.w	fp, fp
 801076c:	fb0a b101 	mla	r1, sl, r1, fp
 8010770:	4411      	add	r1, r2
 8010772:	f8d9 2000 	ldr.w	r2, [r9]
 8010776:	0c24      	lsrs	r4, r4, #16
 8010778:	0c12      	lsrs	r2, r2, #16
 801077a:	fb0a 2404 	mla	r4, sl, r4, r2
 801077e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8010782:	b289      	uxth	r1, r1
 8010784:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8010788:	45f4      	cmp	ip, lr
 801078a:	f849 1b04 	str.w	r1, [r9], #4
 801078e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8010792:	d8e4      	bhi.n	801075e <__multiply+0xaa>
 8010794:	9901      	ldr	r1, [sp, #4]
 8010796:	5072      	str	r2, [r6, r1]
 8010798:	9a03      	ldr	r2, [sp, #12]
 801079a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801079e:	3304      	adds	r3, #4
 80107a0:	f1b9 0f00 	cmp.w	r9, #0
 80107a4:	d01f      	beq.n	80107e6 <__multiply+0x132>
 80107a6:	6834      	ldr	r4, [r6, #0]
 80107a8:	f105 0114 	add.w	r1, r5, #20
 80107ac:	46b6      	mov	lr, r6
 80107ae:	f04f 0a00 	mov.w	sl, #0
 80107b2:	880a      	ldrh	r2, [r1, #0]
 80107b4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80107b8:	fb09 b202 	mla	r2, r9, r2, fp
 80107bc:	4492      	add	sl, r2
 80107be:	b2a4      	uxth	r4, r4
 80107c0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80107c4:	f84e 4b04 	str.w	r4, [lr], #4
 80107c8:	f851 4b04 	ldr.w	r4, [r1], #4
 80107cc:	f8be 2000 	ldrh.w	r2, [lr]
 80107d0:	0c24      	lsrs	r4, r4, #16
 80107d2:	fb09 2404 	mla	r4, r9, r4, r2
 80107d6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80107da:	458c      	cmp	ip, r1
 80107dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80107e0:	d8e7      	bhi.n	80107b2 <__multiply+0xfe>
 80107e2:	9a01      	ldr	r2, [sp, #4]
 80107e4:	50b4      	str	r4, [r6, r2]
 80107e6:	3604      	adds	r6, #4
 80107e8:	e7a3      	b.n	8010732 <__multiply+0x7e>
 80107ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d1a5      	bne.n	801073e <__multiply+0x8a>
 80107f2:	3f01      	subs	r7, #1
 80107f4:	e7a1      	b.n	801073a <__multiply+0x86>
 80107f6:	bf00      	nop
 80107f8:	0801222b 	.word	0x0801222b
 80107fc:	0801231c 	.word	0x0801231c

08010800 <__pow5mult>:
 8010800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010804:	4615      	mov	r5, r2
 8010806:	f012 0203 	ands.w	r2, r2, #3
 801080a:	4606      	mov	r6, r0
 801080c:	460f      	mov	r7, r1
 801080e:	d007      	beq.n	8010820 <__pow5mult+0x20>
 8010810:	4c25      	ldr	r4, [pc, #148]	; (80108a8 <__pow5mult+0xa8>)
 8010812:	3a01      	subs	r2, #1
 8010814:	2300      	movs	r3, #0
 8010816:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801081a:	f7ff fe51 	bl	80104c0 <__multadd>
 801081e:	4607      	mov	r7, r0
 8010820:	10ad      	asrs	r5, r5, #2
 8010822:	d03d      	beq.n	80108a0 <__pow5mult+0xa0>
 8010824:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010826:	b97c      	cbnz	r4, 8010848 <__pow5mult+0x48>
 8010828:	2010      	movs	r0, #16
 801082a:	f7fc f971 	bl	800cb10 <malloc>
 801082e:	4602      	mov	r2, r0
 8010830:	6270      	str	r0, [r6, #36]	; 0x24
 8010832:	b928      	cbnz	r0, 8010840 <__pow5mult+0x40>
 8010834:	4b1d      	ldr	r3, [pc, #116]	; (80108ac <__pow5mult+0xac>)
 8010836:	481e      	ldr	r0, [pc, #120]	; (80108b0 <__pow5mult+0xb0>)
 8010838:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801083c:	f000 fd86 	bl	801134c <__assert_func>
 8010840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010844:	6004      	str	r4, [r0, #0]
 8010846:	60c4      	str	r4, [r0, #12]
 8010848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801084c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010850:	b94c      	cbnz	r4, 8010866 <__pow5mult+0x66>
 8010852:	f240 2171 	movw	r1, #625	; 0x271
 8010856:	4630      	mov	r0, r6
 8010858:	f7ff ff16 	bl	8010688 <__i2b>
 801085c:	2300      	movs	r3, #0
 801085e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010862:	4604      	mov	r4, r0
 8010864:	6003      	str	r3, [r0, #0]
 8010866:	f04f 0900 	mov.w	r9, #0
 801086a:	07eb      	lsls	r3, r5, #31
 801086c:	d50a      	bpl.n	8010884 <__pow5mult+0x84>
 801086e:	4639      	mov	r1, r7
 8010870:	4622      	mov	r2, r4
 8010872:	4630      	mov	r0, r6
 8010874:	f7ff ff1e 	bl	80106b4 <__multiply>
 8010878:	4639      	mov	r1, r7
 801087a:	4680      	mov	r8, r0
 801087c:	4630      	mov	r0, r6
 801087e:	f7ff fdfd 	bl	801047c <_Bfree>
 8010882:	4647      	mov	r7, r8
 8010884:	106d      	asrs	r5, r5, #1
 8010886:	d00b      	beq.n	80108a0 <__pow5mult+0xa0>
 8010888:	6820      	ldr	r0, [r4, #0]
 801088a:	b938      	cbnz	r0, 801089c <__pow5mult+0x9c>
 801088c:	4622      	mov	r2, r4
 801088e:	4621      	mov	r1, r4
 8010890:	4630      	mov	r0, r6
 8010892:	f7ff ff0f 	bl	80106b4 <__multiply>
 8010896:	6020      	str	r0, [r4, #0]
 8010898:	f8c0 9000 	str.w	r9, [r0]
 801089c:	4604      	mov	r4, r0
 801089e:	e7e4      	b.n	801086a <__pow5mult+0x6a>
 80108a0:	4638      	mov	r0, r7
 80108a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108a6:	bf00      	nop
 80108a8:	08012470 	.word	0x08012470
 80108ac:	080121b5 	.word	0x080121b5
 80108b0:	0801231c 	.word	0x0801231c

080108b4 <__lshift>:
 80108b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108b8:	460c      	mov	r4, r1
 80108ba:	6849      	ldr	r1, [r1, #4]
 80108bc:	6923      	ldr	r3, [r4, #16]
 80108be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80108c2:	68a3      	ldr	r3, [r4, #8]
 80108c4:	4607      	mov	r7, r0
 80108c6:	4691      	mov	r9, r2
 80108c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80108cc:	f108 0601 	add.w	r6, r8, #1
 80108d0:	42b3      	cmp	r3, r6
 80108d2:	db0b      	blt.n	80108ec <__lshift+0x38>
 80108d4:	4638      	mov	r0, r7
 80108d6:	f7ff fd91 	bl	80103fc <_Balloc>
 80108da:	4605      	mov	r5, r0
 80108dc:	b948      	cbnz	r0, 80108f2 <__lshift+0x3e>
 80108de:	4602      	mov	r2, r0
 80108e0:	4b28      	ldr	r3, [pc, #160]	; (8010984 <__lshift+0xd0>)
 80108e2:	4829      	ldr	r0, [pc, #164]	; (8010988 <__lshift+0xd4>)
 80108e4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80108e8:	f000 fd30 	bl	801134c <__assert_func>
 80108ec:	3101      	adds	r1, #1
 80108ee:	005b      	lsls	r3, r3, #1
 80108f0:	e7ee      	b.n	80108d0 <__lshift+0x1c>
 80108f2:	2300      	movs	r3, #0
 80108f4:	f100 0114 	add.w	r1, r0, #20
 80108f8:	f100 0210 	add.w	r2, r0, #16
 80108fc:	4618      	mov	r0, r3
 80108fe:	4553      	cmp	r3, sl
 8010900:	db33      	blt.n	801096a <__lshift+0xb6>
 8010902:	6920      	ldr	r0, [r4, #16]
 8010904:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010908:	f104 0314 	add.w	r3, r4, #20
 801090c:	f019 091f 	ands.w	r9, r9, #31
 8010910:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010914:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010918:	d02b      	beq.n	8010972 <__lshift+0xbe>
 801091a:	f1c9 0e20 	rsb	lr, r9, #32
 801091e:	468a      	mov	sl, r1
 8010920:	2200      	movs	r2, #0
 8010922:	6818      	ldr	r0, [r3, #0]
 8010924:	fa00 f009 	lsl.w	r0, r0, r9
 8010928:	4302      	orrs	r2, r0
 801092a:	f84a 2b04 	str.w	r2, [sl], #4
 801092e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010932:	459c      	cmp	ip, r3
 8010934:	fa22 f20e 	lsr.w	r2, r2, lr
 8010938:	d8f3      	bhi.n	8010922 <__lshift+0x6e>
 801093a:	ebac 0304 	sub.w	r3, ip, r4
 801093e:	3b15      	subs	r3, #21
 8010940:	f023 0303 	bic.w	r3, r3, #3
 8010944:	3304      	adds	r3, #4
 8010946:	f104 0015 	add.w	r0, r4, #21
 801094a:	4584      	cmp	ip, r0
 801094c:	bf38      	it	cc
 801094e:	2304      	movcc	r3, #4
 8010950:	50ca      	str	r2, [r1, r3]
 8010952:	b10a      	cbz	r2, 8010958 <__lshift+0xa4>
 8010954:	f108 0602 	add.w	r6, r8, #2
 8010958:	3e01      	subs	r6, #1
 801095a:	4638      	mov	r0, r7
 801095c:	612e      	str	r6, [r5, #16]
 801095e:	4621      	mov	r1, r4
 8010960:	f7ff fd8c 	bl	801047c <_Bfree>
 8010964:	4628      	mov	r0, r5
 8010966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801096a:	f842 0f04 	str.w	r0, [r2, #4]!
 801096e:	3301      	adds	r3, #1
 8010970:	e7c5      	b.n	80108fe <__lshift+0x4a>
 8010972:	3904      	subs	r1, #4
 8010974:	f853 2b04 	ldr.w	r2, [r3], #4
 8010978:	f841 2f04 	str.w	r2, [r1, #4]!
 801097c:	459c      	cmp	ip, r3
 801097e:	d8f9      	bhi.n	8010974 <__lshift+0xc0>
 8010980:	e7ea      	b.n	8010958 <__lshift+0xa4>
 8010982:	bf00      	nop
 8010984:	0801222b 	.word	0x0801222b
 8010988:	0801231c 	.word	0x0801231c

0801098c <__mcmp>:
 801098c:	b530      	push	{r4, r5, lr}
 801098e:	6902      	ldr	r2, [r0, #16]
 8010990:	690c      	ldr	r4, [r1, #16]
 8010992:	1b12      	subs	r2, r2, r4
 8010994:	d10e      	bne.n	80109b4 <__mcmp+0x28>
 8010996:	f100 0314 	add.w	r3, r0, #20
 801099a:	3114      	adds	r1, #20
 801099c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80109a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80109a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80109a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80109ac:	42a5      	cmp	r5, r4
 80109ae:	d003      	beq.n	80109b8 <__mcmp+0x2c>
 80109b0:	d305      	bcc.n	80109be <__mcmp+0x32>
 80109b2:	2201      	movs	r2, #1
 80109b4:	4610      	mov	r0, r2
 80109b6:	bd30      	pop	{r4, r5, pc}
 80109b8:	4283      	cmp	r3, r0
 80109ba:	d3f3      	bcc.n	80109a4 <__mcmp+0x18>
 80109bc:	e7fa      	b.n	80109b4 <__mcmp+0x28>
 80109be:	f04f 32ff 	mov.w	r2, #4294967295
 80109c2:	e7f7      	b.n	80109b4 <__mcmp+0x28>

080109c4 <__mdiff>:
 80109c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c8:	460c      	mov	r4, r1
 80109ca:	4606      	mov	r6, r0
 80109cc:	4611      	mov	r1, r2
 80109ce:	4620      	mov	r0, r4
 80109d0:	4617      	mov	r7, r2
 80109d2:	f7ff ffdb 	bl	801098c <__mcmp>
 80109d6:	1e05      	subs	r5, r0, #0
 80109d8:	d110      	bne.n	80109fc <__mdiff+0x38>
 80109da:	4629      	mov	r1, r5
 80109dc:	4630      	mov	r0, r6
 80109de:	f7ff fd0d 	bl	80103fc <_Balloc>
 80109e2:	b930      	cbnz	r0, 80109f2 <__mdiff+0x2e>
 80109e4:	4b39      	ldr	r3, [pc, #228]	; (8010acc <__mdiff+0x108>)
 80109e6:	4602      	mov	r2, r0
 80109e8:	f240 2132 	movw	r1, #562	; 0x232
 80109ec:	4838      	ldr	r0, [pc, #224]	; (8010ad0 <__mdiff+0x10c>)
 80109ee:	f000 fcad 	bl	801134c <__assert_func>
 80109f2:	2301      	movs	r3, #1
 80109f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80109f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109fc:	bfa4      	itt	ge
 80109fe:	463b      	movge	r3, r7
 8010a00:	4627      	movge	r7, r4
 8010a02:	4630      	mov	r0, r6
 8010a04:	6879      	ldr	r1, [r7, #4]
 8010a06:	bfa6      	itte	ge
 8010a08:	461c      	movge	r4, r3
 8010a0a:	2500      	movge	r5, #0
 8010a0c:	2501      	movlt	r5, #1
 8010a0e:	f7ff fcf5 	bl	80103fc <_Balloc>
 8010a12:	b920      	cbnz	r0, 8010a1e <__mdiff+0x5a>
 8010a14:	4b2d      	ldr	r3, [pc, #180]	; (8010acc <__mdiff+0x108>)
 8010a16:	4602      	mov	r2, r0
 8010a18:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010a1c:	e7e6      	b.n	80109ec <__mdiff+0x28>
 8010a1e:	693e      	ldr	r6, [r7, #16]
 8010a20:	60c5      	str	r5, [r0, #12]
 8010a22:	6925      	ldr	r5, [r4, #16]
 8010a24:	f107 0114 	add.w	r1, r7, #20
 8010a28:	f104 0914 	add.w	r9, r4, #20
 8010a2c:	f100 0e14 	add.w	lr, r0, #20
 8010a30:	f107 0210 	add.w	r2, r7, #16
 8010a34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010a38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010a3c:	46f2      	mov	sl, lr
 8010a3e:	2700      	movs	r7, #0
 8010a40:	f859 3b04 	ldr.w	r3, [r9], #4
 8010a44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010a48:	fa1f f883 	uxth.w	r8, r3
 8010a4c:	fa17 f78b 	uxtah	r7, r7, fp
 8010a50:	0c1b      	lsrs	r3, r3, #16
 8010a52:	eba7 0808 	sub.w	r8, r7, r8
 8010a56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010a5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010a5e:	fa1f f888 	uxth.w	r8, r8
 8010a62:	141f      	asrs	r7, r3, #16
 8010a64:	454d      	cmp	r5, r9
 8010a66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010a6a:	f84a 3b04 	str.w	r3, [sl], #4
 8010a6e:	d8e7      	bhi.n	8010a40 <__mdiff+0x7c>
 8010a70:	1b2b      	subs	r3, r5, r4
 8010a72:	3b15      	subs	r3, #21
 8010a74:	f023 0303 	bic.w	r3, r3, #3
 8010a78:	3304      	adds	r3, #4
 8010a7a:	3415      	adds	r4, #21
 8010a7c:	42a5      	cmp	r5, r4
 8010a7e:	bf38      	it	cc
 8010a80:	2304      	movcc	r3, #4
 8010a82:	4419      	add	r1, r3
 8010a84:	4473      	add	r3, lr
 8010a86:	469e      	mov	lr, r3
 8010a88:	460d      	mov	r5, r1
 8010a8a:	4565      	cmp	r5, ip
 8010a8c:	d30e      	bcc.n	8010aac <__mdiff+0xe8>
 8010a8e:	f10c 0203 	add.w	r2, ip, #3
 8010a92:	1a52      	subs	r2, r2, r1
 8010a94:	f022 0203 	bic.w	r2, r2, #3
 8010a98:	3903      	subs	r1, #3
 8010a9a:	458c      	cmp	ip, r1
 8010a9c:	bf38      	it	cc
 8010a9e:	2200      	movcc	r2, #0
 8010aa0:	441a      	add	r2, r3
 8010aa2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010aa6:	b17b      	cbz	r3, 8010ac8 <__mdiff+0x104>
 8010aa8:	6106      	str	r6, [r0, #16]
 8010aaa:	e7a5      	b.n	80109f8 <__mdiff+0x34>
 8010aac:	f855 8b04 	ldr.w	r8, [r5], #4
 8010ab0:	fa17 f488 	uxtah	r4, r7, r8
 8010ab4:	1422      	asrs	r2, r4, #16
 8010ab6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010aba:	b2a4      	uxth	r4, r4
 8010abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010ac0:	f84e 4b04 	str.w	r4, [lr], #4
 8010ac4:	1417      	asrs	r7, r2, #16
 8010ac6:	e7e0      	b.n	8010a8a <__mdiff+0xc6>
 8010ac8:	3e01      	subs	r6, #1
 8010aca:	e7ea      	b.n	8010aa2 <__mdiff+0xde>
 8010acc:	0801222b 	.word	0x0801222b
 8010ad0:	0801231c 	.word	0x0801231c

08010ad4 <__ulp>:
 8010ad4:	b082      	sub	sp, #8
 8010ad6:	ed8d 0b00 	vstr	d0, [sp]
 8010ada:	9b01      	ldr	r3, [sp, #4]
 8010adc:	4912      	ldr	r1, [pc, #72]	; (8010b28 <__ulp+0x54>)
 8010ade:	4019      	ands	r1, r3
 8010ae0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010ae4:	2900      	cmp	r1, #0
 8010ae6:	dd05      	ble.n	8010af4 <__ulp+0x20>
 8010ae8:	2200      	movs	r2, #0
 8010aea:	460b      	mov	r3, r1
 8010aec:	ec43 2b10 	vmov	d0, r2, r3
 8010af0:	b002      	add	sp, #8
 8010af2:	4770      	bx	lr
 8010af4:	4249      	negs	r1, r1
 8010af6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010afa:	ea4f 5021 	mov.w	r0, r1, asr #20
 8010afe:	f04f 0200 	mov.w	r2, #0
 8010b02:	f04f 0300 	mov.w	r3, #0
 8010b06:	da04      	bge.n	8010b12 <__ulp+0x3e>
 8010b08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010b0c:	fa41 f300 	asr.w	r3, r1, r0
 8010b10:	e7ec      	b.n	8010aec <__ulp+0x18>
 8010b12:	f1a0 0114 	sub.w	r1, r0, #20
 8010b16:	291e      	cmp	r1, #30
 8010b18:	bfda      	itte	le
 8010b1a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8010b1e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010b22:	2101      	movgt	r1, #1
 8010b24:	460a      	mov	r2, r1
 8010b26:	e7e1      	b.n	8010aec <__ulp+0x18>
 8010b28:	7ff00000 	.word	0x7ff00000

08010b2c <__b2d>:
 8010b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b2e:	6905      	ldr	r5, [r0, #16]
 8010b30:	f100 0714 	add.w	r7, r0, #20
 8010b34:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010b38:	1f2e      	subs	r6, r5, #4
 8010b3a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010b3e:	4620      	mov	r0, r4
 8010b40:	f7ff fd52 	bl	80105e8 <__hi0bits>
 8010b44:	f1c0 0320 	rsb	r3, r0, #32
 8010b48:	280a      	cmp	r0, #10
 8010b4a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010bc8 <__b2d+0x9c>
 8010b4e:	600b      	str	r3, [r1, #0]
 8010b50:	dc14      	bgt.n	8010b7c <__b2d+0x50>
 8010b52:	f1c0 0e0b 	rsb	lr, r0, #11
 8010b56:	fa24 f10e 	lsr.w	r1, r4, lr
 8010b5a:	42b7      	cmp	r7, r6
 8010b5c:	ea41 030c 	orr.w	r3, r1, ip
 8010b60:	bf34      	ite	cc
 8010b62:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b66:	2100      	movcs	r1, #0
 8010b68:	3015      	adds	r0, #21
 8010b6a:	fa04 f000 	lsl.w	r0, r4, r0
 8010b6e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010b72:	ea40 0201 	orr.w	r2, r0, r1
 8010b76:	ec43 2b10 	vmov	d0, r2, r3
 8010b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b7c:	42b7      	cmp	r7, r6
 8010b7e:	bf3a      	itte	cc
 8010b80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b84:	f1a5 0608 	subcc.w	r6, r5, #8
 8010b88:	2100      	movcs	r1, #0
 8010b8a:	380b      	subs	r0, #11
 8010b8c:	d017      	beq.n	8010bbe <__b2d+0x92>
 8010b8e:	f1c0 0c20 	rsb	ip, r0, #32
 8010b92:	fa04 f500 	lsl.w	r5, r4, r0
 8010b96:	42be      	cmp	r6, r7
 8010b98:	fa21 f40c 	lsr.w	r4, r1, ip
 8010b9c:	ea45 0504 	orr.w	r5, r5, r4
 8010ba0:	bf8c      	ite	hi
 8010ba2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010ba6:	2400      	movls	r4, #0
 8010ba8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010bac:	fa01 f000 	lsl.w	r0, r1, r0
 8010bb0:	fa24 f40c 	lsr.w	r4, r4, ip
 8010bb4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010bb8:	ea40 0204 	orr.w	r2, r0, r4
 8010bbc:	e7db      	b.n	8010b76 <__b2d+0x4a>
 8010bbe:	ea44 030c 	orr.w	r3, r4, ip
 8010bc2:	460a      	mov	r2, r1
 8010bc4:	e7d7      	b.n	8010b76 <__b2d+0x4a>
 8010bc6:	bf00      	nop
 8010bc8:	3ff00000 	.word	0x3ff00000

08010bcc <__d2b>:
 8010bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010bd0:	4689      	mov	r9, r1
 8010bd2:	2101      	movs	r1, #1
 8010bd4:	ec57 6b10 	vmov	r6, r7, d0
 8010bd8:	4690      	mov	r8, r2
 8010bda:	f7ff fc0f 	bl	80103fc <_Balloc>
 8010bde:	4604      	mov	r4, r0
 8010be0:	b930      	cbnz	r0, 8010bf0 <__d2b+0x24>
 8010be2:	4602      	mov	r2, r0
 8010be4:	4b25      	ldr	r3, [pc, #148]	; (8010c7c <__d2b+0xb0>)
 8010be6:	4826      	ldr	r0, [pc, #152]	; (8010c80 <__d2b+0xb4>)
 8010be8:	f240 310a 	movw	r1, #778	; 0x30a
 8010bec:	f000 fbae 	bl	801134c <__assert_func>
 8010bf0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010bf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010bf8:	bb35      	cbnz	r5, 8010c48 <__d2b+0x7c>
 8010bfa:	2e00      	cmp	r6, #0
 8010bfc:	9301      	str	r3, [sp, #4]
 8010bfe:	d028      	beq.n	8010c52 <__d2b+0x86>
 8010c00:	4668      	mov	r0, sp
 8010c02:	9600      	str	r6, [sp, #0]
 8010c04:	f7ff fd10 	bl	8010628 <__lo0bits>
 8010c08:	9900      	ldr	r1, [sp, #0]
 8010c0a:	b300      	cbz	r0, 8010c4e <__d2b+0x82>
 8010c0c:	9a01      	ldr	r2, [sp, #4]
 8010c0e:	f1c0 0320 	rsb	r3, r0, #32
 8010c12:	fa02 f303 	lsl.w	r3, r2, r3
 8010c16:	430b      	orrs	r3, r1
 8010c18:	40c2      	lsrs	r2, r0
 8010c1a:	6163      	str	r3, [r4, #20]
 8010c1c:	9201      	str	r2, [sp, #4]
 8010c1e:	9b01      	ldr	r3, [sp, #4]
 8010c20:	61a3      	str	r3, [r4, #24]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	bf14      	ite	ne
 8010c26:	2202      	movne	r2, #2
 8010c28:	2201      	moveq	r2, #1
 8010c2a:	6122      	str	r2, [r4, #16]
 8010c2c:	b1d5      	cbz	r5, 8010c64 <__d2b+0x98>
 8010c2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010c32:	4405      	add	r5, r0
 8010c34:	f8c9 5000 	str.w	r5, [r9]
 8010c38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c3c:	f8c8 0000 	str.w	r0, [r8]
 8010c40:	4620      	mov	r0, r4
 8010c42:	b003      	add	sp, #12
 8010c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c4c:	e7d5      	b.n	8010bfa <__d2b+0x2e>
 8010c4e:	6161      	str	r1, [r4, #20]
 8010c50:	e7e5      	b.n	8010c1e <__d2b+0x52>
 8010c52:	a801      	add	r0, sp, #4
 8010c54:	f7ff fce8 	bl	8010628 <__lo0bits>
 8010c58:	9b01      	ldr	r3, [sp, #4]
 8010c5a:	6163      	str	r3, [r4, #20]
 8010c5c:	2201      	movs	r2, #1
 8010c5e:	6122      	str	r2, [r4, #16]
 8010c60:	3020      	adds	r0, #32
 8010c62:	e7e3      	b.n	8010c2c <__d2b+0x60>
 8010c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c6c:	f8c9 0000 	str.w	r0, [r9]
 8010c70:	6918      	ldr	r0, [r3, #16]
 8010c72:	f7ff fcb9 	bl	80105e8 <__hi0bits>
 8010c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c7a:	e7df      	b.n	8010c3c <__d2b+0x70>
 8010c7c:	0801222b 	.word	0x0801222b
 8010c80:	0801231c 	.word	0x0801231c

08010c84 <__ratio>:
 8010c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c88:	4688      	mov	r8, r1
 8010c8a:	4669      	mov	r1, sp
 8010c8c:	4681      	mov	r9, r0
 8010c8e:	f7ff ff4d 	bl	8010b2c <__b2d>
 8010c92:	a901      	add	r1, sp, #4
 8010c94:	4640      	mov	r0, r8
 8010c96:	ec55 4b10 	vmov	r4, r5, d0
 8010c9a:	f7ff ff47 	bl	8010b2c <__b2d>
 8010c9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010ca2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010ca6:	eba3 0c02 	sub.w	ip, r3, r2
 8010caa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010cae:	1a9b      	subs	r3, r3, r2
 8010cb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010cb4:	ec51 0b10 	vmov	r0, r1, d0
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	bfd6      	itet	le
 8010cbc:	460a      	movle	r2, r1
 8010cbe:	462a      	movgt	r2, r5
 8010cc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010cc4:	468b      	mov	fp, r1
 8010cc6:	462f      	mov	r7, r5
 8010cc8:	bfd4      	ite	le
 8010cca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010cce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010cd2:	4620      	mov	r0, r4
 8010cd4:	ee10 2a10 	vmov	r2, s0
 8010cd8:	465b      	mov	r3, fp
 8010cda:	4639      	mov	r1, r7
 8010cdc:	f7ef fdc6 	bl	800086c <__aeabi_ddiv>
 8010ce0:	ec41 0b10 	vmov	d0, r0, r1
 8010ce4:	b003      	add	sp, #12
 8010ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010cea <__copybits>:
 8010cea:	3901      	subs	r1, #1
 8010cec:	b570      	push	{r4, r5, r6, lr}
 8010cee:	1149      	asrs	r1, r1, #5
 8010cf0:	6914      	ldr	r4, [r2, #16]
 8010cf2:	3101      	adds	r1, #1
 8010cf4:	f102 0314 	add.w	r3, r2, #20
 8010cf8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010cfc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d00:	1f05      	subs	r5, r0, #4
 8010d02:	42a3      	cmp	r3, r4
 8010d04:	d30c      	bcc.n	8010d20 <__copybits+0x36>
 8010d06:	1aa3      	subs	r3, r4, r2
 8010d08:	3b11      	subs	r3, #17
 8010d0a:	f023 0303 	bic.w	r3, r3, #3
 8010d0e:	3211      	adds	r2, #17
 8010d10:	42a2      	cmp	r2, r4
 8010d12:	bf88      	it	hi
 8010d14:	2300      	movhi	r3, #0
 8010d16:	4418      	add	r0, r3
 8010d18:	2300      	movs	r3, #0
 8010d1a:	4288      	cmp	r0, r1
 8010d1c:	d305      	bcc.n	8010d2a <__copybits+0x40>
 8010d1e:	bd70      	pop	{r4, r5, r6, pc}
 8010d20:	f853 6b04 	ldr.w	r6, [r3], #4
 8010d24:	f845 6f04 	str.w	r6, [r5, #4]!
 8010d28:	e7eb      	b.n	8010d02 <__copybits+0x18>
 8010d2a:	f840 3b04 	str.w	r3, [r0], #4
 8010d2e:	e7f4      	b.n	8010d1a <__copybits+0x30>

08010d30 <__any_on>:
 8010d30:	f100 0214 	add.w	r2, r0, #20
 8010d34:	6900      	ldr	r0, [r0, #16]
 8010d36:	114b      	asrs	r3, r1, #5
 8010d38:	4298      	cmp	r0, r3
 8010d3a:	b510      	push	{r4, lr}
 8010d3c:	db11      	blt.n	8010d62 <__any_on+0x32>
 8010d3e:	dd0a      	ble.n	8010d56 <__any_on+0x26>
 8010d40:	f011 011f 	ands.w	r1, r1, #31
 8010d44:	d007      	beq.n	8010d56 <__any_on+0x26>
 8010d46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010d4a:	fa24 f001 	lsr.w	r0, r4, r1
 8010d4e:	fa00 f101 	lsl.w	r1, r0, r1
 8010d52:	428c      	cmp	r4, r1
 8010d54:	d10b      	bne.n	8010d6e <__any_on+0x3e>
 8010d56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d803      	bhi.n	8010d66 <__any_on+0x36>
 8010d5e:	2000      	movs	r0, #0
 8010d60:	bd10      	pop	{r4, pc}
 8010d62:	4603      	mov	r3, r0
 8010d64:	e7f7      	b.n	8010d56 <__any_on+0x26>
 8010d66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d6a:	2900      	cmp	r1, #0
 8010d6c:	d0f5      	beq.n	8010d5a <__any_on+0x2a>
 8010d6e:	2001      	movs	r0, #1
 8010d70:	e7f6      	b.n	8010d60 <__any_on+0x30>

08010d72 <_calloc_r>:
 8010d72:	b513      	push	{r0, r1, r4, lr}
 8010d74:	434a      	muls	r2, r1
 8010d76:	4611      	mov	r1, r2
 8010d78:	9201      	str	r2, [sp, #4]
 8010d7a:	f7fb ff37 	bl	800cbec <_malloc_r>
 8010d7e:	4604      	mov	r4, r0
 8010d80:	b118      	cbz	r0, 8010d8a <_calloc_r+0x18>
 8010d82:	9a01      	ldr	r2, [sp, #4]
 8010d84:	2100      	movs	r1, #0
 8010d86:	f7fb fed9 	bl	800cb3c <memset>
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	b002      	add	sp, #8
 8010d8e:	bd10      	pop	{r4, pc}

08010d90 <__ssputs_r>:
 8010d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d94:	688e      	ldr	r6, [r1, #8]
 8010d96:	429e      	cmp	r6, r3
 8010d98:	4682      	mov	sl, r0
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	4690      	mov	r8, r2
 8010d9e:	461f      	mov	r7, r3
 8010da0:	d838      	bhi.n	8010e14 <__ssputs_r+0x84>
 8010da2:	898a      	ldrh	r2, [r1, #12]
 8010da4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010da8:	d032      	beq.n	8010e10 <__ssputs_r+0x80>
 8010daa:	6825      	ldr	r5, [r4, #0]
 8010dac:	6909      	ldr	r1, [r1, #16]
 8010dae:	eba5 0901 	sub.w	r9, r5, r1
 8010db2:	6965      	ldr	r5, [r4, #20]
 8010db4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010db8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	444b      	add	r3, r9
 8010dc0:	106d      	asrs	r5, r5, #1
 8010dc2:	429d      	cmp	r5, r3
 8010dc4:	bf38      	it	cc
 8010dc6:	461d      	movcc	r5, r3
 8010dc8:	0553      	lsls	r3, r2, #21
 8010dca:	d531      	bpl.n	8010e30 <__ssputs_r+0xa0>
 8010dcc:	4629      	mov	r1, r5
 8010dce:	f7fb ff0d 	bl	800cbec <_malloc_r>
 8010dd2:	4606      	mov	r6, r0
 8010dd4:	b950      	cbnz	r0, 8010dec <__ssputs_r+0x5c>
 8010dd6:	230c      	movs	r3, #12
 8010dd8:	f8ca 3000 	str.w	r3, [sl]
 8010ddc:	89a3      	ldrh	r3, [r4, #12]
 8010dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010de2:	81a3      	strh	r3, [r4, #12]
 8010de4:	f04f 30ff 	mov.w	r0, #4294967295
 8010de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dec:	6921      	ldr	r1, [r4, #16]
 8010dee:	464a      	mov	r2, r9
 8010df0:	f7fb fe96 	bl	800cb20 <memcpy>
 8010df4:	89a3      	ldrh	r3, [r4, #12]
 8010df6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dfe:	81a3      	strh	r3, [r4, #12]
 8010e00:	6126      	str	r6, [r4, #16]
 8010e02:	6165      	str	r5, [r4, #20]
 8010e04:	444e      	add	r6, r9
 8010e06:	eba5 0509 	sub.w	r5, r5, r9
 8010e0a:	6026      	str	r6, [r4, #0]
 8010e0c:	60a5      	str	r5, [r4, #8]
 8010e0e:	463e      	mov	r6, r7
 8010e10:	42be      	cmp	r6, r7
 8010e12:	d900      	bls.n	8010e16 <__ssputs_r+0x86>
 8010e14:	463e      	mov	r6, r7
 8010e16:	4632      	mov	r2, r6
 8010e18:	6820      	ldr	r0, [r4, #0]
 8010e1a:	4641      	mov	r1, r8
 8010e1c:	f000 fae8 	bl	80113f0 <memmove>
 8010e20:	68a3      	ldr	r3, [r4, #8]
 8010e22:	6822      	ldr	r2, [r4, #0]
 8010e24:	1b9b      	subs	r3, r3, r6
 8010e26:	4432      	add	r2, r6
 8010e28:	60a3      	str	r3, [r4, #8]
 8010e2a:	6022      	str	r2, [r4, #0]
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	e7db      	b.n	8010de8 <__ssputs_r+0x58>
 8010e30:	462a      	mov	r2, r5
 8010e32:	f000 faf7 	bl	8011424 <_realloc_r>
 8010e36:	4606      	mov	r6, r0
 8010e38:	2800      	cmp	r0, #0
 8010e3a:	d1e1      	bne.n	8010e00 <__ssputs_r+0x70>
 8010e3c:	6921      	ldr	r1, [r4, #16]
 8010e3e:	4650      	mov	r0, sl
 8010e40:	f7fb fe84 	bl	800cb4c <_free_r>
 8010e44:	e7c7      	b.n	8010dd6 <__ssputs_r+0x46>
	...

08010e48 <_svfiprintf_r>:
 8010e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e4c:	4698      	mov	r8, r3
 8010e4e:	898b      	ldrh	r3, [r1, #12]
 8010e50:	061b      	lsls	r3, r3, #24
 8010e52:	b09d      	sub	sp, #116	; 0x74
 8010e54:	4607      	mov	r7, r0
 8010e56:	460d      	mov	r5, r1
 8010e58:	4614      	mov	r4, r2
 8010e5a:	d50e      	bpl.n	8010e7a <_svfiprintf_r+0x32>
 8010e5c:	690b      	ldr	r3, [r1, #16]
 8010e5e:	b963      	cbnz	r3, 8010e7a <_svfiprintf_r+0x32>
 8010e60:	2140      	movs	r1, #64	; 0x40
 8010e62:	f7fb fec3 	bl	800cbec <_malloc_r>
 8010e66:	6028      	str	r0, [r5, #0]
 8010e68:	6128      	str	r0, [r5, #16]
 8010e6a:	b920      	cbnz	r0, 8010e76 <_svfiprintf_r+0x2e>
 8010e6c:	230c      	movs	r3, #12
 8010e6e:	603b      	str	r3, [r7, #0]
 8010e70:	f04f 30ff 	mov.w	r0, #4294967295
 8010e74:	e0d1      	b.n	801101a <_svfiprintf_r+0x1d2>
 8010e76:	2340      	movs	r3, #64	; 0x40
 8010e78:	616b      	str	r3, [r5, #20]
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e7e:	2320      	movs	r3, #32
 8010e80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e84:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e88:	2330      	movs	r3, #48	; 0x30
 8010e8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011034 <_svfiprintf_r+0x1ec>
 8010e8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e92:	f04f 0901 	mov.w	r9, #1
 8010e96:	4623      	mov	r3, r4
 8010e98:	469a      	mov	sl, r3
 8010e9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e9e:	b10a      	cbz	r2, 8010ea4 <_svfiprintf_r+0x5c>
 8010ea0:	2a25      	cmp	r2, #37	; 0x25
 8010ea2:	d1f9      	bne.n	8010e98 <_svfiprintf_r+0x50>
 8010ea4:	ebba 0b04 	subs.w	fp, sl, r4
 8010ea8:	d00b      	beq.n	8010ec2 <_svfiprintf_r+0x7a>
 8010eaa:	465b      	mov	r3, fp
 8010eac:	4622      	mov	r2, r4
 8010eae:	4629      	mov	r1, r5
 8010eb0:	4638      	mov	r0, r7
 8010eb2:	f7ff ff6d 	bl	8010d90 <__ssputs_r>
 8010eb6:	3001      	adds	r0, #1
 8010eb8:	f000 80aa 	beq.w	8011010 <_svfiprintf_r+0x1c8>
 8010ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ebe:	445a      	add	r2, fp
 8010ec0:	9209      	str	r2, [sp, #36]	; 0x24
 8010ec2:	f89a 3000 	ldrb.w	r3, [sl]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	f000 80a2 	beq.w	8011010 <_svfiprintf_r+0x1c8>
 8010ecc:	2300      	movs	r3, #0
 8010ece:	f04f 32ff 	mov.w	r2, #4294967295
 8010ed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010ed6:	f10a 0a01 	add.w	sl, sl, #1
 8010eda:	9304      	str	r3, [sp, #16]
 8010edc:	9307      	str	r3, [sp, #28]
 8010ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8010ee4:	4654      	mov	r4, sl
 8010ee6:	2205      	movs	r2, #5
 8010ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010eec:	4851      	ldr	r0, [pc, #324]	; (8011034 <_svfiprintf_r+0x1ec>)
 8010eee:	f7ef f987 	bl	8000200 <memchr>
 8010ef2:	9a04      	ldr	r2, [sp, #16]
 8010ef4:	b9d8      	cbnz	r0, 8010f2e <_svfiprintf_r+0xe6>
 8010ef6:	06d0      	lsls	r0, r2, #27
 8010ef8:	bf44      	itt	mi
 8010efa:	2320      	movmi	r3, #32
 8010efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f00:	0711      	lsls	r1, r2, #28
 8010f02:	bf44      	itt	mi
 8010f04:	232b      	movmi	r3, #43	; 0x2b
 8010f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8010f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8010f10:	d015      	beq.n	8010f3e <_svfiprintf_r+0xf6>
 8010f12:	9a07      	ldr	r2, [sp, #28]
 8010f14:	4654      	mov	r4, sl
 8010f16:	2000      	movs	r0, #0
 8010f18:	f04f 0c0a 	mov.w	ip, #10
 8010f1c:	4621      	mov	r1, r4
 8010f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f22:	3b30      	subs	r3, #48	; 0x30
 8010f24:	2b09      	cmp	r3, #9
 8010f26:	d94e      	bls.n	8010fc6 <_svfiprintf_r+0x17e>
 8010f28:	b1b0      	cbz	r0, 8010f58 <_svfiprintf_r+0x110>
 8010f2a:	9207      	str	r2, [sp, #28]
 8010f2c:	e014      	b.n	8010f58 <_svfiprintf_r+0x110>
 8010f2e:	eba0 0308 	sub.w	r3, r0, r8
 8010f32:	fa09 f303 	lsl.w	r3, r9, r3
 8010f36:	4313      	orrs	r3, r2
 8010f38:	9304      	str	r3, [sp, #16]
 8010f3a:	46a2      	mov	sl, r4
 8010f3c:	e7d2      	b.n	8010ee4 <_svfiprintf_r+0x9c>
 8010f3e:	9b03      	ldr	r3, [sp, #12]
 8010f40:	1d19      	adds	r1, r3, #4
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	9103      	str	r1, [sp, #12]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	bfbb      	ittet	lt
 8010f4a:	425b      	neglt	r3, r3
 8010f4c:	f042 0202 	orrlt.w	r2, r2, #2
 8010f50:	9307      	strge	r3, [sp, #28]
 8010f52:	9307      	strlt	r3, [sp, #28]
 8010f54:	bfb8      	it	lt
 8010f56:	9204      	strlt	r2, [sp, #16]
 8010f58:	7823      	ldrb	r3, [r4, #0]
 8010f5a:	2b2e      	cmp	r3, #46	; 0x2e
 8010f5c:	d10c      	bne.n	8010f78 <_svfiprintf_r+0x130>
 8010f5e:	7863      	ldrb	r3, [r4, #1]
 8010f60:	2b2a      	cmp	r3, #42	; 0x2a
 8010f62:	d135      	bne.n	8010fd0 <_svfiprintf_r+0x188>
 8010f64:	9b03      	ldr	r3, [sp, #12]
 8010f66:	1d1a      	adds	r2, r3, #4
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	9203      	str	r2, [sp, #12]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	bfb8      	it	lt
 8010f70:	f04f 33ff 	movlt.w	r3, #4294967295
 8010f74:	3402      	adds	r4, #2
 8010f76:	9305      	str	r3, [sp, #20]
 8010f78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011044 <_svfiprintf_r+0x1fc>
 8010f7c:	7821      	ldrb	r1, [r4, #0]
 8010f7e:	2203      	movs	r2, #3
 8010f80:	4650      	mov	r0, sl
 8010f82:	f7ef f93d 	bl	8000200 <memchr>
 8010f86:	b140      	cbz	r0, 8010f9a <_svfiprintf_r+0x152>
 8010f88:	2340      	movs	r3, #64	; 0x40
 8010f8a:	eba0 000a 	sub.w	r0, r0, sl
 8010f8e:	fa03 f000 	lsl.w	r0, r3, r0
 8010f92:	9b04      	ldr	r3, [sp, #16]
 8010f94:	4303      	orrs	r3, r0
 8010f96:	3401      	adds	r4, #1
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f9e:	4826      	ldr	r0, [pc, #152]	; (8011038 <_svfiprintf_r+0x1f0>)
 8010fa0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fa4:	2206      	movs	r2, #6
 8010fa6:	f7ef f92b 	bl	8000200 <memchr>
 8010faa:	2800      	cmp	r0, #0
 8010fac:	d038      	beq.n	8011020 <_svfiprintf_r+0x1d8>
 8010fae:	4b23      	ldr	r3, [pc, #140]	; (801103c <_svfiprintf_r+0x1f4>)
 8010fb0:	bb1b      	cbnz	r3, 8010ffa <_svfiprintf_r+0x1b2>
 8010fb2:	9b03      	ldr	r3, [sp, #12]
 8010fb4:	3307      	adds	r3, #7
 8010fb6:	f023 0307 	bic.w	r3, r3, #7
 8010fba:	3308      	adds	r3, #8
 8010fbc:	9303      	str	r3, [sp, #12]
 8010fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc0:	4433      	add	r3, r6
 8010fc2:	9309      	str	r3, [sp, #36]	; 0x24
 8010fc4:	e767      	b.n	8010e96 <_svfiprintf_r+0x4e>
 8010fc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8010fca:	460c      	mov	r4, r1
 8010fcc:	2001      	movs	r0, #1
 8010fce:	e7a5      	b.n	8010f1c <_svfiprintf_r+0xd4>
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	3401      	adds	r4, #1
 8010fd4:	9305      	str	r3, [sp, #20]
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	f04f 0c0a 	mov.w	ip, #10
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010fe2:	3a30      	subs	r2, #48	; 0x30
 8010fe4:	2a09      	cmp	r2, #9
 8010fe6:	d903      	bls.n	8010ff0 <_svfiprintf_r+0x1a8>
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d0c5      	beq.n	8010f78 <_svfiprintf_r+0x130>
 8010fec:	9105      	str	r1, [sp, #20]
 8010fee:	e7c3      	b.n	8010f78 <_svfiprintf_r+0x130>
 8010ff0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	2301      	movs	r3, #1
 8010ff8:	e7f0      	b.n	8010fdc <_svfiprintf_r+0x194>
 8010ffa:	ab03      	add	r3, sp, #12
 8010ffc:	9300      	str	r3, [sp, #0]
 8010ffe:	462a      	mov	r2, r5
 8011000:	4b0f      	ldr	r3, [pc, #60]	; (8011040 <_svfiprintf_r+0x1f8>)
 8011002:	a904      	add	r1, sp, #16
 8011004:	4638      	mov	r0, r7
 8011006:	f7fb feeb 	bl	800cde0 <_printf_float>
 801100a:	1c42      	adds	r2, r0, #1
 801100c:	4606      	mov	r6, r0
 801100e:	d1d6      	bne.n	8010fbe <_svfiprintf_r+0x176>
 8011010:	89ab      	ldrh	r3, [r5, #12]
 8011012:	065b      	lsls	r3, r3, #25
 8011014:	f53f af2c 	bmi.w	8010e70 <_svfiprintf_r+0x28>
 8011018:	9809      	ldr	r0, [sp, #36]	; 0x24
 801101a:	b01d      	add	sp, #116	; 0x74
 801101c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011020:	ab03      	add	r3, sp, #12
 8011022:	9300      	str	r3, [sp, #0]
 8011024:	462a      	mov	r2, r5
 8011026:	4b06      	ldr	r3, [pc, #24]	; (8011040 <_svfiprintf_r+0x1f8>)
 8011028:	a904      	add	r1, sp, #16
 801102a:	4638      	mov	r0, r7
 801102c:	f7fc f97c 	bl	800d328 <_printf_i>
 8011030:	e7eb      	b.n	801100a <_svfiprintf_r+0x1c2>
 8011032:	bf00      	nop
 8011034:	0801247c 	.word	0x0801247c
 8011038:	08012486 	.word	0x08012486
 801103c:	0800cde1 	.word	0x0800cde1
 8011040:	08010d91 	.word	0x08010d91
 8011044:	08012482 	.word	0x08012482

08011048 <__sfputc_r>:
 8011048:	6893      	ldr	r3, [r2, #8]
 801104a:	3b01      	subs	r3, #1
 801104c:	2b00      	cmp	r3, #0
 801104e:	b410      	push	{r4}
 8011050:	6093      	str	r3, [r2, #8]
 8011052:	da08      	bge.n	8011066 <__sfputc_r+0x1e>
 8011054:	6994      	ldr	r4, [r2, #24]
 8011056:	42a3      	cmp	r3, r4
 8011058:	db01      	blt.n	801105e <__sfputc_r+0x16>
 801105a:	290a      	cmp	r1, #10
 801105c:	d103      	bne.n	8011066 <__sfputc_r+0x1e>
 801105e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011062:	f7fd bcaf 	b.w	800e9c4 <__swbuf_r>
 8011066:	6813      	ldr	r3, [r2, #0]
 8011068:	1c58      	adds	r0, r3, #1
 801106a:	6010      	str	r0, [r2, #0]
 801106c:	7019      	strb	r1, [r3, #0]
 801106e:	4608      	mov	r0, r1
 8011070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011074:	4770      	bx	lr

08011076 <__sfputs_r>:
 8011076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011078:	4606      	mov	r6, r0
 801107a:	460f      	mov	r7, r1
 801107c:	4614      	mov	r4, r2
 801107e:	18d5      	adds	r5, r2, r3
 8011080:	42ac      	cmp	r4, r5
 8011082:	d101      	bne.n	8011088 <__sfputs_r+0x12>
 8011084:	2000      	movs	r0, #0
 8011086:	e007      	b.n	8011098 <__sfputs_r+0x22>
 8011088:	f814 1b01 	ldrb.w	r1, [r4], #1
 801108c:	463a      	mov	r2, r7
 801108e:	4630      	mov	r0, r6
 8011090:	f7ff ffda 	bl	8011048 <__sfputc_r>
 8011094:	1c43      	adds	r3, r0, #1
 8011096:	d1f3      	bne.n	8011080 <__sfputs_r+0xa>
 8011098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801109c <_vfiprintf_r>:
 801109c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110a0:	460d      	mov	r5, r1
 80110a2:	b09d      	sub	sp, #116	; 0x74
 80110a4:	4614      	mov	r4, r2
 80110a6:	4698      	mov	r8, r3
 80110a8:	4606      	mov	r6, r0
 80110aa:	b118      	cbz	r0, 80110b4 <_vfiprintf_r+0x18>
 80110ac:	6983      	ldr	r3, [r0, #24]
 80110ae:	b90b      	cbnz	r3, 80110b4 <_vfiprintf_r+0x18>
 80110b0:	f7fe fcfc 	bl	800faac <__sinit>
 80110b4:	4b89      	ldr	r3, [pc, #548]	; (80112dc <_vfiprintf_r+0x240>)
 80110b6:	429d      	cmp	r5, r3
 80110b8:	d11b      	bne.n	80110f2 <_vfiprintf_r+0x56>
 80110ba:	6875      	ldr	r5, [r6, #4]
 80110bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110be:	07d9      	lsls	r1, r3, #31
 80110c0:	d405      	bmi.n	80110ce <_vfiprintf_r+0x32>
 80110c2:	89ab      	ldrh	r3, [r5, #12]
 80110c4:	059a      	lsls	r2, r3, #22
 80110c6:	d402      	bmi.n	80110ce <_vfiprintf_r+0x32>
 80110c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80110ca:	f7ff f900 	bl	80102ce <__retarget_lock_acquire_recursive>
 80110ce:	89ab      	ldrh	r3, [r5, #12]
 80110d0:	071b      	lsls	r3, r3, #28
 80110d2:	d501      	bpl.n	80110d8 <_vfiprintf_r+0x3c>
 80110d4:	692b      	ldr	r3, [r5, #16]
 80110d6:	b9eb      	cbnz	r3, 8011114 <_vfiprintf_r+0x78>
 80110d8:	4629      	mov	r1, r5
 80110da:	4630      	mov	r0, r6
 80110dc:	f7fd fcd6 	bl	800ea8c <__swsetup_r>
 80110e0:	b1c0      	cbz	r0, 8011114 <_vfiprintf_r+0x78>
 80110e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80110e4:	07dc      	lsls	r4, r3, #31
 80110e6:	d50e      	bpl.n	8011106 <_vfiprintf_r+0x6a>
 80110e8:	f04f 30ff 	mov.w	r0, #4294967295
 80110ec:	b01d      	add	sp, #116	; 0x74
 80110ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110f2:	4b7b      	ldr	r3, [pc, #492]	; (80112e0 <_vfiprintf_r+0x244>)
 80110f4:	429d      	cmp	r5, r3
 80110f6:	d101      	bne.n	80110fc <_vfiprintf_r+0x60>
 80110f8:	68b5      	ldr	r5, [r6, #8]
 80110fa:	e7df      	b.n	80110bc <_vfiprintf_r+0x20>
 80110fc:	4b79      	ldr	r3, [pc, #484]	; (80112e4 <_vfiprintf_r+0x248>)
 80110fe:	429d      	cmp	r5, r3
 8011100:	bf08      	it	eq
 8011102:	68f5      	ldreq	r5, [r6, #12]
 8011104:	e7da      	b.n	80110bc <_vfiprintf_r+0x20>
 8011106:	89ab      	ldrh	r3, [r5, #12]
 8011108:	0598      	lsls	r0, r3, #22
 801110a:	d4ed      	bmi.n	80110e8 <_vfiprintf_r+0x4c>
 801110c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801110e:	f7ff f8df 	bl	80102d0 <__retarget_lock_release_recursive>
 8011112:	e7e9      	b.n	80110e8 <_vfiprintf_r+0x4c>
 8011114:	2300      	movs	r3, #0
 8011116:	9309      	str	r3, [sp, #36]	; 0x24
 8011118:	2320      	movs	r3, #32
 801111a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801111e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011122:	2330      	movs	r3, #48	; 0x30
 8011124:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80112e8 <_vfiprintf_r+0x24c>
 8011128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801112c:	f04f 0901 	mov.w	r9, #1
 8011130:	4623      	mov	r3, r4
 8011132:	469a      	mov	sl, r3
 8011134:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011138:	b10a      	cbz	r2, 801113e <_vfiprintf_r+0xa2>
 801113a:	2a25      	cmp	r2, #37	; 0x25
 801113c:	d1f9      	bne.n	8011132 <_vfiprintf_r+0x96>
 801113e:	ebba 0b04 	subs.w	fp, sl, r4
 8011142:	d00b      	beq.n	801115c <_vfiprintf_r+0xc0>
 8011144:	465b      	mov	r3, fp
 8011146:	4622      	mov	r2, r4
 8011148:	4629      	mov	r1, r5
 801114a:	4630      	mov	r0, r6
 801114c:	f7ff ff93 	bl	8011076 <__sfputs_r>
 8011150:	3001      	adds	r0, #1
 8011152:	f000 80aa 	beq.w	80112aa <_vfiprintf_r+0x20e>
 8011156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011158:	445a      	add	r2, fp
 801115a:	9209      	str	r2, [sp, #36]	; 0x24
 801115c:	f89a 3000 	ldrb.w	r3, [sl]
 8011160:	2b00      	cmp	r3, #0
 8011162:	f000 80a2 	beq.w	80112aa <_vfiprintf_r+0x20e>
 8011166:	2300      	movs	r3, #0
 8011168:	f04f 32ff 	mov.w	r2, #4294967295
 801116c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011170:	f10a 0a01 	add.w	sl, sl, #1
 8011174:	9304      	str	r3, [sp, #16]
 8011176:	9307      	str	r3, [sp, #28]
 8011178:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801117c:	931a      	str	r3, [sp, #104]	; 0x68
 801117e:	4654      	mov	r4, sl
 8011180:	2205      	movs	r2, #5
 8011182:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011186:	4858      	ldr	r0, [pc, #352]	; (80112e8 <_vfiprintf_r+0x24c>)
 8011188:	f7ef f83a 	bl	8000200 <memchr>
 801118c:	9a04      	ldr	r2, [sp, #16]
 801118e:	b9d8      	cbnz	r0, 80111c8 <_vfiprintf_r+0x12c>
 8011190:	06d1      	lsls	r1, r2, #27
 8011192:	bf44      	itt	mi
 8011194:	2320      	movmi	r3, #32
 8011196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801119a:	0713      	lsls	r3, r2, #28
 801119c:	bf44      	itt	mi
 801119e:	232b      	movmi	r3, #43	; 0x2b
 80111a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111a4:	f89a 3000 	ldrb.w	r3, [sl]
 80111a8:	2b2a      	cmp	r3, #42	; 0x2a
 80111aa:	d015      	beq.n	80111d8 <_vfiprintf_r+0x13c>
 80111ac:	9a07      	ldr	r2, [sp, #28]
 80111ae:	4654      	mov	r4, sl
 80111b0:	2000      	movs	r0, #0
 80111b2:	f04f 0c0a 	mov.w	ip, #10
 80111b6:	4621      	mov	r1, r4
 80111b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111bc:	3b30      	subs	r3, #48	; 0x30
 80111be:	2b09      	cmp	r3, #9
 80111c0:	d94e      	bls.n	8011260 <_vfiprintf_r+0x1c4>
 80111c2:	b1b0      	cbz	r0, 80111f2 <_vfiprintf_r+0x156>
 80111c4:	9207      	str	r2, [sp, #28]
 80111c6:	e014      	b.n	80111f2 <_vfiprintf_r+0x156>
 80111c8:	eba0 0308 	sub.w	r3, r0, r8
 80111cc:	fa09 f303 	lsl.w	r3, r9, r3
 80111d0:	4313      	orrs	r3, r2
 80111d2:	9304      	str	r3, [sp, #16]
 80111d4:	46a2      	mov	sl, r4
 80111d6:	e7d2      	b.n	801117e <_vfiprintf_r+0xe2>
 80111d8:	9b03      	ldr	r3, [sp, #12]
 80111da:	1d19      	adds	r1, r3, #4
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	9103      	str	r1, [sp, #12]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	bfbb      	ittet	lt
 80111e4:	425b      	neglt	r3, r3
 80111e6:	f042 0202 	orrlt.w	r2, r2, #2
 80111ea:	9307      	strge	r3, [sp, #28]
 80111ec:	9307      	strlt	r3, [sp, #28]
 80111ee:	bfb8      	it	lt
 80111f0:	9204      	strlt	r2, [sp, #16]
 80111f2:	7823      	ldrb	r3, [r4, #0]
 80111f4:	2b2e      	cmp	r3, #46	; 0x2e
 80111f6:	d10c      	bne.n	8011212 <_vfiprintf_r+0x176>
 80111f8:	7863      	ldrb	r3, [r4, #1]
 80111fa:	2b2a      	cmp	r3, #42	; 0x2a
 80111fc:	d135      	bne.n	801126a <_vfiprintf_r+0x1ce>
 80111fe:	9b03      	ldr	r3, [sp, #12]
 8011200:	1d1a      	adds	r2, r3, #4
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	9203      	str	r2, [sp, #12]
 8011206:	2b00      	cmp	r3, #0
 8011208:	bfb8      	it	lt
 801120a:	f04f 33ff 	movlt.w	r3, #4294967295
 801120e:	3402      	adds	r4, #2
 8011210:	9305      	str	r3, [sp, #20]
 8011212:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80112f8 <_vfiprintf_r+0x25c>
 8011216:	7821      	ldrb	r1, [r4, #0]
 8011218:	2203      	movs	r2, #3
 801121a:	4650      	mov	r0, sl
 801121c:	f7ee fff0 	bl	8000200 <memchr>
 8011220:	b140      	cbz	r0, 8011234 <_vfiprintf_r+0x198>
 8011222:	2340      	movs	r3, #64	; 0x40
 8011224:	eba0 000a 	sub.w	r0, r0, sl
 8011228:	fa03 f000 	lsl.w	r0, r3, r0
 801122c:	9b04      	ldr	r3, [sp, #16]
 801122e:	4303      	orrs	r3, r0
 8011230:	3401      	adds	r4, #1
 8011232:	9304      	str	r3, [sp, #16]
 8011234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011238:	482c      	ldr	r0, [pc, #176]	; (80112ec <_vfiprintf_r+0x250>)
 801123a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801123e:	2206      	movs	r2, #6
 8011240:	f7ee ffde 	bl	8000200 <memchr>
 8011244:	2800      	cmp	r0, #0
 8011246:	d03f      	beq.n	80112c8 <_vfiprintf_r+0x22c>
 8011248:	4b29      	ldr	r3, [pc, #164]	; (80112f0 <_vfiprintf_r+0x254>)
 801124a:	bb1b      	cbnz	r3, 8011294 <_vfiprintf_r+0x1f8>
 801124c:	9b03      	ldr	r3, [sp, #12]
 801124e:	3307      	adds	r3, #7
 8011250:	f023 0307 	bic.w	r3, r3, #7
 8011254:	3308      	adds	r3, #8
 8011256:	9303      	str	r3, [sp, #12]
 8011258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801125a:	443b      	add	r3, r7
 801125c:	9309      	str	r3, [sp, #36]	; 0x24
 801125e:	e767      	b.n	8011130 <_vfiprintf_r+0x94>
 8011260:	fb0c 3202 	mla	r2, ip, r2, r3
 8011264:	460c      	mov	r4, r1
 8011266:	2001      	movs	r0, #1
 8011268:	e7a5      	b.n	80111b6 <_vfiprintf_r+0x11a>
 801126a:	2300      	movs	r3, #0
 801126c:	3401      	adds	r4, #1
 801126e:	9305      	str	r3, [sp, #20]
 8011270:	4619      	mov	r1, r3
 8011272:	f04f 0c0a 	mov.w	ip, #10
 8011276:	4620      	mov	r0, r4
 8011278:	f810 2b01 	ldrb.w	r2, [r0], #1
 801127c:	3a30      	subs	r2, #48	; 0x30
 801127e:	2a09      	cmp	r2, #9
 8011280:	d903      	bls.n	801128a <_vfiprintf_r+0x1ee>
 8011282:	2b00      	cmp	r3, #0
 8011284:	d0c5      	beq.n	8011212 <_vfiprintf_r+0x176>
 8011286:	9105      	str	r1, [sp, #20]
 8011288:	e7c3      	b.n	8011212 <_vfiprintf_r+0x176>
 801128a:	fb0c 2101 	mla	r1, ip, r1, r2
 801128e:	4604      	mov	r4, r0
 8011290:	2301      	movs	r3, #1
 8011292:	e7f0      	b.n	8011276 <_vfiprintf_r+0x1da>
 8011294:	ab03      	add	r3, sp, #12
 8011296:	9300      	str	r3, [sp, #0]
 8011298:	462a      	mov	r2, r5
 801129a:	4b16      	ldr	r3, [pc, #88]	; (80112f4 <_vfiprintf_r+0x258>)
 801129c:	a904      	add	r1, sp, #16
 801129e:	4630      	mov	r0, r6
 80112a0:	f7fb fd9e 	bl	800cde0 <_printf_float>
 80112a4:	4607      	mov	r7, r0
 80112a6:	1c78      	adds	r0, r7, #1
 80112a8:	d1d6      	bne.n	8011258 <_vfiprintf_r+0x1bc>
 80112aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112ac:	07d9      	lsls	r1, r3, #31
 80112ae:	d405      	bmi.n	80112bc <_vfiprintf_r+0x220>
 80112b0:	89ab      	ldrh	r3, [r5, #12]
 80112b2:	059a      	lsls	r2, r3, #22
 80112b4:	d402      	bmi.n	80112bc <_vfiprintf_r+0x220>
 80112b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112b8:	f7ff f80a 	bl	80102d0 <__retarget_lock_release_recursive>
 80112bc:	89ab      	ldrh	r3, [r5, #12]
 80112be:	065b      	lsls	r3, r3, #25
 80112c0:	f53f af12 	bmi.w	80110e8 <_vfiprintf_r+0x4c>
 80112c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112c6:	e711      	b.n	80110ec <_vfiprintf_r+0x50>
 80112c8:	ab03      	add	r3, sp, #12
 80112ca:	9300      	str	r3, [sp, #0]
 80112cc:	462a      	mov	r2, r5
 80112ce:	4b09      	ldr	r3, [pc, #36]	; (80112f4 <_vfiprintf_r+0x258>)
 80112d0:	a904      	add	r1, sp, #16
 80112d2:	4630      	mov	r0, r6
 80112d4:	f7fc f828 	bl	800d328 <_printf_i>
 80112d8:	e7e4      	b.n	80112a4 <_vfiprintf_r+0x208>
 80112da:	bf00      	nop
 80112dc:	0801225c 	.word	0x0801225c
 80112e0:	0801227c 	.word	0x0801227c
 80112e4:	0801223c 	.word	0x0801223c
 80112e8:	0801247c 	.word	0x0801247c
 80112ec:	08012486 	.word	0x08012486
 80112f0:	0800cde1 	.word	0x0800cde1
 80112f4:	08011077 	.word	0x08011077
 80112f8:	08012482 	.word	0x08012482

080112fc <_read_r>:
 80112fc:	b538      	push	{r3, r4, r5, lr}
 80112fe:	4d07      	ldr	r5, [pc, #28]	; (801131c <_read_r+0x20>)
 8011300:	4604      	mov	r4, r0
 8011302:	4608      	mov	r0, r1
 8011304:	4611      	mov	r1, r2
 8011306:	2200      	movs	r2, #0
 8011308:	602a      	str	r2, [r5, #0]
 801130a:	461a      	mov	r2, r3
 801130c:	f7f2 fb70 	bl	80039f0 <_read>
 8011310:	1c43      	adds	r3, r0, #1
 8011312:	d102      	bne.n	801131a <_read_r+0x1e>
 8011314:	682b      	ldr	r3, [r5, #0]
 8011316:	b103      	cbz	r3, 801131a <_read_r+0x1e>
 8011318:	6023      	str	r3, [r4, #0]
 801131a:	bd38      	pop	{r3, r4, r5, pc}
 801131c:	20001a8c 	.word	0x20001a8c

08011320 <nan>:
 8011320:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011328 <nan+0x8>
 8011324:	4770      	bx	lr
 8011326:	bf00      	nop
 8011328:	00000000 	.word	0x00000000
 801132c:	7ff80000 	.word	0x7ff80000

08011330 <__ascii_wctomb>:
 8011330:	b149      	cbz	r1, 8011346 <__ascii_wctomb+0x16>
 8011332:	2aff      	cmp	r2, #255	; 0xff
 8011334:	bf85      	ittet	hi
 8011336:	238a      	movhi	r3, #138	; 0x8a
 8011338:	6003      	strhi	r3, [r0, #0]
 801133a:	700a      	strbls	r2, [r1, #0]
 801133c:	f04f 30ff 	movhi.w	r0, #4294967295
 8011340:	bf98      	it	ls
 8011342:	2001      	movls	r0, #1
 8011344:	4770      	bx	lr
 8011346:	4608      	mov	r0, r1
 8011348:	4770      	bx	lr
	...

0801134c <__assert_func>:
 801134c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801134e:	4614      	mov	r4, r2
 8011350:	461a      	mov	r2, r3
 8011352:	4b09      	ldr	r3, [pc, #36]	; (8011378 <__assert_func+0x2c>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	4605      	mov	r5, r0
 8011358:	68d8      	ldr	r0, [r3, #12]
 801135a:	b14c      	cbz	r4, 8011370 <__assert_func+0x24>
 801135c:	4b07      	ldr	r3, [pc, #28]	; (801137c <__assert_func+0x30>)
 801135e:	9100      	str	r1, [sp, #0]
 8011360:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011364:	4906      	ldr	r1, [pc, #24]	; (8011380 <__assert_func+0x34>)
 8011366:	462b      	mov	r3, r5
 8011368:	f000 f80e 	bl	8011388 <fiprintf>
 801136c:	f000 f880 	bl	8011470 <abort>
 8011370:	4b04      	ldr	r3, [pc, #16]	; (8011384 <__assert_func+0x38>)
 8011372:	461c      	mov	r4, r3
 8011374:	e7f3      	b.n	801135e <__assert_func+0x12>
 8011376:	bf00      	nop
 8011378:	20000024 	.word	0x20000024
 801137c:	0801248d 	.word	0x0801248d
 8011380:	0801249a 	.word	0x0801249a
 8011384:	080124c8 	.word	0x080124c8

08011388 <fiprintf>:
 8011388:	b40e      	push	{r1, r2, r3}
 801138a:	b503      	push	{r0, r1, lr}
 801138c:	4601      	mov	r1, r0
 801138e:	ab03      	add	r3, sp, #12
 8011390:	4805      	ldr	r0, [pc, #20]	; (80113a8 <fiprintf+0x20>)
 8011392:	f853 2b04 	ldr.w	r2, [r3], #4
 8011396:	6800      	ldr	r0, [r0, #0]
 8011398:	9301      	str	r3, [sp, #4]
 801139a:	f7ff fe7f 	bl	801109c <_vfiprintf_r>
 801139e:	b002      	add	sp, #8
 80113a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80113a4:	b003      	add	sp, #12
 80113a6:	4770      	bx	lr
 80113a8:	20000024 	.word	0x20000024

080113ac <_fstat_r>:
 80113ac:	b538      	push	{r3, r4, r5, lr}
 80113ae:	4d07      	ldr	r5, [pc, #28]	; (80113cc <_fstat_r+0x20>)
 80113b0:	2300      	movs	r3, #0
 80113b2:	4604      	mov	r4, r0
 80113b4:	4608      	mov	r0, r1
 80113b6:	4611      	mov	r1, r2
 80113b8:	602b      	str	r3, [r5, #0]
 80113ba:	f7f2 fb5e 	bl	8003a7a <_fstat>
 80113be:	1c43      	adds	r3, r0, #1
 80113c0:	d102      	bne.n	80113c8 <_fstat_r+0x1c>
 80113c2:	682b      	ldr	r3, [r5, #0]
 80113c4:	b103      	cbz	r3, 80113c8 <_fstat_r+0x1c>
 80113c6:	6023      	str	r3, [r4, #0]
 80113c8:	bd38      	pop	{r3, r4, r5, pc}
 80113ca:	bf00      	nop
 80113cc:	20001a8c 	.word	0x20001a8c

080113d0 <_isatty_r>:
 80113d0:	b538      	push	{r3, r4, r5, lr}
 80113d2:	4d06      	ldr	r5, [pc, #24]	; (80113ec <_isatty_r+0x1c>)
 80113d4:	2300      	movs	r3, #0
 80113d6:	4604      	mov	r4, r0
 80113d8:	4608      	mov	r0, r1
 80113da:	602b      	str	r3, [r5, #0]
 80113dc:	f7f2 fb5d 	bl	8003a9a <_isatty>
 80113e0:	1c43      	adds	r3, r0, #1
 80113e2:	d102      	bne.n	80113ea <_isatty_r+0x1a>
 80113e4:	682b      	ldr	r3, [r5, #0]
 80113e6:	b103      	cbz	r3, 80113ea <_isatty_r+0x1a>
 80113e8:	6023      	str	r3, [r4, #0]
 80113ea:	bd38      	pop	{r3, r4, r5, pc}
 80113ec:	20001a8c 	.word	0x20001a8c

080113f0 <memmove>:
 80113f0:	4288      	cmp	r0, r1
 80113f2:	b510      	push	{r4, lr}
 80113f4:	eb01 0402 	add.w	r4, r1, r2
 80113f8:	d902      	bls.n	8011400 <memmove+0x10>
 80113fa:	4284      	cmp	r4, r0
 80113fc:	4623      	mov	r3, r4
 80113fe:	d807      	bhi.n	8011410 <memmove+0x20>
 8011400:	1e43      	subs	r3, r0, #1
 8011402:	42a1      	cmp	r1, r4
 8011404:	d008      	beq.n	8011418 <memmove+0x28>
 8011406:	f811 2b01 	ldrb.w	r2, [r1], #1
 801140a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801140e:	e7f8      	b.n	8011402 <memmove+0x12>
 8011410:	4402      	add	r2, r0
 8011412:	4601      	mov	r1, r0
 8011414:	428a      	cmp	r2, r1
 8011416:	d100      	bne.n	801141a <memmove+0x2a>
 8011418:	bd10      	pop	{r4, pc}
 801141a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801141e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011422:	e7f7      	b.n	8011414 <memmove+0x24>

08011424 <_realloc_r>:
 8011424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011426:	4607      	mov	r7, r0
 8011428:	4614      	mov	r4, r2
 801142a:	460e      	mov	r6, r1
 801142c:	b921      	cbnz	r1, 8011438 <_realloc_r+0x14>
 801142e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011432:	4611      	mov	r1, r2
 8011434:	f7fb bbda 	b.w	800cbec <_malloc_r>
 8011438:	b922      	cbnz	r2, 8011444 <_realloc_r+0x20>
 801143a:	f7fb fb87 	bl	800cb4c <_free_r>
 801143e:	4625      	mov	r5, r4
 8011440:	4628      	mov	r0, r5
 8011442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011444:	f000 f81b 	bl	801147e <_malloc_usable_size_r>
 8011448:	42a0      	cmp	r0, r4
 801144a:	d20f      	bcs.n	801146c <_realloc_r+0x48>
 801144c:	4621      	mov	r1, r4
 801144e:	4638      	mov	r0, r7
 8011450:	f7fb fbcc 	bl	800cbec <_malloc_r>
 8011454:	4605      	mov	r5, r0
 8011456:	2800      	cmp	r0, #0
 8011458:	d0f2      	beq.n	8011440 <_realloc_r+0x1c>
 801145a:	4631      	mov	r1, r6
 801145c:	4622      	mov	r2, r4
 801145e:	f7fb fb5f 	bl	800cb20 <memcpy>
 8011462:	4631      	mov	r1, r6
 8011464:	4638      	mov	r0, r7
 8011466:	f7fb fb71 	bl	800cb4c <_free_r>
 801146a:	e7e9      	b.n	8011440 <_realloc_r+0x1c>
 801146c:	4635      	mov	r5, r6
 801146e:	e7e7      	b.n	8011440 <_realloc_r+0x1c>

08011470 <abort>:
 8011470:	b508      	push	{r3, lr}
 8011472:	2006      	movs	r0, #6
 8011474:	f000 f834 	bl	80114e0 <raise>
 8011478:	2001      	movs	r0, #1
 801147a:	f7f2 faaf 	bl	80039dc <_exit>

0801147e <_malloc_usable_size_r>:
 801147e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011482:	1f18      	subs	r0, r3, #4
 8011484:	2b00      	cmp	r3, #0
 8011486:	bfbc      	itt	lt
 8011488:	580b      	ldrlt	r3, [r1, r0]
 801148a:	18c0      	addlt	r0, r0, r3
 801148c:	4770      	bx	lr

0801148e <_raise_r>:
 801148e:	291f      	cmp	r1, #31
 8011490:	b538      	push	{r3, r4, r5, lr}
 8011492:	4604      	mov	r4, r0
 8011494:	460d      	mov	r5, r1
 8011496:	d904      	bls.n	80114a2 <_raise_r+0x14>
 8011498:	2316      	movs	r3, #22
 801149a:	6003      	str	r3, [r0, #0]
 801149c:	f04f 30ff 	mov.w	r0, #4294967295
 80114a0:	bd38      	pop	{r3, r4, r5, pc}
 80114a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80114a4:	b112      	cbz	r2, 80114ac <_raise_r+0x1e>
 80114a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80114aa:	b94b      	cbnz	r3, 80114c0 <_raise_r+0x32>
 80114ac:	4620      	mov	r0, r4
 80114ae:	f000 f831 	bl	8011514 <_getpid_r>
 80114b2:	462a      	mov	r2, r5
 80114b4:	4601      	mov	r1, r0
 80114b6:	4620      	mov	r0, r4
 80114b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80114bc:	f000 b818 	b.w	80114f0 <_kill_r>
 80114c0:	2b01      	cmp	r3, #1
 80114c2:	d00a      	beq.n	80114da <_raise_r+0x4c>
 80114c4:	1c59      	adds	r1, r3, #1
 80114c6:	d103      	bne.n	80114d0 <_raise_r+0x42>
 80114c8:	2316      	movs	r3, #22
 80114ca:	6003      	str	r3, [r0, #0]
 80114cc:	2001      	movs	r0, #1
 80114ce:	e7e7      	b.n	80114a0 <_raise_r+0x12>
 80114d0:	2400      	movs	r4, #0
 80114d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80114d6:	4628      	mov	r0, r5
 80114d8:	4798      	blx	r3
 80114da:	2000      	movs	r0, #0
 80114dc:	e7e0      	b.n	80114a0 <_raise_r+0x12>
	...

080114e0 <raise>:
 80114e0:	4b02      	ldr	r3, [pc, #8]	; (80114ec <raise+0xc>)
 80114e2:	4601      	mov	r1, r0
 80114e4:	6818      	ldr	r0, [r3, #0]
 80114e6:	f7ff bfd2 	b.w	801148e <_raise_r>
 80114ea:	bf00      	nop
 80114ec:	20000024 	.word	0x20000024

080114f0 <_kill_r>:
 80114f0:	b538      	push	{r3, r4, r5, lr}
 80114f2:	4d07      	ldr	r5, [pc, #28]	; (8011510 <_kill_r+0x20>)
 80114f4:	2300      	movs	r3, #0
 80114f6:	4604      	mov	r4, r0
 80114f8:	4608      	mov	r0, r1
 80114fa:	4611      	mov	r1, r2
 80114fc:	602b      	str	r3, [r5, #0]
 80114fe:	f7f2 fa5d 	bl	80039bc <_kill>
 8011502:	1c43      	adds	r3, r0, #1
 8011504:	d102      	bne.n	801150c <_kill_r+0x1c>
 8011506:	682b      	ldr	r3, [r5, #0]
 8011508:	b103      	cbz	r3, 801150c <_kill_r+0x1c>
 801150a:	6023      	str	r3, [r4, #0]
 801150c:	bd38      	pop	{r3, r4, r5, pc}
 801150e:	bf00      	nop
 8011510:	20001a8c 	.word	0x20001a8c

08011514 <_getpid_r>:
 8011514:	f7f2 ba4a 	b.w	80039ac <_getpid>

08011518 <_init>:
 8011518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151a:	bf00      	nop
 801151c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801151e:	bc08      	pop	{r3}
 8011520:	469e      	mov	lr, r3
 8011522:	4770      	bx	lr

08011524 <_fini>:
 8011524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011526:	bf00      	nop
 8011528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801152a:	bc08      	pop	{r3}
 801152c:	469e      	mov	lr, r3
 801152e:	4770      	bx	lr
