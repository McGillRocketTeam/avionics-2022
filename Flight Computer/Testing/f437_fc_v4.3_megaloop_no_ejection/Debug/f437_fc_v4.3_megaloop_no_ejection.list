
f437_fc_v4.3_megaloop_no_ejection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001467c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000938  08014830  08014830  00024830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015168  08015168  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08015168  08015168  00025168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015170  08015170  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015170  08015170  00025170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015174  08015174  00025174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08015178  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00001848  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001a48  20001a48  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003b47b  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c87  00000000  00000000  0006b6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002488  00000000  00000000  00071338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002228  00000000  00000000  000737c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c774  00000000  00000000  000759e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000291b3  00000000  00000000  000a215c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4c91  00000000  00000000  000cb30f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bffa0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b2a8  00000000  00000000  001bfff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014814 	.word	0x08014814

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	08014814 	.word	0x08014814

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <Max31855_Read_Temp>:
uint32_t sign=0;									  	// Sign bit
uint8_t DATARX[4];                                    	// Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};         	// Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); 	// Low State for SPI Communication
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001038:	482c      	ldr	r0, [pc, #176]	; (80010ec <Max31855_Read_Temp+0xc0>)
 800103a:	f005 fa8d 	bl	8006558 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);         	// DATA Transfer
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	2204      	movs	r2, #4
 8001044:	492a      	ldr	r1, [pc, #168]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001046:	482b      	ldr	r0, [pc, #172]	; (80010f4 <Max31855_Read_Temp+0xc8>)
 8001048:	f007 fcca 	bl	80089e0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET);   	// High State for SPI Communication
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001052:	4826      	ldr	r0, [pc, #152]	; (80010ec <Max31855_Read_Temp+0xc0>)
 8001054:	f005 fa80 	bl	8006558 <HAL_GPIO_WritePin>

	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 800105a:	78db      	ldrb	r3, [r3, #3]
 800105c:	461a      	mov	r2, r3
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	431a      	orrs	r2, r3
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	431a      	orrs	r2, r3
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	061b      	lsls	r3, r3, #24
 8001074:	4313      	orrs	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

	Error = v & 0x07;								  	// Error Detection
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <Max31855_Read_Temp+0xcc>)
 8001084:	701a      	strb	r2, [r3, #0]

	if (v & 0x7) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <Max31855_Read_Temp+0x68>
		// uh oh, a serious problem!
		return -99999;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <Max31855_Read_Temp+0xd0>)
 8001092:	e024      	b.n	80010de <Max31855_Read_Temp+0xb2>
	}

	if (v & 0x80000000) {
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	da07      	bge.n	80010aa <Max31855_Read_Temp+0x7e>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		v = 0xFFFFC000 | ((v >> 18) & 0x00003FFF);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	0c9b      	lsrs	r3, r3, #18
 800109e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80010a2:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e002      	b.n	80010b0 <Max31855_Read_Temp+0x84>
	} else {
		// Positive value, just drop the lower 18 bits.
		v >>= 18;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	60fb      	str	r3, [r7, #12]
	}

	double centigrade = v;
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff fa47 	bl	8000544 <__aeabi_ui2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	e9c7 2300 	strd	r2, r3, [r7]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <Max31855_Read_Temp+0xd4>)
 80010c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c8:	f7ff fab6 	bl	8000638 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	e9c7 2300 	strd	r2, r3, [r7]
	return centigrade;
 80010d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010d8:	f7ff fda6 	bl	8000c28 <__aeabi_d2f>
 80010dc:	4603      	mov	r3, r0
 80010de:	ee07 3a90 	vmov	s15, r3
}
 80010e2:	eeb0 0a67 	vmov.f32	s0, s15
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40021000 	.word	0x40021000
 80010f0:	200004fc 	.word	0x200004fc
 80010f4:	20000500 	.word	0x20000500
 80010f8:	2000021c 	.word	0x2000021c
 80010fc:	c7c34f80 	.word	0xc7c34f80
 8001100:	3fd00000 	.word	0x3fd00000

08001104 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_ADC1_Init+0x98>)
 8001118:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_ADC1_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_ADC1_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_ADC1_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_ADC1_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_ADC1_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_ADC1_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_ADC1_Init+0x98>)
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <MX_ADC1_Init+0xa0>)
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_ADC1_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_ADC1_Init+0x98>)
 8001150:	2201      	movs	r2, #1
 8001152:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_ADC1_Init+0x98>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_ADC1_Init+0x98>)
 800115e:	2201      	movs	r2, #1
 8001160:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001162:	480e      	ldr	r0, [pc, #56]	; (800119c <MX_ADC1_Init+0x98>)
 8001164:	f003 ff94 	bl	8005090 <HAL_ADC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800116e:	f002 fc47 	bl	8003a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001172:	2306      	movs	r3, #6
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800117a:	2307      	movs	r3, #7
 800117c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_ADC1_Init+0x98>)
 8001184:	f004 f952 	bl	800542c <HAL_ADC_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800118e:	f002 fc37 	bl	8003a00 <Error_Handler>
  }

}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000558 	.word	0x20000558
 80011a0:	40012000 	.word	0x40012000
 80011a4:	0f000001 	.word	0x0f000001

080011a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_ADC_MspInit+0x7c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d127      	bne.n	800121a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_ADC_MspInit+0x84>)
 8001216:	f004 ffdb 	bl	80061d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40012000 	.word	0x40012000
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_DMA_Init+0x78>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <MX_DMA_Init+0x78>)
 8001240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_DMA_Init+0x78>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_DMA_Init+0x78>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_DMA_Init+0x78>)
 800125c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_DMA_Init+0x78>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 15, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	210f      	movs	r1, #15
 8001272:	200c      	movs	r0, #12
 8001274:	f004 fbe3 	bl	8005a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001278:	200c      	movs	r0, #12
 800127a:	f004 fbfc 	bl	8005a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	200e      	movs	r0, #14
 8001284:	f004 fbdb 	bl	8005a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001288:	200e      	movs	r0, #14
 800128a:	f004 fbf4 	bl	8005a76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2039      	movs	r0, #57	; 0x39
 8001294:	f004 fbd3 	bl	8005a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001298:	2039      	movs	r0, #57	; 0x39
 800129a:	f004 fbec 	bl	8005a76 <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	4bb4      	ldr	r3, [pc, #720]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4ab3      	ldr	r2, [pc, #716]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4bb1      	ldr	r3, [pc, #708]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	623b      	str	r3, [r7, #32]
 80012dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	4bad      	ldr	r3, [pc, #692]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4aac      	ldr	r2, [pc, #688]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4baa      	ldr	r3, [pc, #680]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4ba6      	ldr	r3, [pc, #664]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4aa5      	ldr	r2, [pc, #660]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001304:	f043 0320 	orr.w	r3, r3, #32
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4ba3      	ldr	r3, [pc, #652]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b9f      	ldr	r3, [pc, #636]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a9e      	ldr	r2, [pc, #632]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b9c      	ldr	r3, [pc, #624]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b98      	ldr	r3, [pc, #608]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a97      	ldr	r2, [pc, #604]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b95      	ldr	r3, [pc, #596]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b91      	ldr	r3, [pc, #580]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a90      	ldr	r2, [pc, #576]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b8e      	ldr	r3, [pc, #568]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b8a      	ldr	r3, [pc, #552]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a89      	ldr	r2, [pc, #548]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b87      	ldr	r3, [pc, #540]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b83      	ldr	r3, [pc, #524]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a82      	ldr	r2, [pc, #520]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b80      	ldr	r3, [pc, #512]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f248 4184 	movw	r1, #33924	; 0x8484
 80013a8:	487c      	ldr	r0, [pc, #496]	; (800159c <MX_GPIO_Init+0x2f0>)
 80013aa:	f005 f8d5 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b4:	487a      	ldr	r0, [pc, #488]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 80013b6:	f005 f8cf 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80013c0:	4878      	ldr	r0, [pc, #480]	; (80015a4 <MX_GPIO_Init+0x2f8>)
 80013c2:	f005 f8c9 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	4877      	ldr	r0, [pc, #476]	; (80015a8 <MX_GPIO_Init+0x2fc>)
 80013cc:	f005 f8c4 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013d6:	4872      	ldr	r0, [pc, #456]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 80013d8:	f005 f8be 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80013dc:	2200      	movs	r2, #0
 80013de:	f645 2126 	movw	r1, #23078	; 0x5a26
 80013e2:	4872      	ldr	r0, [pc, #456]	; (80015ac <MX_GPIO_Init+0x300>)
 80013e4:	f005 f8b8 	bl	8006558 <HAL_GPIO_WritePin>
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_NSS_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80013ee:	4870      	ldr	r0, [pc, #448]	; (80015b0 <MX_GPIO_Init+0x304>)
 80013f0:	f005 f8b2 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 41f9 	mov.w	r1, #31872	; 0x7c80
 80013fa:	486e      	ldr	r0, [pc, #440]	; (80015b4 <MX_GPIO_Init+0x308>)
 80013fc:	f005 f8ac 	bl	8006558 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2170      	movs	r1, #112	; 0x70
 8001404:	486b      	ldr	r0, [pc, #428]	; (80015b4 <MX_GPIO_Init+0x308>)
 8001406:	f005 f8a7 	bl	8006558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin;
 800140a:	f248 4384 	movw	r3, #33924	; 0x8484
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	485e      	ldr	r0, [pc, #376]	; (800159c <MX_GPIO_Init+0x2f0>)
 8001424:	f004 fed4 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_SW4_Pin;
 8001428:	2310      	movs	r3, #16
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142c:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <MX_GPIO_Init+0x30c>)
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI_SW4_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	4858      	ldr	r0, [pc, #352]	; (800159c <MX_GPIO_Init+0x2f0>)
 800143c:	f004 fec8 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4851      	ldr	r0, [pc, #324]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 800145a:	f004 feb9 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800145e:	2301      	movs	r3, #1
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001462:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <MX_GPIO_Init+0x30c>)
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	484c      	ldr	r0, [pc, #304]	; (80015a4 <MX_GPIO_Init+0x2f8>)
 8001472:	f004 fead 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin;
 8001476:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	4845      	ldr	r0, [pc, #276]	; (80015a4 <MX_GPIO_Init+0x2f8>)
 8001490:	f004 fe9e 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 8001494:	2308      	movs	r3, #8
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	483f      	ldr	r0, [pc, #252]	; (80015a8 <MX_GPIO_Init+0x2fc>)
 80014ac:	f004 fe90 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80014b0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4837      	ldr	r0, [pc, #220]	; (80015a4 <MX_GPIO_Init+0x2f8>)
 80014c6:	f004 fe83 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80014ca:	2302      	movs	r3, #2
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4834      	ldr	r0, [pc, #208]	; (80015b0 <MX_GPIO_Init+0x304>)
 80014de:	f004 fe77 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 80014e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	482a      	ldr	r0, [pc, #168]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 80014f8:	f004 fe6a 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 80014fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	4822      	ldr	r0, [pc, #136]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 8001516:	f004 fe5b 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|Rcov_Cont_Main_Pin
 800151a:	f242 4319 	movw	r3, #9241	; 0x2419
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Cont_Drogue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	481f      	ldr	r0, [pc, #124]	; (80015ac <MX_GPIO_Init+0x300>)
 8001530:	f004 fe4e 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 8001534:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4817      	ldr	r0, [pc, #92]	; (80015ac <MX_GPIO_Init+0x300>)
 800154e:	f004 fe3f 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Payload_EN_Pin|IN_XTend_Continuity_Pin;
 8001552:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_GPIO_Init+0x2f0>)
 8001568:	f004 fe32 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001576:	2301      	movs	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <MX_GPIO_Init+0x304>)
 8001586:	f004 fe23 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800158a:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	e011      	b.n	80015bc <MX_GPIO_Init+0x310>
 8001598:	40023800 	.word	0x40023800
 800159c:	40021000 	.word	0x40021000
 80015a0:	40021400 	.word	0x40021400
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40020400 	.word	0x40020400
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	10110000 	.word	0x10110000
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4826      	ldr	r0, [pc, #152]	; (8001664 <MX_GPIO_Init+0x3b8>)
 80015ca:	f004 fe01 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80015ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <MX_GPIO_Init+0x3b8>)
 80015e4:	f004 fdf4 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 80015e8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <MX_GPIO_Init+0x3bc>)
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	481b      	ldr	r0, [pc, #108]	; (800166c <MX_GPIO_Init+0x3c0>)
 80015fe:	f004 fde7 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin;
 8001602:	2370      	movs	r3, #112	; 0x70
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160a:	2301      	movs	r3, #1
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160e:	2302      	movs	r3, #2
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_GPIO_Init+0x3b8>)
 800161a:	f004 fdd9 	bl	80061d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800161e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <MX_GPIO_Init+0x3c4>)
 8001638:	f004 fdca 	bl	80061d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2006      	movs	r0, #6
 8001642:	f004 f9fc 	bl	8005a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001646:	2006      	movs	r0, #6
 8001648:	f004 fa15 	bl	8005a76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	200a      	movs	r0, #10
 8001652:	f004 f9f4 	bl	8005a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001656:	200a      	movs	r0, #10
 8001658:	f004 fa0d 	bl	8005a76 <HAL_NVIC_EnableIRQ>

}
 800165c:	bf00      	nop
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020c00 	.word	0x40020c00
 8001668:	10110000 	.word	0x10110000
 800166c:	40021800 	.word	0x40021800
 8001670:	40020400 	.word	0x40020400

08001674 <GPS_ParseBuffer>:
 * 		2. use memcpy to extract string between '$' and '\n' found
 * 		3. parse
 * 				a. if valid gps coordinates are found, stop
 * 				b. else repeat with rest of buffer
 */
char* GPS_ParseBuffer(double *latitude, double *longitude, float *time) {
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b0bc      	sub	sp, #240	; 0xf0
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	// debugging: print full buffer first
	HAL_UART_Transmit(&huart8, rx_buf, strlen(rx_buf), HAL_MAX_DELAY);
	#endif

	// limits on the DMA buffer
	uint16_t buf_end = GPS_RX_DMA_BUF_LEN + 1; // +1 for null terminator
 8001680:	23b0      	movs	r3, #176	; 0xb0
 8001682:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
	uint8_t valid_string_found = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

	// for extracting substrings to be parsed
	char current_substring[200]; // max size of valid NMEA string is 75 for the validate function
	memset(current_substring, 0, 200);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	22c8      	movs	r2, #200	; 0xc8
 8001692:	2100      	movs	r1, #0
 8001694:	4618      	mov	r0, r3
 8001696:	f00d f867 	bl	800e768 <memset>

	// need to know where we are in the buffer to be able to loop automatically
	char *head_of_parse_buffer = gps_rx_buf;
 800169a:	4b44      	ldr	r3, [pc, #272]	; (80017ac <GPS_ParseBuffer+0x138>)
 800169c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	char *dollar;
	char *newline;

	while (head_of_parse_buffer != NULL) {
 80016a0:	e057      	b.n	8001752 <GPS_ParseBuffer+0xde>

		// get index of '$' and '\n'. note: gps_rx_buf MUST be null terminated!
		dollar = strchr(head_of_parse_buffer, '$');
 80016a2:	2124      	movs	r1, #36	; 0x24
 80016a4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80016a8:	f00e f831 	bl	800f70e <strchr>
 80016ac:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
		newline = strchr(dollar, '\n'); // start after $ sign
 80016b0:	210a      	movs	r1, #10
 80016b2:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80016b6:	f00e f82a 	bl	800f70e <strchr>
 80016ba:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

		if (dollar != NULL && newline != NULL) {
 80016be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d049      	beq.n	800175a <GPS_ParseBuffer+0xe6>
 80016c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d045      	beq.n	800175a <GPS_ParseBuffer+0xe6>
			// copy substring into string
			memcpy(current_substring, dollar, (newline - dollar));
 80016ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80016d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00d f832 	bl	800e74c <memcpy>
		else {
			break;
		}

		// parse
		if (GPS_validate((char*) current_substring)) {
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f865 	bl	80017bc <GPS_validate>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01b      	beq.n	8001730 <GPS_ParseBuffer+0xbc>
			if (GPS_parse((char*) current_substring)) {
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f8bf 	bl	8001880 <GPS_parse>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <GPS_ParseBuffer+0xbc>
				*latitude = GPS.dec_latitude;
 8001708:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <GPS_ParseBuffer+0x13c>)
 800170a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800170e:	68f9      	ldr	r1, [r7, #12]
 8001710:	e9c1 2300 	strd	r2, r3, [r1]
				*longitude = GPS.dec_longitude;
 8001714:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <GPS_ParseBuffer+0x13c>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	68b9      	ldr	r1, [r7, #8]
 800171c:	e9c1 2300 	strd	r2, r3, [r1]
				*time = GPS.utc_time;
 8001720:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <GPS_ParseBuffer+0x13c>)
 8001722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	601a      	str	r2, [r3, #0]
				valid_string_found = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

				break; // got valid coordinates, stop parsing
 800172e:	e014      	b.n	800175a <GPS_ParseBuffer+0xe6>
			}
		}

		memset(current_substring, 0, (newline - dollar) + 10);
 8001730:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	330a      	adds	r3, #10
 800173c:	461a      	mov	r2, r3
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f00d f80f 	bl	800e768 <memset>
		head_of_parse_buffer = newline; // move head of buffer to newline character found
 800174a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800174e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	while (head_of_parse_buffer != NULL) {
 8001752:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1a3      	bne.n	80016a2 <GPS_ParseBuffer+0x2e>
	}


	memset(gps_rx_buf, 0, buf_end);
 800175a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 800175e:	461a      	mov	r2, r3
 8001760:	2100      	movs	r1, #0
 8001762:	4812      	ldr	r0, [pc, #72]	; (80017ac <GPS_ParseBuffer+0x138>)
 8001764:	f00d f800 	bl	800e768 <memset>

	// return so we can save the parsed string to sd card without including
	// sd card in this file
	if (valid_string_found) {
 8001768:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00a      	beq.n	8001786 <GPS_ParseBuffer+0x112>
		valid_string_found = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		strcpy(gps_parsed, current_substring);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <GPS_ParseBuffer+0x140>)
 800177e:	f00d ffd3 	bl	800f728 <strcpy>
		return gps_parsed;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <GPS_ParseBuffer+0x140>)
 8001784:	e00d      	b.n	80017a2 <GPS_ParseBuffer+0x12e>
	}
	else {
		strcpy(gps_parsed, "\nno valid GPS parsed\n");
 8001786:	4a0b      	ldr	r2, [pc, #44]	; (80017b4 <GPS_ParseBuffer+0x140>)
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <GPS_ParseBuffer+0x144>)
 800178a:	4615      	mov	r5, r2
 800178c:	461c      	mov	r4, r3
 800178e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001790:	6028      	str	r0, [r5, #0]
 8001792:	6069      	str	r1, [r5, #4]
 8001794:	60aa      	str	r2, [r5, #8]
 8001796:	60eb      	str	r3, [r5, #12]
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	6128      	str	r0, [r5, #16]
 800179c:	88a3      	ldrh	r3, [r4, #4]
 800179e:	82ab      	strh	r3, [r5, #20]
		return ((char *)"\nno valid GPS parsed\n");
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <GPS_ParseBuffer+0x144>)
	}
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	37f0      	adds	r7, #240	; 0xf0
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bdb0      	pop	{r4, r5, r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000a58 	.word	0x20000a58
 80017b0:	200005a0 	.word	0x200005a0
 80017b4:	200008f4 	.word	0x200008f4
 80017b8:	08014830 	.word	0x08014830

080017bc <GPS_validate>:

int GPS_validate(char *nmeastr){
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$'){
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b24      	cmp	r3, #36	; 0x24
 80017d6:	d103      	bne.n	80017e0 <GPS_validate+0x24>
        i++;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3301      	adds	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
    } else {
        return 0;
    }

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80017de:	e00c      	b.n	80017fa <GPS_validate+0x3e>
        return 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e047      	b.n	8001874 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4053      	eors	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        i++;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d008      	beq.n	8001818 <GPS_validate+0x5c>
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b2a      	cmp	r3, #42	; 0x2a
 8001810:	d002      	beq.n	8001818 <GPS_validate+0x5c>
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2b4a      	cmp	r3, #74	; 0x4a
 8001816:	dde5      	ble.n	80017e4 <GPS_validate+0x28>
    }

    if(i >= 75){
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	2b4a      	cmp	r3, #74	; 0x4a
 800181c:	dd01      	ble.n	8001822 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 800181e:	2300      	movs	r3, #0
 8001820:	e028      	b.n	8001874 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b2a      	cmp	r3, #42	; 0x2a
 800182c:	d119      	bne.n	8001862 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3302      	adds	r3, #2
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800184a:	f107 0308 	add.w	r3, r7, #8
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	490a      	ldr	r1, [pc, #40]	; (800187c <GPS_validate+0xc0>)
 8001852:	4618      	mov	r0, r3
 8001854:	f00d feca 	bl	800f5ec <siprintf>
    return((checkcalcstr[0] == check[0])
 8001858:	7a3a      	ldrb	r2, [r7, #8]
 800185a:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800185c:	429a      	cmp	r2, r3
 800185e:	d108      	bne.n	8001872 <GPS_validate+0xb6>
 8001860:	e001      	b.n	8001866 <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001862:	2300      	movs	r3, #0
 8001864:	e006      	b.n	8001874 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001866:	7a7a      	ldrb	r2, [r7, #9]
 8001868:	7b7b      	ldrb	r3, [r7, #13]
 800186a:	429a      	cmp	r2, r3
 800186c:	d101      	bne.n	8001872 <GPS_validate+0xb6>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <GPS_validate+0xb8>
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	08014848 	.word	0x08014848

08001880 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	; 0x28
 8001884:	af08      	add	r7, sp, #32
 8001886:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 8001888:	2206      	movs	r2, #6
 800188a:	497d      	ldr	r1, [pc, #500]	; (8001a80 <GPS_parse+0x200>)
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f00d ff53 	bl	800f738 <strncmp>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d143      	bne.n	8001920 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%lf,%c,%lf,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001898:	4b7a      	ldr	r3, [pc, #488]	; (8001a84 <GPS_parse+0x204>)
 800189a:	9307      	str	r3, [sp, #28]
 800189c:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <GPS_parse+0x208>)
 800189e:	9306      	str	r3, [sp, #24]
 80018a0:	4b7a      	ldr	r3, [pc, #488]	; (8001a8c <GPS_parse+0x20c>)
 80018a2:	9305      	str	r3, [sp, #20]
 80018a4:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <GPS_parse+0x210>)
 80018a6:	9304      	str	r3, [sp, #16]
 80018a8:	4b7a      	ldr	r3, [pc, #488]	; (8001a94 <GPS_parse+0x214>)
 80018aa:	9303      	str	r3, [sp, #12]
 80018ac:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <GPS_parse+0x218>)
 80018ae:	9302      	str	r3, [sp, #8]
 80018b0:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <GPS_parse+0x21c>)
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	4b7a      	ldr	r3, [pc, #488]	; (8001aa0 <GPS_parse+0x220>)
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	4b7a      	ldr	r3, [pc, #488]	; (8001aa4 <GPS_parse+0x224>)
 80018ba:	4a7b      	ldr	r2, [pc, #492]	; (8001aa8 <GPS_parse+0x228>)
 80018bc:	497b      	ldr	r1, [pc, #492]	; (8001aac <GPS_parse+0x22c>)
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f00d feb4 	bl	800f62c <siscanf>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f340 80d4 	ble.w	8001a74 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80018cc:	4b78      	ldr	r3, [pc, #480]	; (8001ab0 <GPS_parse+0x230>)
 80018ce:	ed93 7b08 	vldr	d7, [r3, #32]
 80018d2:	4b77      	ldr	r3, [pc, #476]	; (8001ab0 <GPS_parse+0x230>)
 80018d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80018d8:	4618      	mov	r0, r3
 80018da:	eeb0 0a47 	vmov.f32	s0, s14
 80018de:	eef0 0a67 	vmov.f32	s1, s15
 80018e2:	f000 f909 	bl	8001af8 <GPS_nmea_to_dec>
 80018e6:	eeb0 7a40 	vmov.f32	s14, s0
 80018ea:	eef0 7a60 	vmov.f32	s15, s1
 80018ee:	4b70      	ldr	r3, [pc, #448]	; (8001ab0 <GPS_parse+0x230>)
 80018f0:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80018f4:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <GPS_parse+0x230>)
 80018f6:	ed93 7b06 	vldr	d7, [r3, #24]
 80018fa:	4b6d      	ldr	r3, [pc, #436]	; (8001ab0 <GPS_parse+0x230>)
 80018fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001900:	4618      	mov	r0, r3
 8001902:	eeb0 0a47 	vmov.f32	s0, s14
 8001906:	eef0 0a67 	vmov.f32	s1, s15
 800190a:	f000 f8f5 	bl	8001af8 <GPS_nmea_to_dec>
 800190e:	eeb0 7a40 	vmov.f32	s14, s0
 8001912:	eef0 7a60 	vmov.f32	s15, s1
 8001916:	4b66      	ldr	r3, [pc, #408]	; (8001ab0 <GPS_parse+0x230>)
 8001918:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 800191c:	2301      	movs	r3, #1
 800191e:	e0aa      	b.n	8001a76 <GPS_parse+0x1f6>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8001920:	2206      	movs	r2, #6
 8001922:	4964      	ldr	r1, [pc, #400]	; (8001ab4 <GPS_parse+0x234>)
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f00d ff07 	bl	800f738 <strncmp>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d13f      	bne.n	80019b0 <GPS_parse+0x130>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%lf,%c,%lf,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8001930:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <GPS_parse+0x238>)
 8001932:	9305      	str	r3, [sp, #20]
 8001934:	4b61      	ldr	r3, [pc, #388]	; (8001abc <GPS_parse+0x23c>)
 8001936:	9304      	str	r3, [sp, #16]
 8001938:	4b61      	ldr	r3, [pc, #388]	; (8001ac0 <GPS_parse+0x240>)
 800193a:	9303      	str	r3, [sp, #12]
 800193c:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <GPS_parse+0x218>)
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	4b56      	ldr	r3, [pc, #344]	; (8001a9c <GPS_parse+0x21c>)
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <GPS_parse+0x220>)
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	4b56      	ldr	r3, [pc, #344]	; (8001aa4 <GPS_parse+0x224>)
 800194a:	4a57      	ldr	r2, [pc, #348]	; (8001aa8 <GPS_parse+0x228>)
 800194c:	495d      	ldr	r1, [pc, #372]	; (8001ac4 <GPS_parse+0x244>)
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f00d fe6c 	bl	800f62c <siscanf>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	f340 808c 	ble.w	8001a74 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 800195c:	4b54      	ldr	r3, [pc, #336]	; (8001ab0 <GPS_parse+0x230>)
 800195e:	ed93 7b08 	vldr	d7, [r3, #32]
 8001962:	4b53      	ldr	r3, [pc, #332]	; (8001ab0 <GPS_parse+0x230>)
 8001964:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001968:	4618      	mov	r0, r3
 800196a:	eeb0 0a47 	vmov.f32	s0, s14
 800196e:	eef0 0a67 	vmov.f32	s1, s15
 8001972:	f000 f8c1 	bl	8001af8 <GPS_nmea_to_dec>
 8001976:	eeb0 7a40 	vmov.f32	s14, s0
 800197a:	eef0 7a60 	vmov.f32	s15, s1
 800197e:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <GPS_parse+0x230>)
 8001980:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001984:	4b4a      	ldr	r3, [pc, #296]	; (8001ab0 <GPS_parse+0x230>)
 8001986:	ed93 7b06 	vldr	d7, [r3, #24]
 800198a:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <GPS_parse+0x230>)
 800198c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001990:	4618      	mov	r0, r3
 8001992:	eeb0 0a47 	vmov.f32	s0, s14
 8001996:	eef0 0a67 	vmov.f32	s1, s15
 800199a:	f000 f8ad 	bl	8001af8 <GPS_nmea_to_dec>
 800199e:	eeb0 7a40 	vmov.f32	s14, s0
 80019a2:	eef0 7a60 	vmov.f32	s15, s1
 80019a6:	4b42      	ldr	r3, [pc, #264]	; (8001ab0 <GPS_parse+0x230>)
 80019a8:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e062      	b.n	8001a76 <GPS_parse+0x1f6>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80019b0:	2206      	movs	r2, #6
 80019b2:	4945      	ldr	r1, [pc, #276]	; (8001ac8 <GPS_parse+0x248>)
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f00d febf 	bl	800f738 <strncmp>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d13a      	bne.n	8001a36 <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNGLL,%lf,%c,%lf,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80019c0:	4b42      	ldr	r3, [pc, #264]	; (8001acc <GPS_parse+0x24c>)
 80019c2:	9303      	str	r3, [sp, #12]
 80019c4:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <GPS_parse+0x228>)
 80019c6:	9302      	str	r3, [sp, #8]
 80019c8:	4b33      	ldr	r3, [pc, #204]	; (8001a98 <GPS_parse+0x218>)
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <GPS_parse+0x21c>)
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <GPS_parse+0x220>)
 80019d2:	4a34      	ldr	r2, [pc, #208]	; (8001aa4 <GPS_parse+0x224>)
 80019d4:	493e      	ldr	r1, [pc, #248]	; (8001ad0 <GPS_parse+0x250>)
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f00d fe28 	bl	800f62c <siscanf>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dd48      	ble.n	8001a74 <GPS_parse+0x1f4>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <GPS_parse+0x230>)
 80019e4:	ed93 7b08 	vldr	d7, [r3, #32]
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <GPS_parse+0x230>)
 80019ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80019ee:	4618      	mov	r0, r3
 80019f0:	eeb0 0a47 	vmov.f32	s0, s14
 80019f4:	eef0 0a67 	vmov.f32	s1, s15
 80019f8:	f000 f87e 	bl	8001af8 <GPS_nmea_to_dec>
 80019fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001a00:	eef0 7a60 	vmov.f32	s15, s1
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <GPS_parse+0x230>)
 8001a06:	ed83 7b02 	vstr	d7, [r3, #8]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <GPS_parse+0x230>)
 8001a0c:	ed93 7b06 	vldr	d7, [r3, #24]
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <GPS_parse+0x230>)
 8001a12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a16:	4618      	mov	r0, r3
 8001a18:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1c:	eef0 0a67 	vmov.f32	s1, s15
 8001a20:	f000 f86a 	bl	8001af8 <GPS_nmea_to_dec>
 8001a24:	eeb0 7a40 	vmov.f32	s14, s0
 8001a28:	eef0 7a60 	vmov.f32	s15, s1
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <GPS_parse+0x230>)
 8001a2e:	ed83 7b00 	vstr	d7, [r3]
        	return 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e01f      	b.n	8001a76 <GPS_parse+0x1f6>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8001a36:	2206      	movs	r2, #6
 8001a38:	4926      	ldr	r1, [pc, #152]	; (8001ad4 <GPS_parse+0x254>)
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f00d fe7c 	bl	800f738 <strncmp>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d116      	bne.n	8001a74 <GPS_parse+0x1f4>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001a46:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <GPS_parse+0x258>)
 8001a48:	9305      	str	r3, [sp, #20]
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <GPS_parse+0x25c>)
 8001a4c:	9304      	str	r3, [sp, #16]
 8001a4e:	4b24      	ldr	r3, [pc, #144]	; (8001ae0 <GPS_parse+0x260>)
 8001a50:	9303      	str	r3, [sp, #12]
 8001a52:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <GPS_parse+0x240>)
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <GPS_parse+0x264>)
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <GPS_parse+0x268>)
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <GPS_parse+0x26c>)
 8001a60:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <GPS_parse+0x270>)
 8001a62:	4924      	ldr	r1, [pc, #144]	; (8001af4 <GPS_parse+0x274>)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f00d fde1 	bl	800f62c <siscanf>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	dd01      	ble.n	8001a74 <GPS_parse+0x1f4>
            return 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	e000      	b.n	8001a76 <GPS_parse+0x1f6>
    }
    return 0;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08014850 	.word	0x08014850
 8001a84:	200005e0 	.word	0x200005e0
 8001a88:	200005dc 	.word	0x200005dc
 8001a8c:	200005d8 	.word	0x200005d8
 8001a90:	200005d4 	.word	0x200005d4
 8001a94:	200005d0 	.word	0x200005d0
 8001a98:	200005cd 	.word	0x200005cd
 8001a9c:	200005b8 	.word	0x200005b8
 8001aa0:	200005cc 	.word	0x200005cc
 8001aa4:	200005c0 	.word	0x200005c0
 8001aa8:	200005c8 	.word	0x200005c8
 8001aac:	08014858 	.word	0x08014858
 8001ab0:	200005a0 	.word	0x200005a0
 8001ab4:	08014880 	.word	0x08014880
 8001ab8:	200005ec 	.word	0x200005ec
 8001abc:	200005e8 	.word	0x200005e8
 8001ac0:	200005e4 	.word	0x200005e4
 8001ac4:	08014888 	.word	0x08014888
 8001ac8:	080148ac 	.word	0x080148ac
 8001acc:	200005f0 	.word	0x200005f0
 8001ad0:	080148b4 	.word	0x080148b4
 8001ad4:	080148d0 	.word	0x080148d0
 8001ad8:	20000608 	.word	0x20000608
 8001adc:	20000604 	.word	0x20000604
 8001ae0:	20000601 	.word	0x20000601
 8001ae4:	20000600 	.word	0x20000600
 8001ae8:	200005fc 	.word	0x200005fc
 8001aec:	200005f8 	.word	0x200005f8
 8001af0:	200005f4 	.word	0x200005f4
 8001af4:	080148d8 	.word	0x080148d8

08001af8 <GPS_nmea_to_dec>:

double GPS_nmea_to_dec(double deg_coord, char nsew) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08c      	sub	sp, #48	; 0x30
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
    int degree = (int)(deg_coord/100);
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	4b26      	ldr	r3, [pc, #152]	; (8001ba4 <GPS_nmea_to_dec+0xac>)
 8001b0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b10:	f7fe febc 	bl	800088c <__aeabi_ddiv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f83c 	bl	8000b98 <__aeabi_d2iz>
 8001b20:	4603      	mov	r3, r0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    double minutes = deg_coord - degree*100;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	2264      	movs	r2, #100	; 0x64
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fd19 	bl	8000564 <__aeabi_i2d>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b3a:	f7fe fbc5 	bl	80002c8 <__aeabi_dsub>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double dec_deg = minutes / 60;
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <GPS_nmea_to_dec+0xb0>)
 8001b4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b50:	f7fe fe9c 	bl	800088c <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double decimal = degree + dec_deg;
 8001b5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b5e:	f7fe fd01 	bl	8000564 <__aeabi_i2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b6a:	f7fe fbaf 	bl	80002cc <__adddf3>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b53      	cmp	r3, #83	; 0x53
 8001b7a:	d002      	beq.n	8001b82 <GPS_nmea_to_dec+0x8a>
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	2b57      	cmp	r3, #87	; 0x57
 8001b80:	d105      	bne.n	8001b8e <GPS_nmea_to_dec+0x96>
        decimal *= -1;
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return decimal;
 8001b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b92:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b96:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9a:	eef0 0a67 	vmov.f32	s1, s15
 8001b9e:	3730      	adds	r7, #48	; 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40590000 	.word	0x40590000
 8001ba8:	404e0000 	.word	0x404e0000

08001bac <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001bb0:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	; (8001c24 <MX_I2C2_Init+0x78>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	; (8001c28 <MX_I2C2_Init+0x7c>)
 8001bba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001be2:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001be8:	480d      	ldr	r0, [pc, #52]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bea:	f004 fd01 	bl	80065f0 <HAL_I2C_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001bf4:	f001 ff04 	bl	8003a00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001bfc:	f005 fcb7 	bl	800756e <HAL_I2CEx_ConfigAnalogFilter>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001c06:	f001 fefb 	bl	8003a00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <MX_I2C2_Init+0x74>)
 8001c0e:	f005 fcea 	bl	80075e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c18:	f001 fef2 	bl	8003a00 <Error_Handler>
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000664 	.word	0x20000664
 8001c24:	40005800 	.word	0x40005800
 8001c28:	000186a0 	.word	0x000186a0

08001c2c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c32:	4a1c      	ldr	r2, [pc, #112]	; (8001ca4 <MX_I2C3_Init+0x78>)
 8001c34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c38:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <MX_I2C3_Init+0x7c>)
 8001c3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c6a:	f004 fcc1 	bl	80065f0 <HAL_I2C_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c74:	f001 fec4 	bl	8003a00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c7c:	f005 fc77 	bl	800756e <HAL_I2CEx_ConfigAnalogFilter>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c86:	f001 febb 	bl	8003a00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <MX_I2C3_Init+0x74>)
 8001c8e:	f005 fcaa 	bl	80075e6 <HAL_I2CEx_ConfigDigitalFilter>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c98:	f001 feb2 	bl	8003a00 <Error_Handler>
  }

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000610 	.word	0x20000610
 8001ca4:	40005c00 	.word	0x40005c00
 8001ca8:	000186a0 	.word	0x000186a0

08001cac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a42      	ldr	r2, [pc, #264]	; (8001dd4 <HAL_I2C_MspInit+0x128>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d12d      	bne.n	8001d2a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a40      	ldr	r2, [pc, #256]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cf0:	2312      	movs	r3, #18
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 031c 	add.w	r3, r7, #28
 8001d04:	4619      	mov	r1, r3
 8001d06:	4835      	ldr	r0, [pc, #212]	; (8001ddc <HAL_I2C_MspInit+0x130>)
 8001d08:	f004 fa62 	bl	80061d0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a30      	ldr	r2, [pc, #192]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d28:	e050      	b.n	8001dcc <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2c      	ldr	r2, [pc, #176]	; (8001de0 <HAL_I2C_MspInit+0x134>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d14b      	bne.n	8001dcc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	4a26      	ldr	r2, [pc, #152]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001d3e:	f043 0304 	orr.w	r3, r3, #4
 8001d42:	6313      	str	r3, [r2, #48]	; 0x30
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4a1f      	ldr	r2, [pc, #124]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d72:	2312      	movs	r3, #18
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d82:	f107 031c 	add.w	r3, r7, #28
 8001d86:	4619      	mov	r1, r3
 8001d88:	4816      	ldr	r0, [pc, #88]	; (8001de4 <HAL_I2C_MspInit+0x138>)
 8001d8a:	f004 fa21 	bl	80061d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d94:	2312      	movs	r3, #18
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001da0:	2304      	movs	r3, #4
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	480f      	ldr	r0, [pc, #60]	; (8001de8 <HAL_I2C_MspInit+0x13c>)
 8001dac:	f004 fa10 	bl	80061d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_I2C_MspInit+0x12c>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]
}
 8001dcc:	bf00      	nop
 8001dce:	3730      	adds	r7, #48	; 0x30
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40005800 	.word	0x40005800
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40005c00 	.word	0x40005c00
 8001de4:	40020800 	.word	0x40020800
 8001de8:	40020000 	.word	0x40020000

08001dec <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001df4:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <lsm6dsl_init+0xc8>)
 8001df6:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <lsm6dsl_init+0xcc>)
 8001dfa:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <lsm6dsl_init+0xd0>)
 8001dfe:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001e00:	200a      	movs	r0, #10
 8001e02:	f000 f9e5 	bl	80021d0 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001e06:	f107 030c 	add.w	r3, r7, #12
 8001e0a:	492d      	ldr	r1, [pc, #180]	; (8001ec0 <lsm6dsl_init+0xd4>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f000 fd07 	bl	8002820 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001e12:	4b2b      	ldr	r3, [pc, #172]	; (8001ec0 <lsm6dsl_init+0xd4>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b6a      	cmp	r3, #106	; 0x6a
 8001e18:	d005      	beq.n	8001e26 <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	4829      	ldr	r0, [pc, #164]	; (8001ec4 <lsm6dsl_init+0xd8>)
 8001e20:	f004 fb9a 	bl	8006558 <HAL_GPIO_WritePin>
		__BKPT();
 8001e24:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fd08 	bl	8002842 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001e32:	f107 030c 	add.w	r3, r7, #12
 8001e36:	4924      	ldr	r1, [pc, #144]	; (8001ec8 <lsm6dsl_init+0xdc>)
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fd28 	bl	800288e <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 8001e3e:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <lsm6dsl_init+0xdc>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f5      	bne.n	8001e32 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e46:	f107 030c 	add.w	r3, r7, #12
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fbf9 	bl	8002644 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001e52:	f107 030c 	add.w	r3, r7, #12
 8001e56:	2104      	movs	r1, #4
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fb81 	bl	8002560 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	2104      	movs	r1, #4
 8001e64:	4618      	mov	r0, r3
 8001e66:	f000 fbc7 	bl	80025f8 <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	2103      	movs	r1, #3
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 fb4f 	bl	8002514 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	2106      	movs	r1, #6
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fb95 	bl	80025ac <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	2111      	movs	r1, #17
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 fd19 	bl	80028c0 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	21a8      	movs	r1, #168	; 0xa8
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 fd4a 	bl	800292e <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	461c      	mov	r4, r3
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ea6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	371c      	adds	r7, #28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd90      	pop	{r4, r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	080020e9 	.word	0x080020e9
 8001eb8:	08002123 	.word	0x08002123
 8001ebc:	20000610 	.word	0x20000610
 8001ec0:	2000022e 	.word	0x2000022e
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	2000022f 	.word	0x2000022f

08001ecc <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	1d3c      	adds	r4, r7, #4
 8001ed4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ed8:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001eda:	f107 0217 	add.w	r2, r7, #23
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f000 fbd4 	bl	8002690 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d02d      	beq.n	8001f4a <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001eee:	2206      	movs	r2, #6
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4818      	ldr	r0, [pc, #96]	; (8001f54 <get_acceleration+0x88>)
 8001ef4:	f00c fc38 	bl	800e768 <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	4916      	ldr	r1, [pc, #88]	; (8001f54 <get_acceleration+0x88>)
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fc44 	bl	800278a <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001f02:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <get_acceleration+0x88>)
 8001f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f000 fad3 	bl	80024b4 <lsm6dsl_from_fs8g_to_mg>
 8001f0e:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <get_acceleration+0x88>)
 8001f1a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f22:	4610      	mov	r0, r2
 8001f24:	f000 fac6 	bl	80024b4 <lsm6dsl_from_fs8g_to_mg>
 8001f28:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001f2c:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <get_acceleration+0x88>)
 8001f32:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	f000 fab9 	bl	80024b4 <lsm6dsl_from_fs8g_to_mg>
 8001f42:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001f46:	edc4 7a00 	vstr	s15, [r4]
	}

}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd90      	pop	{r4, r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000220 	.word	0x20000220

08001f58 <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	1d3c      	adds	r4, r7, #4
 8001f60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f64:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001f66:	f107 0217 	add.w	r2, r7, #23
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 fba7 	bl	80026c2 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d02d      	beq.n	8001fd6 <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001f7a:	2206      	movs	r2, #6
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4818      	ldr	r0, [pc, #96]	; (8001fe0 <get_angvelocity+0x88>)
 8001f80:	f00c fbf2 	bl	800e768 <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	4916      	ldr	r1, [pc, #88]	; (8001fe0 <get_angvelocity+0x88>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fbb3 	bl	80026f4 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <get_angvelocity+0x88>)
 8001f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 faa5 	bl	80024e4 <lsm6dsl_from_fs2000dps_to_mdps>
 8001f9a:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <get_angvelocity+0x88>)
 8001fa6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f000 fa98 	bl	80024e4 <lsm6dsl_from_fs2000dps_to_mdps>
 8001fb4:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 8001fb8:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <get_angvelocity+0x88>)
 8001fbe:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001fc8:	4610      	mov	r0, r2
 8001fca:	f000 fa8b 	bl	80024e4 <lsm6dsl_from_fs2000dps_to_mdps>
 8001fce:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8001fd2:	edc4 7a00 	vstr	s15, [r4]
	}
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000228 	.word	0x20000228

08001fe4 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <lps22hh_init+0x94>)
 8001fee:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8001ff0:	4b22      	ldr	r3, [pc, #136]	; (800207c <lps22hh_init+0x98>)
 8001ff2:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <lps22hh_init+0x9c>)
 8001ff6:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001ff8:	200a      	movs	r0, #10
 8001ffa:	f000 f8e9 	bl	80021d0 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <lps22hh_init+0xa0>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	491e      	ldr	r1, [pc, #120]	; (8002084 <lps22hh_init+0xa0>)
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f9d1 	bl	80023b2 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <lps22hh_init+0xa0>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2bb3      	cmp	r3, #179	; 0xb3
 8002016:	d007      	beq.n	8002028 <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002018:	2201      	movs	r2, #1
 800201a:	2104      	movs	r1, #4
 800201c:	481a      	ldr	r0, [pc, #104]	; (8002088 <lps22hh_init+0xa4>)
 800201e:	f004 fa9b 	bl	8006558 <HAL_GPIO_WritePin>
		__BKPT();
 8002022:	be00      	bkpt	0x0000
		Error_Handler();
 8002024:	f001 fcec 	bl	8003a00 <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	2101      	movs	r1, #1
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f9d0 	bl	80023d4 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	4914      	ldr	r1, [pc, #80]	; (800208c <lps22hh_init+0xa8>)
 800203a:	4618      	mov	r0, r3
 800203c:	f000 f9f0 	bl	8002420 <lps22hh_reset_get>
	} while (rst_lps22hh);
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <lps22hh_init+0xa8>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f5      	bne.n	8002034 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	2101      	movs	r1, #1
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f912 	bl	8002278 <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_200_Hz);
 8002054:	f107 030c 	add.w	r3, r7, #12
 8002058:	2107      	movs	r1, #7
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f932 	bl	80022c4 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	461c      	mov	r4, r3
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800206c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd90      	pop	{r4, r7, pc}
 8002078:	0800215d 	.word	0x0800215d
 800207c:	08002197 	.word	0x08002197
 8002080:	20000610 	.word	0x20000610
 8002084:	20000234 	.word	0x20000234
 8002088:	40020800 	.word	0x40020800
 800208c:	20000235 	.word	0x20000235

08002090 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	1d3c      	adds	r4, r7, #4
 8002098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800209c:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800209e:	f107 0214 	add.w	r2, r7, #20
 80020a2:	1d38      	adds	r0, r7, #4
 80020a4:	2301      	movs	r3, #1
 80020a6:	2127      	movs	r1, #39	; 0x27
 80020a8:	f000 f89d 	bl	80021e6 <lps22hh_read_reg>

	if (reg.status.p_da) {
 80020ac:	7d3b      	ldrb	r3, [r7, #20]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d011      	beq.n	80020dc <get_pressure+0x4c>
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <get_pressure+0x54>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4908      	ldr	r1, [pc, #32]	; (80020e4 <get_pressure+0x54>)
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f94c 	bl	8002360 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <get_pressure+0x54>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f8bb 	bl	8002248 <lps22hh_from_lsb_to_hpa>
 80020d2:	eef0 7a40 	vmov.f32	s15, s0
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd90      	pop	{r4, r7, pc}
 80020e4:	20000230 	.word	0x20000230

080020e8 <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b088      	sub	sp, #32
 80020ec:	af04      	add	r7, sp, #16
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	607a      	str	r2, [r7, #4]
 80020f2:	461a      	mov	r2, r3
 80020f4:	460b      	mov	r3, r1
 80020f6:	72fb      	strb	r3, [r7, #11]
 80020f8:	4613      	mov	r3, r2
 80020fa:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002104:	9302      	str	r3, [sp, #8]
 8002106:	893b      	ldrh	r3, [r7, #8]
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2301      	movs	r3, #1
 8002110:	21d5      	movs	r1, #213	; 0xd5
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f004 fbb0 	bl	8006878 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b088      	sub	sp, #32
 8002126:	af04      	add	r7, sp, #16
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	607a      	str	r2, [r7, #4]
 800212c:	461a      	mov	r2, r3
 800212e:	460b      	mov	r3, r1
 8002130:	72fb      	strb	r3, [r7, #11]
 8002132:	4613      	mov	r3, r2
 8002134:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 8002136:	7afb      	ldrb	r3, [r7, #11]
 8002138:	b29a      	uxth	r2, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213e:	9302      	str	r3, [sp, #8]
 8002140:	893b      	ldrh	r3, [r7, #8]
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	2301      	movs	r3, #1
 800214a:	21d5      	movs	r1, #213	; 0xd5
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f004 fc8d 	bl	8006a6c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af04      	add	r7, sp, #16
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	461a      	mov	r2, r3
 8002168:	460b      	mov	r3, r1
 800216a:	72fb      	strb	r3, [r7, #11]
 800216c:	4613      	mov	r3, r2
 800216e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	b29a      	uxth	r2, r3
 8002174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	893b      	ldrh	r3, [r7, #8]
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2301      	movs	r3, #1
 8002184:	21b9      	movs	r1, #185	; 0xb9
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f004 fb76 	bl	8006878 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b088      	sub	sp, #32
 800219a:	af04      	add	r7, sp, #16
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	607a      	str	r2, [r7, #4]
 80021a0:	461a      	mov	r2, r3
 80021a2:	460b      	mov	r3, r1
 80021a4:	72fb      	strb	r3, [r7, #11]
 80021a6:	4613      	mov	r3, r2
 80021a8:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 80021aa:	7afb      	ldrb	r3, [r7, #11]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	893b      	ldrh	r3, [r7, #8]
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	2301      	movs	r3, #1
 80021be:	21b9      	movs	r1, #185	; 0xb9
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f004 fc53 	bl	8006a6c <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f002 ff35 	bl	8005048 <HAL_Delay>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80021e6:	b590      	push	{r4, r7, lr}
 80021e8:	b087      	sub	sp, #28
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	607a      	str	r2, [r7, #4]
 80021f0:	461a      	mov	r2, r3
 80021f2:	460b      	mov	r3, r1
 80021f4:	72fb      	strb	r3, [r7, #11]
 80021f6:	4613      	mov	r3, r2
 80021f8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685c      	ldr	r4, [r3, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6898      	ldr	r0, [r3, #8]
 8002202:	893b      	ldrh	r3, [r7, #8]
 8002204:	7af9      	ldrb	r1, [r7, #11]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	47a0      	blx	r4
 800220a:	6178      	str	r0, [r7, #20]

  return ret;
 800220c:	697b      	ldr	r3, [r7, #20]
}
 800220e:	4618      	mov	r0, r3
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd90      	pop	{r4, r7, pc}

08002216 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002216:	b590      	push	{r4, r7, lr}
 8002218:	b087      	sub	sp, #28
 800221a:	af00      	add	r7, sp, #0
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	461a      	mov	r2, r3
 8002222:	460b      	mov	r3, r1
 8002224:	72fb      	strb	r3, [r7, #11]
 8002226:	4613      	mov	r3, r2
 8002228:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681c      	ldr	r4, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6898      	ldr	r0, [r3, #8]
 8002232:	893b      	ldrh	r3, [r7, #8]
 8002234:	7af9      	ldrb	r1, [r7, #11]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	47a0      	blx	r4
 800223a:	6178      	str	r0, [r7, #20]

  return ret;
 800223c:	697b      	ldr	r3, [r7, #20]
}
 800223e:	4618      	mov	r0, r3
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	bd90      	pop	{r4, r7, pc}
	...

08002248 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8002274 <lps22hh_from_lsb_to_hpa+0x2c>
 800225e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002262:	eef0 7a66 	vmov.f32	s15, s13
}
 8002266:	eeb0 0a67 	vmov.f32	s0, s15
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	49800000 	.word	0x49800000

08002278 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8002284:	f107 0208 	add.w	r2, r7, #8
 8002288:	2301      	movs	r3, #1
 800228a:	2110      	movs	r1, #16
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffaa 	bl	80021e6 <lps22hh_read_reg>
 8002292:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10f      	bne.n	80022ba <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	7a3b      	ldrb	r3, [r7, #8]
 80022a4:	f362 0341 	bfi	r3, r2, #1, #1
 80022a8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80022aa:	f107 0208 	add.w	r2, r7, #8
 80022ae:	2301      	movs	r3, #1
 80022b0:	2110      	movs	r1, #16
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffaf 	bl	8002216 <lps22hh_write_reg>
 80022b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80022d0:	f107 0210 	add.w	r2, r7, #16
 80022d4:	2301      	movs	r3, #1
 80022d6:	2110      	movs	r1, #16
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff84 	bl	80021e6 <lps22hh_read_reg>
 80022de:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d107      	bne.n	80022f6 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80022e6:	f107 020c 	add.w	r2, r7, #12
 80022ea:	2301      	movs	r3, #1
 80022ec:	2111      	movs	r1, #17
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ff79 	bl	80021e6 <lps22hh_read_reg>
 80022f4:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10f      	bne.n	800231c <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	b2da      	uxtb	r2, r3
 8002304:	7c3b      	ldrb	r3, [r7, #16]
 8002306:	f362 1306 	bfi	r3, r2, #4, #3
 800230a:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800230c:	f107 0210 	add.w	r2, r7, #16
 8002310:	2301      	movs	r3, #1
 8002312:	2110      	movs	r1, #16
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff7e 	bl	8002216 <lps22hh_write_reg>
 800231a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d119      	bne.n	8002356 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8002322:	78fb      	ldrb	r3, [r7, #3]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	b2da      	uxtb	r2, r3
 800232c:	7b3b      	ldrb	r3, [r7, #12]
 800232e:	f362 0341 	bfi	r3, r2, #1, #1
 8002332:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8002334:	78fb      	ldrb	r3, [r7, #3]
 8002336:	08db      	lsrs	r3, r3, #3
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	b2da      	uxtb	r2, r3
 800233e:	7b3b      	ldrb	r3, [r7, #12]
 8002340:	f362 0300 	bfi	r3, r2, #0, #1
 8002344:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8002346:	f107 020c 	add.w	r2, r7, #12
 800234a:	2301      	movs	r3, #1
 800234c:	2111      	movs	r1, #17
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ff61 	bl	8002216 <lps22hh_write_reg>
 8002354:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8002356:	697b      	ldr	r3, [r7, #20]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800236a:	f107 0208 	add.w	r2, r7, #8
 800236e:	2303      	movs	r3, #3
 8002370:	2128      	movs	r1, #40	; 0x28
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ff37 	bl	80021e6 <lps22hh_read_reg>
 8002378:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800237a:	7abb      	ldrb	r3, [r7, #10]
 800237c:	461a      	mov	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	7a7a      	ldrb	r2, [r7, #9]
 800238a:	441a      	add	r2, r3
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	7a3a      	ldrb	r2, [r7, #8]
 8002398:	441a      	add	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	021a      	lsls	r2, r3, #8
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	601a      	str	r2, [r3, #0]

  return ret;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b084      	sub	sp, #16
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80023bc:	2301      	movs	r3, #1
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	210f      	movs	r1, #15
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff0f 	bl	80021e6 <lps22hh_read_reg>
 80023c8:	60f8      	str	r0, [r7, #12]

  return ret;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80023e0:	f107 0208 	add.w	r2, r7, #8
 80023e4:	2301      	movs	r3, #1
 80023e6:	2111      	movs	r1, #17
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff fefc 	bl	80021e6 <lps22hh_read_reg>
 80023ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	7a3b      	ldrb	r3, [r7, #8]
 8002400:	f362 0382 	bfi	r3, r2, #2, #1
 8002404:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002406:	f107 0208 	add.w	r2, r7, #8
 800240a:	2301      	movs	r3, #1
 800240c:	2111      	movs	r1, #17
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff01 	bl	8002216 <lps22hh_write_reg>
 8002414:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002416:	68fb      	ldr	r3, [r7, #12]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800242a:	f107 0208 	add.w	r2, r7, #8
 800242e:	2301      	movs	r3, #1
 8002430:	2111      	movs	r1, #17
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff fed7 	bl	80021e6 <lps22hh_read_reg>
 8002438:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800243a:	7a3b      	ldrb	r3, [r7, #8]
 800243c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	701a      	strb	r2, [r3, #0]

  return ret;
 8002448:	68fb      	ldr	r3, [r7, #12]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002452:	b590      	push	{r4, r7, lr}
 8002454:	b087      	sub	sp, #28
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	461a      	mov	r2, r3
 800245e:	460b      	mov	r3, r1
 8002460:	72fb      	strb	r3, [r7, #11]
 8002462:	4613      	mov	r3, r2
 8002464:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685c      	ldr	r4, [r3, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6898      	ldr	r0, [r3, #8]
 800246e:	893b      	ldrh	r3, [r7, #8]
 8002470:	7af9      	ldrb	r1, [r7, #11]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	47a0      	blx	r4
 8002476:	6178      	str	r0, [r7, #20]

  return ret;
 8002478:	697b      	ldr	r3, [r7, #20]
}
 800247a:	4618      	mov	r0, r3
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	bd90      	pop	{r4, r7, pc}

08002482 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002482:	b590      	push	{r4, r7, lr}
 8002484:	b087      	sub	sp, #28
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	461a      	mov	r2, r3
 800248e:	460b      	mov	r3, r1
 8002490:	72fb      	strb	r3, [r7, #11]
 8002492:	4613      	mov	r3, r2
 8002494:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681c      	ldr	r4, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6898      	ldr	r0, [r3, #8]
 800249e:	893b      	ldrh	r3, [r7, #8]
 80024a0:	7af9      	ldrb	r1, [r7, #11]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	47a0      	blx	r4
 80024a6:	6178      	str	r0, [r7, #20]

  return ret;
 80024a8:	697b      	ldr	r3, [r7, #20]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd90      	pop	{r4, r7, pc}
	...

080024b4 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 80024be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c2:	ee07 3a90 	vmov	s15, r3
 80024c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80024e0 <lsm6dsl_from_fs8g_to_mg+0x2c>
 80024ce:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80024d2:	eeb0 0a67 	vmov.f32	s0, s15
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	3e79db23 	.word	0x3e79db23

080024e4 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 80024ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002510 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 80024fe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002502:	eeb0 0a67 	vmov.f32	s0, s15
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	428c0000 	.word	0x428c0000

08002514 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002520:	f107 0208 	add.w	r2, r7, #8
 8002524:	2301      	movs	r3, #1
 8002526:	2110      	movs	r1, #16
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff92 	bl	8002452 <lsm6dsl_read_reg>
 800252e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10f      	bne.n	8002556 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	b2da      	uxtb	r2, r3
 800253e:	7a3b      	ldrb	r3, [r7, #8]
 8002540:	f362 0383 	bfi	r3, r2, #2, #2
 8002544:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002546:	f107 0208 	add.w	r2, r7, #8
 800254a:	2301      	movs	r3, #1
 800254c:	2110      	movs	r1, #16
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ff97 	bl	8002482 <lsm6dsl_write_reg>
 8002554:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800256c:	f107 0208 	add.w	r2, r7, #8
 8002570:	2301      	movs	r3, #1
 8002572:	2110      	movs	r1, #16
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff6c 	bl	8002452 <lsm6dsl_read_reg>
 800257a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10f      	bne.n	80025a2 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	b2da      	uxtb	r2, r3
 800258a:	7a3b      	ldrb	r3, [r7, #8]
 800258c:	f362 1307 	bfi	r3, r2, #4, #4
 8002590:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002592:	f107 0208 	add.w	r2, r7, #8
 8002596:	2301      	movs	r3, #1
 8002598:	2110      	movs	r1, #16
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ff71 	bl	8002482 <lsm6dsl_write_reg>
 80025a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025a2:	68fb      	ldr	r3, [r7, #12]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80025b8:	f107 0208 	add.w	r2, r7, #8
 80025bc:	2301      	movs	r3, #1
 80025be:	2111      	movs	r1, #17
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff46 	bl	8002452 <lsm6dsl_read_reg>
 80025c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	7a3b      	ldrb	r3, [r7, #8]
 80025d8:	f362 0343 	bfi	r3, r2, #1, #3
 80025dc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80025de:	f107 0208 	add.w	r2, r7, #8
 80025e2:	2301      	movs	r3, #1
 80025e4:	2111      	movs	r1, #17
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff ff4b 	bl	8002482 <lsm6dsl_write_reg>
 80025ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002604:	f107 0208 	add.w	r2, r7, #8
 8002608:	2301      	movs	r3, #1
 800260a:	2111      	movs	r1, #17
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ff20 	bl	8002452 <lsm6dsl_read_reg>
 8002612:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	b2da      	uxtb	r2, r3
 8002622:	7a3b      	ldrb	r3, [r7, #8]
 8002624:	f362 1307 	bfi	r3, r2, #4, #4
 8002628:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800262a:	f107 0208 	add.w	r2, r7, #8
 800262e:	2301      	movs	r3, #1
 8002630:	2111      	movs	r1, #17
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff25 	bl	8002482 <lsm6dsl_write_reg>
 8002638:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002650:	f107 0208 	add.w	r2, r7, #8
 8002654:	2301      	movs	r3, #1
 8002656:	2112      	movs	r1, #18
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fefa 	bl	8002452 <lsm6dsl_read_reg>
 800265e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	7a3b      	ldrb	r3, [r7, #8]
 8002670:	f362 1386 	bfi	r3, r2, #6, #1
 8002674:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002676:	f107 0208 	add.w	r2, r7, #8
 800267a:	2301      	movs	r3, #1
 800267c:	2112      	movs	r1, #18
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff feff 	bl	8002482 <lsm6dsl_write_reg>
 8002684:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 800269a:	f107 0208 	add.w	r2, r7, #8
 800269e:	2301      	movs	r3, #1
 80026a0:	211e      	movs	r1, #30
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fed5 	bl	8002452 <lsm6dsl_read_reg>
 80026a8:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80026aa:	7a3b      	ldrb	r3, [r7, #8]
 80026ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	701a      	strb	r2, [r3, #0]

  return ret;
 80026b8:	68fb      	ldr	r3, [r7, #12]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 80026cc:	f107 0208 	add.w	r2, r7, #8
 80026d0:	2301      	movs	r3, #1
 80026d2:	211e      	movs	r1, #30
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff febc 	bl	8002452 <lsm6dsl_read_reg>
 80026da:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 80026dc:	7a3b      	ldrb	r3, [r7, #8]
 80026de:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	461a      	mov	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	701a      	strb	r2, [r3, #0]

  return ret;
 80026ea:	68fb      	ldr	r3, [r7, #12]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80026fe:	f107 020c 	add.w	r2, r7, #12
 8002702:	2306      	movs	r3, #6
 8002704:	2122      	movs	r1, #34	; 0x22
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff fea3 	bl	8002452 <lsm6dsl_read_reg>
 800270c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800270e:	7b7b      	ldrb	r3, [r7, #13]
 8002710:	b21a      	sxth	r2, r3
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800271c:	b29b      	uxth	r3, r3
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	b29a      	uxth	r2, r3
 8002722:	7b3b      	ldrb	r3, [r7, #12]
 8002724:	b29b      	uxth	r3, r3
 8002726:	4413      	add	r3, r2
 8002728:	b29b      	uxth	r3, r3
 800272a:	b21a      	sxth	r2, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002730:	7bfa      	ldrb	r2, [r7, #15]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	3302      	adds	r3, #2
 8002736:	b212      	sxth	r2, r2
 8002738:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	3302      	adds	r3, #2
 800273e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002742:	b29b      	uxth	r3, r3
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	b29a      	uxth	r2, r3
 8002748:	7bbb      	ldrb	r3, [r7, #14]
 800274a:	b29b      	uxth	r3, r3
 800274c:	4413      	add	r3, r2
 800274e:	b29a      	uxth	r2, r3
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	3302      	adds	r3, #2
 8002754:	b212      	sxth	r2, r2
 8002756:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002758:	7c7a      	ldrb	r2, [r7, #17]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	3304      	adds	r3, #4
 800275e:	b212      	sxth	r2, r2
 8002760:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	3304      	adds	r3, #4
 8002766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276a:	b29b      	uxth	r3, r3
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	b29a      	uxth	r2, r3
 8002770:	7c3b      	ldrb	r3, [r7, #16]
 8002772:	b29b      	uxth	r3, r3
 8002774:	4413      	add	r3, r2
 8002776:	b29a      	uxth	r2, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	3304      	adds	r3, #4
 800277c:	b212      	sxth	r2, r2
 800277e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002780:	697b      	ldr	r3, [r7, #20]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8002794:	f107 020c 	add.w	r2, r7, #12
 8002798:	2306      	movs	r3, #6
 800279a:	2128      	movs	r1, #40	; 0x28
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fe58 	bl	8002452 <lsm6dsl_read_reg>
 80027a2:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80027a4:	7b7b      	ldrb	r3, [r7, #13]
 80027a6:	b21a      	sxth	r2, r3
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	7b3b      	ldrb	r3, [r7, #12]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4413      	add	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	b21a      	sxth	r2, r3
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	3302      	adds	r3, #2
 80027cc:	b212      	sxth	r2, r2
 80027ce:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	3302      	adds	r3, #2
 80027d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	b29a      	uxth	r2, r3
 80027de:	7bbb      	ldrb	r3, [r7, #14]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	3302      	adds	r3, #2
 80027ea:	b212      	sxth	r2, r2
 80027ec:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80027ee:	7c7a      	ldrb	r2, [r7, #17]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	3304      	adds	r3, #4
 80027f4:	b212      	sxth	r2, r2
 80027f6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	3304      	adds	r3, #4
 80027fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002800:	b29b      	uxth	r3, r3
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	b29a      	uxth	r2, r3
 8002806:	7c3b      	ldrb	r3, [r7, #16]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4413      	add	r3, r2
 800280c:	b29a      	uxth	r2, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	3304      	adds	r3, #4
 8002812:	b212      	sxth	r2, r2
 8002814:	801a      	strh	r2, [r3, #0]

  return ret;
 8002816:	697b      	ldr	r3, [r7, #20]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800282a:	2301      	movs	r3, #1
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	210f      	movs	r1, #15
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff fe0e 	bl	8002452 <lsm6dsl_read_reg>
 8002836:	60f8      	str	r0, [r7, #12]

  return ret;
 8002838:	68fb      	ldr	r3, [r7, #12]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	460b      	mov	r3, r1
 800284c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800284e:	f107 0208 	add.w	r2, r7, #8
 8002852:	2301      	movs	r3, #1
 8002854:	2112      	movs	r1, #18
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fdfb 	bl	8002452 <lsm6dsl_read_reg>
 800285c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10f      	bne.n	8002884 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	7a3b      	ldrb	r3, [r7, #8]
 800286e:	f362 0300 	bfi	r3, r2, #0, #1
 8002872:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002874:	f107 0208 	add.w	r2, r7, #8
 8002878:	2301      	movs	r3, #1
 800287a:	2112      	movs	r1, #18
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff fe00 	bl	8002482 <lsm6dsl_write_reg>
 8002882:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002884:	68fb      	ldr	r3, [r7, #12]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002898:	f107 0208 	add.w	r2, r7, #8
 800289c:	2301      	movs	r3, #1
 800289e:	2112      	movs	r1, #18
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fdd6 	bl	8002452 <lsm6dsl_read_reg>
 80028a6:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80028a8:	7a3b      	ldrb	r3, [r7, #8]
 80028aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	701a      	strb	r2, [r3, #0]

  return ret;
 80028b6:	68fb      	ldr	r3, [r7, #12]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 80028cc:	f107 0208 	add.w	r2, r7, #8
 80028d0:	2301      	movs	r3, #1
 80028d2:	2117      	movs	r1, #23
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fdbc 	bl	8002452 <lsm6dsl_read_reg>
 80028da:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d120      	bne.n	8002924 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	7a3b      	ldrb	r3, [r7, #8]
 80028ee:	f362 03c3 	bfi	r3, r2, #3, #1
 80028f2:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80028f4:	78fb      	ldrb	r3, [r7, #3]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	7a3b      	ldrb	r3, [r7, #8]
 80028fe:	f362 1346 	bfi	r3, r2, #5, #2
 8002902:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8002904:	7a3b      	ldrb	r3, [r7, #8]
 8002906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800290a:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800290c:	7a3b      	ldrb	r3, [r7, #8]
 800290e:	f36f 0382 	bfc	r3, #2, #1
 8002912:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002914:	f107 0208 	add.w	r2, r7, #8
 8002918:	2301      	movs	r3, #1
 800291a:	2117      	movs	r1, #23
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fdb0 	bl	8002482 <lsm6dsl_write_reg>
 8002922:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002924:	68fb      	ldr	r3, [r7, #12]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	460b      	mov	r3, r1
 8002938:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800293a:	f107 0208 	add.w	r2, r7, #8
 800293e:	2301      	movs	r3, #1
 8002940:	2116      	movs	r1, #22
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff fd85 	bl	8002452 <lsm6dsl_read_reg>
 8002948:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d157      	bne.n	8002a00 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	b2da      	uxtb	r2, r3
 800295a:	7a3b      	ldrb	r3, [r7, #8]
 800295c:	f362 1305 	bfi	r3, r2, #4, #2
 8002960:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	09db      	lsrs	r3, r3, #7
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	b2da      	uxtb	r2, r3
 800296e:	7a3b      	ldrb	r3, [r7, #8]
 8002970:	f362 1386 	bfi	r3, r2, #6, #1
 8002974:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8002976:	f107 0208 	add.w	r2, r7, #8
 800297a:	2301      	movs	r3, #1
 800297c:	2116      	movs	r1, #22
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fd7f 	bl	8002482 <lsm6dsl_write_reg>
 8002984:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d139      	bne.n	8002a00 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 800298c:	f107 020c 	add.w	r2, r7, #12
 8002990:	2301      	movs	r3, #1
 8002992:	2115      	movs	r1, #21
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff fd5c 	bl	8002452 <lsm6dsl_read_reg>
 800299a:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d12e      	bne.n	8002a00 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	7b3b      	ldrb	r3, [r7, #12]
 80029ac:	f362 0301 	bfi	r3, r2, #0, #2
 80029b0:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80029b2:	f107 020c 	add.w	r2, r7, #12
 80029b6:	2301      	movs	r3, #1
 80029b8:	2115      	movs	r1, #21
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff fd61 	bl	8002482 <lsm6dsl_write_reg>
 80029c0:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d11b      	bne.n	8002a00 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 80029c8:	f107 0210 	add.w	r2, r7, #16
 80029cc:	2301      	movs	r3, #1
 80029ce:	2113      	movs	r1, #19
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff fd3e 	bl	8002452 <lsm6dsl_read_reg>
 80029d6:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d110      	bne.n	8002a00 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	7c3b      	ldrb	r3, [r7, #16]
 80029ea:	f362 0341 	bfi	r3, r2, #1, #1
 80029ee:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 80029f0:	f107 0210 	add.w	r2, r7, #16
 80029f4:	2301      	movs	r3, #1
 80029f6:	2113      	movs	r1, #19
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff fd42 	bl	8002482 <lsm6dsl_write_reg>
 80029fe:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002a00:	697b      	ldr	r3, [r7, #20]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3718      	adds	r7, #24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <radio_tx>:
/* USER CODE BEGIN 0 */

// radio transmission wrapper
// TODO: add reception
#ifdef USING_XTEND
void radio_tx(uint8_t *msg_buffer, uint16_t size) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
//	HAL_UART_Transmit(&huart3, msg_buffer, size, HAL_MAX_DELAY);
	HAL_UART_Transmit_DMA(&huart3, msg_buffer, size);
 8002a18:	887b      	ldrh	r3, [r7, #2]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4803      	ldr	r0, [pc, #12]	; (8002a2c <radio_tx+0x20>)
 8002a20:	f007 fbd0 	bl	800a1c4 <HAL_UART_Transmit_DMA>

	#ifdef DEBUG_DMA
	HAL_UART_Transmit(&huart8, msg_buffer, size, HAL_MAX_DELAY);
	#endif
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200014a4 	.word	0x200014a4

08002a30 <tone>:
	#endif
}
#endif

// helper functions for buzzing
void tone(uint32_t duration, uint32_t repeats) {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	e013      	b.n	8002a68 <tone+0x38>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a40:	2108      	movs	r1, #8
 8002a42:	480e      	ldr	r0, [pc, #56]	; (8002a7c <tone+0x4c>)
 8002a44:	f006 fbe8 	bl	8009218 <HAL_TIM_PWM_Start>
		HAL_Delay(duration);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f002 fafd 	bl	8005048 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002a4e:	2108      	movs	r1, #8
 8002a50:	480a      	ldr	r0, [pc, #40]	; (8002a7c <tone+0x4c>)
 8002a52:	f006 fc1f 	bl	8009294 <HAL_TIM_PWM_Stop>
		if (repeats > 1)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d902      	bls.n	8002a62 <tone+0x32>
			HAL_Delay(duration);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f002 faf3 	bl	8005048 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3301      	adds	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d3e7      	bcc.n	8002a40 <tone+0x10>
	}
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200013a4 	.word	0x200013a4

08002a80 <buzz_success>:
void buzz_success() { tone(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS); };
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	2101      	movs	r1, #1
 8002a86:	2032      	movs	r0, #50	; 0x32
 8002a88:	f7ff ffd2 	bl	8002a30 <tone>
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <buzz_failure>:
void buzz_failure() { tone(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS); };
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	2101      	movs	r1, #1
 8002a96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a9a:	f7ff ffc9 	bl	8002a30 <tone>
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa8:	b0ab      	sub	sp, #172	; 0xac
 8002aaa:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002aac:	f002 fa5a 	bl	8004f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ab0:	f000 fb66 	bl	8003180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ab4:	f7fe fbfa 	bl	80012ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002ab8:	f7fe fbba 	bl	8001230 <MX_DMA_Init>
  MX_ADC1_Init();
 8002abc:	f7fe fb22 	bl	8001104 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002ac0:	f7ff f874 	bl	8001bac <MX_I2C2_Init>
  MX_I2C3_Init();
 8002ac4:	f7ff f8b2 	bl	8001c2c <MX_I2C3_Init>
  MX_SPI2_Init();
 8002ac8:	f001 fb80 	bl	80041cc <MX_SPI2_Init>
  MX_SPI4_Init();
 8002acc:	f001 fbb4 	bl	8004238 <MX_SPI4_Init>
  MX_SPI5_Init();
 8002ad0:	f001 fbe8 	bl	80042a4 <MX_SPI5_Init>
  MX_TIM2_Init();
 8002ad4:	f001 fe4e 	bl	8004774 <MX_TIM2_Init>
  MX_UART8_Init();
 8002ad8:	f001 ffe8 	bl	8004aac <MX_UART8_Init>
  MX_USART3_UART_Init();
 8002adc:	f002 f810 	bl	8004b00 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002ae0:	f002 f838 	bl	8004b54 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002ae4:	f008 fb58 	bl	800b198 <MX_FATFS_Init>
  MX_RTC_Init();
 8002ae8:	f001 f8c2 	bl	8003c70 <MX_RTC_Init>
  MX_TIM4_Init();
 8002aec:	f001 ff06 	bl	80048fc <MX_TIM4_Init>
  MX_TIM3_Init();
 8002af0:	f001 feb6 	bl	8004860 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // *** IMPORTANT: DMA Init function must be called before peripheral init! *** //

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2140      	movs	r1, #64	; 0x40
 8002af8:	48b2      	ldr	r0, [pc, #712]	; (8002dc4 <main+0x320>)
 8002afa:	f003 fd2d 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 8002afe:	2201      	movs	r2, #1
 8002b00:	2120      	movs	r1, #32
 8002b02:	48b0      	ldr	r0, [pc, #704]	; (8002dc4 <main+0x320>)
 8002b04:	f003 fd28 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	2110      	movs	r1, #16
 8002b0c:	48ad      	ldr	r0, [pc, #692]	; (8002dc4 <main+0x320>)
 8002b0e:	f003 fd23 	bl	8006558 <HAL_GPIO_WritePin>

  // set CS for SD card high
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
 8002b12:	2201      	movs	r2, #1
 8002b14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b18:	48ab      	ldr	r0, [pc, #684]	; (8002dc8 <main+0x324>)
 8002b1a:	f003 fd1d 	bl	8006558 <HAL_GPIO_WritePin>

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2102      	movs	r1, #2
 8002b22:	48aa      	ldr	r0, [pc, #680]	; (8002dcc <main+0x328>)
 8002b24:	f003 fd18 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	48a7      	ldr	r0, [pc, #668]	; (8002dcc <main+0x328>)
 8002b2e:	f003 fd13 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2108      	movs	r1, #8
 8002b36:	48a5      	ldr	r0, [pc, #660]	; (8002dcc <main+0x328>)
 8002b38:	f003 fd0e 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2108      	movs	r1, #8
 8002b40:	48a3      	ldr	r0, [pc, #652]	; (8002dd0 <main+0x32c>)
 8002b42:	f003 fd09 	bl	8006558 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8002b46:	2200      	movs	r2, #0
 8002b48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b4c:	48a1      	ldr	r0, [pc, #644]	; (8002dd4 <main+0x330>)
 8002b4e:	f003 fd03 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b58:	489e      	ldr	r0, [pc, #632]	; (8002dd4 <main+0x330>)
 8002b5a:	f003 fcfd 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b64:	489b      	ldr	r0, [pc, #620]	; (8002dd4 <main+0x330>)
 8002b66:	f003 fcf7 	bl	8006558 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4899      	ldr	r0, [pc, #612]	; (8002dd4 <main+0x330>)
 8002b70:	f003 fcf2 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8002b74:	2200      	movs	r2, #0
 8002b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b7a:	4893      	ldr	r0, [pc, #588]	; (8002dc8 <main+0x324>)
 8002b7c:	f003 fcec 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8002b80:	2200      	movs	r2, #0
 8002b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b86:	4890      	ldr	r0, [pc, #576]	; (8002dc8 <main+0x324>)
 8002b88:	f003 fce6 	bl	8006558 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2104      	movs	r1, #4
 8002b90:	4891      	ldr	r0, [pc, #580]	; (8002dd8 <main+0x334>)
 8002b92:	f003 fce1 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8002b96:	2200      	movs	r2, #0
 8002b98:	2180      	movs	r1, #128	; 0x80
 8002b9a:	488f      	ldr	r0, [pc, #572]	; (8002dd8 <main+0x334>)
 8002b9c:	f003 fcdc 	bl	8006558 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ba6:	488c      	ldr	r0, [pc, #560]	; (8002dd8 <main+0x334>)
 8002ba8:	f003 fcd6 	bl	8006558 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high (SPI idle CS is high)
  HAL_GPIO_WritePin(TH_CS_GPIO_Port, TH_CS_Pin, SET);
 8002bac:	2201      	movs	r2, #1
 8002bae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bb2:	4889      	ldr	r0, [pc, #548]	; (8002dd8 <main+0x334>)
 8002bb4:	f003 fcd0 	bl	8006558 <HAL_GPIO_WritePin>

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bbe:	4885      	ldr	r0, [pc, #532]	; (8002dd4 <main+0x330>)
 8002bc0:	f003 fcca 	bl	8006558 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2180      	movs	r1, #128	; 0x80
 8002bc8:	487e      	ldr	r0, [pc, #504]	; (8002dc4 <main+0x320>)
 8002bca:	f003 fcc5 	bl	8006558 <HAL_GPIO_WritePin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
  Tx_setup();
#endif

  // init i2c sensors and data storage
  dev_ctx_lsm = lsm6dsl_init();
 8002bce:	4c83      	ldr	r4, [pc, #524]	; (8002ddc <main+0x338>)
 8002bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f909 	bl	8001dec <lsm6dsl_init>
 8002bda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002be2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8002be6:	f7ff ff4b 	bl	8002a80 <buzz_success>
  HAL_Delay(500);
 8002bea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002bee:	f002 fa2b 	bl	8005048 <HAL_Delay>

  dev_ctx_lps = lps22hh_init();
 8002bf2:	4c7b      	ldr	r4, [pc, #492]	; (8002de0 <main+0x33c>)
 8002bf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff f9f3 	bl	8001fe4 <lps22hh_init>
 8002bfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8002c0a:	f7ff ff39 	bl	8002a80 <buzz_success>
  HAL_Delay(500);
 8002c0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c12:	f002 fa19 	bl	8005048 <HAL_Delay>
  // init FLASH
//  if (!W25qxx_Init()) Error_Handler();
//  buzz_success();

  // init sd card with dynamic filename
  fres = sd_init_dynamic_filename("FC", sd_file_header, filename);
 8002c16:	4a73      	ldr	r2, [pc, #460]	; (8002de4 <main+0x340>)
 8002c18:	4973      	ldr	r1, [pc, #460]	; (8002de8 <main+0x344>)
 8002c1a:	4874      	ldr	r0, [pc, #464]	; (8002dec <main+0x348>)
 8002c1c:	f001 f8b0 	bl	8003d80 <sd_init_dynamic_filename>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b72      	ldr	r3, [pc, #456]	; (8002df0 <main+0x34c>)
 8002c26:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8002c28:	4b71      	ldr	r3, [pc, #452]	; (8002df0 <main+0x34c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <main+0x190>
  		Error_Handler();
 8002c30:	f000 fee6 	bl	8003a00 <Error_Handler>
  // send message with Iridium
//  MRT_Static_Iridium_sendMessage("message");
//  MRT_Static_Iridium_Shutdown();

  // get ground altitude
  for (uint8_t i = 0; i < 100; i++) {
 8002c34:	2300      	movs	r3, #0
 8002c36:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002c3a:	e010      	b.n	8002c5e <main+0x1ba>
	  alt_ground += getAltitude();
 8002c3c:	f000 fcc0 	bl	80035c0 <getAltitude>
 8002c40:	eeb0 7a40 	vmov.f32	s14, s0
 8002c44:	4b6b      	ldr	r3, [pc, #428]	; (8002df4 <main+0x350>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4e:	4b69      	ldr	r3, [pc, #420]	; (8002df4 <main+0x350>)
 8002c50:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 100; i++) {
 8002c54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002c5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c62:	2b63      	cmp	r3, #99	; 0x63
 8002c64:	d9ea      	bls.n	8002c3c <main+0x198>
  }
  alt_ground /= 100.0;
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <main+0x350>)
 8002c68:	ed93 7a00 	vldr	s14, [r3]
 8002c6c:	eddf 6a62 	vldr	s13, [pc, #392]	; 8002df8 <main+0x354>
 8002c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c74:	4b5f      	ldr	r3, [pc, #380]	; (8002df4 <main+0x350>)
 8002c76:	edc3 7a00 	vstr	s15, [r3]
  alt_current = alt_ground;
 8002c7a:	4b5e      	ldr	r3, [pc, #376]	; (8002df4 <main+0x350>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5f      	ldr	r2, [pc, #380]	; (8002dfc <main+0x358>)
 8002c80:	6013      	str	r3, [r2, #0]

  // initial DMA request for GPS
//  HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN);

  // initial DMA request for XTend
  memset(xtend_rx_buf, 0, 10);
 8002c82:	220a      	movs	r2, #10
 8002c84:	2100      	movs	r1, #0
 8002c86:	485e      	ldr	r0, [pc, #376]	; (8002e00 <main+0x35c>)
 8002c88:	f00b fd6e 	bl	800e768 <memset>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)xtend_rx_buf, XTEND_RX_DMA_CMD_LEN);
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	495c      	ldr	r1, [pc, #368]	; (8002e00 <main+0x35c>)
 8002c90:	485c      	ldr	r0, [pc, #368]	; (8002e04 <main+0x360>)
 8002c92:	f007 fb03 	bl	800a29c <HAL_UART_Receive_DMA>

  // initialize avionics and propulsion xtend buffers with *something* so DMA can happen without zero length error
  sprintf((char*) msg_buffer_av,
    				"S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
    				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002c96:	4b5c      	ldr	r3, [pc, #368]	; (8002e08 <main+0x364>)
 8002c98:	681b      	ldr	r3, [r3, #0]
  sprintf((char*) msg_buffer_av,
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd fc74 	bl	8000588 <__aeabi_f2d>
 8002ca0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002ca4:	4b58      	ldr	r3, [pc, #352]	; (8002e08 <main+0x364>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
  sprintf((char*) msg_buffer_av,
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fd fc6d 	bl	8000588 <__aeabi_f2d>
 8002cae:	e9c7 0108 	strd	r0, r1, [r7, #32]
    				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002cb2:	4b55      	ldr	r3, [pc, #340]	; (8002e08 <main+0x364>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
  sprintf((char*) msg_buffer_av,
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fc66 	bl	8000588 <__aeabi_f2d>
 8002cbc:	e9c7 0106 	strd	r0, r1, [r7, #24]
    				angular_rate_mdps[0], angular_rate_mdps[1],
 8002cc0:	4b52      	ldr	r3, [pc, #328]	; (8002e0c <main+0x368>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
  sprintf((char*) msg_buffer_av,
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fc5f 	bl	8000588 <__aeabi_f2d>
 8002cca:	e9c7 0104 	strd	r0, r1, [r7, #16]
    				angular_rate_mdps[0], angular_rate_mdps[1],
 8002cce:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <main+0x368>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
  sprintf((char*) msg_buffer_av,
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fc58 	bl	8000588 <__aeabi_f2d>
 8002cd8:	e9c7 0102 	strd	r0, r1, [r7, #8]
    				angular_rate_mdps[2], pressure_hPa, latitude, longitude,
 8002cdc:	4b4b      	ldr	r3, [pc, #300]	; (8002e0c <main+0x368>)
 8002cde:	689b      	ldr	r3, [r3, #8]
  sprintf((char*) msg_buffer_av,
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fc51 	bl	8000588 <__aeabi_f2d>
 8002ce6:	4605      	mov	r5, r0
 8002ce8:	460e      	mov	r6, r1
 8002cea:	4b49      	ldr	r3, [pc, #292]	; (8002e10 <main+0x36c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fd fc4a 	bl	8000588 <__aeabi_f2d>
 8002cf4:	4682      	mov	sl, r0
 8002cf6:	468b      	mov	fp, r1
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <main+0x370>)
 8002cfa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002cfe:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <main+0x374>)
 8002d00:	e9d3 0100 	ldrd	r0, r1, [r3]
    				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002d04:	4b45      	ldr	r3, [pc, #276]	; (8002e1c <main+0x378>)
 8002d06:	785b      	ldrb	r3, [r3, #1]
  sprintf((char*) msg_buffer_av,
 8002d08:	607b      	str	r3, [r7, #4]
    				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002d0a:	4b44      	ldr	r3, [pc, #272]	; (8002e1c <main+0x378>)
 8002d0c:	789b      	ldrb	r3, [r3, #2]
  sprintf((char*) msg_buffer_av,
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <main+0x378>)
 8002d12:	685c      	ldr	r4, [r3, #4]
 8002d14:	4b42      	ldr	r3, [pc, #264]	; (8002e20 <main+0x37c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <main+0x380>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	9314      	str	r3, [sp, #80]	; 0x50
 8002d24:	9213      	str	r2, [sp, #76]	; 0x4c
 8002d26:	9412      	str	r4, [sp, #72]	; 0x48
 8002d28:	683c      	ldr	r4, [r7, #0]
 8002d2a:	9411      	str	r4, [sp, #68]	; 0x44
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	9310      	str	r3, [sp, #64]	; 0x40
 8002d30:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002d34:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002d38:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002d3c:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8002d40:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002d48:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002d50:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d58:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d5c:	ed8d 7b00 	vstr	d7, [sp]
 8002d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d64:	4930      	ldr	r1, [pc, #192]	; (8002e28 <main+0x384>)
 8002d66:	4831      	ldr	r0, [pc, #196]	; (8002e2c <main+0x388>)
 8002d68:	f00c fc40 	bl	800f5ec <siprintf>
    				continuity, state);
  sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002d6c:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <main+0x38c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fc09 	bl	8000588 <__aeabi_f2d>
 8002d76:	4604      	mov	r4, r0
 8002d78:	460d      	mov	r5, r1
 8002d7a:	4b2e      	ldr	r3, [pc, #184]	; (8002e34 <main+0x390>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fc02 	bl	8000588 <__aeabi_f2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	492b      	ldr	r1, [pc, #172]	; (8002e38 <main+0x394>)
 8002d8a:	7809      	ldrb	r1, [r1, #0]
 8002d8c:	4608      	mov	r0, r1
  					tank_pressure, tank_temperature, valve_state, stimeget.Minutes,
 8002d8e:	4923      	ldr	r1, [pc, #140]	; (8002e1c <main+0x378>)
 8002d90:	7849      	ldrb	r1, [r1, #1]
  sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002d92:	460e      	mov	r6, r1
  					stimeget.Seconds, stimeget.SubSeconds);
 8002d94:	4921      	ldr	r1, [pc, #132]	; (8002e1c <main+0x378>)
 8002d96:	7889      	ldrb	r1, [r1, #2]
  sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002d98:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d9a:	4920      	ldr	r1, [pc, #128]	; (8002e1c <main+0x378>)
 8002d9c:	6849      	ldr	r1, [r1, #4]
 8002d9e:	9105      	str	r1, [sp, #20]
 8002da0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002da2:	9104      	str	r1, [sp, #16]
 8002da4:	9603      	str	r6, [sp, #12]
 8002da6:	9002      	str	r0, [sp, #8]
 8002da8:	e9cd 2300 	strd	r2, r3, [sp]
 8002dac:	4622      	mov	r2, r4
 8002dae:	462b      	mov	r3, r5
 8002db0:	4922      	ldr	r1, [pc, #136]	; (8002e3c <main+0x398>)
 8002db2:	4823      	ldr	r0, [pc, #140]	; (8002e40 <main+0x39c>)
 8002db4:	f00c fc1a 	bl	800f5ec <siprintf>
  /* USER CODE BEGIN WHILE */

#ifndef TIMING_ITM
  while (1)
#else
  ITM_Port32(31) = 1;
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <main+0x3a0>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 2; i < 2+10; i++)
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc2:	e197      	b.n	80030f4 <main+0x650>
 8002dc4:	40020c00 	.word	0x40020c00
 8002dc8:	40021400 	.word	0x40021400
 8002dcc:	40020800 	.word	0x40020800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40021800 	.word	0x40021800
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	20000c20 	.word	0x20000c20
 8002de0:	20000c2c 	.word	0x20000c2c
 8002de4:	20000378 	.word	0x20000378
 8002de8:	08014b68 	.word	0x08014b68
 8002dec:	080148f8 	.word	0x080148f8
 8002df0:	20000c38 	.word	0x20000c38
 8002df4:	20000388 	.word	0x20000388
 8002df8:	42c80000 	.word	0x42c80000
 8002dfc:	2000038c 	.word	0x2000038c
 8002e00:	200006b8 	.word	0x200006b8
 8002e04:	200014a4 	.word	0x200014a4
 8002e08:	20000238 	.word	0x20000238
 8002e0c:	20000244 	.word	0x20000244
 8002e10:	20000250 	.word	0x20000250
 8002e14:	20000c18 	.word	0x20000c18
 8002e18:	20000b08 	.word	0x20000b08
 8002e1c:	20000264 	.word	0x20000264
 8002e20:	20000237 	.word	0x20000237
 8002e24:	20000385 	.word	0x20000385
 8002e28:	080148fc 	.word	0x080148fc
 8002e2c:	2000027c 	.word	0x2000027c
 8002e30:	2000025c 	.word	0x2000025c
 8002e34:	20000258 	.word	0x20000258
 8002e38:	20000260 	.word	0x20000260
 8002e3c:	08014958 	.word	0x08014958
 8002e40:	20000344 	.word	0x20000344
 8002e44:	e000007c 	.word	0xe000007c
#endif
  {
//	    buzz_success();
	    HAL_Delay(10);
 8002e48:	200a      	movs	r0, #10
 8002e4a:	f002 f8fd 	bl	8005048 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002e4e:	2201      	movs	r2, #1
 8002e50:	2102      	movs	r1, #2
 8002e52:	48ab      	ldr	r0, [pc, #684]	; (8003100 <main+0x65c>)
 8002e54:	f003 fb80 	bl	8006558 <HAL_GPIO_WritePin>

		// check for launch command -- do not do this in the callback because...reasons?
		if (xtend_rx_dma_ready) {
 8002e58:	4baa      	ldr	r3, [pc, #680]	; (8003104 <main+0x660>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <main+0x3ec>
			// go check what the command is
			radio_command cmd = xtend_parse_dma_command();
 8002e62:	f000 fddb 	bl	8003a1c <xtend_parse_dma_command>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			// prep for next command to be sent
			memset(xtend_rx_buf, 0, 10);
 8002e6c:	220a      	movs	r2, #10
 8002e6e:	2100      	movs	r1, #0
 8002e70:	48a5      	ldr	r0, [pc, #660]	; (8003108 <main+0x664>)
 8002e72:	f00b fc79 	bl	800e768 <memset>
			HAL_UART_Receive_DMA(&huart3, xtend_rx_buf, XTEND_RX_DMA_CMD_LEN);
 8002e76:	2204      	movs	r2, #4
 8002e78:	49a3      	ldr	r1, [pc, #652]	; (8003108 <main+0x664>)
 8002e7a:	48a4      	ldr	r0, [pc, #656]	; (800310c <main+0x668>)
 8002e7c:	f007 fa0e 	bl	800a29c <HAL_UART_Receive_DMA>
			xtend_rx_dma_ready = 0;
 8002e80:	4ba0      	ldr	r3, [pc, #640]	; (8003104 <main+0x660>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	701a      	strb	r2, [r3, #0]

			execute_parsed_command(cmd);
 8002e86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 fe30 	bl	8003af0 <execute_parsed_command>
		}

		// -----  GATHER AVIONICS TELEMETRY ----- //
		// lsm6dsl data
		get_acceleration(dev_ctx_lsm, acceleration_mg);
 8002e90:	4a9f      	ldr	r2, [pc, #636]	; (8003110 <main+0x66c>)
 8002e92:	4ba0      	ldr	r3, [pc, #640]	; (8003114 <main+0x670>)
 8002e94:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e96:	f7ff f819 	bl	8001ecc <get_acceleration>
		get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8002e9a:	4a9d      	ldr	r2, [pc, #628]	; (8003110 <main+0x66c>)
 8002e9c:	4b9e      	ldr	r3, [pc, #632]	; (8003118 <main+0x674>)
 8002e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ea0:	f7ff f85a 	bl	8001f58 <get_angvelocity>

		// lps22hh data
		alt_current = getAltitude(); // calls get_pressure();
 8002ea4:	f000 fb8c 	bl	80035c0 <getAltitude>
 8002ea8:	eef0 7a40 	vmov.f32	s15, s0
 8002eac:	4b9b      	ldr	r3, [pc, #620]	; (800311c <main+0x678>)
 8002eae:	edc3 7a00 	vstr	s15, [r3]

		// rtc data
		HAL_RTC_GetTime(&hrtc, &stimeget, RTC_FORMAT_BIN);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	499a      	ldr	r1, [pc, #616]	; (8003120 <main+0x67c>)
 8002eb6:	489b      	ldr	r0, [pc, #620]	; (8003124 <main+0x680>)
 8002eb8:	f005 fb4a 	bl	8008550 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sdateget, RTC_FORMAT_BIN); // have to call GetDate for the time to be correct
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	499a      	ldr	r1, [pc, #616]	; (8003128 <main+0x684>)
 8002ec0:	4898      	ldr	r0, [pc, #608]	; (8003124 <main+0x680>)
 8002ec2:	f005 fc4a 	bl	800875a <HAL_RTC_GetDate>

		// continuity on pyro channels
		continuity = get_continuity();
 8002ec6:	f000 fbcb 	bl	8003660 <get_continuity>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b97      	ldr	r3, [pc, #604]	; (800312c <main+0x688>)
 8002ed0:	701a      	strb	r2, [r3, #0]

		// gps
		if (gps_dma_ready) {
 8002ed2:	4b97      	ldr	r3, [pc, #604]	; (8003130 <main+0x68c>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <main+0x452>
			gps_dma_ready = 0;
 8002edc:	4b94      	ldr	r3, [pc, #592]	; (8003130 <main+0x68c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
			GPS_ParseBuffer(&latitude, &longitude, &time);
 8002ee2:	4a94      	ldr	r2, [pc, #592]	; (8003134 <main+0x690>)
 8002ee4:	4994      	ldr	r1, [pc, #592]	; (8003138 <main+0x694>)
 8002ee6:	4895      	ldr	r0, [pc, #596]	; (800313c <main+0x698>)
 8002ee8:	f7fe fbc4 	bl	8001674 <GPS_ParseBuffer>

			// start new DMA request
			HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN);
 8002eec:	22af      	movs	r2, #175	; 0xaf
 8002eee:	4994      	ldr	r1, [pc, #592]	; (8003140 <main+0x69c>)
 8002ef0:	4894      	ldr	r0, [pc, #592]	; (8003144 <main+0x6a0>)
 8002ef2:	f007 f9d3 	bl	800a29c <HAL_UART_Receive_DMA>
		}

		// debugging state of GPS coordinates during testing, remove later
		if (latitude != 0) {
 8002ef6:	4b91      	ldr	r3, [pc, #580]	; (800313c <main+0x698>)
 8002ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	f7fd fe00 	bl	8000b08 <__aeabi_dcmpeq>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <main+0x476>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2104      	movs	r1, #4
 8002f12:	487b      	ldr	r0, [pc, #492]	; (8003100 <main+0x65c>)
 8002f14:	f003 fb20 	bl	8006558 <HAL_GPIO_WritePin>
 8002f18:	e004      	b.n	8002f24 <main+0x480>
		} else {
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	4878      	ldr	r0, [pc, #480]	; (8003100 <main+0x65c>)
 8002f20:	f003 fb1a 	bl	8006558 <HAL_GPIO_WritePin>
		}

		if (longitude != 0) {
 8002f24:	4b84      	ldr	r3, [pc, #528]	; (8003138 <main+0x694>)
 8002f26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	f7fd fde9 	bl	8000b08 <__aeabi_dcmpeq>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <main+0x4a4>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	2108      	movs	r1, #8
 8002f40:	486f      	ldr	r0, [pc, #444]	; (8003100 <main+0x65c>)
 8002f42:	f003 fb09 	bl	8006558 <HAL_GPIO_WritePin>
 8002f46:	e004      	b.n	8002f52 <main+0x4ae>
		} else {
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2108      	movs	r1, #8
 8002f4c:	486c      	ldr	r0, [pc, #432]	; (8003100 <main+0x65c>)
 8002f4e:	f003 fb03 	bl	8006558 <HAL_GPIO_WritePin>
		}

		// propulsion data (not needed after apogee)
		if (state < FLIGHT_STATE_PRE_MAIN) {
 8002f52:	4b7d      	ldr	r3, [pc, #500]	; (8003148 <main+0x6a4>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d83b      	bhi.n	8002fd4 <main+0x530>
			tank_temperature = Max31855_Read_Temp();
 8002f5c:	f7fe f866 	bl	800102c <Max31855_Read_Temp>
 8002f60:	eef0 7a40 	vmov.f32	s15, s0
 8002f64:	4b79      	ldr	r3, [pc, #484]	; (800314c <main+0x6a8>)
 8002f66:	edc3 7a00 	vstr	s15, [r3]
			tank_pressure = prop_poll_pressure_transducer();
 8002f6a:	f000 fbb1 	bl	80036d0 <prop_poll_pressure_transducer>
 8002f6e:	eef0 7a40 	vmov.f32	s15, s0
 8002f72:	4b77      	ldr	r3, [pc, #476]	; (8003150 <main+0x6ac>)
 8002f74:	edc3 7a00 	vstr	s15, [r3]
			valve_state = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port, IN_Prop_ActuatedVent_Feedback_Pin);
 8002f78:	2102      	movs	r1, #2
 8002f7a:	4876      	ldr	r0, [pc, #472]	; (8003154 <main+0x6b0>)
 8002f7c:	f003 fad4 	bl	8006528 <HAL_GPIO_ReadPin>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b74      	ldr	r3, [pc, #464]	; (8003158 <main+0x6b4>)
 8002f86:	701a      	strb	r2, [r3, #0]

			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002f88:	4b71      	ldr	r3, [pc, #452]	; (8003150 <main+0x6ac>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fafb 	bl	8000588 <__aeabi_f2d>
 8002f92:	4604      	mov	r4, r0
 8002f94:	460d      	mov	r5, r1
 8002f96:	4b6d      	ldr	r3, [pc, #436]	; (800314c <main+0x6a8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd faf4 	bl	8000588 <__aeabi_f2d>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	496c      	ldr	r1, [pc, #432]	; (8003158 <main+0x6b4>)
 8002fa6:	7809      	ldrb	r1, [r1, #0]
 8002fa8:	4608      	mov	r0, r1
					tank_pressure, tank_temperature, valve_state, stimeget.Minutes,
 8002faa:	495d      	ldr	r1, [pc, #372]	; (8003120 <main+0x67c>)
 8002fac:	7849      	ldrb	r1, [r1, #1]
			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002fae:	460e      	mov	r6, r1
					stimeget.Seconds, stimeget.SubSeconds);
 8002fb0:	495b      	ldr	r1, [pc, #364]	; (8003120 <main+0x67c>)
 8002fb2:	7889      	ldrb	r1, [r1, #2]
			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002fb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fb6:	495a      	ldr	r1, [pc, #360]	; (8003120 <main+0x67c>)
 8002fb8:	6849      	ldr	r1, [r1, #4]
 8002fba:	9105      	str	r1, [sp, #20]
 8002fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fbe:	9104      	str	r1, [sp, #16]
 8002fc0:	9603      	str	r6, [sp, #12]
 8002fc2:	9002      	str	r0, [sp, #8]
 8002fc4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fc8:	4622      	mov	r2, r4
 8002fca:	462b      	mov	r3, r5
 8002fcc:	4963      	ldr	r1, [pc, #396]	; (800315c <main+0x6b8>)
 8002fce:	4864      	ldr	r0, [pc, #400]	; (8003160 <main+0x6bc>)
 8002fd0:	f00c fb0c 	bl	800f5ec <siprintf>
		// -----  FORMATTING TELEMETRY ----- //

		// avionics message
		sprintf((char*) msg_buffer_av,
				"S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002fd4:	4b4f      	ldr	r3, [pc, #316]	; (8003114 <main+0x670>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) msg_buffer_av,
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7fd fad5 	bl	8000588 <__aeabi_f2d>
 8002fde:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <main+0x670>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) msg_buffer_av,
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd face 	bl	8000588 <__aeabi_f2d>
 8002fec:	e9c7 0108 	strd	r0, r1, [r7, #32]
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002ff0:	4b48      	ldr	r3, [pc, #288]	; (8003114 <main+0x670>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) msg_buffer_av,
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fac7 	bl	8000588 <__aeabi_f2d>
 8002ffa:	e9c7 0106 	strd	r0, r1, [r7, #24]
				angular_rate_mdps[0], angular_rate_mdps[1],
 8002ffe:	4b46      	ldr	r3, [pc, #280]	; (8003118 <main+0x674>)
 8003000:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) msg_buffer_av,
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fac0 	bl	8000588 <__aeabi_f2d>
 8003008:	e9c7 0104 	strd	r0, r1, [r7, #16]
				angular_rate_mdps[0], angular_rate_mdps[1],
 800300c:	4b42      	ldr	r3, [pc, #264]	; (8003118 <main+0x674>)
 800300e:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) msg_buffer_av,
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fab9 	bl	8000588 <__aeabi_f2d>
 8003016:	e9c7 0102 	strd	r0, r1, [r7, #8]
				angular_rate_mdps[2], pressure_hPa, latitude, longitude,
 800301a:	4b3f      	ldr	r3, [pc, #252]	; (8003118 <main+0x674>)
 800301c:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) msg_buffer_av,
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd fab2 	bl	8000588 <__aeabi_f2d>
 8003024:	4605      	mov	r5, r0
 8003026:	460e      	mov	r6, r1
 8003028:	4b4e      	ldr	r3, [pc, #312]	; (8003164 <main+0x6c0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd faab 	bl	8000588 <__aeabi_f2d>
 8003032:	4682      	mov	sl, r0
 8003034:	468b      	mov	fp, r1
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <main+0x698>)
 8003038:	e9d3 8900 	ldrd	r8, r9, [r3]
 800303c:	4b3e      	ldr	r3, [pc, #248]	; (8003138 <main+0x694>)
 800303e:	e9d3 0100 	ldrd	r0, r1, [r3]
				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8003042:	4b37      	ldr	r3, [pc, #220]	; (8003120 <main+0x67c>)
 8003044:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) msg_buffer_av,
 8003046:	607b      	str	r3, [r7, #4]
				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <main+0x67c>)
 800304a:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) msg_buffer_av,
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	4b34      	ldr	r3, [pc, #208]	; (8003120 <main+0x67c>)
 8003050:	685c      	ldr	r4, [r3, #4]
 8003052:	4b36      	ldr	r3, [pc, #216]	; (800312c <main+0x688>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <main+0x6a4>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	b2db      	uxtb	r3, r3
 8003060:	9314      	str	r3, [sp, #80]	; 0x50
 8003062:	9213      	str	r2, [sp, #76]	; 0x4c
 8003064:	9412      	str	r4, [sp, #72]	; 0x48
 8003066:	683c      	ldr	r4, [r7, #0]
 8003068:	9411      	str	r4, [sp, #68]	; 0x44
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	9310      	str	r3, [sp, #64]	; 0x40
 800306e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003072:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003076:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800307a:	e9cd 5608 	strd	r5, r6, [sp, #32]
 800307e:	ed97 7b02 	vldr	d7, [r7, #8]
 8003082:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003086:	ed97 7b04 	vldr	d7, [r7, #16]
 800308a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800308e:	ed97 7b06 	vldr	d7, [r7, #24]
 8003092:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003096:	ed97 7b08 	vldr	d7, [r7, #32]
 800309a:	ed8d 7b00 	vstr	d7, [sp]
 800309e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030a2:	4931      	ldr	r1, [pc, #196]	; (8003168 <main+0x6c4>)
 80030a4:	4831      	ldr	r0, [pc, #196]	; (800316c <main+0x6c8>)
 80030a6:	f00c faa1 	bl	800f5ec <siprintf>
				continuity, state);

		// save to sd and flash
		fres = sd_open_file(filename);
 80030aa:	4831      	ldr	r0, [pc, #196]	; (8003170 <main+0x6cc>)
 80030ac:	f000 fee6 	bl	8003e7c <sd_open_file>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b2f      	ldr	r3, [pc, #188]	; (8003174 <main+0x6d0>)
 80030b6:	701a      	strb	r2, [r3, #0]
		sd_write(&fil, msg_buffer_av);
 80030b8:	492c      	ldr	r1, [pc, #176]	; (800316c <main+0x6c8>)
 80030ba:	482f      	ldr	r0, [pc, #188]	; (8003178 <main+0x6d4>)
 80030bc:	f000 fef6 	bl	8003eac <sd_write>
		if (state < FLIGHT_STATE_PRE_MAIN) {
 80030c0:	4b21      	ldr	r3, [pc, #132]	; (8003148 <main+0x6a4>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d803      	bhi.n	80030d2 <main+0x62e>
			sd_write(&fil, msg_buffer_pr);
 80030ca:	4925      	ldr	r1, [pc, #148]	; (8003160 <main+0x6bc>)
 80030cc:	482a      	ldr	r0, [pc, #168]	; (8003178 <main+0x6d4>)
 80030ce:	f000 feed 	bl	8003eac <sd_write>
		}
		f_close(&fil);
 80030d2:	4829      	ldr	r0, [pc, #164]	; (8003178 <main+0x6d4>)
 80030d4:	f00a ffa3 	bl	800e01e <f_close>
//			debug_tx_uart(msg_buffer_av);
//			debug_tx_uart(msg_buffer_pr);
		#endif

		// check which state of flight we are in
		check_flight_state(&state);
 80030d8:	481b      	ldr	r0, [pc, #108]	; (8003148 <main+0x6a4>)
 80030da:	f000 fb2b 	bl	8003734 <check_flight_state>

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80030de:	2200      	movs	r2, #0
 80030e0:	2102      	movs	r1, #2
 80030e2:	4807      	ldr	r0, [pc, #28]	; (8003100 <main+0x65c>)
 80030e4:	f003 fa38 	bl	8006558 <HAL_GPIO_WritePin>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	#ifdef TIMING_ITM
	  ITM_Port32(31) = i;
 80030e8:	4a24      	ldr	r2, [pc, #144]	; (800317c <main+0x6d8>)
 80030ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ec:	6013      	str	r3, [r2, #0]
  for (uint32_t i = 2; i < 2+10; i++)
 80030ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f0:	3301      	adds	r3, #1
 80030f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f6:	2b0b      	cmp	r3, #11
 80030f8:	f67f aea6 	bls.w	8002e48 <main+0x3a4>
	#endif
  }

#ifdef TIMING_ITM
  while (1); // prevent hardfault if main() exits
 80030fc:	e7fe      	b.n	80030fc <main+0x658>
 80030fe:	bf00      	nop
 8003100:	40020800 	.word	0x40020800
 8003104:	2000039d 	.word	0x2000039d
 8003108:	200006b8 	.word	0x200006b8
 800310c:	200014a4 	.word	0x200014a4
 8003110:	20000c20 	.word	0x20000c20
 8003114:	20000238 	.word	0x20000238
 8003118:	20000244 	.word	0x20000244
 800311c:	2000038c 	.word	0x2000038c
 8003120:	20000264 	.word	0x20000264
 8003124:	20000e6c 	.word	0x20000e6c
 8003128:	20000278 	.word	0x20000278
 800312c:	20000237 	.word	0x20000237
 8003130:	20000254 	.word	0x20000254
 8003134:	20000b10 	.word	0x20000b10
 8003138:	20000b08 	.word	0x20000b08
 800313c:	20000c18 	.word	0x20000c18
 8003140:	20000a58 	.word	0x20000a58
 8003144:	20001584 	.word	0x20001584
 8003148:	20000385 	.word	0x20000385
 800314c:	20000258 	.word	0x20000258
 8003150:	2000025c 	.word	0x2000025c
 8003154:	40020400 	.word	0x40020400
 8003158:	20000260 	.word	0x20000260
 800315c:	08014958 	.word	0x08014958
 8003160:	20000344 	.word	0x20000344
 8003164:	20000250 	.word	0x20000250
 8003168:	080148fc 	.word	0x080148fc
 800316c:	2000027c 	.word	0x2000027c
 8003170:	20000378 	.word	0x20000378
 8003174:	20000c38 	.word	0x20000c38
 8003178:	20000c3c 	.word	0x20000c3c
 800317c:	e000007c 	.word	0xe000007c

08003180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b0a0      	sub	sp, #128	; 0x80
 8003184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003186:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800318a:	2230      	movs	r2, #48	; 0x30
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f00b faea 	bl	800e768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003194:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031a4:	f107 030c 	add.w	r3, r7, #12
 80031a8:	2230      	movs	r2, #48	; 0x30
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f00b fadb 	bl	800e768 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	4b31      	ldr	r3, [pc, #196]	; (800327c <SystemClock_Config+0xfc>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	4a30      	ldr	r2, [pc, #192]	; (800327c <SystemClock_Config+0xfc>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6413      	str	r3, [r2, #64]	; 0x40
 80031c2:	4b2e      	ldr	r3, [pc, #184]	; (800327c <SystemClock_Config+0xfc>)
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80031ce:	2300      	movs	r3, #0
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <SystemClock_Config+0x100>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80031da:	4a29      	ldr	r2, [pc, #164]	; (8003280 <SystemClock_Config+0x100>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b27      	ldr	r3, [pc, #156]	; (8003280 <SystemClock_Config+0x100>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80031ee:	2309      	movs	r3, #9
 80031f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80031f8:	2301      	movs	r3, #1
 80031fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031fc:	2302      	movs	r3, #2
 80031fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003200:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003204:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003206:	2308      	movs	r3, #8
 8003208:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 800320a:	2348      	movs	r3, #72	; 0x48
 800320c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800320e:	2302      	movs	r3, #2
 8003210:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003212:	2304      	movs	r3, #4
 8003214:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003216:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800321a:	4618      	mov	r0, r3
 800321c:	f004 fa22 	bl	8007664 <HAL_RCC_OscConfig>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003226:	f000 fbeb 	bl	8003a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800322a:	230f      	movs	r3, #15
 800322c:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800322e:	2302      	movs	r3, #2
 8003230:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003232:	2300      	movs	r3, #0
 8003234:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800323a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800323c:	2300      	movs	r3, #0
 800323e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003240:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003244:	2102      	movs	r1, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f004 fc7c 	bl	8007b44 <HAL_RCC_ClockConfig>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003252:	f000 fbd5 	bl	8003a00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003256:	2320      	movs	r3, #32
 8003258:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800325a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800325e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	4618      	mov	r0, r3
 8003266:	f004 fe67 	bl	8007f38 <HAL_RCCEx_PeriphCLKConfig>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8003270:	f000 fbc6 	bl	8003a00 <Error_Handler>
  }
}
 8003274:	bf00      	nop
 8003276:	3780      	adds	r7, #128	; 0x80
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40023800 	.word	0x40023800
 8003280:	40007000 	.word	0x40007000

08003284 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin) {
 800328e:	88fb      	ldrh	r3, [r7, #6]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d110      	bne.n	80032b6 <HAL_GPIO_EXTI_Callback+0x32>
		button_pressed = 1;
 8003294:	4b38      	ldr	r3, [pc, #224]	; (8003378 <HAL_GPIO_EXTI_Callback+0xf4>)
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
		state++;
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <HAL_GPIO_EXTI_Callback+0xf8>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3301      	adds	r3, #1
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b35      	ldr	r3, [pc, #212]	; (800337c <HAL_GPIO_EXTI_Callback+0xf8>)
 80032a6:	701a      	strb	r2, [r3, #0]

		__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 80032a8:	4b35      	ldr	r3, [pc, #212]	; (8003380 <HAL_GPIO_EXTI_Callback+0xfc>)
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	4a34      	ldr	r2, [pc, #208]	; (8003380 <HAL_GPIO_EXTI_Callback+0xfc>)
 80032ae:	f043 0310 	orr.w	r3, r3, #16
 80032b2:	6113      	str	r3, [r2, #16]
//			HAL_UART_Transmit(&huart8, "10hz\r\n", 6, HAL_MAX_DELAY);
			state = 0;
			break;
		}
	}
}
 80032b4:	e05a      	b.n	800336c <HAL_GPIO_EXTI_Callback+0xe8>
	else if (GPIO_Pin == EXTI_SWIER_SWIER4) { // software interrupt to change timer settings
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d156      	bne.n	800336a <HAL_GPIO_EXTI_Callback+0xe6>
		switch (state) {
 80032bc:	4b2f      	ldr	r3, [pc, #188]	; (800337c <HAL_GPIO_EXTI_Callback+0xf8>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d843      	bhi.n	800334e <HAL_GPIO_EXTI_Callback+0xca>
 80032c6:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <HAL_GPIO_EXTI_Callback+0x48>)
 80032c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032cc:	080032e1 	.word	0x080032e1
 80032d0:	080032f7 	.word	0x080032f7
 80032d4:	0800330d 	.word	0x0800330d
 80032d8:	08003323 	.word	0x08003323
 80032dc:	08003339 	.word	0x08003339
			TIM3->ARR = 1000-1;
 80032e0:	4b28      	ldr	r3, [pc, #160]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 80032e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 80032e8:	4b26      	ldr	r3, [pc, #152]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	4a25      	ldr	r2, [pc, #148]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	6153      	str	r3, [r2, #20]
			break;
 80032f4:	e03a      	b.n	800336c <HAL_GPIO_EXTI_Callback+0xe8>
			TIM3->ARR = 5000-1;
 80032f6:	4b23      	ldr	r3, [pc, #140]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 80032f8:	f241 3287 	movw	r2, #4999	; 0x1387
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 80032fe:	4b21      	ldr	r3, [pc, #132]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4a20      	ldr	r2, [pc, #128]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6153      	str	r3, [r2, #20]
			break;
 800330a:	e02f      	b.n	800336c <HAL_GPIO_EXTI_Callback+0xe8>
			TIM3->ARR = 2000-1;
 800330c:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 800330e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	6153      	str	r3, [r2, #20]
			break;
 8003320:	e024      	b.n	800336c <HAL_GPIO_EXTI_Callback+0xe8>
			TIM3->ARR = 1000-1;
 8003322:	4b18      	ldr	r3, [pc, #96]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 8003324:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 800332a:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6153      	str	r3, [r2, #20]
			break;
 8003336:	e019      	b.n	800336c <HAL_GPIO_EXTI_Callback+0xe8>
			TIM3->ARR = 20000-1;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 800333a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 8003340:	4b10      	ldr	r3, [pc, #64]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	4a0f      	ldr	r2, [pc, #60]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6153      	str	r3, [r2, #20]
			break;
 800334c:	e00e      	b.n	800336c <HAL_GPIO_EXTI_Callback+0xe8>
			TIM3->ARR = 1000-1;
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 8003350:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003354:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <HAL_GPIO_EXTI_Callback+0x100>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6153      	str	r3, [r2, #20]
			state = 0;
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_GPIO_EXTI_Callback+0xf8>)
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
			break;
 8003368:	e000      	b.n	800336c <HAL_GPIO_EXTI_Callback+0xe8>
	}
 800336a:	bf00      	nop
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	20000236 	.word	0x20000236
 800337c:	20000385 	.word	0x20000385
 8003380:	40013c00 	.word	0x40013c00
 8003384:	40000400 	.word	0x40000400

08003388 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) { // gps
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a15      	ldr	r2, [pc, #84]	; (80033e8 <HAL_UART_RxCpltCallback+0x60>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d107      	bne.n	80033a8 <HAL_UART_RxCpltCallback+0x20>

		// received data from GPS into buffer.
		// insert null termination and parse buffer (total buffer length is GPS_RX_DMA_BUF_LEN + 1)
		gps_rx_buf[GPS_RX_DMA_BUF_LEN] = '\0';
 8003398:	4b14      	ldr	r3, [pc, #80]	; (80033ec <HAL_UART_RxCpltCallback+0x64>)
 800339a:	2200      	movs	r2, #0
 800339c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		gps_dma_ready = 1;
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_UART_RxCpltCallback+0x68>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
			arming_recovery();
		}

		// main loop will clear the buffer and start new DMA request
	}
}
 80033a6:	e01b      	b.n	80033e0 <HAL_UART_RxCpltCallback+0x58>
	else if (huart == &huart3) { // xtend radio
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <HAL_UART_RxCpltCallback+0x6c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d117      	bne.n	80033e0 <HAL_UART_RxCpltCallback+0x58>
		xtend_rx_dma_ready = 1;
 80033b0:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <HAL_UART_RxCpltCallback+0x70>)
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
		radio_command cmd = xtend_parse_dma_command();
 80033b6:	f000 fb31 	bl	8003a1c <xtend_parse_dma_command>
 80033ba:	4603      	mov	r3, r0
 80033bc:	73fb      	strb	r3, [r7, #15]
		if (cmd == LAUNCH) {
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d102      	bne.n	80033ca <HAL_UART_RxCpltCallback+0x42>
			rocket_launch();
 80033c4:	f000 fbf0 	bl	8003ba8 <rocket_launch>
}
 80033c8:	e00a      	b.n	80033e0 <HAL_UART_RxCpltCallback+0x58>
		else if (cmd == ARM_PROP) {
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d102      	bne.n	80033d6 <HAL_UART_RxCpltCallback+0x4e>
			arming_propulsion();
 80033d0:	f000 fc04 	bl	8003bdc <arming_propulsion>
}
 80033d4:	e004      	b.n	80033e0 <HAL_UART_RxCpltCallback+0x58>
		else if (cmd == ARM_RCOV) {
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d101      	bne.n	80033e0 <HAL_UART_RxCpltCallback+0x58>
			arming_recovery();
 80033dc:	f000 fc0a 	bl	8003bf4 <arming_recovery>
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20001584 	.word	0x20001584
 80033ec:	20000a58 	.word	0x20000a58
 80033f0:	20000254 	.word	0x20000254
 80033f4:	200014a4 	.word	0x200014a4
 80033f8:	2000039d 	.word	0x2000039d

080033fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a0f      	ldr	r2, [pc, #60]	; (8003444 <HAL_UART_TxCpltCallback+0x48>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d114      	bne.n	8003436 <HAL_UART_TxCpltCallback+0x3a>
		// don't care who started it, transmit is complete
		xtend_tx_start_av = 0;
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <HAL_UART_TxCpltCallback+0x4c>)
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
		xtend_tx_start_pr = 0;
 8003412:	4b0e      	ldr	r3, [pc, #56]	; (800344c <HAL_UART_TxCpltCallback+0x50>)
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]

		num_radio_transmissions++;
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_UART_TxCpltCallback+0x54>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	3301      	adds	r3, #1
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b0b      	ldr	r3, [pc, #44]	; (8003450 <HAL_UART_TxCpltCallback+0x54>)
 8003424:	701a      	strb	r2, [r3, #0]
		if (num_radio_transmissions == 10) {
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <HAL_UART_TxCpltCallback+0x54>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b0a      	cmp	r3, #10
 800342e:	d102      	bne.n	8003436 <HAL_UART_TxCpltCallback+0x3a>
			num_radio_transmissions = 0;
 8003430:	4b07      	ldr	r3, [pc, #28]	; (8003450 <HAL_UART_TxCpltCallback+0x54>)
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	200014a4 	.word	0x200014a4
 8003448:	2000039e 	.word	0x2000039e
 800344c:	2000039f 	.word	0x2000039f
 8003450:	20000386 	.word	0x20000386

08003454 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a4f      	ldr	r2, [pc, #316]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003460:	4293      	cmp	r3, r2
 8003462:	f040 808f 	bne.w	8003584 <HAL_TIM_PeriodElapsedCallback+0x130>
		HAL_GPIO_TogglePin(LEDF_GPIO_Port, LEDF_Pin);
 8003466:	2108      	movs	r1, #8
 8003468:	484d      	ldr	r0, [pc, #308]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800346a:	f003 f88e 	bl	800658a <HAL_GPIO_TogglePin>
//		HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, SET);

		switch (state) {
 800346e:	4b4d      	ldr	r3, [pc, #308]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_TIM_PeriodElapsedCallback+0x2a>
 8003478:	2b01      	cmp	r3, #1
 800347a:	d03c      	beq.n	80034f6 <HAL_TIM_PeriodElapsedCallback+0xa2>
 800347c:	e073      	b.n	8003566 <HAL_TIM_PeriodElapsedCallback+0x112>
		case FLIGHT_STATE_PAD:

			// send av
			if (num_radio_transmissions % 5 == 0 && xtend_tx_start_pr == 0 && xtend_tx_start_av == 0) {
 800347e:	4b4a      	ldr	r3, [pc, #296]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	b2da      	uxtb	r2, r3
 8003484:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003486:	fba3 1302 	umull	r1, r3, r3, r2
 800348a:	0899      	lsrs	r1, r3, #2
 800348c:	460b      	mov	r3, r1
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d116      	bne.n	80034c8 <HAL_TIM_PeriodElapsedCallback+0x74>
 800349a:	4b45      	ldr	r3, [pc, #276]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d111      	bne.n	80034c8 <HAL_TIM_PeriodElapsedCallback+0x74>
 80034a4:	4b43      	ldr	r3, [pc, #268]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d10c      	bne.n	80034c8 <HAL_TIM_PeriodElapsedCallback+0x74>
				radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 80034ae:	4842      	ldr	r0, [pc, #264]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80034b0:	f7fc fea8 	bl	8000204 <strlen>
 80034b4:	4603      	mov	r3, r0
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4619      	mov	r1, r3
 80034ba:	483f      	ldr	r0, [pc, #252]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80034bc:	f7ff faa6 	bl	8002a0c <radio_tx>
				xtend_tx_start_av = 1;
 80034c0:	4b3c      	ldr	r3, [pc, #240]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
			// send prop
			else if (xtend_tx_start_av == 0 && xtend_tx_start_pr == 0) {
				radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
				xtend_tx_start_pr = 1;
			}
			break;
 80034c6:	e05f      	b.n	8003588 <HAL_TIM_PeriodElapsedCallback+0x134>
			else if (xtend_tx_start_av == 0 && xtend_tx_start_pr == 0) {
 80034c8:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d15a      	bne.n	8003588 <HAL_TIM_PeriodElapsedCallback+0x134>
 80034d2:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d155      	bne.n	8003588 <HAL_TIM_PeriodElapsedCallback+0x134>
				radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 80034dc:	4837      	ldr	r0, [pc, #220]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x168>)
 80034de:	f7fc fe91 	bl	8000204 <strlen>
 80034e2:	4603      	mov	r3, r0
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4619      	mov	r1, r3
 80034e8:	4834      	ldr	r0, [pc, #208]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x168>)
 80034ea:	f7ff fa8f 	bl	8002a0c <radio_tx>
				xtend_tx_start_pr = 1;
 80034ee:	4b30      	ldr	r3, [pc, #192]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
			break;
 80034f4:	e048      	b.n	8003588 <HAL_TIM_PeriodElapsedCallback+0x134>

		case FLIGHT_STATE_PRE_APOGEE:
			// transmit avionics and prop at equal priority
			if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 0) {
 80034f6:	4b2e      	ldr	r3, [pc, #184]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d116      	bne.n	800352e <HAL_TIM_PeriodElapsedCallback+0xda>
 8003500:	4b2c      	ldr	r3, [pc, #176]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d111      	bne.n	800352e <HAL_TIM_PeriodElapsedCallback+0xda>
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_TIM_PeriodElapsedCallback+0xda>
				radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 800351a:	4827      	ldr	r0, [pc, #156]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800351c:	f7fc fe72 	bl	8000204 <strlen>
 8003520:	4603      	mov	r3, r0
 8003522:	b29b      	uxth	r3, r3
 8003524:	4619      	mov	r1, r3
 8003526:	4824      	ldr	r0, [pc, #144]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003528:	f7ff fa70 	bl	8002a0c <radio_tx>
			}
			else if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 1) {
				radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
			}
			break;
 800352c:	e02e      	b.n	800358c <HAL_TIM_PeriodElapsedCallback+0x138>
			else if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 1) {
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d129      	bne.n	800358c <HAL_TIM_PeriodElapsedCallback+0x138>
 8003538:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d124      	bne.n	800358c <HAL_TIM_PeriodElapsedCallback+0x138>
 8003542:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b01      	cmp	r3, #1
 8003550:	d11c      	bne.n	800358c <HAL_TIM_PeriodElapsedCallback+0x138>
				radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 8003552:	481a      	ldr	r0, [pc, #104]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003554:	f7fc fe56 	bl	8000204 <strlen>
 8003558:	4603      	mov	r3, r0
 800355a:	b29b      	uxth	r3, r3
 800355c:	4619      	mov	r1, r3
 800355e:	4817      	ldr	r0, [pc, #92]	; (80035bc <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003560:	f7ff fa54 	bl	8002a0c <radio_tx>
			break;
 8003564:	e012      	b.n	800358c <HAL_TIM_PeriodElapsedCallback+0x138>

		default:
			if (xtend_tx_start_av == 0) {
 8003566:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10f      	bne.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x13c>
				radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 8003570:	4811      	ldr	r0, [pc, #68]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003572:	f7fc fe47 	bl	8000204 <strlen>
 8003576:	4603      	mov	r3, r0
 8003578:	b29b      	uxth	r3, r3
 800357a:	4619      	mov	r1, r3
 800357c:	480e      	ldr	r0, [pc, #56]	; (80035b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800357e:	f7ff fa45 	bl	8002a0c <radio_tx>
			}
			break;
 8003582:	e005      	b.n	8003590 <HAL_TIM_PeriodElapsedCallback+0x13c>
		}

//		HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
	}
 8003584:	bf00      	nop
 8003586:	e004      	b.n	8003592 <HAL_TIM_PeriodElapsedCallback+0x13e>
			break;
 8003588:	bf00      	nop
 800358a:	e002      	b.n	8003592 <HAL_TIM_PeriodElapsedCallback+0x13e>
			break;
 800358c:	bf00      	nop
 800358e:	e000      	b.n	8003592 <HAL_TIM_PeriodElapsedCallback+0x13e>
			break;
 8003590:	bf00      	nop
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20001364 	.word	0x20001364
 80035a0:	40020000 	.word	0x40020000
 80035a4:	20000385 	.word	0x20000385
 80035a8:	20000386 	.word	0x20000386
 80035ac:	cccccccd 	.word	0xcccccccd
 80035b0:	2000039f 	.word	0x2000039f
 80035b4:	2000039e 	.word	0x2000039e
 80035b8:	2000027c 	.word	0x2000027c
 80035bc:	20000344 	.word	0x20000344

080035c0 <getAltitude>:

float getAltitude(void) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
	get_pressure(dev_ctx_lps, &pressure_hPa);
 80035c6:	4a22      	ldr	r2, [pc, #136]	; (8003650 <getAltitude+0x90>)
 80035c8:	4b22      	ldr	r3, [pc, #136]	; (8003654 <getAltitude+0x94>)
 80035ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80035cc:	f7fe fd60 	bl	8002090 <get_pressure>
	uint32_t altitude = 145442.1609 * (1.0 - pow(pressure_hPa/local_pressure, 0.190266436));
 80035d0:	4b20      	ldr	r3, [pc, #128]	; (8003654 <getAltitude+0x94>)
 80035d2:	ed93 7a00 	vldr	s14, [r3]
 80035d6:	4b20      	ldr	r3, [pc, #128]	; (8003658 <getAltitude+0x98>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
 80035dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80035e0:	ee16 0a90 	vmov	r0, s13
 80035e4:	f7fc ffd0 	bl	8000588 <__aeabi_f2d>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8003640 <getAltitude+0x80>
 80035f0:	ec43 2b10 	vmov	d0, r2, r3
 80035f4:	f010 f966 	bl	80138c4 <pow>
 80035f8:	ec53 2b10 	vmov	r2, r3, d0
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	4916      	ldr	r1, [pc, #88]	; (800365c <getAltitude+0x9c>)
 8003602:	f7fc fe61 	bl	80002c8 <__aeabi_dsub>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	a30e      	add	r3, pc, #56	; (adr r3, 8003648 <getAltitude+0x88>)
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f7fd f810 	bl	8000638 <__aeabi_dmul>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	f7fd fae2 	bl	8000be8 <__aeabi_d2uiz>
 8003624:	4603      	mov	r3, r0
 8003626:	607b      	str	r3, [r7, #4]
	return altitude;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8003632:	eeb0 0a67 	vmov.f32	s0, s15
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	f3af 8000 	nop.w
 8003640:	8c12bfc3 	.word	0x8c12bfc3
 8003644:	3fc85aa6 	.word	0x3fc85aa6
 8003648:	4985f06f 	.word	0x4985f06f
 800364c:	4101c111 	.word	0x4101c111
 8003650:	20000c2c 	.word	0x20000c2c
 8003654:	20000250 	.word	0x20000250
 8003658:	20000000 	.word	0x20000000
 800365c:	3ff00000 	.word	0x3ff00000

08003660 <get_continuity>:

	W25qxx_WriteBlock(msg_buffer, block_address, block_offset, strlen((const char *)msg_buffer));
	flash_write_address += strlen((const char *)msg_buffer);
}

uint8_t get_continuity(void) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
	// read pins
	GPIO_PinState drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 8003666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800366a:	4817      	ldr	r0, [pc, #92]	; (80036c8 <get_continuity+0x68>)
 800366c:	f002 ff5c 	bl	8006528 <HAL_GPIO_ReadPin>
 8003670:	4603      	mov	r3, r0
 8003672:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 8003674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003678:	4813      	ldr	r0, [pc, #76]	; (80036c8 <get_continuity+0x68>)
 800367a:	f002 ff55 	bl	8006528 <HAL_GPIO_ReadPin>
 800367e:	4603      	mov	r3, r0
 8003680:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 8003682:	2101      	movs	r1, #1
 8003684:	4810      	ldr	r0, [pc, #64]	; (80036c8 <get_continuity+0x68>)
 8003686:	f002 ff4f 	bl	8006528 <HAL_GPIO_ReadPin>
 800368a:	4603      	mov	r3, r0
 800368c:	717b      	strb	r3, [r7, #5]
	GPIO_PinState prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 800368e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003692:	480e      	ldr	r0, [pc, #56]	; (80036cc <get_continuity+0x6c>)
 8003694:	f002 ff48 	bl	8006528 <HAL_GPIO_ReadPin>
 8003698:	4603      	mov	r3, r0
 800369a:	713b      	strb	r3, [r7, #4]

	// assign one-hot encoded result (apparently you can multiply enums?)
	uint8_t continuity = (drogue) + (main * 2) + (prop_1 * 4) + (prop_2 * 8);
 800369c:	793b      	ldrb	r3, [r7, #4]
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	797b      	ldrb	r3, [r7, #5]
 80036a4:	4413      	add	r3, r2
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	79bb      	ldrb	r3, [r7, #6]
 80036ae:	4413      	add	r3, r2
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	4413      	add	r3, r2
 80036ba:	70fb      	strb	r3, [r7, #3]
	return continuity;
 80036bc:	78fb      	ldrb	r3, [r7, #3]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40021800 	.word	0x40021800
 80036cc:	40021400 	.word	0x40021400

080036d0 <prop_poll_pressure_transducer>:

float prop_poll_pressure_transducer(void) {
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
	// reading adc
	HAL_ADC_Start(&hadc1);
 80036d6:	4816      	ldr	r0, [pc, #88]	; (8003730 <prop_poll_pressure_transducer+0x60>)
 80036d8:	f001 fd1e 	bl	8005118 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80036dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036e0:	4813      	ldr	r0, [pc, #76]	; (8003730 <prop_poll_pressure_transducer+0x60>)
 80036e2:	f001 fe12 	bl	800530a <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(&hadc1);
 80036e6:	4812      	ldr	r0, [pc, #72]	; (8003730 <prop_poll_pressure_transducer+0x60>)
 80036e8:	f001 fe93 	bl	8005412 <HAL_ADC_GetValue>
 80036ec:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 80036ee:	4810      	ldr	r0, [pc, #64]	; (8003730 <prop_poll_pressure_transducer+0x60>)
 80036f0:	f001 fdd8 	bl	80052a4 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0); // assuming 12 bits
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7fc ff25 	bl	8000544 <__aeabi_ui2d>
 80036fa:	a30b      	add	r3, pc, #44	; (adr r3, 8003728 <prop_poll_pressure_transducer+0x58>)
 80036fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003700:	f7fd f8c4 	bl	800088c <__aeabi_ddiv>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f7fd fa8c 	bl	8000c28 <__aeabi_d2f>
 8003710:	4603      	mov	r3, r0
 8003712:	603b      	str	r3, [r7, #0]

	// convert using transfer function
	// TODO

	return voltage;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	ee07 3a90 	vmov	s15, r3
}
 800371a:	eeb0 0a67 	vmov.f32	s0, s15
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	f3af 8000 	nop.w
 8003728:	00000000 	.word	0x00000000
 800372c:	40affe00 	.word	0x40affe00
 8003730:	20000558 	.word	0x20000558

08003734 <check_flight_state>:

void check_flight_state(uint8_t *state) {
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
	// logic to change states of flight
	switch (*state) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b04      	cmp	r3, #4
 8003742:	f200 812b 	bhi.w	800399c <check_flight_state+0x268>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <check_flight_state+0x18>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	08003761 	.word	0x08003761
 8003750:	080037bd 	.word	0x080037bd
 8003754:	0800383b 	.word	0x0800383b
 8003758:	080038b7 	.word	0x080038b7
 800375c:	08003967 	.word	0x08003967
	case FLIGHT_STATE_PAD: // launch pad, waiting. prioritize prop data

		// check current state
		if (alt_current - alt_ground > LAUNCH_ALT_CHANGE_THRESHOLD) { // launched
 8003760:	4b93      	ldr	r3, [pc, #588]	; (80039b0 <check_flight_state+0x27c>)
 8003762:	ed93 7a00 	vldr	s14, [r3]
 8003766:	4b93      	ldr	r3, [pc, #588]	; (80039b4 <check_flight_state+0x280>)
 8003768:	edd3 7a00 	vldr	s15, [r3]
 800376c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003770:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80039b8 <check_flight_state+0x284>
 8003774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377c:	dc00      	bgt.n	8003780 <check_flight_state+0x4c>

			// generate software interrupt to change TIM3 update rate
			__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
		}

		break;
 800377e:	e112      	b.n	80039a6 <check_flight_state+0x272>
			*state = FLIGHT_STATE_PRE_APOGEE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
			fres = sd_open_file(filename);
 8003786:	488d      	ldr	r0, [pc, #564]	; (80039bc <check_flight_state+0x288>)
 8003788:	f000 fb78 	bl	8003e7c <sd_open_file>
 800378c:	4603      	mov	r3, r0
 800378e:	461a      	mov	r2, r3
 8003790:	4b8b      	ldr	r3, [pc, #556]	; (80039c0 <check_flight_state+0x28c>)
 8003792:	701a      	strb	r2, [r3, #0]
			sd_write(&fil, (uint8_t *)"launched\r\n");
 8003794:	498b      	ldr	r1, [pc, #556]	; (80039c4 <check_flight_state+0x290>)
 8003796:	488c      	ldr	r0, [pc, #560]	; (80039c8 <check_flight_state+0x294>)
 8003798:	f000 fb88 	bl	8003eac <sd_write>
			f_close(&fil);
 800379c:	488a      	ldr	r0, [pc, #552]	; (80039c8 <check_flight_state+0x294>)
 800379e:	f00a fc3e 	bl	800e01e <f_close>
				HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, SET);
 80037a2:	2201      	movs	r2, #1
 80037a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037a8:	4888      	ldr	r0, [pc, #544]	; (80039cc <check_flight_state+0x298>)
 80037aa:	f002 fed5 	bl	8006558 <HAL_GPIO_WritePin>
			__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 80037ae:	4b88      	ldr	r3, [pc, #544]	; (80039d0 <check_flight_state+0x29c>)
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	4a87      	ldr	r2, [pc, #540]	; (80039d0 <check_flight_state+0x29c>)
 80037b4:	f043 0310 	orr.w	r3, r3, #16
 80037b8:	6113      	str	r3, [r2, #16]
		break;
 80037ba:	e0f4      	b.n	80039a6 <check_flight_state+0x272>

	case FLIGHT_STATE_PRE_APOGEE: // pre-apogee

		// check current state
		if (alt_current > alt_apogee) {
 80037bc:	4b7c      	ldr	r3, [pc, #496]	; (80039b0 <check_flight_state+0x27c>)
 80037be:	ed93 7a00 	vldr	s14, [r3]
 80037c2:	4b84      	ldr	r3, [pc, #528]	; (80039d4 <check_flight_state+0x2a0>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	dd07      	ble.n	80037e2 <check_flight_state+0xae>
			alt_apogee = alt_current;
 80037d2:	4b77      	ldr	r3, [pc, #476]	; (80039b0 <check_flight_state+0x27c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7f      	ldr	r2, [pc, #508]	; (80039d4 <check_flight_state+0x2a0>)
 80037d8:	6013      	str	r3, [r2, #0]
			num_descending_samples = 0;
 80037da:	4b7f      	ldr	r3, [pc, #508]	; (80039d8 <check_flight_state+0x2a4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
				// generate software interrupt to change TIM3 update rate
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
			}
		}

		break;
 80037e0:	e0de      	b.n	80039a0 <check_flight_state+0x26c>
			num_descending_samples++;
 80037e2:	4b7d      	ldr	r3, [pc, #500]	; (80039d8 <check_flight_state+0x2a4>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	3301      	adds	r3, #1
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <check_flight_state+0x2a4>)
 80037ec:	701a      	strb	r2, [r3, #0]
			if (num_descending_samples > APOGEE_NUM_DESCENDING_SAMPLES) {
 80037ee:	4b7a      	ldr	r3, [pc, #488]	; (80039d8 <check_flight_state+0x2a4>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b1e      	cmp	r3, #30
 80037f4:	f240 80d4 	bls.w	80039a0 <check_flight_state+0x26c>
				*state = FLIGHT_STATE_PRE_MAIN; // passed apogee
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	701a      	strb	r2, [r3, #0]
				num_descending_samples = 0;
 80037fe:	4b76      	ldr	r3, [pc, #472]	; (80039d8 <check_flight_state+0x2a4>)
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
				fres = sd_open_file(filename);
 8003804:	486d      	ldr	r0, [pc, #436]	; (80039bc <check_flight_state+0x288>)
 8003806:	f000 fb39 	bl	8003e7c <sd_open_file>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	4b6c      	ldr	r3, [pc, #432]	; (80039c0 <check_flight_state+0x28c>)
 8003810:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, (uint8_t *)"apogee\r\n");
 8003812:	4972      	ldr	r1, [pc, #456]	; (80039dc <check_flight_state+0x2a8>)
 8003814:	486c      	ldr	r0, [pc, #432]	; (80039c8 <check_flight_state+0x294>)
 8003816:	f000 fb49 	bl	8003eac <sd_write>
				f_close(&fil);
 800381a:	486b      	ldr	r0, [pc, #428]	; (80039c8 <check_flight_state+0x294>)
 800381c:	f00a fbff 	bl	800e01e <f_close>
					HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, SET);
 8003820:	2201      	movs	r2, #1
 8003822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003826:	4869      	ldr	r0, [pc, #420]	; (80039cc <check_flight_state+0x298>)
 8003828:	f002 fe96 	bl	8006558 <HAL_GPIO_WritePin>
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 800382c:	4b68      	ldr	r3, [pc, #416]	; (80039d0 <check_flight_state+0x29c>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	4a67      	ldr	r2, [pc, #412]	; (80039d0 <check_flight_state+0x29c>)
 8003832:	f043 0310 	orr.w	r3, r3, #16
 8003836:	6113      	str	r3, [r2, #16]
		break;
 8003838:	e0b2      	b.n	80039a0 <check_flight_state+0x26c>

	case FLIGHT_STATE_PRE_MAIN: // post-apogee

		// check current state
		if (alt_current < MAIN_DEPLOY_ALTITUDE) {
 800383a:	4b5d      	ldr	r3, [pc, #372]	; (80039b0 <check_flight_state+0x27c>)
 800383c:	edd3 7a00 	vldr	s15, [r3]
 8003840:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80039e0 <check_flight_state+0x2ac>
 8003844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384c:	d52f      	bpl.n	80038ae <check_flight_state+0x17a>
			num_descending_samples++;
 800384e:	4b62      	ldr	r3, [pc, #392]	; (80039d8 <check_flight_state+0x2a4>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	b2da      	uxtb	r2, r3
 8003856:	4b60      	ldr	r3, [pc, #384]	; (80039d8 <check_flight_state+0x2a4>)
 8003858:	701a      	strb	r2, [r3, #0]

			if (num_descending_samples > MAIN_NUM_DESCENDING_SAMPLES) {
 800385a:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <check_flight_state+0x2a4>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b0a      	cmp	r3, #10
 8003860:	f240 80a0 	bls.w	80039a4 <check_flight_state+0x270>
				*state = FLIGHT_STATE_PRE_LANDED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2203      	movs	r2, #3
 8003868:	701a      	strb	r2, [r3, #0]
				alt_prev = alt_current; // in next stage we need to know the previous altitude
 800386a:	4b51      	ldr	r3, [pc, #324]	; (80039b0 <check_flight_state+0x27c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5d      	ldr	r2, [pc, #372]	; (80039e4 <check_flight_state+0x2b0>)
 8003870:	6013      	str	r3, [r2, #0]
				num_descending_samples = 0;
 8003872:	4b59      	ldr	r3, [pc, #356]	; (80039d8 <check_flight_state+0x2a4>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]

				fres = sd_open_file(filename);
 8003878:	4850      	ldr	r0, [pc, #320]	; (80039bc <check_flight_state+0x288>)
 800387a:	f000 faff 	bl	8003e7c <sd_open_file>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	4b4f      	ldr	r3, [pc, #316]	; (80039c0 <check_flight_state+0x28c>)
 8003884:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, (uint8_t *)"main deployed\r\n");
 8003886:	4958      	ldr	r1, [pc, #352]	; (80039e8 <check_flight_state+0x2b4>)
 8003888:	484f      	ldr	r0, [pc, #316]	; (80039c8 <check_flight_state+0x294>)
 800388a:	f000 fb0f 	bl	8003eac <sd_write>
				f_close(&fil);
 800388e:	484e      	ldr	r0, [pc, #312]	; (80039c8 <check_flight_state+0x294>)
 8003890:	f00a fbc5 	bl	800e01e <f_close>

				#ifdef DEBUG
					HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, SET);
 8003894:	2201      	movs	r2, #1
 8003896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800389a:	4854      	ldr	r0, [pc, #336]	; (80039ec <check_flight_state+0x2b8>)
 800389c:	f002 fe5c 	bl	8006558 <HAL_GPIO_WritePin>
				#endif

				// generate software interrupt to change TIM3 update rate
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 80038a0:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <check_flight_state+0x29c>)
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	4a4a      	ldr	r2, [pc, #296]	; (80039d0 <check_flight_state+0x29c>)
 80038a6:	f043 0310 	orr.w	r3, r3, #16
 80038aa:	6113      	str	r3, [r2, #16]
			}
		} else {
			num_descending_samples = 0;
		}

		break;
 80038ac:	e07a      	b.n	80039a4 <check_flight_state+0x270>
			num_descending_samples = 0;
 80038ae:	4b4a      	ldr	r3, [pc, #296]	; (80039d8 <check_flight_state+0x2a4>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
		break;
 80038b4:	e076      	b.n	80039a4 <check_flight_state+0x270>

	case FLIGHT_STATE_PRE_LANDED:
		// post main deploy, want to transmit data fast to maximize possibility of getting good GPS coordinates

		// check current state
		alt_diff = alt_current - alt_prev;
 80038b6:	4b3e      	ldr	r3, [pc, #248]	; (80039b0 <check_flight_state+0x27c>)
 80038b8:	ed93 7a00 	vldr	s14, [r3]
 80038bc:	4b49      	ldr	r3, [pc, #292]	; (80039e4 <check_flight_state+0x2b0>)
 80038be:	edd3 7a00 	vldr	s15, [r3]
 80038c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c6:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <check_flight_state+0x2bc>)
 80038c8:	edc3 7a00 	vstr	s15, [r3]
		if (alt_diff < 0) {
 80038cc:	4b48      	ldr	r3, [pc, #288]	; (80039f0 <check_flight_state+0x2bc>)
 80038ce:	edd3 7a00 	vldr	s15, [r3]
 80038d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d507      	bpl.n	80038ec <check_flight_state+0x1b8>
			alt_diff *= -1; // absolute value
 80038dc:	4b44      	ldr	r3, [pc, #272]	; (80039f0 <check_flight_state+0x2bc>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	eef1 7a67 	vneg.f32	s15, s15
 80038e6:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <check_flight_state+0x2bc>)
 80038e8:	edc3 7a00 	vstr	s15, [r3]
		}

		if (alt_diff < LANDING_ALT_CHANGE_THRESHOLD) {
 80038ec:	4b40      	ldr	r3, [pc, #256]	; (80039f0 <check_flight_state+0x2bc>)
 80038ee:	edd3 7a00 	vldr	s15, [r3]
 80038f2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80038f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fe:	d52a      	bpl.n	8003956 <check_flight_state+0x222>
			num_descending_samples++;
 8003900:	4b35      	ldr	r3, [pc, #212]	; (80039d8 <check_flight_state+0x2a4>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	b2da      	uxtb	r2, r3
 8003908:	4b33      	ldr	r3, [pc, #204]	; (80039d8 <check_flight_state+0x2a4>)
 800390a:	701a      	strb	r2, [r3, #0]

			if (num_descending_samples > LANDING_NUM_DESCENDING_SAMPLES) {
 800390c:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <check_flight_state+0x2a4>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b14      	cmp	r3, #20
 8003912:	d923      	bls.n	800395c <check_flight_state+0x228>
				*state = FLIGHT_STATE_LANDED;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	701a      	strb	r2, [r3, #0]
				num_descending_samples = 0;
 800391a:	4b2f      	ldr	r3, [pc, #188]	; (80039d8 <check_flight_state+0x2a4>)
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]

				fres = sd_open_file(filename);
 8003920:	4826      	ldr	r0, [pc, #152]	; (80039bc <check_flight_state+0x288>)
 8003922:	f000 faab 	bl	8003e7c <sd_open_file>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <check_flight_state+0x28c>)
 800392c:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, (uint8_t *)"landed\r\n");
 800392e:	4931      	ldr	r1, [pc, #196]	; (80039f4 <check_flight_state+0x2c0>)
 8003930:	4825      	ldr	r0, [pc, #148]	; (80039c8 <check_flight_state+0x294>)
 8003932:	f000 fabb 	bl	8003eac <sd_write>
				f_close(&fil);
 8003936:	4824      	ldr	r0, [pc, #144]	; (80039c8 <check_flight_state+0x294>)
 8003938:	f00a fb71 	bl	800e01e <f_close>

				#ifdef DEBUG
					HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, SET);
 800393c:	2201      	movs	r2, #1
 800393e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003942:	482a      	ldr	r0, [pc, #168]	; (80039ec <check_flight_state+0x2b8>)
 8003944:	f002 fe08 	bl	8006558 <HAL_GPIO_WritePin>
				#endif

				// generate software interrupt to change TIM3 update rate
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 8003948:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <check_flight_state+0x29c>)
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	4a20      	ldr	r2, [pc, #128]	; (80039d0 <check_flight_state+0x29c>)
 800394e:	f043 0310 	orr.w	r3, r3, #16
 8003952:	6113      	str	r3, [r2, #16]
 8003954:	e002      	b.n	800395c <check_flight_state+0x228>
			}
		} else {
			num_descending_samples = 0;
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <check_flight_state+0x2a4>)
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
		}

		alt_prev = alt_current;
 800395c:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <check_flight_state+0x27c>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <check_flight_state+0x2b0>)
 8003962:	6013      	str	r3, [r2, #0]
		break;
 8003964:	e01f      	b.n	80039a6 <check_flight_state+0x272>

	case FLIGHT_STATE_LANDED: // landed
		__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 8003966:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <check_flight_state+0x29c>)
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <check_flight_state+0x29c>)
 800396c:	f043 0310 	orr.w	r3, r3, #16
 8003970:	6113      	str	r3, [r2, #16]

		#ifdef DEBUG
			while (1) {
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8003972:	2201      	movs	r2, #1
 8003974:	2102      	movs	r1, #2
 8003976:	4820      	ldr	r0, [pc, #128]	; (80039f8 <check_flight_state+0x2c4>)
 8003978:	f002 fdee 	bl	8006558 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800397c:	2201      	movs	r2, #1
 800397e:	2104      	movs	r1, #4
 8003980:	481d      	ldr	r0, [pc, #116]	; (80039f8 <check_flight_state+0x2c4>)
 8003982:	f002 fde9 	bl	8006558 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8003986:	2201      	movs	r2, #1
 8003988:	2108      	movs	r1, #8
 800398a:	481b      	ldr	r0, [pc, #108]	; (80039f8 <check_flight_state+0x2c4>)
 800398c:	f002 fde4 	bl	8006558 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, SET);
 8003990:	2201      	movs	r2, #1
 8003992:	2108      	movs	r1, #8
 8003994:	4819      	ldr	r0, [pc, #100]	; (80039fc <check_flight_state+0x2c8>)
 8003996:	f002 fddf 	bl	8006558 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 800399a:	e7ea      	b.n	8003972 <check_flight_state+0x23e>

		break;

	default:

		break;
 800399c:	bf00      	nop
 800399e:	e002      	b.n	80039a6 <check_flight_state+0x272>
		break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <check_flight_state+0x272>
		break;
 80039a4:	bf00      	nop
	}
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	2000038c 	.word	0x2000038c
 80039b4:	20000388 	.word	0x20000388
 80039b8:	42960000 	.word	0x42960000
 80039bc:	20000378 	.word	0x20000378
 80039c0:	20000c38 	.word	0x20000c38
 80039c4:	08014980 	.word	0x08014980
 80039c8:	20000c3c 	.word	0x20000c3c
 80039cc:	40021400 	.word	0x40021400
 80039d0:	40013c00 	.word	0x40013c00
 80039d4:	20000398 	.word	0x20000398
 80039d8:	2000039c 	.word	0x2000039c
 80039dc:	0801498c 	.word	0x0801498c
 80039e0:	44bb8000 	.word	0x44bb8000
 80039e4:	20000390 	.word	0x20000390
 80039e8:	08014998 	.word	0x08014998
 80039ec:	40021800 	.word	0x40021800
 80039f0:	20000394 	.word	0x20000394
 80039f4:	080149a8 	.word	0x080149a8
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020000 	.word	0x40020000

08003a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_SET);
 8003a04:	2201      	movs	r2, #1
 8003a06:	2108      	movs	r1, #8
 8003a08:	4803      	ldr	r0, [pc, #12]	; (8003a18 <Error_Handler+0x18>)
 8003a0a:	f002 fda5 	bl	8006558 <HAL_GPIO_WritePin>
	buzz_failure();
 8003a0e:	f7ff f83f 	bl	8002a90 <buzz_failure>
	__BKPT();
 8003a12:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40020000 	.word	0x40020000

08003a1c <xtend_parse_dma_command>:

extern UART_HandleTypeDef huart8;

extern volatile char xtend_rx_buf[10]; // dma buffer

radio_command xtend_parse_dma_command(void) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0

	if (strcmp(xtend_rx_buf, "lnch") == 0) { // launch command
 8003a20:	4929      	ldr	r1, [pc, #164]	; (8003ac8 <xtend_parse_dma_command+0xac>)
 8003a22:	482a      	ldr	r0, [pc, #168]	; (8003acc <xtend_parse_dma_command+0xb0>)
 8003a24:	f7fc fbe4 	bl	80001f0 <strcmp>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <xtend_parse_dma_command+0x16>
		return LAUNCH;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e047      	b.n	8003ac2 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "arpr") == 0) { // arm propulsion
 8003a32:	4927      	ldr	r1, [pc, #156]	; (8003ad0 <xtend_parse_dma_command+0xb4>)
 8003a34:	4825      	ldr	r0, [pc, #148]	; (8003acc <xtend_parse_dma_command+0xb0>)
 8003a36:	f7fc fbdb 	bl	80001f0 <strcmp>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <xtend_parse_dma_command+0x28>
		return ARM_PROP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	e03e      	b.n	8003ac2 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "arrc") == 0) { // arm recovery
 8003a44:	4923      	ldr	r1, [pc, #140]	; (8003ad4 <xtend_parse_dma_command+0xb8>)
 8003a46:	4821      	ldr	r0, [pc, #132]	; (8003acc <xtend_parse_dma_command+0xb0>)
 8003a48:	f7fc fbd2 	bl	80001f0 <strcmp>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d101      	bne.n	8003a56 <xtend_parse_dma_command+0x3a>
		return ARM_RCOV;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e035      	b.n	8003ac2 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "dapr") == 0) { // disarm propulsion
 8003a56:	4920      	ldr	r1, [pc, #128]	; (8003ad8 <xtend_parse_dma_command+0xbc>)
 8003a58:	481c      	ldr	r0, [pc, #112]	; (8003acc <xtend_parse_dma_command+0xb0>)
 8003a5a:	f7fc fbc9 	bl	80001f0 <strcmp>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <xtend_parse_dma_command+0x4c>
		return DISARM_PROP;
 8003a64:	2304      	movs	r3, #4
 8003a66:	e02c      	b.n	8003ac2 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "darc") == 0) {
 8003a68:	491c      	ldr	r1, [pc, #112]	; (8003adc <xtend_parse_dma_command+0xc0>)
 8003a6a:	4818      	ldr	r0, [pc, #96]	; (8003acc <xtend_parse_dma_command+0xb0>)
 8003a6c:	f7fc fbc0 	bl	80001f0 <strcmp>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <xtend_parse_dma_command+0x5e>
		return DISARM_RCOV;
 8003a76:	2305      	movs	r3, #5
 8003a78:	e023      	b.n	8003ac2 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vron") == 0) { // vr power on
 8003a7a:	4919      	ldr	r1, [pc, #100]	; (8003ae0 <xtend_parse_dma_command+0xc4>)
 8003a7c:	4813      	ldr	r0, [pc, #76]	; (8003acc <xtend_parse_dma_command+0xb0>)
 8003a7e:	f7fc fbb7 	bl	80001f0 <strcmp>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <xtend_parse_dma_command+0x70>
		return VR_POWER_ON;
 8003a88:	2306      	movs	r3, #6
 8003a8a:	e01a      	b.n	8003ac2 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vrs1") == 0) { // s1 = start
 8003a8c:	4915      	ldr	r1, [pc, #84]	; (8003ae4 <xtend_parse_dma_command+0xc8>)
 8003a8e:	480f      	ldr	r0, [pc, #60]	; (8003acc <xtend_parse_dma_command+0xb0>)
 8003a90:	f7fc fbae 	bl	80001f0 <strcmp>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <xtend_parse_dma_command+0x82>
		return VR_REC_START;
 8003a9a:	2307      	movs	r3, #7
 8003a9c:	e011      	b.n	8003ac2 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vrs2") == 0) { // s2 = stop
 8003a9e:	4912      	ldr	r1, [pc, #72]	; (8003ae8 <xtend_parse_dma_command+0xcc>)
 8003aa0:	480a      	ldr	r0, [pc, #40]	; (8003acc <xtend_parse_dma_command+0xb0>)
 8003aa2:	f7fc fba5 	bl	80001f0 <strcmp>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <xtend_parse_dma_command+0x94>
		return VR_REC_STOP;
 8003aac:	2308      	movs	r3, #8
 8003aae:	e008      	b.n	8003ac2 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vrof") == 0) { // vr power off
 8003ab0:	490e      	ldr	r1, [pc, #56]	; (8003aec <xtend_parse_dma_command+0xd0>)
 8003ab2:	4806      	ldr	r0, [pc, #24]	; (8003acc <xtend_parse_dma_command+0xb0>)
 8003ab4:	f7fc fb9c 	bl	80001f0 <strcmp>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <xtend_parse_dma_command+0xa6>
		return VR_POWER_OFF;
 8003abe:	2309      	movs	r3, #9
 8003ac0:	e7ff      	b.n	8003ac2 <xtend_parse_dma_command+0xa6>
	}

	// all other commands are invalid, ignore.
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	080149b4 	.word	0x080149b4
 8003acc:	200006b8 	.word	0x200006b8
 8003ad0:	080149bc 	.word	0x080149bc
 8003ad4:	080149c4 	.word	0x080149c4
 8003ad8:	080149cc 	.word	0x080149cc
 8003adc:	080149d4 	.word	0x080149d4
 8003ae0:	080149dc 	.word	0x080149dc
 8003ae4:	080149e4 	.word	0x080149e4
 8003ae8:	080149ec 	.word	0x080149ec
 8003aec:	080149f4 	.word	0x080149f4

08003af0 <execute_parsed_command>:

void execute_parsed_command(radio_command cmd) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
	// TODO: decide whether we want to send an ack back to ground station, maybe as special event message
	switch (cmd) {
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d844      	bhi.n	8003b8c <execute_parsed_command+0x9c>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <execute_parsed_command+0x18>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b2d 	.word	0x08003b2d
 8003b0c:	08003b41 	.word	0x08003b41
 8003b10:	08003b55 	.word	0x08003b55
 8003b14:	08003b69 	.word	0x08003b69
 8003b18:	08003b6f 	.word	0x08003b6f
 8003b1c:	08003b75 	.word	0x08003b75
 8003b20:	08003b7b 	.word	0x08003b7b
 8003b24:	08003b81 	.word	0x08003b81
 8003b28:	08003b87 	.word	0x08003b87
	case LAUNCH:
		rocket_launch();
 8003b2c:	f000 f83c 	bl	8003ba8 <rocket_launch>
		HAL_UART_Transmit(&huart8, "launch\r\n", 8, HAL_MAX_DELAY);
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	2208      	movs	r2, #8
 8003b36:	4918      	ldr	r1, [pc, #96]	; (8003b98 <execute_parsed_command+0xa8>)
 8003b38:	4818      	ldr	r0, [pc, #96]	; (8003b9c <execute_parsed_command+0xac>)
 8003b3a:	f006 faaa 	bl	800a092 <HAL_UART_Transmit>
		break;
 8003b3e:	e026      	b.n	8003b8e <execute_parsed_command+0x9e>

	case ARM_PROP:
		arming_propulsion();
 8003b40:	f000 f84c 	bl	8003bdc <arming_propulsion>
		HAL_UART_Transmit(&huart8, "arm pr\r\n", 8, HAL_MAX_DELAY);
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
 8003b48:	2208      	movs	r2, #8
 8003b4a:	4915      	ldr	r1, [pc, #84]	; (8003ba0 <execute_parsed_command+0xb0>)
 8003b4c:	4813      	ldr	r0, [pc, #76]	; (8003b9c <execute_parsed_command+0xac>)
 8003b4e:	f006 faa0 	bl	800a092 <HAL_UART_Transmit>
		break;
 8003b52:	e01c      	b.n	8003b8e <execute_parsed_command+0x9e>

	case ARM_RCOV:
		arming_recovery();
 8003b54:	f000 f84e 	bl	8003bf4 <arming_recovery>
		HAL_UART_Transmit(&huart8, "arm rc\r\n", 8, HAL_MAX_DELAY);
 8003b58:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	4911      	ldr	r1, [pc, #68]	; (8003ba4 <execute_parsed_command+0xb4>)
 8003b60:	480e      	ldr	r0, [pc, #56]	; (8003b9c <execute_parsed_command+0xac>)
 8003b62:	f006 fa96 	bl	800a092 <HAL_UART_Transmit>
		break;
 8003b66:	e012      	b.n	8003b8e <execute_parsed_command+0x9e>

	case DISARM_PROP:
		disarm_propulsion();
 8003b68:	f000 f850 	bl	8003c0c <disarm_propulsion>
		break;
 8003b6c:	e00f      	b.n	8003b8e <execute_parsed_command+0x9e>

	case DISARM_RCOV:
		disarm_recovery();
 8003b6e:	f000 f867 	bl	8003c40 <disarm_recovery>
		break;
 8003b72:	e00c      	b.n	8003b8e <execute_parsed_command+0x9e>

	case VR_POWER_ON:	// TODO: figure out how to make non-blocking
		VR_Power_On();
 8003b74:	f001 f976 	bl	8004e64 <VR_Power_On>
		break;
 8003b78:	e009      	b.n	8003b8e <execute_parsed_command+0x9e>

	case VR_REC_START:	// TODO: figure out how to make non-blocking
		VR_Start_Rec();
 8003b7a:	f001 f98f 	bl	8004e9c <VR_Start_Rec>
		break;
 8003b7e:	e006      	b.n	8003b8e <execute_parsed_command+0x9e>

	case VR_REC_STOP:	// TODO: figure out how to make non-blocking
		VR_Stop_Rec();
 8003b80:	f001 f9b2 	bl	8004ee8 <VR_Stop_Rec>
		break;
 8003b84:	e003      	b.n	8003b8e <execute_parsed_command+0x9e>

	case VR_POWER_OFF:
		VR_Power_Off();
 8003b86:	f001 f97d 	bl	8004e84 <VR_Power_Off>
		break;
 8003b8a:	e000      	b.n	8003b8e <execute_parsed_command+0x9e>

	default:
		break;
 8003b8c:	bf00      	nop
	}
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	080149fc 	.word	0x080149fc
 8003b9c:	20001544 	.word	0x20001544
 8003ba0:	08014a08 	.word	0x08014a08
 8003ba4:	08014a14 	.word	0x08014a14

08003ba8 <rocket_launch>:

void rocket_launch(void) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
	// just to be safe, set arming pin high to ensure pyro channels are armed
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 8003bac:	2201      	movs	r2, #1
 8003bae:	2102      	movs	r1, #2
 8003bb0:	4808      	ldr	r0, [pc, #32]	; (8003bd4 <rocket_launch+0x2c>)
 8003bb2:	f002 fcd1 	bl	8006558 <HAL_GPIO_WritePin>

	// open valve by firing the prop pyro ejection channels
	HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, SET);
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bbc:	4806      	ldr	r0, [pc, #24]	; (8003bd8 <rocket_launch+0x30>)
 8003bbe:	f002 fccb 	bl	8006558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, SET);
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bc8:	4803      	ldr	r0, [pc, #12]	; (8003bd8 <rocket_launch+0x30>)
 8003bca:	f002 fcc5 	bl	8006558 <HAL_GPIO_WritePin>
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40021800 	.word	0x40021800
 8003bd8:	40021400 	.word	0x40021400

08003bdc <arming_propulsion>:

void arming_propulsion(void) {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 8003be0:	2201      	movs	r2, #1
 8003be2:	2102      	movs	r1, #2
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <arming_propulsion+0x14>)
 8003be6:	f002 fcb7 	bl	8006558 <HAL_GPIO_WritePin>
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40021800 	.word	0x40021800

08003bf4 <arming_recovery>:

void arming_recovery(void) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, SET);
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bfe:	4802      	ldr	r0, [pc, #8]	; (8003c08 <arming_recovery+0x14>)
 8003c00:	f002 fcaa 	bl	8006558 <HAL_GPIO_WritePin>
}
 8003c04:	bf00      	nop
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021800 	.word	0x40021800

08003c0c <disarm_propulsion>:

void disarm_propulsion(void) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8003c10:	2200      	movs	r2, #0
 8003c12:	2102      	movs	r1, #2
 8003c14:	4808      	ldr	r0, [pc, #32]	; (8003c38 <disarm_propulsion+0x2c>)
 8003c16:	f002 fc9f 	bl	8006558 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c20:	4806      	ldr	r0, [pc, #24]	; (8003c3c <disarm_propulsion+0x30>)
 8003c22:	f002 fc99 	bl	8006558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8003c26:	2200      	movs	r2, #0
 8003c28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c2c:	4803      	ldr	r0, [pc, #12]	; (8003c3c <disarm_propulsion+0x30>)
 8003c2e:	f002 fc93 	bl	8006558 <HAL_GPIO_WritePin>
}
 8003c32:	bf00      	nop
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40021800 	.word	0x40021800
 8003c3c:	40021400 	.word	0x40021400

08003c40 <disarm_recovery>:

void disarm_recovery(void) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8003c44:	2200      	movs	r2, #0
 8003c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003c4a:	4808      	ldr	r0, [pc, #32]	; (8003c6c <disarm_recovery+0x2c>)
 8003c4c:	f002 fc84 	bl	8006558 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8003c50:	2200      	movs	r2, #0
 8003c52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c56:	4805      	ldr	r0, [pc, #20]	; (8003c6c <disarm_recovery+0x2c>)
 8003c58:	f002 fc7e 	bl	8006558 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c62:	4802      	ldr	r0, [pc, #8]	; (8003c6c <disarm_recovery+0x2c>)
 8003c64:	f002 fc78 	bl	8006558 <HAL_GPIO_WritePin>
}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021800 	.word	0x40021800

08003c70 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003c76:	1d3b      	adds	r3, r7, #4
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003c84:	2300      	movs	r3, #0
 8003c86:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <MX_RTC_Init+0xac>)
 8003c8a:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <MX_RTC_Init+0xb0>)
 8003c8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c8e:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <MX_RTC_Init+0xac>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003c94:	4b21      	ldr	r3, [pc, #132]	; (8003d1c <MX_RTC_Init+0xac>)
 8003c96:	227f      	movs	r2, #127	; 0x7f
 8003c98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <MX_RTC_Init+0xac>)
 8003c9c:	22ff      	movs	r2, #255	; 0xff
 8003c9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003ca0:	4b1e      	ldr	r3, [pc, #120]	; (8003d1c <MX_RTC_Init+0xac>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <MX_RTC_Init+0xac>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003cac:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <MX_RTC_Init+0xac>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003cb2:	481a      	ldr	r0, [pc, #104]	; (8003d1c <MX_RTC_Init+0xac>)
 8003cb4:	f004 fafe 	bl	80082b4 <HAL_RTC_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003cbe:	f7ff fe9f 	bl	8003a00 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8003cc2:	2310      	movs	r3, #16
 8003cc4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8003cc6:	2320      	movs	r3, #32
 8003cc8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8003cca:	2330      	movs	r3, #48	; 0x30
 8003ccc:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003cd6:	1d3b      	adds	r3, r7, #4
 8003cd8:	2201      	movs	r2, #1
 8003cda:	4619      	mov	r1, r3
 8003cdc:	480f      	ldr	r0, [pc, #60]	; (8003d1c <MX_RTC_Init+0xac>)
 8003cde:	f004 fb7a 	bl	80083d6 <HAL_RTC_SetTime>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003ce8:	f7ff fe8a 	bl	8003a00 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003cec:	2301      	movs	r3, #1
 8003cee:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8003cf4:	2312      	movs	r3, #18
 8003cf6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8003cf8:	2321      	movs	r3, #33	; 0x21
 8003cfa:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	2201      	movs	r2, #1
 8003d00:	4619      	mov	r1, r3
 8003d02:	4806      	ldr	r0, [pc, #24]	; (8003d1c <MX_RTC_Init+0xac>)
 8003d04:	f004 fc82 	bl	800860c <HAL_RTC_SetDate>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003d0e:	f7ff fe77 	bl	8003a00 <Error_Handler>
  }

}
 8003d12:	bf00      	nop
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000e6c 	.word	0x20000e6c
 8003d20:	40002800 	.word	0x40002800

08003d24 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a05      	ldr	r2, [pc, #20]	; (8003d48 <HAL_RTC_MspInit+0x24>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d102      	bne.n	8003d3c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_RTC_MspInit+0x28>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40002800 	.word	0x40002800
 8003d4c:	42470e3c 	.word	0x42470e3c

08003d50 <myprintf>:
extern FRESULT fres;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8003d50:	b40f      	push	{r0, r1, r2, r3}
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8003d58:	f107 0314 	add.w	r3, r7, #20
 8003d5c:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d66:	4805      	ldr	r0, [pc, #20]	; (8003d7c <myprintf+0x2c>)
 8003d68:	f00c fbe2 	bl	8010530 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d76:	b004      	add	sp, #16
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	200003a0 	.word	0x200003a0

08003d80 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	; 0x28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	4932      	ldr	r1, [pc, #200]	; (8003e58 <sd_init_dynamic_filename+0xd8>)
 8003d90:	4832      	ldr	r0, [pc, #200]	; (8003e5c <sd_init_dynamic_filename+0xdc>)
 8003d92:	f009 fd4d 	bl	800d830 <f_mount>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8003d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d008      	beq.n	8003db6 <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8003da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003da8:	4619      	mov	r1, r3
 8003daa:	482d      	ldr	r0, [pc, #180]	; (8003e60 <sd_init_dynamic_filename+0xe0>)
 8003dac:	f7ff ffd0 	bl	8003d50 <myprintf>
		return fres;
 8003db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003db4:	e04b      	b.n	8003e4e <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8003dba:	f107 0320 	add.w	r3, r7, #32
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	68f9      	ldr	r1, [r7, #12]
 8003dc2:	4825      	ldr	r0, [pc, #148]	; (8003e58 <sd_init_dynamic_filename+0xd8>)
 8003dc4:	f000 f89c 	bl	8003f00 <scan_files>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	f107 0310 	add.w	r3, r7, #16
 8003dd6:	4923      	ldr	r1, [pc, #140]	; (8003e64 <sd_init_dynamic_filename+0xe4>)
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f00b fc07 	bl	800f5ec <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8003dde:	f107 0310 	add.w	r3, r7, #16
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f00b fc9f 	bl	800f728 <strcpy>
 8003dea:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8003dec:	f107 0310 	add.w	r3, r7, #16
 8003df0:	221a      	movs	r2, #26
 8003df2:	4619      	mov	r1, r3
 8003df4:	481c      	ldr	r0, [pc, #112]	; (8003e68 <sd_init_dynamic_filename+0xe8>)
 8003df6:	f009 fd61 	bl	800d8bc <f_open>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8003e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d11a      	bne.n	8003e3e <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8003e08:	4818      	ldr	r0, [pc, #96]	; (8003e6c <sd_init_dynamic_filename+0xec>)
 8003e0a:	f7ff ffa1 	bl	8003d50 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003e0e:	4b16      	ldr	r3, [pc, #88]	; (8003e68 <sd_init_dynamic_filename+0xe8>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4619      	mov	r1, r3
 8003e14:	4814      	ldr	r0, [pc, #80]	; (8003e68 <sd_init_dynamic_filename+0xe8>)
 8003e16:	f00a f92c 	bl	800e072 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8003e1a:	4915      	ldr	r1, [pc, #84]	; (8003e70 <sd_init_dynamic_filename+0xf0>)
 8003e1c:	4815      	ldr	r0, [pc, #84]	; (8003e74 <sd_init_dynamic_filename+0xf4>)
 8003e1e:	f00b fbe5 	bl	800f5ec <siprintf>
	sd_write(&fil, msg_buffer);
 8003e22:	4914      	ldr	r1, [pc, #80]	; (8003e74 <sd_init_dynamic_filename+0xf4>)
 8003e24:	4810      	ldr	r0, [pc, #64]	; (8003e68 <sd_init_dynamic_filename+0xe8>)
 8003e26:	f000 f841 	bl	8003eac <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	480e      	ldr	r0, [pc, #56]	; (8003e68 <sd_init_dynamic_filename+0xe8>)
 8003e2e:	f000 f83d 	bl	8003eac <sd_write>
	f_close(&fil);
 8003e32:	480d      	ldr	r0, [pc, #52]	; (8003e68 <sd_init_dynamic_filename+0xe8>)
 8003e34:	f00a f8f3 	bl	800e01e <f_close>

	return fres;
 8003e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e3c:	e007      	b.n	8003e4e <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8003e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e42:	4619      	mov	r1, r3
 8003e44:	480c      	ldr	r0, [pc, #48]	; (8003e78 <sd_init_dynamic_filename+0xf8>)
 8003e46:	f7ff ff83 	bl	8003d50 <myprintf>
		return fres;
 8003e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	08014a20 	.word	0x08014a20
 8003e5c:	200006c4 	.word	0x200006c4
 8003e60:	08014a24 	.word	0x08014a24
 8003e64:	08014aa0 	.word	0x08014aa0
 8003e68:	20000c3c 	.word	0x20000c3c
 8003e6c:	08014a3c 	.word	0x08014a3c
 8003e70:	08014a80 	.word	0x08014a80
 8003e74:	20000e8c 	.word	0x20000e8c
 8003e78:	08014a6c 	.word	0x08014a6c

08003e7c <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8003e84:	2212      	movs	r2, #18
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4807      	ldr	r0, [pc, #28]	; (8003ea8 <sd_open_file+0x2c>)
 8003e8a:	f009 fd17 	bl	800d8bc <f_open>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <sd_open_file+0x2c>)
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	4619      	mov	r1, r3
 8003e98:	4803      	ldr	r0, [pc, #12]	; (8003ea8 <sd_open_file+0x2c>)
 8003e9a:	f00a f8ea 	bl	800e072 <f_lseek>

	return fres;
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000c3c 	.word	0x20000c3c

08003eac <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003eb6:	6838      	ldr	r0, [r7, #0]
 8003eb8:	f7fc f9a4 	bl	8000204 <strlen>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	f107 0308 	add.w	r3, r7, #8
 8003ec2:	6839      	ldr	r1, [r7, #0]
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f009 feb7 	bl	800dc38 <f_write>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d107      	bne.n	8003ee4 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4807      	ldr	r0, [pc, #28]	; (8003ef8 <sd_write+0x4c>)
 8003eda:	f7ff ff39 	bl	8003d50 <myprintf>
		return bytesWrote;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	b25b      	sxtb	r3, r3
 8003ee2:	e004      	b.n	8003eee <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8003ee4:	4805      	ldr	r0, [pc, #20]	; (8003efc <sd_write+0x50>)
 8003ee6:	f7ff ff33 	bl	8003d50 <myprintf>
		return -1;
 8003eea:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	08014aac 	.word	0x08014aac
 8003efc:	08014ad0 	.word	0x08014ad0

08003f00 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	b099      	sub	sp, #100	; 0x64
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	466b      	mov	r3, sp
 8003f0e:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8003f10:	68b8      	ldr	r0, [r7, #8]
 8003f12:	f7fc f977 	bl	8000204 <strlen>
 8003f16:	4603      	mov	r3, r0
 8003f18:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8003f1c:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8003f20:	4623      	mov	r3, r4
 8003f22:	3b01      	subs	r3, #1
 8003f24:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f26:	b2e0      	uxtb	r0, r4
 8003f28:	f04f 0100 	mov.w	r1, #0
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	00cb      	lsls	r3, r1, #3
 8003f36:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003f3a:	00c2      	lsls	r2, r0, #3
 8003f3c:	b2e0      	uxtb	r0, r4
 8003f3e:	f04f 0100 	mov.w	r1, #0
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	00cb      	lsls	r3, r1, #3
 8003f4c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003f50:	00c2      	lsls	r2, r0, #3
 8003f52:	4623      	mov	r3, r4
 8003f54:	3307      	adds	r3, #7
 8003f56:	08db      	lsrs	r3, r3, #3
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	ebad 0d03 	sub.w	sp, sp, r3
 8003f5e:	466b      	mov	r3, sp
 8003f60:	3300      	adds	r3, #0
 8003f62:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8003f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f66:	4619      	mov	r1, r3
 8003f68:	68b8      	ldr	r0, [r7, #8]
 8003f6a:	f000 f8ff 	bl	800416c <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 8003f78:	f107 0318 	add.w	r3, r7, #24
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f00a fa80 	bl	800e484 <f_opendir>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 8003f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d16c      	bne.n	800406c <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8003f92:	f107 0318 	add.w	r3, r7, #24
 8003f96:	4939      	ldr	r1, [pc, #228]	; (800407c <scan_files+0x17c>)
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f00a fb0c 	bl	800e5b6 <f_readdir>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8003fa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d15a      	bne.n	8004062 <scan_files+0x162>
 8003fac:	4b33      	ldr	r3, [pc, #204]	; (800407c <scan_files+0x17c>)
 8003fae:	7a5b      	ldrb	r3, [r3, #9]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d056      	beq.n	8004062 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 8003fb4:	4b31      	ldr	r3, [pc, #196]	; (800407c <scan_files+0x17c>)
 8003fb6:	7a1b      	ldrb	r3, [r3, #8]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d14e      	bne.n	800405e <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 8003fc0:	466b      	mov	r3, sp
 8003fc2:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 8003fc4:	482e      	ldr	r0, [pc, #184]	; (8004080 <scan_files+0x180>)
 8003fc6:	f7fc f91d 	bl	8000204 <strlen>
 8003fca:	4604      	mov	r4, r0
 8003fcc:	4623      	mov	r3, r4
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	653b      	str	r3, [r7, #80]	; 0x50
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	00cb      	lsls	r3, r1, #3
 8003fe2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003fe6:	00c2      	lsls	r2, r0, #3
 8003fe8:	4620      	mov	r0, r4
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	f04f 0200 	mov.w	r2, #0
 8003ff2:	f04f 0300 	mov.w	r3, #0
 8003ff6:	00cb      	lsls	r3, r1, #3
 8003ff8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003ffc:	00c2      	lsls	r2, r0, #3
 8003ffe:	1de3      	adds	r3, r4, #7
 8004000:	08db      	lsrs	r3, r3, #3
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	ebad 0d03 	sub.w	sp, sp, r3
 8004008:	466b      	mov	r3, sp
 800400a:	3300      	adds	r3, #0
 800400c:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 800400e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004010:	4619      	mov	r1, r3
 8004012:	481b      	ldr	r0, [pc, #108]	; (8004080 <scan_files+0x180>)
 8004014:	f000 f8aa 	bl	800416c <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 8004018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800401e:	4619      	mov	r1, r3
 8004020:	4817      	ldr	r0, [pc, #92]	; (8004080 <scan_files+0x180>)
 8004022:	f00b fb89 	bl	800f738 <strncmp>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 800402c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8004030:	2b00      	cmp	r3, #0
 8004032:	d112      	bne.n	800405a <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8004034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004036:	f107 0214 	add.w	r2, r7, #20
 800403a:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f820 	bl	8004084 <extract_filename_suffix>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	429a      	cmp	r2, r3
 8004052:	d202      	bcs.n	800405a <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	46b5      	mov	sp, r6
 800405c:	e799      	b.n	8003f92 <scan_files+0x92>
            	continue; // don't enter directory
 800405e:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004060:	e797      	b.n	8003f92 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8004062:	f107 0318 	add.w	r3, r7, #24
 8004066:	4618      	mov	r0, r3
 8004068:	f00a fa7f 	bl	800e56a <f_closedir>
    }

    return res;
 800406c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004070:	46ad      	mov	sp, r5
}
 8004072:	4618      	mov	r0, r3
 8004074:	3764      	adds	r7, #100	; 0x64
 8004076:	46bd      	mov	sp, r7
 8004078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800407a:	bf00      	nop
 800407c:	200004a0 	.word	0x200004a0
 8004080:	200004a9 	.word	0x200004a9

08004084 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8004084:	b5b0      	push	{r4, r5, r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	460b      	mov	r3, r1
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	72fb      	strb	r3, [r7, #11]
 8004092:	466b      	mov	r3, sp
 8004094:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7fc f8b4 	bl	8000204 <strlen>
 800409c:	4603      	mov	r3, r0
 800409e:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 80040a0:	2308      	movs	r3, #8
 80040a2:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 80040a4:	7f7c      	ldrb	r4, [r7, #29]
 80040a6:	4623      	mov	r3, r4
 80040a8:	3b01      	subs	r3, #1
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	b2e0      	uxtb	r0, r4
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	f04f 0200 	mov.w	r2, #0
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	00cb      	lsls	r3, r1, #3
 80040bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80040c0:	00c2      	lsls	r2, r0, #3
 80040c2:	b2e0      	uxtb	r0, r4
 80040c4:	f04f 0100 	mov.w	r1, #0
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	00cb      	lsls	r3, r1, #3
 80040d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80040d6:	00c2      	lsls	r2, r0, #3
 80040d8:	4623      	mov	r3, r4
 80040da:	3307      	adds	r3, #7
 80040dc:	08db      	lsrs	r3, r3, #3
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	ebad 0d03 	sub.w	sp, sp, r3
 80040e4:	466b      	mov	r3, sp
 80040e6:	3300      	adds	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	77fb      	strb	r3, [r7, #31]
 80040ee:	e014      	b.n	800411a <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 80040f0:	7afb      	ldrb	r3, [r7, #11]
 80040f2:	1e5a      	subs	r2, r3, #1
 80040f4:	7ffb      	ldrb	r3, [r7, #31]
 80040f6:	441a      	add	r2, r3
 80040f8:	7fbb      	ldrb	r3, [r7, #30]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	429a      	cmp	r2, r3
 80040fe:	da11      	bge.n	8004124 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8004100:	7afa      	ldrb	r2, [r7, #11]
 8004102:	7ffb      	ldrb	r3, [r7, #31]
 8004104:	4413      	add	r3, r2
 8004106:	461a      	mov	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	441a      	add	r2, r3
 800410c:	7ffb      	ldrb	r3, [r7, #31]
 800410e:	7811      	ldrb	r1, [r2, #0]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8004114:	7ffb      	ldrb	r3, [r7, #31]
 8004116:	3301      	adds	r3, #1
 8004118:	77fb      	strb	r3, [r7, #31]
 800411a:	7ffa      	ldrb	r2, [r7, #31]
 800411c:	7f7b      	ldrb	r3, [r7, #29]
 800411e:	429a      	cmp	r2, r3
 8004120:	d3e6      	bcc.n	80040f0 <extract_filename_suffix+0x6c>
 8004122:	e000      	b.n	8004126 <extract_filename_suffix+0xa2>
		}
		else break;
 8004124:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f107 0110 	add.w	r1, r7, #16
 800412c:	220a      	movs	r2, #10
 800412e:	4618      	mov	r0, r3
 8004130:	f00c f9c8 	bl	80104c4 <strtol>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	429a      	cmp	r2, r3
 8004142:	d00a      	beq.n	800415a <extract_filename_suffix+0xd6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800414c:	d005      	beq.n	800415a <extract_filename_suffix+0xd6>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <extract_filename_suffix+0xda>
	{
		return 1;
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <extract_filename_suffix+0xdc>
	}

	return 0;
 800415e:	2300      	movs	r3, #0
 8004160:	46ad      	mov	sp, r5
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800416c <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 800416c:	b590      	push	{r4, r7, lr}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e019      	b.n	80041b0 <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	4413      	add	r3, r2
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	73bb      	strb	r3, [r7, #14]
 8004186:	7bbb      	ldrb	r3, [r7, #14]
 8004188:	3301      	adds	r3, #1
 800418a:	4a0f      	ldr	r2, [pc, #60]	; (80041c8 <str2upper+0x5c>)
 800418c:	4413      	add	r3, r2
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d102      	bne.n	800419e <str2upper+0x32>
 8004198:	7bbb      	ldrb	r3, [r7, #14]
 800419a:	3b20      	subs	r3, #32
 800419c:	e000      	b.n	80041a0 <str2upper+0x34>
 800419e:	7bbb      	ldrb	r3, [r7, #14]
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	6839      	ldr	r1, [r7, #0]
 80041a4:	440a      	add	r2, r1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	3301      	adds	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	7bfc      	ldrb	r4, [r7, #15]
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc f826 	bl	8000204 <strlen>
 80041b8:	4603      	mov	r3, r0
 80041ba:	429c      	cmp	r4, r3
 80041bc:	d3de      	bcc.n	800417c <str2upper+0x10>
	}
}
 80041be:	bf00      	nop
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd90      	pop	{r4, r7, pc}
 80041c8:	08014c58 	.word	0x08014c58

080041cc <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80041d0:	4b17      	ldr	r3, [pc, #92]	; (8004230 <MX_SPI2_Init+0x64>)
 80041d2:	4a18      	ldr	r2, [pc, #96]	; (8004234 <MX_SPI2_Init+0x68>)
 80041d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80041d6:	4b16      	ldr	r3, [pc, #88]	; (8004230 <MX_SPI2_Init+0x64>)
 80041d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80041de:	4b14      	ldr	r3, [pc, #80]	; (8004230 <MX_SPI2_Init+0x64>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <MX_SPI2_Init+0x64>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <MX_SPI2_Init+0x64>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <MX_SPI2_Init+0x64>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80041f6:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <MX_SPI2_Init+0x64>)
 80041f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <MX_SPI2_Init+0x64>)
 8004200:	2200      	movs	r2, #0
 8004202:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004204:	4b0a      	ldr	r3, [pc, #40]	; (8004230 <MX_SPI2_Init+0x64>)
 8004206:	2200      	movs	r2, #0
 8004208:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <MX_SPI2_Init+0x64>)
 800420c:	2200      	movs	r2, #0
 800420e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <MX_SPI2_Init+0x64>)
 8004212:	2200      	movs	r2, #0
 8004214:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <MX_SPI2_Init+0x64>)
 8004218:	220a      	movs	r2, #10
 800421a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800421c:	4804      	ldr	r0, [pc, #16]	; (8004230 <MX_SPI2_Init+0x64>)
 800421e:	f004 fb7b 	bl	8008918 <HAL_SPI_Init>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004228:	f7ff fbea 	bl	8003a00 <Error_Handler>
  }

}
 800422c:	bf00      	nop
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20001274 	.word	0x20001274
 8004234:	40003800 	.word	0x40003800

08004238 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 800423c:	4b17      	ldr	r3, [pc, #92]	; (800429c <MX_SPI4_Init+0x64>)
 800423e:	4a18      	ldr	r2, [pc, #96]	; (80042a0 <MX_SPI4_Init+0x68>)
 8004240:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004242:	4b16      	ldr	r3, [pc, #88]	; (800429c <MX_SPI4_Init+0x64>)
 8004244:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004248:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800424a:	4b14      	ldr	r3, [pc, #80]	; (800429c <MX_SPI4_Init+0x64>)
 800424c:	2200      	movs	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <MX_SPI4_Init+0x64>)
 8004252:	2200      	movs	r2, #0
 8004254:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004256:	4b11      	ldr	r3, [pc, #68]	; (800429c <MX_SPI4_Init+0x64>)
 8004258:	2200      	movs	r2, #0
 800425a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <MX_SPI4_Init+0x64>)
 800425e:	2200      	movs	r2, #0
 8004260:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004262:	4b0e      	ldr	r3, [pc, #56]	; (800429c <MX_SPI4_Init+0x64>)
 8004264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004268:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800426a:	4b0c      	ldr	r3, [pc, #48]	; (800429c <MX_SPI4_Init+0x64>)
 800426c:	2228      	movs	r2, #40	; 0x28
 800426e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004270:	4b0a      	ldr	r3, [pc, #40]	; (800429c <MX_SPI4_Init+0x64>)
 8004272:	2200      	movs	r2, #0
 8004274:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004276:	4b09      	ldr	r3, [pc, #36]	; (800429c <MX_SPI4_Init+0x64>)
 8004278:	2200      	movs	r2, #0
 800427a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800427c:	4b07      	ldr	r3, [pc, #28]	; (800429c <MX_SPI4_Init+0x64>)
 800427e:	2200      	movs	r2, #0
 8004280:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 8004282:	4b06      	ldr	r3, [pc, #24]	; (800429c <MX_SPI4_Init+0x64>)
 8004284:	220a      	movs	r2, #10
 8004286:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004288:	4804      	ldr	r0, [pc, #16]	; (800429c <MX_SPI4_Init+0x64>)
 800428a:	f004 fb45 	bl	8008918 <HAL_SPI_Init>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004294:	f7ff fbb4 	bl	8003a00 <Error_Handler>
  }

}
 8004298:	bf00      	nop
 800429a:	bd80      	pop	{r7, pc}
 800429c:	20000500 	.word	0x20000500
 80042a0:	40013400 	.word	0x40013400

080042a4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80042a8:	4b17      	ldr	r3, [pc, #92]	; (8004308 <MX_SPI5_Init+0x64>)
 80042aa:	4a18      	ldr	r2, [pc, #96]	; (800430c <MX_SPI5_Init+0x68>)
 80042ac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80042ae:	4b16      	ldr	r3, [pc, #88]	; (8004308 <MX_SPI5_Init+0x64>)
 80042b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80042b4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80042b6:	4b14      	ldr	r3, [pc, #80]	; (8004308 <MX_SPI5_Init+0x64>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80042bc:	4b12      	ldr	r3, [pc, #72]	; (8004308 <MX_SPI5_Init+0x64>)
 80042be:	2200      	movs	r2, #0
 80042c0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042c2:	4b11      	ldr	r3, [pc, #68]	; (8004308 <MX_SPI5_Init+0x64>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <MX_SPI5_Init+0x64>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80042ce:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <MX_SPI5_Init+0x64>)
 80042d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042d4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <MX_SPI5_Init+0x64>)
 80042d8:	2200      	movs	r2, #0
 80042da:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <MX_SPI5_Init+0x64>)
 80042de:	2200      	movs	r2, #0
 80042e0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <MX_SPI5_Init+0x64>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042e8:	4b07      	ldr	r3, [pc, #28]	; (8004308 <MX_SPI5_Init+0x64>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80042ee:	4b06      	ldr	r3, [pc, #24]	; (8004308 <MX_SPI5_Init+0x64>)
 80042f0:	220a      	movs	r2, #10
 80042f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80042f4:	4804      	ldr	r0, [pc, #16]	; (8004308 <MX_SPI5_Init+0x64>)
 80042f6:	f004 fb0f 	bl	8008918 <HAL_SPI_Init>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004300:	f7ff fb7e 	bl	8003a00 <Error_Handler>
  }

}
 8004304:	bf00      	nop
 8004306:	bd80      	pop	{r7, pc}
 8004308:	200012cc 	.word	0x200012cc
 800430c:	40015000 	.word	0x40015000

08004310 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	605a      	str	r2, [r3, #4]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a4c      	ldr	r2, [pc, #304]	; (8004460 <HAL_SPI_MspInit+0x150>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d12d      	bne.n	800438e <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	623b      	str	r3, [r7, #32]
 8004336:	4b4b      	ldr	r3, [pc, #300]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a4a      	ldr	r2, [pc, #296]	; (8004464 <HAL_SPI_MspInit+0x154>)
 800433c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
 8004342:	4b48      	ldr	r3, [pc, #288]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
 8004352:	4b44      	ldr	r3, [pc, #272]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	4a43      	ldr	r2, [pc, #268]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004358:	f043 0302 	orr.w	r3, r3, #2
 800435c:	6313      	str	r3, [r2, #48]	; 0x30
 800435e:	4b41      	ldr	r3, [pc, #260]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800436a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004370:	2302      	movs	r3, #2
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004374:	2301      	movs	r3, #1
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004378:	2303      	movs	r3, #3
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800437c:	2305      	movs	r3, #5
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004384:	4619      	mov	r1, r3
 8004386:	4838      	ldr	r0, [pc, #224]	; (8004468 <HAL_SPI_MspInit+0x158>)
 8004388:	f001 ff22 	bl	80061d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800438c:	e064      	b.n	8004458 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a36      	ldr	r2, [pc, #216]	; (800446c <HAL_SPI_MspInit+0x15c>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d12d      	bne.n	80043f4 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
 800439c:	4b31      	ldr	r3, [pc, #196]	; (8004464 <HAL_SPI_MspInit+0x154>)
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	4a30      	ldr	r2, [pc, #192]	; (8004464 <HAL_SPI_MspInit+0x154>)
 80043a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043a6:	6453      	str	r3, [r2, #68]	; 0x44
 80043a8:	4b2e      	ldr	r3, [pc, #184]	; (8004464 <HAL_SPI_MspInit+0x154>)
 80043aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80043b4:	2300      	movs	r3, #0
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	4b2a      	ldr	r3, [pc, #168]	; (8004464 <HAL_SPI_MspInit+0x154>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	4a29      	ldr	r2, [pc, #164]	; (8004464 <HAL_SPI_MspInit+0x154>)
 80043be:	f043 0310 	orr.w	r3, r3, #16
 80043c2:	6313      	str	r3, [r2, #48]	; 0x30
 80043c4:	4b27      	ldr	r3, [pc, #156]	; (8004464 <HAL_SPI_MspInit+0x154>)
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80043d0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d6:	2302      	movs	r3, #2
 80043d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043de:	2303      	movs	r3, #3
 80043e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80043e2:	2305      	movs	r3, #5
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ea:	4619      	mov	r1, r3
 80043ec:	4820      	ldr	r0, [pc, #128]	; (8004470 <HAL_SPI_MspInit+0x160>)
 80043ee:	f001 feef 	bl	80061d0 <HAL_GPIO_Init>
}
 80043f2:	e031      	b.n	8004458 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <HAL_SPI_MspInit+0x164>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d12c      	bne.n	8004458 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	613b      	str	r3, [r7, #16]
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	4a17      	ldr	r2, [pc, #92]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440c:	6453      	str	r3, [r2, #68]	; 0x44
 800440e:	4b15      	ldr	r3, [pc, #84]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a10      	ldr	r2, [pc, #64]	; (8004464 <HAL_SPI_MspInit+0x154>)
 8004424:	f043 0320 	orr.w	r3, r3, #32
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <HAL_SPI_MspInit+0x154>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004436:	f44f 7360 	mov.w	r3, #896	; 0x380
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004440:	2301      	movs	r3, #1
 8004442:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004444:	2303      	movs	r3, #3
 8004446:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004448:	2305      	movs	r3, #5
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800444c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004450:	4619      	mov	r1, r3
 8004452:	4809      	ldr	r0, [pc, #36]	; (8004478 <HAL_SPI_MspInit+0x168>)
 8004454:	f001 febc 	bl	80061d0 <HAL_GPIO_Init>
}
 8004458:	bf00      	nop
 800445a:	3738      	adds	r7, #56	; 0x38
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40003800 	.word	0x40003800
 8004464:	40023800 	.word	0x40023800
 8004468:	40020400 	.word	0x40020400
 800446c:	40013400 	.word	0x40013400
 8004470:	40021000 	.word	0x40021000
 8004474:	40015000 	.word	0x40015000
 8004478:	40021400 	.word	0x40021400

0800447c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_MspInit+0x4c>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448a:	4a0f      	ldr	r2, [pc, #60]	; (80044c8 <HAL_MspInit+0x4c>)
 800448c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004490:	6453      	str	r3, [r2, #68]	; 0x44
 8004492:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <HAL_MspInit+0x4c>)
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	603b      	str	r3, [r7, #0]
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_MspInit+0x4c>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	4a08      	ldr	r2, [pc, #32]	; (80044c8 <HAL_MspInit+0x4c>)
 80044a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ac:	6413      	str	r3, [r2, #64]	; 0x40
 80044ae:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_MspInit+0x4c>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b6:	603b      	str	r3, [r7, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800

080044cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044de:	e7fe      	b.n	80044de <HardFault_Handler+0x4>

080044e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044e4:	e7fe      	b.n	80044e4 <MemManage_Handler+0x4>

080044e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044ea:	e7fe      	b.n	80044ea <BusFault_Handler+0x4>

080044ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044f0:	e7fe      	b.n	80044f0 <UsageFault_Handler+0x4>

080044f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044f6:	bf00      	nop
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004520:	f000 fd72 	bl	8005008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004524:	bf00      	nop
 8004526:	bd80      	pop	{r7, pc}

08004528 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800452c:	2001      	movs	r0, #1
 800452e:	f002 f847 	bl	80065c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}

08004536 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800453a:	2010      	movs	r0, #16
 800453c:	f002 f840 	bl	80065c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004540:	bf00      	nop
 8004542:	bd80      	pop	{r7, pc}

08004544 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004548:	4802      	ldr	r0, [pc, #8]	; (8004554 <DMA1_Stream1_IRQHandler+0x10>)
 800454a:	f001 fbd7 	bl	8005cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20001444 	.word	0x20001444

08004558 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800455c:	4802      	ldr	r0, [pc, #8]	; (8004568 <DMA1_Stream3_IRQHandler+0x10>)
 800455e:	f001 fbcd 	bl	8005cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004562:	bf00      	nop
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	200014e4 	.word	0x200014e4

0800456c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004570:	4802      	ldr	r0, [pc, #8]	; (800457c <TIM3_IRQHandler+0x10>)
 8004572:	f004 fee7 	bl	8009344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20001364 	.word	0x20001364

08004580 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004584:	4802      	ldr	r0, [pc, #8]	; (8004590 <USART3_IRQHandler+0x10>)
 8004586:	f005 ff09 	bl	800a39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	200014a4 	.word	0x200014a4

08004594 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004598:	4802      	ldr	r0, [pc, #8]	; (80045a4 <DMA2_Stream1_IRQHandler+0x10>)
 800459a:	f001 fbaf 	bl	8005cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	200013e4 	.word	0x200013e4

080045a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80045ac:	4802      	ldr	r0, [pc, #8]	; (80045b8 <USART6_IRQHandler+0x10>)
 80045ae:	f005 fef5 	bl	800a39c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20001584 	.word	0x20001584

080045bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
	return 1;
 80045c0:	2301      	movs	r3, #1
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <_kill>:

int _kill(int pid, int sig)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045d6:	f00a f887 	bl	800e6e8 <__errno>
 80045da:	4603      	mov	r3, r0
 80045dc:	2216      	movs	r2, #22
 80045de:	601a      	str	r2, [r3, #0]
	return -1;
 80045e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_exit>:

void _exit (int status)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80045f4:	f04f 31ff 	mov.w	r1, #4294967295
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff ffe7 	bl	80045cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80045fe:	e7fe      	b.n	80045fe <_exit+0x12>

08004600 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e00a      	b.n	8004628 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004612:	f3af 8000 	nop.w
 8004616:	4601      	mov	r1, r0
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	60ba      	str	r2, [r7, #8]
 800461e:	b2ca      	uxtb	r2, r1
 8004620:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	3301      	adds	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	dbf0      	blt.n	8004612 <_read+0x12>
	}

return len;
 8004630:	687b      	ldr	r3, [r7, #4]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e009      	b.n	8004660 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	60ba      	str	r2, [r7, #8]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	4618      	mov	r0, r3
 8004656:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	3301      	adds	r3, #1
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	429a      	cmp	r2, r3
 8004666:	dbf1      	blt.n	800464c <_write+0x12>
	}
	return len;
 8004668:	687b      	ldr	r3, [r7, #4]
}
 800466a:	4618      	mov	r0, r3
 800466c:	3718      	adds	r7, #24
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <_close>:

int _close(int file)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
	return -1;
 800467a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800469a:	605a      	str	r2, [r3, #4]
	return 0;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <_isatty>:

int _isatty(int file)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
	return 1;
 80046b2:	2301      	movs	r3, #1
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
	return 0;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046e4:	4a14      	ldr	r2, [pc, #80]	; (8004738 <_sbrk+0x5c>)
 80046e6:	4b15      	ldr	r3, [pc, #84]	; (800473c <_sbrk+0x60>)
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046f0:	4b13      	ldr	r3, [pc, #76]	; (8004740 <_sbrk+0x64>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <_sbrk+0x64>)
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <_sbrk+0x68>)
 80046fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <_sbrk+0x64>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	429a      	cmp	r2, r3
 800470a:	d207      	bcs.n	800471c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800470c:	f009 ffec 	bl	800e6e8 <__errno>
 8004710:	4603      	mov	r3, r0
 8004712:	220c      	movs	r2, #12
 8004714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004716:	f04f 33ff 	mov.w	r3, #4294967295
 800471a:	e009      	b.n	8004730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800471c:	4b08      	ldr	r3, [pc, #32]	; (8004740 <_sbrk+0x64>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004722:	4b07      	ldr	r3, [pc, #28]	; (8004740 <_sbrk+0x64>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	4a05      	ldr	r2, [pc, #20]	; (8004740 <_sbrk+0x64>)
 800472c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800472e:	68fb      	ldr	r3, [r7, #12]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20030000 	.word	0x20030000
 800473c:	00000400 	.word	0x00000400
 8004740:	200004b8 	.word	0x200004b8
 8004744:	20001a48 	.word	0x20001a48

08004748 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800474c:	4b08      	ldr	r3, [pc, #32]	; (8004770 <SystemInit+0x28>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	4a07      	ldr	r2, [pc, #28]	; (8004770 <SystemInit+0x28>)
 8004754:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004758:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <SystemInit+0x28>)
 800475e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004762:	609a      	str	r2, [r3, #8]
#endif
}
 8004764:	bf00      	nop
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08e      	sub	sp, #56	; 0x38
 8004778:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800477a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	609a      	str	r2, [r3, #8]
 8004786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004788:	f107 0320 	add.w	r3, r7, #32
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004792:	1d3b      	adds	r3, r7, #4
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	611a      	str	r2, [r3, #16]
 80047a0:	615a      	str	r2, [r3, #20]
 80047a2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80047a4:	4b2d      	ldr	r3, [pc, #180]	; (800485c <MX_TIM2_Init+0xe8>)
 80047a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80047ac:	4b2b      	ldr	r3, [pc, #172]	; (800485c <MX_TIM2_Init+0xe8>)
 80047ae:	2259      	movs	r2, #89	; 0x59
 80047b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047b2:	4b2a      	ldr	r3, [pc, #168]	; (800485c <MX_TIM2_Init+0xe8>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <MX_TIM2_Init+0xe8>)
 80047ba:	f240 128f 	movw	r2, #399	; 0x18f
 80047be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047c0:	4b26      	ldr	r3, [pc, #152]	; (800485c <MX_TIM2_Init+0xe8>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047c6:	4b25      	ldr	r3, [pc, #148]	; (800485c <MX_TIM2_Init+0xe8>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80047cc:	4823      	ldr	r0, [pc, #140]	; (800485c <MX_TIM2_Init+0xe8>)
 80047ce:	f004 fcc3 	bl	8009158 <HAL_TIM_Base_Init>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80047d8:	f7ff f912 	bl	8003a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80047e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047e6:	4619      	mov	r1, r3
 80047e8:	481c      	ldr	r0, [pc, #112]	; (800485c <MX_TIM2_Init+0xe8>)
 80047ea:	f004 ff79 	bl	80096e0 <HAL_TIM_ConfigClockSource>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80047f4:	f7ff f904 	bl	8003a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80047f8:	4818      	ldr	r0, [pc, #96]	; (800485c <MX_TIM2_Init+0xe8>)
 80047fa:	f004 fcd8 	bl	80091ae <HAL_TIM_PWM_Init>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004804:	f7ff f8fc 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004808:	2320      	movs	r3, #32
 800480a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800480c:	2300      	movs	r3, #0
 800480e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004810:	f107 0320 	add.w	r3, r7, #32
 8004814:	4619      	mov	r1, r3
 8004816:	4811      	ldr	r0, [pc, #68]	; (800485c <MX_TIM2_Init+0xe8>)
 8004818:	f005 fb5e 	bl	8009ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004822:	f7ff f8ed 	bl	8003a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004826:	2360      	movs	r3, #96	; 0x60
 8004828:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800482a:	2364      	movs	r3, #100	; 0x64
 800482c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004836:	1d3b      	adds	r3, r7, #4
 8004838:	2208      	movs	r2, #8
 800483a:	4619      	mov	r1, r3
 800483c:	4807      	ldr	r0, [pc, #28]	; (800485c <MX_TIM2_Init+0xe8>)
 800483e:	f004 fe89 	bl	8009554 <HAL_TIM_PWM_ConfigChannel>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004848:	f7ff f8da 	bl	8003a00 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800484c:	4803      	ldr	r0, [pc, #12]	; (800485c <MX_TIM2_Init+0xe8>)
 800484e:	f000 f8f5 	bl	8004a3c <HAL_TIM_MspPostInit>

}
 8004852:	bf00      	nop
 8004854:	3738      	adds	r7, #56	; 0x38
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	200013a4 	.word	0x200013a4

08004860 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	605a      	str	r2, [r3, #4]
 8004870:	609a      	str	r2, [r3, #8]
 8004872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004874:	463b      	mov	r3, r7
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <MX_TIM3_Init+0x94>)
 800487e:	4a1e      	ldr	r2, [pc, #120]	; (80048f8 <MX_TIM3_Init+0x98>)
 8004880:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <MX_TIM3_Init+0x94>)
 8004884:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004888:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <MX_TIM3_Init+0x94>)
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004890:	4b18      	ldr	r3, [pc, #96]	; (80048f4 <MX_TIM3_Init+0x94>)
 8004892:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004896:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004898:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <MX_TIM3_Init+0x94>)
 800489a:	2200      	movs	r2, #0
 800489c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <MX_TIM3_Init+0x94>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80048a4:	4813      	ldr	r0, [pc, #76]	; (80048f4 <MX_TIM3_Init+0x94>)
 80048a6:	f004 fc57 	bl	8009158 <HAL_TIM_Base_Init>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80048b0:	f7ff f8a6 	bl	8003a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80048ba:	f107 0308 	add.w	r3, r7, #8
 80048be:	4619      	mov	r1, r3
 80048c0:	480c      	ldr	r0, [pc, #48]	; (80048f4 <MX_TIM3_Init+0x94>)
 80048c2:	f004 ff0d 	bl	80096e0 <HAL_TIM_ConfigClockSource>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80048cc:	f7ff f898 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048d0:	2300      	movs	r3, #0
 80048d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80048d8:	463b      	mov	r3, r7
 80048da:	4619      	mov	r1, r3
 80048dc:	4805      	ldr	r0, [pc, #20]	; (80048f4 <MX_TIM3_Init+0x94>)
 80048de:	f005 fafb 	bl	8009ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80048e8:	f7ff f88a 	bl	8003a00 <Error_Handler>
  }

}
 80048ec:	bf00      	nop
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	20001364 	.word	0x20001364
 80048f8:	40000400 	.word	0x40000400

080048fc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004902:	f107 0308 	add.w	r3, r7, #8
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	609a      	str	r2, [r3, #8]
 800490e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004910:	463b      	mov	r3, r7
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <MX_TIM4_Init+0x94>)
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <MX_TIM4_Init+0x98>)
 800491c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 800491e:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <MX_TIM4_Init+0x94>)
 8004920:	f242 3227 	movw	r2, #8999	; 0x2327
 8004924:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <MX_TIM4_Init+0x94>)
 8004928:	2200      	movs	r2, #0
 800492a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800492c:	4b18      	ldr	r3, [pc, #96]	; (8004990 <MX_TIM4_Init+0x94>)
 800492e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004932:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004934:	4b16      	ldr	r3, [pc, #88]	; (8004990 <MX_TIM4_Init+0x94>)
 8004936:	2200      	movs	r2, #0
 8004938:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800493a:	4b15      	ldr	r3, [pc, #84]	; (8004990 <MX_TIM4_Init+0x94>)
 800493c:	2200      	movs	r2, #0
 800493e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004940:	4813      	ldr	r0, [pc, #76]	; (8004990 <MX_TIM4_Init+0x94>)
 8004942:	f004 fc09 	bl	8009158 <HAL_TIM_Base_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800494c:	f7ff f858 	bl	8003a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4619      	mov	r1, r3
 800495c:	480c      	ldr	r0, [pc, #48]	; (8004990 <MX_TIM4_Init+0x94>)
 800495e:	f004 febf 	bl	80096e0 <HAL_TIM_ConfigClockSource>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004968:	f7ff f84a 	bl	8003a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800496c:	2320      	movs	r3, #32
 800496e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004970:	2300      	movs	r3, #0
 8004972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004974:	463b      	mov	r3, r7
 8004976:	4619      	mov	r1, r3
 8004978:	4805      	ldr	r0, [pc, #20]	; (8004990 <MX_TIM4_Init+0x94>)
 800497a:	f005 faad 	bl	8009ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004984:	f7ff f83c 	bl	8003a00 <Error_Handler>
  }

}
 8004988:	bf00      	nop
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20001324 	.word	0x20001324
 8004994:	40000800 	.word	0x40000800

08004998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a8:	d10e      	bne.n	80049c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049aa:	2300      	movs	r3, #0
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_TIM_Base_MspInit+0x98>)
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <HAL_TIM_Base_MspInit+0x98>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6413      	str	r3, [r2, #64]	; 0x40
 80049ba:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <HAL_TIM_Base_MspInit+0x98>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80049c6:	e02e      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a19      	ldr	r2, [pc, #100]	; (8004a34 <HAL_TIM_Base_MspInit+0x9c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d116      	bne.n	8004a00 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <HAL_TIM_Base_MspInit+0x98>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <HAL_TIM_Base_MspInit+0x98>)
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	6413      	str	r3, [r2, #64]	; 0x40
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <HAL_TIM_Base_MspInit+0x98>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2100      	movs	r1, #0
 80049f2:	201d      	movs	r0, #29
 80049f4:	f001 f823 	bl	8005a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80049f8:	201d      	movs	r0, #29
 80049fa:	f001 f83c 	bl	8005a76 <HAL_NVIC_EnableIRQ>
}
 80049fe:	e012      	b.n	8004a26 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <HAL_TIM_Base_MspInit+0xa0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10d      	bne.n	8004a26 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <HAL_TIM_Base_MspInit+0x98>)
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	4a07      	ldr	r2, [pc, #28]	; (8004a30 <HAL_TIM_Base_MspInit+0x98>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6413      	str	r3, [r2, #64]	; 0x40
 8004a1a:	4b05      	ldr	r3, [pc, #20]	; (8004a30 <HAL_TIM_Base_MspInit+0x98>)
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
}
 8004a26:	bf00      	nop
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800

08004a3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a44:	f107 030c 	add.w	r3, r7, #12
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	605a      	str	r2, [r3, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	60da      	str	r2, [r3, #12]
 8004a52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a5c:	d11d      	bne.n	8004a9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <HAL_TIM_MspPostInit+0x68>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a0f      	ldr	r2, [pc, #60]	; (8004aa4 <HAL_TIM_MspPostInit+0x68>)
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <HAL_TIM_MspPostInit+0x68>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8004a7a:	2304      	movs	r3, #4
 8004a7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004a8e:	f107 030c 	add.w	r3, r7, #12
 8004a92:	4619      	mov	r1, r3
 8004a94:	4804      	ldr	r0, [pc, #16]	; (8004aa8 <HAL_TIM_MspPostInit+0x6c>)
 8004a96:	f001 fb9b 	bl	80061d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004a9a:	bf00      	nop
 8004a9c:	3720      	adds	r7, #32
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	40020000 	.word	0x40020000

08004aac <MX_UART8_Init>:
DMA_HandleTypeDef hdma_usart3_tx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <MX_UART8_Init+0x4c>)
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <MX_UART8_Init+0x50>)
 8004ab4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <MX_UART8_Init+0x4c>)
 8004ab8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004abc:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8004abe:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <MX_UART8_Init+0x4c>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8004ac4:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <MX_UART8_Init+0x4c>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8004aca:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <MX_UART8_Init+0x4c>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <MX_UART8_Init+0x4c>)
 8004ad2:	220c      	movs	r2, #12
 8004ad4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ad6:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <MX_UART8_Init+0x4c>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <MX_UART8_Init+0x4c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8004ae2:	4805      	ldr	r0, [pc, #20]	; (8004af8 <MX_UART8_Init+0x4c>)
 8004ae4:	f005 fa88 	bl	8009ff8 <HAL_UART_Init>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8004aee:	f7fe ff87 	bl	8003a00 <Error_Handler>
  }

}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20001544 	.word	0x20001544
 8004afc:	40007c00 	.word	0x40007c00

08004b00 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <MX_USART3_UART_Init+0x4c>)
 8004b06:	4a12      	ldr	r2, [pc, #72]	; (8004b50 <MX_USART3_UART_Init+0x50>)
 8004b08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <MX_USART3_UART_Init+0x4c>)
 8004b0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004b10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b12:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <MX_USART3_UART_Init+0x4c>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <MX_USART3_UART_Init+0x4c>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <MX_USART3_UART_Init+0x4c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <MX_USART3_UART_Init+0x4c>)
 8004b26:	220c      	movs	r2, #12
 8004b28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b2a:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <MX_USART3_UART_Init+0x4c>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b30:	4b06      	ldr	r3, [pc, #24]	; (8004b4c <MX_USART3_UART_Init+0x4c>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004b36:	4805      	ldr	r0, [pc, #20]	; (8004b4c <MX_USART3_UART_Init+0x4c>)
 8004b38:	f005 fa5e 	bl	8009ff8 <HAL_UART_Init>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004b42:	f7fe ff5d 	bl	8003a00 <Error_Handler>
  }

}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	200014a4 	.word	0x200014a4
 8004b50:	40004800 	.word	0x40004800

08004b54 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8004b58:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <MX_USART6_UART_Init+0x4c>)
 8004b5a:	4a12      	ldr	r2, [pc, #72]	; (8004ba4 <MX_USART6_UART_Init+0x50>)
 8004b5c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004b5e:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <MX_USART6_UART_Init+0x4c>)
 8004b60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004b64:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <MX_USART6_UART_Init+0x4c>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <MX_USART6_UART_Init+0x4c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <MX_USART6_UART_Init+0x4c>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <MX_USART6_UART_Init+0x4c>)
 8004b7a:	220c      	movs	r2, #12
 8004b7c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <MX_USART6_UART_Init+0x4c>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <MX_USART6_UART_Init+0x4c>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004b8a:	4805      	ldr	r0, [pc, #20]	; (8004ba0 <MX_USART6_UART_Init+0x4c>)
 8004b8c:	f005 fa34 	bl	8009ff8 <HAL_UART_Init>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004b96:	f7fe ff33 	bl	8003a00 <Error_Handler>
  }

}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20001584 	.word	0x20001584
 8004ba4:	40011400 	.word	0x40011400

08004ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08e      	sub	sp, #56	; 0x38
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a9a      	ldr	r2, [pc, #616]	; (8004e30 <HAL_UART_MspInit+0x288>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d12c      	bne.n	8004c24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	623b      	str	r3, [r7, #32]
 8004bce:	4b99      	ldr	r3, [pc, #612]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a98      	ldr	r2, [pc, #608]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004bd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bda:	4b96      	ldr	r3, [pc, #600]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004be2:	623b      	str	r3, [r7, #32]
 8004be4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
 8004bea:	4b92      	ldr	r3, [pc, #584]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4a91      	ldr	r2, [pc, #580]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004bf0:	f043 0310 	orr.w	r3, r3, #16
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4b8f      	ldr	r3, [pc, #572]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0310 	and.w	r3, r3, #16
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8004c02:	2303      	movs	r3, #3
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c06:	2302      	movs	r3, #2
 8004c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004c12:	2308      	movs	r3, #8
 8004c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4886      	ldr	r0, [pc, #536]	; (8004e38 <HAL_UART_MspInit+0x290>)
 8004c1e:	f001 fad7 	bl	80061d0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004c22:	e100      	b.n	8004e26 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART3)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a84      	ldr	r2, [pc, #528]	; (8004e3c <HAL_UART_MspInit+0x294>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	f040 8093 	bne.w	8004d56 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c30:	2300      	movs	r3, #0
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	4b7f      	ldr	r3, [pc, #508]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	4a7e      	ldr	r2, [pc, #504]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004c3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8004c40:	4b7c      	ldr	r3, [pc, #496]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	4b78      	ldr	r3, [pc, #480]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	4a77      	ldr	r2, [pc, #476]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004c56:	f043 0308 	orr.w	r3, r3, #8
 8004c5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5c:	4b75      	ldr	r3, [pc, #468]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c60:	f003 0308 	and.w	r3, r3, #8
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8004c68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6e:	2302      	movs	r3, #2
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c76:	2303      	movs	r3, #3
 8004c78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c82:	4619      	mov	r1, r3
 8004c84:	486e      	ldr	r0, [pc, #440]	; (8004e40 <HAL_UART_MspInit+0x298>)
 8004c86:	f001 faa3 	bl	80061d0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004c8a:	4b6e      	ldr	r3, [pc, #440]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004c8c:	4a6e      	ldr	r2, [pc, #440]	; (8004e48 <HAL_UART_MspInit+0x2a0>)
 8004c8e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004c90:	4b6c      	ldr	r3, [pc, #432]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004c92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c96:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c98:	4b6a      	ldr	r3, [pc, #424]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c9e:	4b69      	ldr	r3, [pc, #420]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ca4:	4b67      	ldr	r3, [pc, #412]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004caa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cac:	4b65      	ldr	r3, [pc, #404]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cb2:	4b64      	ldr	r3, [pc, #400]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004cb8:	4b62      	ldr	r3, [pc, #392]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004cbe:	4b61      	ldr	r3, [pc, #388]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004cc0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004cc4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cc6:	4b5f      	ldr	r3, [pc, #380]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004ccc:	485d      	ldr	r0, [pc, #372]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004cce:	f000 feed 	bl	8005aac <HAL_DMA_Init>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <HAL_UART_MspInit+0x134>
      Error_Handler();
 8004cd8:	f7fe fe92 	bl	8003a00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a59      	ldr	r2, [pc, #356]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ce2:	4a58      	ldr	r2, [pc, #352]	; (8004e44 <HAL_UART_MspInit+0x29c>)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004ce8:	4b58      	ldr	r3, [pc, #352]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004cea:	4a59      	ldr	r2, [pc, #356]	; (8004e50 <HAL_UART_MspInit+0x2a8>)
 8004cec:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004cee:	4b57      	ldr	r3, [pc, #348]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004cf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cf4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cf6:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004cf8:	2240      	movs	r2, #64	; 0x40
 8004cfa:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cfc:	4b53      	ldr	r3, [pc, #332]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d02:	4b52      	ldr	r3, [pc, #328]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004d04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d08:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d0a:	4b50      	ldr	r3, [pc, #320]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d10:	4b4e      	ldr	r3, [pc, #312]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004d16:	4b4d      	ldr	r3, [pc, #308]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d1c:	4b4b      	ldr	r3, [pc, #300]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d22:	4b4a      	ldr	r3, [pc, #296]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004d28:	4848      	ldr	r0, [pc, #288]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004d2a:	f000 febf 	bl	8005aac <HAL_DMA_Init>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8004d34:	f7fe fe64 	bl	8003a00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a44      	ldr	r2, [pc, #272]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d3e:	4a43      	ldr	r2, [pc, #268]	; (8004e4c <HAL_UART_MspInit+0x2a4>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004d44:	2200      	movs	r2, #0
 8004d46:	2100      	movs	r1, #0
 8004d48:	2027      	movs	r0, #39	; 0x27
 8004d4a:	f000 fe78 	bl	8005a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004d4e:	2027      	movs	r0, #39	; 0x27
 8004d50:	f000 fe91 	bl	8005a76 <HAL_NVIC_EnableIRQ>
}
 8004d54:	e067      	b.n	8004e26 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART6)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3e      	ldr	r2, [pc, #248]	; (8004e54 <HAL_UART_MspInit+0x2ac>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d162      	bne.n	8004e26 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	4b33      	ldr	r3, [pc, #204]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	4a32      	ldr	r2, [pc, #200]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004d6a:	f043 0320 	orr.w	r3, r3, #32
 8004d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8004d70:	4b30      	ldr	r3, [pc, #192]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	4a2b      	ldr	r2, [pc, #172]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004d86:	f043 0304 	orr.w	r3, r3, #4
 8004d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d8c:	4b29      	ldr	r3, [pc, #164]	; (8004e34 <HAL_UART_MspInit+0x28c>)
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8004d98:	23c0      	movs	r3, #192	; 0xc0
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004da4:	2303      	movs	r3, #3
 8004da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004da8:	2308      	movs	r3, #8
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db0:	4619      	mov	r1, r3
 8004db2:	4829      	ldr	r0, [pc, #164]	; (8004e58 <HAL_UART_MspInit+0x2b0>)
 8004db4:	f001 fa0c 	bl	80061d0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004dba:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <HAL_UART_MspInit+0x2b8>)
 8004dbc:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004dc0:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004dc4:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dc6:	4b25      	ldr	r3, [pc, #148]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dcc:	4b23      	ldr	r3, [pc, #140]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004dd2:	4b22      	ldr	r3, [pc, #136]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dd8:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dda:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004de6:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004dee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004df2:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004df4:	4b19      	ldr	r3, [pc, #100]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004dfa:	4818      	ldr	r0, [pc, #96]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004dfc:	f000 fe56 	bl	8005aac <HAL_DMA_Init>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <HAL_UART_MspInit+0x262>
      Error_Handler();
 8004e06:	f7fe fdfb 	bl	8003a00 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004e0e:	635a      	str	r2, [r3, #52]	; 0x34
 8004e10:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <HAL_UART_MspInit+0x2b4>)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004e16:	2200      	movs	r2, #0
 8004e18:	2100      	movs	r1, #0
 8004e1a:	2047      	movs	r0, #71	; 0x47
 8004e1c:	f000 fe0f 	bl	8005a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004e20:	2047      	movs	r0, #71	; 0x47
 8004e22:	f000 fe28 	bl	8005a76 <HAL_NVIC_EnableIRQ>
}
 8004e26:	bf00      	nop
 8004e28:	3738      	adds	r7, #56	; 0x38
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40007c00 	.word	0x40007c00
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40004800 	.word	0x40004800
 8004e40:	40020c00 	.word	0x40020c00
 8004e44:	20001444 	.word	0x20001444
 8004e48:	40026028 	.word	0x40026028
 8004e4c:	200014e4 	.word	0x200014e4
 8004e50:	40026058 	.word	0x40026058
 8004e54:	40011400 	.word	0x40011400
 8004e58:	40020800 	.word	0x40020800
 8004e5c:	200013e4 	.word	0x200013e4
 8004e60:	40026428 	.word	0x40026428

08004e64 <VR_Power_On>:


#include "main.h"


void VR_Power_On(void) {
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, SET);
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e6e:	4804      	ldr	r0, [pc, #16]	; (8004e80 <VR_Power_On+0x1c>)
 8004e70:	f001 fb72 	bl	8006558 <HAL_GPIO_WritePin>
	// note that runcam needs around 3-5 seconds to fully power on
	HAL_Delay(5000);
 8004e74:	f241 3088 	movw	r0, #5000	; 0x1388
 8004e78:	f000 f8e6 	bl	8005048 <HAL_Delay>
}
 8004e7c:	bf00      	nop
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40021800 	.word	0x40021800

08004e84 <VR_Power_Off>:

void VR_Power_Off(void) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e8e:	4802      	ldr	r0, [pc, #8]	; (8004e98 <VR_Power_Off+0x14>)
 8004e90:	f001 fb62 	bl	8006558 <HAL_GPIO_WritePin>
}
 8004e94:	bf00      	nop
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40021800 	.word	0x40021800

08004e9c <VR_Start_Rec>:

void VR_Start_Rec(void) {
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0

	// specific sequence of SET/RESET to start recording
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2180      	movs	r1, #128	; 0x80
 8004ea4:	480f      	ldr	r0, [pc, #60]	; (8004ee4 <VR_Start_Rec+0x48>)
 8004ea6:	f001 fb57 	bl	8006558 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004eaa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004eae:	f000 f8cb 	bl	8005048 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2180      	movs	r1, #128	; 0x80
 8004eb6:	480b      	ldr	r0, [pc, #44]	; (8004ee4 <VR_Start_Rec+0x48>)
 8004eb8:	f001 fb4e 	bl	8006558 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004ebc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004ec0:	f000 f8c2 	bl	8005048 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	4806      	ldr	r0, [pc, #24]	; (8004ee4 <VR_Start_Rec+0x48>)
 8004eca:	f001 fb45 	bl	8006558 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8004ece:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004ed2:	f000 f8b9 	bl	8005048 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2180      	movs	r1, #128	; 0x80
 8004eda:	4802      	ldr	r0, [pc, #8]	; (8004ee4 <VR_Start_Rec+0x48>)
 8004edc:	f001 fb3c 	bl	8006558 <HAL_GPIO_WritePin>

}
 8004ee0:	bf00      	nop
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40020c00 	.word	0x40020c00

08004ee8 <VR_Stop_Rec>:

void VR_Stop_Rec(void) {
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8004eec:	2201      	movs	r2, #1
 8004eee:	2180      	movs	r1, #128	; 0x80
 8004ef0:	4806      	ldr	r0, [pc, #24]	; (8004f0c <VR_Stop_Rec+0x24>)
 8004ef2:	f001 fb31 	bl	8006558 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8004ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004efa:	f000 f8a5 	bl	8005048 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8004efe:	2200      	movs	r2, #0
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	4802      	ldr	r0, [pc, #8]	; (8004f0c <VR_Stop_Rec+0x24>)
 8004f04:	f001 fb28 	bl	8006558 <HAL_GPIO_WritePin>
}
 8004f08:	bf00      	nop
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40020c00 	.word	0x40020c00

08004f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004f14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004f16:	e003      	b.n	8004f20 <LoopCopyDataInit>

08004f18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004f1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f1e:	3104      	adds	r1, #4

08004f20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f20:	480b      	ldr	r0, [pc, #44]	; (8004f50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004f24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f28:	d3f6      	bcc.n	8004f18 <CopyDataInit>
  ldr  r2, =_sbss
 8004f2a:	4a0b      	ldr	r2, [pc, #44]	; (8004f58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004f2c:	e002      	b.n	8004f34 <LoopFillZerobss>

08004f2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004f2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004f30:	f842 3b04 	str.w	r3, [r2], #4

08004f34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004f36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004f38:	d3f9      	bcc.n	8004f2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004f3a:	f7ff fc05 	bl	8004748 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f3e:	f009 fbd9 	bl	800e6f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f42:	f7fd fdaf 	bl	8002aa4 <main>
  bx  lr    
 8004f46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f48:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004f4c:	08015178 	.word	0x08015178
  ldr  r0, =_sdata
 8004f50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004f54:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8004f58:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8004f5c:	20001a48 	.word	0x20001a48

08004f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f60:	e7fe      	b.n	8004f60 <ADC_IRQHandler>
	...

08004f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f68:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <HAL_Init+0x40>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a0d      	ldr	r2, [pc, #52]	; (8004fa4 <HAL_Init+0x40>)
 8004f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <HAL_Init+0x40>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <HAL_Init+0x40>)
 8004f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f80:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <HAL_Init+0x40>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a07      	ldr	r2, [pc, #28]	; (8004fa4 <HAL_Init+0x40>)
 8004f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f8c:	2003      	movs	r0, #3
 8004f8e:	f000 fd4b 	bl	8005a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f92:	2000      	movs	r0, #0
 8004f94:	f000 f808 	bl	8004fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f98:	f7ff fa70 	bl	800447c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00

08004fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fb0:	4b12      	ldr	r3, [pc, #72]	; (8004ffc <HAL_InitTick+0x54>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	4b12      	ldr	r3, [pc, #72]	; (8005000 <HAL_InitTick+0x58>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fd63 	bl	8005a92 <HAL_SYSTICK_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e00e      	b.n	8004ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b0f      	cmp	r3, #15
 8004fda:	d80a      	bhi.n	8004ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fdc:	2200      	movs	r2, #0
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe4:	f000 fd2b 	bl	8005a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fe8:	4a06      	ldr	r2, [pc, #24]	; (8005004 <HAL_InitTick+0x5c>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000004 	.word	0x20000004
 8005000:	2000000c 	.word	0x2000000c
 8005004:	20000008 	.word	0x20000008

08005008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800500c:	4b06      	ldr	r3, [pc, #24]	; (8005028 <HAL_IncTick+0x20>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_IncTick+0x24>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4413      	add	r3, r2
 8005018:	4a04      	ldr	r2, [pc, #16]	; (800502c <HAL_IncTick+0x24>)
 800501a:	6013      	str	r3, [r2, #0]
}
 800501c:	bf00      	nop
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	2000000c 	.word	0x2000000c
 800502c:	200015c4 	.word	0x200015c4

08005030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
  return uwTick;
 8005034:	4b03      	ldr	r3, [pc, #12]	; (8005044 <HAL_GetTick+0x14>)
 8005036:	681b      	ldr	r3, [r3, #0]
}
 8005038:	4618      	mov	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	200015c4 	.word	0x200015c4

08005048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005050:	f7ff ffee 	bl	8005030 <HAL_GetTick>
 8005054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d005      	beq.n	800506e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005062:	4b0a      	ldr	r3, [pc, #40]	; (800508c <HAL_Delay+0x44>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4413      	add	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800506e:	bf00      	nop
 8005070:	f7ff ffde 	bl	8005030 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	429a      	cmp	r2, r3
 800507e:	d8f7      	bhi.n	8005070 <HAL_Delay+0x28>
  {
  }
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	2000000c 	.word	0x2000000c

08005090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e033      	b.n	800510e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fc f87a 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d118      	bne.n	8005100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80050d6:	f023 0302 	bic.w	r3, r3, #2
 80050da:	f043 0202 	orr.w	r2, r3, #2
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fad4 	bl	8005690 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	f043 0201 	orr.w	r2, r3, #1
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	641a      	str	r2, [r3, #64]	; 0x40
 80050fe:	e001      	b.n	8005104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005120:	2300      	movs	r3, #0
 8005122:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800512a:	2b01      	cmp	r3, #1
 800512c:	d101      	bne.n	8005132 <HAL_ADC_Start+0x1a>
 800512e:	2302      	movs	r3, #2
 8005130:	e0a5      	b.n	800527e <HAL_ADC_Start+0x166>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d018      	beq.n	800517a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005158:	4b4c      	ldr	r3, [pc, #304]	; (800528c <HAL_ADC_Start+0x174>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a4c      	ldr	r2, [pc, #304]	; (8005290 <HAL_ADC_Start+0x178>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	0c9a      	lsrs	r2, r3, #18
 8005164:	4613      	mov	r3, r2
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4413      	add	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800516c:	e002      	b.n	8005174 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	3b01      	subs	r3, #1
 8005172:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f9      	bne.n	800516e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d179      	bne.n	800527c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005190:	f023 0301 	bic.w	r3, r3, #1
 8005194:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	d106      	bne.n	80051d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051cc:	f023 0206 	bic.w	r2, r3, #6
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	645a      	str	r2, [r3, #68]	; 0x44
 80051d4:	e002      	b.n	80051dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051e4:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_ADC_Start+0x17c>)
 80051e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80051f0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f003 031f 	and.w	r3, r3, #31
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d12a      	bne.n	8005254 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a25      	ldr	r2, [pc, #148]	; (8005298 <HAL_ADC_Start+0x180>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d015      	beq.n	8005234 <HAL_ADC_Start+0x11c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a23      	ldr	r2, [pc, #140]	; (800529c <HAL_ADC_Start+0x184>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d105      	bne.n	800521e <HAL_ADC_Start+0x106>
 8005212:	4b20      	ldr	r3, [pc, #128]	; (8005294 <HAL_ADC_Start+0x17c>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1f      	ldr	r2, [pc, #124]	; (80052a0 <HAL_ADC_Start+0x188>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d129      	bne.n	800527c <HAL_ADC_Start+0x164>
 8005228:	4b1a      	ldr	r3, [pc, #104]	; (8005294 <HAL_ADC_Start+0x17c>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b00      	cmp	r3, #0
 8005232:	d123      	bne.n	800527c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d11c      	bne.n	800527c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005250:	609a      	str	r2, [r3, #8]
 8005252:	e013      	b.n	800527c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a0f      	ldr	r2, [pc, #60]	; (8005298 <HAL_ADC_Start+0x180>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d10e      	bne.n	800527c <HAL_ADC_Start+0x164>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d107      	bne.n	800527c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800527a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	20000004 	.word	0x20000004
 8005290:	431bde83 	.word	0x431bde83
 8005294:	40012300 	.word	0x40012300
 8005298:	40012000 	.word	0x40012000
 800529c:	40012100 	.word	0x40012100
 80052a0:	40012200 	.word	0x40012200

080052a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_ADC_Stop+0x16>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e021      	b.n	80052fe <HAL_ADC_Stop+0x5a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80052e8:	f023 0301 	bic.w	r3, r3, #1
 80052ec:	f043 0201 	orr.w	r2, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b084      	sub	sp, #16
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005326:	d113      	bne.n	8005350 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005336:	d10b      	bne.n	8005350 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	f043 0220 	orr.w	r2, r3, #32
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e05c      	b.n	800540a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005350:	f7ff fe6e 	bl	8005030 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005356:	e01a      	b.n	800538e <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535e:	d016      	beq.n	800538e <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <HAL_ADC_PollForConversion+0x6c>
 8005366:	f7ff fe63 	bl	8005030 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d20b      	bcs.n	800538e <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e03d      	b.n	800540a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b02      	cmp	r3, #2
 800539a:	d1dd      	bne.n	8005358 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0212 	mvn.w	r2, #18
 80053a4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d123      	bne.n	8005408 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11f      	bne.n	8005408 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d006      	beq.n	80053e4 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d111      	bne.n	8005408 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d105      	bne.n	8005408 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f043 0201 	orr.w	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3710      	adds	r7, #16
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005420:	4618      	mov	r0, r3
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005440:	2b01      	cmp	r3, #1
 8005442:	d101      	bne.n	8005448 <HAL_ADC_ConfigChannel+0x1c>
 8005444:	2302      	movs	r3, #2
 8005446:	e113      	b.n	8005670 <HAL_ADC_ConfigChannel+0x244>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b09      	cmp	r3, #9
 8005456:	d925      	bls.n	80054a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68d9      	ldr	r1, [r3, #12]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	4613      	mov	r3, r2
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	4413      	add	r3, r2
 800546c:	3b1e      	subs	r3, #30
 800546e:	2207      	movs	r2, #7
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	43da      	mvns	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	400a      	ands	r2, r1
 800547c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68d9      	ldr	r1, [r3, #12]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	b29b      	uxth	r3, r3
 800548e:	4618      	mov	r0, r3
 8005490:	4603      	mov	r3, r0
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	4403      	add	r3, r0
 8005496:	3b1e      	subs	r3, #30
 8005498:	409a      	lsls	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	60da      	str	r2, [r3, #12]
 80054a2:	e022      	b.n	80054ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6919      	ldr	r1, [r3, #16]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	2207      	movs	r2, #7
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43da      	mvns	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	400a      	ands	r2, r1
 80054c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6919      	ldr	r1, [r3, #16]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	4618      	mov	r0, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4403      	add	r3, r0
 80054e0:	409a      	lsls	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b06      	cmp	r3, #6
 80054f0:	d824      	bhi.n	800553c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	3b05      	subs	r3, #5
 8005504:	221f      	movs	r2, #31
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	43da      	mvns	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	400a      	ands	r2, r1
 8005512:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	b29b      	uxth	r3, r3
 8005520:	4618      	mov	r0, r3
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	3b05      	subs	r3, #5
 800552e:	fa00 f203 	lsl.w	r2, r0, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	635a      	str	r2, [r3, #52]	; 0x34
 800553a:	e04c      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b0c      	cmp	r3, #12
 8005542:	d824      	bhi.n	800558e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	3b23      	subs	r3, #35	; 0x23
 8005556:	221f      	movs	r2, #31
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	43da      	mvns	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	400a      	ands	r2, r1
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	b29b      	uxth	r3, r3
 8005572:	4618      	mov	r0, r3
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	4613      	mov	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	3b23      	subs	r3, #35	; 0x23
 8005580:	fa00 f203 	lsl.w	r2, r0, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	631a      	str	r2, [r3, #48]	; 0x30
 800558c:	e023      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	3b41      	subs	r3, #65	; 0x41
 80055a0:	221f      	movs	r2, #31
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43da      	mvns	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	400a      	ands	r2, r1
 80055ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	4618      	mov	r0, r3
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	3b41      	subs	r3, #65	; 0x41
 80055ca:	fa00 f203 	lsl.w	r2, r0, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055d6:	4b29      	ldr	r3, [pc, #164]	; (800567c <HAL_ADC_ConfigChannel+0x250>)
 80055d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a28      	ldr	r2, [pc, #160]	; (8005680 <HAL_ADC_ConfigChannel+0x254>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10f      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x1d8>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b12      	cmp	r3, #18
 80055ea:	d10b      	bne.n	8005604 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1d      	ldr	r2, [pc, #116]	; (8005680 <HAL_ADC_ConfigChannel+0x254>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d12b      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x23a>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <HAL_ADC_ConfigChannel+0x258>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <HAL_ADC_ConfigChannel+0x1f4>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b11      	cmp	r3, #17
 800561e:	d122      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a11      	ldr	r2, [pc, #68]	; (8005684 <HAL_ADC_ConfigChannel+0x258>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d111      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_ADC_ConfigChannel+0x25c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a11      	ldr	r2, [pc, #68]	; (800568c <HAL_ADC_ConfigChannel+0x260>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	0c9a      	lsrs	r2, r3, #18
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005658:	e002      	b.n	8005660 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	3b01      	subs	r3, #1
 800565e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1f9      	bne.n	800565a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40012300 	.word	0x40012300
 8005680:	40012000 	.word	0x40012000
 8005684:	10000012 	.word	0x10000012
 8005688:	20000004 	.word	0x20000004
 800568c:	431bde83 	.word	0x431bde83

08005690 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005698:	4b79      	ldr	r3, [pc, #484]	; (8005880 <ADC_Init+0x1f0>)
 800569a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6859      	ldr	r1, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	021a      	lsls	r2, r3, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	430a      	orrs	r2, r1
 80056d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6859      	ldr	r1, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800570a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6899      	ldr	r1, [r3, #8]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005722:	4a58      	ldr	r2, [pc, #352]	; (8005884 <ADC_Init+0x1f4>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d022      	beq.n	800576e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005736:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6899      	ldr	r1, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005758:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6899      	ldr	r1, [r3, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	609a      	str	r2, [r3, #8]
 800576c:	e00f      	b.n	800578e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800577c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800578c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f022 0202 	bic.w	r2, r2, #2
 800579c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6899      	ldr	r1, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7e1b      	ldrb	r3, [r3, #24]
 80057a8:	005a      	lsls	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01b      	beq.n	80057f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6859      	ldr	r1, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	3b01      	subs	r3, #1
 80057e8:	035a      	lsls	r2, r3, #13
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
 80057f2:	e007      	b.n	8005804 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005802:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	3b01      	subs	r3, #1
 8005820:	051a      	lsls	r2, r3, #20
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6899      	ldr	r1, [r3, #8]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005846:	025a      	lsls	r2, r3, #9
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6899      	ldr	r1, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	029a      	lsls	r2, r3, #10
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	430a      	orrs	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	40012300 	.word	0x40012300
 8005884:	0f000001 	.word	0x0f000001

08005888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <__NVIC_SetPriorityGrouping+0x44>)
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058a4:	4013      	ands	r3, r2
 80058a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058ba:	4a04      	ldr	r2, [pc, #16]	; (80058cc <__NVIC_SetPriorityGrouping+0x44>)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	60d3      	str	r3, [r2, #12]
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	e000ed00 	.word	0xe000ed00

080058d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058d4:	4b04      	ldr	r3, [pc, #16]	; (80058e8 <__NVIC_GetPriorityGrouping+0x18>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	0a1b      	lsrs	r3, r3, #8
 80058da:	f003 0307 	and.w	r3, r3, #7
}
 80058de:	4618      	mov	r0, r3
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	e000ed00 	.word	0xe000ed00

080058ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	4603      	mov	r3, r0
 80058f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	db0b      	blt.n	8005916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	f003 021f 	and.w	r2, r3, #31
 8005904:	4907      	ldr	r1, [pc, #28]	; (8005924 <__NVIC_EnableIRQ+0x38>)
 8005906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	2001      	movs	r0, #1
 800590e:	fa00 f202 	lsl.w	r2, r0, r2
 8005912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	e000e100 	.word	0xe000e100

08005928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	4603      	mov	r3, r0
 8005930:	6039      	str	r1, [r7, #0]
 8005932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005938:	2b00      	cmp	r3, #0
 800593a:	db0a      	blt.n	8005952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	b2da      	uxtb	r2, r3
 8005940:	490c      	ldr	r1, [pc, #48]	; (8005974 <__NVIC_SetPriority+0x4c>)
 8005942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005946:	0112      	lsls	r2, r2, #4
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	440b      	add	r3, r1
 800594c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005950:	e00a      	b.n	8005968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	b2da      	uxtb	r2, r3
 8005956:	4908      	ldr	r1, [pc, #32]	; (8005978 <__NVIC_SetPriority+0x50>)
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	3b04      	subs	r3, #4
 8005960:	0112      	lsls	r2, r2, #4
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	440b      	add	r3, r1
 8005966:	761a      	strb	r2, [r3, #24]
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	e000e100 	.word	0xe000e100
 8005978:	e000ed00 	.word	0xe000ed00

0800597c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800597c:	b480      	push	{r7}
 800597e:	b089      	sub	sp, #36	; 0x24
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f1c3 0307 	rsb	r3, r3, #7
 8005996:	2b04      	cmp	r3, #4
 8005998:	bf28      	it	cs
 800599a:	2304      	movcs	r3, #4
 800599c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	3304      	adds	r3, #4
 80059a2:	2b06      	cmp	r3, #6
 80059a4:	d902      	bls.n	80059ac <NVIC_EncodePriority+0x30>
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	3b03      	subs	r3, #3
 80059aa:	e000      	b.n	80059ae <NVIC_EncodePriority+0x32>
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059b0:	f04f 32ff 	mov.w	r2, #4294967295
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	43da      	mvns	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	401a      	ands	r2, r3
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059c4:	f04f 31ff 	mov.w	r1, #4294967295
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	fa01 f303 	lsl.w	r3, r1, r3
 80059ce:	43d9      	mvns	r1, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059d4:	4313      	orrs	r3, r2
         );
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3724      	adds	r7, #36	; 0x24
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
	...

080059e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059f4:	d301      	bcc.n	80059fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059f6:	2301      	movs	r3, #1
 80059f8:	e00f      	b.n	8005a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059fa:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <SysTick_Config+0x40>)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a02:	210f      	movs	r1, #15
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	f7ff ff8e 	bl	8005928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a0c:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <SysTick_Config+0x40>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a12:	4b04      	ldr	r3, [pc, #16]	; (8005a24 <SysTick_Config+0x40>)
 8005a14:	2207      	movs	r2, #7
 8005a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3708      	adds	r7, #8
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	e000e010 	.word	0xe000e010

08005a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7ff ff29 	bl	8005888 <__NVIC_SetPriorityGrouping>
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	4603      	mov	r3, r0
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a50:	f7ff ff3e 	bl	80058d0 <__NVIC_GetPriorityGrouping>
 8005a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68b9      	ldr	r1, [r7, #8]
 8005a5a:	6978      	ldr	r0, [r7, #20]
 8005a5c:	f7ff ff8e 	bl	800597c <NVIC_EncodePriority>
 8005a60:	4602      	mov	r2, r0
 8005a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a66:	4611      	mov	r1, r2
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ff5d 	bl	8005928 <__NVIC_SetPriority>
}
 8005a6e:	bf00      	nop
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff ff31 	bl	80058ec <__NVIC_EnableIRQ>
}
 8005a8a:	bf00      	nop
 8005a8c:	3708      	adds	r7, #8
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b082      	sub	sp, #8
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff ffa2 	bl	80059e4 <SysTick_Config>
 8005aa0:	4603      	mov	r3, r0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3708      	adds	r7, #8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ab8:	f7ff faba 	bl	8005030 <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e099      	b.n	8005bfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ae8:	e00f      	b.n	8005b0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005aea:	f7ff faa1 	bl	8005030 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	d908      	bls.n	8005b0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2203      	movs	r2, #3
 8005b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e078      	b.n	8005bfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0301 	and.w	r3, r3, #1
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e8      	bne.n	8005aea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4b38      	ldr	r3, [pc, #224]	; (8005c04 <HAL_DMA_Init+0x158>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d107      	bne.n	8005b74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f023 0307 	bic.w	r3, r3, #7
 8005b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d117      	bne.n	8005bce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fa91 	bl	80060d8 <DMA_CheckFifoParam>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2240      	movs	r2, #64	; 0x40
 8005bc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e016      	b.n	8005bfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fa48 	bl	800606c <DMA_CalcBaseAndBitshift>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be4:	223f      	movs	r2, #63	; 0x3f
 8005be6:	409a      	lsls	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	f010803f 	.word	0xf010803f

08005c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b086      	sub	sp, #24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_DMA_Start_IT+0x26>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e040      	b.n	8005cb0 <HAL_DMA_Start_IT+0xa8>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d12f      	bne.n	8005ca2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f000 f9da 	bl	8006010 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c60:	223f      	movs	r2, #63	; 0x3f
 8005c62:	409a      	lsls	r2, r3
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0216 	orr.w	r2, r2, #22
 8005c76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0208 	orr.w	r2, r2, #8
 8005c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0201 	orr.w	r2, r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e005      	b.n	8005cae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005caa:	2302      	movs	r3, #2
 8005cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d004      	beq.n	8005cd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2280      	movs	r2, #128	; 0x80
 8005cd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e00c      	b.n	8005cf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2205      	movs	r2, #5
 8005cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0201 	bic.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d08:	4b92      	ldr	r3, [pc, #584]	; (8005f54 <HAL_DMA_IRQHandler+0x258>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a92      	ldr	r2, [pc, #584]	; (8005f58 <HAL_DMA_IRQHandler+0x25c>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	0a9b      	lsrs	r3, r3, #10
 8005d14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d26:	2208      	movs	r2, #8
 8005d28:	409a      	lsls	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d01a      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0304 	and.w	r3, r3, #4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d013      	beq.n	8005d68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f022 0204 	bic.w	r2, r2, #4
 8005d4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d54:	2208      	movs	r2, #8
 8005d56:	409a      	lsls	r2, r3
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d60:	f043 0201 	orr.w	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	409a      	lsls	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4013      	ands	r3, r2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d012      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	f043 0202 	orr.w	r2, r3, #2
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da2:	2204      	movs	r2, #4
 8005da4:	409a      	lsls	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d012      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00b      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	f043 0204 	orr.w	r2, r3, #4
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd8:	2210      	movs	r2, #16
 8005dda:	409a      	lsls	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d043      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d03c      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df6:	2210      	movs	r2, #16
 8005df8:	409a      	lsls	r2, r3
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d018      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d108      	bne.n	8005e2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d024      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
 8005e2a:	e01f      	b.n	8005e6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01b      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	4798      	blx	r3
 8005e3c:	e016      	b.n	8005e6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d107      	bne.n	8005e5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0208 	bic.w	r2, r2, #8
 8005e5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e70:	2220      	movs	r2, #32
 8005e72:	409a      	lsls	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 808e 	beq.w	8005f9a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 8086 	beq.w	8005f9a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e92:	2220      	movs	r2, #32
 8005e94:	409a      	lsls	r2, r3
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	d136      	bne.n	8005f14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0216 	bic.w	r2, r2, #22
 8005eb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ec4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <HAL_DMA_IRQHandler+0x1da>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0208 	bic.w	r2, r2, #8
 8005ee4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eea:	223f      	movs	r2, #63	; 0x3f
 8005eec:	409a      	lsls	r2, r3
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d07d      	beq.n	8006006 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
        }
        return;
 8005f12:	e078      	b.n	8006006 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01c      	beq.n	8005f5c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d108      	bne.n	8005f42 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d030      	beq.n	8005f9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
 8005f40:	e02b      	b.n	8005f9a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d027      	beq.n	8005f9a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	4798      	blx	r3
 8005f52:	e022      	b.n	8005f9a <HAL_DMA_IRQHandler+0x29e>
 8005f54:	20000004 	.word	0x20000004
 8005f58:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10f      	bne.n	8005f8a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0210 	bic.w	r2, r2, #16
 8005f78:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d032      	beq.n	8006008 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d022      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 0201 	bic.w	r2, r2, #1
 8005fc4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d307      	bcc.n	8005fe2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f2      	bne.n	8005fc6 <HAL_DMA_IRQHandler+0x2ca>
 8005fe0:	e000      	b.n	8005fe4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005fe2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d005      	beq.n	8006008 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	4798      	blx	r3
 8006004:	e000      	b.n	8006008 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006006:	bf00      	nop
    }
  }
}
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop

08006010 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800602c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b40      	cmp	r3, #64	; 0x40
 800603c:	d108      	bne.n	8006050 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800604e:	e007      	b.n	8006060 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68ba      	ldr	r2, [r7, #8]
 8006056:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	60da      	str	r2, [r3, #12]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800606c:	b480      	push	{r7}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	3b10      	subs	r3, #16
 800607c:	4a14      	ldr	r2, [pc, #80]	; (80060d0 <DMA_CalcBaseAndBitshift+0x64>)
 800607e:	fba2 2303 	umull	r2, r3, r2, r3
 8006082:	091b      	lsrs	r3, r3, #4
 8006084:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006086:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <DMA_CalcBaseAndBitshift+0x68>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b03      	cmp	r3, #3
 8006098:	d909      	bls.n	80060ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060a2:	f023 0303 	bic.w	r3, r3, #3
 80060a6:	1d1a      	adds	r2, r3, #4
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	659a      	str	r2, [r3, #88]	; 0x58
 80060ac:	e007      	b.n	80060be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060b6:	f023 0303 	bic.w	r3, r3, #3
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	aaaaaaab 	.word	0xaaaaaaab
 80060d4:	08014bd0 	.word	0x08014bd0

080060d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d11f      	bne.n	8006132 <DMA_CheckFifoParam+0x5a>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	d856      	bhi.n	80061a6 <DMA_CheckFifoParam+0xce>
 80060f8:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <DMA_CheckFifoParam+0x28>)
 80060fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fe:	bf00      	nop
 8006100:	08006111 	.word	0x08006111
 8006104:	08006123 	.word	0x08006123
 8006108:	08006111 	.word	0x08006111
 800610c:	080061a7 	.word	0x080061a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d046      	beq.n	80061aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006120:	e043      	b.n	80061aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800612a:	d140      	bne.n	80061ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006130:	e03d      	b.n	80061ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613a:	d121      	bne.n	8006180 <DMA_CheckFifoParam+0xa8>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b03      	cmp	r3, #3
 8006140:	d837      	bhi.n	80061b2 <DMA_CheckFifoParam+0xda>
 8006142:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <DMA_CheckFifoParam+0x70>)
 8006144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006148:	08006159 	.word	0x08006159
 800614c:	0800615f 	.word	0x0800615f
 8006150:	08006159 	.word	0x08006159
 8006154:	08006171 	.word	0x08006171
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	73fb      	strb	r3, [r7, #15]
      break;
 800615c:	e030      	b.n	80061c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d025      	beq.n	80061b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800616e:	e022      	b.n	80061b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006178:	d11f      	bne.n	80061ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800617e:	e01c      	b.n	80061ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d903      	bls.n	800618e <DMA_CheckFifoParam+0xb6>
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2b03      	cmp	r3, #3
 800618a:	d003      	beq.n	8006194 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800618c:	e018      	b.n	80061c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	73fb      	strb	r3, [r7, #15]
      break;
 8006192:	e015      	b.n	80061c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00e      	beq.n	80061be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	73fb      	strb	r3, [r7, #15]
      break;
 80061a4:	e00b      	b.n	80061be <DMA_CheckFifoParam+0xe6>
      break;
 80061a6:	bf00      	nop
 80061a8:	e00a      	b.n	80061c0 <DMA_CheckFifoParam+0xe8>
      break;
 80061aa:	bf00      	nop
 80061ac:	e008      	b.n	80061c0 <DMA_CheckFifoParam+0xe8>
      break;
 80061ae:	bf00      	nop
 80061b0:	e006      	b.n	80061c0 <DMA_CheckFifoParam+0xe8>
      break;
 80061b2:	bf00      	nop
 80061b4:	e004      	b.n	80061c0 <DMA_CheckFifoParam+0xe8>
      break;
 80061b6:	bf00      	nop
 80061b8:	e002      	b.n	80061c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80061ba:	bf00      	nop
 80061bc:	e000      	b.n	80061c0 <DMA_CheckFifoParam+0xe8>
      break;
 80061be:	bf00      	nop
    }
  } 
  
  return status; 
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop

080061d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b089      	sub	sp, #36	; 0x24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80061de:	2300      	movs	r3, #0
 80061e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	e177      	b.n	80064dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80061ec:	2201      	movs	r2, #1
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	4013      	ands	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	429a      	cmp	r2, r3
 8006206:	f040 8166 	bne.w	80064d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d00b      	beq.n	800622a <HAL_GPIO_Init+0x5a>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b02      	cmp	r3, #2
 8006218:	d007      	beq.n	800622a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800621e:	2b11      	cmp	r3, #17
 8006220:	d003      	beq.n	800622a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b12      	cmp	r3, #18
 8006228:	d130      	bne.n	800628c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	2203      	movs	r2, #3
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4013      	ands	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	4313      	orrs	r3, r2
 8006252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006260:	2201      	movs	r2, #1
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4013      	ands	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	091b      	lsrs	r3, r3, #4
 8006276:	f003 0201 	and.w	r2, r3, #1
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	fa02 f303 	lsl.w	r3, r2, r3
 8006280:	69ba      	ldr	r2, [r7, #24]
 8006282:	4313      	orrs	r3, r2
 8006284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006292:	69fb      	ldr	r3, [r7, #28]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	2203      	movs	r2, #3
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	43db      	mvns	r3, r3
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	4013      	ands	r3, r2
 80062a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689a      	ldr	r2, [r3, #8]
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d003      	beq.n	80062cc <HAL_GPIO_Init+0xfc>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b12      	cmp	r3, #18
 80062ca:	d123      	bne.n	8006314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	08da      	lsrs	r2, r3, #3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3208      	adds	r2, #8
 80062d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	220f      	movs	r2, #15
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	43db      	mvns	r3, r3
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4013      	ands	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4313      	orrs	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	08da      	lsrs	r2, r3, #3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3208      	adds	r2, #8
 800630e:	69b9      	ldr	r1, [r7, #24]
 8006310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	2203      	movs	r2, #3
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	43db      	mvns	r3, r3
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	4013      	ands	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f003 0203 	and.w	r2, r3, #3
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	005b      	lsls	r3, r3, #1
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	4313      	orrs	r3, r2
 8006340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 80c0 	beq.w	80064d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	4b66      	ldr	r3, [pc, #408]	; (80064f4 <HAL_GPIO_Init+0x324>)
 800635c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635e:	4a65      	ldr	r2, [pc, #404]	; (80064f4 <HAL_GPIO_Init+0x324>)
 8006360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006364:	6453      	str	r3, [r2, #68]	; 0x44
 8006366:	4b63      	ldr	r3, [pc, #396]	; (80064f4 <HAL_GPIO_Init+0x324>)
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006372:	4a61      	ldr	r2, [pc, #388]	; (80064f8 <HAL_GPIO_Init+0x328>)
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	089b      	lsrs	r3, r3, #2
 8006378:	3302      	adds	r3, #2
 800637a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800637e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	220f      	movs	r2, #15
 800638a:	fa02 f303 	lsl.w	r3, r2, r3
 800638e:	43db      	mvns	r3, r3
 8006390:	69ba      	ldr	r2, [r7, #24]
 8006392:	4013      	ands	r3, r2
 8006394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a58      	ldr	r2, [pc, #352]	; (80064fc <HAL_GPIO_Init+0x32c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d037      	beq.n	800640e <HAL_GPIO_Init+0x23e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a57      	ldr	r2, [pc, #348]	; (8006500 <HAL_GPIO_Init+0x330>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d031      	beq.n	800640a <HAL_GPIO_Init+0x23a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a56      	ldr	r2, [pc, #344]	; (8006504 <HAL_GPIO_Init+0x334>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d02b      	beq.n	8006406 <HAL_GPIO_Init+0x236>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a55      	ldr	r2, [pc, #340]	; (8006508 <HAL_GPIO_Init+0x338>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d025      	beq.n	8006402 <HAL_GPIO_Init+0x232>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a54      	ldr	r2, [pc, #336]	; (800650c <HAL_GPIO_Init+0x33c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01f      	beq.n	80063fe <HAL_GPIO_Init+0x22e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a53      	ldr	r2, [pc, #332]	; (8006510 <HAL_GPIO_Init+0x340>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d019      	beq.n	80063fa <HAL_GPIO_Init+0x22a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a52      	ldr	r2, [pc, #328]	; (8006514 <HAL_GPIO_Init+0x344>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d013      	beq.n	80063f6 <HAL_GPIO_Init+0x226>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a51      	ldr	r2, [pc, #324]	; (8006518 <HAL_GPIO_Init+0x348>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00d      	beq.n	80063f2 <HAL_GPIO_Init+0x222>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a50      	ldr	r2, [pc, #320]	; (800651c <HAL_GPIO_Init+0x34c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d007      	beq.n	80063ee <HAL_GPIO_Init+0x21e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a4f      	ldr	r2, [pc, #316]	; (8006520 <HAL_GPIO_Init+0x350>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d101      	bne.n	80063ea <HAL_GPIO_Init+0x21a>
 80063e6:	2309      	movs	r3, #9
 80063e8:	e012      	b.n	8006410 <HAL_GPIO_Init+0x240>
 80063ea:	230a      	movs	r3, #10
 80063ec:	e010      	b.n	8006410 <HAL_GPIO_Init+0x240>
 80063ee:	2308      	movs	r3, #8
 80063f0:	e00e      	b.n	8006410 <HAL_GPIO_Init+0x240>
 80063f2:	2307      	movs	r3, #7
 80063f4:	e00c      	b.n	8006410 <HAL_GPIO_Init+0x240>
 80063f6:	2306      	movs	r3, #6
 80063f8:	e00a      	b.n	8006410 <HAL_GPIO_Init+0x240>
 80063fa:	2305      	movs	r3, #5
 80063fc:	e008      	b.n	8006410 <HAL_GPIO_Init+0x240>
 80063fe:	2304      	movs	r3, #4
 8006400:	e006      	b.n	8006410 <HAL_GPIO_Init+0x240>
 8006402:	2303      	movs	r3, #3
 8006404:	e004      	b.n	8006410 <HAL_GPIO_Init+0x240>
 8006406:	2302      	movs	r3, #2
 8006408:	e002      	b.n	8006410 <HAL_GPIO_Init+0x240>
 800640a:	2301      	movs	r3, #1
 800640c:	e000      	b.n	8006410 <HAL_GPIO_Init+0x240>
 800640e:	2300      	movs	r3, #0
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	f002 0203 	and.w	r2, r2, #3
 8006416:	0092      	lsls	r2, r2, #2
 8006418:	4093      	lsls	r3, r2
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	4313      	orrs	r3, r2
 800641e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006420:	4935      	ldr	r1, [pc, #212]	; (80064f8 <HAL_GPIO_Init+0x328>)
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	089b      	lsrs	r3, r3, #2
 8006426:	3302      	adds	r3, #2
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800642e:	4b3d      	ldr	r3, [pc, #244]	; (8006524 <HAL_GPIO_Init+0x354>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	43db      	mvns	r3, r3
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	4013      	ands	r3, r2
 800643c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006452:	4a34      	ldr	r2, [pc, #208]	; (8006524 <HAL_GPIO_Init+0x354>)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006458:	4b32      	ldr	r3, [pc, #200]	; (8006524 <HAL_GPIO_Init+0x354>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	43db      	mvns	r3, r3
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	4013      	ands	r3, r2
 8006466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800647c:	4a29      	ldr	r2, [pc, #164]	; (8006524 <HAL_GPIO_Init+0x354>)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006482:	4b28      	ldr	r3, [pc, #160]	; (8006524 <HAL_GPIO_Init+0x354>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	43db      	mvns	r3, r3
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	4013      	ands	r3, r2
 8006490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800649e:	69ba      	ldr	r2, [r7, #24]
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064a6:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <HAL_GPIO_Init+0x354>)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064ac:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <HAL_GPIO_Init+0x354>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	43db      	mvns	r3, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4013      	ands	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80064d0:	4a14      	ldr	r2, [pc, #80]	; (8006524 <HAL_GPIO_Init+0x354>)
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	3301      	adds	r3, #1
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	2b0f      	cmp	r3, #15
 80064e0:	f67f ae84 	bls.w	80061ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	3724      	adds	r7, #36	; 0x24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40023800 	.word	0x40023800
 80064f8:	40013800 	.word	0x40013800
 80064fc:	40020000 	.word	0x40020000
 8006500:	40020400 	.word	0x40020400
 8006504:	40020800 	.word	0x40020800
 8006508:	40020c00 	.word	0x40020c00
 800650c:	40021000 	.word	0x40021000
 8006510:	40021400 	.word	0x40021400
 8006514:	40021800 	.word	0x40021800
 8006518:	40021c00 	.word	0x40021c00
 800651c:	40022000 	.word	0x40022000
 8006520:	40022400 	.word	0x40022400
 8006524:	40013c00 	.word	0x40013c00

08006528 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	887b      	ldrh	r3, [r7, #2]
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d002      	beq.n	8006546 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006540:	2301      	movs	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	e001      	b.n	800654a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	807b      	strh	r3, [r7, #2]
 8006564:	4613      	mov	r3, r2
 8006566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006568:	787b      	ldrb	r3, [r7, #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800656e:	887a      	ldrh	r2, [r7, #2]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006574:	e003      	b.n	800657e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006576:	887b      	ldrh	r3, [r7, #2]
 8006578:	041a      	lsls	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	619a      	str	r2, [r3, #24]
}
 800657e:	bf00      	nop
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	887b      	ldrh	r3, [r7, #2]
 800659c:	401a      	ands	r2, r3
 800659e:	887b      	ldrh	r3, [r7, #2]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d104      	bne.n	80065ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80065a4:	887b      	ldrh	r3, [r7, #2]
 80065a6:	041a      	lsls	r2, r3, #16
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80065ac:	e002      	b.n	80065b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80065ae:	887a      	ldrh	r2, [r7, #2]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	619a      	str	r2, [r3, #24]
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80065ca:	4b08      	ldr	r3, [pc, #32]	; (80065ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065cc:	695a      	ldr	r2, [r3, #20]
 80065ce:	88fb      	ldrh	r3, [r7, #6]
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d006      	beq.n	80065e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065d6:	4a05      	ldr	r2, [pc, #20]	; (80065ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80065d8:	88fb      	ldrh	r3, [r7, #6]
 80065da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7fc fe50 	bl	8003284 <HAL_GPIO_EXTI_Callback>
  }
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40013c00 	.word	0x40013c00

080065f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e12b      	b.n	800685a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fb fb48 	bl	8001cac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2224      	movs	r2, #36	; 0x24
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0201 	bic.w	r2, r2, #1
 8006632:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006642:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006652:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006654:	f001 fc48 	bl	8007ee8 <HAL_RCC_GetPCLK1Freq>
 8006658:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	4a81      	ldr	r2, [pc, #516]	; (8006864 <HAL_I2C_Init+0x274>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d807      	bhi.n	8006674 <HAL_I2C_Init+0x84>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	4a80      	ldr	r2, [pc, #512]	; (8006868 <HAL_I2C_Init+0x278>)
 8006668:	4293      	cmp	r3, r2
 800666a:	bf94      	ite	ls
 800666c:	2301      	movls	r3, #1
 800666e:	2300      	movhi	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	e006      	b.n	8006682 <HAL_I2C_Init+0x92>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a7d      	ldr	r2, [pc, #500]	; (800686c <HAL_I2C_Init+0x27c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	bf94      	ite	ls
 800667c:	2301      	movls	r3, #1
 800667e:	2300      	movhi	r3, #0
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e0e7      	b.n	800685a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4a78      	ldr	r2, [pc, #480]	; (8006870 <HAL_I2C_Init+0x280>)
 800668e:	fba2 2303 	umull	r2, r3, r2, r3
 8006692:	0c9b      	lsrs	r3, r3, #18
 8006694:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4a6a      	ldr	r2, [pc, #424]	; (8006864 <HAL_I2C_Init+0x274>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d802      	bhi.n	80066c4 <HAL_I2C_Init+0xd4>
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	3301      	adds	r3, #1
 80066c2:	e009      	b.n	80066d8 <HAL_I2C_Init+0xe8>
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066ca:	fb02 f303 	mul.w	r3, r2, r3
 80066ce:	4a69      	ldr	r2, [pc, #420]	; (8006874 <HAL_I2C_Init+0x284>)
 80066d0:	fba2 2303 	umull	r2, r3, r2, r3
 80066d4:	099b      	lsrs	r3, r3, #6
 80066d6:	3301      	adds	r3, #1
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	6812      	ldr	r2, [r2, #0]
 80066dc:	430b      	orrs	r3, r1
 80066de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	495c      	ldr	r1, [pc, #368]	; (8006864 <HAL_I2C_Init+0x274>)
 80066f4:	428b      	cmp	r3, r1
 80066f6:	d819      	bhi.n	800672c <HAL_I2C_Init+0x13c>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	1e59      	subs	r1, r3, #1
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	005b      	lsls	r3, r3, #1
 8006702:	fbb1 f3f3 	udiv	r3, r1, r3
 8006706:	1c59      	adds	r1, r3, #1
 8006708:	f640 73fc 	movw	r3, #4092	; 0xffc
 800670c:	400b      	ands	r3, r1
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00a      	beq.n	8006728 <HAL_I2C_Init+0x138>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1e59      	subs	r1, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006720:	3301      	adds	r3, #1
 8006722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006726:	e051      	b.n	80067cc <HAL_I2C_Init+0x1dc>
 8006728:	2304      	movs	r3, #4
 800672a:	e04f      	b.n	80067cc <HAL_I2C_Init+0x1dc>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d111      	bne.n	8006758 <HAL_I2C_Init+0x168>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	1e58      	subs	r0, r3, #1
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6859      	ldr	r1, [r3, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	005b      	lsls	r3, r3, #1
 8006740:	440b      	add	r3, r1
 8006742:	fbb0 f3f3 	udiv	r3, r0, r3
 8006746:	3301      	adds	r3, #1
 8006748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800674c:	2b00      	cmp	r3, #0
 800674e:	bf0c      	ite	eq
 8006750:	2301      	moveq	r3, #1
 8006752:	2300      	movne	r3, #0
 8006754:	b2db      	uxtb	r3, r3
 8006756:	e012      	b.n	800677e <HAL_I2C_Init+0x18e>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	1e58      	subs	r0, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6859      	ldr	r1, [r3, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	440b      	add	r3, r1
 8006766:	0099      	lsls	r1, r3, #2
 8006768:	440b      	add	r3, r1
 800676a:	fbb0 f3f3 	udiv	r3, r0, r3
 800676e:	3301      	adds	r3, #1
 8006770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006774:	2b00      	cmp	r3, #0
 8006776:	bf0c      	ite	eq
 8006778:	2301      	moveq	r3, #1
 800677a:	2300      	movne	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_I2C_Init+0x196>
 8006782:	2301      	movs	r3, #1
 8006784:	e022      	b.n	80067cc <HAL_I2C_Init+0x1dc>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10e      	bne.n	80067ac <HAL_I2C_Init+0x1bc>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1e58      	subs	r0, r3, #1
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6859      	ldr	r1, [r3, #4]
 8006796:	460b      	mov	r3, r1
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	440b      	add	r3, r1
 800679c:	fbb0 f3f3 	udiv	r3, r0, r3
 80067a0:	3301      	adds	r3, #1
 80067a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067aa:	e00f      	b.n	80067cc <HAL_I2C_Init+0x1dc>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1e58      	subs	r0, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6859      	ldr	r1, [r3, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	440b      	add	r3, r1
 80067ba:	0099      	lsls	r1, r3, #2
 80067bc:	440b      	add	r3, r1
 80067be:	fbb0 f3f3 	udiv	r3, r0, r3
 80067c2:	3301      	adds	r3, #1
 80067c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	6809      	ldr	r1, [r1, #0]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69da      	ldr	r2, [r3, #28]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80067fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	6911      	ldr	r1, [r2, #16]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	68d2      	ldr	r2, [r2, #12]
 8006806:	4311      	orrs	r1, r2
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	6812      	ldr	r2, [r2, #0]
 800680c:	430b      	orrs	r3, r1
 800680e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695a      	ldr	r2, [r3, #20]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f042 0201 	orr.w	r2, r2, #1
 800683a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	000186a0 	.word	0x000186a0
 8006868:	001e847f 	.word	0x001e847f
 800686c:	003d08ff 	.word	0x003d08ff
 8006870:	431bde83 	.word	0x431bde83
 8006874:	10624dd3 	.word	0x10624dd3

08006878 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af02      	add	r7, sp, #8
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	4608      	mov	r0, r1
 8006882:	4611      	mov	r1, r2
 8006884:	461a      	mov	r2, r3
 8006886:	4603      	mov	r3, r0
 8006888:	817b      	strh	r3, [r7, #10]
 800688a:	460b      	mov	r3, r1
 800688c:	813b      	strh	r3, [r7, #8]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006892:	f7fe fbcd 	bl	8005030 <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	f040 80d9 	bne.w	8006a58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	2319      	movs	r3, #25
 80068ac:	2201      	movs	r2, #1
 80068ae:	496d      	ldr	r1, [pc, #436]	; (8006a64 <HAL_I2C_Mem_Write+0x1ec>)
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 fc7f 	bl	80071b4 <I2C_WaitOnFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80068bc:	2302      	movs	r3, #2
 80068be:	e0cc      	b.n	8006a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_I2C_Mem_Write+0x56>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e0c5      	b.n	8006a5a <HAL_I2C_Mem_Write+0x1e2>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d007      	beq.n	80068f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2221      	movs	r2, #33	; 0x21
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2240      	movs	r2, #64	; 0x40
 8006910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6a3a      	ldr	r2, [r7, #32]
 800691e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4a4d      	ldr	r2, [pc, #308]	; (8006a68 <HAL_I2C_Mem_Write+0x1f0>)
 8006934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006936:	88f8      	ldrh	r0, [r7, #6]
 8006938:	893a      	ldrh	r2, [r7, #8]
 800693a:	8979      	ldrh	r1, [r7, #10]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	9301      	str	r3, [sp, #4]
 8006940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	4603      	mov	r3, r0
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	f000 fab6 	bl	8006eb8 <I2C_RequestMemoryWrite>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d052      	beq.n	80069f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e081      	b.n	8006a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 fd00 	bl	8007360 <I2C_WaitOnTXEFlagUntilTimeout>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00d      	beq.n	8006982 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	2b04      	cmp	r3, #4
 800696c:	d107      	bne.n	800697e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800697c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e06b      	b.n	8006a5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	781a      	ldrb	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f003 0304 	and.w	r3, r3, #4
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d11b      	bne.n	80069f8 <HAL_I2C_Mem_Write+0x180>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d017      	beq.n	80069f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1aa      	bne.n	8006956 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fcec 	bl	80073e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00d      	beq.n	8006a2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d107      	bne.n	8006a28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e016      	b.n	8006a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a54:	2300      	movs	r3, #0
 8006a56:	e000      	b.n	8006a5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006a58:	2302      	movs	r3, #2
  }
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	00100002 	.word	0x00100002
 8006a68:	ffff0000 	.word	0xffff0000

08006a6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08c      	sub	sp, #48	; 0x30
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	4608      	mov	r0, r1
 8006a76:	4611      	mov	r1, r2
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	817b      	strh	r3, [r7, #10]
 8006a7e:	460b      	mov	r3, r1
 8006a80:	813b      	strh	r3, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a86:	f7fe fad3 	bl	8005030 <HAL_GetTick>
 8006a8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	f040 8208 	bne.w	8006eaa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	2319      	movs	r3, #25
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	497b      	ldr	r1, [pc, #492]	; (8006c90 <HAL_I2C_Mem_Read+0x224>)
 8006aa4:	68f8      	ldr	r0, [r7, #12]
 8006aa6:	f000 fb85 	bl	80071b4 <I2C_WaitOnFlagUntilTimeout>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e1fb      	b.n	8006eac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d101      	bne.n	8006ac2 <HAL_I2C_Mem_Read+0x56>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e1f4      	b.n	8006eac <HAL_I2C_Mem_Read+0x440>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d007      	beq.n	8006ae8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006af6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2222      	movs	r2, #34	; 0x22
 8006afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2240      	movs	r2, #64	; 0x40
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4a5b      	ldr	r2, [pc, #364]	; (8006c94 <HAL_I2C_Mem_Read+0x228>)
 8006b28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b2a:	88f8      	ldrh	r0, [r7, #6]
 8006b2c:	893a      	ldrh	r2, [r7, #8]
 8006b2e:	8979      	ldrh	r1, [r7, #10]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4603      	mov	r3, r0
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fa52 	bl	8006fe4 <I2C_RequestMemoryRead>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e1b0      	b.n	8006eac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d113      	bne.n	8006b7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b52:	2300      	movs	r3, #0
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	623b      	str	r3, [r7, #32]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	623b      	str	r3, [r7, #32]
 8006b66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	e184      	b.n	8006e84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d11b      	bne.n	8006bba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b92:	2300      	movs	r3, #0
 8006b94:	61fb      	str	r3, [r7, #28]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	61fb      	str	r3, [r7, #28]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	61fb      	str	r3, [r7, #28]
 8006ba6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	e164      	b.n	8006e84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d11b      	bne.n	8006bfa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006be2:	2300      	movs	r3, #0
 8006be4:	61bb      	str	r3, [r7, #24]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699b      	ldr	r3, [r3, #24]
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	e144      	b.n	8006e84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006c10:	e138      	b.n	8006e84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	f200 80f1 	bhi.w	8006dfe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d123      	bne.n	8006c6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 fc1b 	bl	8007464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e139      	b.n	8006eac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	691a      	ldr	r2, [r3, #16]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c54:	3b01      	subs	r3, #1
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	3b01      	subs	r3, #1
 8006c64:	b29a      	uxth	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c6a:	e10b      	b.n	8006e84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d14e      	bne.n	8006d12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	4906      	ldr	r1, [pc, #24]	; (8006c98 <HAL_I2C_Mem_Read+0x22c>)
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 fa98 	bl	80071b4 <I2C_WaitOnFlagUntilTimeout>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e10e      	b.n	8006eac <HAL_I2C_Mem_Read+0x440>
 8006c8e:	bf00      	nop
 8006c90:	00100002 	.word	0x00100002
 8006c94:	ffff0000 	.word	0xffff0000
 8006c98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691a      	ldr	r2, [r3, #16]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	1c5a      	adds	r2, r3, #1
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d10:	e0b8      	b.n	8006e84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d18:	2200      	movs	r2, #0
 8006d1a:	4966      	ldr	r1, [pc, #408]	; (8006eb4 <HAL_I2C_Mem_Read+0x448>)
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fa49 	bl	80071b4 <I2C_WaitOnFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0bf      	b.n	8006eac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	2200      	movs	r2, #0
 8006d76:	494f      	ldr	r1, [pc, #316]	; (8006eb4 <HAL_I2C_Mem_Read+0x448>)
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 fa1b 	bl	80071b4 <I2C_WaitOnFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e091      	b.n	8006eac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	691a      	ldr	r2, [r3, #16]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	1c5a      	adds	r2, r3, #1
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006dfc:	e042      	b.n	8006e84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fb2e 	bl	8007464 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e04c      	b.n	8006eac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	691a      	ldr	r2, [r3, #16]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	f003 0304 	and.w	r3, r3, #4
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d118      	bne.n	8006e84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	691a      	ldr	r2, [r3, #16]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f47f aec2 	bne.w	8006c12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	e000      	b.n	8006eac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006eaa:	2302      	movs	r3, #2
  }
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3728      	adds	r7, #40	; 0x28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	00010004 	.word	0x00010004

08006eb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b088      	sub	sp, #32
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	817b      	strh	r3, [r7, #10]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	813b      	strh	r3, [r7, #8]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ee0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f960 	bl	80071b4 <I2C_WaitOnFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00d      	beq.n	8006f16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f08:	d103      	bne.n	8006f12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e05f      	b.n	8006fd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006f16:	897b      	ldrh	r3, [r7, #10]
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	6a3a      	ldr	r2, [r7, #32]
 8006f2a:	492d      	ldr	r1, [pc, #180]	; (8006fe0 <I2C_RequestMemoryWrite+0x128>)
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	f000 f998 	bl	8007262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e04c      	b.n	8006fd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f54:	6a39      	ldr	r1, [r7, #32]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 fa02 	bl	8007360 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00d      	beq.n	8006f7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d107      	bne.n	8006f7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e02b      	b.n	8006fd6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f7e:	88fb      	ldrh	r3, [r7, #6]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d105      	bne.n	8006f90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f84:	893b      	ldrh	r3, [r7, #8]
 8006f86:	b2da      	uxtb	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	611a      	str	r2, [r3, #16]
 8006f8e:	e021      	b.n	8006fd4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f90:	893b      	ldrh	r3, [r7, #8]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa0:	6a39      	ldr	r1, [r7, #32]
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 f9dc 	bl	8007360 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00d      	beq.n	8006fca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	d107      	bne.n	8006fc6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e005      	b.n	8006fd6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006fca:	893b      	ldrh	r3, [r7, #8]
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	00010002 	.word	0x00010002

08006fe4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af02      	add	r7, sp, #8
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	4608      	mov	r0, r1
 8006fee:	4611      	mov	r1, r2
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	817b      	strh	r3, [r7, #10]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	813b      	strh	r3, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800700c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800701c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	2200      	movs	r2, #0
 8007026:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f8c2 	bl	80071b4 <I2C_WaitOnFlagUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007044:	d103      	bne.n	800704e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f44f 7200 	mov.w	r2, #512	; 0x200
 800704c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e0aa      	b.n	80071a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007052:	897b      	ldrh	r3, [r7, #10]
 8007054:	b2db      	uxtb	r3, r3
 8007056:	461a      	mov	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007060:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007064:	6a3a      	ldr	r2, [r7, #32]
 8007066:	4952      	ldr	r1, [pc, #328]	; (80071b0 <I2C_RequestMemoryRead+0x1cc>)
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f8fa 	bl	8007262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e097      	b.n	80071a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007078:	2300      	movs	r3, #0
 800707a:	617b      	str	r3, [r7, #20]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	617b      	str	r3, [r7, #20]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800708e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007090:	6a39      	ldr	r1, [r7, #32]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f000 f964 	bl	8007360 <I2C_WaitOnTXEFlagUntilTimeout>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00d      	beq.n	80070ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	2b04      	cmp	r3, #4
 80070a4:	d107      	bne.n	80070b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e076      	b.n	80071a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d105      	bne.n	80070cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070c0:	893b      	ldrh	r3, [r7, #8]
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	611a      	str	r2, [r3, #16]
 80070ca:	e021      	b.n	8007110 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070cc:	893b      	ldrh	r3, [r7, #8]
 80070ce:	0a1b      	lsrs	r3, r3, #8
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070dc:	6a39      	ldr	r1, [r7, #32]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 f93e 	bl	8007360 <I2C_WaitOnTXEFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00d      	beq.n	8007106 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d107      	bne.n	8007102 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007100:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e050      	b.n	80071a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007106:	893b      	ldrh	r3, [r7, #8]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007112:	6a39      	ldr	r1, [r7, #32]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 f923 	bl	8007360 <I2C_WaitOnTXEFlagUntilTimeout>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00d      	beq.n	800713c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	2b04      	cmp	r3, #4
 8007126:	d107      	bne.n	8007138 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007136:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e035      	b.n	80071a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800714a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	2200      	movs	r2, #0
 8007154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f000 f82b 	bl	80071b4 <I2C_WaitOnFlagUntilTimeout>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00d      	beq.n	8007180 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007172:	d103      	bne.n	800717c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800717a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e013      	b.n	80071a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007180:	897b      	ldrh	r3, [r7, #10]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	b2da      	uxtb	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	6a3a      	ldr	r2, [r7, #32]
 8007194:	4906      	ldr	r1, [pc, #24]	; (80071b0 <I2C_RequestMemoryRead+0x1cc>)
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 f863 	bl	8007262 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e000      	b.n	80071a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	00010002 	.word	0x00010002

080071b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	4613      	mov	r3, r2
 80071c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071c4:	e025      	b.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071cc:	d021      	beq.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ce:	f7fd ff2f 	bl	8005030 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d302      	bcc.n	80071e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d116      	bne.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fe:	f043 0220 	orr.w	r2, r3, #32
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e023      	b.n	800725a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	0c1b      	lsrs	r3, r3, #16
 8007216:	b2db      	uxtb	r3, r3
 8007218:	2b01      	cmp	r3, #1
 800721a:	d10d      	bne.n	8007238 <I2C_WaitOnFlagUntilTimeout+0x84>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	43da      	mvns	r2, r3
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4013      	ands	r3, r2
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	bf0c      	ite	eq
 800722e:	2301      	moveq	r3, #1
 8007230:	2300      	movne	r3, #0
 8007232:	b2db      	uxtb	r3, r3
 8007234:	461a      	mov	r2, r3
 8007236:	e00c      	b.n	8007252 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	43da      	mvns	r2, r3
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4013      	ands	r3, r2
 8007244:	b29b      	uxth	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	bf0c      	ite	eq
 800724a:	2301      	moveq	r3, #1
 800724c:	2300      	movne	r3, #0
 800724e:	b2db      	uxtb	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	429a      	cmp	r2, r3
 8007256:	d0b6      	beq.n	80071c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	607a      	str	r2, [r7, #4]
 800726e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007270:	e051      	b.n	8007316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800727c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007280:	d123      	bne.n	80072ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007290:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800729a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f043 0204 	orr.w	r2, r3, #4
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e046      	b.n	8007358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d0:	d021      	beq.n	8007316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072d2:	f7fd fead 	bl	8005030 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d302      	bcc.n	80072e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d116      	bne.n	8007316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	f043 0220 	orr.w	r2, r3, #32
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e020      	b.n	8007358 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	0c1b      	lsrs	r3, r3, #16
 800731a:	b2db      	uxtb	r3, r3
 800731c:	2b01      	cmp	r3, #1
 800731e:	d10c      	bne.n	800733a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	43da      	mvns	r2, r3
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4013      	ands	r3, r2
 800732c:	b29b      	uxth	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	bf14      	ite	ne
 8007332:	2301      	movne	r3, #1
 8007334:	2300      	moveq	r3, #0
 8007336:	b2db      	uxtb	r3, r3
 8007338:	e00b      	b.n	8007352 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	43da      	mvns	r2, r3
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4013      	ands	r3, r2
 8007346:	b29b      	uxth	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf14      	ite	ne
 800734c:	2301      	movne	r3, #1
 800734e:	2300      	moveq	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d18d      	bne.n	8007272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800736c:	e02d      	b.n	80073ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f8ce 	bl	8007510 <I2C_IsAcknowledgeFailed>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e02d      	b.n	80073da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007384:	d021      	beq.n	80073ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007386:	f7fd fe53 	bl	8005030 <HAL_GetTick>
 800738a:	4602      	mov	r2, r0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1ad3      	subs	r3, r2, r3
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	429a      	cmp	r2, r3
 8007394:	d302      	bcc.n	800739c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d116      	bne.n	80073ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2220      	movs	r2, #32
 80073a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f043 0220 	orr.w	r2, r3, #32
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e007      	b.n	80073da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d4:	2b80      	cmp	r3, #128	; 0x80
 80073d6:	d1ca      	bne.n	800736e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	60f8      	str	r0, [r7, #12]
 80073ea:	60b9      	str	r1, [r7, #8]
 80073ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80073ee:	e02d      	b.n	800744c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f000 f88d 	bl	8007510 <I2C_IsAcknowledgeFailed>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e02d      	b.n	800745c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d021      	beq.n	800744c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007408:	f7fd fe12 	bl	8005030 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	429a      	cmp	r2, r3
 8007416:	d302      	bcc.n	800741e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d116      	bne.n	800744c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	f043 0220 	orr.w	r2, r3, #32
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e007      	b.n	800745c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f003 0304 	and.w	r3, r3, #4
 8007456:	2b04      	cmp	r3, #4
 8007458:	d1ca      	bne.n	80073f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007470:	e042      	b.n	80074f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	f003 0310 	and.w	r3, r3, #16
 800747c:	2b10      	cmp	r3, #16
 800747e:	d119      	bne.n	80074b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f06f 0210 	mvn.w	r2, #16
 8007488:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e029      	b.n	8007508 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b4:	f7fd fdbc 	bl	8005030 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d302      	bcc.n	80074ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d116      	bne.n	80074f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2220      	movs	r2, #32
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e4:	f043 0220 	orr.w	r2, r3, #32
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e007      	b.n	8007508 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d1b5      	bne.n	8007472 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007526:	d11b      	bne.n	8007560 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007530:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2200      	movs	r2, #0
 8007536:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2220      	movs	r2, #32
 800753c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754c:	f043 0204 	orr.w	r2, r3, #4
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e000      	b.n	8007562 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b20      	cmp	r3, #32
 8007582:	d129      	bne.n	80075d8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2224      	movs	r2, #36	; 0x24
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f022 0201 	bic.w	r2, r2, #1
 800759a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 0210 	bic.w	r2, r2, #16
 80075aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	430a      	orrs	r2, r1
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	e000      	b.n	80075da <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80075d8:	2302      	movs	r3, #2
  }
}
 80075da:	4618      	mov	r0, r3
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80075f0:	2300      	movs	r3, #0
 80075f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	d12a      	bne.n	8007656 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2224      	movs	r2, #36	; 0x24
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0201 	bic.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007620:	89fb      	ldrh	r3, [r7, #14]
 8007622:	f023 030f 	bic.w	r3, r3, #15
 8007626:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	b29a      	uxth	r2, r3
 800762c:	89fb      	ldrh	r3, [r7, #14]
 800762e:	4313      	orrs	r3, r2
 8007630:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	89fa      	ldrh	r2, [r7, #14]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0201 	orr.w	r2, r2, #1
 8007648:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	e000      	b.n	8007658 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007656:	2302      	movs	r3, #2
  }
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e25b      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d075      	beq.n	800776e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007682:	4ba3      	ldr	r3, [pc, #652]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 030c 	and.w	r3, r3, #12
 800768a:	2b04      	cmp	r3, #4
 800768c:	d00c      	beq.n	80076a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800768e:	4ba0      	ldr	r3, [pc, #640]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007696:	2b08      	cmp	r3, #8
 8007698:	d112      	bne.n	80076c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800769a:	4b9d      	ldr	r3, [pc, #628]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076a6:	d10b      	bne.n	80076c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a8:	4b99      	ldr	r3, [pc, #612]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d05b      	beq.n	800776c <HAL_RCC_OscConfig+0x108>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d157      	bne.n	800776c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e236      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c8:	d106      	bne.n	80076d8 <HAL_RCC_OscConfig+0x74>
 80076ca:	4b91      	ldr	r3, [pc, #580]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a90      	ldr	r2, [pc, #576]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80076d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	e01d      	b.n	8007714 <HAL_RCC_OscConfig+0xb0>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076e0:	d10c      	bne.n	80076fc <HAL_RCC_OscConfig+0x98>
 80076e2:	4b8b      	ldr	r3, [pc, #556]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a8a      	ldr	r2, [pc, #552]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80076e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	4b88      	ldr	r3, [pc, #544]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a87      	ldr	r2, [pc, #540]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80076f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	e00b      	b.n	8007714 <HAL_RCC_OscConfig+0xb0>
 80076fc:	4b84      	ldr	r3, [pc, #528]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a83      	ldr	r2, [pc, #524]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	4b81      	ldr	r3, [pc, #516]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a80      	ldr	r2, [pc, #512]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 800770e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d013      	beq.n	8007744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771c:	f7fd fc88 	bl	8005030 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007724:	f7fd fc84 	bl	8005030 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b64      	cmp	r3, #100	; 0x64
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e1fb      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007736:	4b76      	ldr	r3, [pc, #472]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0f0      	beq.n	8007724 <HAL_RCC_OscConfig+0xc0>
 8007742:	e014      	b.n	800776e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007744:	f7fd fc74 	bl	8005030 <HAL_GetTick>
 8007748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800774c:	f7fd fc70 	bl	8005030 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b64      	cmp	r3, #100	; 0x64
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e1e7      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800775e:	4b6c      	ldr	r3, [pc, #432]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f0      	bne.n	800774c <HAL_RCC_OscConfig+0xe8>
 800776a:	e000      	b.n	800776e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800776c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d063      	beq.n	8007842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800777a:	4b65      	ldr	r3, [pc, #404]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 030c 	and.w	r3, r3, #12
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007786:	4b62      	ldr	r3, [pc, #392]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800778e:	2b08      	cmp	r3, #8
 8007790:	d11c      	bne.n	80077cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007792:	4b5f      	ldr	r3, [pc, #380]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d116      	bne.n	80077cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800779e:	4b5c      	ldr	r3, [pc, #368]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <HAL_RCC_OscConfig+0x152>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d001      	beq.n	80077b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e1bb      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077b6:	4b56      	ldr	r3, [pc, #344]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4952      	ldr	r1, [pc, #328]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ca:	e03a      	b.n	8007842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d020      	beq.n	8007816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077d4:	4b4f      	ldr	r3, [pc, #316]	; (8007914 <HAL_RCC_OscConfig+0x2b0>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077da:	f7fd fc29 	bl	8005030 <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077e2:	f7fd fc25 	bl	8005030 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e19c      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f4:	4b46      	ldr	r3, [pc, #280]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0f0      	beq.n	80077e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007800:	4b43      	ldr	r3, [pc, #268]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	4940      	ldr	r1, [pc, #256]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007810:	4313      	orrs	r3, r2
 8007812:	600b      	str	r3, [r1, #0]
 8007814:	e015      	b.n	8007842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007816:	4b3f      	ldr	r3, [pc, #252]	; (8007914 <HAL_RCC_OscConfig+0x2b0>)
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781c:	f7fd fc08 	bl	8005030 <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007824:	f7fd fc04 	bl	8005030 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e17b      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007836:	4b36      	ldr	r3, [pc, #216]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f0      	bne.n	8007824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d030      	beq.n	80078b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d016      	beq.n	8007884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007856:	4b30      	ldr	r3, [pc, #192]	; (8007918 <HAL_RCC_OscConfig+0x2b4>)
 8007858:	2201      	movs	r2, #1
 800785a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785c:	f7fd fbe8 	bl	8005030 <HAL_GetTick>
 8007860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007862:	e008      	b.n	8007876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007864:	f7fd fbe4 	bl	8005030 <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e15b      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007876:	4b26      	ldr	r3, [pc, #152]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 8007878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0f0      	beq.n	8007864 <HAL_RCC_OscConfig+0x200>
 8007882:	e015      	b.n	80078b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007884:	4b24      	ldr	r3, [pc, #144]	; (8007918 <HAL_RCC_OscConfig+0x2b4>)
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800788a:	f7fd fbd1 	bl	8005030 <HAL_GetTick>
 800788e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007890:	e008      	b.n	80078a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007892:	f7fd fbcd 	bl	8005030 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d901      	bls.n	80078a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e144      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078a4:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80078a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078a8:	f003 0302 	and.w	r3, r3, #2
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1f0      	bne.n	8007892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 80a0 	beq.w	80079fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078be:	2300      	movs	r3, #0
 80078c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078c2:	4b13      	ldr	r3, [pc, #76]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10f      	bne.n	80078ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ce:	2300      	movs	r3, #0
 80078d0:	60bb      	str	r3, [r7, #8]
 80078d2:	4b0f      	ldr	r3, [pc, #60]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	4a0e      	ldr	r2, [pc, #56]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80078d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078dc:	6413      	str	r3, [r2, #64]	; 0x40
 80078de:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <HAL_RCC_OscConfig+0x2ac>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078e6:	60bb      	str	r3, [r7, #8]
 80078e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078ea:	2301      	movs	r3, #1
 80078ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ee:	4b0b      	ldr	r3, [pc, #44]	; (800791c <HAL_RCC_OscConfig+0x2b8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d121      	bne.n	800793e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078fa:	4b08      	ldr	r3, [pc, #32]	; (800791c <HAL_RCC_OscConfig+0x2b8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a07      	ldr	r2, [pc, #28]	; (800791c <HAL_RCC_OscConfig+0x2b8>)
 8007900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007906:	f7fd fb93 	bl	8005030 <HAL_GetTick>
 800790a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800790c:	e011      	b.n	8007932 <HAL_RCC_OscConfig+0x2ce>
 800790e:	bf00      	nop
 8007910:	40023800 	.word	0x40023800
 8007914:	42470000 	.word	0x42470000
 8007918:	42470e80 	.word	0x42470e80
 800791c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007920:	f7fd fb86 	bl	8005030 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b02      	cmp	r3, #2
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e0fd      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007932:	4b81      	ldr	r3, [pc, #516]	; (8007b38 <HAL_RCC_OscConfig+0x4d4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f0      	beq.n	8007920 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d106      	bne.n	8007954 <HAL_RCC_OscConfig+0x2f0>
 8007946:	4b7d      	ldr	r3, [pc, #500]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794a:	4a7c      	ldr	r2, [pc, #496]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 800794c:	f043 0301 	orr.w	r3, r3, #1
 8007950:	6713      	str	r3, [r2, #112]	; 0x70
 8007952:	e01c      	b.n	800798e <HAL_RCC_OscConfig+0x32a>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	2b05      	cmp	r3, #5
 800795a:	d10c      	bne.n	8007976 <HAL_RCC_OscConfig+0x312>
 800795c:	4b77      	ldr	r3, [pc, #476]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 800795e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007960:	4a76      	ldr	r2, [pc, #472]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007962:	f043 0304 	orr.w	r3, r3, #4
 8007966:	6713      	str	r3, [r2, #112]	; 0x70
 8007968:	4b74      	ldr	r3, [pc, #464]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 800796a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796c:	4a73      	ldr	r2, [pc, #460]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 800796e:	f043 0301 	orr.w	r3, r3, #1
 8007972:	6713      	str	r3, [r2, #112]	; 0x70
 8007974:	e00b      	b.n	800798e <HAL_RCC_OscConfig+0x32a>
 8007976:	4b71      	ldr	r3, [pc, #452]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	4a70      	ldr	r2, [pc, #448]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 800797c:	f023 0301 	bic.w	r3, r3, #1
 8007980:	6713      	str	r3, [r2, #112]	; 0x70
 8007982:	4b6e      	ldr	r3, [pc, #440]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	4a6d      	ldr	r2, [pc, #436]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007988:	f023 0304 	bic.w	r3, r3, #4
 800798c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d015      	beq.n	80079c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007996:	f7fd fb4b 	bl	8005030 <HAL_GetTick>
 800799a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800799c:	e00a      	b.n	80079b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800799e:	f7fd fb47 	bl	8005030 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d901      	bls.n	80079b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e0bc      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079b4:	4b61      	ldr	r3, [pc, #388]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 80079b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d0ee      	beq.n	800799e <HAL_RCC_OscConfig+0x33a>
 80079c0:	e014      	b.n	80079ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079c2:	f7fd fb35 	bl	8005030 <HAL_GetTick>
 80079c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c8:	e00a      	b.n	80079e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079ca:	f7fd fb31 	bl	8005030 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d8:	4293      	cmp	r3, r2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0a6      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079e0:	4b56      	ldr	r3, [pc, #344]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 80079e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1ee      	bne.n	80079ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079ec:	7dfb      	ldrb	r3, [r7, #23]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d105      	bne.n	80079fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079f2:	4b52      	ldr	r3, [pc, #328]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	4a51      	ldr	r2, [pc, #324]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 80079f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8092 	beq.w	8007b2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a08:	4b4c      	ldr	r3, [pc, #304]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 030c 	and.w	r3, r3, #12
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d05c      	beq.n	8007ace <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d141      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a1c:	4b48      	ldr	r3, [pc, #288]	; (8007b40 <HAL_RCC_OscConfig+0x4dc>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a22:	f7fd fb05 	bl	8005030 <HAL_GetTick>
 8007a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a28:	e008      	b.n	8007a3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a2a:	f7fd fb01 	bl	8005030 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e078      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a3c:	4b3f      	ldr	r3, [pc, #252]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d1f0      	bne.n	8007a2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	69da      	ldr	r2, [r3, #28]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a56:	019b      	lsls	r3, r3, #6
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	3b01      	subs	r3, #1
 8007a62:	041b      	lsls	r3, r3, #16
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	061b      	lsls	r3, r3, #24
 8007a6c:	4933      	ldr	r1, [pc, #204]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a72:	4b33      	ldr	r3, [pc, #204]	; (8007b40 <HAL_RCC_OscConfig+0x4dc>)
 8007a74:	2201      	movs	r2, #1
 8007a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a78:	f7fd fada 	bl	8005030 <HAL_GetTick>
 8007a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a7e:	e008      	b.n	8007a92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a80:	f7fd fad6 	bl	8005030 <HAL_GetTick>
 8007a84:	4602      	mov	r2, r0
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e04d      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a92:	4b2a      	ldr	r3, [pc, #168]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0f0      	beq.n	8007a80 <HAL_RCC_OscConfig+0x41c>
 8007a9e:	e045      	b.n	8007b2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aa0:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <HAL_RCC_OscConfig+0x4dc>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa6:	f7fd fac3 	bl	8005030 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aae:	f7fd fabf 	bl	8005030 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e036      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ac0:	4b1e      	ldr	r3, [pc, #120]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f0      	bne.n	8007aae <HAL_RCC_OscConfig+0x44a>
 8007acc:	e02e      	b.n	8007b2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d101      	bne.n	8007ada <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e029      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ada:	4b18      	ldr	r3, [pc, #96]	; (8007b3c <HAL_RCC_OscConfig+0x4d8>)
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d11c      	bne.n	8007b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d115      	bne.n	8007b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b02:	4013      	ands	r3, r2
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d10d      	bne.n	8007b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d106      	bne.n	8007b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d001      	beq.n	8007b2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	40007000 	.word	0x40007000
 8007b3c:	40023800 	.word	0x40023800
 8007b40:	42470060 	.word	0x42470060

08007b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b084      	sub	sp, #16
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e0cc      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b58:	4b68      	ldr	r3, [pc, #416]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 030f 	and.w	r3, r3, #15
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d90c      	bls.n	8007b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b66:	4b65      	ldr	r3, [pc, #404]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b68:	683a      	ldr	r2, [r7, #0]
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b6e:	4b63      	ldr	r3, [pc, #396]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 030f 	and.w	r3, r3, #15
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d001      	beq.n	8007b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e0b8      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d020      	beq.n	8007bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0304 	and.w	r3, r3, #4
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d005      	beq.n	8007ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b98:	4b59      	ldr	r3, [pc, #356]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	4a58      	ldr	r2, [pc, #352]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bb0:	4b53      	ldr	r3, [pc, #332]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a52      	ldr	r2, [pc, #328]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bbc:	4b50      	ldr	r3, [pc, #320]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	494d      	ldr	r1, [pc, #308]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d044      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d107      	bne.n	8007bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007be2:	4b47      	ldr	r3, [pc, #284]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d119      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e07f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d003      	beq.n	8007c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d107      	bne.n	8007c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c02:	4b3f      	ldr	r3, [pc, #252]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d109      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e06f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c12:	4b3b      	ldr	r3, [pc, #236]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e067      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c22:	4b37      	ldr	r3, [pc, #220]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f023 0203 	bic.w	r2, r3, #3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	4934      	ldr	r1, [pc, #208]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c30:	4313      	orrs	r3, r2
 8007c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c34:	f7fd f9fc 	bl	8005030 <HAL_GetTick>
 8007c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c3a:	e00a      	b.n	8007c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c3c:	f7fd f9f8 	bl	8005030 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e04f      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c52:	4b2b      	ldr	r3, [pc, #172]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 020c 	and.w	r2, r3, #12
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d1eb      	bne.n	8007c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c64:	4b25      	ldr	r3, [pc, #148]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 030f 	and.w	r3, r3, #15
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d20c      	bcs.n	8007c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c72:	4b22      	ldr	r3, [pc, #136]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	b2d2      	uxtb	r2, r2
 8007c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c7a:	4b20      	ldr	r3, [pc, #128]	; (8007cfc <HAL_RCC_ClockConfig+0x1b8>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 030f 	and.w	r3, r3, #15
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d001      	beq.n	8007c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e032      	b.n	8007cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0304 	and.w	r3, r3, #4
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c98:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	4916      	ldr	r1, [pc, #88]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 0308 	and.w	r3, r3, #8
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cb6:	4b12      	ldr	r3, [pc, #72]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	00db      	lsls	r3, r3, #3
 8007cc4:	490e      	ldr	r1, [pc, #56]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cca:	f000 f821 	bl	8007d10 <HAL_RCC_GetSysClockFreq>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	091b      	lsrs	r3, r3, #4
 8007cd6:	f003 030f 	and.w	r3, r3, #15
 8007cda:	490a      	ldr	r1, [pc, #40]	; (8007d04 <HAL_RCC_ClockConfig+0x1c0>)
 8007cdc:	5ccb      	ldrb	r3, [r1, r3]
 8007cde:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce2:	4a09      	ldr	r2, [pc, #36]	; (8007d08 <HAL_RCC_ClockConfig+0x1c4>)
 8007ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <HAL_RCC_ClockConfig+0x1c8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fd f95c 	bl	8004fa8 <HAL_InitTick>

  return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	40023c00 	.word	0x40023c00
 8007d00:	40023800 	.word	0x40023800
 8007d04:	08014bb8 	.word	0x08014bb8
 8007d08:	20000004 	.word	0x20000004
 8007d0c:	20000008 	.word	0x20000008

08007d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	607b      	str	r3, [r7, #4]
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	2300      	movs	r3, #0
 8007d22:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d28:	4b67      	ldr	r3, [pc, #412]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f003 030c 	and.w	r3, r3, #12
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d00d      	beq.n	8007d50 <HAL_RCC_GetSysClockFreq+0x40>
 8007d34:	2b08      	cmp	r3, #8
 8007d36:	f200 80bd 	bhi.w	8007eb4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d002      	beq.n	8007d44 <HAL_RCC_GetSysClockFreq+0x34>
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	d003      	beq.n	8007d4a <HAL_RCC_GetSysClockFreq+0x3a>
 8007d42:	e0b7      	b.n	8007eb4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d44:	4b61      	ldr	r3, [pc, #388]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d46:	60bb      	str	r3, [r7, #8]
       break;
 8007d48:	e0b7      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d4a:	4b60      	ldr	r3, [pc, #384]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d4c:	60bb      	str	r3, [r7, #8]
      break;
 8007d4e:	e0b4      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d50:	4b5d      	ldr	r3, [pc, #372]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d58:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d5a:	4b5b      	ldr	r3, [pc, #364]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d04d      	beq.n	8007e02 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d66:	4b58      	ldr	r3, [pc, #352]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	099b      	lsrs	r3, r3, #6
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	f04f 0300 	mov.w	r3, #0
 8007d72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007d76:	f04f 0100 	mov.w	r1, #0
 8007d7a:	ea02 0800 	and.w	r8, r2, r0
 8007d7e:	ea03 0901 	and.w	r9, r3, r1
 8007d82:	4640      	mov	r0, r8
 8007d84:	4649      	mov	r1, r9
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	014b      	lsls	r3, r1, #5
 8007d90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d94:	0142      	lsls	r2, r0, #5
 8007d96:	4610      	mov	r0, r2
 8007d98:	4619      	mov	r1, r3
 8007d9a:	ebb0 0008 	subs.w	r0, r0, r8
 8007d9e:	eb61 0109 	sbc.w	r1, r1, r9
 8007da2:	f04f 0200 	mov.w	r2, #0
 8007da6:	f04f 0300 	mov.w	r3, #0
 8007daa:	018b      	lsls	r3, r1, #6
 8007dac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007db0:	0182      	lsls	r2, r0, #6
 8007db2:	1a12      	subs	r2, r2, r0
 8007db4:	eb63 0301 	sbc.w	r3, r3, r1
 8007db8:	f04f 0000 	mov.w	r0, #0
 8007dbc:	f04f 0100 	mov.w	r1, #0
 8007dc0:	00d9      	lsls	r1, r3, #3
 8007dc2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dc6:	00d0      	lsls	r0, r2, #3
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	eb12 0208 	adds.w	r2, r2, r8
 8007dd0:	eb43 0309 	adc.w	r3, r3, r9
 8007dd4:	f04f 0000 	mov.w	r0, #0
 8007dd8:	f04f 0100 	mov.w	r1, #0
 8007ddc:	0299      	lsls	r1, r3, #10
 8007dde:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007de2:	0290      	lsls	r0, r2, #10
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4610      	mov	r0, r2
 8007dea:	4619      	mov	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	461a      	mov	r2, r3
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	f7f8 ff68 	bl	8000cc8 <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e04a      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e02:	4b31      	ldr	r3, [pc, #196]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	099b      	lsrs	r3, r3, #6
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e12:	f04f 0100 	mov.w	r1, #0
 8007e16:	ea02 0400 	and.w	r4, r2, r0
 8007e1a:	ea03 0501 	and.w	r5, r3, r1
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	014b      	lsls	r3, r1, #5
 8007e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e30:	0142      	lsls	r2, r0, #5
 8007e32:	4610      	mov	r0, r2
 8007e34:	4619      	mov	r1, r3
 8007e36:	1b00      	subs	r0, r0, r4
 8007e38:	eb61 0105 	sbc.w	r1, r1, r5
 8007e3c:	f04f 0200 	mov.w	r2, #0
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	018b      	lsls	r3, r1, #6
 8007e46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e4a:	0182      	lsls	r2, r0, #6
 8007e4c:	1a12      	subs	r2, r2, r0
 8007e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	00d9      	lsls	r1, r3, #3
 8007e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e60:	00d0      	lsls	r0, r2, #3
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	1912      	adds	r2, r2, r4
 8007e68:	eb45 0303 	adc.w	r3, r5, r3
 8007e6c:	f04f 0000 	mov.w	r0, #0
 8007e70:	f04f 0100 	mov.w	r1, #0
 8007e74:	0299      	lsls	r1, r3, #10
 8007e76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e7a:	0290      	lsls	r0, r2, #10
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4610      	mov	r0, r2
 8007e82:	4619      	mov	r1, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	f7f8 ff1c 	bl	8000cc8 <__aeabi_uldivmod>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4613      	mov	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e98:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb0:	60bb      	str	r3, [r7, #8]
      break;
 8007eb2:	e002      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007eb6:	60bb      	str	r3, [r7, #8]
      break;
 8007eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eba:	68bb      	ldr	r3, [r7, #8]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40023800 	.word	0x40023800
 8007ecc:	00f42400 	.word	0x00f42400

08007ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ed4:	4b03      	ldr	r3, [pc, #12]	; (8007ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20000004 	.word	0x20000004

08007ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007eec:	f7ff fff0 	bl	8007ed0 <HAL_RCC_GetHCLKFreq>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	0a9b      	lsrs	r3, r3, #10
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	4903      	ldr	r1, [pc, #12]	; (8007f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007efe:	5ccb      	ldrb	r3, [r1, r3]
 8007f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	40023800 	.word	0x40023800
 8007f0c:	08014bc8 	.word	0x08014bc8

08007f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f14:	f7ff ffdc 	bl	8007ed0 <HAL_RCC_GetHCLKFreq>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	0b5b      	lsrs	r3, r3, #13
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	4903      	ldr	r1, [pc, #12]	; (8007f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f26:	5ccb      	ldrb	r3, [r1, r3]
 8007f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	40023800 	.word	0x40023800
 8007f34:	08014bc8 	.word	0x08014bc8

08007f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007f44:	2300      	movs	r3, #0
 8007f46:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10b      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d075      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007f6c:	4bad      	ldr	r3, [pc, #692]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007f72:	f7fd f85d 	bl	8005030 <HAL_GetTick>
 8007f76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f78:	e008      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f7a:	f7fd f859 	bl	8005030 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d901      	bls.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e18b      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007f8c:	4ba6      	ldr	r3, [pc, #664]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1f0      	bne.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d009      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	019a      	lsls	r2, r3, #6
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	071b      	lsls	r3, r3, #28
 8007fb0:	499d      	ldr	r1, [pc, #628]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01f      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fc4:	4b98      	ldr	r3, [pc, #608]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fca:	0f1b      	lsrs	r3, r3, #28
 8007fcc:	f003 0307 	and.w	r3, r3, #7
 8007fd0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	019a      	lsls	r2, r3, #6
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	061b      	lsls	r3, r3, #24
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	071b      	lsls	r3, r3, #28
 8007fe4:	4990      	ldr	r1, [pc, #576]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007fec:	4b8e      	ldr	r3, [pc, #568]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff2:	f023 021f 	bic.w	r2, r3, #31
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	498a      	ldr	r1, [pc, #552]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00d      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	019a      	lsls	r2, r3, #6
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	061b      	lsls	r3, r3, #24
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	071b      	lsls	r3, r3, #28
 8008024:	4980      	ldr	r1, [pc, #512]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008026:	4313      	orrs	r3, r2
 8008028:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800802c:	4b7d      	ldr	r3, [pc, #500]	; (8008224 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008032:	f7fc fffd 	bl	8005030 <HAL_GetTick>
 8008036:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008038:	e008      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800803a:	f7fc fff9 	bl	8005030 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e12b      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800804c:	4b76      	ldr	r3, [pc, #472]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0f0      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d105      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800806c:	2b00      	cmp	r3, #0
 800806e:	d079      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008070:	4b6e      	ldr	r3, [pc, #440]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008072:	2200      	movs	r2, #0
 8008074:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008076:	f7fc ffdb 	bl	8005030 <HAL_GetTick>
 800807a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800807c:	e008      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800807e:	f7fc ffd7 	bl	8005030 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	2b02      	cmp	r3, #2
 800808a:	d901      	bls.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e109      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008090:	4b65      	ldr	r3, [pc, #404]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800809c:	d0ef      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d020      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080aa:	4b5f      	ldr	r3, [pc, #380]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b0:	0f1b      	lsrs	r3, r3, #28
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	019a      	lsls	r2, r3, #6
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	061b      	lsls	r3, r3, #24
 80080c4:	431a      	orrs	r2, r3
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	071b      	lsls	r3, r3, #28
 80080ca:	4957      	ldr	r1, [pc, #348]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80080d2:	4b55      	ldr	r3, [pc, #340]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	021b      	lsls	r3, r3, #8
 80080e4:	4950      	ldr	r1, [pc, #320]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0308 	and.w	r3, r3, #8
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d01e      	beq.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080f8:	4b4b      	ldr	r3, [pc, #300]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80080fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fe:	0e1b      	lsrs	r3, r3, #24
 8008100:	f003 030f 	and.w	r3, r3, #15
 8008104:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	019a      	lsls	r2, r3, #6
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	061b      	lsls	r3, r3, #24
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	071b      	lsls	r3, r3, #28
 8008118:	4943      	ldr	r1, [pc, #268]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008120:	4b41      	ldr	r3, [pc, #260]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	493e      	ldr	r1, [pc, #248]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008130:	4313      	orrs	r3, r2
 8008132:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008136:	4b3d      	ldr	r3, [pc, #244]	; (800822c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008138:	2201      	movs	r2, #1
 800813a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800813c:	f7fc ff78 	bl	8005030 <HAL_GetTick>
 8008140:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008144:	f7fc ff74 	bl	8005030 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b02      	cmp	r3, #2
 8008150:	d901      	bls.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e0a6      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008156:	4b34      	ldr	r3, [pc, #208]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800815e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008162:	d1ef      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0320 	and.w	r3, r3, #32
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 808d 	beq.w	800828c <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
 8008176:	4b2c      	ldr	r3, [pc, #176]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800817a:	4a2b      	ldr	r2, [pc, #172]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800817c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008180:	6413      	str	r3, [r2, #64]	; 0x40
 8008182:	4b29      	ldr	r3, [pc, #164]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800818e:	4b28      	ldr	r3, [pc, #160]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a27      	ldr	r2, [pc, #156]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008198:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800819a:	f7fc ff49 	bl	8005030 <HAL_GetTick>
 800819e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80081a0:	e008      	b.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80081a2:	f7fc ff45 	bl	8005030 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e077      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80081b4:	4b1e      	ldr	r3, [pc, #120]	; (8008230 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d0f0      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081c0:	4b19      	ldr	r3, [pc, #100]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d039      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d032      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081de:	4b12      	ldr	r3, [pc, #72]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80081e8:	4b12      	ldr	r3, [pc, #72]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80081ea:	2201      	movs	r2, #1
 80081ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80081ee:	4b11      	ldr	r3, [pc, #68]	; (8008234 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80081f4:	4a0c      	ldr	r2, [pc, #48]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80081fa:	4b0b      	ldr	r3, [pc, #44]	; (8008228 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80081fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b01      	cmp	r3, #1
 8008204:	d11e      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008206:	f7fc ff13 	bl	8005030 <HAL_GetTick>
 800820a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800820c:	e014      	b.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800820e:	f7fc ff0f 	bl	8005030 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	f241 3288 	movw	r2, #5000	; 0x1388
 800821c:	4293      	cmp	r3, r2
 800821e:	d90b      	bls.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e03f      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008224:	42470068 	.word	0x42470068
 8008228:	40023800 	.word	0x40023800
 800822c:	42470070 	.word	0x42470070
 8008230:	40007000 	.word	0x40007000
 8008234:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008238:	4b1c      	ldr	r3, [pc, #112]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800823a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800823c:	f003 0302 	and.w	r3, r3, #2
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0e4      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800824c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008250:	d10d      	bne.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008252:	4b16      	ldr	r3, [pc, #88]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008266:	4911      	ldr	r1, [pc, #68]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008268:	4313      	orrs	r3, r2
 800826a:	608b      	str	r3, [r1, #8]
 800826c:	e005      	b.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800826e:	4b0f      	ldr	r3, [pc, #60]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	4a0e      	ldr	r2, [pc, #56]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008274:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008278:	6093      	str	r3, [r2, #8]
 800827a:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800827c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008286:	4909      	ldr	r1, [pc, #36]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008288:	4313      	orrs	r3, r2
 800828a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0310 	and.w	r3, r3, #16
 8008294:	2b00      	cmp	r3, #0
 8008296:	d004      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800829e:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80082a0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3718      	adds	r7, #24
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40023800 	.word	0x40023800
 80082b0:	424711e0 	.word	0x424711e0

080082b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e083      	b.n	80083ce <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	7f5b      	ldrb	r3, [r3, #29]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d105      	bne.n	80082dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f7fb fd24 	bl	8003d24 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	22ca      	movs	r2, #202	; 0xca
 80082e8:	625a      	str	r2, [r3, #36]	; 0x24
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2253      	movs	r2, #83	; 0x53
 80082f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 faa8 	bl	8008848 <RTC_EnterInitMode>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d008      	beq.n	8008310 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	22ff      	movs	r2, #255	; 0xff
 8008304:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2204      	movs	r2, #4
 800830a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	e05e      	b.n	80083ce <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6812      	ldr	r2, [r2, #0]
 800831a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800831e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008322:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6899      	ldr	r1, [r3, #8]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68d2      	ldr	r2, [r2, #12]
 800834a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6919      	ldr	r1, [r3, #16]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	041a      	lsls	r2, r3, #16
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800836e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10e      	bne.n	800839c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fa3a 	bl	80087f8 <HAL_RTC_WaitForSynchro>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d008      	beq.n	800839c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	22ff      	movs	r2, #255	; 0xff
 8008390:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2204      	movs	r2, #4
 8008396:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e018      	b.n	80083ce <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	22ff      	movs	r2, #255	; 0xff
 80083c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80083cc:	2300      	movs	r3, #0
  }
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083d6:	b590      	push	{r4, r7, lr}
 80083d8:	b087      	sub	sp, #28
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	7f1b      	ldrb	r3, [r3, #28]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_RTC_SetTime+0x1c>
 80083ee:	2302      	movs	r3, #2
 80083f0:	e0aa      	b.n	8008548 <HAL_RTC_SetTime+0x172>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2201      	movs	r2, #1
 80083f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2202      	movs	r2, #2
 80083fc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d126      	bne.n	8008452 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2200      	movs	r2, #0
 8008416:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fa3f 	bl	80088a0 <RTC_ByteToBcd2>
 8008422:	4603      	mov	r3, r0
 8008424:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	785b      	ldrb	r3, [r3, #1]
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fa38 	bl	80088a0 <RTC_ByteToBcd2>
 8008430:	4603      	mov	r3, r0
 8008432:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008434:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	789b      	ldrb	r3, [r3, #2]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fa30 	bl	80088a0 <RTC_ByteToBcd2>
 8008440:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008442:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	78db      	ldrb	r3, [r3, #3]
 800844a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	e018      	b.n	8008484 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2200      	movs	r2, #0
 8008464:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008472:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008478:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	78db      	ldrb	r3, [r3, #3]
 800847e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008480:	4313      	orrs	r3, r2
 8008482:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	22ca      	movs	r2, #202	; 0xca
 800848a:	625a      	str	r2, [r3, #36]	; 0x24
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2253      	movs	r2, #83	; 0x53
 8008492:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 f9d7 	bl	8008848 <RTC_EnterInitMode>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00b      	beq.n	80084b8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	22ff      	movs	r2, #255	; 0xff
 80084a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2204      	movs	r2, #4
 80084ac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e047      	b.n	8008548 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80084c2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80084c6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80084d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6899      	ldr	r1, [r3, #8]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	68da      	ldr	r2, [r3, #12]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	431a      	orrs	r2, r3
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084fe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d111      	bne.n	8008532 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 f972 	bl	80087f8 <HAL_RTC_WaitForSynchro>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00b      	beq.n	8008532 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	22ff      	movs	r2, #255	; 0xff
 8008520:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2204      	movs	r2, #4
 8008526:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e00a      	b.n	8008548 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	22ff      	movs	r2, #255	; 0xff
 8008538:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008546:	2300      	movs	r3, #0
  }
}
 8008548:	4618      	mov	r0, r3
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	bd90      	pop	{r4, r7, pc}

08008550 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008582:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008586:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	0c1b      	lsrs	r3, r3, #16
 800858c:	b2db      	uxtb	r3, r3
 800858e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008592:	b2da      	uxtb	r2, r3
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	b2db      	uxtb	r3, r3
 800859e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	0c1b      	lsrs	r3, r3, #16
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d11a      	bne.n	8008602 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 f983 	bl	80088dc <RTC_Bcd2ToByte>
 80085d6:	4603      	mov	r3, r0
 80085d8:	461a      	mov	r2, r3
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	785b      	ldrb	r3, [r3, #1]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 f97a 	bl	80088dc <RTC_Bcd2ToByte>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	789b      	ldrb	r3, [r3, #2]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 f971 	bl	80088dc <RTC_Bcd2ToByte>
 80085fa:	4603      	mov	r3, r0
 80085fc:	461a      	mov	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008602:	2300      	movs	r3, #0
}
 8008604:	4618      	mov	r0, r3
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}

0800860c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800860c:	b590      	push	{r4, r7, lr}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008618:	2300      	movs	r3, #0
 800861a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	7f1b      	ldrb	r3, [r3, #28]
 8008620:	2b01      	cmp	r3, #1
 8008622:	d101      	bne.n	8008628 <HAL_RTC_SetDate+0x1c>
 8008624:	2302      	movs	r3, #2
 8008626:	e094      	b.n	8008752 <HAL_RTC_SetDate+0x146>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2201      	movs	r2, #1
 800862c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2202      	movs	r2, #2
 8008632:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d10e      	bne.n	8008658 <HAL_RTC_SetDate+0x4c>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	785b      	ldrb	r3, [r3, #1]
 800863e:	f003 0310 	and.w	r3, r3, #16
 8008642:	2b00      	cmp	r3, #0
 8008644:	d008      	beq.n	8008658 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	785b      	ldrb	r3, [r3, #1]
 800864a:	f023 0310 	bic.w	r3, r3, #16
 800864e:	b2db      	uxtb	r3, r3
 8008650:	330a      	adds	r3, #10
 8008652:	b2da      	uxtb	r2, r3
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d11c      	bne.n	8008698 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	78db      	ldrb	r3, [r3, #3]
 8008662:	4618      	mov	r0, r3
 8008664:	f000 f91c 	bl	80088a0 <RTC_ByteToBcd2>
 8008668:	4603      	mov	r3, r0
 800866a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	4618      	mov	r0, r3
 8008672:	f000 f915 	bl	80088a0 <RTC_ByteToBcd2>
 8008676:	4603      	mov	r3, r0
 8008678:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800867a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	789b      	ldrb	r3, [r3, #2]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 f90d 	bl	80088a0 <RTC_ByteToBcd2>
 8008686:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008688:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	e00e      	b.n	80086b6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	78db      	ldrb	r3, [r3, #3]
 800869c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	785b      	ldrb	r3, [r3, #1]
 80086a2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80086a4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80086aa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80086b2:	4313      	orrs	r3, r2
 80086b4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	22ca      	movs	r2, #202	; 0xca
 80086bc:	625a      	str	r2, [r3, #36]	; 0x24
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2253      	movs	r2, #83	; 0x53
 80086c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 f8be 	bl	8008848 <RTC_EnterInitMode>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00b      	beq.n	80086ea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	22ff      	movs	r2, #255	; 0xff
 80086d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2204      	movs	r2, #4
 80086de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e033      	b.n	8008752 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80086f4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008708:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	d111      	bne.n	800873c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 f86d 	bl	80087f8 <HAL_RTC_WaitForSynchro>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00b      	beq.n	800873c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	22ff      	movs	r2, #255	; 0xff
 800872a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2204      	movs	r2, #4
 8008730:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e00a      	b.n	8008752 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	22ff      	movs	r2, #255	; 0xff
 8008742:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2201      	movs	r2, #1
 8008748:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008750:	2300      	movs	r3, #0
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	bd90      	pop	{r4, r7, pc}

0800875a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b086      	sub	sp, #24
 800875e:	af00      	add	r7, sp, #0
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	60b9      	str	r1, [r7, #8]
 8008764:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008774:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008778:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	0c1b      	lsrs	r3, r3, #16
 800877e:	b2da      	uxtb	r2, r3
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	0a1b      	lsrs	r3, r3, #8
 8008788:	b2db      	uxtb	r3, r3
 800878a:	f003 031f 	and.w	r3, r3, #31
 800878e:	b2da      	uxtb	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800879c:	b2da      	uxtb	r2, r3
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	0b5b      	lsrs	r3, r3, #13
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d11a      	bne.n	80087ee <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	78db      	ldrb	r3, [r3, #3]
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 f88d 	bl	80088dc <RTC_Bcd2ToByte>
 80087c2:	4603      	mov	r3, r0
 80087c4:	461a      	mov	r2, r3
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	785b      	ldrb	r3, [r3, #1]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 f884 	bl	80088dc <RTC_Bcd2ToByte>
 80087d4:	4603      	mov	r3, r0
 80087d6:	461a      	mov	r2, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	789b      	ldrb	r3, [r3, #2]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 f87b 	bl	80088dc <RTC_Bcd2ToByte>
 80087e6:	4603      	mov	r3, r0
 80087e8:	461a      	mov	r2, r3
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3718      	adds	r7, #24
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008812:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008814:	f7fc fc0c 	bl	8005030 <HAL_GetTick>
 8008818:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800881a:	e009      	b.n	8008830 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800881c:	f7fc fc08 	bl	8005030 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800882a:	d901      	bls.n	8008830 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e007      	b.n	8008840 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0ee      	beq.n	800881c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885e:	2b00      	cmp	r3, #0
 8008860:	d119      	bne.n	8008896 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f04f 32ff 	mov.w	r2, #4294967295
 800886a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800886c:	f7fc fbe0 	bl	8005030 <HAL_GetTick>
 8008870:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008872:	e009      	b.n	8008888 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008874:	f7fc fbdc 	bl	8005030 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008882:	d901      	bls.n	8008888 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008884:	2303      	movs	r3, #3
 8008886:	e007      	b.n	8008898 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0ee      	beq.n	8008874 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80088aa:	2300      	movs	r3, #0
 80088ac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80088ae:	e005      	b.n	80088bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	3301      	adds	r3, #1
 80088b4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	3b0a      	subs	r3, #10
 80088ba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	2b09      	cmp	r3, #9
 80088c0:	d8f6      	bhi.n	80088b0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	011b      	lsls	r3, r3, #4
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	79fb      	ldrb	r3, [r7, #7]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b2db      	uxtb	r3, r3
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	091b      	lsrs	r3, r3, #4
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	461a      	mov	r2, r3
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80088fc:	79fb      	ldrb	r3, [r7, #7]
 80088fe:	f003 030f 	and.w	r3, r3, #15
 8008902:	b2da      	uxtb	r2, r3
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	4413      	add	r3, r2
 800890a:	b2db      	uxtb	r3, r3
}
 800890c:	4618      	mov	r0, r3
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e056      	b.n	80089d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008936:	b2db      	uxtb	r3, r3
 8008938:	2b00      	cmp	r3, #0
 800893a:	d106      	bne.n	800894a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7fb fce3 	bl	8004310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2202      	movs	r2, #2
 800894e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008960:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	431a      	orrs	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008986:	431a      	orrs	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a1b      	ldr	r3, [r3, #32]
 8008992:	ea42 0103 	orr.w	r1, r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	0c1b      	lsrs	r3, r3, #16
 80089a8:	f003 0104 	and.w	r1, r3, #4
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	69da      	ldr	r2, [r3, #28]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3708      	adds	r7, #8
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b088      	sub	sp, #32
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	603b      	str	r3, [r7, #0]
 80089ec:	4613      	mov	r3, r2
 80089ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089fc:	d112      	bne.n	8008a24 <HAL_SPI_Receive+0x44>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10e      	bne.n	8008a24 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2204      	movs	r2, #4
 8008a0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008a0e:	88fa      	ldrh	r2, [r7, #6]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	4613      	mov	r3, r2
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f8e9 	bl	8008bf2 <HAL_SPI_TransmitReceive>
 8008a20:	4603      	mov	r3, r0
 8008a22:	e0e2      	b.n	8008bea <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d101      	bne.n	8008a32 <HAL_SPI_Receive+0x52>
 8008a2e:	2302      	movs	r3, #2
 8008a30:	e0db      	b.n	8008bea <HAL_SPI_Receive+0x20a>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a3a:	f7fc faf9 	bl	8005030 <HAL_GetTick>
 8008a3e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d002      	beq.n	8008a52 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a50:	e0c2      	b.n	8008bd8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <HAL_SPI_Receive+0x7e>
 8008a58:	88fb      	ldrh	r3, [r7, #6]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d102      	bne.n	8008a64 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008a62:	e0b9      	b.n	8008bd8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2204      	movs	r2, #4
 8008a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	88fa      	ldrh	r2, [r7, #6]
 8008a7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	88fa      	ldrh	r2, [r7, #6]
 8008a82:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aaa:	d107      	bne.n	8008abc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008aba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac6:	2b40      	cmp	r3, #64	; 0x40
 8008ac8:	d007      	beq.n	8008ada <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ad8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d162      	bne.n	8008ba8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008ae2:	e02e      	b.n	8008b42 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d115      	bne.n	8008b1e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f103 020c 	add.w	r2, r3, #12
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afe:	7812      	ldrb	r2, [r2, #0]
 8008b00:	b2d2      	uxtb	r2, r2
 8008b02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b08:	1c5a      	adds	r2, r3, #1
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	3b01      	subs	r3, #1
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b1c:	e011      	b.n	8008b42 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b1e:	f7fc fa87 	bl	8005030 <HAL_GetTick>
 8008b22:	4602      	mov	r2, r0
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d803      	bhi.n	8008b36 <HAL_SPI_Receive+0x156>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b34:	d102      	bne.n	8008b3c <HAL_SPI_Receive+0x15c>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d102      	bne.n	8008b42 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008b40:	e04a      	b.n	8008bd8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1cb      	bne.n	8008ae4 <HAL_SPI_Receive+0x104>
 8008b4c:	e031      	b.n	8008bb2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	f003 0301 	and.w	r3, r3, #1
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d113      	bne.n	8008b84 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68da      	ldr	r2, [r3, #12]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b66:	b292      	uxth	r2, r2
 8008b68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6e:	1c9a      	adds	r2, r3, #2
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008b82:	e011      	b.n	8008ba8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b84:	f7fc fa54 	bl	8005030 <HAL_GetTick>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	1ad3      	subs	r3, r2, r3
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d803      	bhi.n	8008b9c <HAL_SPI_Receive+0x1bc>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d102      	bne.n	8008ba2 <HAL_SPI_Receive+0x1c2>
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d102      	bne.n	8008ba8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008ba6:	e017      	b.n	8008bd8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1cd      	bne.n	8008b4e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 fa27 	bl	800900a <SPI_EndRxTransaction>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	75fb      	strb	r3, [r7, #23]
 8008bd4:	e000      	b.n	8008bd8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008bd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b08c      	sub	sp, #48	; 0x30
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	60b9      	str	r1, [r7, #8]
 8008bfc:	607a      	str	r2, [r7, #4]
 8008bfe:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008c00:	2301      	movs	r3, #1
 8008c02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008c04:	2300      	movs	r3, #0
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d101      	bne.n	8008c18 <HAL_SPI_TransmitReceive+0x26>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e18a      	b.n	8008f2e <HAL_SPI_TransmitReceive+0x33c>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c20:	f7fc fa06 	bl	8005030 <HAL_GetTick>
 8008c24:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008c36:	887b      	ldrh	r3, [r7, #2]
 8008c38:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d00f      	beq.n	8008c62 <HAL_SPI_TransmitReceive+0x70>
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008c48:	d107      	bne.n	8008c5a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d103      	bne.n	8008c5a <HAL_SPI_TransmitReceive+0x68>
 8008c52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	d003      	beq.n	8008c62 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c60:	e15b      	b.n	8008f1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <HAL_SPI_TransmitReceive+0x82>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <HAL_SPI_TransmitReceive+0x82>
 8008c6e:	887b      	ldrh	r3, [r7, #2]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d103      	bne.n	8008c7c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008c7a:	e14e      	b.n	8008f1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d003      	beq.n	8008c90 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2205      	movs	r2, #5
 8008c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	887a      	ldrh	r2, [r7, #2]
 8008ca0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	887a      	ldrh	r2, [r7, #2]
 8008ca6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	887a      	ldrh	r2, [r7, #2]
 8008cb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	887a      	ldrh	r2, [r7, #2]
 8008cb8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd0:	2b40      	cmp	r3, #64	; 0x40
 8008cd2:	d007      	beq.n	8008ce4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ce2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cec:	d178      	bne.n	8008de0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <HAL_SPI_TransmitReceive+0x10a>
 8008cf6:	8b7b      	ldrh	r3, [r7, #26]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d166      	bne.n	8008dca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d00:	881a      	ldrh	r2, [r3, #0]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0c:	1c9a      	adds	r2, r3, #2
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008d20:	e053      	b.n	8008dca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f003 0302 	and.w	r3, r3, #2
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d11b      	bne.n	8008d68 <HAL_SPI_TransmitReceive+0x176>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d016      	beq.n	8008d68 <HAL_SPI_TransmitReceive+0x176>
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d113      	bne.n	8008d68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d44:	881a      	ldrh	r2, [r3, #0]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d50:	1c9a      	adds	r2, r3, #2
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d64:	2300      	movs	r3, #0
 8008d66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d119      	bne.n	8008daa <HAL_SPI_TransmitReceive+0x1b8>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d014      	beq.n	8008daa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8a:	b292      	uxth	r2, r2
 8008d8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d92:	1c9a      	adds	r2, r3, #2
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	3b01      	subs	r3, #1
 8008da0:	b29a      	uxth	r2, r3
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008da6:	2301      	movs	r3, #1
 8008da8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008daa:	f7fc f941 	bl	8005030 <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d807      	bhi.n	8008dca <HAL_SPI_TransmitReceive+0x1d8>
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	d003      	beq.n	8008dca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008dc8:	e0a7      	b.n	8008f1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1a6      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x130>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1a1      	bne.n	8008d22 <HAL_SPI_TransmitReceive+0x130>
 8008dde:	e07c      	b.n	8008eda <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <HAL_SPI_TransmitReceive+0x1fc>
 8008de8:	8b7b      	ldrh	r3, [r7, #26]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d16b      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	330c      	adds	r3, #12
 8008df8:	7812      	ldrb	r2, [r2, #0]
 8008dfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e14:	e057      	b.n	8008ec6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d11c      	bne.n	8008e5e <HAL_SPI_TransmitReceive+0x26c>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d017      	beq.n	8008e5e <HAL_SPI_TransmitReceive+0x26c>
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d114      	bne.n	8008e5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	7812      	ldrb	r2, [r2, #0]
 8008e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e46:	1c5a      	adds	r2, r3, #1
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	3b01      	subs	r3, #1
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d119      	bne.n	8008ea0 <HAL_SPI_TransmitReceive+0x2ae>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d014      	beq.n	8008ea0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e88:	1c5a      	adds	r2, r3, #1
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	3b01      	subs	r3, #1
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008ea0:	f7fc f8c6 	bl	8005030 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d803      	bhi.n	8008eb8 <HAL_SPI_TransmitReceive+0x2c6>
 8008eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb6:	d102      	bne.n	8008ebe <HAL_SPI_TransmitReceive+0x2cc>
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d103      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008ec4:	e029      	b.n	8008f1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d1a2      	bne.n	8008e16 <HAL_SPI_TransmitReceive+0x224>
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d19d      	bne.n	8008e16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008edc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 f8f8 	bl	80090d4 <SPI_EndRxTxTransaction>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d006      	beq.n	8008ef8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008ef6:	e010      	b.n	8008f1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10b      	bne.n	8008f18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	617b      	str	r3, [r7, #20]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	e000      	b.n	8008f1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008f18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3730      	adds	r7, #48	; 0x30
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b084      	sub	sp, #16
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	603b      	str	r3, [r7, #0]
 8008f42:	4613      	mov	r3, r2
 8008f44:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f46:	e04c      	b.n	8008fe2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d048      	beq.n	8008fe2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008f50:	f7fc f86e 	bl	8005030 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d902      	bls.n	8008f66 <SPI_WaitFlagStateUntilTimeout+0x30>
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d13d      	bne.n	8008fe2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f7e:	d111      	bne.n	8008fa4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f88:	d004      	beq.n	8008f94 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f92:	d107      	bne.n	8008fa4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fac:	d10f      	bne.n	8008fce <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008fcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e00f      	b.n	8009002 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689a      	ldr	r2, [r3, #8]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	4013      	ands	r3, r2
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	bf0c      	ite	eq
 8008ff2:	2301      	moveq	r3, #1
 8008ff4:	2300      	movne	r3, #0
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d1a3      	bne.n	8008f48 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b086      	sub	sp, #24
 800900e:	af02      	add	r7, sp, #8
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800901e:	d111      	bne.n	8009044 <SPI_EndRxTransaction+0x3a>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009028:	d004      	beq.n	8009034 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009032:	d107      	bne.n	8009044 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009042:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800904c:	d12a      	bne.n	80090a4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009056:	d012      	beq.n	800907e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	9300      	str	r3, [sp, #0]
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2200      	movs	r2, #0
 8009060:	2180      	movs	r1, #128	; 0x80
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff ff67 	bl	8008f36 <SPI_WaitFlagStateUntilTimeout>
 8009068:	4603      	mov	r3, r0
 800906a:	2b00      	cmp	r3, #0
 800906c:	d02d      	beq.n	80090ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009072:	f043 0220 	orr.w	r2, r3, #32
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e026      	b.n	80090cc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2200      	movs	r2, #0
 8009086:	2101      	movs	r1, #1
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f7ff ff54 	bl	8008f36 <SPI_WaitFlagStateUntilTimeout>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01a      	beq.n	80090ca <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009098:	f043 0220 	orr.w	r2, r3, #32
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e013      	b.n	80090cc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2200      	movs	r2, #0
 80090ac:	2101      	movs	r1, #1
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f7ff ff41 	bl	8008f36 <SPI_WaitFlagStateUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090be:	f043 0220 	orr.w	r2, r3, #32
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e000      	b.n	80090cc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b088      	sub	sp, #32
 80090d8:	af02      	add	r7, sp, #8
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80090e0:	4b1b      	ldr	r3, [pc, #108]	; (8009150 <SPI_EndRxTxTransaction+0x7c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a1b      	ldr	r2, [pc, #108]	; (8009154 <SPI_EndRxTxTransaction+0x80>)
 80090e6:	fba2 2303 	umull	r2, r3, r2, r3
 80090ea:	0d5b      	lsrs	r3, r3, #21
 80090ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090f0:	fb02 f303 	mul.w	r3, r2, r3
 80090f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090fe:	d112      	bne.n	8009126 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	9300      	str	r3, [sp, #0]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	2200      	movs	r2, #0
 8009108:	2180      	movs	r1, #128	; 0x80
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff ff13 	bl	8008f36 <SPI_WaitFlagStateUntilTimeout>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d016      	beq.n	8009144 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911a:	f043 0220 	orr.w	r2, r3, #32
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e00f      	b.n	8009146 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00a      	beq.n	8009142 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	3b01      	subs	r3, #1
 8009130:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913c:	2b80      	cmp	r3, #128	; 0x80
 800913e:	d0f2      	beq.n	8009126 <SPI_EndRxTxTransaction+0x52>
 8009140:	e000      	b.n	8009144 <SPI_EndRxTxTransaction+0x70>
        break;
 8009142:	bf00      	nop
  }

  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3718      	adds	r7, #24
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
 800914e:	bf00      	nop
 8009150:	20000004 	.word	0x20000004
 8009154:	165e9f81 	.word	0x165e9f81

08009158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d101      	bne.n	800916a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e01d      	b.n	80091a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7fb fc0a 	bl	8004998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3304      	adds	r3, #4
 8009194:	4619      	mov	r1, r3
 8009196:	4610      	mov	r0, r2
 8009198:	f000 fb8e 	bl	80098b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d101      	bne.n	80091c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e01d      	b.n	80091fc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d106      	bne.n	80091da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f815 	bl	8009204 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2202      	movs	r2, #2
 80091de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3304      	adds	r3, #4
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f000 fb63 	bl	80098b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3708      	adds	r7, #8
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2201      	movs	r2, #1
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 fe2e 	bl	8009e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a15      	ldr	r2, [pc, #84]	; (800928c <HAL_TIM_PWM_Start+0x74>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d004      	beq.n	8009244 <HAL_TIM_PWM_Start+0x2c>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a14      	ldr	r2, [pc, #80]	; (8009290 <HAL_TIM_PWM_Start+0x78>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d101      	bne.n	8009248 <HAL_TIM_PWM_Start+0x30>
 8009244:	2301      	movs	r3, #1
 8009246:	e000      	b.n	800924a <HAL_TIM_PWM_Start+0x32>
 8009248:	2300      	movs	r3, #0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d007      	beq.n	800925e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800925c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f003 0307 	and.w	r3, r3, #7
 8009268:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b06      	cmp	r3, #6
 800926e:	d007      	beq.n	8009280 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681a      	ldr	r2, [r3, #0]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f042 0201 	orr.w	r2, r2, #1
 800927e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3710      	adds	r7, #16
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	40010000 	.word	0x40010000
 8009290:	40010400 	.word	0x40010400

08009294 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2200      	movs	r2, #0
 80092a4:	6839      	ldr	r1, [r7, #0]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 fdf0 	bl	8009e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a22      	ldr	r2, [pc, #136]	; (800933c <HAL_TIM_PWM_Stop+0xa8>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d004      	beq.n	80092c0 <HAL_TIM_PWM_Stop+0x2c>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a21      	ldr	r2, [pc, #132]	; (8009340 <HAL_TIM_PWM_Stop+0xac>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d101      	bne.n	80092c4 <HAL_TIM_PWM_Stop+0x30>
 80092c0:	2301      	movs	r3, #1
 80092c2:	e000      	b.n	80092c6 <HAL_TIM_PWM_Stop+0x32>
 80092c4:	2300      	movs	r3, #0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d017      	beq.n	80092fa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6a1a      	ldr	r2, [r3, #32]
 80092d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80092d4:	4013      	ands	r3, r2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10f      	bne.n	80092fa <HAL_TIM_PWM_Stop+0x66>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6a1a      	ldr	r2, [r3, #32]
 80092e0:	f240 4344 	movw	r3, #1092	; 0x444
 80092e4:	4013      	ands	r3, r2
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d107      	bne.n	80092fa <HAL_TIM_PWM_Stop+0x66>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6a1a      	ldr	r2, [r3, #32]
 8009300:	f241 1311 	movw	r3, #4369	; 0x1111
 8009304:	4013      	ands	r3, r2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10f      	bne.n	800932a <HAL_TIM_PWM_Stop+0x96>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	6a1a      	ldr	r2, [r3, #32]
 8009310:	f240 4344 	movw	r3, #1092	; 0x444
 8009314:	4013      	ands	r3, r2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d107      	bne.n	800932a <HAL_TIM_PWM_Stop+0x96>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f022 0201 	bic.w	r2, r2, #1
 8009328:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	40010000 	.word	0x40010000
 8009340:	40010400 	.word	0x40010400

08009344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	f003 0302 	and.w	r3, r3, #2
 8009356:	2b02      	cmp	r3, #2
 8009358:	d122      	bne.n	80093a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b02      	cmp	r3, #2
 8009366:	d11b      	bne.n	80093a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f06f 0202 	mvn.w	r2, #2
 8009370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fa78 	bl	800987c <HAL_TIM_IC_CaptureCallback>
 800938c:	e005      	b.n	800939a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa6a 	bl	8009868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fa7b 	bl	8009890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2200      	movs	r2, #0
 800939e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	f003 0304 	and.w	r3, r3, #4
 80093aa:	2b04      	cmp	r3, #4
 80093ac:	d122      	bne.n	80093f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b04      	cmp	r3, #4
 80093ba:	d11b      	bne.n	80093f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f06f 0204 	mvn.w	r2, #4
 80093c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2202      	movs	r2, #2
 80093ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa4e 	bl	800987c <HAL_TIM_IC_CaptureCallback>
 80093e0:	e005      	b.n	80093ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fa40 	bl	8009868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 fa51 	bl	8009890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	f003 0308 	and.w	r3, r3, #8
 80093fe:	2b08      	cmp	r3, #8
 8009400:	d122      	bne.n	8009448 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f003 0308 	and.w	r3, r3, #8
 800940c:	2b08      	cmp	r3, #8
 800940e:	d11b      	bne.n	8009448 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f06f 0208 	mvn.w	r2, #8
 8009418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2204      	movs	r2, #4
 800941e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	69db      	ldr	r3, [r3, #28]
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d003      	beq.n	8009436 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fa24 	bl	800987c <HAL_TIM_IC_CaptureCallback>
 8009434:	e005      	b.n	8009442 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa16 	bl	8009868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fa27 	bl	8009890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f003 0310 	and.w	r3, r3, #16
 8009452:	2b10      	cmp	r3, #16
 8009454:	d122      	bne.n	800949c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	f003 0310 	and.w	r3, r3, #16
 8009460:	2b10      	cmp	r3, #16
 8009462:	d11b      	bne.n	800949c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f06f 0210 	mvn.w	r2, #16
 800946c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2208      	movs	r2, #8
 8009472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800947e:	2b00      	cmp	r3, #0
 8009480:	d003      	beq.n	800948a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f9fa 	bl	800987c <HAL_TIM_IC_CaptureCallback>
 8009488:	e005      	b.n	8009496 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f9ec 	bl	8009868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f9fd 	bl	8009890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d10e      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f003 0301 	and.w	r3, r3, #1
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d107      	bne.n	80094c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f06f 0201 	mvn.w	r2, #1
 80094c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f7f9 ffc6 	bl	8003454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d2:	2b80      	cmp	r3, #128	; 0x80
 80094d4:	d10e      	bne.n	80094f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e0:	2b80      	cmp	r3, #128	; 0x80
 80094e2:	d107      	bne.n	80094f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fd78 	bl	8009fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fe:	2b40      	cmp	r3, #64	; 0x40
 8009500:	d10e      	bne.n	8009520 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950c:	2b40      	cmp	r3, #64	; 0x40
 800950e:	d107      	bne.n	8009520 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f9c2 	bl	80098a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	f003 0320 	and.w	r3, r3, #32
 800952a:	2b20      	cmp	r3, #32
 800952c:	d10e      	bne.n	800954c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f003 0320 	and.w	r3, r3, #32
 8009538:	2b20      	cmp	r3, #32
 800953a:	d107      	bne.n	800954c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f06f 0220 	mvn.w	r2, #32
 8009544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fd42 	bl	8009fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009566:	2b01      	cmp	r3, #1
 8009568:	d101      	bne.n	800956e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800956a:	2302      	movs	r3, #2
 800956c:	e0b4      	b.n	80096d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2201      	movs	r2, #1
 8009572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2202      	movs	r2, #2
 800957a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b0c      	cmp	r3, #12
 8009582:	f200 809f 	bhi.w	80096c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009586:	a201      	add	r2, pc, #4	; (adr r2, 800958c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958c:	080095c1 	.word	0x080095c1
 8009590:	080096c5 	.word	0x080096c5
 8009594:	080096c5 	.word	0x080096c5
 8009598:	080096c5 	.word	0x080096c5
 800959c:	08009601 	.word	0x08009601
 80095a0:	080096c5 	.word	0x080096c5
 80095a4:	080096c5 	.word	0x080096c5
 80095a8:	080096c5 	.word	0x080096c5
 80095ac:	08009643 	.word	0x08009643
 80095b0:	080096c5 	.word	0x080096c5
 80095b4:	080096c5 	.word	0x080096c5
 80095b8:	080096c5 	.word	0x080096c5
 80095bc:	08009683 	.word	0x08009683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68b9      	ldr	r1, [r7, #8]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fa16 	bl	80099f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	699a      	ldr	r2, [r3, #24]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0208 	orr.w	r2, r2, #8
 80095da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	699a      	ldr	r2, [r3, #24]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0204 	bic.w	r2, r2, #4
 80095ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	6999      	ldr	r1, [r3, #24]
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	691a      	ldr	r2, [r3, #16]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	619a      	str	r2, [r3, #24]
      break;
 80095fe:	e062      	b.n	80096c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68b9      	ldr	r1, [r7, #8]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fa66 	bl	8009ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	699a      	ldr	r2, [r3, #24]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800961a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	699a      	ldr	r2, [r3, #24]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800962a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6999      	ldr	r1, [r3, #24]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	021a      	lsls	r2, r3, #8
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	619a      	str	r2, [r3, #24]
      break;
 8009640:	e041      	b.n	80096c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68b9      	ldr	r1, [r7, #8]
 8009648:	4618      	mov	r0, r3
 800964a:	f000 fabb 	bl	8009bc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	69da      	ldr	r2, [r3, #28]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f042 0208 	orr.w	r2, r2, #8
 800965c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	69da      	ldr	r2, [r3, #28]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 0204 	bic.w	r2, r2, #4
 800966c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	69d9      	ldr	r1, [r3, #28]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	691a      	ldr	r2, [r3, #16]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	61da      	str	r2, [r3, #28]
      break;
 8009680:	e021      	b.n	80096c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68b9      	ldr	r1, [r7, #8]
 8009688:	4618      	mov	r0, r3
 800968a:	f000 fb0f 	bl	8009cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	69da      	ldr	r2, [r3, #28]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800969c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69da      	ldr	r2, [r3, #28]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	69d9      	ldr	r1, [r3, #28]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	021a      	lsls	r2, r3, #8
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	61da      	str	r2, [r3, #28]
      break;
 80096c2:	e000      	b.n	80096c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80096c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2201      	movs	r2, #1
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_TIM_ConfigClockSource+0x18>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e0b3      	b.n	8009860 <HAL_TIM_ConfigClockSource+0x180>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800971e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009730:	d03e      	beq.n	80097b0 <HAL_TIM_ConfigClockSource+0xd0>
 8009732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009736:	f200 8087 	bhi.w	8009848 <HAL_TIM_ConfigClockSource+0x168>
 800973a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800973e:	f000 8085 	beq.w	800984c <HAL_TIM_ConfigClockSource+0x16c>
 8009742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009746:	d87f      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x168>
 8009748:	2b70      	cmp	r3, #112	; 0x70
 800974a:	d01a      	beq.n	8009782 <HAL_TIM_ConfigClockSource+0xa2>
 800974c:	2b70      	cmp	r3, #112	; 0x70
 800974e:	d87b      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x168>
 8009750:	2b60      	cmp	r3, #96	; 0x60
 8009752:	d050      	beq.n	80097f6 <HAL_TIM_ConfigClockSource+0x116>
 8009754:	2b60      	cmp	r3, #96	; 0x60
 8009756:	d877      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x168>
 8009758:	2b50      	cmp	r3, #80	; 0x50
 800975a:	d03c      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0xf6>
 800975c:	2b50      	cmp	r3, #80	; 0x50
 800975e:	d873      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x168>
 8009760:	2b40      	cmp	r3, #64	; 0x40
 8009762:	d058      	beq.n	8009816 <HAL_TIM_ConfigClockSource+0x136>
 8009764:	2b40      	cmp	r3, #64	; 0x40
 8009766:	d86f      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x168>
 8009768:	2b30      	cmp	r3, #48	; 0x30
 800976a:	d064      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x156>
 800976c:	2b30      	cmp	r3, #48	; 0x30
 800976e:	d86b      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x168>
 8009770:	2b20      	cmp	r3, #32
 8009772:	d060      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x156>
 8009774:	2b20      	cmp	r3, #32
 8009776:	d867      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x168>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d05c      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x156>
 800977c:	2b10      	cmp	r3, #16
 800977e:	d05a      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009780:	e062      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6818      	ldr	r0, [r3, #0]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	6899      	ldr	r1, [r3, #8]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	f000 fb5b 	bl	8009e4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	609a      	str	r2, [r3, #8]
      break;
 80097ae:	e04e      	b.n	800984e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6818      	ldr	r0, [r3, #0]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	6899      	ldr	r1, [r3, #8]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f000 fb44 	bl	8009e4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097d2:	609a      	str	r2, [r3, #8]
      break;
 80097d4:	e03b      	b.n	800984e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	6859      	ldr	r1, [r3, #4]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f000 fab8 	bl	8009d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2150      	movs	r1, #80	; 0x50
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fb11 	bl	8009e16 <TIM_ITRx_SetConfig>
      break;
 80097f4:	e02b      	b.n	800984e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	6859      	ldr	r1, [r3, #4]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	461a      	mov	r2, r3
 8009804:	f000 fad7 	bl	8009db6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2160      	movs	r1, #96	; 0x60
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fb01 	bl	8009e16 <TIM_ITRx_SetConfig>
      break;
 8009814:	e01b      	b.n	800984e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	6859      	ldr	r1, [r3, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	461a      	mov	r2, r3
 8009824:	f000 fa98 	bl	8009d58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2140      	movs	r1, #64	; 0x40
 800982e:	4618      	mov	r0, r3
 8009830:	f000 faf1 	bl	8009e16 <TIM_ITRx_SetConfig>
      break;
 8009834:	e00b      	b.n	800984e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4619      	mov	r1, r3
 8009840:	4610      	mov	r0, r2
 8009842:	f000 fae8 	bl	8009e16 <TIM_ITRx_SetConfig>
      break;
 8009846:	e002      	b.n	800984e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009848:	bf00      	nop
 800984a:	e000      	b.n	800984e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800984c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a40      	ldr	r2, [pc, #256]	; (80099cc <TIM_Base_SetConfig+0x114>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d013      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d6:	d00f      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a3d      	ldr	r2, [pc, #244]	; (80099d0 <TIM_Base_SetConfig+0x118>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d00b      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a3c      	ldr	r2, [pc, #240]	; (80099d4 <TIM_Base_SetConfig+0x11c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d007      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a3b      	ldr	r2, [pc, #236]	; (80099d8 <TIM_Base_SetConfig+0x120>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d003      	beq.n	80098f8 <TIM_Base_SetConfig+0x40>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a3a      	ldr	r2, [pc, #232]	; (80099dc <TIM_Base_SetConfig+0x124>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d108      	bne.n	800990a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	4313      	orrs	r3, r2
 8009908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a2f      	ldr	r2, [pc, #188]	; (80099cc <TIM_Base_SetConfig+0x114>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d02b      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009918:	d027      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a2c      	ldr	r2, [pc, #176]	; (80099d0 <TIM_Base_SetConfig+0x118>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d023      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a2b      	ldr	r2, [pc, #172]	; (80099d4 <TIM_Base_SetConfig+0x11c>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d01f      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a2a      	ldr	r2, [pc, #168]	; (80099d8 <TIM_Base_SetConfig+0x120>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d01b      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a29      	ldr	r2, [pc, #164]	; (80099dc <TIM_Base_SetConfig+0x124>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d017      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a28      	ldr	r2, [pc, #160]	; (80099e0 <TIM_Base_SetConfig+0x128>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d013      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a27      	ldr	r2, [pc, #156]	; (80099e4 <TIM_Base_SetConfig+0x12c>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d00f      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a26      	ldr	r2, [pc, #152]	; (80099e8 <TIM_Base_SetConfig+0x130>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d00b      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a25      	ldr	r2, [pc, #148]	; (80099ec <TIM_Base_SetConfig+0x134>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d007      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a24      	ldr	r2, [pc, #144]	; (80099f0 <TIM_Base_SetConfig+0x138>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d003      	beq.n	800996a <TIM_Base_SetConfig+0xb2>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a23      	ldr	r2, [pc, #140]	; (80099f4 <TIM_Base_SetConfig+0x13c>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d108      	bne.n	800997c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4313      	orrs	r3, r2
 800997a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	4313      	orrs	r3, r2
 8009988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	689a      	ldr	r2, [r3, #8]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <TIM_Base_SetConfig+0x114>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d003      	beq.n	80099b0 <TIM_Base_SetConfig+0xf8>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a0c      	ldr	r2, [pc, #48]	; (80099dc <TIM_Base_SetConfig+0x124>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d103      	bne.n	80099b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	691a      	ldr	r2, [r3, #16]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	615a      	str	r2, [r3, #20]
}
 80099be:	bf00      	nop
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	40010000 	.word	0x40010000
 80099d0:	40000400 	.word	0x40000400
 80099d4:	40000800 	.word	0x40000800
 80099d8:	40000c00 	.word	0x40000c00
 80099dc:	40010400 	.word	0x40010400
 80099e0:	40014000 	.word	0x40014000
 80099e4:	40014400 	.word	0x40014400
 80099e8:	40014800 	.word	0x40014800
 80099ec:	40001800 	.word	0x40001800
 80099f0:	40001c00 	.word	0x40001c00
 80099f4:	40002000 	.word	0x40002000

080099f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b087      	sub	sp, #28
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	f023 0201 	bic.w	r2, r3, #1
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	f023 0303 	bic.w	r3, r3, #3
 8009a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	f023 0302 	bic.w	r3, r3, #2
 8009a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	697a      	ldr	r2, [r7, #20]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a20      	ldr	r2, [pc, #128]	; (8009ad0 <TIM_OC1_SetConfig+0xd8>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d003      	beq.n	8009a5c <TIM_OC1_SetConfig+0x64>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1f      	ldr	r2, [pc, #124]	; (8009ad4 <TIM_OC1_SetConfig+0xdc>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d10c      	bne.n	8009a76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f023 0308 	bic.w	r3, r3, #8
 8009a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f023 0304 	bic.w	r3, r3, #4
 8009a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a15      	ldr	r2, [pc, #84]	; (8009ad0 <TIM_OC1_SetConfig+0xd8>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d003      	beq.n	8009a86 <TIM_OC1_SetConfig+0x8e>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a14      	ldr	r2, [pc, #80]	; (8009ad4 <TIM_OC1_SetConfig+0xdc>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d111      	bne.n	8009aaa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	693a      	ldr	r2, [r7, #16]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	621a      	str	r2, [r3, #32]
}
 8009ac4:	bf00      	nop
 8009ac6:	371c      	adds	r7, #28
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40010400 	.word	0x40010400

08009ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	f023 0210 	bic.w	r2, r3, #16
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	021b      	lsls	r3, r3, #8
 8009b16:	68fa      	ldr	r2, [r7, #12]
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f023 0320 	bic.w	r3, r3, #32
 8009b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a22      	ldr	r2, [pc, #136]	; (8009bbc <TIM_OC2_SetConfig+0xe4>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d003      	beq.n	8009b40 <TIM_OC2_SetConfig+0x68>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a21      	ldr	r2, [pc, #132]	; (8009bc0 <TIM_OC2_SetConfig+0xe8>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d10d      	bne.n	8009b5c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	011b      	lsls	r3, r3, #4
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a17      	ldr	r2, [pc, #92]	; (8009bbc <TIM_OC2_SetConfig+0xe4>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d003      	beq.n	8009b6c <TIM_OC2_SetConfig+0x94>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a16      	ldr	r2, [pc, #88]	; (8009bc0 <TIM_OC2_SetConfig+0xe8>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d113      	bne.n	8009b94 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68fa      	ldr	r2, [r7, #12]
 8009b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	685a      	ldr	r2, [r3, #4]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	621a      	str	r2, [r3, #32]
}
 8009bae:	bf00      	nop
 8009bb0:	371c      	adds	r7, #28
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	40010000 	.word	0x40010000
 8009bc0:	40010400 	.word	0x40010400

08009bc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	69db      	ldr	r3, [r3, #28]
 8009bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f023 0303 	bic.w	r3, r3, #3
 8009bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	689b      	ldr	r3, [r3, #8]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4a21      	ldr	r2, [pc, #132]	; (8009ca4 <TIM_OC3_SetConfig+0xe0>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d003      	beq.n	8009c2a <TIM_OC3_SetConfig+0x66>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4a20      	ldr	r2, [pc, #128]	; (8009ca8 <TIM_OC3_SetConfig+0xe4>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d10d      	bne.n	8009c46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a16      	ldr	r2, [pc, #88]	; (8009ca4 <TIM_OC3_SetConfig+0xe0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d003      	beq.n	8009c56 <TIM_OC3_SetConfig+0x92>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a15      	ldr	r2, [pc, #84]	; (8009ca8 <TIM_OC3_SetConfig+0xe4>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d113      	bne.n	8009c7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	695b      	ldr	r3, [r3, #20]
 8009c6a:	011b      	lsls	r3, r3, #4
 8009c6c:	693a      	ldr	r2, [r7, #16]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	685a      	ldr	r2, [r3, #4]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	697a      	ldr	r2, [r7, #20]
 8009c96:	621a      	str	r2, [r3, #32]
}
 8009c98:	bf00      	nop
 8009c9a:	371c      	adds	r7, #28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	40010000 	.word	0x40010000
 8009ca8:	40010400 	.word	0x40010400

08009cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b087      	sub	sp, #28
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	021b      	lsls	r3, r3, #8
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	031b      	lsls	r3, r3, #12
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a12      	ldr	r2, [pc, #72]	; (8009d50 <TIM_OC4_SetConfig+0xa4>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d003      	beq.n	8009d14 <TIM_OC4_SetConfig+0x68>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a11      	ldr	r2, [pc, #68]	; (8009d54 <TIM_OC4_SetConfig+0xa8>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d109      	bne.n	8009d28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	019b      	lsls	r3, r3, #6
 8009d22:	697a      	ldr	r2, [r7, #20]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	621a      	str	r2, [r3, #32]
}
 8009d42:	bf00      	nop
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	40010000 	.word	0x40010000
 8009d54:	40010400 	.word	0x40010400

08009d58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b087      	sub	sp, #28
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	f023 0201 	bic.w	r2, r3, #1
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	699b      	ldr	r3, [r3, #24]
 8009d7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	011b      	lsls	r3, r3, #4
 8009d88:	693a      	ldr	r2, [r7, #16]
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f023 030a 	bic.w	r3, r3, #10
 8009d94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	697a      	ldr	r2, [r7, #20]
 8009da8:	621a      	str	r2, [r3, #32]
}
 8009daa:	bf00      	nop
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b087      	sub	sp, #28
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	60f8      	str	r0, [r7, #12]
 8009dbe:	60b9      	str	r1, [r7, #8]
 8009dc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	f023 0210 	bic.w	r2, r3, #16
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009de0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	031b      	lsls	r3, r3, #12
 8009de6:	697a      	ldr	r2, [r7, #20]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009df2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	011b      	lsls	r3, r3, #4
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	697a      	ldr	r2, [r7, #20]
 8009e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	693a      	ldr	r2, [r7, #16]
 8009e08:	621a      	str	r2, [r3, #32]
}
 8009e0a:	bf00      	nop
 8009e0c:	371c      	adds	r7, #28
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e16:	b480      	push	{r7}
 8009e18:	b085      	sub	sp, #20
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	6078      	str	r0, [r7, #4]
 8009e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	f043 0307 	orr.w	r3, r3, #7
 8009e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	609a      	str	r2, [r3, #8]
}
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
 8009e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	021a      	lsls	r2, r3, #8
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	697a      	ldr	r2, [r7, #20]
 8009e7e:	609a      	str	r2, [r3, #8]
}
 8009e80:	bf00      	nop
 8009e82:	371c      	adds	r7, #28
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	f003 031f 	and.w	r3, r3, #31
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6a1a      	ldr	r2, [r3, #32]
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	43db      	mvns	r3, r3
 8009eae:	401a      	ands	r2, r3
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6a1a      	ldr	r2, [r3, #32]
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f003 031f 	and.w	r3, r3, #31
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec4:	431a      	orrs	r2, r3
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	621a      	str	r2, [r3, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	371c      	adds	r7, #28
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
	...

08009ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d101      	bne.n	8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009eec:	2302      	movs	r3, #2
 8009eee:	e05a      	b.n	8009fa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2202      	movs	r2, #2
 8009efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a21      	ldr	r2, [pc, #132]	; (8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d022      	beq.n	8009f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f3c:	d01d      	beq.n	8009f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a1d      	ldr	r2, [pc, #116]	; (8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d018      	beq.n	8009f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a1b      	ldr	r2, [pc, #108]	; (8009fbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d013      	beq.n	8009f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a1a      	ldr	r2, [pc, #104]	; (8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d00e      	beq.n	8009f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a18      	ldr	r2, [pc, #96]	; (8009fc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d009      	beq.n	8009f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a17      	ldr	r2, [pc, #92]	; (8009fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d004      	beq.n	8009f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a15      	ldr	r2, [pc, #84]	; (8009fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d10c      	bne.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	40010000 	.word	0x40010000
 8009fb8:	40000400 	.word	0x40000400
 8009fbc:	40000800 	.word	0x40000800
 8009fc0:	40000c00 	.word	0x40000c00
 8009fc4:	40010400 	.word	0x40010400
 8009fc8:	40014000 	.word	0x40014000
 8009fcc:	40001800 	.word	0x40001800

08009fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d101      	bne.n	800a00a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	e03f      	b.n	800a08a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b00      	cmp	r3, #0
 800a014:	d106      	bne.n	800a024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7fa fdc2 	bl	8004ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2224      	movs	r2, #36	; 0x24
 800a028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68da      	ldr	r2, [r3, #12]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a03a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fd0f 	bl	800aa60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	691a      	ldr	r2, [r3, #16]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	695a      	ldr	r2, [r3, #20]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68da      	ldr	r2, [r3, #12]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2220      	movs	r2, #32
 800a07c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2220      	movs	r2, #32
 800a084:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b088      	sub	sp, #32
 800a096:	af02      	add	r7, sp, #8
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	603b      	str	r3, [r7, #0]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b20      	cmp	r3, #32
 800a0b0:	f040 8083 	bne.w	800a1ba <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d002      	beq.n	800a0c0 <HAL_UART_Transmit+0x2e>
 800a0ba:	88fb      	ldrh	r3, [r7, #6]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e07b      	b.n	800a1bc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d101      	bne.n	800a0d2 <HAL_UART_Transmit+0x40>
 800a0ce:	2302      	movs	r3, #2
 800a0d0:	e074      	b.n	800a1bc <HAL_UART_Transmit+0x12a>
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2201      	movs	r2, #1
 800a0d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2221      	movs	r2, #33	; 0x21
 800a0e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a0e8:	f7fa ffa2 	bl	8005030 <HAL_GetTick>
 800a0ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	88fa      	ldrh	r2, [r7, #6]
 800a0f2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	88fa      	ldrh	r2, [r7, #6]
 800a0f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a102:	e042      	b.n	800a18a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a108:	b29b      	uxth	r3, r3
 800a10a:	3b01      	subs	r3, #1
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a11a:	d122      	bne.n	800a162 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	2200      	movs	r2, #0
 800a124:	2180      	movs	r1, #128	; 0x80
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 fb19 	bl	800a75e <UART_WaitOnFlagUntilTimeout>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e042      	b.n	800a1bc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	881b      	ldrh	r3, [r3, #0]
 800a13e:	461a      	mov	r2, r3
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a148:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d103      	bne.n	800a15a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	3302      	adds	r3, #2
 800a156:	60bb      	str	r3, [r7, #8]
 800a158:	e017      	b.n	800a18a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	3301      	adds	r3, #1
 800a15e:	60bb      	str	r3, [r7, #8]
 800a160:	e013      	b.n	800a18a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	9300      	str	r3, [sp, #0]
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	2200      	movs	r2, #0
 800a16a:	2180      	movs	r1, #128	; 0x80
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 faf6 	bl	800a75e <UART_WaitOnFlagUntilTimeout>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e01f      	b.n	800a1bc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	1c5a      	adds	r2, r3, #1
 800a180:	60ba      	str	r2, [r7, #8]
 800a182:	781a      	ldrb	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a18e:	b29b      	uxth	r3, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1b7      	bne.n	800a104 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	9300      	str	r3, [sp, #0]
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2200      	movs	r2, #0
 800a19c:	2140      	movs	r1, #64	; 0x40
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f000 fadd 	bl	800a75e <UART_WaitOnFlagUntilTimeout>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e006      	b.n	800a1bc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e000      	b.n	800a1bc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a1ba:	2302      	movs	r3, #2
  }
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3718      	adds	r7, #24
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b20      	cmp	r3, #32
 800a1dc:	d153      	bne.n	800a286 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d002      	beq.n	800a1ea <HAL_UART_Transmit_DMA+0x26>
 800a1e4:	88fb      	ldrh	r3, [r7, #6]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e04c      	b.n	800a288 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d101      	bne.n	800a1fc <HAL_UART_Transmit_DMA+0x38>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	e045      	b.n	800a288 <HAL_UART_Transmit_DMA+0xc4>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	88fa      	ldrh	r2, [r7, #6]
 800a20e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	88fa      	ldrh	r2, [r7, #6]
 800a214:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2221      	movs	r2, #33	; 0x21
 800a220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a228:	4a19      	ldr	r2, [pc, #100]	; (800a290 <HAL_UART_Transmit_DMA+0xcc>)
 800a22a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a230:	4a18      	ldr	r2, [pc, #96]	; (800a294 <HAL_UART_Transmit_DMA+0xd0>)
 800a232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a238:	4a17      	ldr	r2, [pc, #92]	; (800a298 <HAL_UART_Transmit_DMA+0xd4>)
 800a23a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a240:	2200      	movs	r2, #0
 800a242:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a244:	f107 0308 	add.w	r3, r7, #8
 800a248:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	6819      	ldr	r1, [r3, #0]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3304      	adds	r3, #4
 800a258:	461a      	mov	r2, r3
 800a25a:	88fb      	ldrh	r3, [r7, #6]
 800a25c:	f7fb fcd4 	bl	8005c08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a268:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	695a      	ldr	r2, [r3, #20]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a280:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	e000      	b.n	800a288 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800a286:	2302      	movs	r3, #2
  }
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3718      	adds	r7, #24
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	0800a5d9 	.word	0x0800a5d9
 800a294:	0800a62b 	.word	0x0800a62b
 800a298:	0800a6cb 	.word	0x0800a6cb

0800a29c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b20      	cmp	r3, #32
 800a2b4:	d166      	bne.n	800a384 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <HAL_UART_Receive_DMA+0x26>
 800a2bc:	88fb      	ldrh	r3, [r7, #6]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e05f      	b.n	800a386 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d101      	bne.n	800a2d4 <HAL_UART_Receive_DMA+0x38>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e058      	b.n	800a386 <HAL_UART_Receive_DMA+0xea>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	88fa      	ldrh	r2, [r7, #6]
 800a2e6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2222      	movs	r2, #34	; 0x22
 800a2f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2fa:	4a25      	ldr	r2, [pc, #148]	; (800a390 <HAL_UART_Receive_DMA+0xf4>)
 800a2fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a302:	4a24      	ldr	r2, [pc, #144]	; (800a394 <HAL_UART_Receive_DMA+0xf8>)
 800a304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a30a:	4a23      	ldr	r2, [pc, #140]	; (800a398 <HAL_UART_Receive_DMA+0xfc>)
 800a30c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a312:	2200      	movs	r2, #0
 800a314:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800a316:	f107 0308 	add.w	r3, r7, #8
 800a31a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3304      	adds	r3, #4
 800a326:	4619      	mov	r1, r3
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	88fb      	ldrh	r3, [r7, #6]
 800a32e:	f7fb fc6b 	bl	8005c08 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800a332:	2300      	movs	r3, #0
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	613b      	str	r3, [r7, #16]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	613b      	str	r3, [r7, #16]
 800a346:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	68da      	ldr	r2, [r3, #12]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a35e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	695a      	ldr	r2, [r3, #20]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f042 0201 	orr.w	r2, r2, #1
 800a36e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	695a      	ldr	r2, [r3, #20]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a37e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	e000      	b.n	800a386 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a384:	2302      	movs	r3, #2
  }
}
 800a386:	4618      	mov	r0, r3
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	0800a647 	.word	0x0800a647
 800a394:	0800a6af 	.word	0x0800a6af
 800a398:	0800a6cb 	.word	0x0800a6cb

0800a39c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	f003 030f 	and.w	r3, r3, #15
 800a3ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10d      	bne.n	800a3ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	f003 0320 	and.w	r3, r3, #32
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d008      	beq.n	800a3ee <HAL_UART_IRQHandler+0x52>
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	f003 0320 	and.w	r3, r3, #32
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d003      	beq.n	800a3ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fab9 	bl	800a95e <UART_Receive_IT>
      return;
 800a3ec:	e0d0      	b.n	800a590 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f000 80b0 	beq.w	800a556 <HAL_UART_IRQHandler+0x1ba>
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d105      	bne.n	800a40c <HAL_UART_IRQHandler+0x70>
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a406:	2b00      	cmp	r3, #0
 800a408:	f000 80a5 	beq.w	800a556 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	f003 0301 	and.w	r3, r3, #1
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <HAL_UART_IRQHandler+0x90>
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d005      	beq.n	800a42c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a424:	f043 0201 	orr.w	r2, r3, #1
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	f003 0304 	and.w	r3, r3, #4
 800a432:	2b00      	cmp	r3, #0
 800a434:	d00a      	beq.n	800a44c <HAL_UART_IRQHandler+0xb0>
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d005      	beq.n	800a44c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a444:	f043 0202 	orr.w	r2, r3, #2
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	f003 0302 	and.w	r3, r3, #2
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <HAL_UART_IRQHandler+0xd0>
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	f003 0301 	and.w	r3, r3, #1
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d005      	beq.n	800a46c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a464:	f043 0204 	orr.w	r2, r3, #4
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	f003 0308 	and.w	r3, r3, #8
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00f      	beq.n	800a496 <HAL_UART_IRQHandler+0xfa>
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	f003 0320 	and.w	r3, r3, #32
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d104      	bne.n	800a48a <HAL_UART_IRQHandler+0xee>
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f003 0301 	and.w	r3, r3, #1
 800a486:	2b00      	cmp	r3, #0
 800a488:	d005      	beq.n	800a496 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a48e:	f043 0208 	orr.w	r2, r3, #8
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d077      	beq.n	800a58e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	f003 0320 	and.w	r3, r3, #32
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d007      	beq.n	800a4b8 <HAL_UART_IRQHandler+0x11c>
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fa53 	bl	800a95e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c2:	2b40      	cmp	r3, #64	; 0x40
 800a4c4:	bf0c      	ite	eq
 800a4c6:	2301      	moveq	r3, #1
 800a4c8:	2300      	movne	r3, #0
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d2:	f003 0308 	and.w	r3, r3, #8
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d102      	bne.n	800a4e0 <HAL_UART_IRQHandler+0x144>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d031      	beq.n	800a544 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 f99c 	bl	800a81e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	695b      	ldr	r3, [r3, #20]
 800a4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f0:	2b40      	cmp	r3, #64	; 0x40
 800a4f2:	d123      	bne.n	800a53c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	695a      	ldr	r2, [r3, #20]
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a502:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d013      	beq.n	800a534 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a510:	4a21      	ldr	r2, [pc, #132]	; (800a598 <HAL_UART_IRQHandler+0x1fc>)
 800a512:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a518:	4618      	mov	r0, r3
 800a51a:	f7fb fbcd 	bl	8005cb8 <HAL_DMA_Abort_IT>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b00      	cmp	r3, #0
 800a522:	d016      	beq.n	800a552 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a52e:	4610      	mov	r0, r2
 800a530:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a532:	e00e      	b.n	800a552 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 f845 	bl	800a5c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a53a:	e00a      	b.n	800a552 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f841 	bl	800a5c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a542:	e006      	b.n	800a552 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f000 f83d 	bl	800a5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800a550:	e01d      	b.n	800a58e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a552:	bf00      	nop
    return;
 800a554:	e01b      	b.n	800a58e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d008      	beq.n	800a572 <HAL_UART_IRQHandler+0x1d6>
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f989 	bl	800a882 <UART_Transmit_IT>
    return;
 800a570:	e00e      	b.n	800a590 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d009      	beq.n	800a590 <HAL_UART_IRQHandler+0x1f4>
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a582:	2b00      	cmp	r3, #0
 800a584:	d004      	beq.n	800a590 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f9d1 	bl	800a92e <UART_EndTransmit_IT>
    return;
 800a58c:	e000      	b.n	800a590 <HAL_UART_IRQHandler+0x1f4>
    return;
 800a58e:	bf00      	nop
  }
}
 800a590:	3720      	adds	r7, #32
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	0800a85b 	.word	0x0800a85b

0800a59c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5e4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d113      	bne.n	800a61c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	695a      	ldr	r2, [r3, #20]
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a608:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	68da      	ldr	r2, [r3, #12]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a618:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a61a:	e002      	b.n	800a622 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f7f8 feed 	bl	80033fc <HAL_UART_TxCpltCallback>
}
 800a622:	bf00      	nop
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b084      	sub	sp, #16
 800a62e:	af00      	add	r7, sp, #0
 800a630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a636:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f7ff ffaf 	bl	800a59c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a63e:	bf00      	nop
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a652:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d11e      	bne.n	800a6a0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a676:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	695a      	ldr	r2, [r3, #20]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f022 0201 	bic.w	r2, r2, #1
 800a686:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	695a      	ldr	r2, [r3, #20]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a696:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2220      	movs	r2, #32
 800a69c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f7f8 fe71 	bl	8003388 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6a6:	bf00      	nop
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f7ff ff77 	bl	800a5b0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6c2:	bf00      	nop
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b084      	sub	sp, #16
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e6:	2b80      	cmp	r3, #128	; 0x80
 800a6e8:	bf0c      	ite	eq
 800a6ea:	2301      	moveq	r3, #1
 800a6ec:	2300      	movne	r3, #0
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	2b21      	cmp	r3, #33	; 0x21
 800a6fc:	d108      	bne.n	800a710 <UART_DMAError+0x46>
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	2200      	movs	r2, #0
 800a708:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800a70a:	68b8      	ldr	r0, [r7, #8]
 800a70c:	f000 f871 	bl	800a7f2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	695b      	ldr	r3, [r3, #20]
 800a716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a71a:	2b40      	cmp	r3, #64	; 0x40
 800a71c:	bf0c      	ite	eq
 800a71e:	2301      	moveq	r3, #1
 800a720:	2300      	movne	r3, #0
 800a722:	b2db      	uxtb	r3, r3
 800a724:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b22      	cmp	r3, #34	; 0x22
 800a730:	d108      	bne.n	800a744 <UART_DMAError+0x7a>
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	2200      	movs	r2, #0
 800a73c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800a73e:	68b8      	ldr	r0, [r7, #8]
 800a740:	f000 f86d 	bl	800a81e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a748:	f043 0210 	orr.w	r2, r3, #16
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a750:	68b8      	ldr	r0, [r7, #8]
 800a752:	f7ff ff37 	bl	800a5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a756:	bf00      	nop
 800a758:	3710      	adds	r7, #16
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	60f8      	str	r0, [r7, #12]
 800a766:	60b9      	str	r1, [r7, #8]
 800a768:	603b      	str	r3, [r7, #0]
 800a76a:	4613      	mov	r3, r2
 800a76c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a76e:	e02c      	b.n	800a7ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a776:	d028      	beq.n	800a7ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a778:	69bb      	ldr	r3, [r7, #24]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d007      	beq.n	800a78e <UART_WaitOnFlagUntilTimeout+0x30>
 800a77e:	f7fa fc57 	bl	8005030 <HAL_GetTick>
 800a782:	4602      	mov	r2, r0
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	1ad3      	subs	r3, r2, r3
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d21d      	bcs.n	800a7ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68da      	ldr	r2, [r3, #12]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a79c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	695a      	ldr	r2, [r3, #20]
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f022 0201 	bic.w	r2, r2, #1
 800a7ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e00f      	b.n	800a7ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	4013      	ands	r3, r2
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	bf0c      	ite	eq
 800a7da:	2301      	moveq	r3, #1
 800a7dc:	2300      	movne	r3, #0
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	79fb      	ldrb	r3, [r7, #7]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d0c3      	beq.n	800a770 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b083      	sub	sp, #12
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68da      	ldr	r2, [r3, #12]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a808:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2220      	movs	r2, #32
 800a80e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800a812:	bf00      	nop
 800a814:	370c      	adds	r7, #12
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr

0800a81e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a81e:	b480      	push	{r7}
 800a820:	b083      	sub	sp, #12
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	68da      	ldr	r2, [r3, #12]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a834:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	695a      	ldr	r2, [r3, #20]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f022 0201 	bic.w	r2, r2, #1
 800a844:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2220      	movs	r2, #32
 800a84a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b084      	sub	sp, #16
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f7ff fea5 	bl	800a5c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a87a:	bf00      	nop
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a882:	b480      	push	{r7}
 800a884:	b085      	sub	sp, #20
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b21      	cmp	r3, #33	; 0x21
 800a894:	d144      	bne.n	800a920 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a89e:	d11a      	bne.n	800a8d6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6a1b      	ldr	r3, [r3, #32]
 800a8a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8b4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d105      	bne.n	800a8ca <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	1c9a      	adds	r2, r3, #2
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	621a      	str	r2, [r3, #32]
 800a8c8:	e00e      	b.n	800a8e8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a1b      	ldr	r3, [r3, #32]
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	621a      	str	r2, [r3, #32]
 800a8d4:	e008      	b.n	800a8e8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a1b      	ldr	r3, [r3, #32]
 800a8da:	1c59      	adds	r1, r3, #1
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	6211      	str	r1, [r2, #32]
 800a8e0:	781a      	ldrb	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10f      	bne.n	800a91c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a90a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68da      	ldr	r2, [r3, #12]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a91a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	e000      	b.n	800a922 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a920:	2302      	movs	r3, #2
  }
}
 800a922:	4618      	mov	r0, r3
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68da      	ldr	r2, [r3, #12]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2220      	movs	r2, #32
 800a94a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7f8 fd54 	bl	80033fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b22      	cmp	r3, #34	; 0x22
 800a970:	d171      	bne.n	800aa56 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a97a:	d123      	bne.n	800a9c4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a980:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	691b      	ldr	r3, [r3, #16]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d10e      	bne.n	800a9a8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	b29b      	uxth	r3, r3
 800a992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a996:	b29a      	uxth	r2, r3
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a0:	1c9a      	adds	r2, r3, #2
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	629a      	str	r2, [r3, #40]	; 0x28
 800a9a6:	e029      	b.n	800a9fc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9bc:	1c5a      	adds	r2, r3, #1
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	629a      	str	r2, [r3, #40]	; 0x28
 800a9c2:	e01b      	b.n	800a9fc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6858      	ldr	r0, [r3, #4]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d6:	1c59      	adds	r1, r3, #1
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	6291      	str	r1, [r2, #40]	; 0x28
 800a9dc:	b2c2      	uxtb	r2, r0
 800a9de:	701a      	strb	r2, [r3, #0]
 800a9e0:	e00c      	b.n	800a9fc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ee:	1c58      	adds	r0, r3, #1
 800a9f0:	6879      	ldr	r1, [r7, #4]
 800a9f2:	6288      	str	r0, [r1, #40]	; 0x28
 800a9f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a9f8:	b2d2      	uxtb	r2, r2
 800a9fa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa00:	b29b      	uxth	r3, r3
 800aa02:	3b01      	subs	r3, #1
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d120      	bne.n	800aa52 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f022 0220 	bic.w	r2, r2, #32
 800aa1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68da      	ldr	r2, [r3, #12]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aa2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	695a      	ldr	r2, [r3, #20]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f022 0201 	bic.w	r2, r2, #1
 800aa3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7f8 fc9d 	bl	8003388 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e002      	b.n	800aa58 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	e000      	b.n	800aa58 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800aa56:	2302      	movs	r3, #2
  }
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3710      	adds	r7, #16
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	bd80      	pop	{r7, pc}

0800aa60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa64:	b0bd      	sub	sp, #244	; 0xf4
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800aa78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa7c:	68d9      	ldr	r1, [r3, #12]
 800aa7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa82:	681a      	ldr	r2, [r3, #0]
 800aa84:	ea40 0301 	orr.w	r3, r0, r1
 800aa88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aa8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa8e:	689a      	ldr	r2, [r3, #8]
 800aa90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	431a      	orrs	r2, r3
 800aa98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	431a      	orrs	r2, r3
 800aaa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa4:	69db      	ldr	r3, [r3, #28]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800aaac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800aab8:	f021 010c 	bic.w	r1, r1, #12
 800aabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800aac6:	430b      	orrs	r3, r1
 800aac8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aaca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800aad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aada:	6999      	ldr	r1, [r3, #24]
 800aadc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	ea40 0301 	orr.w	r3, r0, r1
 800aae6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaf2:	f040 81a5 	bne.w	800ae40 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aaf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	4bcd      	ldr	r3, [pc, #820]	; (800ae34 <UART_SetConfig+0x3d4>)
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d006      	beq.n	800ab10 <UART_SetConfig+0xb0>
 800ab02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	4bcb      	ldr	r3, [pc, #812]	; (800ae38 <UART_SetConfig+0x3d8>)
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	f040 80cb 	bne.w	800aca6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ab10:	f7fd f9fe 	bl	8007f10 <HAL_RCC_GetPCLK2Freq>
 800ab14:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ab18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab1c:	461c      	mov	r4, r3
 800ab1e:	f04f 0500 	mov.w	r5, #0
 800ab22:	4622      	mov	r2, r4
 800ab24:	462b      	mov	r3, r5
 800ab26:	1891      	adds	r1, r2, r2
 800ab28:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800ab2c:	415b      	adcs	r3, r3
 800ab2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ab32:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800ab36:	1912      	adds	r2, r2, r4
 800ab38:	eb45 0303 	adc.w	r3, r5, r3
 800ab3c:	f04f 0000 	mov.w	r0, #0
 800ab40:	f04f 0100 	mov.w	r1, #0
 800ab44:	00d9      	lsls	r1, r3, #3
 800ab46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ab4a:	00d0      	lsls	r0, r2, #3
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	1911      	adds	r1, r2, r4
 800ab52:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800ab56:	416b      	adcs	r3, r5
 800ab58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ab5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f04f 0300 	mov.w	r3, #0
 800ab68:	1891      	adds	r1, r2, r2
 800ab6a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800ab6e:	415b      	adcs	r3, r3
 800ab70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab74:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800ab78:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800ab7c:	f7f6 f8a4 	bl	8000cc8 <__aeabi_uldivmod>
 800ab80:	4602      	mov	r2, r0
 800ab82:	460b      	mov	r3, r1
 800ab84:	4bad      	ldr	r3, [pc, #692]	; (800ae3c <UART_SetConfig+0x3dc>)
 800ab86:	fba3 2302 	umull	r2, r3, r3, r2
 800ab8a:	095b      	lsrs	r3, r3, #5
 800ab8c:	011e      	lsls	r6, r3, #4
 800ab8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab92:	461c      	mov	r4, r3
 800ab94:	f04f 0500 	mov.w	r5, #0
 800ab98:	4622      	mov	r2, r4
 800ab9a:	462b      	mov	r3, r5
 800ab9c:	1891      	adds	r1, r2, r2
 800ab9e:	67b9      	str	r1, [r7, #120]	; 0x78
 800aba0:	415b      	adcs	r3, r3
 800aba2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800aba4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800aba8:	1912      	adds	r2, r2, r4
 800abaa:	eb45 0303 	adc.w	r3, r5, r3
 800abae:	f04f 0000 	mov.w	r0, #0
 800abb2:	f04f 0100 	mov.w	r1, #0
 800abb6:	00d9      	lsls	r1, r3, #3
 800abb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800abbc:	00d0      	lsls	r0, r2, #3
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	1911      	adds	r1, r2, r4
 800abc4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800abc8:	416b      	adcs	r3, r5
 800abca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800abce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	461a      	mov	r2, r3
 800abd6:	f04f 0300 	mov.w	r3, #0
 800abda:	1891      	adds	r1, r2, r2
 800abdc:	6739      	str	r1, [r7, #112]	; 0x70
 800abde:	415b      	adcs	r3, r3
 800abe0:	677b      	str	r3, [r7, #116]	; 0x74
 800abe2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800abe6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800abea:	f7f6 f86d 	bl	8000cc8 <__aeabi_uldivmod>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4b92      	ldr	r3, [pc, #584]	; (800ae3c <UART_SetConfig+0x3dc>)
 800abf4:	fba3 1302 	umull	r1, r3, r3, r2
 800abf8:	095b      	lsrs	r3, r3, #5
 800abfa:	2164      	movs	r1, #100	; 0x64
 800abfc:	fb01 f303 	mul.w	r3, r1, r3
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	3332      	adds	r3, #50	; 0x32
 800ac06:	4a8d      	ldr	r2, [pc, #564]	; (800ae3c <UART_SetConfig+0x3dc>)
 800ac08:	fba2 2303 	umull	r2, r3, r2, r3
 800ac0c:	095b      	lsrs	r3, r3, #5
 800ac0e:	005b      	lsls	r3, r3, #1
 800ac10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ac14:	441e      	add	r6, r3
 800ac16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f04f 0100 	mov.w	r1, #0
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	1894      	adds	r4, r2, r2
 800ac26:	66bc      	str	r4, [r7, #104]	; 0x68
 800ac28:	415b      	adcs	r3, r3
 800ac2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac2c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800ac30:	1812      	adds	r2, r2, r0
 800ac32:	eb41 0303 	adc.w	r3, r1, r3
 800ac36:	f04f 0400 	mov.w	r4, #0
 800ac3a:	f04f 0500 	mov.w	r5, #0
 800ac3e:	00dd      	lsls	r5, r3, #3
 800ac40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ac44:	00d4      	lsls	r4, r2, #3
 800ac46:	4622      	mov	r2, r4
 800ac48:	462b      	mov	r3, r5
 800ac4a:	1814      	adds	r4, r2, r0
 800ac4c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800ac50:	414b      	adcs	r3, r1
 800ac52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	f04f 0300 	mov.w	r3, #0
 800ac62:	1891      	adds	r1, r2, r2
 800ac64:	6639      	str	r1, [r7, #96]	; 0x60
 800ac66:	415b      	adcs	r3, r3
 800ac68:	667b      	str	r3, [r7, #100]	; 0x64
 800ac6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800ac6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ac72:	f7f6 f829 	bl	8000cc8 <__aeabi_uldivmod>
 800ac76:	4602      	mov	r2, r0
 800ac78:	460b      	mov	r3, r1
 800ac7a:	4b70      	ldr	r3, [pc, #448]	; (800ae3c <UART_SetConfig+0x3dc>)
 800ac7c:	fba3 1302 	umull	r1, r3, r3, r2
 800ac80:	095b      	lsrs	r3, r3, #5
 800ac82:	2164      	movs	r1, #100	; 0x64
 800ac84:	fb01 f303 	mul.w	r3, r1, r3
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	3332      	adds	r3, #50	; 0x32
 800ac8e:	4a6b      	ldr	r2, [pc, #428]	; (800ae3c <UART_SetConfig+0x3dc>)
 800ac90:	fba2 2303 	umull	r2, r3, r2, r3
 800ac94:	095b      	lsrs	r3, r3, #5
 800ac96:	f003 0207 	and.w	r2, r3, #7
 800ac9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4432      	add	r2, r6
 800aca2:	609a      	str	r2, [r3, #8]
 800aca4:	e26d      	b.n	800b182 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aca6:	f7fd f91f 	bl	8007ee8 <HAL_RCC_GetPCLK1Freq>
 800acaa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800acae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800acb2:	461c      	mov	r4, r3
 800acb4:	f04f 0500 	mov.w	r5, #0
 800acb8:	4622      	mov	r2, r4
 800acba:	462b      	mov	r3, r5
 800acbc:	1891      	adds	r1, r2, r2
 800acbe:	65b9      	str	r1, [r7, #88]	; 0x58
 800acc0:	415b      	adcs	r3, r3
 800acc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800acc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800acc8:	1912      	adds	r2, r2, r4
 800acca:	eb45 0303 	adc.w	r3, r5, r3
 800acce:	f04f 0000 	mov.w	r0, #0
 800acd2:	f04f 0100 	mov.w	r1, #0
 800acd6:	00d9      	lsls	r1, r3, #3
 800acd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800acdc:	00d0      	lsls	r0, r2, #3
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	1911      	adds	r1, r2, r4
 800ace4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800ace8:	416b      	adcs	r3, r5
 800acea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800acee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	461a      	mov	r2, r3
 800acf6:	f04f 0300 	mov.w	r3, #0
 800acfa:	1891      	adds	r1, r2, r2
 800acfc:	6539      	str	r1, [r7, #80]	; 0x50
 800acfe:	415b      	adcs	r3, r3
 800ad00:	657b      	str	r3, [r7, #84]	; 0x54
 800ad02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ad06:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800ad0a:	f7f5 ffdd 	bl	8000cc8 <__aeabi_uldivmod>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	460b      	mov	r3, r1
 800ad12:	4b4a      	ldr	r3, [pc, #296]	; (800ae3c <UART_SetConfig+0x3dc>)
 800ad14:	fba3 2302 	umull	r2, r3, r3, r2
 800ad18:	095b      	lsrs	r3, r3, #5
 800ad1a:	011e      	lsls	r6, r3, #4
 800ad1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad20:	461c      	mov	r4, r3
 800ad22:	f04f 0500 	mov.w	r5, #0
 800ad26:	4622      	mov	r2, r4
 800ad28:	462b      	mov	r3, r5
 800ad2a:	1891      	adds	r1, r2, r2
 800ad2c:	64b9      	str	r1, [r7, #72]	; 0x48
 800ad2e:	415b      	adcs	r3, r3
 800ad30:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ad36:	1912      	adds	r2, r2, r4
 800ad38:	eb45 0303 	adc.w	r3, r5, r3
 800ad3c:	f04f 0000 	mov.w	r0, #0
 800ad40:	f04f 0100 	mov.w	r1, #0
 800ad44:	00d9      	lsls	r1, r3, #3
 800ad46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ad4a:	00d0      	lsls	r0, r2, #3
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	1911      	adds	r1, r2, r4
 800ad52:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800ad56:	416b      	adcs	r3, r5
 800ad58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ad5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	461a      	mov	r2, r3
 800ad64:	f04f 0300 	mov.w	r3, #0
 800ad68:	1891      	adds	r1, r2, r2
 800ad6a:	6439      	str	r1, [r7, #64]	; 0x40
 800ad6c:	415b      	adcs	r3, r3
 800ad6e:	647b      	str	r3, [r7, #68]	; 0x44
 800ad70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ad74:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800ad78:	f7f5 ffa6 	bl	8000cc8 <__aeabi_uldivmod>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	460b      	mov	r3, r1
 800ad80:	4b2e      	ldr	r3, [pc, #184]	; (800ae3c <UART_SetConfig+0x3dc>)
 800ad82:	fba3 1302 	umull	r1, r3, r3, r2
 800ad86:	095b      	lsrs	r3, r3, #5
 800ad88:	2164      	movs	r1, #100	; 0x64
 800ad8a:	fb01 f303 	mul.w	r3, r1, r3
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	00db      	lsls	r3, r3, #3
 800ad92:	3332      	adds	r3, #50	; 0x32
 800ad94:	4a29      	ldr	r2, [pc, #164]	; (800ae3c <UART_SetConfig+0x3dc>)
 800ad96:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9a:	095b      	lsrs	r3, r3, #5
 800ad9c:	005b      	lsls	r3, r3, #1
 800ad9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ada2:	441e      	add	r6, r3
 800ada4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ada8:	4618      	mov	r0, r3
 800adaa:	f04f 0100 	mov.w	r1, #0
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	1894      	adds	r4, r2, r2
 800adb4:	63bc      	str	r4, [r7, #56]	; 0x38
 800adb6:	415b      	adcs	r3, r3
 800adb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800adbe:	1812      	adds	r2, r2, r0
 800adc0:	eb41 0303 	adc.w	r3, r1, r3
 800adc4:	f04f 0400 	mov.w	r4, #0
 800adc8:	f04f 0500 	mov.w	r5, #0
 800adcc:	00dd      	lsls	r5, r3, #3
 800adce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800add2:	00d4      	lsls	r4, r2, #3
 800add4:	4622      	mov	r2, r4
 800add6:	462b      	mov	r3, r5
 800add8:	1814      	adds	r4, r2, r0
 800adda:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800adde:	414b      	adcs	r3, r1
 800ade0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ade4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	461a      	mov	r2, r3
 800adec:	f04f 0300 	mov.w	r3, #0
 800adf0:	1891      	adds	r1, r2, r2
 800adf2:	6339      	str	r1, [r7, #48]	; 0x30
 800adf4:	415b      	adcs	r3, r3
 800adf6:	637b      	str	r3, [r7, #52]	; 0x34
 800adf8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800adfc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ae00:	f7f5 ff62 	bl	8000cc8 <__aeabi_uldivmod>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4b0c      	ldr	r3, [pc, #48]	; (800ae3c <UART_SetConfig+0x3dc>)
 800ae0a:	fba3 1302 	umull	r1, r3, r3, r2
 800ae0e:	095b      	lsrs	r3, r3, #5
 800ae10:	2164      	movs	r1, #100	; 0x64
 800ae12:	fb01 f303 	mul.w	r3, r1, r3
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	3332      	adds	r3, #50	; 0x32
 800ae1c:	4a07      	ldr	r2, [pc, #28]	; (800ae3c <UART_SetConfig+0x3dc>)
 800ae1e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae22:	095b      	lsrs	r3, r3, #5
 800ae24:	f003 0207 	and.w	r2, r3, #7
 800ae28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4432      	add	r2, r6
 800ae30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ae32:	e1a6      	b.n	800b182 <UART_SetConfig+0x722>
 800ae34:	40011000 	.word	0x40011000
 800ae38:	40011400 	.word	0x40011400
 800ae3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ae40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	4bd1      	ldr	r3, [pc, #836]	; (800b18c <UART_SetConfig+0x72c>)
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d006      	beq.n	800ae5a <UART_SetConfig+0x3fa>
 800ae4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	4bcf      	ldr	r3, [pc, #828]	; (800b190 <UART_SetConfig+0x730>)
 800ae54:	429a      	cmp	r2, r3
 800ae56:	f040 80ca 	bne.w	800afee <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ae5a:	f7fd f859 	bl	8007f10 <HAL_RCC_GetPCLK2Freq>
 800ae5e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ae62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ae66:	461c      	mov	r4, r3
 800ae68:	f04f 0500 	mov.w	r5, #0
 800ae6c:	4622      	mov	r2, r4
 800ae6e:	462b      	mov	r3, r5
 800ae70:	1891      	adds	r1, r2, r2
 800ae72:	62b9      	str	r1, [r7, #40]	; 0x28
 800ae74:	415b      	adcs	r3, r3
 800ae76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ae7c:	1912      	adds	r2, r2, r4
 800ae7e:	eb45 0303 	adc.w	r3, r5, r3
 800ae82:	f04f 0000 	mov.w	r0, #0
 800ae86:	f04f 0100 	mov.w	r1, #0
 800ae8a:	00d9      	lsls	r1, r3, #3
 800ae8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ae90:	00d0      	lsls	r0, r2, #3
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	eb12 0a04 	adds.w	sl, r2, r4
 800ae9a:	eb43 0b05 	adc.w	fp, r3, r5
 800ae9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea2:	685b      	ldr	r3, [r3, #4]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f04f 0100 	mov.w	r1, #0
 800aeaa:	f04f 0200 	mov.w	r2, #0
 800aeae:	f04f 0300 	mov.w	r3, #0
 800aeb2:	008b      	lsls	r3, r1, #2
 800aeb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800aeb8:	0082      	lsls	r2, r0, #2
 800aeba:	4650      	mov	r0, sl
 800aebc:	4659      	mov	r1, fp
 800aebe:	f7f5 ff03 	bl	8000cc8 <__aeabi_uldivmod>
 800aec2:	4602      	mov	r2, r0
 800aec4:	460b      	mov	r3, r1
 800aec6:	4bb3      	ldr	r3, [pc, #716]	; (800b194 <UART_SetConfig+0x734>)
 800aec8:	fba3 2302 	umull	r2, r3, r3, r2
 800aecc:	095b      	lsrs	r3, r3, #5
 800aece:	011e      	lsls	r6, r3, #4
 800aed0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aed4:	4618      	mov	r0, r3
 800aed6:	f04f 0100 	mov.w	r1, #0
 800aeda:	4602      	mov	r2, r0
 800aedc:	460b      	mov	r3, r1
 800aede:	1894      	adds	r4, r2, r2
 800aee0:	623c      	str	r4, [r7, #32]
 800aee2:	415b      	adcs	r3, r3
 800aee4:	627b      	str	r3, [r7, #36]	; 0x24
 800aee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aeea:	1812      	adds	r2, r2, r0
 800aeec:	eb41 0303 	adc.w	r3, r1, r3
 800aef0:	f04f 0400 	mov.w	r4, #0
 800aef4:	f04f 0500 	mov.w	r5, #0
 800aef8:	00dd      	lsls	r5, r3, #3
 800aefa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800aefe:	00d4      	lsls	r4, r2, #3
 800af00:	4622      	mov	r2, r4
 800af02:	462b      	mov	r3, r5
 800af04:	1814      	adds	r4, r2, r0
 800af06:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800af0a:	414b      	adcs	r3, r1
 800af0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800af10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	4618      	mov	r0, r3
 800af18:	f04f 0100 	mov.w	r1, #0
 800af1c:	f04f 0200 	mov.w	r2, #0
 800af20:	f04f 0300 	mov.w	r3, #0
 800af24:	008b      	lsls	r3, r1, #2
 800af26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800af2a:	0082      	lsls	r2, r0, #2
 800af2c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800af30:	f7f5 feca 	bl	8000cc8 <__aeabi_uldivmod>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	4b96      	ldr	r3, [pc, #600]	; (800b194 <UART_SetConfig+0x734>)
 800af3a:	fba3 1302 	umull	r1, r3, r3, r2
 800af3e:	095b      	lsrs	r3, r3, #5
 800af40:	2164      	movs	r1, #100	; 0x64
 800af42:	fb01 f303 	mul.w	r3, r1, r3
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	3332      	adds	r3, #50	; 0x32
 800af4c:	4a91      	ldr	r2, [pc, #580]	; (800b194 <UART_SetConfig+0x734>)
 800af4e:	fba2 2303 	umull	r2, r3, r2, r3
 800af52:	095b      	lsrs	r3, r3, #5
 800af54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af58:	441e      	add	r6, r3
 800af5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800af5e:	4618      	mov	r0, r3
 800af60:	f04f 0100 	mov.w	r1, #0
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	1894      	adds	r4, r2, r2
 800af6a:	61bc      	str	r4, [r7, #24]
 800af6c:	415b      	adcs	r3, r3
 800af6e:	61fb      	str	r3, [r7, #28]
 800af70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800af74:	1812      	adds	r2, r2, r0
 800af76:	eb41 0303 	adc.w	r3, r1, r3
 800af7a:	f04f 0400 	mov.w	r4, #0
 800af7e:	f04f 0500 	mov.w	r5, #0
 800af82:	00dd      	lsls	r5, r3, #3
 800af84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800af88:	00d4      	lsls	r4, r2, #3
 800af8a:	4622      	mov	r2, r4
 800af8c:	462b      	mov	r3, r5
 800af8e:	1814      	adds	r4, r2, r0
 800af90:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800af94:	414b      	adcs	r3, r1
 800af96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800af9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f04f 0100 	mov.w	r1, #0
 800afa6:	f04f 0200 	mov.w	r2, #0
 800afaa:	f04f 0300 	mov.w	r3, #0
 800afae:	008b      	lsls	r3, r1, #2
 800afb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800afb4:	0082      	lsls	r2, r0, #2
 800afb6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800afba:	f7f5 fe85 	bl	8000cc8 <__aeabi_uldivmod>
 800afbe:	4602      	mov	r2, r0
 800afc0:	460b      	mov	r3, r1
 800afc2:	4b74      	ldr	r3, [pc, #464]	; (800b194 <UART_SetConfig+0x734>)
 800afc4:	fba3 1302 	umull	r1, r3, r3, r2
 800afc8:	095b      	lsrs	r3, r3, #5
 800afca:	2164      	movs	r1, #100	; 0x64
 800afcc:	fb01 f303 	mul.w	r3, r1, r3
 800afd0:	1ad3      	subs	r3, r2, r3
 800afd2:	011b      	lsls	r3, r3, #4
 800afd4:	3332      	adds	r3, #50	; 0x32
 800afd6:	4a6f      	ldr	r2, [pc, #444]	; (800b194 <UART_SetConfig+0x734>)
 800afd8:	fba2 2303 	umull	r2, r3, r2, r3
 800afdc:	095b      	lsrs	r3, r3, #5
 800afde:	f003 020f 	and.w	r2, r3, #15
 800afe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4432      	add	r2, r6
 800afea:	609a      	str	r2, [r3, #8]
 800afec:	e0c9      	b.n	800b182 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800afee:	f7fc ff7b 	bl	8007ee8 <HAL_RCC_GetPCLK1Freq>
 800aff2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aff6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800affa:	461c      	mov	r4, r3
 800affc:	f04f 0500 	mov.w	r5, #0
 800b000:	4622      	mov	r2, r4
 800b002:	462b      	mov	r3, r5
 800b004:	1891      	adds	r1, r2, r2
 800b006:	6139      	str	r1, [r7, #16]
 800b008:	415b      	adcs	r3, r3
 800b00a:	617b      	str	r3, [r7, #20]
 800b00c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b010:	1912      	adds	r2, r2, r4
 800b012:	eb45 0303 	adc.w	r3, r5, r3
 800b016:	f04f 0000 	mov.w	r0, #0
 800b01a:	f04f 0100 	mov.w	r1, #0
 800b01e:	00d9      	lsls	r1, r3, #3
 800b020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b024:	00d0      	lsls	r0, r2, #3
 800b026:	4602      	mov	r2, r0
 800b028:	460b      	mov	r3, r1
 800b02a:	eb12 0804 	adds.w	r8, r2, r4
 800b02e:	eb43 0905 	adc.w	r9, r3, r5
 800b032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	4618      	mov	r0, r3
 800b03a:	f04f 0100 	mov.w	r1, #0
 800b03e:	f04f 0200 	mov.w	r2, #0
 800b042:	f04f 0300 	mov.w	r3, #0
 800b046:	008b      	lsls	r3, r1, #2
 800b048:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b04c:	0082      	lsls	r2, r0, #2
 800b04e:	4640      	mov	r0, r8
 800b050:	4649      	mov	r1, r9
 800b052:	f7f5 fe39 	bl	8000cc8 <__aeabi_uldivmod>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4b4e      	ldr	r3, [pc, #312]	; (800b194 <UART_SetConfig+0x734>)
 800b05c:	fba3 2302 	umull	r2, r3, r3, r2
 800b060:	095b      	lsrs	r3, r3, #5
 800b062:	011e      	lsls	r6, r3, #4
 800b064:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b068:	4618      	mov	r0, r3
 800b06a:	f04f 0100 	mov.w	r1, #0
 800b06e:	4602      	mov	r2, r0
 800b070:	460b      	mov	r3, r1
 800b072:	1894      	adds	r4, r2, r2
 800b074:	60bc      	str	r4, [r7, #8]
 800b076:	415b      	adcs	r3, r3
 800b078:	60fb      	str	r3, [r7, #12]
 800b07a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b07e:	1812      	adds	r2, r2, r0
 800b080:	eb41 0303 	adc.w	r3, r1, r3
 800b084:	f04f 0400 	mov.w	r4, #0
 800b088:	f04f 0500 	mov.w	r5, #0
 800b08c:	00dd      	lsls	r5, r3, #3
 800b08e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b092:	00d4      	lsls	r4, r2, #3
 800b094:	4622      	mov	r2, r4
 800b096:	462b      	mov	r3, r5
 800b098:	1814      	adds	r4, r2, r0
 800b09a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800b09e:	414b      	adcs	r3, r1
 800b0a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f04f 0100 	mov.w	r1, #0
 800b0b0:	f04f 0200 	mov.w	r2, #0
 800b0b4:	f04f 0300 	mov.w	r3, #0
 800b0b8:	008b      	lsls	r3, r1, #2
 800b0ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b0be:	0082      	lsls	r2, r0, #2
 800b0c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b0c4:	f7f5 fe00 	bl	8000cc8 <__aeabi_uldivmod>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	4b31      	ldr	r3, [pc, #196]	; (800b194 <UART_SetConfig+0x734>)
 800b0ce:	fba3 1302 	umull	r1, r3, r3, r2
 800b0d2:	095b      	lsrs	r3, r3, #5
 800b0d4:	2164      	movs	r1, #100	; 0x64
 800b0d6:	fb01 f303 	mul.w	r3, r1, r3
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	011b      	lsls	r3, r3, #4
 800b0de:	3332      	adds	r3, #50	; 0x32
 800b0e0:	4a2c      	ldr	r2, [pc, #176]	; (800b194 <UART_SetConfig+0x734>)
 800b0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e6:	095b      	lsrs	r3, r3, #5
 800b0e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0ec:	441e      	add	r6, r3
 800b0ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f04f 0100 	mov.w	r1, #0
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	1894      	adds	r4, r2, r2
 800b0fe:	603c      	str	r4, [r7, #0]
 800b100:	415b      	adcs	r3, r3
 800b102:	607b      	str	r3, [r7, #4]
 800b104:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b108:	1812      	adds	r2, r2, r0
 800b10a:	eb41 0303 	adc.w	r3, r1, r3
 800b10e:	f04f 0400 	mov.w	r4, #0
 800b112:	f04f 0500 	mov.w	r5, #0
 800b116:	00dd      	lsls	r5, r3, #3
 800b118:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b11c:	00d4      	lsls	r4, r2, #3
 800b11e:	4622      	mov	r2, r4
 800b120:	462b      	mov	r3, r5
 800b122:	1814      	adds	r4, r2, r0
 800b124:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800b128:	414b      	adcs	r3, r1
 800b12a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b12e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	4618      	mov	r0, r3
 800b136:	f04f 0100 	mov.w	r1, #0
 800b13a:	f04f 0200 	mov.w	r2, #0
 800b13e:	f04f 0300 	mov.w	r3, #0
 800b142:	008b      	lsls	r3, r1, #2
 800b144:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b148:	0082      	lsls	r2, r0, #2
 800b14a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800b14e:	f7f5 fdbb 	bl	8000cc8 <__aeabi_uldivmod>
 800b152:	4602      	mov	r2, r0
 800b154:	460b      	mov	r3, r1
 800b156:	4b0f      	ldr	r3, [pc, #60]	; (800b194 <UART_SetConfig+0x734>)
 800b158:	fba3 1302 	umull	r1, r3, r3, r2
 800b15c:	095b      	lsrs	r3, r3, #5
 800b15e:	2164      	movs	r1, #100	; 0x64
 800b160:	fb01 f303 	mul.w	r3, r1, r3
 800b164:	1ad3      	subs	r3, r2, r3
 800b166:	011b      	lsls	r3, r3, #4
 800b168:	3332      	adds	r3, #50	; 0x32
 800b16a:	4a0a      	ldr	r2, [pc, #40]	; (800b194 <UART_SetConfig+0x734>)
 800b16c:	fba2 2303 	umull	r2, r3, r2, r3
 800b170:	095b      	lsrs	r3, r3, #5
 800b172:	f003 020f 	and.w	r2, r3, #15
 800b176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4432      	add	r2, r6
 800b17e:	609a      	str	r2, [r3, #8]
}
 800b180:	e7ff      	b.n	800b182 <UART_SetConfig+0x722>
 800b182:	bf00      	nop
 800b184:	37f4      	adds	r7, #244	; 0xf4
 800b186:	46bd      	mov	sp, r7
 800b188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18c:	40011000 	.word	0x40011000
 800b190:	40011400 	.word	0x40011400
 800b194:	51eb851f 	.word	0x51eb851f

0800b198 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b19c:	4904      	ldr	r1, [pc, #16]	; (800b1b0 <MX_FATFS_Init+0x18>)
 800b19e:	4805      	ldr	r0, [pc, #20]	; (800b1b4 <MX_FATFS_Init+0x1c>)
 800b1a0:	f003 fa92 	bl	800e6c8 <FATFS_LinkDriver>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	4b03      	ldr	r3, [pc, #12]	; (800b1b8 <MX_FATFS_Init+0x20>)
 800b1aa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b1ac:	bf00      	nop
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	200015c8 	.word	0x200015c8
 800b1b4:	20000010 	.word	0x20000010
 800b1b8:	200015cc 	.word	0x200015cc

0800b1bc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b1c0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800b1d6:	79fb      	ldrb	r3, [r7, #7]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 f9dd 	bl	800b598 <USER_SPI_initialize>
 800b1de:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3708      	adds	r7, #8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800b1f2:	79fb      	ldrb	r3, [r7, #7]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fab9 	bl	800b76c <USER_SPI_status>
 800b1fa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60b9      	str	r1, [r7, #8]
 800b20c:	607a      	str	r2, [r7, #4]
 800b20e:	603b      	str	r3, [r7, #0]
 800b210:	4603      	mov	r3, r0
 800b212:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800b214:	7bf8      	ldrb	r0, [r7, #15]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	68b9      	ldr	r1, [r7, #8]
 800b21c:	f000 fabc 	bl	800b798 <USER_SPI_read>
 800b220:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b084      	sub	sp, #16
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
 800b234:	603b      	str	r3, [r7, #0]
 800b236:	4603      	mov	r3, r0
 800b238:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800b23a:	7bf8      	ldrb	r0, [r7, #15]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	68b9      	ldr	r1, [r7, #8]
 800b242:	f000 fb0f 	bl	800b864 <USER_SPI_write>
 800b246:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	603a      	str	r2, [r7, #0]
 800b25a:	71fb      	strb	r3, [r7, #7]
 800b25c:	460b      	mov	r3, r1
 800b25e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800b260:	79b9      	ldrb	r1, [r7, #6]
 800b262:	79fb      	ldrb	r3, [r7, #7]
 800b264:	683a      	ldr	r2, [r7, #0]
 800b266:	4618      	mov	r0, r3
 800b268:	f000 fb78 	bl	800b95c <USER_SPI_ioctl>
 800b26c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3708      	adds	r7, #8
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
	...

0800b278 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800b280:	f7f9 fed6 	bl	8005030 <HAL_GetTick>
 800b284:	4603      	mov	r3, r0
 800b286:	4a04      	ldr	r2, [pc, #16]	; (800b298 <SPI_Timer_On+0x20>)
 800b288:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800b28a:	4a04      	ldr	r2, [pc, #16]	; (800b29c <SPI_Timer_On+0x24>)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6013      	str	r3, [r2, #0]
}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	20001a30 	.word	0x20001a30
 800b29c:	20001a34 	.word	0x20001a34

0800b2a0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800b2a4:	f7f9 fec4 	bl	8005030 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	4b06      	ldr	r3, [pc, #24]	; (800b2c4 <SPI_Timer_Status+0x24>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	1ad2      	subs	r2, r2, r3
 800b2b0:	4b05      	ldr	r3, [pc, #20]	; (800b2c8 <SPI_Timer_Status+0x28>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	bf34      	ite	cc
 800b2b8:	2301      	movcc	r3, #1
 800b2ba:	2300      	movcs	r3, #0
 800b2bc:	b2db      	uxtb	r3, r3
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20001a30 	.word	0x20001a30
 800b2c8:	20001a34 	.word	0x20001a34

0800b2cc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b086      	sub	sp, #24
 800b2d0:	af02      	add	r7, sp, #8
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800b2d6:	f107 020f 	add.w	r2, r7, #15
 800b2da:	1df9      	adds	r1, r7, #7
 800b2dc:	2332      	movs	r3, #50	; 0x32
 800b2de:	9300      	str	r3, [sp, #0]
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	4804      	ldr	r0, [pc, #16]	; (800b2f4 <xchg_spi+0x28>)
 800b2e4:	f7fd fc85 	bl	8008bf2 <HAL_SPI_TransmitReceive>
    return rxDat;
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	200012cc 	.word	0x200012cc

0800b2f8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800b2f8:	b590      	push	{r4, r7, lr}
 800b2fa:	b085      	sub	sp, #20
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800b302:	2300      	movs	r3, #0
 800b304:	60fb      	str	r3, [r7, #12]
 800b306:	e00a      	b.n	800b31e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	18d4      	adds	r4, r2, r3
 800b30e:	20ff      	movs	r0, #255	; 0xff
 800b310:	f7ff ffdc 	bl	800b2cc <xchg_spi>
 800b314:	4603      	mov	r3, r0
 800b316:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3301      	adds	r3, #1
 800b31c:	60fb      	str	r3, [r7, #12]
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	429a      	cmp	r2, r3
 800b324:	d3f0      	bcc.n	800b308 <rcvr_spi_multi+0x10>
	}
}
 800b326:	bf00      	nop
 800b328:	bf00      	nop
 800b32a:	3714      	adds	r7, #20
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd90      	pop	{r4, r7, pc}

0800b330 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	e009      	b.n	800b354 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	4618      	mov	r0, r3
 800b34a:	f7ff ffbf 	bl	800b2cc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3301      	adds	r3, #1
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d3f1      	bcc.n	800b340 <xmit_spi_multi+0x10>
	}
}
 800b35c:	bf00      	nop
 800b35e:	bf00      	nop
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b086      	sub	sp, #24
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b36e:	f7f9 fe5f 	bl	8005030 <HAL_GetTick>
 800b372:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b378:	20ff      	movs	r0, #255	; 0xff
 800b37a:	f7ff ffa7 	bl	800b2cc <xchg_spi>
 800b37e:	4603      	mov	r3, r0
 800b380:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	2bff      	cmp	r3, #255	; 0xff
 800b386:	d007      	beq.n	800b398 <wait_ready+0x32>
 800b388:	f7f9 fe52 	bl	8005030 <HAL_GetTick>
 800b38c:	4602      	mov	r2, r0
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	1ad3      	subs	r3, r2, r3
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	429a      	cmp	r2, r3
 800b396:	d8ef      	bhi.n	800b378 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b398:	7bfb      	ldrb	r3, [r7, #15]
 800b39a:	2bff      	cmp	r3, #255	; 0xff
 800b39c:	bf0c      	ite	eq
 800b39e:	2301      	moveq	r3, #1
 800b3a0:	2300      	movne	r3, #0
 800b3a2:	b2db      	uxtb	r3, r3
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b3b6:	4804      	ldr	r0, [pc, #16]	; (800b3c8 <despiselect+0x1c>)
 800b3b8:	f7fb f8ce 	bl	8006558 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b3bc:	20ff      	movs	r0, #255	; 0xff
 800b3be:	f7ff ff85 	bl	800b2cc <xchg_spi>

}
 800b3c2:	bf00      	nop
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	40021400 	.word	0x40021400

0800b3cc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b3d6:	480a      	ldr	r0, [pc, #40]	; (800b400 <spiselect+0x34>)
 800b3d8:	f7fb f8be 	bl	8006558 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b3dc:	20ff      	movs	r0, #255	; 0xff
 800b3de:	f7ff ff75 	bl	800b2cc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b3e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b3e6:	f7ff ffbe 	bl	800b366 <wait_ready>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d001      	beq.n	800b3f4 <spiselect+0x28>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e002      	b.n	800b3fa <spiselect+0x2e>

	despiselect();
 800b3f4:	f7ff ffda 	bl	800b3ac <despiselect>
	return 0;	/* Timeout */
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	40021400 	.word	0x40021400

0800b404 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b40e:	20c8      	movs	r0, #200	; 0xc8
 800b410:	f7ff ff32 	bl	800b278 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b414:	20ff      	movs	r0, #255	; 0xff
 800b416:	f7ff ff59 	bl	800b2cc <xchg_spi>
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	2bff      	cmp	r3, #255	; 0xff
 800b422:	d104      	bne.n	800b42e <rcvr_datablock+0x2a>
 800b424:	f7ff ff3c 	bl	800b2a0 <SPI_Timer_Status>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1f2      	bne.n	800b414 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
 800b430:	2bfe      	cmp	r3, #254	; 0xfe
 800b432:	d001      	beq.n	800b438 <rcvr_datablock+0x34>
 800b434:	2300      	movs	r3, #0
 800b436:	e00a      	b.n	800b44e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff ff5c 	bl	800b2f8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b440:	20ff      	movs	r0, #255	; 0xff
 800b442:	f7ff ff43 	bl	800b2cc <xchg_spi>
 800b446:	20ff      	movs	r0, #255	; 0xff
 800b448:	f7ff ff40 	bl	800b2cc <xchg_spi>

	return 1;						/* Function succeeded */
 800b44c:	2301      	movs	r3, #1
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
 800b45e:	460b      	mov	r3, r1
 800b460:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b462:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b466:	f7ff ff7e 	bl	800b366 <wait_ready>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d101      	bne.n	800b474 <xmit_datablock+0x1e>
 800b470:	2300      	movs	r3, #0
 800b472:	e01e      	b.n	800b4b2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff ff28 	bl	800b2cc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b47c:	78fb      	ldrb	r3, [r7, #3]
 800b47e:	2bfd      	cmp	r3, #253	; 0xfd
 800b480:	d016      	beq.n	800b4b0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b482:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7ff ff52 	bl	800b330 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b48c:	20ff      	movs	r0, #255	; 0xff
 800b48e:	f7ff ff1d 	bl	800b2cc <xchg_spi>
 800b492:	20ff      	movs	r0, #255	; 0xff
 800b494:	f7ff ff1a 	bl	800b2cc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b498:	20ff      	movs	r0, #255	; 0xff
 800b49a:	f7ff ff17 	bl	800b2cc <xchg_spi>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b4a2:	7bfb      	ldrb	r3, [r7, #15]
 800b4a4:	f003 031f 	and.w	r3, r3, #31
 800b4a8:	2b05      	cmp	r3, #5
 800b4aa:	d001      	beq.n	800b4b0 <xmit_datablock+0x5a>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	e000      	b.n	800b4b2 <xmit_datablock+0x5c>
	}
	return 1;
 800b4b0:	2301      	movs	r3, #1
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	6039      	str	r1, [r7, #0]
 800b4c4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b4c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	da0e      	bge.n	800b4ec <send_cmd+0x32>
		cmd &= 0x7F;
 800b4ce:	79fb      	ldrb	r3, [r7, #7]
 800b4d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4d4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	2037      	movs	r0, #55	; 0x37
 800b4da:	f7ff ffee 	bl	800b4ba <send_cmd>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b4e2:	7bbb      	ldrb	r3, [r7, #14]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d901      	bls.n	800b4ec <send_cmd+0x32>
 800b4e8:	7bbb      	ldrb	r3, [r7, #14]
 800b4ea:	e051      	b.n	800b590 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b4ec:	79fb      	ldrb	r3, [r7, #7]
 800b4ee:	2b0c      	cmp	r3, #12
 800b4f0:	d008      	beq.n	800b504 <send_cmd+0x4a>
		despiselect();
 800b4f2:	f7ff ff5b 	bl	800b3ac <despiselect>
		if (!spiselect()) return 0xFF;
 800b4f6:	f7ff ff69 	bl	800b3cc <spiselect>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d101      	bne.n	800b504 <send_cmd+0x4a>
 800b500:	23ff      	movs	r3, #255	; 0xff
 800b502:	e045      	b.n	800b590 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b504:	79fb      	ldrb	r3, [r7, #7]
 800b506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b50a:	b2db      	uxtb	r3, r3
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7ff fedd 	bl	800b2cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	0e1b      	lsrs	r3, r3, #24
 800b516:	b2db      	uxtb	r3, r3
 800b518:	4618      	mov	r0, r3
 800b51a:	f7ff fed7 	bl	800b2cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	0c1b      	lsrs	r3, r3, #16
 800b522:	b2db      	uxtb	r3, r3
 800b524:	4618      	mov	r0, r3
 800b526:	f7ff fed1 	bl	800b2cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	0a1b      	lsrs	r3, r3, #8
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	4618      	mov	r0, r3
 800b532:	f7ff fecb 	bl	800b2cc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff fec6 	bl	800b2cc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b540:	2301      	movs	r3, #1
 800b542:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <send_cmd+0x94>
 800b54a:	2395      	movs	r3, #149	; 0x95
 800b54c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b54e:	79fb      	ldrb	r3, [r7, #7]
 800b550:	2b08      	cmp	r3, #8
 800b552:	d101      	bne.n	800b558 <send_cmd+0x9e>
 800b554:	2387      	movs	r3, #135	; 0x87
 800b556:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7ff feb6 	bl	800b2cc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b560:	79fb      	ldrb	r3, [r7, #7]
 800b562:	2b0c      	cmp	r3, #12
 800b564:	d102      	bne.n	800b56c <send_cmd+0xb2>
 800b566:	20ff      	movs	r0, #255	; 0xff
 800b568:	f7ff feb0 	bl	800b2cc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b56c:	230a      	movs	r3, #10
 800b56e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b570:	20ff      	movs	r0, #255	; 0xff
 800b572:	f7ff feab 	bl	800b2cc <xchg_spi>
 800b576:	4603      	mov	r3, r0
 800b578:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b57a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	da05      	bge.n	800b58e <send_cmd+0xd4>
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	3b01      	subs	r3, #1
 800b586:	73fb      	strb	r3, [r7, #15]
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d1f0      	bne.n	800b570 <send_cmd+0xb6>

	return res;							/* Return received response */
 800b58e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3710      	adds	r7, #16
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b598:	b590      	push	{r4, r7, lr}
 800b59a:	b085      	sub	sp, #20
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b5a2:	79fb      	ldrb	r3, [r7, #7]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <USER_SPI_initialize+0x14>
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e0d4      	b.n	800b756 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b5ac:	4b6c      	ldr	r3, [pc, #432]	; (800b760 <USER_SPI_initialize+0x1c8>)
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	f003 0302 	and.w	r3, r3, #2
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d003      	beq.n	800b5c2 <USER_SPI_initialize+0x2a>
 800b5ba:	4b69      	ldr	r3, [pc, #420]	; (800b760 <USER_SPI_initialize+0x1c8>)
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	e0c9      	b.n	800b756 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800b5c2:	4b68      	ldr	r3, [pc, #416]	; (800b764 <USER_SPI_initialize+0x1cc>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	4b66      	ldr	r3, [pc, #408]	; (800b764 <USER_SPI_initialize+0x1cc>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800b5d0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b5d2:	230a      	movs	r3, #10
 800b5d4:	73fb      	strb	r3, [r7, #15]
 800b5d6:	e005      	b.n	800b5e4 <USER_SPI_initialize+0x4c>
 800b5d8:	20ff      	movs	r0, #255	; 0xff
 800b5da:	f7ff fe77 	bl	800b2cc <xchg_spi>
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	73fb      	strb	r3, [r7, #15]
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1f6      	bne.n	800b5d8 <USER_SPI_initialize+0x40>

	ty = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	f7ff ff62 	bl	800b4ba <send_cmd>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	f040 808b 	bne.w	800b714 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b5fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b602:	f7ff fe39 	bl	800b278 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b606:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b60a:	2008      	movs	r0, #8
 800b60c:	f7ff ff55 	bl	800b4ba <send_cmd>
 800b610:	4603      	mov	r3, r0
 800b612:	2b01      	cmp	r3, #1
 800b614:	d151      	bne.n	800b6ba <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b616:	2300      	movs	r3, #0
 800b618:	73fb      	strb	r3, [r7, #15]
 800b61a:	e00d      	b.n	800b638 <USER_SPI_initialize+0xa0>
 800b61c:	7bfc      	ldrb	r4, [r7, #15]
 800b61e:	20ff      	movs	r0, #255	; 0xff
 800b620:	f7ff fe54 	bl	800b2cc <xchg_spi>
 800b624:	4603      	mov	r3, r0
 800b626:	461a      	mov	r2, r3
 800b628:	f107 0310 	add.w	r3, r7, #16
 800b62c:	4423      	add	r3, r4
 800b62e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	3301      	adds	r3, #1
 800b636:	73fb      	strb	r3, [r7, #15]
 800b638:	7bfb      	ldrb	r3, [r7, #15]
 800b63a:	2b03      	cmp	r3, #3
 800b63c:	d9ee      	bls.n	800b61c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b63e:	7abb      	ldrb	r3, [r7, #10]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d167      	bne.n	800b714 <USER_SPI_initialize+0x17c>
 800b644:	7afb      	ldrb	r3, [r7, #11]
 800b646:	2baa      	cmp	r3, #170	; 0xaa
 800b648:	d164      	bne.n	800b714 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b64a:	bf00      	nop
 800b64c:	f7ff fe28 	bl	800b2a0 <SPI_Timer_Status>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d007      	beq.n	800b666 <USER_SPI_initialize+0xce>
 800b656:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b65a:	20a9      	movs	r0, #169	; 0xa9
 800b65c:	f7ff ff2d 	bl	800b4ba <send_cmd>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1f2      	bne.n	800b64c <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b666:	f7ff fe1b 	bl	800b2a0 <SPI_Timer_Status>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d051      	beq.n	800b714 <USER_SPI_initialize+0x17c>
 800b670:	2100      	movs	r1, #0
 800b672:	203a      	movs	r0, #58	; 0x3a
 800b674:	f7ff ff21 	bl	800b4ba <send_cmd>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d14a      	bne.n	800b714 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b67e:	2300      	movs	r3, #0
 800b680:	73fb      	strb	r3, [r7, #15]
 800b682:	e00d      	b.n	800b6a0 <USER_SPI_initialize+0x108>
 800b684:	7bfc      	ldrb	r4, [r7, #15]
 800b686:	20ff      	movs	r0, #255	; 0xff
 800b688:	f7ff fe20 	bl	800b2cc <xchg_spi>
 800b68c:	4603      	mov	r3, r0
 800b68e:	461a      	mov	r2, r3
 800b690:	f107 0310 	add.w	r3, r7, #16
 800b694:	4423      	add	r3, r4
 800b696:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b69a:	7bfb      	ldrb	r3, [r7, #15]
 800b69c:	3301      	adds	r3, #1
 800b69e:	73fb      	strb	r3, [r7, #15]
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	2b03      	cmp	r3, #3
 800b6a4:	d9ee      	bls.n	800b684 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b6a6:	7a3b      	ldrb	r3, [r7, #8]
 800b6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d001      	beq.n	800b6b4 <USER_SPI_initialize+0x11c>
 800b6b0:	230c      	movs	r3, #12
 800b6b2:	e000      	b.n	800b6b6 <USER_SPI_initialize+0x11e>
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	737b      	strb	r3, [r7, #13]
 800b6b8:	e02c      	b.n	800b714 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	20a9      	movs	r0, #169	; 0xa9
 800b6be:	f7ff fefc 	bl	800b4ba <send_cmd>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d804      	bhi.n	800b6d2 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b6c8:	2302      	movs	r3, #2
 800b6ca:	737b      	strb	r3, [r7, #13]
 800b6cc:	23a9      	movs	r3, #169	; 0xa9
 800b6ce:	73bb      	strb	r3, [r7, #14]
 800b6d0:	e003      	b.n	800b6da <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	737b      	strb	r3, [r7, #13]
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b6da:	bf00      	nop
 800b6dc:	f7ff fde0 	bl	800b2a0 <SPI_Timer_Status>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d007      	beq.n	800b6f6 <USER_SPI_initialize+0x15e>
 800b6e6:	7bbb      	ldrb	r3, [r7, #14]
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff fee5 	bl	800b4ba <send_cmd>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1f2      	bne.n	800b6dc <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b6f6:	f7ff fdd3 	bl	800b2a0 <SPI_Timer_Status>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d007      	beq.n	800b710 <USER_SPI_initialize+0x178>
 800b700:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b704:	2010      	movs	r0, #16
 800b706:	f7ff fed8 	bl	800b4ba <send_cmd>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <USER_SPI_initialize+0x17c>
				ty = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800b714:	4a14      	ldr	r2, [pc, #80]	; (800b768 <USER_SPI_initialize+0x1d0>)
 800b716:	7b7b      	ldrb	r3, [r7, #13]
 800b718:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b71a:	f7ff fe47 	bl	800b3ac <despiselect>

	if (ty) {			/* OK */
 800b71e:	7b7b      	ldrb	r3, [r7, #13]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d012      	beq.n	800b74a <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800b724:	4b0f      	ldr	r3, [pc, #60]	; (800b764 <USER_SPI_initialize+0x1cc>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b72e:	4b0d      	ldr	r3, [pc, #52]	; (800b764 <USER_SPI_initialize+0x1cc>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0220 	orr.w	r2, r2, #32
 800b736:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b738:	4b09      	ldr	r3, [pc, #36]	; (800b760 <USER_SPI_initialize+0x1c8>)
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	f023 0301 	bic.w	r3, r3, #1
 800b742:	b2da      	uxtb	r2, r3
 800b744:	4b06      	ldr	r3, [pc, #24]	; (800b760 <USER_SPI_initialize+0x1c8>)
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	e002      	b.n	800b750 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b74a:	4b05      	ldr	r3, [pc, #20]	; (800b760 <USER_SPI_initialize+0x1c8>)
 800b74c:	2201      	movs	r2, #1
 800b74e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b750:	4b03      	ldr	r3, [pc, #12]	; (800b760 <USER_SPI_initialize+0x1c8>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	b2db      	uxtb	r3, r3
}
 800b756:	4618      	mov	r0, r3
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd90      	pop	{r4, r7, pc}
 800b75e:	bf00      	nop
 800b760:	20000024 	.word	0x20000024
 800b764:	200012cc 	.word	0x200012cc
 800b768:	200004bc 	.word	0x200004bc

0800b76c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	4603      	mov	r3, r0
 800b774:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b776:	79fb      	ldrb	r3, [r7, #7]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <USER_SPI_status+0x14>
 800b77c:	2301      	movs	r3, #1
 800b77e:	e002      	b.n	800b786 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b780:	4b04      	ldr	r3, [pc, #16]	; (800b794 <USER_SPI_status+0x28>)
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	b2db      	uxtb	r3, r3
}
 800b786:	4618      	mov	r0, r3
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	20000024 	.word	0x20000024

0800b798 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60b9      	str	r1, [r7, #8]
 800b7a0:	607a      	str	r2, [r7, #4]
 800b7a2:	603b      	str	r3, [r7, #0]
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d102      	bne.n	800b7b4 <USER_SPI_read+0x1c>
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <USER_SPI_read+0x20>
 800b7b4:	2304      	movs	r3, #4
 800b7b6:	e04d      	b.n	800b854 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b7b8:	4b28      	ldr	r3, [pc, #160]	; (800b85c <USER_SPI_read+0xc4>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	f003 0301 	and.w	r3, r3, #1
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <USER_SPI_read+0x32>
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	e044      	b.n	800b854 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800b7ca:	4b25      	ldr	r3, [pc, #148]	; (800b860 <USER_SPI_read+0xc8>)
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	f003 0308 	and.w	r3, r3, #8
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d102      	bne.n	800b7dc <USER_SPI_read+0x44>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	025b      	lsls	r3, r3, #9
 800b7da:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d111      	bne.n	800b806 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	2011      	movs	r0, #17
 800b7e6:	f7ff fe68 	bl	800b4ba <send_cmd>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d129      	bne.n	800b844 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800b7f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b7f4:	68b8      	ldr	r0, [r7, #8]
 800b7f6:	f7ff fe05 	bl	800b404 <rcvr_datablock>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d021      	beq.n	800b844 <USER_SPI_read+0xac>
			count = 0;
 800b800:	2300      	movs	r3, #0
 800b802:	603b      	str	r3, [r7, #0]
 800b804:	e01e      	b.n	800b844 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	2012      	movs	r0, #18
 800b80a:	f7ff fe56 	bl	800b4ba <send_cmd>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d117      	bne.n	800b844 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800b814:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b818:	68b8      	ldr	r0, [r7, #8]
 800b81a:	f7ff fdf3 	bl	800b404 <rcvr_datablock>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00a      	beq.n	800b83a <USER_SPI_read+0xa2>
				buff += 512;
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b82a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	3b01      	subs	r3, #1
 800b830:	603b      	str	r3, [r7, #0]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d1ed      	bne.n	800b814 <USER_SPI_read+0x7c>
 800b838:	e000      	b.n	800b83c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800b83a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800b83c:	2100      	movs	r1, #0
 800b83e:	200c      	movs	r0, #12
 800b840:	f7ff fe3b 	bl	800b4ba <send_cmd>
		}
	}
	despiselect();
 800b844:	f7ff fdb2 	bl	800b3ac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	bf14      	ite	ne
 800b84e:	2301      	movne	r3, #1
 800b850:	2300      	moveq	r3, #0
 800b852:	b2db      	uxtb	r3, r3
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	20000024 	.word	0x20000024
 800b860:	200004bc 	.word	0x200004bc

0800b864 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	4603      	mov	r3, r0
 800b872:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d102      	bne.n	800b880 <USER_SPI_write+0x1c>
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <USER_SPI_write+0x20>
 800b880:	2304      	movs	r3, #4
 800b882:	e063      	b.n	800b94c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b884:	4b33      	ldr	r3, [pc, #204]	; (800b954 <USER_SPI_write+0xf0>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <USER_SPI_write+0x32>
 800b892:	2303      	movs	r3, #3
 800b894:	e05a      	b.n	800b94c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b896:	4b2f      	ldr	r3, [pc, #188]	; (800b954 <USER_SPI_write+0xf0>)
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	b2db      	uxtb	r3, r3
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <USER_SPI_write+0x44>
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	e051      	b.n	800b94c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b8a8:	4b2b      	ldr	r3, [pc, #172]	; (800b958 <USER_SPI_write+0xf4>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	f003 0308 	and.w	r3, r3, #8
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d102      	bne.n	800b8ba <USER_SPI_write+0x56>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	025b      	lsls	r3, r3, #9
 800b8b8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d110      	bne.n	800b8e2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b8c0:	6879      	ldr	r1, [r7, #4]
 800b8c2:	2018      	movs	r0, #24
 800b8c4:	f7ff fdf9 	bl	800b4ba <send_cmd>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d136      	bne.n	800b93c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b8ce:	21fe      	movs	r1, #254	; 0xfe
 800b8d0:	68b8      	ldr	r0, [r7, #8]
 800b8d2:	f7ff fdc0 	bl	800b456 <xmit_datablock>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d02f      	beq.n	800b93c <USER_SPI_write+0xd8>
			count = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	603b      	str	r3, [r7, #0]
 800b8e0:	e02c      	b.n	800b93c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b8e2:	4b1d      	ldr	r3, [pc, #116]	; (800b958 <USER_SPI_write+0xf4>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	f003 0306 	and.w	r3, r3, #6
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d003      	beq.n	800b8f6 <USER_SPI_write+0x92>
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	2097      	movs	r0, #151	; 0x97
 800b8f2:	f7ff fde2 	bl	800b4ba <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b8f6:	6879      	ldr	r1, [r7, #4]
 800b8f8:	2019      	movs	r0, #25
 800b8fa:	f7ff fdde 	bl	800b4ba <send_cmd>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d11b      	bne.n	800b93c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b904:	21fc      	movs	r1, #252	; 0xfc
 800b906:	68b8      	ldr	r0, [r7, #8]
 800b908:	f7ff fda5 	bl	800b456 <xmit_datablock>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <USER_SPI_write+0xc4>
				buff += 512;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b918:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	3b01      	subs	r3, #1
 800b91e:	603b      	str	r3, [r7, #0]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1ee      	bne.n	800b904 <USER_SPI_write+0xa0>
 800b926:	e000      	b.n	800b92a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b928:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b92a:	21fd      	movs	r1, #253	; 0xfd
 800b92c:	2000      	movs	r0, #0
 800b92e:	f7ff fd92 	bl	800b456 <xmit_datablock>
 800b932:	4603      	mov	r3, r0
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <USER_SPI_write+0xd8>
 800b938:	2301      	movs	r3, #1
 800b93a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b93c:	f7ff fd36 	bl	800b3ac <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	bf14      	ite	ne
 800b946:	2301      	movne	r3, #1
 800b948:	2300      	moveq	r3, #0
 800b94a:	b2db      	uxtb	r3, r3
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	20000024 	.word	0x20000024
 800b958:	200004bc 	.word	0x200004bc

0800b95c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b08c      	sub	sp, #48	; 0x30
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	603a      	str	r2, [r7, #0]
 800b966:	71fb      	strb	r3, [r7, #7]
 800b968:	460b      	mov	r3, r1
 800b96a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b96c:	79fb      	ldrb	r3, [r7, #7]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <USER_SPI_ioctl+0x1a>
 800b972:	2304      	movs	r3, #4
 800b974:	e15a      	b.n	800bc2c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b976:	4baf      	ldr	r3, [pc, #700]	; (800bc34 <USER_SPI_ioctl+0x2d8>)
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	f003 0301 	and.w	r3, r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <USER_SPI_ioctl+0x2c>
 800b984:	2303      	movs	r3, #3
 800b986:	e151      	b.n	800bc2c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b988:	2301      	movs	r3, #1
 800b98a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800b98e:	79bb      	ldrb	r3, [r7, #6]
 800b990:	2b04      	cmp	r3, #4
 800b992:	f200 8136 	bhi.w	800bc02 <USER_SPI_ioctl+0x2a6>
 800b996:	a201      	add	r2, pc, #4	; (adr r2, 800b99c <USER_SPI_ioctl+0x40>)
 800b998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99c:	0800b9b1 	.word	0x0800b9b1
 800b9a0:	0800b9c5 	.word	0x0800b9c5
 800b9a4:	0800bc03 	.word	0x0800bc03
 800b9a8:	0800ba71 	.word	0x0800ba71
 800b9ac:	0800bb67 	.word	0x0800bb67
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b9b0:	f7ff fd0c 	bl	800b3cc <spiselect>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 8127 	beq.w	800bc0a <USER_SPI_ioctl+0x2ae>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b9c2:	e122      	b.n	800bc0a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	2009      	movs	r0, #9
 800b9c8:	f7ff fd77 	bl	800b4ba <send_cmd>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	f040 811d 	bne.w	800bc0e <USER_SPI_ioctl+0x2b2>
 800b9d4:	f107 030c 	add.w	r3, r7, #12
 800b9d8:	2110      	movs	r1, #16
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7ff fd12 	bl	800b404 <rcvr_datablock>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f000 8113 	beq.w	800bc0e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b9e8:	7b3b      	ldrb	r3, [r7, #12]
 800b9ea:	099b      	lsrs	r3, r3, #6
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d111      	bne.n	800ba16 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b9f2:	7d7b      	ldrb	r3, [r7, #21]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	7d3b      	ldrb	r3, [r7, #20]
 800b9f8:	021b      	lsls	r3, r3, #8
 800b9fa:	4413      	add	r3, r2
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	7cfb      	ldrb	r3, [r7, #19]
 800ba00:	041b      	lsls	r3, r3, #16
 800ba02:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800ba06:	4413      	add	r3, r2
 800ba08:	3301      	adds	r3, #1
 800ba0a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	029a      	lsls	r2, r3, #10
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	e028      	b.n	800ba68 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ba16:	7c7b      	ldrb	r3, [r7, #17]
 800ba18:	f003 030f 	and.w	r3, r3, #15
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	7dbb      	ldrb	r3, [r7, #22]
 800ba20:	09db      	lsrs	r3, r3, #7
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	4413      	add	r3, r2
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	7d7b      	ldrb	r3, [r7, #21]
 800ba2a:	005b      	lsls	r3, r3, #1
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	f003 0306 	and.w	r3, r3, #6
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	4413      	add	r3, r2
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	3302      	adds	r3, #2
 800ba3a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800ba3e:	7d3b      	ldrb	r3, [r7, #20]
 800ba40:	099b      	lsrs	r3, r3, #6
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	461a      	mov	r2, r3
 800ba46:	7cfb      	ldrb	r3, [r7, #19]
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	441a      	add	r2, r3
 800ba4c:	7cbb      	ldrb	r3, [r7, #18]
 800ba4e:	029b      	lsls	r3, r3, #10
 800ba50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ba54:	4413      	add	r3, r2
 800ba56:	3301      	adds	r3, #1
 800ba58:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800ba5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ba5e:	3b09      	subs	r3, #9
 800ba60:	69fa      	ldr	r2, [r7, #28]
 800ba62:	409a      	lsls	r2, r3
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800ba6e:	e0ce      	b.n	800bc0e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800ba70:	4b71      	ldr	r3, [pc, #452]	; (800bc38 <USER_SPI_ioctl+0x2dc>)
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	f003 0304 	and.w	r3, r3, #4
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d031      	beq.n	800bae0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800ba7c:	2100      	movs	r1, #0
 800ba7e:	208d      	movs	r0, #141	; 0x8d
 800ba80:	f7ff fd1b 	bl	800b4ba <send_cmd>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f040 80c3 	bne.w	800bc12 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800ba8c:	20ff      	movs	r0, #255	; 0xff
 800ba8e:	f7ff fc1d 	bl	800b2cc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800ba92:	f107 030c 	add.w	r3, r7, #12
 800ba96:	2110      	movs	r1, #16
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7ff fcb3 	bl	800b404 <rcvr_datablock>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 80b6 	beq.w	800bc12 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800baa6:	2330      	movs	r3, #48	; 0x30
 800baa8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800baac:	e007      	b.n	800babe <USER_SPI_ioctl+0x162>
 800baae:	20ff      	movs	r0, #255	; 0xff
 800bab0:	f7ff fc0c 	bl	800b2cc <xchg_spi>
 800bab4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bab8:	3b01      	subs	r3, #1
 800baba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800babe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1f3      	bne.n	800baae <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800bac6:	7dbb      	ldrb	r3, [r7, #22]
 800bac8:	091b      	lsrs	r3, r3, #4
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	461a      	mov	r2, r3
 800bace:	2310      	movs	r3, #16
 800bad0:	fa03 f202 	lsl.w	r2, r3, r2
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800bad8:	2300      	movs	r3, #0
 800bada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800bade:	e098      	b.n	800bc12 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800bae0:	2100      	movs	r1, #0
 800bae2:	2009      	movs	r0, #9
 800bae4:	f7ff fce9 	bl	800b4ba <send_cmd>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	f040 8091 	bne.w	800bc12 <USER_SPI_ioctl+0x2b6>
 800baf0:	f107 030c 	add.w	r3, r7, #12
 800baf4:	2110      	movs	r1, #16
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fc84 	bl	800b404 <rcvr_datablock>
 800bafc:	4603      	mov	r3, r0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	f000 8087 	beq.w	800bc12 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800bb04:	4b4c      	ldr	r3, [pc, #304]	; (800bc38 <USER_SPI_ioctl+0x2dc>)
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	f003 0302 	and.w	r3, r3, #2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d012      	beq.n	800bb36 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800bb10:	7dbb      	ldrb	r3, [r7, #22]
 800bb12:	005b      	lsls	r3, r3, #1
 800bb14:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800bb18:	7dfa      	ldrb	r2, [r7, #23]
 800bb1a:	09d2      	lsrs	r2, r2, #7
 800bb1c:	b2d2      	uxtb	r2, r2
 800bb1e:	4413      	add	r3, r2
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	7e7b      	ldrb	r3, [r7, #25]
 800bb24:	099b      	lsrs	r3, r3, #6
 800bb26:	b2db      	uxtb	r3, r3
 800bb28:	3b01      	subs	r3, #1
 800bb2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb2e:	461a      	mov	r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	601a      	str	r2, [r3, #0]
 800bb34:	e013      	b.n	800bb5e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800bb36:	7dbb      	ldrb	r3, [r7, #22]
 800bb38:	109b      	asrs	r3, r3, #2
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	f003 031f 	and.w	r3, r3, #31
 800bb40:	3301      	adds	r3, #1
 800bb42:	7dfa      	ldrb	r2, [r7, #23]
 800bb44:	00d2      	lsls	r2, r2, #3
 800bb46:	f002 0218 	and.w	r2, r2, #24
 800bb4a:	7df9      	ldrb	r1, [r7, #23]
 800bb4c:	0949      	lsrs	r1, r1, #5
 800bb4e:	b2c9      	uxtb	r1, r1
 800bb50:	440a      	add	r2, r1
 800bb52:	3201      	adds	r2, #1
 800bb54:	fb02 f303 	mul.w	r3, r2, r3
 800bb58:	461a      	mov	r2, r3
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800bb64:	e055      	b.n	800bc12 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800bb66:	4b34      	ldr	r3, [pc, #208]	; (800bc38 <USER_SPI_ioctl+0x2dc>)
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	f003 0306 	and.w	r3, r3, #6
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d051      	beq.n	800bc16 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800bb72:	f107 020c 	add.w	r2, r7, #12
 800bb76:	79fb      	ldrb	r3, [r7, #7]
 800bb78:	210b      	movs	r1, #11
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff feee 	bl	800b95c <USER_SPI_ioctl>
 800bb80:	4603      	mov	r3, r0
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d149      	bne.n	800bc1a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800bb86:	7b3b      	ldrb	r3, [r7, #12]
 800bb88:	099b      	lsrs	r3, r3, #6
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d104      	bne.n	800bb9a <USER_SPI_ioctl+0x23e>
 800bb90:	7dbb      	ldrb	r3, [r7, #22]
 800bb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d041      	beq.n	800bc1e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	623b      	str	r3, [r7, #32]
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bba4:	6a3b      	ldr	r3, [r7, #32]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800bbaa:	4b23      	ldr	r3, [pc, #140]	; (800bc38 <USER_SPI_ioctl+0x2dc>)
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	f003 0308 	and.w	r3, r3, #8
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d105      	bne.n	800bbc2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800bbb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb8:	025b      	lsls	r3, r3, #9
 800bbba:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbe:	025b      	lsls	r3, r3, #9
 800bbc0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800bbc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbc4:	2020      	movs	r0, #32
 800bbc6:	f7ff fc78 	bl	800b4ba <send_cmd>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d128      	bne.n	800bc22 <USER_SPI_ioctl+0x2c6>
 800bbd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbd2:	2021      	movs	r0, #33	; 0x21
 800bbd4:	f7ff fc71 	bl	800b4ba <send_cmd>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d121      	bne.n	800bc22 <USER_SPI_ioctl+0x2c6>
 800bbde:	2100      	movs	r1, #0
 800bbe0:	2026      	movs	r0, #38	; 0x26
 800bbe2:	f7ff fc6a 	bl	800b4ba <send_cmd>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d11a      	bne.n	800bc22 <USER_SPI_ioctl+0x2c6>
 800bbec:	f247 5030 	movw	r0, #30000	; 0x7530
 800bbf0:	f7ff fbb9 	bl	800b366 <wait_ready>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d013      	beq.n	800bc22 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800bc00:	e00f      	b.n	800bc22 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800bc02:	2304      	movs	r3, #4
 800bc04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800bc08:	e00c      	b.n	800bc24 <USER_SPI_ioctl+0x2c8>
		break;
 800bc0a:	bf00      	nop
 800bc0c:	e00a      	b.n	800bc24 <USER_SPI_ioctl+0x2c8>
		break;
 800bc0e:	bf00      	nop
 800bc10:	e008      	b.n	800bc24 <USER_SPI_ioctl+0x2c8>
		break;
 800bc12:	bf00      	nop
 800bc14:	e006      	b.n	800bc24 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800bc16:	bf00      	nop
 800bc18:	e004      	b.n	800bc24 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800bc1a:	bf00      	nop
 800bc1c:	e002      	b.n	800bc24 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800bc1e:	bf00      	nop
 800bc20:	e000      	b.n	800bc24 <USER_SPI_ioctl+0x2c8>
		break;
 800bc22:	bf00      	nop
	}

	despiselect();
 800bc24:	f7ff fbc2 	bl	800b3ac <despiselect>

	return res;
 800bc28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3730      	adds	r7, #48	; 0x30
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	20000024 	.word	0x20000024
 800bc38:	200004bc 	.word	0x200004bc

0800bc3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4603      	mov	r3, r0
 800bc44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bc46:	79fb      	ldrb	r3, [r7, #7]
 800bc48:	4a08      	ldr	r2, [pc, #32]	; (800bc6c <disk_status+0x30>)
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4413      	add	r3, r2
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	79fa      	ldrb	r2, [r7, #7]
 800bc54:	4905      	ldr	r1, [pc, #20]	; (800bc6c <disk_status+0x30>)
 800bc56:	440a      	add	r2, r1
 800bc58:	7a12      	ldrb	r2, [r2, #8]
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	4798      	blx	r3
 800bc5e:	4603      	mov	r3, r0
 800bc60:	73fb      	strb	r3, [r7, #15]
  return stat;
 800bc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	200004e8 	.word	0x200004e8

0800bc70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	4603      	mov	r3, r0
 800bc78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bc7e:	79fb      	ldrb	r3, [r7, #7]
 800bc80:	4a0d      	ldr	r2, [pc, #52]	; (800bcb8 <disk_initialize+0x48>)
 800bc82:	5cd3      	ldrb	r3, [r2, r3]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d111      	bne.n	800bcac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bc88:	79fb      	ldrb	r3, [r7, #7]
 800bc8a:	4a0b      	ldr	r2, [pc, #44]	; (800bcb8 <disk_initialize+0x48>)
 800bc8c:	2101      	movs	r1, #1
 800bc8e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bc90:	79fb      	ldrb	r3, [r7, #7]
 800bc92:	4a09      	ldr	r2, [pc, #36]	; (800bcb8 <disk_initialize+0x48>)
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	4413      	add	r3, r2
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	79fa      	ldrb	r2, [r7, #7]
 800bc9e:	4906      	ldr	r1, [pc, #24]	; (800bcb8 <disk_initialize+0x48>)
 800bca0:	440a      	add	r2, r1
 800bca2:	7a12      	ldrb	r2, [r2, #8]
 800bca4:	4610      	mov	r0, r2
 800bca6:	4798      	blx	r3
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	200004e8 	.word	0x200004e8

0800bcbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bcbc:	b590      	push	{r4, r7, lr}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60b9      	str	r1, [r7, #8]
 800bcc4:	607a      	str	r2, [r7, #4]
 800bcc6:	603b      	str	r3, [r7, #0]
 800bcc8:	4603      	mov	r3, r0
 800bcca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bccc:	7bfb      	ldrb	r3, [r7, #15]
 800bcce:	4a0a      	ldr	r2, [pc, #40]	; (800bcf8 <disk_read+0x3c>)
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	689c      	ldr	r4, [r3, #8]
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
 800bcda:	4a07      	ldr	r2, [pc, #28]	; (800bcf8 <disk_read+0x3c>)
 800bcdc:	4413      	add	r3, r2
 800bcde:	7a18      	ldrb	r0, [r3, #8]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	68b9      	ldr	r1, [r7, #8]
 800bce6:	47a0      	blx	r4
 800bce8:	4603      	mov	r3, r0
 800bcea:	75fb      	strb	r3, [r7, #23]
  return res;
 800bcec:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	371c      	adds	r7, #28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd90      	pop	{r4, r7, pc}
 800bcf6:	bf00      	nop
 800bcf8:	200004e8 	.word	0x200004e8

0800bcfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bcfc:	b590      	push	{r4, r7, lr}
 800bcfe:	b087      	sub	sp, #28
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60b9      	str	r1, [r7, #8]
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	603b      	str	r3, [r7, #0]
 800bd08:	4603      	mov	r3, r0
 800bd0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
 800bd0e:	4a0a      	ldr	r2, [pc, #40]	; (800bd38 <disk_write+0x3c>)
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	68dc      	ldr	r4, [r3, #12]
 800bd18:	7bfb      	ldrb	r3, [r7, #15]
 800bd1a:	4a07      	ldr	r2, [pc, #28]	; (800bd38 <disk_write+0x3c>)
 800bd1c:	4413      	add	r3, r2
 800bd1e:	7a18      	ldrb	r0, [r3, #8]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	68b9      	ldr	r1, [r7, #8]
 800bd26:	47a0      	blx	r4
 800bd28:	4603      	mov	r3, r0
 800bd2a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	371c      	adds	r7, #28
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd90      	pop	{r4, r7, pc}
 800bd36:	bf00      	nop
 800bd38:	200004e8 	.word	0x200004e8

0800bd3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	4603      	mov	r3, r0
 800bd44:	603a      	str	r2, [r7, #0]
 800bd46:	71fb      	strb	r3, [r7, #7]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	4a09      	ldr	r2, [pc, #36]	; (800bd74 <disk_ioctl+0x38>)
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	691b      	ldr	r3, [r3, #16]
 800bd58:	79fa      	ldrb	r2, [r7, #7]
 800bd5a:	4906      	ldr	r1, [pc, #24]	; (800bd74 <disk_ioctl+0x38>)
 800bd5c:	440a      	add	r2, r1
 800bd5e:	7a10      	ldrb	r0, [r2, #8]
 800bd60:	79b9      	ldrb	r1, [r7, #6]
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	4798      	blx	r3
 800bd66:	4603      	mov	r3, r0
 800bd68:	73fb      	strb	r3, [r7, #15]
  return res;
 800bd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	200004e8 	.word	0x200004e8

0800bd78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3301      	adds	r3, #1
 800bd84:	781b      	ldrb	r3, [r3, #0]
 800bd86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bd88:	89fb      	ldrh	r3, [r7, #14]
 800bd8a:	021b      	lsls	r3, r3, #8
 800bd8c:	b21a      	sxth	r2, r3
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	b21b      	sxth	r3, r3
 800bd94:	4313      	orrs	r3, r2
 800bd96:	b21b      	sxth	r3, r3
 800bd98:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bd9a:	89fb      	ldrh	r3, [r7, #14]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3714      	adds	r7, #20
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3303      	adds	r3, #3
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	021b      	lsls	r3, r3, #8
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	3202      	adds	r2, #2
 800bdc0:	7812      	ldrb	r2, [r2, #0]
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	021b      	lsls	r3, r3, #8
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	3201      	adds	r2, #1
 800bdce:	7812      	ldrb	r2, [r2, #0]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	021b      	lsls	r3, r3, #8
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	7812      	ldrb	r2, [r2, #0]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	60fb      	str	r3, [r7, #12]
	return rv;
 800bde0:	68fb      	ldr	r3, [r7, #12]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3714      	adds	r7, #20
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b083      	sub	sp, #12
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	1c5a      	adds	r2, r3, #1
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	887a      	ldrh	r2, [r7, #2]
 800be02:	b2d2      	uxtb	r2, r2
 800be04:	701a      	strb	r2, [r3, #0]
 800be06:	887b      	ldrh	r3, [r7, #2]
 800be08:	0a1b      	lsrs	r3, r3, #8
 800be0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	1c5a      	adds	r2, r3, #1
 800be10:	607a      	str	r2, [r7, #4]
 800be12:	887a      	ldrh	r2, [r7, #2]
 800be14:	b2d2      	uxtb	r2, r2
 800be16:	701a      	strb	r2, [r3, #0]
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	607a      	str	r2, [r7, #4]
 800be34:	683a      	ldr	r2, [r7, #0]
 800be36:	b2d2      	uxtb	r2, r2
 800be38:	701a      	strb	r2, [r3, #0]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	0a1b      	lsrs	r3, r3, #8
 800be3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	607a      	str	r2, [r7, #4]
 800be46:	683a      	ldr	r2, [r7, #0]
 800be48:	b2d2      	uxtb	r2, r2
 800be4a:	701a      	strb	r2, [r3, #0]
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	0a1b      	lsrs	r3, r3, #8
 800be50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	1c5a      	adds	r2, r3, #1
 800be56:	607a      	str	r2, [r7, #4]
 800be58:	683a      	ldr	r2, [r7, #0]
 800be5a:	b2d2      	uxtb	r2, r2
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	0a1b      	lsrs	r3, r3, #8
 800be62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	607a      	str	r2, [r7, #4]
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	b2d2      	uxtb	r2, r2
 800be6e:	701a      	strb	r2, [r3, #0]
}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800be7c:	b480      	push	{r7}
 800be7e:	b087      	sub	sp, #28
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00d      	beq.n	800beb2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	1c53      	adds	r3, r2, #1
 800be9a:	613b      	str	r3, [r7, #16]
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	1c59      	adds	r1, r3, #1
 800bea0:	6179      	str	r1, [r7, #20]
 800bea2:	7812      	ldrb	r2, [r2, #0]
 800bea4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	607b      	str	r3, [r7, #4]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1f1      	bne.n	800be96 <mem_cpy+0x1a>
	}
}
 800beb2:	bf00      	nop
 800beb4:	371c      	adds	r7, #28
 800beb6:	46bd      	mov	sp, r7
 800beb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebc:	4770      	bx	lr

0800bebe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bebe:	b480      	push	{r7}
 800bec0:	b087      	sub	sp, #28
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	60f8      	str	r0, [r7, #12]
 800bec6:	60b9      	str	r1, [r7, #8]
 800bec8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	1c5a      	adds	r2, r3, #1
 800bed2:	617a      	str	r2, [r7, #20]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	b2d2      	uxtb	r2, r2
 800bed8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	3b01      	subs	r3, #1
 800bede:	607b      	str	r3, [r7, #4]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1f3      	bne.n	800bece <mem_set+0x10>
}
 800bee6:	bf00      	nop
 800bee8:	bf00      	nop
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bef4:	b480      	push	{r7}
 800bef6:	b089      	sub	sp, #36	; 0x24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	60f8      	str	r0, [r7, #12]
 800befc:	60b9      	str	r1, [r7, #8]
 800befe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	61fb      	str	r3, [r7, #28]
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bf0c:	69fb      	ldr	r3, [r7, #28]
 800bf0e:	1c5a      	adds	r2, r3, #1
 800bf10:	61fa      	str	r2, [r7, #28]
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	4619      	mov	r1, r3
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	1c5a      	adds	r2, r3, #1
 800bf1a:	61ba      	str	r2, [r7, #24]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	1acb      	subs	r3, r1, r3
 800bf20:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	607b      	str	r3, [r7, #4]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <mem_cmp+0x40>
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d0eb      	beq.n	800bf0c <mem_cmp+0x18>

	return r;
 800bf34:	697b      	ldr	r3, [r7, #20]
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3724      	adds	r7, #36	; 0x24
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
 800bf4a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bf4c:	e002      	b.n	800bf54 <chk_chr+0x12>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	3301      	adds	r3, #1
 800bf52:	607b      	str	r3, [r7, #4]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d005      	beq.n	800bf68 <chk_chr+0x26>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	461a      	mov	r2, r3
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d1f2      	bne.n	800bf4e <chk_chr+0xc>
	return *str;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bf82:	2300      	movs	r3, #0
 800bf84:	60bb      	str	r3, [r7, #8]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	60fb      	str	r3, [r7, #12]
 800bf8a:	e029      	b.n	800bfe0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bf8c:	4a27      	ldr	r2, [pc, #156]	; (800c02c <chk_lock+0xb4>)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	011b      	lsls	r3, r3, #4
 800bf92:	4413      	add	r3, r2
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d01d      	beq.n	800bfd6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bf9a:	4a24      	ldr	r2, [pc, #144]	; (800c02c <chk_lock+0xb4>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	011b      	lsls	r3, r3, #4
 800bfa0:	4413      	add	r3, r2
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d116      	bne.n	800bfda <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bfac:	4a1f      	ldr	r2, [pc, #124]	; (800c02c <chk_lock+0xb4>)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	011b      	lsls	r3, r3, #4
 800bfb2:	4413      	add	r3, r2
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d10c      	bne.n	800bfda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bfc0:	4a1a      	ldr	r2, [pc, #104]	; (800c02c <chk_lock+0xb4>)
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	011b      	lsls	r3, r3, #4
 800bfc6:	4413      	add	r3, r2
 800bfc8:	3308      	adds	r3, #8
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d102      	bne.n	800bfda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bfd4:	e007      	b.n	800bfe6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	60fb      	str	r3, [r7, #12]
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d9d2      	bls.n	800bf8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d109      	bne.n	800c000 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d102      	bne.n	800bff8 <chk_lock+0x80>
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d101      	bne.n	800bffc <chk_lock+0x84>
 800bff8:	2300      	movs	r3, #0
 800bffa:	e010      	b.n	800c01e <chk_lock+0xa6>
 800bffc:	2312      	movs	r3, #18
 800bffe:	e00e      	b.n	800c01e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d108      	bne.n	800c018 <chk_lock+0xa0>
 800c006:	4a09      	ldr	r2, [pc, #36]	; (800c02c <chk_lock+0xb4>)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	011b      	lsls	r3, r3, #4
 800c00c:	4413      	add	r3, r2
 800c00e:	330c      	adds	r3, #12
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c016:	d101      	bne.n	800c01c <chk_lock+0xa4>
 800c018:	2310      	movs	r3, #16
 800c01a:	e000      	b.n	800c01e <chk_lock+0xa6>
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3714      	adds	r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	200004c8 	.word	0x200004c8

0800c030 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c036:	2300      	movs	r3, #0
 800c038:	607b      	str	r3, [r7, #4]
 800c03a:	e002      	b.n	800c042 <enq_lock+0x12>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	3301      	adds	r3, #1
 800c040:	607b      	str	r3, [r7, #4]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d806      	bhi.n	800c056 <enq_lock+0x26>
 800c048:	4a09      	ldr	r2, [pc, #36]	; (800c070 <enq_lock+0x40>)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	011b      	lsls	r3, r3, #4
 800c04e:	4413      	add	r3, r2
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1f2      	bne.n	800c03c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2b02      	cmp	r3, #2
 800c05a:	bf14      	ite	ne
 800c05c:	2301      	movne	r3, #1
 800c05e:	2300      	moveq	r3, #0
 800c060:	b2db      	uxtb	r3, r3
}
 800c062:	4618      	mov	r0, r3
 800c064:	370c      	adds	r7, #12
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr
 800c06e:	bf00      	nop
 800c070:	200004c8 	.word	0x200004c8

0800c074 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c07e:	2300      	movs	r3, #0
 800c080:	60fb      	str	r3, [r7, #12]
 800c082:	e01f      	b.n	800c0c4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c084:	4a41      	ldr	r2, [pc, #260]	; (800c18c <inc_lock+0x118>)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	011b      	lsls	r3, r3, #4
 800c08a:	4413      	add	r3, r2
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	429a      	cmp	r2, r3
 800c094:	d113      	bne.n	800c0be <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c096:	4a3d      	ldr	r2, [pc, #244]	; (800c18c <inc_lock+0x118>)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	011b      	lsls	r3, r3, #4
 800c09c:	4413      	add	r3, r2
 800c09e:	3304      	adds	r3, #4
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d109      	bne.n	800c0be <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c0aa:	4a38      	ldr	r2, [pc, #224]	; (800c18c <inc_lock+0x118>)
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	011b      	lsls	r3, r3, #4
 800c0b0:	4413      	add	r3, r2
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d006      	beq.n	800c0cc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d9dc      	bls.n	800c084 <inc_lock+0x10>
 800c0ca:	e000      	b.n	800c0ce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c0cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d132      	bne.n	800c13a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]
 800c0d8:	e002      	b.n	800c0e0 <inc_lock+0x6c>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	60fb      	str	r3, [r7, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2b01      	cmp	r3, #1
 800c0e4:	d806      	bhi.n	800c0f4 <inc_lock+0x80>
 800c0e6:	4a29      	ldr	r2, [pc, #164]	; (800c18c <inc_lock+0x118>)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	011b      	lsls	r3, r3, #4
 800c0ec:	4413      	add	r3, r2
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1f2      	bne.n	800c0da <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d101      	bne.n	800c0fe <inc_lock+0x8a>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e040      	b.n	800c180 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	4922      	ldr	r1, [pc, #136]	; (800c18c <inc_lock+0x118>)
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	011b      	lsls	r3, r3, #4
 800c108:	440b      	add	r3, r1
 800c10a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	491e      	ldr	r1, [pc, #120]	; (800c18c <inc_lock+0x118>)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	011b      	lsls	r3, r3, #4
 800c116:	440b      	add	r3, r1
 800c118:	3304      	adds	r3, #4
 800c11a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	695a      	ldr	r2, [r3, #20]
 800c120:	491a      	ldr	r1, [pc, #104]	; (800c18c <inc_lock+0x118>)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	011b      	lsls	r3, r3, #4
 800c126:	440b      	add	r3, r1
 800c128:	3308      	adds	r3, #8
 800c12a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c12c:	4a17      	ldr	r2, [pc, #92]	; (800c18c <inc_lock+0x118>)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	011b      	lsls	r3, r3, #4
 800c132:	4413      	add	r3, r2
 800c134:	330c      	adds	r3, #12
 800c136:	2200      	movs	r2, #0
 800c138:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d009      	beq.n	800c154 <inc_lock+0xe0>
 800c140:	4a12      	ldr	r2, [pc, #72]	; (800c18c <inc_lock+0x118>)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	011b      	lsls	r3, r3, #4
 800c146:	4413      	add	r3, r2
 800c148:	330c      	adds	r3, #12
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <inc_lock+0xe0>
 800c150:	2300      	movs	r3, #0
 800c152:	e015      	b.n	800c180 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d108      	bne.n	800c16c <inc_lock+0xf8>
 800c15a:	4a0c      	ldr	r2, [pc, #48]	; (800c18c <inc_lock+0x118>)
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	011b      	lsls	r3, r3, #4
 800c160:	4413      	add	r3, r2
 800c162:	330c      	adds	r3, #12
 800c164:	881b      	ldrh	r3, [r3, #0]
 800c166:	3301      	adds	r3, #1
 800c168:	b29a      	uxth	r2, r3
 800c16a:	e001      	b.n	800c170 <inc_lock+0xfc>
 800c16c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c170:	4906      	ldr	r1, [pc, #24]	; (800c18c <inc_lock+0x118>)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	011b      	lsls	r3, r3, #4
 800c176:	440b      	add	r3, r1
 800c178:	330c      	adds	r3, #12
 800c17a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	3301      	adds	r3, #1
}
 800c180:	4618      	mov	r0, r3
 800c182:	3714      	adds	r7, #20
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	200004c8 	.word	0x200004c8

0800c190 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	3b01      	subs	r3, #1
 800c19c:	607b      	str	r3, [r7, #4]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d825      	bhi.n	800c1f0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c1a4:	4a17      	ldr	r2, [pc, #92]	; (800c204 <dec_lock+0x74>)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	011b      	lsls	r3, r3, #4
 800c1aa:	4413      	add	r3, r2
 800c1ac:	330c      	adds	r3, #12
 800c1ae:	881b      	ldrh	r3, [r3, #0]
 800c1b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c1b2:	89fb      	ldrh	r3, [r7, #14]
 800c1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1b8:	d101      	bne.n	800c1be <dec_lock+0x2e>
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c1be:	89fb      	ldrh	r3, [r7, #14]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <dec_lock+0x3a>
 800c1c4:	89fb      	ldrh	r3, [r7, #14]
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c1ca:	4a0e      	ldr	r2, [pc, #56]	; (800c204 <dec_lock+0x74>)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	011b      	lsls	r3, r3, #4
 800c1d0:	4413      	add	r3, r2
 800c1d2:	330c      	adds	r3, #12
 800c1d4:	89fa      	ldrh	r2, [r7, #14]
 800c1d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c1d8:	89fb      	ldrh	r3, [r7, #14]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d105      	bne.n	800c1ea <dec_lock+0x5a>
 800c1de:	4a09      	ldr	r2, [pc, #36]	; (800c204 <dec_lock+0x74>)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	011b      	lsls	r3, r3, #4
 800c1e4:	4413      	add	r3, r2
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	737b      	strb	r3, [r7, #13]
 800c1ee:	e001      	b.n	800c1f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c1f4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr
 800c202:	bf00      	nop
 800c204:	200004c8 	.word	0x200004c8

0800c208 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c210:	2300      	movs	r3, #0
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	e010      	b.n	800c238 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c216:	4a0d      	ldr	r2, [pc, #52]	; (800c24c <clear_lock+0x44>)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	011b      	lsls	r3, r3, #4
 800c21c:	4413      	add	r3, r2
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	429a      	cmp	r2, r3
 800c224:	d105      	bne.n	800c232 <clear_lock+0x2a>
 800c226:	4a09      	ldr	r2, [pc, #36]	; (800c24c <clear_lock+0x44>)
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	011b      	lsls	r3, r3, #4
 800c22c:	4413      	add	r3, r2
 800c22e:	2200      	movs	r2, #0
 800c230:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	3301      	adds	r3, #1
 800c236:	60fb      	str	r3, [r7, #12]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d9eb      	bls.n	800c216 <clear_lock+0xe>
	}
}
 800c23e:	bf00      	nop
 800c240:	bf00      	nop
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	200004c8 	.word	0x200004c8

0800c250 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b086      	sub	sp, #24
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	78db      	ldrb	r3, [r3, #3]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d034      	beq.n	800c2ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c268:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	7858      	ldrb	r0, [r3, #1]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c274:	2301      	movs	r3, #1
 800c276:	697a      	ldr	r2, [r7, #20]
 800c278:	f7ff fd40 	bl	800bcfc <disk_write>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d002      	beq.n	800c288 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c282:	2301      	movs	r3, #1
 800c284:	73fb      	strb	r3, [r7, #15]
 800c286:	e022      	b.n	800c2ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2200      	movs	r2, #0
 800c28c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a1b      	ldr	r3, [r3, #32]
 800c292:	697a      	ldr	r2, [r7, #20]
 800c294:	1ad2      	subs	r2, r2, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d217      	bcs.n	800c2ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	789b      	ldrb	r3, [r3, #2]
 800c2a2:	613b      	str	r3, [r7, #16]
 800c2a4:	e010      	b.n	800c2c8 <sync_window+0x78>
					wsect += fs->fsize;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7858      	ldrb	r0, [r3, #1]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	f7ff fd1d 	bl	800bcfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	613b      	str	r3, [r7, #16]
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d8eb      	bhi.n	800c2a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3718      	adds	r7, #24
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d01b      	beq.n	800c328 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f7ff ffad 	bl	800c250 <sync_window>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d113      	bne.n	800c328 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	7858      	ldrb	r0, [r3, #1]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c30a:	2301      	movs	r3, #1
 800c30c:	683a      	ldr	r2, [r7, #0]
 800c30e:	f7ff fcd5 	bl	800bcbc <disk_read>
 800c312:	4603      	mov	r3, r0
 800c314:	2b00      	cmp	r3, #0
 800c316:	d004      	beq.n	800c322 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c318:	f04f 33ff 	mov.w	r3, #4294967295
 800c31c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c31e:	2301      	movs	r3, #1
 800c320:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c328:	7bfb      	ldrb	r3, [r7, #15]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
	...

0800c334 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f7ff ff87 	bl	800c250 <sync_window>
 800c342:	4603      	mov	r3, r0
 800c344:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c346:	7bfb      	ldrb	r3, [r7, #15]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d158      	bne.n	800c3fe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2b03      	cmp	r3, #3
 800c352:	d148      	bne.n	800c3e6 <sync_fs+0xb2>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	791b      	ldrb	r3, [r3, #4]
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d144      	bne.n	800c3e6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	3330      	adds	r3, #48	; 0x30
 800c360:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c364:	2100      	movs	r1, #0
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff fda9 	bl	800bebe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	3330      	adds	r3, #48	; 0x30
 800c370:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c374:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c378:	4618      	mov	r0, r3
 800c37a:	f7ff fd38 	bl	800bdee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	3330      	adds	r3, #48	; 0x30
 800c382:	4921      	ldr	r1, [pc, #132]	; (800c408 <sync_fs+0xd4>)
 800c384:	4618      	mov	r0, r3
 800c386:	f7ff fd4d 	bl	800be24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	3330      	adds	r3, #48	; 0x30
 800c38e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c392:	491e      	ldr	r1, [pc, #120]	; (800c40c <sync_fs+0xd8>)
 800c394:	4618      	mov	r0, r3
 800c396:	f7ff fd45 	bl	800be24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	3330      	adds	r3, #48	; 0x30
 800c39e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	f7ff fd3b 	bl	800be24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	3330      	adds	r3, #48	; 0x30
 800c3b2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4610      	mov	r0, r2
 800c3be:	f7ff fd31 	bl	800be24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	69db      	ldr	r3, [r3, #28]
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	7858      	ldrb	r0, [r3, #1]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3da:	2301      	movs	r3, #1
 800c3dc:	f7ff fc8e 	bl	800bcfc <disk_write>
			fs->fsi_flag = 0;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	785b      	ldrb	r3, [r3, #1]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff fca4 	bl	800bd3c <disk_ioctl>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d001      	beq.n	800c3fe <sync_fs+0xca>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c400:	4618      	mov	r0, r3
 800c402:	3710      	adds	r7, #16
 800c404:	46bd      	mov	sp, r7
 800c406:	bd80      	pop	{r7, pc}
 800c408:	41615252 	.word	0x41615252
 800c40c:	61417272 	.word	0x61417272

0800c410 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	3b02      	subs	r3, #2
 800c41e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	3b02      	subs	r3, #2
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d301      	bcc.n	800c430 <clust2sect+0x20>
 800c42c:	2300      	movs	r3, #0
 800c42e:	e008      	b.n	800c442 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	895b      	ldrh	r3, [r3, #10]
 800c434:	461a      	mov	r2, r3
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	fb03 f202 	mul.w	r2, r3, r2
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c440:	4413      	add	r3, r2
}
 800c442:	4618      	mov	r0, r3
 800c444:	370c      	adds	r7, #12
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c44e:	b580      	push	{r7, lr}
 800c450:	b086      	sub	sp, #24
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
 800c456:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2b01      	cmp	r3, #1
 800c462:	d904      	bls.n	800c46e <get_fat+0x20>
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d302      	bcc.n	800c474 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c46e:	2301      	movs	r3, #1
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	e08f      	b.n	800c594 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c474:	f04f 33ff 	mov.w	r3, #4294967295
 800c478:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	2b03      	cmp	r3, #3
 800c480:	d062      	beq.n	800c548 <get_fat+0xfa>
 800c482:	2b03      	cmp	r3, #3
 800c484:	dc7c      	bgt.n	800c580 <get_fat+0x132>
 800c486:	2b01      	cmp	r3, #1
 800c488:	d002      	beq.n	800c490 <get_fat+0x42>
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d042      	beq.n	800c514 <get_fat+0xc6>
 800c48e:	e077      	b.n	800c580 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	085b      	lsrs	r3, r3, #1
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	4413      	add	r3, r2
 800c49c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	6a1a      	ldr	r2, [r3, #32]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	0a5b      	lsrs	r3, r3, #9
 800c4a6:	4413      	add	r3, r2
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6938      	ldr	r0, [r7, #16]
 800c4ac:	f7ff ff14 	bl	800c2d8 <move_window>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d167      	bne.n	800c586 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	1c5a      	adds	r2, r3, #1
 800c4ba:	60fa      	str	r2, [r7, #12]
 800c4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c0:	693a      	ldr	r2, [r7, #16]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	6a1a      	ldr	r2, [r3, #32]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	0a5b      	lsrs	r3, r3, #9
 800c4d2:	4413      	add	r3, r2
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	6938      	ldr	r0, [r7, #16]
 800c4d8:	f7ff fefe 	bl	800c2d8 <move_window>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d153      	bne.n	800c58a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4e8:	693a      	ldr	r2, [r7, #16]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c4f0:	021b      	lsls	r3, r3, #8
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	f003 0301 	and.w	r3, r3, #1
 800c500:	2b00      	cmp	r3, #0
 800c502:	d002      	beq.n	800c50a <get_fat+0xbc>
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	091b      	lsrs	r3, r3, #4
 800c508:	e002      	b.n	800c510 <get_fat+0xc2>
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c510:	617b      	str	r3, [r7, #20]
			break;
 800c512:	e03f      	b.n	800c594 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	6a1a      	ldr	r2, [r3, #32]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	0a1b      	lsrs	r3, r3, #8
 800c51c:	4413      	add	r3, r2
 800c51e:	4619      	mov	r1, r3
 800c520:	6938      	ldr	r0, [r7, #16]
 800c522:	f7ff fed9 	bl	800c2d8 <move_window>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d130      	bne.n	800c58e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c53a:	4413      	add	r3, r2
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7ff fc1b 	bl	800bd78 <ld_word>
 800c542:	4603      	mov	r3, r0
 800c544:	617b      	str	r3, [r7, #20]
			break;
 800c546:	e025      	b.n	800c594 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	6a1a      	ldr	r2, [r3, #32]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	09db      	lsrs	r3, r3, #7
 800c550:	4413      	add	r3, r2
 800c552:	4619      	mov	r1, r3
 800c554:	6938      	ldr	r0, [r7, #16]
 800c556:	f7ff febf 	bl	800c2d8 <move_window>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d118      	bne.n	800c592 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c56e:	4413      	add	r3, r2
 800c570:	4618      	mov	r0, r3
 800c572:	f7ff fc19 	bl	800bda8 <ld_dword>
 800c576:	4603      	mov	r3, r0
 800c578:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c57c:	617b      	str	r3, [r7, #20]
			break;
 800c57e:	e009      	b.n	800c594 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c580:	2301      	movs	r3, #1
 800c582:	617b      	str	r3, [r7, #20]
 800c584:	e006      	b.n	800c594 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c586:	bf00      	nop
 800c588:	e004      	b.n	800c594 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c58a:	bf00      	nop
 800c58c:	e002      	b.n	800c594 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c58e:	bf00      	nop
 800c590:	e000      	b.n	800c594 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c592:	bf00      	nop
		}
	}

	return val;
 800c594:	697b      	ldr	r3, [r7, #20]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3718      	adds	r7, #24
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c59e:	b590      	push	{r4, r7, lr}
 800c5a0:	b089      	sub	sp, #36	; 0x24
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	60f8      	str	r0, [r7, #12]
 800c5a6:	60b9      	str	r1, [r7, #8]
 800c5a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	f240 80d2 	bls.w	800c75a <put_fat+0x1bc>
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	f080 80cc 	bcs.w	800c75a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b03      	cmp	r3, #3
 800c5c8:	f000 8096 	beq.w	800c6f8 <put_fat+0x15a>
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	f300 80cd 	bgt.w	800c76c <put_fat+0x1ce>
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d002      	beq.n	800c5dc <put_fat+0x3e>
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d06e      	beq.n	800c6b8 <put_fat+0x11a>
 800c5da:	e0c7      	b.n	800c76c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	61bb      	str	r3, [r7, #24]
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	085b      	lsrs	r3, r3, #1
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	6a1a      	ldr	r2, [r3, #32]
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	0a5b      	lsrs	r3, r3, #9
 800c5f2:	4413      	add	r3, r2
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	68f8      	ldr	r0, [r7, #12]
 800c5f8:	f7ff fe6e 	bl	800c2d8 <move_window>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c600:	7ffb      	ldrb	r3, [r7, #31]
 800c602:	2b00      	cmp	r3, #0
 800c604:	f040 80ab 	bne.w	800c75e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c60e:	69bb      	ldr	r3, [r7, #24]
 800c610:	1c59      	adds	r1, r3, #1
 800c612:	61b9      	str	r1, [r7, #24]
 800c614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c618:	4413      	add	r3, r2
 800c61a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b00      	cmp	r3, #0
 800c624:	d00d      	beq.n	800c642 <put_fat+0xa4>
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	b25b      	sxtb	r3, r3
 800c62c:	f003 030f 	and.w	r3, r3, #15
 800c630:	b25a      	sxtb	r2, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	b2db      	uxtb	r3, r3
 800c636:	011b      	lsls	r3, r3, #4
 800c638:	b25b      	sxtb	r3, r3
 800c63a:	4313      	orrs	r3, r2
 800c63c:	b25b      	sxtb	r3, r3
 800c63e:	b2db      	uxtb	r3, r3
 800c640:	e001      	b.n	800c646 <put_fat+0xa8>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	b2db      	uxtb	r3, r3
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2201      	movs	r2, #1
 800c64e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	6a1a      	ldr	r2, [r3, #32]
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	0a5b      	lsrs	r3, r3, #9
 800c658:	4413      	add	r3, r2
 800c65a:	4619      	mov	r1, r3
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	f7ff fe3b 	bl	800c2d8 <move_window>
 800c662:	4603      	mov	r3, r0
 800c664:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c666:	7ffb      	ldrb	r3, [r7, #31]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d17a      	bne.n	800c762 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c678:	4413      	add	r3, r2
 800c67a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	f003 0301 	and.w	r3, r3, #1
 800c682:	2b00      	cmp	r3, #0
 800c684:	d003      	beq.n	800c68e <put_fat+0xf0>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	091b      	lsrs	r3, r3, #4
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	e00e      	b.n	800c6ac <put_fat+0x10e>
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	b25b      	sxtb	r3, r3
 800c694:	f023 030f 	bic.w	r3, r3, #15
 800c698:	b25a      	sxtb	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	0a1b      	lsrs	r3, r3, #8
 800c69e:	b25b      	sxtb	r3, r3
 800c6a0:	f003 030f 	and.w	r3, r3, #15
 800c6a4:	b25b      	sxtb	r3, r3
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	b25b      	sxtb	r3, r3
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	697a      	ldr	r2, [r7, #20]
 800c6ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	70da      	strb	r2, [r3, #3]
			break;
 800c6b6:	e059      	b.n	800c76c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	6a1a      	ldr	r2, [r3, #32]
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	0a1b      	lsrs	r3, r3, #8
 800c6c0:	4413      	add	r3, r2
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f7ff fe07 	bl	800c2d8 <move_window>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c6ce:	7ffb      	ldrb	r3, [r7, #31]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d148      	bne.n	800c766 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c6e2:	4413      	add	r3, r2
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	b292      	uxth	r2, r2
 800c6e8:	4611      	mov	r1, r2
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7ff fb7f 	bl	800bdee <st_word>
			fs->wflag = 1;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	70da      	strb	r2, [r3, #3]
			break;
 800c6f6:	e039      	b.n	800c76c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6a1a      	ldr	r2, [r3, #32]
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	09db      	lsrs	r3, r3, #7
 800c700:	4413      	add	r3, r2
 800c702:	4619      	mov	r1, r3
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f7ff fde7 	bl	800c2d8 <move_window>
 800c70a:	4603      	mov	r3, r0
 800c70c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c70e:	7ffb      	ldrb	r3, [r7, #31]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d12a      	bne.n	800c76a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c728:	4413      	add	r3, r2
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff fb3c 	bl	800bda8 <ld_dword>
 800c730:	4603      	mov	r3, r0
 800c732:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c736:	4323      	orrs	r3, r4
 800c738:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c748:	4413      	add	r3, r2
 800c74a:	6879      	ldr	r1, [r7, #4]
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7ff fb69 	bl	800be24 <st_dword>
			fs->wflag = 1;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2201      	movs	r2, #1
 800c756:	70da      	strb	r2, [r3, #3]
			break;
 800c758:	e008      	b.n	800c76c <put_fat+0x1ce>
		}
	}
 800c75a:	bf00      	nop
 800c75c:	e006      	b.n	800c76c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c75e:	bf00      	nop
 800c760:	e004      	b.n	800c76c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c762:	bf00      	nop
 800c764:	e002      	b.n	800c76c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c766:	bf00      	nop
 800c768:	e000      	b.n	800c76c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800c76a:	bf00      	nop
	return res;
 800c76c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3724      	adds	r7, #36	; 0x24
 800c772:	46bd      	mov	sp, r7
 800c774:	bd90      	pop	{r4, r7, pc}

0800c776 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b088      	sub	sp, #32
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	60b9      	str	r1, [r7, #8]
 800c780:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d904      	bls.n	800c79c <remove_chain+0x26>
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	68ba      	ldr	r2, [r7, #8]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d301      	bcc.n	800c7a0 <remove_chain+0x2a>
 800c79c:	2302      	movs	r3, #2
 800c79e:	e04b      	b.n	800c838 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00c      	beq.n	800c7c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7aa:	6879      	ldr	r1, [r7, #4]
 800c7ac:	69b8      	ldr	r0, [r7, #24]
 800c7ae:	f7ff fef6 	bl	800c59e <put_fat>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c7b6:	7ffb      	ldrb	r3, [r7, #31]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <remove_chain+0x4a>
 800c7bc:	7ffb      	ldrb	r3, [r7, #31]
 800c7be:	e03b      	b.n	800c838 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c7c0:	68b9      	ldr	r1, [r7, #8]
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f7ff fe43 	bl	800c44e <get_fat>
 800c7c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d031      	beq.n	800c834 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d101      	bne.n	800c7da <remove_chain+0x64>
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	e02e      	b.n	800c838 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e0:	d101      	bne.n	800c7e6 <remove_chain+0x70>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e028      	b.n	800c838 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	68b9      	ldr	r1, [r7, #8]
 800c7ea:	69b8      	ldr	r0, [r7, #24]
 800c7ec:	f7ff fed7 	bl	800c59e <put_fat>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c7f4:	7ffb      	ldrb	r3, [r7, #31]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <remove_chain+0x88>
 800c7fa:	7ffb      	ldrb	r3, [r7, #31]
 800c7fc:	e01c      	b.n	800c838 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	691a      	ldr	r2, [r3, #16]
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	695b      	ldr	r3, [r3, #20]
 800c806:	3b02      	subs	r3, #2
 800c808:	429a      	cmp	r2, r3
 800c80a:	d20b      	bcs.n	800c824 <remove_chain+0xae>
			fs->free_clst++;
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	691b      	ldr	r3, [r3, #16]
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c816:	69bb      	ldr	r3, [r7, #24]
 800c818:	791b      	ldrb	r3, [r3, #4]
 800c81a:	f043 0301 	orr.w	r3, r3, #1
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c828:	69bb      	ldr	r3, [r7, #24]
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d3c6      	bcc.n	800c7c0 <remove_chain+0x4a>
 800c832:	e000      	b.n	800c836 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c834:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3720      	adds	r7, #32
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10d      	bne.n	800c872 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d004      	beq.n	800c86c <create_chain+0x2c>
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	69ba      	ldr	r2, [r7, #24]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d31b      	bcc.n	800c8a4 <create_chain+0x64>
 800c86c:	2301      	movs	r3, #1
 800c86e:	61bb      	str	r3, [r7, #24]
 800c870:	e018      	b.n	800c8a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff fdea 	bl	800c44e <get_fat>
 800c87a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d801      	bhi.n	800c886 <create_chain+0x46>
 800c882:	2301      	movs	r3, #1
 800c884:	e070      	b.n	800c968 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88c:	d101      	bne.n	800c892 <create_chain+0x52>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	e06a      	b.n	800c968 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d201      	bcs.n	800c8a0 <create_chain+0x60>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	e063      	b.n	800c968 <create_chain+0x128>
		scl = clst;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	69fa      	ldr	r2, [r7, #28]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d307      	bcc.n	800c8c8 <create_chain+0x88>
				ncl = 2;
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c8bc:	69fa      	ldr	r2, [r7, #28]
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d901      	bls.n	800c8c8 <create_chain+0x88>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	e04f      	b.n	800c968 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c8c8:	69f9      	ldr	r1, [r7, #28]
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f7ff fdbf 	bl	800c44e <get_fat>
 800c8d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00e      	beq.n	800c8f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	d003      	beq.n	800c8e6 <create_chain+0xa6>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e4:	d101      	bne.n	800c8ea <create_chain+0xaa>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	e03e      	b.n	800c968 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c8ea:	69fa      	ldr	r2, [r7, #28]
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d1da      	bne.n	800c8a8 <create_chain+0x68>
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	e038      	b.n	800c968 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c8f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fc:	69f9      	ldr	r1, [r7, #28]
 800c8fe:	6938      	ldr	r0, [r7, #16]
 800c900:	f7ff fe4d 	bl	800c59e <put_fat>
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d109      	bne.n	800c922 <create_chain+0xe2>
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d006      	beq.n	800c922 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c914:	69fa      	ldr	r2, [r7, #28]
 800c916:	6839      	ldr	r1, [r7, #0]
 800c918:	6938      	ldr	r0, [r7, #16]
 800c91a:	f7ff fe40 	bl	800c59e <put_fat>
 800c91e:	4603      	mov	r3, r0
 800c920:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c922:	7dfb      	ldrb	r3, [r7, #23]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d116      	bne.n	800c956 <create_chain+0x116>
		fs->last_clst = ncl;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	69fa      	ldr	r2, [r7, #28]
 800c92c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	691a      	ldr	r2, [r3, #16]
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	695b      	ldr	r3, [r3, #20]
 800c936:	3b02      	subs	r3, #2
 800c938:	429a      	cmp	r2, r3
 800c93a:	d804      	bhi.n	800c946 <create_chain+0x106>
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	1e5a      	subs	r2, r3, #1
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	791b      	ldrb	r3, [r3, #4]
 800c94a:	f043 0301 	orr.w	r3, r3, #1
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	711a      	strb	r2, [r3, #4]
 800c954:	e007      	b.n	800c966 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c956:	7dfb      	ldrb	r3, [r7, #23]
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d102      	bne.n	800c962 <create_chain+0x122>
 800c95c:	f04f 33ff 	mov.w	r3, #4294967295
 800c960:	e000      	b.n	800c964 <create_chain+0x124>
 800c962:	2301      	movs	r3, #1
 800c964:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c966:	69fb      	ldr	r3, [r7, #28]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3720      	adds	r7, #32
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c970:	b480      	push	{r7}
 800c972:	b087      	sub	sp, #28
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c984:	3304      	adds	r3, #4
 800c986:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	0a5b      	lsrs	r3, r3, #9
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	8952      	ldrh	r2, [r2, #10]
 800c990:	fbb3 f3f2 	udiv	r3, r3, r2
 800c994:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	1d1a      	adds	r2, r3, #4
 800c99a:	613a      	str	r2, [r7, #16]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d101      	bne.n	800c9aa <clmt_clust+0x3a>
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e010      	b.n	800c9cc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c9aa:	697a      	ldr	r2, [r7, #20]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d307      	bcc.n	800c9c2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c9b2:	697a      	ldr	r2, [r7, #20]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	617b      	str	r3, [r7, #20]
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	3304      	adds	r3, #4
 800c9be:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c9c0:	e7e9      	b.n	800c996 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c9c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	681a      	ldr	r2, [r3, #0]
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	4413      	add	r3, r2
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	371c      	adds	r7, #28
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9ee:	d204      	bcs.n	800c9fa <dir_sdi+0x22>
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	f003 031f 	and.w	r3, r3, #31
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <dir_sdi+0x26>
		return FR_INT_ERR;
 800c9fa:	2302      	movs	r3, #2
 800c9fc:	e063      	b.n	800cac6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d106      	bne.n	800ca1e <dir_sdi+0x46>
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d902      	bls.n	800ca1e <dir_sdi+0x46>
		clst = fs->dirbase;
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10c      	bne.n	800ca3e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	095b      	lsrs	r3, r3, #5
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	8912      	ldrh	r2, [r2, #8]
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d301      	bcc.n	800ca34 <dir_sdi+0x5c>
 800ca30:	2302      	movs	r3, #2
 800ca32:	e048      	b.n	800cac6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	61da      	str	r2, [r3, #28]
 800ca3c:	e029      	b.n	800ca92 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	895b      	ldrh	r3, [r3, #10]
 800ca42:	025b      	lsls	r3, r3, #9
 800ca44:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ca46:	e019      	b.n	800ca7c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6979      	ldr	r1, [r7, #20]
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f7ff fcfe 	bl	800c44e <get_fat>
 800ca52:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca5a:	d101      	bne.n	800ca60 <dir_sdi+0x88>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e032      	b.n	800cac6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d904      	bls.n	800ca70 <dir_sdi+0x98>
 800ca66:	693b      	ldr	r3, [r7, #16]
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d301      	bcc.n	800ca74 <dir_sdi+0x9c>
 800ca70:	2302      	movs	r3, #2
 800ca72:	e028      	b.n	800cac6 <dir_sdi+0xee>
			ofs -= csz;
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d2e1      	bcs.n	800ca48 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ca84:	6979      	ldr	r1, [r7, #20]
 800ca86:	6938      	ldr	r0, [r7, #16]
 800ca88:	f7ff fcc2 	bl	800c410 <clust2sect>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	697a      	ldr	r2, [r7, #20]
 800ca96:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	69db      	ldr	r3, [r3, #28]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <dir_sdi+0xcc>
 800caa0:	2302      	movs	r3, #2
 800caa2:	e010      	b.n	800cac6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	69da      	ldr	r2, [r3, #28]
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	0a5b      	lsrs	r3, r3, #9
 800caac:	441a      	add	r2, r3
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cabe:	441a      	add	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3718      	adds	r7, #24
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}

0800cace <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cace:	b580      	push	{r7, lr}
 800cad0:	b086      	sub	sp, #24
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	695b      	ldr	r3, [r3, #20]
 800cae2:	3320      	adds	r3, #32
 800cae4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	69db      	ldr	r3, [r3, #28]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d003      	beq.n	800caf6 <dir_next+0x28>
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800caf4:	d301      	bcc.n	800cafa <dir_next+0x2c>
 800caf6:	2304      	movs	r3, #4
 800caf8:	e0aa      	b.n	800cc50 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f040 8098 	bne.w	800cc36 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	69db      	ldr	r3, [r3, #28]
 800cb0a:	1c5a      	adds	r2, r3, #1
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	699b      	ldr	r3, [r3, #24]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d10b      	bne.n	800cb30 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	095b      	lsrs	r3, r3, #5
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	8912      	ldrh	r2, [r2, #8]
 800cb20:	4293      	cmp	r3, r2
 800cb22:	f0c0 8088 	bcc.w	800cc36 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	61da      	str	r2, [r3, #28]
 800cb2c:	2304      	movs	r3, #4
 800cb2e:	e08f      	b.n	800cc50 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	0a5b      	lsrs	r3, r3, #9
 800cb34:	68fa      	ldr	r2, [r7, #12]
 800cb36:	8952      	ldrh	r2, [r2, #10]
 800cb38:	3a01      	subs	r2, #1
 800cb3a:	4013      	ands	r3, r2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d17a      	bne.n	800cc36 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	4619      	mov	r1, r3
 800cb48:	4610      	mov	r0, r2
 800cb4a:	f7ff fc80 	bl	800c44e <get_fat>
 800cb4e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d801      	bhi.n	800cb5a <dir_next+0x8c>
 800cb56:	2302      	movs	r3, #2
 800cb58:	e07a      	b.n	800cc50 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb60:	d101      	bne.n	800cb66 <dir_next+0x98>
 800cb62:	2301      	movs	r3, #1
 800cb64:	e074      	b.n	800cc50 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	695b      	ldr	r3, [r3, #20]
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d358      	bcc.n	800cc22 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d104      	bne.n	800cb80 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	61da      	str	r2, [r3, #28]
 800cb7c:	2304      	movs	r3, #4
 800cb7e:	e067      	b.n	800cc50 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	699b      	ldr	r3, [r3, #24]
 800cb86:	4619      	mov	r1, r3
 800cb88:	4610      	mov	r0, r2
 800cb8a:	f7ff fe59 	bl	800c840 <create_chain>
 800cb8e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d101      	bne.n	800cb9a <dir_next+0xcc>
 800cb96:	2307      	movs	r3, #7
 800cb98:	e05a      	b.n	800cc50 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	2b01      	cmp	r3, #1
 800cb9e:	d101      	bne.n	800cba4 <dir_next+0xd6>
 800cba0:	2302      	movs	r3, #2
 800cba2:	e055      	b.n	800cc50 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbaa:	d101      	bne.n	800cbb0 <dir_next+0xe2>
 800cbac:	2301      	movs	r3, #1
 800cbae:	e04f      	b.n	800cc50 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cbb0:	68f8      	ldr	r0, [r7, #12]
 800cbb2:	f7ff fb4d 	bl	800c250 <sync_window>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <dir_next+0xf2>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e047      	b.n	800cc50 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	3330      	adds	r3, #48	; 0x30
 800cbc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbc8:	2100      	movs	r1, #0
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7ff f977 	bl	800bebe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	613b      	str	r3, [r7, #16]
 800cbd4:	6979      	ldr	r1, [r7, #20]
 800cbd6:	68f8      	ldr	r0, [r7, #12]
 800cbd8:	f7ff fc1a 	bl	800c410 <clust2sect>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	62da      	str	r2, [r3, #44]	; 0x2c
 800cbe2:	e012      	b.n	800cc0a <dir_next+0x13c>
						fs->wflag = 1;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f7ff fb30 	bl	800c250 <sync_window>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d001      	beq.n	800cbfa <dir_next+0x12c>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e02a      	b.n	800cc50 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	613b      	str	r3, [r7, #16]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc04:	1c5a      	adds	r2, r3, #1
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	62da      	str	r2, [r3, #44]	; 0x2c
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	895b      	ldrh	r3, [r3, #10]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d3e6      	bcc.n	800cbe4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	1ad2      	subs	r2, r2, r3
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	697a      	ldr	r2, [r7, #20]
 800cc26:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cc28:	6979      	ldr	r1, [r7, #20]
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f7ff fbf0 	bl	800c410 <clust2sect>
 800cc30:	4602      	mov	r2, r0
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	68ba      	ldr	r2, [r7, #8]
 800cc3a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc48:	441a      	add	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cc68:	2100      	movs	r1, #0
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7ff feb4 	bl	800c9d8 <dir_sdi>
 800cc70:	4603      	mov	r3, r0
 800cc72:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc74:	7dfb      	ldrb	r3, [r7, #23]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d12b      	bne.n	800ccd2 <dir_alloc+0x7a>
		n = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	69db      	ldr	r3, [r3, #28]
 800cc82:	4619      	mov	r1, r3
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f7ff fb27 	bl	800c2d8 <move_window>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d11d      	bne.n	800ccd0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	2be5      	cmp	r3, #229	; 0xe5
 800cc9c:	d004      	beq.n	800cca8 <dir_alloc+0x50>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a1b      	ldr	r3, [r3, #32]
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d107      	bne.n	800ccb8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	613b      	str	r3, [r7, #16]
 800ccae:	693a      	ldr	r2, [r7, #16]
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d102      	bne.n	800ccbc <dir_alloc+0x64>
 800ccb6:	e00c      	b.n	800ccd2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ccb8:	2300      	movs	r3, #0
 800ccba:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ccbc:	2101      	movs	r1, #1
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff ff05 	bl	800cace <dir_next>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ccc8:	7dfb      	ldrb	r3, [r7, #23]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0d7      	beq.n	800cc7e <dir_alloc+0x26>
 800ccce:	e000      	b.n	800ccd2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ccd0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
 800ccd4:	2b04      	cmp	r3, #4
 800ccd6:	d101      	bne.n	800ccdc <dir_alloc+0x84>
 800ccd8:	2307      	movs	r3, #7
 800ccda:	75fb      	strb	r3, [r7, #23]
	return res;
 800ccdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3718      	adds	r7, #24
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b084      	sub	sp, #16
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	331a      	adds	r3, #26
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7ff f83f 	bl	800bd78 <ld_word>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	2b03      	cmp	r3, #3
 800cd04:	d109      	bne.n	800cd1a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	3314      	adds	r3, #20
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff f834 	bl	800bd78 <ld_word>
 800cd10:	4603      	mov	r3, r0
 800cd12:	041b      	lsls	r3, r3, #16
 800cd14:	68fa      	ldr	r2, [r7, #12]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	331a      	adds	r3, #26
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	b292      	uxth	r2, r2
 800cd38:	4611      	mov	r1, r2
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	f7ff f857 	bl	800bdee <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	d109      	bne.n	800cd5c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	f103 0214 	add.w	r2, r3, #20
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	0c1b      	lsrs	r3, r3, #16
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	4619      	mov	r1, r3
 800cd56:	4610      	mov	r0, r2
 800cd58:	f7ff f849 	bl	800bdee <st_word>
	}
}
 800cd5c:	bf00      	nop
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800cd6e:	2304      	movs	r3, #4
 800cd70:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800cd78:	e03c      	b.n	800cdf4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	69db      	ldr	r3, [r3, #28]
 800cd7e:	4619      	mov	r1, r3
 800cd80:	6938      	ldr	r0, [r7, #16]
 800cd82:	f7ff faa9 	bl	800c2d8 <move_window>
 800cd86:	4603      	mov	r3, r0
 800cd88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d136      	bne.n	800cdfe <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a1b      	ldr	r3, [r3, #32]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d102      	bne.n	800cda4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800cd9e:	2304      	movs	r3, #4
 800cda0:	75fb      	strb	r3, [r7, #23]
 800cda2:	e031      	b.n	800ce08 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6a1b      	ldr	r3, [r3, #32]
 800cda8:	330b      	adds	r3, #11
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cdb0:	73bb      	strb	r3, [r7, #14]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	7bba      	ldrb	r2, [r7, #14]
 800cdb6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
 800cdba:	2be5      	cmp	r3, #229	; 0xe5
 800cdbc:	d011      	beq.n	800cde2 <dir_read+0x7e>
 800cdbe:	7bfb      	ldrb	r3, [r7, #15]
 800cdc0:	2b2e      	cmp	r3, #46	; 0x2e
 800cdc2:	d00e      	beq.n	800cde2 <dir_read+0x7e>
 800cdc4:	7bbb      	ldrb	r3, [r7, #14]
 800cdc6:	2b0f      	cmp	r3, #15
 800cdc8:	d00b      	beq.n	800cde2 <dir_read+0x7e>
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
 800cdcc:	f023 0320 	bic.w	r3, r3, #32
 800cdd0:	2b08      	cmp	r3, #8
 800cdd2:	bf0c      	ite	eq
 800cdd4:	2301      	moveq	r3, #1
 800cdd6:	2300      	movne	r3, #0
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	461a      	mov	r2, r3
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d00f      	beq.n	800ce02 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800cde2:	2100      	movs	r1, #0
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7ff fe72 	bl	800cace <dir_next>
 800cdea:	4603      	mov	r3, r0
 800cdec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cdee:	7dfb      	ldrb	r3, [r7, #23]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d108      	bne.n	800ce06 <dir_read+0xa2>
	while (dp->sect) {
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	69db      	ldr	r3, [r3, #28]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1be      	bne.n	800cd7a <dir_read+0x16>
 800cdfc:	e004      	b.n	800ce08 <dir_read+0xa4>
		if (res != FR_OK) break;
 800cdfe:	bf00      	nop
 800ce00:	e002      	b.n	800ce08 <dir_read+0xa4>
				break;
 800ce02:	bf00      	nop
 800ce04:	e000      	b.n	800ce08 <dir_read+0xa4>
		if (res != FR_OK) break;
 800ce06:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ce08:	7dfb      	ldrb	r3, [r7, #23]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <dir_read+0xb0>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2200      	movs	r2, #0
 800ce12:	61da      	str	r2, [r3, #28]
	return res;
 800ce14:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3718      	adds	r7, #24
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b086      	sub	sp, #24
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f7ff fdd2 	bl	800c9d8 <dir_sdi>
 800ce34:	4603      	mov	r3, r0
 800ce36:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d001      	beq.n	800ce42 <dir_find+0x24>
 800ce3e:	7dfb      	ldrb	r3, [r7, #23]
 800ce40:	e03e      	b.n	800cec0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	4619      	mov	r1, r3
 800ce48:	6938      	ldr	r0, [r7, #16]
 800ce4a:	f7ff fa45 	bl	800c2d8 <move_window>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ce52:	7dfb      	ldrb	r3, [r7, #23]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d12f      	bne.n	800ceb8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a1b      	ldr	r3, [r3, #32]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce60:	7bfb      	ldrb	r3, [r7, #15]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d102      	bne.n	800ce6c <dir_find+0x4e>
 800ce66:	2304      	movs	r3, #4
 800ce68:	75fb      	strb	r3, [r7, #23]
 800ce6a:	e028      	b.n	800cebe <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6a1b      	ldr	r3, [r3, #32]
 800ce70:	330b      	adds	r3, #11
 800ce72:	781b      	ldrb	r3, [r3, #0]
 800ce74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6a1b      	ldr	r3, [r3, #32]
 800ce82:	330b      	adds	r3, #11
 800ce84:	781b      	ldrb	r3, [r3, #0]
 800ce86:	f003 0308 	and.w	r3, r3, #8
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d10a      	bne.n	800cea4 <dir_find+0x86>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6a18      	ldr	r0, [r3, #32]
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3324      	adds	r3, #36	; 0x24
 800ce96:	220b      	movs	r2, #11
 800ce98:	4619      	mov	r1, r3
 800ce9a:	f7ff f82b 	bl	800bef4 <mem_cmp>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00b      	beq.n	800cebc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cea4:	2100      	movs	r1, #0
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f7ff fe11 	bl	800cace <dir_next>
 800ceac:	4603      	mov	r3, r0
 800ceae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0c5      	beq.n	800ce42 <dir_find+0x24>
 800ceb6:	e002      	b.n	800cebe <dir_find+0xa0>
		if (res != FR_OK) break;
 800ceb8:	bf00      	nop
 800ceba:	e000      	b.n	800cebe <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cebc:	bf00      	nop

	return res;
 800cebe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ced6:	2101      	movs	r1, #1
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7ff febd 	bl	800cc58 <dir_alloc>
 800cede:	4603      	mov	r3, r0
 800cee0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d11c      	bne.n	800cf22 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	69db      	ldr	r3, [r3, #28]
 800ceec:	4619      	mov	r1, r3
 800ceee:	68b8      	ldr	r0, [r7, #8]
 800cef0:	f7ff f9f2 	bl	800c2d8 <move_window>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d111      	bne.n	800cf22 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6a1b      	ldr	r3, [r3, #32]
 800cf02:	2220      	movs	r2, #32
 800cf04:	2100      	movs	r1, #0
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7fe ffd9 	bl	800bebe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a18      	ldr	r0, [r3, #32]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3324      	adds	r3, #36	; 0x24
 800cf14:	220b      	movs	r2, #11
 800cf16:	4619      	mov	r1, r3
 800cf18:	f7fe ffb0 	bl	800be7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cf22:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	69db      	ldr	r3, [r3, #28]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d04e      	beq.n	800cfe2 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800cf44:	2300      	movs	r3, #0
 800cf46:	613b      	str	r3, [r7, #16]
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800cf4c:	e021      	b.n	800cf92 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a1a      	ldr	r2, [r3, #32]
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	1c59      	adds	r1, r3, #1
 800cf56:	6179      	str	r1, [r7, #20]
 800cf58:	4413      	add	r3, r2
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
 800cf60:	2b20      	cmp	r3, #32
 800cf62:	d100      	bne.n	800cf66 <get_fileinfo+0x3a>
 800cf64:	e015      	b.n	800cf92 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
 800cf68:	2b05      	cmp	r3, #5
 800cf6a:	d101      	bne.n	800cf70 <get_fileinfo+0x44>
 800cf6c:	23e5      	movs	r3, #229	; 0xe5
 800cf6e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	2b09      	cmp	r3, #9
 800cf74:	d106      	bne.n	800cf84 <get_fileinfo+0x58>
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	1c5a      	adds	r2, r3, #1
 800cf7a:	613a      	str	r2, [r7, #16]
 800cf7c:	683a      	ldr	r2, [r7, #0]
 800cf7e:	4413      	add	r3, r2
 800cf80:	222e      	movs	r2, #46	; 0x2e
 800cf82:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800cf84:	693b      	ldr	r3, [r7, #16]
 800cf86:	1c5a      	adds	r2, r3, #1
 800cf88:	613a      	str	r2, [r7, #16]
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	4413      	add	r3, r2
 800cf8e:	7bfa      	ldrb	r2, [r7, #15]
 800cf90:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2b0a      	cmp	r3, #10
 800cf96:	d9da      	bls.n	800cf4e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800cf98:	683a      	ldr	r2, [r7, #0]
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	3309      	adds	r3, #9
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6a1b      	ldr	r3, [r3, #32]
 800cfa8:	7ada      	ldrb	r2, [r3, #11]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6a1b      	ldr	r3, [r3, #32]
 800cfb2:	331c      	adds	r3, #28
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe fef7 	bl	800bda8 <ld_dword>
 800cfba:	4602      	mov	r2, r0
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6a1b      	ldr	r3, [r3, #32]
 800cfc4:	3316      	adds	r3, #22
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe feee 	bl	800bda8 <ld_dword>
 800cfcc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	b29a      	uxth	r2, r3
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	80da      	strh	r2, [r3, #6]
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	0c1b      	lsrs	r3, r3, #16
 800cfda:	b29a      	uxth	r2, r3
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	809a      	strh	r2, [r3, #4]
 800cfe0:	e000      	b.n	800cfe4 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cfe2:	bf00      	nop
}
 800cfe4:	3718      	adds	r7, #24
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b088      	sub	sp, #32
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	3324      	adds	r3, #36	; 0x24
 800d000:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d002:	220b      	movs	r2, #11
 800d004:	2120      	movs	r1, #32
 800d006:	68b8      	ldr	r0, [r7, #8]
 800d008:	f7fe ff59 	bl	800bebe <mem_set>
	si = i = 0; ni = 8;
 800d00c:	2300      	movs	r3, #0
 800d00e:	613b      	str	r3, [r7, #16]
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	61fb      	str	r3, [r7, #28]
 800d014:	2308      	movs	r3, #8
 800d016:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	1c5a      	adds	r2, r3, #1
 800d01c:	61fa      	str	r2, [r7, #28]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	4413      	add	r3, r2
 800d022:	781b      	ldrb	r3, [r3, #0]
 800d024:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d026:	7efb      	ldrb	r3, [r7, #27]
 800d028:	2b20      	cmp	r3, #32
 800d02a:	d94e      	bls.n	800d0ca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d02c:	7efb      	ldrb	r3, [r7, #27]
 800d02e:	2b2f      	cmp	r3, #47	; 0x2f
 800d030:	d006      	beq.n	800d040 <create_name+0x54>
 800d032:	7efb      	ldrb	r3, [r7, #27]
 800d034:	2b5c      	cmp	r3, #92	; 0x5c
 800d036:	d110      	bne.n	800d05a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d038:	e002      	b.n	800d040 <create_name+0x54>
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	3301      	adds	r3, #1
 800d03e:	61fb      	str	r3, [r7, #28]
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	4413      	add	r3, r2
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	2b2f      	cmp	r3, #47	; 0x2f
 800d04a:	d0f6      	beq.n	800d03a <create_name+0x4e>
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	4413      	add	r3, r2
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	2b5c      	cmp	r3, #92	; 0x5c
 800d056:	d0f0      	beq.n	800d03a <create_name+0x4e>
			break;
 800d058:	e038      	b.n	800d0cc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d05a:	7efb      	ldrb	r3, [r7, #27]
 800d05c:	2b2e      	cmp	r3, #46	; 0x2e
 800d05e:	d003      	beq.n	800d068 <create_name+0x7c>
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	429a      	cmp	r2, r3
 800d066:	d30c      	bcc.n	800d082 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	2b0b      	cmp	r3, #11
 800d06c:	d002      	beq.n	800d074 <create_name+0x88>
 800d06e:	7efb      	ldrb	r3, [r7, #27]
 800d070:	2b2e      	cmp	r3, #46	; 0x2e
 800d072:	d001      	beq.n	800d078 <create_name+0x8c>
 800d074:	2306      	movs	r3, #6
 800d076:	e044      	b.n	800d102 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d078:	2308      	movs	r3, #8
 800d07a:	613b      	str	r3, [r7, #16]
 800d07c:	230b      	movs	r3, #11
 800d07e:	617b      	str	r3, [r7, #20]
			continue;
 800d080:	e022      	b.n	800d0c8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d082:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d086:	2b00      	cmp	r3, #0
 800d088:	da04      	bge.n	800d094 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d08a:	7efb      	ldrb	r3, [r7, #27]
 800d08c:	3b80      	subs	r3, #128	; 0x80
 800d08e:	4a1f      	ldr	r2, [pc, #124]	; (800d10c <create_name+0x120>)
 800d090:	5cd3      	ldrb	r3, [r2, r3]
 800d092:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d094:	7efb      	ldrb	r3, [r7, #27]
 800d096:	4619      	mov	r1, r3
 800d098:	481d      	ldr	r0, [pc, #116]	; (800d110 <create_name+0x124>)
 800d09a:	f7fe ff52 	bl	800bf42 <chk_chr>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <create_name+0xbc>
 800d0a4:	2306      	movs	r3, #6
 800d0a6:	e02c      	b.n	800d102 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d0a8:	7efb      	ldrb	r3, [r7, #27]
 800d0aa:	2b60      	cmp	r3, #96	; 0x60
 800d0ac:	d905      	bls.n	800d0ba <create_name+0xce>
 800d0ae:	7efb      	ldrb	r3, [r7, #27]
 800d0b0:	2b7a      	cmp	r3, #122	; 0x7a
 800d0b2:	d802      	bhi.n	800d0ba <create_name+0xce>
 800d0b4:	7efb      	ldrb	r3, [r7, #27]
 800d0b6:	3b20      	subs	r3, #32
 800d0b8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	1c5a      	adds	r2, r3, #1
 800d0be:	613a      	str	r2, [r7, #16]
 800d0c0:	68ba      	ldr	r2, [r7, #8]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	7efa      	ldrb	r2, [r7, #27]
 800d0c6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d0c8:	e7a6      	b.n	800d018 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d0ca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	441a      	add	r2, r3
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d101      	bne.n	800d0e0 <create_name+0xf4>
 800d0dc:	2306      	movs	r3, #6
 800d0de:	e010      	b.n	800d102 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2be5      	cmp	r3, #229	; 0xe5
 800d0e6:	d102      	bne.n	800d0ee <create_name+0x102>
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	2205      	movs	r2, #5
 800d0ec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d0ee:	7efb      	ldrb	r3, [r7, #27]
 800d0f0:	2b20      	cmp	r3, #32
 800d0f2:	d801      	bhi.n	800d0f8 <create_name+0x10c>
 800d0f4:	2204      	movs	r2, #4
 800d0f6:	e000      	b.n	800d0fa <create_name+0x10e>
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	330b      	adds	r3, #11
 800d0fe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d100:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d102:	4618      	mov	r0, r3
 800d104:	3720      	adds	r7, #32
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	08014bd8 	.word	0x08014bd8
 800d110:	08014b18 	.word	0x08014b18

0800d114 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d128:	e002      	b.n	800d130 <follow_path+0x1c>
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	3301      	adds	r3, #1
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	2b2f      	cmp	r3, #47	; 0x2f
 800d136:	d0f8      	beq.n	800d12a <follow_path+0x16>
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	2b5c      	cmp	r3, #92	; 0x5c
 800d13e:	d0f4      	beq.n	800d12a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	2200      	movs	r2, #0
 800d144:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	2b1f      	cmp	r3, #31
 800d14c:	d80a      	bhi.n	800d164 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2280      	movs	r2, #128	; 0x80
 800d152:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d156:	2100      	movs	r1, #0
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7ff fc3d 	bl	800c9d8 <dir_sdi>
 800d15e:	4603      	mov	r3, r0
 800d160:	75fb      	strb	r3, [r7, #23]
 800d162:	e043      	b.n	800d1ec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d164:	463b      	mov	r3, r7
 800d166:	4619      	mov	r1, r3
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f7ff ff3f 	bl	800cfec <create_name>
 800d16e:	4603      	mov	r3, r0
 800d170:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d172:	7dfb      	ldrb	r3, [r7, #23]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d134      	bne.n	800d1e2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f7ff fe50 	bl	800ce1e <dir_find>
 800d17e:	4603      	mov	r3, r0
 800d180:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d188:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d18a:	7dfb      	ldrb	r3, [r7, #23]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00a      	beq.n	800d1a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	2b04      	cmp	r3, #4
 800d194:	d127      	bne.n	800d1e6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d196:	7afb      	ldrb	r3, [r7, #11]
 800d198:	f003 0304 	and.w	r3, r3, #4
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d122      	bne.n	800d1e6 <follow_path+0xd2>
 800d1a0:	2305      	movs	r3, #5
 800d1a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d1a4:	e01f      	b.n	800d1e6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1a6:	7afb      	ldrb	r3, [r7, #11]
 800d1a8:	f003 0304 	and.w	r3, r3, #4
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d11c      	bne.n	800d1ea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	799b      	ldrb	r3, [r3, #6]
 800d1b4:	f003 0310 	and.w	r3, r3, #16
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d102      	bne.n	800d1c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d1bc:	2305      	movs	r3, #5
 800d1be:	75fb      	strb	r3, [r7, #23]
 800d1c0:	e014      	b.n	800d1ec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	695b      	ldr	r3, [r3, #20]
 800d1cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1d0:	4413      	add	r3, r2
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	68f8      	ldr	r0, [r7, #12]
 800d1d6:	f7ff fd86 	bl	800cce6 <ld_clust>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d1e0:	e7c0      	b.n	800d164 <follow_path+0x50>
			if (res != FR_OK) break;
 800d1e2:	bf00      	nop
 800d1e4:	e002      	b.n	800d1ec <follow_path+0xd8>
				break;
 800d1e6:	bf00      	nop
 800d1e8:	e000      	b.n	800d1ec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d1ea:	bf00      	nop
			}
		}
	}

	return res;
 800d1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3718      	adds	r7, #24
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d1f6:	b480      	push	{r7}
 800d1f8:	b087      	sub	sp, #28
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d1fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d202:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d031      	beq.n	800d270 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	617b      	str	r3, [r7, #20]
 800d212:	e002      	b.n	800d21a <get_ldnumber+0x24>
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	3301      	adds	r3, #1
 800d218:	617b      	str	r3, [r7, #20]
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b20      	cmp	r3, #32
 800d220:	d903      	bls.n	800d22a <get_ldnumber+0x34>
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b3a      	cmp	r3, #58	; 0x3a
 800d228:	d1f4      	bne.n	800d214 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2b3a      	cmp	r3, #58	; 0x3a
 800d230:	d11c      	bne.n	800d26c <get_ldnumber+0x76>
			tp = *path;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	1c5a      	adds	r2, r3, #1
 800d23c:	60fa      	str	r2, [r7, #12]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	3b30      	subs	r3, #48	; 0x30
 800d242:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	2b09      	cmp	r3, #9
 800d248:	d80e      	bhi.n	800d268 <get_ldnumber+0x72>
 800d24a:	68fa      	ldr	r2, [r7, #12]
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d10a      	bne.n	800d268 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d107      	bne.n	800d268 <get_ldnumber+0x72>
					vol = (int)i;
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	3301      	adds	r3, #1
 800d260:	617b      	str	r3, [r7, #20]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	e002      	b.n	800d272 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d26c:	2300      	movs	r3, #0
 800d26e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d270:	693b      	ldr	r3, [r7, #16]
}
 800d272:	4618      	mov	r0, r3
 800d274:	371c      	adds	r7, #28
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
	...

0800d280 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	70da      	strb	r2, [r3, #3]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f04f 32ff 	mov.w	r2, #4294967295
 800d296:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d298:	6839      	ldr	r1, [r7, #0]
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7ff f81c 	bl	800c2d8 <move_window>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d001      	beq.n	800d2aa <check_fs+0x2a>
 800d2a6:	2304      	movs	r3, #4
 800d2a8:	e038      	b.n	800d31c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	3330      	adds	r3, #48	; 0x30
 800d2ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe fd60 	bl	800bd78 <ld_word>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d001      	beq.n	800d2c8 <check_fs+0x48>
 800d2c4:	2303      	movs	r3, #3
 800d2c6:	e029      	b.n	800d31c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2ce:	2be9      	cmp	r3, #233	; 0xe9
 800d2d0:	d009      	beq.n	800d2e6 <check_fs+0x66>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2d8:	2beb      	cmp	r3, #235	; 0xeb
 800d2da:	d11e      	bne.n	800d31a <check_fs+0x9a>
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d2e2:	2b90      	cmp	r3, #144	; 0x90
 800d2e4:	d119      	bne.n	800d31a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	3330      	adds	r3, #48	; 0x30
 800d2ea:	3336      	adds	r3, #54	; 0x36
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fe fd5b 	bl	800bda8 <ld_dword>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d2f8:	4a0a      	ldr	r2, [pc, #40]	; (800d324 <check_fs+0xa4>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d101      	bne.n	800d302 <check_fs+0x82>
 800d2fe:	2300      	movs	r3, #0
 800d300:	e00c      	b.n	800d31c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	3330      	adds	r3, #48	; 0x30
 800d306:	3352      	adds	r3, #82	; 0x52
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fe fd4d 	bl	800bda8 <ld_dword>
 800d30e:	4603      	mov	r3, r0
 800d310:	4a05      	ldr	r2, [pc, #20]	; (800d328 <check_fs+0xa8>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d101      	bne.n	800d31a <check_fs+0x9a>
 800d316:	2300      	movs	r3, #0
 800d318:	e000      	b.n	800d31c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d31a:	2302      	movs	r3, #2
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3708      	adds	r7, #8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}
 800d324:	00544146 	.word	0x00544146
 800d328:	33544146 	.word	0x33544146

0800d32c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b096      	sub	sp, #88	; 0x58
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	4613      	mov	r3, r2
 800d338:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	2200      	movs	r2, #0
 800d33e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f7ff ff58 	bl	800d1f6 <get_ldnumber>
 800d346:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	da01      	bge.n	800d352 <find_volume+0x26>
 800d34e:	230b      	movs	r3, #11
 800d350:	e22e      	b.n	800d7b0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d352:	4aa8      	ldr	r2, [pc, #672]	; (800d5f4 <find_volume+0x2c8>)
 800d354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d35a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <find_volume+0x3a>
 800d362:	230c      	movs	r3, #12
 800d364:	e224      	b.n	800d7b0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d36a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d36c:	79fb      	ldrb	r3, [r7, #7]
 800d36e:	f023 0301 	bic.w	r3, r3, #1
 800d372:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d01a      	beq.n	800d3b2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37e:	785b      	ldrb	r3, [r3, #1]
 800d380:	4618      	mov	r0, r3
 800d382:	f7fe fc5b 	bl	800bc3c <disk_status>
 800d386:	4603      	mov	r3, r0
 800d388:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d38c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d390:	f003 0301 	and.w	r3, r3, #1
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10c      	bne.n	800d3b2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d398:	79fb      	ldrb	r3, [r7, #7]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d007      	beq.n	800d3ae <find_volume+0x82>
 800d39e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3a2:	f003 0304 	and.w	r3, r3, #4
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d001      	beq.n	800d3ae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d3aa:	230a      	movs	r3, #10
 800d3ac:	e200      	b.n	800d7b0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	e1fe      	b.n	800d7b0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d3b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ba:	b2da      	uxtb	r2, r3
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c2:	785b      	ldrb	r3, [r3, #1]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fe fc53 	bl	800bc70 <disk_initialize>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d3d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3d4:	f003 0301 	and.w	r3, r3, #1
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d001      	beq.n	800d3e0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d3dc:	2303      	movs	r3, #3
 800d3de:	e1e7      	b.n	800d7b0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d3e0:	79fb      	ldrb	r3, [r7, #7]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d007      	beq.n	800d3f6 <find_volume+0xca>
 800d3e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d3ea:	f003 0304 	and.w	r3, r3, #4
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d3f2:	230a      	movs	r3, #10
 800d3f4:	e1dc      	b.n	800d7b0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d3fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d3fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3fe:	f7ff ff3f 	bl	800d280 <check_fs>
 800d402:	4603      	mov	r3, r0
 800d404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d408:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d40c:	2b02      	cmp	r3, #2
 800d40e:	d14b      	bne.n	800d4a8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d410:	2300      	movs	r3, #0
 800d412:	643b      	str	r3, [r7, #64]	; 0x40
 800d414:	e01f      	b.n	800d456 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d418:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d41c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d41e:	011b      	lsls	r3, r3, #4
 800d420:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d424:	4413      	add	r3, r2
 800d426:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42a:	3304      	adds	r3, #4
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d006      	beq.n	800d440 <find_volume+0x114>
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	3308      	adds	r3, #8
 800d436:	4618      	mov	r0, r3
 800d438:	f7fe fcb6 	bl	800bda8 <ld_dword>
 800d43c:	4602      	mov	r2, r0
 800d43e:	e000      	b.n	800d442 <find_volume+0x116>
 800d440:	2200      	movs	r2, #0
 800d442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d44a:	440b      	add	r3, r1
 800d44c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d452:	3301      	adds	r3, #1
 800d454:	643b      	str	r3, [r7, #64]	; 0x40
 800d456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d458:	2b03      	cmp	r3, #3
 800d45a:	d9dc      	bls.n	800d416 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d45c:	2300      	movs	r3, #0
 800d45e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d462:	2b00      	cmp	r3, #0
 800d464:	d002      	beq.n	800d46c <find_volume+0x140>
 800d466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d468:	3b01      	subs	r3, #1
 800d46a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d46e:	009b      	lsls	r3, r3, #2
 800d470:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d474:	4413      	add	r3, r2
 800d476:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d47a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d47c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d005      	beq.n	800d48e <find_volume+0x162>
 800d482:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d484:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d486:	f7ff fefb 	bl	800d280 <check_fs>
 800d48a:	4603      	mov	r3, r0
 800d48c:	e000      	b.n	800d490 <find_volume+0x164>
 800d48e:	2303      	movs	r3, #3
 800d490:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d494:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d905      	bls.n	800d4a8 <find_volume+0x17c>
 800d49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d49e:	3301      	adds	r3, #1
 800d4a0:	643b      	str	r3, [r7, #64]	; 0x40
 800d4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4a4:	2b03      	cmp	r3, #3
 800d4a6:	d9e1      	bls.n	800d46c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d4a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4ac:	2b04      	cmp	r3, #4
 800d4ae:	d101      	bne.n	800d4b4 <find_volume+0x188>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e17d      	b.n	800d7b0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d4b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4b8:	2b01      	cmp	r3, #1
 800d4ba:	d901      	bls.n	800d4c0 <find_volume+0x194>
 800d4bc:	230d      	movs	r3, #13
 800d4be:	e177      	b.n	800d7b0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	3330      	adds	r3, #48	; 0x30
 800d4c4:	330b      	adds	r3, #11
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7fe fc56 	bl	800bd78 <ld_word>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4d2:	d001      	beq.n	800d4d8 <find_volume+0x1ac>
 800d4d4:	230d      	movs	r3, #13
 800d4d6:	e16b      	b.n	800d7b0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4da:	3330      	adds	r3, #48	; 0x30
 800d4dc:	3316      	adds	r3, #22
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fe fc4a 	bl	800bd78 <ld_word>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d4e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d106      	bne.n	800d4fc <find_volume+0x1d0>
 800d4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f0:	3330      	adds	r3, #48	; 0x30
 800d4f2:	3324      	adds	r3, #36	; 0x24
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7fe fc57 	bl	800bda8 <ld_dword>
 800d4fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d500:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d504:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d50e:	789b      	ldrb	r3, [r3, #2]
 800d510:	2b01      	cmp	r3, #1
 800d512:	d005      	beq.n	800d520 <find_volume+0x1f4>
 800d514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d516:	789b      	ldrb	r3, [r3, #2]
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d001      	beq.n	800d520 <find_volume+0x1f4>
 800d51c:	230d      	movs	r3, #13
 800d51e:	e147      	b.n	800d7b0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d522:	789b      	ldrb	r3, [r3, #2]
 800d524:	461a      	mov	r2, r3
 800d526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d528:	fb02 f303 	mul.w	r3, r2, r3
 800d52c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d534:	b29a      	uxth	r2, r3
 800d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d538:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53c:	895b      	ldrh	r3, [r3, #10]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d008      	beq.n	800d554 <find_volume+0x228>
 800d542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d544:	895b      	ldrh	r3, [r3, #10]
 800d546:	461a      	mov	r2, r3
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	895b      	ldrh	r3, [r3, #10]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	4013      	ands	r3, r2
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <find_volume+0x22c>
 800d554:	230d      	movs	r3, #13
 800d556:	e12b      	b.n	800d7b0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55a:	3330      	adds	r3, #48	; 0x30
 800d55c:	3311      	adds	r3, #17
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fe fc0a 	bl	800bd78 <ld_word>
 800d564:	4603      	mov	r3, r0
 800d566:	461a      	mov	r2, r3
 800d568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56e:	891b      	ldrh	r3, [r3, #8]
 800d570:	f003 030f 	and.w	r3, r3, #15
 800d574:	b29b      	uxth	r3, r3
 800d576:	2b00      	cmp	r3, #0
 800d578:	d001      	beq.n	800d57e <find_volume+0x252>
 800d57a:	230d      	movs	r3, #13
 800d57c:	e118      	b.n	800d7b0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	3330      	adds	r3, #48	; 0x30
 800d582:	3313      	adds	r3, #19
 800d584:	4618      	mov	r0, r3
 800d586:	f7fe fbf7 	bl	800bd78 <ld_word>
 800d58a:	4603      	mov	r3, r0
 800d58c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d58e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d590:	2b00      	cmp	r3, #0
 800d592:	d106      	bne.n	800d5a2 <find_volume+0x276>
 800d594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d596:	3330      	adds	r3, #48	; 0x30
 800d598:	3320      	adds	r3, #32
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fe fc04 	bl	800bda8 <ld_dword>
 800d5a0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d5a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a4:	3330      	adds	r3, #48	; 0x30
 800d5a6:	330e      	adds	r3, #14
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fe fbe5 	bl	800bd78 <ld_word>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d5b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d101      	bne.n	800d5bc <find_volume+0x290>
 800d5b8:	230d      	movs	r3, #13
 800d5ba:	e0f9      	b.n	800d7b0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d5bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d5be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5c0:	4413      	add	r3, r2
 800d5c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5c4:	8912      	ldrh	r2, [r2, #8]
 800d5c6:	0912      	lsrs	r2, r2, #4
 800d5c8:	b292      	uxth	r2, r2
 800d5ca:	4413      	add	r3, r2
 800d5cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d5ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d201      	bcs.n	800d5da <find_volume+0x2ae>
 800d5d6:	230d      	movs	r3, #13
 800d5d8:	e0ea      	b.n	800d7b0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d5da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5e2:	8952      	ldrh	r2, [r2, #10]
 800d5e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d103      	bne.n	800d5f8 <find_volume+0x2cc>
 800d5f0:	230d      	movs	r3, #13
 800d5f2:	e0dd      	b.n	800d7b0 <find_volume+0x484>
 800d5f4:	200004c0 	.word	0x200004c0
		fmt = FS_FAT32;
 800d5f8:	2303      	movs	r3, #3
 800d5fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d604:	4293      	cmp	r3, r2
 800d606:	d802      	bhi.n	800d60e <find_volume+0x2e2>
 800d608:	2302      	movs	r3, #2
 800d60a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d610:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d614:	4293      	cmp	r3, r2
 800d616:	d802      	bhi.n	800d61e <find_volume+0x2f2>
 800d618:	2301      	movs	r3, #1
 800d61a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	1c9a      	adds	r2, r3, #2
 800d622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d624:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d628:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d62a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d62c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d630:	441a      	add	r2, r3
 800d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d634:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d63a:	441a      	add	r2, r3
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d644:	2b03      	cmp	r3, #3
 800d646:	d11e      	bne.n	800d686 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64a:	3330      	adds	r3, #48	; 0x30
 800d64c:	332a      	adds	r3, #42	; 0x2a
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fb92 	bl	800bd78 <ld_word>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d001      	beq.n	800d65e <find_volume+0x332>
 800d65a:	230d      	movs	r3, #13
 800d65c:	e0a8      	b.n	800d7b0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d660:	891b      	ldrh	r3, [r3, #8]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <find_volume+0x33e>
 800d666:	230d      	movs	r3, #13
 800d668:	e0a2      	b.n	800d7b0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d66c:	3330      	adds	r3, #48	; 0x30
 800d66e:	332c      	adds	r3, #44	; 0x2c
 800d670:	4618      	mov	r0, r3
 800d672:	f7fe fb99 	bl	800bda8 <ld_dword>
 800d676:	4602      	mov	r2, r0
 800d678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	009b      	lsls	r3, r3, #2
 800d682:	647b      	str	r3, [r7, #68]	; 0x44
 800d684:	e01f      	b.n	800d6c6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d688:	891b      	ldrh	r3, [r3, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d101      	bne.n	800d692 <find_volume+0x366>
 800d68e:	230d      	movs	r3, #13
 800d690:	e08e      	b.n	800d7b0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d694:	6a1a      	ldr	r2, [r3, #32]
 800d696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d698:	441a      	add	r2, r3
 800d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d69e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d103      	bne.n	800d6ae <find_volume+0x382>
 800d6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	005b      	lsls	r3, r3, #1
 800d6ac:	e00a      	b.n	800d6c4 <find_volume+0x398>
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b0:	695a      	ldr	r2, [r3, #20]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	005b      	lsls	r3, r3, #1
 800d6b6:	4413      	add	r3, r2
 800d6b8:	085a      	lsrs	r2, r3, #1
 800d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6bc:	695b      	ldr	r3, [r3, #20]
 800d6be:	f003 0301 	and.w	r3, r3, #1
 800d6c2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d6c4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c8:	699a      	ldr	r2, [r3, #24]
 800d6ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d6d0:	0a5b      	lsrs	r3, r3, #9
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d201      	bcs.n	800d6da <find_volume+0x3ae>
 800d6d6:	230d      	movs	r3, #13
 800d6d8:	e06a      	b.n	800d7b0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e0:	611a      	str	r2, [r3, #16]
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e4:	691a      	ldr	r2, [r3, #16]
 800d6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ec:	2280      	movs	r2, #128	; 0x80
 800d6ee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d6f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6f4:	2b03      	cmp	r3, #3
 800d6f6:	d149      	bne.n	800d78c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fa:	3330      	adds	r3, #48	; 0x30
 800d6fc:	3330      	adds	r3, #48	; 0x30
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fe fb3a 	bl	800bd78 <ld_word>
 800d704:	4603      	mov	r3, r0
 800d706:	2b01      	cmp	r3, #1
 800d708:	d140      	bne.n	800d78c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d70c:	3301      	adds	r3, #1
 800d70e:	4619      	mov	r1, r3
 800d710:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d712:	f7fe fde1 	bl	800c2d8 <move_window>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d137      	bne.n	800d78c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71e:	2200      	movs	r2, #0
 800d720:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d724:	3330      	adds	r3, #48	; 0x30
 800d726:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fe fb24 	bl	800bd78 <ld_word>
 800d730:	4603      	mov	r3, r0
 800d732:	461a      	mov	r2, r3
 800d734:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d738:	429a      	cmp	r2, r3
 800d73a:	d127      	bne.n	800d78c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73e:	3330      	adds	r3, #48	; 0x30
 800d740:	4618      	mov	r0, r3
 800d742:	f7fe fb31 	bl	800bda8 <ld_dword>
 800d746:	4603      	mov	r3, r0
 800d748:	4a1b      	ldr	r2, [pc, #108]	; (800d7b8 <find_volume+0x48c>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d11e      	bne.n	800d78c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d750:	3330      	adds	r3, #48	; 0x30
 800d752:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d756:	4618      	mov	r0, r3
 800d758:	f7fe fb26 	bl	800bda8 <ld_dword>
 800d75c:	4603      	mov	r3, r0
 800d75e:	4a17      	ldr	r2, [pc, #92]	; (800d7bc <find_volume+0x490>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d113      	bne.n	800d78c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d766:	3330      	adds	r3, #48	; 0x30
 800d768:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7fe fb1b 	bl	800bda8 <ld_dword>
 800d772:	4602      	mov	r2, r0
 800d774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d776:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77a:	3330      	adds	r3, #48	; 0x30
 800d77c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d780:	4618      	mov	r0, r3
 800d782:	f7fe fb11 	bl	800bda8 <ld_dword>
 800d786:	4602      	mov	r2, r0
 800d788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d792:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d794:	4b0a      	ldr	r3, [pc, #40]	; (800d7c0 <find_volume+0x494>)
 800d796:	881b      	ldrh	r3, [r3, #0]
 800d798:	3301      	adds	r3, #1
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	4b08      	ldr	r3, [pc, #32]	; (800d7c0 <find_volume+0x494>)
 800d79e:	801a      	strh	r2, [r3, #0]
 800d7a0:	4b07      	ldr	r3, [pc, #28]	; (800d7c0 <find_volume+0x494>)
 800d7a2:	881a      	ldrh	r2, [r3, #0]
 800d7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d7a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d7aa:	f7fe fd2d 	bl	800c208 <clear_lock>
#endif
	return FR_OK;
 800d7ae:	2300      	movs	r3, #0
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3758      	adds	r7, #88	; 0x58
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	41615252 	.word	0x41615252
 800d7bc:	61417272 	.word	0x61417272
 800d7c0:	200004c4 	.word	0x200004c4

0800d7c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d7ce:	2309      	movs	r3, #9
 800d7d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d01c      	beq.n	800d812 <validate+0x4e>
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d018      	beq.n	800d812 <validate+0x4e>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d013      	beq.n	800d812 <validate+0x4e>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	889a      	ldrh	r2, [r3, #4]
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	88db      	ldrh	r3, [r3, #6]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d10c      	bne.n	800d812 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	785b      	ldrb	r3, [r3, #1]
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7fe fa1c 	bl	800bc3c <disk_status>
 800d804:	4603      	mov	r3, r0
 800d806:	f003 0301 	and.w	r3, r3, #1
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d101      	bne.n	800d812 <validate+0x4e>
			res = FR_OK;
 800d80e:	2300      	movs	r3, #0
 800d810:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d812:	7bfb      	ldrb	r3, [r7, #15]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d102      	bne.n	800d81e <validate+0x5a>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	e000      	b.n	800d820 <validate+0x5c>
 800d81e:	2300      	movs	r3, #0
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	6013      	str	r3, [r2, #0]
	return res;
 800d824:	7bfb      	ldrb	r3, [r7, #15]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
	...

0800d830 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	4613      	mov	r3, r2
 800d83c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d842:	f107 0310 	add.w	r3, r7, #16
 800d846:	4618      	mov	r0, r3
 800d848:	f7ff fcd5 	bl	800d1f6 <get_ldnumber>
 800d84c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	2b00      	cmp	r3, #0
 800d852:	da01      	bge.n	800d858 <f_mount+0x28>
 800d854:	230b      	movs	r3, #11
 800d856:	e02b      	b.n	800d8b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d858:	4a17      	ldr	r2, [pc, #92]	; (800d8b8 <f_mount+0x88>)
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d860:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d005      	beq.n	800d874 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d868:	69b8      	ldr	r0, [r7, #24]
 800d86a:	f7fe fccd 	bl	800c208 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d86e:	69bb      	ldr	r3, [r7, #24]
 800d870:	2200      	movs	r2, #0
 800d872:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d002      	beq.n	800d880 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2200      	movs	r2, #0
 800d87e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	490d      	ldr	r1, [pc, #52]	; (800d8b8 <f_mount+0x88>)
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d002      	beq.n	800d896 <f_mount+0x66>
 800d890:	79fb      	ldrb	r3, [r7, #7]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d001      	beq.n	800d89a <f_mount+0x6a>
 800d896:	2300      	movs	r3, #0
 800d898:	e00a      	b.n	800d8b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d89a:	f107 010c 	add.w	r1, r7, #12
 800d89e:	f107 0308 	add.w	r3, r7, #8
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f7ff fd41 	bl	800d32c <find_volume>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d8ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3720      	adds	r7, #32
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	200004c0 	.word	0x200004c0

0800d8bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b098      	sub	sp, #96	; 0x60
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d101      	bne.n	800d8d4 <f_open+0x18>
 800d8d0:	2309      	movs	r3, #9
 800d8d2:	e1ad      	b.n	800dc30 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d8d4:	79fb      	ldrb	r3, [r7, #7]
 800d8d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d8dc:	79fa      	ldrb	r2, [r7, #7]
 800d8de:	f107 0110 	add.w	r1, r7, #16
 800d8e2:	f107 0308 	add.w	r3, r7, #8
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7ff fd20 	bl	800d32c <find_volume>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d8f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f040 8191 	bne.w	800dc1e <f_open+0x362>
		dj.obj.fs = fs;
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d900:	68ba      	ldr	r2, [r7, #8]
 800d902:	f107 0314 	add.w	r3, r7, #20
 800d906:	4611      	mov	r1, r2
 800d908:	4618      	mov	r0, r3
 800d90a:	f7ff fc03 	bl	800d114 <follow_path>
 800d90e:	4603      	mov	r3, r0
 800d910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d11a      	bne.n	800d952 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d91c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d920:	b25b      	sxtb	r3, r3
 800d922:	2b00      	cmp	r3, #0
 800d924:	da03      	bge.n	800d92e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d926:	2306      	movs	r3, #6
 800d928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d92c:	e011      	b.n	800d952 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	f023 0301 	bic.w	r3, r3, #1
 800d934:	2b00      	cmp	r3, #0
 800d936:	bf14      	ite	ne
 800d938:	2301      	movne	r3, #1
 800d93a:	2300      	moveq	r3, #0
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	461a      	mov	r2, r3
 800d940:	f107 0314 	add.w	r3, r7, #20
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe fb16 	bl	800bf78 <chk_lock>
 800d94c:	4603      	mov	r3, r0
 800d94e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d952:	79fb      	ldrb	r3, [r7, #7]
 800d954:	f003 031c 	and.w	r3, r3, #28
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d07f      	beq.n	800da5c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d95c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d960:	2b00      	cmp	r3, #0
 800d962:	d017      	beq.n	800d994 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d964:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d968:	2b04      	cmp	r3, #4
 800d96a:	d10e      	bne.n	800d98a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d96c:	f7fe fb60 	bl	800c030 <enq_lock>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d006      	beq.n	800d984 <f_open+0xc8>
 800d976:	f107 0314 	add.w	r3, r7, #20
 800d97a:	4618      	mov	r0, r3
 800d97c:	f7ff faa4 	bl	800cec8 <dir_register>
 800d980:	4603      	mov	r3, r0
 800d982:	e000      	b.n	800d986 <f_open+0xca>
 800d984:	2312      	movs	r3, #18
 800d986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d98a:	79fb      	ldrb	r3, [r7, #7]
 800d98c:	f043 0308 	orr.w	r3, r3, #8
 800d990:	71fb      	strb	r3, [r7, #7]
 800d992:	e010      	b.n	800d9b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d994:	7ebb      	ldrb	r3, [r7, #26]
 800d996:	f003 0311 	and.w	r3, r3, #17
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d003      	beq.n	800d9a6 <f_open+0xea>
					res = FR_DENIED;
 800d99e:	2307      	movs	r3, #7
 800d9a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d9a4:	e007      	b.n	800d9b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d9a6:	79fb      	ldrb	r3, [r7, #7]
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d002      	beq.n	800d9b6 <f_open+0xfa>
 800d9b0:	2308      	movs	r3, #8
 800d9b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d9b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d168      	bne.n	800da90 <f_open+0x1d4>
 800d9be:	79fb      	ldrb	r3, [r7, #7]
 800d9c0:	f003 0308 	and.w	r3, r3, #8
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d063      	beq.n	800da90 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d9c8:	f7fd fbf8 	bl	800b1bc <get_fattime>
 800d9cc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9d0:	330e      	adds	r3, #14
 800d9d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7fe fa25 	bl	800be24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9dc:	3316      	adds	r3, #22
 800d9de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fe fa1f 	bl	800be24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e8:	330b      	adds	r3, #11
 800d9ea:	2220      	movs	r2, #32
 800d9ec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9f2:	4611      	mov	r1, r2
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f7ff f976 	bl	800cce6 <ld_clust>
 800d9fa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da00:	2200      	movs	r2, #0
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff f98e 	bl	800cd24 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800da08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da0a:	331c      	adds	r3, #28
 800da0c:	2100      	movs	r1, #0
 800da0e:	4618      	mov	r0, r3
 800da10:	f7fe fa08 	bl	800be24 <st_dword>
					fs->wflag = 1;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	2201      	movs	r2, #1
 800da18:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800da1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d037      	beq.n	800da90 <f_open+0x1d4>
						dw = fs->winsect;
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da24:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800da26:	f107 0314 	add.w	r3, r7, #20
 800da2a:	2200      	movs	r2, #0
 800da2c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fe fea1 	bl	800c776 <remove_chain>
 800da34:	4603      	mov	r3, r0
 800da36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800da3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d126      	bne.n	800da90 <f_open+0x1d4>
							res = move_window(fs, dw);
 800da42:	693b      	ldr	r3, [r7, #16]
 800da44:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da46:	4618      	mov	r0, r3
 800da48:	f7fe fc46 	bl	800c2d8 <move_window>
 800da4c:	4603      	mov	r3, r0
 800da4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da56:	3a01      	subs	r2, #1
 800da58:	60da      	str	r2, [r3, #12]
 800da5a:	e019      	b.n	800da90 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800da5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da60:	2b00      	cmp	r3, #0
 800da62:	d115      	bne.n	800da90 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800da64:	7ebb      	ldrb	r3, [r7, #26]
 800da66:	f003 0310 	and.w	r3, r3, #16
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d003      	beq.n	800da76 <f_open+0x1ba>
					res = FR_NO_FILE;
 800da6e:	2304      	movs	r3, #4
 800da70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800da74:	e00c      	b.n	800da90 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800da76:	79fb      	ldrb	r3, [r7, #7]
 800da78:	f003 0302 	and.w	r3, r3, #2
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d007      	beq.n	800da90 <f_open+0x1d4>
 800da80:	7ebb      	ldrb	r3, [r7, #26]
 800da82:	f003 0301 	and.w	r3, r3, #1
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <f_open+0x1d4>
						res = FR_DENIED;
 800da8a:	2307      	movs	r3, #7
 800da8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800da90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da94:	2b00      	cmp	r3, #0
 800da96:	d128      	bne.n	800daea <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800da98:	79fb      	ldrb	r3, [r7, #7]
 800da9a:	f003 0308 	and.w	r3, r3, #8
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d003      	beq.n	800daaa <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daa8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dab8:	79fb      	ldrb	r3, [r7, #7]
 800daba:	f023 0301 	bic.w	r3, r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	bf14      	ite	ne
 800dac2:	2301      	movne	r3, #1
 800dac4:	2300      	moveq	r3, #0
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	461a      	mov	r2, r3
 800daca:	f107 0314 	add.w	r3, r7, #20
 800dace:	4611      	mov	r1, r2
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7fe facf 	bl	800c074 <inc_lock>
 800dad6:	4602      	mov	r2, r0
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	691b      	ldr	r3, [r3, #16]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d102      	bne.n	800daea <f_open+0x22e>
 800dae4:	2302      	movs	r3, #2
 800dae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800daea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daee:	2b00      	cmp	r3, #0
 800daf0:	f040 8095 	bne.w	800dc1e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daf8:	4611      	mov	r1, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff f8f3 	bl	800cce6 <ld_clust>
 800db00:	4602      	mov	r2, r0
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800db06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db08:	331c      	adds	r3, #28
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fe f94c 	bl	800bda8 <ld_dword>
 800db10:	4602      	mov	r2, r0
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2200      	movs	r2, #0
 800db1a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	88da      	ldrh	r2, [r3, #6]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	79fa      	ldrb	r2, [r7, #7]
 800db2e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2200      	movs	r2, #0
 800db34:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2200      	movs	r2, #0
 800db3a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	3330      	adds	r3, #48	; 0x30
 800db46:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db4a:	2100      	movs	r1, #0
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fe f9b6 	bl	800bebe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	f003 0320 	and.w	r3, r3, #32
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d060      	beq.n	800dc1e <f_open+0x362>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d05c      	beq.n	800dc1e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	68da      	ldr	r2, [r3, #12]
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	895b      	ldrh	r3, [r3, #10]
 800db70:	025b      	lsls	r3, r3, #9
 800db72:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	68db      	ldr	r3, [r3, #12]
 800db7e:	657b      	str	r3, [r7, #84]	; 0x54
 800db80:	e016      	b.n	800dbb0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800db86:	4618      	mov	r0, r3
 800db88:	f7fe fc61 	bl	800c44e <get_fat>
 800db8c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800db8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db90:	2b01      	cmp	r3, #1
 800db92:	d802      	bhi.n	800db9a <f_open+0x2de>
 800db94:	2302      	movs	r3, #2
 800db96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800db9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dba0:	d102      	bne.n	800dba8 <f_open+0x2ec>
 800dba2:	2301      	movs	r3, #1
 800dba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dba8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	657b      	str	r3, [r7, #84]	; 0x54
 800dbb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d103      	bne.n	800dbc0 <f_open+0x304>
 800dbb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dbba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d8e0      	bhi.n	800db82 <f_open+0x2c6>
				}
				fp->clust = clst;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dbc4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dbc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d127      	bne.n	800dc1e <f_open+0x362>
 800dbce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d022      	beq.n	800dc1e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fe fc17 	bl	800c410 <clust2sect>
 800dbe2:	6478      	str	r0, [r7, #68]	; 0x44
 800dbe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d103      	bne.n	800dbf2 <f_open+0x336>
						res = FR_INT_ERR;
 800dbea:	2302      	movs	r3, #2
 800dbec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dbf0:	e015      	b.n	800dc1e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dbf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbf4:	0a5a      	lsrs	r2, r3, #9
 800dbf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbf8:	441a      	add	r2, r3
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	7858      	ldrb	r0, [r3, #1]
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6a1a      	ldr	r2, [r3, #32]
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	f7fe f855 	bl	800bcbc <disk_read>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <f_open+0x362>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dc1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d002      	beq.n	800dc2c <f_open+0x370>
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800dc2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3760      	adds	r7, #96	; 0x60
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b08c      	sub	sp, #48	; 0x30
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	60f8      	str	r0, [r7, #12]
 800dc40:	60b9      	str	r1, [r7, #8]
 800dc42:	607a      	str	r2, [r7, #4]
 800dc44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f107 0210 	add.w	r2, r7, #16
 800dc56:	4611      	mov	r1, r2
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff fdb3 	bl	800d7c4 <validate>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800dc64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d107      	bne.n	800dc7c <f_write+0x44>
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	7d5b      	ldrb	r3, [r3, #21]
 800dc70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800dc74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <f_write+0x4a>
 800dc7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dc80:	e14b      	b.n	800df1a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	7d1b      	ldrb	r3, [r3, #20]
 800dc86:	f003 0302 	and.w	r3, r3, #2
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d101      	bne.n	800dc92 <f_write+0x5a>
 800dc8e:	2307      	movs	r3, #7
 800dc90:	e143      	b.n	800df1a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	699a      	ldr	r2, [r3, #24]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	441a      	add	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	699b      	ldr	r3, [r3, #24]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	f080 812d 	bcs.w	800defe <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	43db      	mvns	r3, r3
 800dcaa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dcac:	e127      	b.n	800defe <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	699b      	ldr	r3, [r3, #24]
 800dcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f040 80e3 	bne.w	800de82 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	699b      	ldr	r3, [r3, #24]
 800dcc0:	0a5b      	lsrs	r3, r3, #9
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	8952      	ldrh	r2, [r2, #10]
 800dcc6:	3a01      	subs	r2, #1
 800dcc8:	4013      	ands	r3, r2
 800dcca:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dccc:	69bb      	ldr	r3, [r7, #24]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d143      	bne.n	800dd5a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	699b      	ldr	r3, [r3, #24]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10c      	bne.n	800dcf4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	689b      	ldr	r3, [r3, #8]
 800dcde:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800dce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d11a      	bne.n	800dd1c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2100      	movs	r1, #0
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fe fda8 	bl	800c840 <create_chain>
 800dcf0:	62b8      	str	r0, [r7, #40]	; 0x28
 800dcf2:	e013      	b.n	800dd1c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d007      	beq.n	800dd0c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	699b      	ldr	r3, [r3, #24]
 800dd00:	4619      	mov	r1, r3
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f7fe fe34 	bl	800c970 <clmt_clust>
 800dd08:	62b8      	str	r0, [r7, #40]	; 0x28
 800dd0a:	e007      	b.n	800dd1c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	4619      	mov	r1, r3
 800dd14:	4610      	mov	r0, r2
 800dd16:	f7fe fd93 	bl	800c840 <create_chain>
 800dd1a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	f000 80f2 	beq.w	800df08 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d104      	bne.n	800dd34 <f_write+0xfc>
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2202      	movs	r2, #2
 800dd2e:	755a      	strb	r2, [r3, #21]
 800dd30:	2302      	movs	r3, #2
 800dd32:	e0f2      	b.n	800df1a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd3a:	d104      	bne.n	800dd46 <f_write+0x10e>
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	755a      	strb	r2, [r3, #21]
 800dd42:	2301      	movs	r3, #1
 800dd44:	e0e9      	b.n	800df1a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd4a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	689b      	ldr	r3, [r3, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d102      	bne.n	800dd5a <f_write+0x122>
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd58:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	7d1b      	ldrb	r3, [r3, #20]
 800dd5e:	b25b      	sxtb	r3, r3
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	da18      	bge.n	800dd96 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	7858      	ldrb	r0, [r3, #1]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6a1a      	ldr	r2, [r3, #32]
 800dd72:	2301      	movs	r3, #1
 800dd74:	f7fd ffc2 	bl	800bcfc <disk_write>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d004      	beq.n	800dd88 <f_write+0x150>
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2201      	movs	r2, #1
 800dd82:	755a      	strb	r2, [r3, #21]
 800dd84:	2301      	movs	r3, #1
 800dd86:	e0c8      	b.n	800df1a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	7d1b      	ldrb	r3, [r3, #20]
 800dd8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dd96:	693a      	ldr	r2, [r7, #16]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	69db      	ldr	r3, [r3, #28]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	4610      	mov	r0, r2
 800dda0:	f7fe fb36 	bl	800c410 <clust2sect>
 800dda4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d104      	bne.n	800ddb6 <f_write+0x17e>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2202      	movs	r2, #2
 800ddb0:	755a      	strb	r2, [r3, #21]
 800ddb2:	2302      	movs	r3, #2
 800ddb4:	e0b1      	b.n	800df1a <f_write+0x2e2>
			sect += csect;
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	4413      	add	r3, r2
 800ddbc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	0a5b      	lsrs	r3, r3, #9
 800ddc2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ddc4:	6a3b      	ldr	r3, [r7, #32]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d03c      	beq.n	800de44 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ddca:	69ba      	ldr	r2, [r7, #24]
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	4413      	add	r3, r2
 800ddd0:	693a      	ldr	r2, [r7, #16]
 800ddd2:	8952      	ldrh	r2, [r2, #10]
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d905      	bls.n	800dde4 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	895b      	ldrh	r3, [r3, #10]
 800dddc:	461a      	mov	r2, r3
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	7858      	ldrb	r0, [r3, #1]
 800dde8:	6a3b      	ldr	r3, [r7, #32]
 800ddea:	697a      	ldr	r2, [r7, #20]
 800ddec:	69f9      	ldr	r1, [r7, #28]
 800ddee:	f7fd ff85 	bl	800bcfc <disk_write>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d004      	beq.n	800de02 <f_write+0x1ca>
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	755a      	strb	r2, [r3, #21]
 800ddfe:	2301      	movs	r3, #1
 800de00:	e08b      	b.n	800df1a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6a1a      	ldr	r2, [r3, #32]
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	1ad3      	subs	r3, r2, r3
 800de0a:	6a3a      	ldr	r2, [r7, #32]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	d915      	bls.n	800de3c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6a1a      	ldr	r2, [r3, #32]
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	025b      	lsls	r3, r3, #9
 800de20:	69fa      	ldr	r2, [r7, #28]
 800de22:	4413      	add	r3, r2
 800de24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de28:	4619      	mov	r1, r3
 800de2a:	f7fe f827 	bl	800be7c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	7d1b      	ldrb	r3, [r3, #20]
 800de32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de36:	b2da      	uxtb	r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800de3c:	6a3b      	ldr	r3, [r7, #32]
 800de3e:	025b      	lsls	r3, r3, #9
 800de40:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800de42:	e03f      	b.n	800dec4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	6a1b      	ldr	r3, [r3, #32]
 800de48:	697a      	ldr	r2, [r7, #20]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d016      	beq.n	800de7c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	699a      	ldr	r2, [r3, #24]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800de56:	429a      	cmp	r2, r3
 800de58:	d210      	bcs.n	800de7c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800de5a:	693b      	ldr	r3, [r7, #16]
 800de5c:	7858      	ldrb	r0, [r3, #1]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de64:	2301      	movs	r3, #1
 800de66:	697a      	ldr	r2, [r7, #20]
 800de68:	f7fd ff28 	bl	800bcbc <disk_read>
 800de6c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d004      	beq.n	800de7c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2201      	movs	r2, #1
 800de76:	755a      	strb	r2, [r3, #21]
 800de78:	2301      	movs	r3, #1
 800de7a:	e04e      	b.n	800df1a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	697a      	ldr	r2, [r7, #20]
 800de80:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	699b      	ldr	r3, [r3, #24]
 800de86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de8a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800de8e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800de90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	429a      	cmp	r2, r3
 800de96:	d901      	bls.n	800de9c <f_write+0x264>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	699b      	ldr	r3, [r3, #24]
 800dea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deaa:	4413      	add	r3, r2
 800deac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deae:	69f9      	ldr	r1, [r7, #28]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7fd ffe3 	bl	800be7c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	7d1b      	ldrb	r3, [r3, #20]
 800deba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800debe:	b2da      	uxtb	r2, r3
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dec4:	69fa      	ldr	r2, [r7, #28]
 800dec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec8:	4413      	add	r3, r2
 800deca:	61fb      	str	r3, [r7, #28]
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	699a      	ldr	r2, [r3, #24]
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	441a      	add	r2, r3
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	619a      	str	r2, [r3, #24]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	68da      	ldr	r2, [r3, #12]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	699b      	ldr	r3, [r3, #24]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	bf38      	it	cc
 800dee4:	461a      	movcc	r2, r3
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	60da      	str	r2, [r3, #12]
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	681a      	ldr	r2, [r3, #0]
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	441a      	add	r2, r3
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	601a      	str	r2, [r3, #0]
 800def6:	687a      	ldr	r2, [r7, #4]
 800def8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	f47f aed4 	bne.w	800dcae <f_write+0x76>
 800df06:	e000      	b.n	800df0a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df08:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	7d1b      	ldrb	r3, [r3, #20]
 800df0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df12:	b2da      	uxtb	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3730      	adds	r7, #48	; 0x30
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b086      	sub	sp, #24
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f107 0208 	add.w	r2, r7, #8
 800df30:	4611      	mov	r1, r2
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff fc46 	bl	800d7c4 <validate>
 800df38:	4603      	mov	r3, r0
 800df3a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800df3c:	7dfb      	ldrb	r3, [r7, #23]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d168      	bne.n	800e014 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	7d1b      	ldrb	r3, [r3, #20]
 800df46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d062      	beq.n	800e014 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	7d1b      	ldrb	r3, [r3, #20]
 800df52:	b25b      	sxtb	r3, r3
 800df54:	2b00      	cmp	r3, #0
 800df56:	da15      	bge.n	800df84 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	7858      	ldrb	r0, [r3, #1]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a1a      	ldr	r2, [r3, #32]
 800df66:	2301      	movs	r3, #1
 800df68:	f7fd fec8 	bl	800bcfc <disk_write>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d001      	beq.n	800df76 <f_sync+0x54>
 800df72:	2301      	movs	r3, #1
 800df74:	e04f      	b.n	800e016 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	7d1b      	ldrb	r3, [r3, #20]
 800df7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800df84:	f7fd f91a 	bl	800b1bc <get_fattime>
 800df88:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800df8a:	68ba      	ldr	r2, [r7, #8]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df90:	4619      	mov	r1, r3
 800df92:	4610      	mov	r0, r2
 800df94:	f7fe f9a0 	bl	800c2d8 <move_window>
 800df98:	4603      	mov	r3, r0
 800df9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d138      	bne.n	800e014 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfa6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	330b      	adds	r3, #11
 800dfac:	781a      	ldrb	r2, [r3, #0]
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	330b      	adds	r3, #11
 800dfb2:	f042 0220 	orr.w	r2, r2, #32
 800dfb6:	b2d2      	uxtb	r2, r2
 800dfb8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6818      	ldr	r0, [r3, #0]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	689b      	ldr	r3, [r3, #8]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	68f9      	ldr	r1, [r7, #12]
 800dfc6:	f7fe fead 	bl	800cd24 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f103 021c 	add.w	r2, r3, #28
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	4610      	mov	r0, r2
 800dfd8:	f7fd ff24 	bl	800be24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	3316      	adds	r3, #22
 800dfe0:	6939      	ldr	r1, [r7, #16]
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fd ff1e 	bl	800be24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	3312      	adds	r3, #18
 800dfec:	2100      	movs	r1, #0
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fd fefd 	bl	800bdee <st_word>
					fs->wflag = 1;
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	2201      	movs	r2, #1
 800dff8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dffa:	68bb      	ldr	r3, [r7, #8]
 800dffc:	4618      	mov	r0, r3
 800dffe:	f7fe f999 	bl	800c334 <sync_fs>
 800e002:	4603      	mov	r3, r0
 800e004:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	7d1b      	ldrb	r3, [r3, #20]
 800e00a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e00e:	b2da      	uxtb	r2, r3
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e014:	7dfb      	ldrb	r3, [r7, #23]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3718      	adds	r7, #24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7ff ff7b 	bl	800df22 <f_sync>
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e030:	7bfb      	ldrb	r3, [r7, #15]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d118      	bne.n	800e068 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f107 0208 	add.w	r2, r7, #8
 800e03c:	4611      	mov	r1, r2
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff fbc0 	bl	800d7c4 <validate>
 800e044:	4603      	mov	r3, r0
 800e046:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e048:	7bfb      	ldrb	r3, [r7, #15]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d10c      	bne.n	800e068 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	4618      	mov	r0, r3
 800e054:	f7fe f89c 	bl	800c190 <dec_lock>
 800e058:	4603      	mov	r3, r0
 800e05a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e05c:	7bfb      	ldrb	r3, [r7, #15]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d102      	bne.n	800e068 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e068:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b090      	sub	sp, #64	; 0x40
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
 800e07a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f107 0208 	add.w	r2, r7, #8
 800e082:	4611      	mov	r1, r2
 800e084:	4618      	mov	r0, r3
 800e086:	f7ff fb9d 	bl	800d7c4 <validate>
 800e08a:	4603      	mov	r3, r0
 800e08c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e090:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e094:	2b00      	cmp	r3, #0
 800e096:	d103      	bne.n	800e0a0 <f_lseek+0x2e>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	7d5b      	ldrb	r3, [r3, #21]
 800e09c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e0a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d002      	beq.n	800e0ae <f_lseek+0x3c>
 800e0a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e0ac:	e1e6      	b.n	800e47c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f000 80d1 	beq.w	800e25a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0be:	d15a      	bne.n	800e176 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0c4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c8:	1d1a      	adds	r2, r3, #4
 800e0ca:	627a      	str	r2, [r7, #36]	; 0x24
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	617b      	str	r3, [r7, #20]
 800e0d0:	2302      	movs	r3, #2
 800e0d2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d03a      	beq.n	800e156 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0e2:	613b      	str	r3, [r7, #16]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ea:	3302      	adds	r3, #2
 800e0ec:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f0:	60fb      	str	r3, [r7, #12]
 800e0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fe f9a6 	bl	800c44e <get_fat>
 800e102:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	2b01      	cmp	r3, #1
 800e108:	d804      	bhi.n	800e114 <f_lseek+0xa2>
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2202      	movs	r2, #2
 800e10e:	755a      	strb	r2, [r3, #21]
 800e110:	2302      	movs	r3, #2
 800e112:	e1b3      	b.n	800e47c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e11a:	d104      	bne.n	800e126 <f_lseek+0xb4>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	755a      	strb	r2, [r3, #21]
 800e122:	2301      	movs	r3, #1
 800e124:	e1aa      	b.n	800e47c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	3301      	adds	r3, #1
 800e12a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d0de      	beq.n	800e0ee <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	429a      	cmp	r2, r3
 800e136:	d809      	bhi.n	800e14c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	1d1a      	adds	r2, r3, #4
 800e13c:	627a      	str	r2, [r7, #36]	; 0x24
 800e13e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e140:	601a      	str	r2, [r3, #0]
 800e142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e144:	1d1a      	adds	r2, r3, #4
 800e146:	627a      	str	r2, [r7, #36]	; 0x24
 800e148:	693a      	ldr	r2, [r7, #16]
 800e14a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e152:	429a      	cmp	r2, r3
 800e154:	d3c4      	bcc.n	800e0e0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e15c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e15e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	429a      	cmp	r2, r3
 800e164:	d803      	bhi.n	800e16e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e168:	2200      	movs	r2, #0
 800e16a:	601a      	str	r2, [r3, #0]
 800e16c:	e184      	b.n	800e478 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e16e:	2311      	movs	r3, #17
 800e170:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e174:	e180      	b.n	800e478 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	683a      	ldr	r2, [r7, #0]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d902      	bls.n	800e186 <f_lseek+0x114>
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	683a      	ldr	r2, [r7, #0]
 800e18a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	f000 8172 	beq.w	800e478 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	3b01      	subs	r3, #1
 800e198:	4619      	mov	r1, r3
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f7fe fbe8 	bl	800c970 <clmt_clust>
 800e1a0:	4602      	mov	r2, r0
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e1a6:	68ba      	ldr	r2, [r7, #8]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	69db      	ldr	r3, [r3, #28]
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	f7fe f92e 	bl	800c410 <clust2sect>
 800e1b4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d104      	bne.n	800e1c6 <f_lseek+0x154>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2202      	movs	r2, #2
 800e1c0:	755a      	strb	r2, [r3, #21]
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	e15a      	b.n	800e47c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	3b01      	subs	r3, #1
 800e1ca:	0a5b      	lsrs	r3, r3, #9
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	8952      	ldrh	r2, [r2, #10]
 800e1d0:	3a01      	subs	r2, #1
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	69ba      	ldr	r2, [r7, #24]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	699b      	ldr	r3, [r3, #24]
 800e1de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	f000 8148 	beq.w	800e478 <f_lseek+0x406>
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a1b      	ldr	r3, [r3, #32]
 800e1ec:	69ba      	ldr	r2, [r7, #24]
 800e1ee:	429a      	cmp	r2, r3
 800e1f0:	f000 8142 	beq.w	800e478 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	7d1b      	ldrb	r3, [r3, #20]
 800e1f8:	b25b      	sxtb	r3, r3
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	da18      	bge.n	800e230 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	7858      	ldrb	r0, [r3, #1]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6a1a      	ldr	r2, [r3, #32]
 800e20c:	2301      	movs	r3, #1
 800e20e:	f7fd fd75 	bl	800bcfc <disk_write>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	d004      	beq.n	800e222 <f_lseek+0x1b0>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	755a      	strb	r2, [r3, #21]
 800e21e:	2301      	movs	r3, #1
 800e220:	e12c      	b.n	800e47c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	7d1b      	ldrb	r3, [r3, #20]
 800e226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e22a:	b2da      	uxtb	r2, r3
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	7858      	ldrb	r0, [r3, #1]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e23a:	2301      	movs	r3, #1
 800e23c:	69ba      	ldr	r2, [r7, #24]
 800e23e:	f7fd fd3d 	bl	800bcbc <disk_read>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d004      	beq.n	800e252 <f_lseek+0x1e0>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	755a      	strb	r2, [r3, #21]
 800e24e:	2301      	movs	r3, #1
 800e250:	e114      	b.n	800e47c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	69ba      	ldr	r2, [r7, #24]
 800e256:	621a      	str	r2, [r3, #32]
 800e258:	e10e      	b.n	800e478 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	683a      	ldr	r2, [r7, #0]
 800e260:	429a      	cmp	r2, r3
 800e262:	d908      	bls.n	800e276 <f_lseek+0x204>
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	7d1b      	ldrb	r3, [r3, #20]
 800e268:	f003 0302 	and.w	r3, r3, #2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d102      	bne.n	800e276 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68db      	ldr	r3, [r3, #12]
 800e274:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e27c:	2300      	movs	r3, #0
 800e27e:	637b      	str	r3, [r7, #52]	; 0x34
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e284:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f000 80a7 	beq.w	800e3dc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	895b      	ldrh	r3, [r3, #10]
 800e292:	025b      	lsls	r3, r3, #9
 800e294:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e296:	6a3b      	ldr	r3, [r7, #32]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d01b      	beq.n	800e2d4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	1e5a      	subs	r2, r3, #1
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	fbb2 f2f3 	udiv	r2, r2, r3
 800e2a6:	6a3b      	ldr	r3, [r7, #32]
 800e2a8:	1e59      	subs	r1, r3, #1
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d30f      	bcc.n	800e2d4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e2b4:	6a3b      	ldr	r3, [r7, #32]
 800e2b6:	1e5a      	subs	r2, r3, #1
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	425b      	negs	r3, r3
 800e2bc:	401a      	ands	r2, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	699b      	ldr	r3, [r3, #24]
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	1ad3      	subs	r3, r2, r3
 800e2ca:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	69db      	ldr	r3, [r3, #28]
 800e2d0:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2d2:	e022      	b.n	800e31a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	689b      	ldr	r3, [r3, #8]
 800e2d8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d119      	bne.n	800e314 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7fe faab 	bl	800c840 <create_chain>
 800e2ea:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ee:	2b01      	cmp	r3, #1
 800e2f0:	d104      	bne.n	800e2fc <f_lseek+0x28a>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2202      	movs	r2, #2
 800e2f6:	755a      	strb	r2, [r3, #21]
 800e2f8:	2302      	movs	r3, #2
 800e2fa:	e0bf      	b.n	800e47c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e302:	d104      	bne.n	800e30e <f_lseek+0x29c>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	2201      	movs	r2, #1
 800e308:	755a      	strb	r2, [r3, #21]
 800e30a:	2301      	movs	r3, #1
 800e30c:	e0b6      	b.n	800e47c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e312:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e318:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d05d      	beq.n	800e3dc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e320:	e03a      	b.n	800e398 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e322:	683a      	ldr	r2, [r7, #0]
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	1ad3      	subs	r3, r2, r3
 800e328:	603b      	str	r3, [r7, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	699a      	ldr	r2, [r3, #24]
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	441a      	add	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	7d1b      	ldrb	r3, [r3, #20]
 800e33a:	f003 0302 	and.w	r3, r3, #2
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00b      	beq.n	800e35a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e346:	4618      	mov	r0, r3
 800e348:	f7fe fa7a 	bl	800c840 <create_chain>
 800e34c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e350:	2b00      	cmp	r3, #0
 800e352:	d108      	bne.n	800e366 <f_lseek+0x2f4>
							ofs = 0; break;
 800e354:	2300      	movs	r3, #0
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	e022      	b.n	800e3a0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fe f875 	bl	800c44e <get_fat>
 800e364:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e36c:	d104      	bne.n	800e378 <f_lseek+0x306>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2201      	movs	r2, #1
 800e372:	755a      	strb	r2, [r3, #21]
 800e374:	2301      	movs	r3, #1
 800e376:	e081      	b.n	800e47c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d904      	bls.n	800e388 <f_lseek+0x316>
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e384:	429a      	cmp	r2, r3
 800e386:	d304      	bcc.n	800e392 <f_lseek+0x320>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2202      	movs	r2, #2
 800e38c:	755a      	strb	r2, [r3, #21]
 800e38e:	2302      	movs	r3, #2
 800e390:	e074      	b.n	800e47c <f_lseek+0x40a>
					fp->clust = clst;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e396:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e398:	683a      	ldr	r2, [r7, #0]
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d8c0      	bhi.n	800e322 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	699a      	ldr	r2, [r3, #24]
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	441a      	add	r2, r3
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d012      	beq.n	800e3dc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fe f828 	bl	800c410 <clust2sect>
 800e3c0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d104      	bne.n	800e3d2 <f_lseek+0x360>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	755a      	strb	r2, [r3, #21]
 800e3ce:	2302      	movs	r3, #2
 800e3d0:	e054      	b.n	800e47c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e3d2:	683b      	ldr	r3, [r7, #0]
 800e3d4:	0a5b      	lsrs	r3, r3, #9
 800e3d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3d8:	4413      	add	r3, r2
 800e3da:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	699a      	ldr	r2, [r3, #24]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d90a      	bls.n	800e3fe <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	699a      	ldr	r2, [r3, #24]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	7d1b      	ldrb	r3, [r3, #20]
 800e3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3f8:	b2da      	uxtb	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	699b      	ldr	r3, [r3, #24]
 800e402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e406:	2b00      	cmp	r3, #0
 800e408:	d036      	beq.n	800e478 <f_lseek+0x406>
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6a1b      	ldr	r3, [r3, #32]
 800e40e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e410:	429a      	cmp	r2, r3
 800e412:	d031      	beq.n	800e478 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7d1b      	ldrb	r3, [r3, #20]
 800e418:	b25b      	sxtb	r3, r3
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	da18      	bge.n	800e450 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	7858      	ldrb	r0, [r3, #1]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6a1a      	ldr	r2, [r3, #32]
 800e42c:	2301      	movs	r3, #1
 800e42e:	f7fd fc65 	bl	800bcfc <disk_write>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d004      	beq.n	800e442 <f_lseek+0x3d0>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	755a      	strb	r2, [r3, #21]
 800e43e:	2301      	movs	r3, #1
 800e440:	e01c      	b.n	800e47c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	7d1b      	ldrb	r3, [r3, #20]
 800e446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e44a:	b2da      	uxtb	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	7858      	ldrb	r0, [r3, #1]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e45a:	2301      	movs	r3, #1
 800e45c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e45e:	f7fd fc2d 	bl	800bcbc <disk_read>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d004      	beq.n	800e472 <f_lseek+0x400>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2201      	movs	r2, #1
 800e46c:	755a      	strb	r2, [r3, #21]
 800e46e:	2301      	movs	r3, #1
 800e470:	e004      	b.n	800e47c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e476:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e478:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3740      	adds	r7, #64	; 0x40
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b086      	sub	sp, #24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d101      	bne.n	800e498 <f_opendir+0x14>
 800e494:	2309      	movs	r3, #9
 800e496:	e064      	b.n	800e562 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e49c:	f107 010c 	add.w	r1, r7, #12
 800e4a0:	463b      	mov	r3, r7
 800e4a2:	2200      	movs	r2, #0
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7fe ff41 	bl	800d32c <find_volume>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e4ae:	7dfb      	ldrb	r3, [r7, #23]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d14f      	bne.n	800e554 <f_opendir+0xd0>
		obj->fs = fs;
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	4619      	mov	r1, r3
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f7fe fe28 	bl	800d114 <follow_path>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e4c8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d13d      	bne.n	800e54a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e4d4:	b25b      	sxtb	r3, r3
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	db12      	blt.n	800e500 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	799b      	ldrb	r3, [r3, #6]
 800e4de:	f003 0310 	and.w	r3, r3, #16
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d00a      	beq.n	800e4fc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	6a1b      	ldr	r3, [r3, #32]
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	4610      	mov	r0, r2
 800e4f0:	f7fe fbf9 	bl	800cce6 <ld_clust>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	609a      	str	r2, [r3, #8]
 800e4fa:	e001      	b.n	800e500 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e4fc:	2305      	movs	r3, #5
 800e4fe:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e500:	7dfb      	ldrb	r3, [r7, #23]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d121      	bne.n	800e54a <f_opendir+0xc6>
				obj->id = fs->id;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	88da      	ldrh	r2, [r3, #6]
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e50e:	2100      	movs	r1, #0
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7fe fa61 	bl	800c9d8 <dir_sdi>
 800e516:	4603      	mov	r3, r0
 800e518:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e51a:	7dfb      	ldrb	r3, [r7, #23]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d114      	bne.n	800e54a <f_opendir+0xc6>
					if (obj->sclust) {
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	689b      	ldr	r3, [r3, #8]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d00d      	beq.n	800e544 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e528:	2100      	movs	r1, #0
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7fd fda2 	bl	800c074 <inc_lock>
 800e530:	4602      	mov	r2, r0
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	691b      	ldr	r3, [r3, #16]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d105      	bne.n	800e54a <f_opendir+0xc6>
 800e53e:	2312      	movs	r3, #18
 800e540:	75fb      	strb	r3, [r7, #23]
 800e542:	e002      	b.n	800e54a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	2200      	movs	r2, #0
 800e548:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e54a:	7dfb      	ldrb	r3, [r7, #23]
 800e54c:	2b04      	cmp	r3, #4
 800e54e:	d101      	bne.n	800e554 <f_opendir+0xd0>
 800e550:	2305      	movs	r3, #5
 800e552:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e554:	7dfb      	ldrb	r3, [r7, #23]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d002      	beq.n	800e560 <f_opendir+0xdc>
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	2200      	movs	r2, #0
 800e55e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e560:	7dfb      	ldrb	r3, [r7, #23]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3718      	adds	r7, #24
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b084      	sub	sp, #16
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	f107 0208 	add.w	r2, r7, #8
 800e578:	4611      	mov	r1, r2
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7ff f922 	bl	800d7c4 <validate>
 800e580:	4603      	mov	r3, r0
 800e582:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e584:	7bfb      	ldrb	r3, [r7, #15]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d110      	bne.n	800e5ac <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d006      	beq.n	800e5a0 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	691b      	ldr	r3, [r3, #16]
 800e596:	4618      	mov	r0, r3
 800e598:	f7fd fdfa 	bl	800c190 <dec_lock>
 800e59c:	4603      	mov	r3, r0
 800e59e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d102      	bne.n	800e5ac <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	3710      	adds	r7, #16
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	bd80      	pop	{r7, pc}

0800e5b6 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e5b6:	b580      	push	{r7, lr}
 800e5b8:	b084      	sub	sp, #16
 800e5ba:	af00      	add	r7, sp, #0
 800e5bc:	6078      	str	r0, [r7, #4]
 800e5be:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f107 0208 	add.w	r2, r7, #8
 800e5c6:	4611      	mov	r1, r2
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7ff f8fb 	bl	800d7c4 <validate>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d126      	bne.n	800e626 <f_readdir+0x70>
		if (!fno) {
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d106      	bne.n	800e5ec <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e5de:	2100      	movs	r1, #0
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7fe f9f9 	bl	800c9d8 <dir_sdi>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	73fb      	strb	r3, [r7, #15]
 800e5ea:	e01c      	b.n	800e626 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e5ec:	2100      	movs	r1, #0
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7fe fbb8 	bl	800cd64 <dir_read>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	2b04      	cmp	r3, #4
 800e5fc:	d101      	bne.n	800e602 <f_readdir+0x4c>
 800e5fe:	2300      	movs	r3, #0
 800e600:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e602:	7bfb      	ldrb	r3, [r7, #15]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d10e      	bne.n	800e626 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e608:	6839      	ldr	r1, [r7, #0]
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7fe fc8e 	bl	800cf2c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e610:	2100      	movs	r1, #0
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7fe fa5b 	bl	800cace <dir_next>
 800e618:	4603      	mov	r3, r0
 800e61a:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e61c:	7bfb      	ldrb	r3, [r7, #15]
 800e61e:	2b04      	cmp	r3, #4
 800e620:	d101      	bne.n	800e626 <f_readdir+0x70>
 800e622:	2300      	movs	r3, #0
 800e624:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e626:	7bfb      	ldrb	r3, [r7, #15]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	3710      	adds	r7, #16
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e630:	b480      	push	{r7}
 800e632:	b087      	sub	sp, #28
 800e634:	af00      	add	r7, sp, #0
 800e636:	60f8      	str	r0, [r7, #12]
 800e638:	60b9      	str	r1, [r7, #8]
 800e63a:	4613      	mov	r3, r2
 800e63c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e63e:	2301      	movs	r3, #1
 800e640:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e642:	2300      	movs	r3, #0
 800e644:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e646:	4b1f      	ldr	r3, [pc, #124]	; (800e6c4 <FATFS_LinkDriverEx+0x94>)
 800e648:	7a5b      	ldrb	r3, [r3, #9]
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d131      	bne.n	800e6b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e650:	4b1c      	ldr	r3, [pc, #112]	; (800e6c4 <FATFS_LinkDriverEx+0x94>)
 800e652:	7a5b      	ldrb	r3, [r3, #9]
 800e654:	b2db      	uxtb	r3, r3
 800e656:	461a      	mov	r2, r3
 800e658:	4b1a      	ldr	r3, [pc, #104]	; (800e6c4 <FATFS_LinkDriverEx+0x94>)
 800e65a:	2100      	movs	r1, #0
 800e65c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e65e:	4b19      	ldr	r3, [pc, #100]	; (800e6c4 <FATFS_LinkDriverEx+0x94>)
 800e660:	7a5b      	ldrb	r3, [r3, #9]
 800e662:	b2db      	uxtb	r3, r3
 800e664:	4a17      	ldr	r2, [pc, #92]	; (800e6c4 <FATFS_LinkDriverEx+0x94>)
 800e666:	009b      	lsls	r3, r3, #2
 800e668:	4413      	add	r3, r2
 800e66a:	68fa      	ldr	r2, [r7, #12]
 800e66c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e66e:	4b15      	ldr	r3, [pc, #84]	; (800e6c4 <FATFS_LinkDriverEx+0x94>)
 800e670:	7a5b      	ldrb	r3, [r3, #9]
 800e672:	b2db      	uxtb	r3, r3
 800e674:	461a      	mov	r2, r3
 800e676:	4b13      	ldr	r3, [pc, #76]	; (800e6c4 <FATFS_LinkDriverEx+0x94>)
 800e678:	4413      	add	r3, r2
 800e67a:	79fa      	ldrb	r2, [r7, #7]
 800e67c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e67e:	4b11      	ldr	r3, [pc, #68]	; (800e6c4 <FATFS_LinkDriverEx+0x94>)
 800e680:	7a5b      	ldrb	r3, [r3, #9]
 800e682:	b2db      	uxtb	r3, r3
 800e684:	1c5a      	adds	r2, r3, #1
 800e686:	b2d1      	uxtb	r1, r2
 800e688:	4a0e      	ldr	r2, [pc, #56]	; (800e6c4 <FATFS_LinkDriverEx+0x94>)
 800e68a:	7251      	strb	r1, [r2, #9]
 800e68c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e68e:	7dbb      	ldrb	r3, [r7, #22]
 800e690:	3330      	adds	r3, #48	; 0x30
 800e692:	b2da      	uxtb	r2, r3
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	3301      	adds	r3, #1
 800e69c:	223a      	movs	r2, #58	; 0x3a
 800e69e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	3302      	adds	r3, #2
 800e6a4:	222f      	movs	r2, #47	; 0x2f
 800e6a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	3303      	adds	r3, #3
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e6b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	371c      	adds	r7, #28
 800e6ba:	46bd      	mov	sp, r7
 800e6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c0:	4770      	bx	lr
 800e6c2:	bf00      	nop
 800e6c4:	200004e8 	.word	0x200004e8

0800e6c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f7ff ffaa 	bl	800e630 <FATFS_LinkDriverEx>
 800e6dc:	4603      	mov	r3, r0
}
 800e6de:	4618      	mov	r0, r3
 800e6e0:	3708      	adds	r7, #8
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd80      	pop	{r7, pc}
	...

0800e6e8 <__errno>:
 800e6e8:	4b01      	ldr	r3, [pc, #4]	; (800e6f0 <__errno+0x8>)
 800e6ea:	6818      	ldr	r0, [r3, #0]
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	20000028 	.word	0x20000028

0800e6f4 <__libc_init_array>:
 800e6f4:	b570      	push	{r4, r5, r6, lr}
 800e6f6:	4d0d      	ldr	r5, [pc, #52]	; (800e72c <__libc_init_array+0x38>)
 800e6f8:	4c0d      	ldr	r4, [pc, #52]	; (800e730 <__libc_init_array+0x3c>)
 800e6fa:	1b64      	subs	r4, r4, r5
 800e6fc:	10a4      	asrs	r4, r4, #2
 800e6fe:	2600      	movs	r6, #0
 800e700:	42a6      	cmp	r6, r4
 800e702:	d109      	bne.n	800e718 <__libc_init_array+0x24>
 800e704:	4d0b      	ldr	r5, [pc, #44]	; (800e734 <__libc_init_array+0x40>)
 800e706:	4c0c      	ldr	r4, [pc, #48]	; (800e738 <__libc_init_array+0x44>)
 800e708:	f006 f884 	bl	8014814 <_init>
 800e70c:	1b64      	subs	r4, r4, r5
 800e70e:	10a4      	asrs	r4, r4, #2
 800e710:	2600      	movs	r6, #0
 800e712:	42a6      	cmp	r6, r4
 800e714:	d105      	bne.n	800e722 <__libc_init_array+0x2e>
 800e716:	bd70      	pop	{r4, r5, r6, pc}
 800e718:	f855 3b04 	ldr.w	r3, [r5], #4
 800e71c:	4798      	blx	r3
 800e71e:	3601      	adds	r6, #1
 800e720:	e7ee      	b.n	800e700 <__libc_init_array+0xc>
 800e722:	f855 3b04 	ldr.w	r3, [r5], #4
 800e726:	4798      	blx	r3
 800e728:	3601      	adds	r6, #1
 800e72a:	e7f2      	b.n	800e712 <__libc_init_array+0x1e>
 800e72c:	08015170 	.word	0x08015170
 800e730:	08015170 	.word	0x08015170
 800e734:	08015170 	.word	0x08015170
 800e738:	08015174 	.word	0x08015174

0800e73c <malloc>:
 800e73c:	4b02      	ldr	r3, [pc, #8]	; (800e748 <malloc+0xc>)
 800e73e:	4601      	mov	r1, r0
 800e740:	6818      	ldr	r0, [r3, #0]
 800e742:	f000 b869 	b.w	800e818 <_malloc_r>
 800e746:	bf00      	nop
 800e748:	20000028 	.word	0x20000028

0800e74c <memcpy>:
 800e74c:	440a      	add	r2, r1
 800e74e:	4291      	cmp	r1, r2
 800e750:	f100 33ff 	add.w	r3, r0, #4294967295
 800e754:	d100      	bne.n	800e758 <memcpy+0xc>
 800e756:	4770      	bx	lr
 800e758:	b510      	push	{r4, lr}
 800e75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e75e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e762:	4291      	cmp	r1, r2
 800e764:	d1f9      	bne.n	800e75a <memcpy+0xe>
 800e766:	bd10      	pop	{r4, pc}

0800e768 <memset>:
 800e768:	4402      	add	r2, r0
 800e76a:	4603      	mov	r3, r0
 800e76c:	4293      	cmp	r3, r2
 800e76e:	d100      	bne.n	800e772 <memset+0xa>
 800e770:	4770      	bx	lr
 800e772:	f803 1b01 	strb.w	r1, [r3], #1
 800e776:	e7f9      	b.n	800e76c <memset+0x4>

0800e778 <_free_r>:
 800e778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e77a:	2900      	cmp	r1, #0
 800e77c:	d048      	beq.n	800e810 <_free_r+0x98>
 800e77e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e782:	9001      	str	r0, [sp, #4]
 800e784:	2b00      	cmp	r3, #0
 800e786:	f1a1 0404 	sub.w	r4, r1, #4
 800e78a:	bfb8      	it	lt
 800e78c:	18e4      	addlt	r4, r4, r3
 800e78e:	f003 fbed 	bl	8011f6c <__malloc_lock>
 800e792:	4a20      	ldr	r2, [pc, #128]	; (800e814 <_free_r+0x9c>)
 800e794:	9801      	ldr	r0, [sp, #4]
 800e796:	6813      	ldr	r3, [r2, #0]
 800e798:	4615      	mov	r5, r2
 800e79a:	b933      	cbnz	r3, 800e7aa <_free_r+0x32>
 800e79c:	6063      	str	r3, [r4, #4]
 800e79e:	6014      	str	r4, [r2, #0]
 800e7a0:	b003      	add	sp, #12
 800e7a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7a6:	f003 bbe7 	b.w	8011f78 <__malloc_unlock>
 800e7aa:	42a3      	cmp	r3, r4
 800e7ac:	d90b      	bls.n	800e7c6 <_free_r+0x4e>
 800e7ae:	6821      	ldr	r1, [r4, #0]
 800e7b0:	1862      	adds	r2, r4, r1
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	bf04      	itt	eq
 800e7b6:	681a      	ldreq	r2, [r3, #0]
 800e7b8:	685b      	ldreq	r3, [r3, #4]
 800e7ba:	6063      	str	r3, [r4, #4]
 800e7bc:	bf04      	itt	eq
 800e7be:	1852      	addeq	r2, r2, r1
 800e7c0:	6022      	streq	r2, [r4, #0]
 800e7c2:	602c      	str	r4, [r5, #0]
 800e7c4:	e7ec      	b.n	800e7a0 <_free_r+0x28>
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	b10b      	cbz	r3, 800e7d0 <_free_r+0x58>
 800e7cc:	42a3      	cmp	r3, r4
 800e7ce:	d9fa      	bls.n	800e7c6 <_free_r+0x4e>
 800e7d0:	6811      	ldr	r1, [r2, #0]
 800e7d2:	1855      	adds	r5, r2, r1
 800e7d4:	42a5      	cmp	r5, r4
 800e7d6:	d10b      	bne.n	800e7f0 <_free_r+0x78>
 800e7d8:	6824      	ldr	r4, [r4, #0]
 800e7da:	4421      	add	r1, r4
 800e7dc:	1854      	adds	r4, r2, r1
 800e7de:	42a3      	cmp	r3, r4
 800e7e0:	6011      	str	r1, [r2, #0]
 800e7e2:	d1dd      	bne.n	800e7a0 <_free_r+0x28>
 800e7e4:	681c      	ldr	r4, [r3, #0]
 800e7e6:	685b      	ldr	r3, [r3, #4]
 800e7e8:	6053      	str	r3, [r2, #4]
 800e7ea:	4421      	add	r1, r4
 800e7ec:	6011      	str	r1, [r2, #0]
 800e7ee:	e7d7      	b.n	800e7a0 <_free_r+0x28>
 800e7f0:	d902      	bls.n	800e7f8 <_free_r+0x80>
 800e7f2:	230c      	movs	r3, #12
 800e7f4:	6003      	str	r3, [r0, #0]
 800e7f6:	e7d3      	b.n	800e7a0 <_free_r+0x28>
 800e7f8:	6825      	ldr	r5, [r4, #0]
 800e7fa:	1961      	adds	r1, r4, r5
 800e7fc:	428b      	cmp	r3, r1
 800e7fe:	bf04      	itt	eq
 800e800:	6819      	ldreq	r1, [r3, #0]
 800e802:	685b      	ldreq	r3, [r3, #4]
 800e804:	6063      	str	r3, [r4, #4]
 800e806:	bf04      	itt	eq
 800e808:	1949      	addeq	r1, r1, r5
 800e80a:	6021      	streq	r1, [r4, #0]
 800e80c:	6054      	str	r4, [r2, #4]
 800e80e:	e7c7      	b.n	800e7a0 <_free_r+0x28>
 800e810:	b003      	add	sp, #12
 800e812:	bd30      	pop	{r4, r5, pc}
 800e814:	200004f4 	.word	0x200004f4

0800e818 <_malloc_r>:
 800e818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e81a:	1ccd      	adds	r5, r1, #3
 800e81c:	f025 0503 	bic.w	r5, r5, #3
 800e820:	3508      	adds	r5, #8
 800e822:	2d0c      	cmp	r5, #12
 800e824:	bf38      	it	cc
 800e826:	250c      	movcc	r5, #12
 800e828:	2d00      	cmp	r5, #0
 800e82a:	4606      	mov	r6, r0
 800e82c:	db01      	blt.n	800e832 <_malloc_r+0x1a>
 800e82e:	42a9      	cmp	r1, r5
 800e830:	d903      	bls.n	800e83a <_malloc_r+0x22>
 800e832:	230c      	movs	r3, #12
 800e834:	6033      	str	r3, [r6, #0]
 800e836:	2000      	movs	r0, #0
 800e838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e83a:	f003 fb97 	bl	8011f6c <__malloc_lock>
 800e83e:	4921      	ldr	r1, [pc, #132]	; (800e8c4 <_malloc_r+0xac>)
 800e840:	680a      	ldr	r2, [r1, #0]
 800e842:	4614      	mov	r4, r2
 800e844:	b99c      	cbnz	r4, 800e86e <_malloc_r+0x56>
 800e846:	4f20      	ldr	r7, [pc, #128]	; (800e8c8 <_malloc_r+0xb0>)
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	b923      	cbnz	r3, 800e856 <_malloc_r+0x3e>
 800e84c:	4621      	mov	r1, r4
 800e84e:	4630      	mov	r0, r6
 800e850:	f000 feb6 	bl	800f5c0 <_sbrk_r>
 800e854:	6038      	str	r0, [r7, #0]
 800e856:	4629      	mov	r1, r5
 800e858:	4630      	mov	r0, r6
 800e85a:	f000 feb1 	bl	800f5c0 <_sbrk_r>
 800e85e:	1c43      	adds	r3, r0, #1
 800e860:	d123      	bne.n	800e8aa <_malloc_r+0x92>
 800e862:	230c      	movs	r3, #12
 800e864:	6033      	str	r3, [r6, #0]
 800e866:	4630      	mov	r0, r6
 800e868:	f003 fb86 	bl	8011f78 <__malloc_unlock>
 800e86c:	e7e3      	b.n	800e836 <_malloc_r+0x1e>
 800e86e:	6823      	ldr	r3, [r4, #0]
 800e870:	1b5b      	subs	r3, r3, r5
 800e872:	d417      	bmi.n	800e8a4 <_malloc_r+0x8c>
 800e874:	2b0b      	cmp	r3, #11
 800e876:	d903      	bls.n	800e880 <_malloc_r+0x68>
 800e878:	6023      	str	r3, [r4, #0]
 800e87a:	441c      	add	r4, r3
 800e87c:	6025      	str	r5, [r4, #0]
 800e87e:	e004      	b.n	800e88a <_malloc_r+0x72>
 800e880:	6863      	ldr	r3, [r4, #4]
 800e882:	42a2      	cmp	r2, r4
 800e884:	bf0c      	ite	eq
 800e886:	600b      	streq	r3, [r1, #0]
 800e888:	6053      	strne	r3, [r2, #4]
 800e88a:	4630      	mov	r0, r6
 800e88c:	f003 fb74 	bl	8011f78 <__malloc_unlock>
 800e890:	f104 000b 	add.w	r0, r4, #11
 800e894:	1d23      	adds	r3, r4, #4
 800e896:	f020 0007 	bic.w	r0, r0, #7
 800e89a:	1ac2      	subs	r2, r0, r3
 800e89c:	d0cc      	beq.n	800e838 <_malloc_r+0x20>
 800e89e:	1a1b      	subs	r3, r3, r0
 800e8a0:	50a3      	str	r3, [r4, r2]
 800e8a2:	e7c9      	b.n	800e838 <_malloc_r+0x20>
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	6864      	ldr	r4, [r4, #4]
 800e8a8:	e7cc      	b.n	800e844 <_malloc_r+0x2c>
 800e8aa:	1cc4      	adds	r4, r0, #3
 800e8ac:	f024 0403 	bic.w	r4, r4, #3
 800e8b0:	42a0      	cmp	r0, r4
 800e8b2:	d0e3      	beq.n	800e87c <_malloc_r+0x64>
 800e8b4:	1a21      	subs	r1, r4, r0
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	f000 fe82 	bl	800f5c0 <_sbrk_r>
 800e8bc:	3001      	adds	r0, #1
 800e8be:	d1dd      	bne.n	800e87c <_malloc_r+0x64>
 800e8c0:	e7cf      	b.n	800e862 <_malloc_r+0x4a>
 800e8c2:	bf00      	nop
 800e8c4:	200004f4 	.word	0x200004f4
 800e8c8:	200004f8 	.word	0x200004f8

0800e8cc <__cvt>:
 800e8cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d0:	ec55 4b10 	vmov	r4, r5, d0
 800e8d4:	2d00      	cmp	r5, #0
 800e8d6:	460e      	mov	r6, r1
 800e8d8:	4619      	mov	r1, r3
 800e8da:	462b      	mov	r3, r5
 800e8dc:	bfbb      	ittet	lt
 800e8de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e8e2:	461d      	movlt	r5, r3
 800e8e4:	2300      	movge	r3, #0
 800e8e6:	232d      	movlt	r3, #45	; 0x2d
 800e8e8:	700b      	strb	r3, [r1, #0]
 800e8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e8f0:	4691      	mov	r9, r2
 800e8f2:	f023 0820 	bic.w	r8, r3, #32
 800e8f6:	bfbc      	itt	lt
 800e8f8:	4622      	movlt	r2, r4
 800e8fa:	4614      	movlt	r4, r2
 800e8fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e900:	d005      	beq.n	800e90e <__cvt+0x42>
 800e902:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e906:	d100      	bne.n	800e90a <__cvt+0x3e>
 800e908:	3601      	adds	r6, #1
 800e90a:	2102      	movs	r1, #2
 800e90c:	e000      	b.n	800e910 <__cvt+0x44>
 800e90e:	2103      	movs	r1, #3
 800e910:	ab03      	add	r3, sp, #12
 800e912:	9301      	str	r3, [sp, #4]
 800e914:	ab02      	add	r3, sp, #8
 800e916:	9300      	str	r3, [sp, #0]
 800e918:	ec45 4b10 	vmov	d0, r4, r5
 800e91c:	4653      	mov	r3, sl
 800e91e:	4632      	mov	r2, r6
 800e920:	f001 ff82 	bl	8010828 <_dtoa_r>
 800e924:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e928:	4607      	mov	r7, r0
 800e92a:	d102      	bne.n	800e932 <__cvt+0x66>
 800e92c:	f019 0f01 	tst.w	r9, #1
 800e930:	d022      	beq.n	800e978 <__cvt+0xac>
 800e932:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e936:	eb07 0906 	add.w	r9, r7, r6
 800e93a:	d110      	bne.n	800e95e <__cvt+0x92>
 800e93c:	783b      	ldrb	r3, [r7, #0]
 800e93e:	2b30      	cmp	r3, #48	; 0x30
 800e940:	d10a      	bne.n	800e958 <__cvt+0x8c>
 800e942:	2200      	movs	r2, #0
 800e944:	2300      	movs	r3, #0
 800e946:	4620      	mov	r0, r4
 800e948:	4629      	mov	r1, r5
 800e94a:	f7f2 f8dd 	bl	8000b08 <__aeabi_dcmpeq>
 800e94e:	b918      	cbnz	r0, 800e958 <__cvt+0x8c>
 800e950:	f1c6 0601 	rsb	r6, r6, #1
 800e954:	f8ca 6000 	str.w	r6, [sl]
 800e958:	f8da 3000 	ldr.w	r3, [sl]
 800e95c:	4499      	add	r9, r3
 800e95e:	2200      	movs	r2, #0
 800e960:	2300      	movs	r3, #0
 800e962:	4620      	mov	r0, r4
 800e964:	4629      	mov	r1, r5
 800e966:	f7f2 f8cf 	bl	8000b08 <__aeabi_dcmpeq>
 800e96a:	b108      	cbz	r0, 800e970 <__cvt+0xa4>
 800e96c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e970:	2230      	movs	r2, #48	; 0x30
 800e972:	9b03      	ldr	r3, [sp, #12]
 800e974:	454b      	cmp	r3, r9
 800e976:	d307      	bcc.n	800e988 <__cvt+0xbc>
 800e978:	9b03      	ldr	r3, [sp, #12]
 800e97a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e97c:	1bdb      	subs	r3, r3, r7
 800e97e:	4638      	mov	r0, r7
 800e980:	6013      	str	r3, [r2, #0]
 800e982:	b004      	add	sp, #16
 800e984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e988:	1c59      	adds	r1, r3, #1
 800e98a:	9103      	str	r1, [sp, #12]
 800e98c:	701a      	strb	r2, [r3, #0]
 800e98e:	e7f0      	b.n	800e972 <__cvt+0xa6>

0800e990 <__exponent>:
 800e990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e992:	4603      	mov	r3, r0
 800e994:	2900      	cmp	r1, #0
 800e996:	bfb8      	it	lt
 800e998:	4249      	neglt	r1, r1
 800e99a:	f803 2b02 	strb.w	r2, [r3], #2
 800e99e:	bfb4      	ite	lt
 800e9a0:	222d      	movlt	r2, #45	; 0x2d
 800e9a2:	222b      	movge	r2, #43	; 0x2b
 800e9a4:	2909      	cmp	r1, #9
 800e9a6:	7042      	strb	r2, [r0, #1]
 800e9a8:	dd2a      	ble.n	800ea00 <__exponent+0x70>
 800e9aa:	f10d 0407 	add.w	r4, sp, #7
 800e9ae:	46a4      	mov	ip, r4
 800e9b0:	270a      	movs	r7, #10
 800e9b2:	46a6      	mov	lr, r4
 800e9b4:	460a      	mov	r2, r1
 800e9b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800e9ba:	fb07 1516 	mls	r5, r7, r6, r1
 800e9be:	3530      	adds	r5, #48	; 0x30
 800e9c0:	2a63      	cmp	r2, #99	; 0x63
 800e9c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800e9c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e9ca:	4631      	mov	r1, r6
 800e9cc:	dcf1      	bgt.n	800e9b2 <__exponent+0x22>
 800e9ce:	3130      	adds	r1, #48	; 0x30
 800e9d0:	f1ae 0502 	sub.w	r5, lr, #2
 800e9d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e9d8:	1c44      	adds	r4, r0, #1
 800e9da:	4629      	mov	r1, r5
 800e9dc:	4561      	cmp	r1, ip
 800e9de:	d30a      	bcc.n	800e9f6 <__exponent+0x66>
 800e9e0:	f10d 0209 	add.w	r2, sp, #9
 800e9e4:	eba2 020e 	sub.w	r2, r2, lr
 800e9e8:	4565      	cmp	r5, ip
 800e9ea:	bf88      	it	hi
 800e9ec:	2200      	movhi	r2, #0
 800e9ee:	4413      	add	r3, r2
 800e9f0:	1a18      	subs	r0, r3, r0
 800e9f2:	b003      	add	sp, #12
 800e9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e9fe:	e7ed      	b.n	800e9dc <__exponent+0x4c>
 800ea00:	2330      	movs	r3, #48	; 0x30
 800ea02:	3130      	adds	r1, #48	; 0x30
 800ea04:	7083      	strb	r3, [r0, #2]
 800ea06:	70c1      	strb	r1, [r0, #3]
 800ea08:	1d03      	adds	r3, r0, #4
 800ea0a:	e7f1      	b.n	800e9f0 <__exponent+0x60>

0800ea0c <_printf_float>:
 800ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea10:	ed2d 8b02 	vpush	{d8}
 800ea14:	b08d      	sub	sp, #52	; 0x34
 800ea16:	460c      	mov	r4, r1
 800ea18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ea1c:	4616      	mov	r6, r2
 800ea1e:	461f      	mov	r7, r3
 800ea20:	4605      	mov	r5, r0
 800ea22:	f003 fa13 	bl	8011e4c <_localeconv_r>
 800ea26:	f8d0 a000 	ldr.w	sl, [r0]
 800ea2a:	4650      	mov	r0, sl
 800ea2c:	f7f1 fbea 	bl	8000204 <strlen>
 800ea30:	2300      	movs	r3, #0
 800ea32:	930a      	str	r3, [sp, #40]	; 0x28
 800ea34:	6823      	ldr	r3, [r4, #0]
 800ea36:	9305      	str	r3, [sp, #20]
 800ea38:	f8d8 3000 	ldr.w	r3, [r8]
 800ea3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ea40:	3307      	adds	r3, #7
 800ea42:	f023 0307 	bic.w	r3, r3, #7
 800ea46:	f103 0208 	add.w	r2, r3, #8
 800ea4a:	f8c8 2000 	str.w	r2, [r8]
 800ea4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ea56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ea5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ea5e:	9307      	str	r3, [sp, #28]
 800ea60:	f8cd 8018 	str.w	r8, [sp, #24]
 800ea64:	ee08 0a10 	vmov	s16, r0
 800ea68:	4b9f      	ldr	r3, [pc, #636]	; (800ece8 <_printf_float+0x2dc>)
 800ea6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea72:	f7f2 f87b 	bl	8000b6c <__aeabi_dcmpun>
 800ea76:	bb88      	cbnz	r0, 800eadc <_printf_float+0xd0>
 800ea78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ea7c:	4b9a      	ldr	r3, [pc, #616]	; (800ece8 <_printf_float+0x2dc>)
 800ea7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ea82:	f7f2 f855 	bl	8000b30 <__aeabi_dcmple>
 800ea86:	bb48      	cbnz	r0, 800eadc <_printf_float+0xd0>
 800ea88:	2200      	movs	r2, #0
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	4640      	mov	r0, r8
 800ea8e:	4649      	mov	r1, r9
 800ea90:	f7f2 f844 	bl	8000b1c <__aeabi_dcmplt>
 800ea94:	b110      	cbz	r0, 800ea9c <_printf_float+0x90>
 800ea96:	232d      	movs	r3, #45	; 0x2d
 800ea98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea9c:	4b93      	ldr	r3, [pc, #588]	; (800ecec <_printf_float+0x2e0>)
 800ea9e:	4894      	ldr	r0, [pc, #592]	; (800ecf0 <_printf_float+0x2e4>)
 800eaa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eaa4:	bf94      	ite	ls
 800eaa6:	4698      	movls	r8, r3
 800eaa8:	4680      	movhi	r8, r0
 800eaaa:	2303      	movs	r3, #3
 800eaac:	6123      	str	r3, [r4, #16]
 800eaae:	9b05      	ldr	r3, [sp, #20]
 800eab0:	f023 0204 	bic.w	r2, r3, #4
 800eab4:	6022      	str	r2, [r4, #0]
 800eab6:	f04f 0900 	mov.w	r9, #0
 800eaba:	9700      	str	r7, [sp, #0]
 800eabc:	4633      	mov	r3, r6
 800eabe:	aa0b      	add	r2, sp, #44	; 0x2c
 800eac0:	4621      	mov	r1, r4
 800eac2:	4628      	mov	r0, r5
 800eac4:	f000 f9d8 	bl	800ee78 <_printf_common>
 800eac8:	3001      	adds	r0, #1
 800eaca:	f040 8090 	bne.w	800ebee <_printf_float+0x1e2>
 800eace:	f04f 30ff 	mov.w	r0, #4294967295
 800ead2:	b00d      	add	sp, #52	; 0x34
 800ead4:	ecbd 8b02 	vpop	{d8}
 800ead8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eadc:	4642      	mov	r2, r8
 800eade:	464b      	mov	r3, r9
 800eae0:	4640      	mov	r0, r8
 800eae2:	4649      	mov	r1, r9
 800eae4:	f7f2 f842 	bl	8000b6c <__aeabi_dcmpun>
 800eae8:	b140      	cbz	r0, 800eafc <_printf_float+0xf0>
 800eaea:	464b      	mov	r3, r9
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	bfbc      	itt	lt
 800eaf0:	232d      	movlt	r3, #45	; 0x2d
 800eaf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800eaf6:	487f      	ldr	r0, [pc, #508]	; (800ecf4 <_printf_float+0x2e8>)
 800eaf8:	4b7f      	ldr	r3, [pc, #508]	; (800ecf8 <_printf_float+0x2ec>)
 800eafa:	e7d1      	b.n	800eaa0 <_printf_float+0x94>
 800eafc:	6863      	ldr	r3, [r4, #4]
 800eafe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800eb02:	9206      	str	r2, [sp, #24]
 800eb04:	1c5a      	adds	r2, r3, #1
 800eb06:	d13f      	bne.n	800eb88 <_printf_float+0x17c>
 800eb08:	2306      	movs	r3, #6
 800eb0a:	6063      	str	r3, [r4, #4]
 800eb0c:	9b05      	ldr	r3, [sp, #20]
 800eb0e:	6861      	ldr	r1, [r4, #4]
 800eb10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb14:	2300      	movs	r3, #0
 800eb16:	9303      	str	r3, [sp, #12]
 800eb18:	ab0a      	add	r3, sp, #40	; 0x28
 800eb1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800eb1e:	ab09      	add	r3, sp, #36	; 0x24
 800eb20:	ec49 8b10 	vmov	d0, r8, r9
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	6022      	str	r2, [r4, #0]
 800eb28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	f7ff fecd 	bl	800e8cc <__cvt>
 800eb32:	9b06      	ldr	r3, [sp, #24]
 800eb34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb36:	2b47      	cmp	r3, #71	; 0x47
 800eb38:	4680      	mov	r8, r0
 800eb3a:	d108      	bne.n	800eb4e <_printf_float+0x142>
 800eb3c:	1cc8      	adds	r0, r1, #3
 800eb3e:	db02      	blt.n	800eb46 <_printf_float+0x13a>
 800eb40:	6863      	ldr	r3, [r4, #4]
 800eb42:	4299      	cmp	r1, r3
 800eb44:	dd41      	ble.n	800ebca <_printf_float+0x1be>
 800eb46:	f1ab 0b02 	sub.w	fp, fp, #2
 800eb4a:	fa5f fb8b 	uxtb.w	fp, fp
 800eb4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eb52:	d820      	bhi.n	800eb96 <_printf_float+0x18a>
 800eb54:	3901      	subs	r1, #1
 800eb56:	465a      	mov	r2, fp
 800eb58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800eb5c:	9109      	str	r1, [sp, #36]	; 0x24
 800eb5e:	f7ff ff17 	bl	800e990 <__exponent>
 800eb62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb64:	1813      	adds	r3, r2, r0
 800eb66:	2a01      	cmp	r2, #1
 800eb68:	4681      	mov	r9, r0
 800eb6a:	6123      	str	r3, [r4, #16]
 800eb6c:	dc02      	bgt.n	800eb74 <_printf_float+0x168>
 800eb6e:	6822      	ldr	r2, [r4, #0]
 800eb70:	07d2      	lsls	r2, r2, #31
 800eb72:	d501      	bpl.n	800eb78 <_printf_float+0x16c>
 800eb74:	3301      	adds	r3, #1
 800eb76:	6123      	str	r3, [r4, #16]
 800eb78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d09c      	beq.n	800eaba <_printf_float+0xae>
 800eb80:	232d      	movs	r3, #45	; 0x2d
 800eb82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb86:	e798      	b.n	800eaba <_printf_float+0xae>
 800eb88:	9a06      	ldr	r2, [sp, #24]
 800eb8a:	2a47      	cmp	r2, #71	; 0x47
 800eb8c:	d1be      	bne.n	800eb0c <_printf_float+0x100>
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1bc      	bne.n	800eb0c <_printf_float+0x100>
 800eb92:	2301      	movs	r3, #1
 800eb94:	e7b9      	b.n	800eb0a <_printf_float+0xfe>
 800eb96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800eb9a:	d118      	bne.n	800ebce <_printf_float+0x1c2>
 800eb9c:	2900      	cmp	r1, #0
 800eb9e:	6863      	ldr	r3, [r4, #4]
 800eba0:	dd0b      	ble.n	800ebba <_printf_float+0x1ae>
 800eba2:	6121      	str	r1, [r4, #16]
 800eba4:	b913      	cbnz	r3, 800ebac <_printf_float+0x1a0>
 800eba6:	6822      	ldr	r2, [r4, #0]
 800eba8:	07d0      	lsls	r0, r2, #31
 800ebaa:	d502      	bpl.n	800ebb2 <_printf_float+0x1a6>
 800ebac:	3301      	adds	r3, #1
 800ebae:	440b      	add	r3, r1
 800ebb0:	6123      	str	r3, [r4, #16]
 800ebb2:	65a1      	str	r1, [r4, #88]	; 0x58
 800ebb4:	f04f 0900 	mov.w	r9, #0
 800ebb8:	e7de      	b.n	800eb78 <_printf_float+0x16c>
 800ebba:	b913      	cbnz	r3, 800ebc2 <_printf_float+0x1b6>
 800ebbc:	6822      	ldr	r2, [r4, #0]
 800ebbe:	07d2      	lsls	r2, r2, #31
 800ebc0:	d501      	bpl.n	800ebc6 <_printf_float+0x1ba>
 800ebc2:	3302      	adds	r3, #2
 800ebc4:	e7f4      	b.n	800ebb0 <_printf_float+0x1a4>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e7f2      	b.n	800ebb0 <_printf_float+0x1a4>
 800ebca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ebce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebd0:	4299      	cmp	r1, r3
 800ebd2:	db05      	blt.n	800ebe0 <_printf_float+0x1d4>
 800ebd4:	6823      	ldr	r3, [r4, #0]
 800ebd6:	6121      	str	r1, [r4, #16]
 800ebd8:	07d8      	lsls	r0, r3, #31
 800ebda:	d5ea      	bpl.n	800ebb2 <_printf_float+0x1a6>
 800ebdc:	1c4b      	adds	r3, r1, #1
 800ebde:	e7e7      	b.n	800ebb0 <_printf_float+0x1a4>
 800ebe0:	2900      	cmp	r1, #0
 800ebe2:	bfd4      	ite	le
 800ebe4:	f1c1 0202 	rsble	r2, r1, #2
 800ebe8:	2201      	movgt	r2, #1
 800ebea:	4413      	add	r3, r2
 800ebec:	e7e0      	b.n	800ebb0 <_printf_float+0x1a4>
 800ebee:	6823      	ldr	r3, [r4, #0]
 800ebf0:	055a      	lsls	r2, r3, #21
 800ebf2:	d407      	bmi.n	800ec04 <_printf_float+0x1f8>
 800ebf4:	6923      	ldr	r3, [r4, #16]
 800ebf6:	4642      	mov	r2, r8
 800ebf8:	4631      	mov	r1, r6
 800ebfa:	4628      	mov	r0, r5
 800ebfc:	47b8      	blx	r7
 800ebfe:	3001      	adds	r0, #1
 800ec00:	d12c      	bne.n	800ec5c <_printf_float+0x250>
 800ec02:	e764      	b.n	800eace <_printf_float+0xc2>
 800ec04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec08:	f240 80e0 	bls.w	800edcc <_printf_float+0x3c0>
 800ec0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ec10:	2200      	movs	r2, #0
 800ec12:	2300      	movs	r3, #0
 800ec14:	f7f1 ff78 	bl	8000b08 <__aeabi_dcmpeq>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d034      	beq.n	800ec86 <_printf_float+0x27a>
 800ec1c:	4a37      	ldr	r2, [pc, #220]	; (800ecfc <_printf_float+0x2f0>)
 800ec1e:	2301      	movs	r3, #1
 800ec20:	4631      	mov	r1, r6
 800ec22:	4628      	mov	r0, r5
 800ec24:	47b8      	blx	r7
 800ec26:	3001      	adds	r0, #1
 800ec28:	f43f af51 	beq.w	800eace <_printf_float+0xc2>
 800ec2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec30:	429a      	cmp	r2, r3
 800ec32:	db02      	blt.n	800ec3a <_printf_float+0x22e>
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	07d8      	lsls	r0, r3, #31
 800ec38:	d510      	bpl.n	800ec5c <_printf_float+0x250>
 800ec3a:	ee18 3a10 	vmov	r3, s16
 800ec3e:	4652      	mov	r2, sl
 800ec40:	4631      	mov	r1, r6
 800ec42:	4628      	mov	r0, r5
 800ec44:	47b8      	blx	r7
 800ec46:	3001      	adds	r0, #1
 800ec48:	f43f af41 	beq.w	800eace <_printf_float+0xc2>
 800ec4c:	f04f 0800 	mov.w	r8, #0
 800ec50:	f104 091a 	add.w	r9, r4, #26
 800ec54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec56:	3b01      	subs	r3, #1
 800ec58:	4543      	cmp	r3, r8
 800ec5a:	dc09      	bgt.n	800ec70 <_printf_float+0x264>
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	079b      	lsls	r3, r3, #30
 800ec60:	f100 8105 	bmi.w	800ee6e <_printf_float+0x462>
 800ec64:	68e0      	ldr	r0, [r4, #12]
 800ec66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec68:	4298      	cmp	r0, r3
 800ec6a:	bfb8      	it	lt
 800ec6c:	4618      	movlt	r0, r3
 800ec6e:	e730      	b.n	800ead2 <_printf_float+0xc6>
 800ec70:	2301      	movs	r3, #1
 800ec72:	464a      	mov	r2, r9
 800ec74:	4631      	mov	r1, r6
 800ec76:	4628      	mov	r0, r5
 800ec78:	47b8      	blx	r7
 800ec7a:	3001      	adds	r0, #1
 800ec7c:	f43f af27 	beq.w	800eace <_printf_float+0xc2>
 800ec80:	f108 0801 	add.w	r8, r8, #1
 800ec84:	e7e6      	b.n	800ec54 <_printf_float+0x248>
 800ec86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dc39      	bgt.n	800ed00 <_printf_float+0x2f4>
 800ec8c:	4a1b      	ldr	r2, [pc, #108]	; (800ecfc <_printf_float+0x2f0>)
 800ec8e:	2301      	movs	r3, #1
 800ec90:	4631      	mov	r1, r6
 800ec92:	4628      	mov	r0, r5
 800ec94:	47b8      	blx	r7
 800ec96:	3001      	adds	r0, #1
 800ec98:	f43f af19 	beq.w	800eace <_printf_float+0xc2>
 800ec9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eca0:	4313      	orrs	r3, r2
 800eca2:	d102      	bne.n	800ecaa <_printf_float+0x29e>
 800eca4:	6823      	ldr	r3, [r4, #0]
 800eca6:	07d9      	lsls	r1, r3, #31
 800eca8:	d5d8      	bpl.n	800ec5c <_printf_float+0x250>
 800ecaa:	ee18 3a10 	vmov	r3, s16
 800ecae:	4652      	mov	r2, sl
 800ecb0:	4631      	mov	r1, r6
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	47b8      	blx	r7
 800ecb6:	3001      	adds	r0, #1
 800ecb8:	f43f af09 	beq.w	800eace <_printf_float+0xc2>
 800ecbc:	f04f 0900 	mov.w	r9, #0
 800ecc0:	f104 0a1a 	add.w	sl, r4, #26
 800ecc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecc6:	425b      	negs	r3, r3
 800ecc8:	454b      	cmp	r3, r9
 800ecca:	dc01      	bgt.n	800ecd0 <_printf_float+0x2c4>
 800eccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecce:	e792      	b.n	800ebf6 <_printf_float+0x1ea>
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	4652      	mov	r2, sl
 800ecd4:	4631      	mov	r1, r6
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	47b8      	blx	r7
 800ecda:	3001      	adds	r0, #1
 800ecdc:	f43f aef7 	beq.w	800eace <_printf_float+0xc2>
 800ece0:	f109 0901 	add.w	r9, r9, #1
 800ece4:	e7ee      	b.n	800ecc4 <_printf_float+0x2b8>
 800ece6:	bf00      	nop
 800ece8:	7fefffff 	.word	0x7fefffff
 800ecec:	08014d60 	.word	0x08014d60
 800ecf0:	08014d64 	.word	0x08014d64
 800ecf4:	08014d6c 	.word	0x08014d6c
 800ecf8:	08014d68 	.word	0x08014d68
 800ecfc:	080150d1 	.word	0x080150d1
 800ed00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed04:	429a      	cmp	r2, r3
 800ed06:	bfa8      	it	ge
 800ed08:	461a      	movge	r2, r3
 800ed0a:	2a00      	cmp	r2, #0
 800ed0c:	4691      	mov	r9, r2
 800ed0e:	dc37      	bgt.n	800ed80 <_printf_float+0x374>
 800ed10:	f04f 0b00 	mov.w	fp, #0
 800ed14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed18:	f104 021a 	add.w	r2, r4, #26
 800ed1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ed1e:	9305      	str	r3, [sp, #20]
 800ed20:	eba3 0309 	sub.w	r3, r3, r9
 800ed24:	455b      	cmp	r3, fp
 800ed26:	dc33      	bgt.n	800ed90 <_printf_float+0x384>
 800ed28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	db3b      	blt.n	800eda8 <_printf_float+0x39c>
 800ed30:	6823      	ldr	r3, [r4, #0]
 800ed32:	07da      	lsls	r2, r3, #31
 800ed34:	d438      	bmi.n	800eda8 <_printf_float+0x39c>
 800ed36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ed38:	9b05      	ldr	r3, [sp, #20]
 800ed3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ed3c:	1ad3      	subs	r3, r2, r3
 800ed3e:	eba2 0901 	sub.w	r9, r2, r1
 800ed42:	4599      	cmp	r9, r3
 800ed44:	bfa8      	it	ge
 800ed46:	4699      	movge	r9, r3
 800ed48:	f1b9 0f00 	cmp.w	r9, #0
 800ed4c:	dc35      	bgt.n	800edba <_printf_float+0x3ae>
 800ed4e:	f04f 0800 	mov.w	r8, #0
 800ed52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ed56:	f104 0a1a 	add.w	sl, r4, #26
 800ed5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed5e:	1a9b      	subs	r3, r3, r2
 800ed60:	eba3 0309 	sub.w	r3, r3, r9
 800ed64:	4543      	cmp	r3, r8
 800ed66:	f77f af79 	ble.w	800ec5c <_printf_float+0x250>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	4652      	mov	r2, sl
 800ed6e:	4631      	mov	r1, r6
 800ed70:	4628      	mov	r0, r5
 800ed72:	47b8      	blx	r7
 800ed74:	3001      	adds	r0, #1
 800ed76:	f43f aeaa 	beq.w	800eace <_printf_float+0xc2>
 800ed7a:	f108 0801 	add.w	r8, r8, #1
 800ed7e:	e7ec      	b.n	800ed5a <_printf_float+0x34e>
 800ed80:	4613      	mov	r3, r2
 800ed82:	4631      	mov	r1, r6
 800ed84:	4642      	mov	r2, r8
 800ed86:	4628      	mov	r0, r5
 800ed88:	47b8      	blx	r7
 800ed8a:	3001      	adds	r0, #1
 800ed8c:	d1c0      	bne.n	800ed10 <_printf_float+0x304>
 800ed8e:	e69e      	b.n	800eace <_printf_float+0xc2>
 800ed90:	2301      	movs	r3, #1
 800ed92:	4631      	mov	r1, r6
 800ed94:	4628      	mov	r0, r5
 800ed96:	9205      	str	r2, [sp, #20]
 800ed98:	47b8      	blx	r7
 800ed9a:	3001      	adds	r0, #1
 800ed9c:	f43f ae97 	beq.w	800eace <_printf_float+0xc2>
 800eda0:	9a05      	ldr	r2, [sp, #20]
 800eda2:	f10b 0b01 	add.w	fp, fp, #1
 800eda6:	e7b9      	b.n	800ed1c <_printf_float+0x310>
 800eda8:	ee18 3a10 	vmov	r3, s16
 800edac:	4652      	mov	r2, sl
 800edae:	4631      	mov	r1, r6
 800edb0:	4628      	mov	r0, r5
 800edb2:	47b8      	blx	r7
 800edb4:	3001      	adds	r0, #1
 800edb6:	d1be      	bne.n	800ed36 <_printf_float+0x32a>
 800edb8:	e689      	b.n	800eace <_printf_float+0xc2>
 800edba:	9a05      	ldr	r2, [sp, #20]
 800edbc:	464b      	mov	r3, r9
 800edbe:	4442      	add	r2, r8
 800edc0:	4631      	mov	r1, r6
 800edc2:	4628      	mov	r0, r5
 800edc4:	47b8      	blx	r7
 800edc6:	3001      	adds	r0, #1
 800edc8:	d1c1      	bne.n	800ed4e <_printf_float+0x342>
 800edca:	e680      	b.n	800eace <_printf_float+0xc2>
 800edcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edce:	2a01      	cmp	r2, #1
 800edd0:	dc01      	bgt.n	800edd6 <_printf_float+0x3ca>
 800edd2:	07db      	lsls	r3, r3, #31
 800edd4:	d538      	bpl.n	800ee48 <_printf_float+0x43c>
 800edd6:	2301      	movs	r3, #1
 800edd8:	4642      	mov	r2, r8
 800edda:	4631      	mov	r1, r6
 800eddc:	4628      	mov	r0, r5
 800edde:	47b8      	blx	r7
 800ede0:	3001      	adds	r0, #1
 800ede2:	f43f ae74 	beq.w	800eace <_printf_float+0xc2>
 800ede6:	ee18 3a10 	vmov	r3, s16
 800edea:	4652      	mov	r2, sl
 800edec:	4631      	mov	r1, r6
 800edee:	4628      	mov	r0, r5
 800edf0:	47b8      	blx	r7
 800edf2:	3001      	adds	r0, #1
 800edf4:	f43f ae6b 	beq.w	800eace <_printf_float+0xc2>
 800edf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800edfc:	2200      	movs	r2, #0
 800edfe:	2300      	movs	r3, #0
 800ee00:	f7f1 fe82 	bl	8000b08 <__aeabi_dcmpeq>
 800ee04:	b9d8      	cbnz	r0, 800ee3e <_printf_float+0x432>
 800ee06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee08:	f108 0201 	add.w	r2, r8, #1
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	4631      	mov	r1, r6
 800ee10:	4628      	mov	r0, r5
 800ee12:	47b8      	blx	r7
 800ee14:	3001      	adds	r0, #1
 800ee16:	d10e      	bne.n	800ee36 <_printf_float+0x42a>
 800ee18:	e659      	b.n	800eace <_printf_float+0xc2>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	4652      	mov	r2, sl
 800ee1e:	4631      	mov	r1, r6
 800ee20:	4628      	mov	r0, r5
 800ee22:	47b8      	blx	r7
 800ee24:	3001      	adds	r0, #1
 800ee26:	f43f ae52 	beq.w	800eace <_printf_float+0xc2>
 800ee2a:	f108 0801 	add.w	r8, r8, #1
 800ee2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee30:	3b01      	subs	r3, #1
 800ee32:	4543      	cmp	r3, r8
 800ee34:	dcf1      	bgt.n	800ee1a <_printf_float+0x40e>
 800ee36:	464b      	mov	r3, r9
 800ee38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ee3c:	e6dc      	b.n	800ebf8 <_printf_float+0x1ec>
 800ee3e:	f04f 0800 	mov.w	r8, #0
 800ee42:	f104 0a1a 	add.w	sl, r4, #26
 800ee46:	e7f2      	b.n	800ee2e <_printf_float+0x422>
 800ee48:	2301      	movs	r3, #1
 800ee4a:	4642      	mov	r2, r8
 800ee4c:	e7df      	b.n	800ee0e <_printf_float+0x402>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	464a      	mov	r2, r9
 800ee52:	4631      	mov	r1, r6
 800ee54:	4628      	mov	r0, r5
 800ee56:	47b8      	blx	r7
 800ee58:	3001      	adds	r0, #1
 800ee5a:	f43f ae38 	beq.w	800eace <_printf_float+0xc2>
 800ee5e:	f108 0801 	add.w	r8, r8, #1
 800ee62:	68e3      	ldr	r3, [r4, #12]
 800ee64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ee66:	1a5b      	subs	r3, r3, r1
 800ee68:	4543      	cmp	r3, r8
 800ee6a:	dcf0      	bgt.n	800ee4e <_printf_float+0x442>
 800ee6c:	e6fa      	b.n	800ec64 <_printf_float+0x258>
 800ee6e:	f04f 0800 	mov.w	r8, #0
 800ee72:	f104 0919 	add.w	r9, r4, #25
 800ee76:	e7f4      	b.n	800ee62 <_printf_float+0x456>

0800ee78 <_printf_common>:
 800ee78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee7c:	4616      	mov	r6, r2
 800ee7e:	4699      	mov	r9, r3
 800ee80:	688a      	ldr	r2, [r1, #8]
 800ee82:	690b      	ldr	r3, [r1, #16]
 800ee84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	bfb8      	it	lt
 800ee8c:	4613      	movlt	r3, r2
 800ee8e:	6033      	str	r3, [r6, #0]
 800ee90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee94:	4607      	mov	r7, r0
 800ee96:	460c      	mov	r4, r1
 800ee98:	b10a      	cbz	r2, 800ee9e <_printf_common+0x26>
 800ee9a:	3301      	adds	r3, #1
 800ee9c:	6033      	str	r3, [r6, #0]
 800ee9e:	6823      	ldr	r3, [r4, #0]
 800eea0:	0699      	lsls	r1, r3, #26
 800eea2:	bf42      	ittt	mi
 800eea4:	6833      	ldrmi	r3, [r6, #0]
 800eea6:	3302      	addmi	r3, #2
 800eea8:	6033      	strmi	r3, [r6, #0]
 800eeaa:	6825      	ldr	r5, [r4, #0]
 800eeac:	f015 0506 	ands.w	r5, r5, #6
 800eeb0:	d106      	bne.n	800eec0 <_printf_common+0x48>
 800eeb2:	f104 0a19 	add.w	sl, r4, #25
 800eeb6:	68e3      	ldr	r3, [r4, #12]
 800eeb8:	6832      	ldr	r2, [r6, #0]
 800eeba:	1a9b      	subs	r3, r3, r2
 800eebc:	42ab      	cmp	r3, r5
 800eebe:	dc26      	bgt.n	800ef0e <_printf_common+0x96>
 800eec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eec4:	1e13      	subs	r3, r2, #0
 800eec6:	6822      	ldr	r2, [r4, #0]
 800eec8:	bf18      	it	ne
 800eeca:	2301      	movne	r3, #1
 800eecc:	0692      	lsls	r2, r2, #26
 800eece:	d42b      	bmi.n	800ef28 <_printf_common+0xb0>
 800eed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eed4:	4649      	mov	r1, r9
 800eed6:	4638      	mov	r0, r7
 800eed8:	47c0      	blx	r8
 800eeda:	3001      	adds	r0, #1
 800eedc:	d01e      	beq.n	800ef1c <_printf_common+0xa4>
 800eede:	6823      	ldr	r3, [r4, #0]
 800eee0:	68e5      	ldr	r5, [r4, #12]
 800eee2:	6832      	ldr	r2, [r6, #0]
 800eee4:	f003 0306 	and.w	r3, r3, #6
 800eee8:	2b04      	cmp	r3, #4
 800eeea:	bf08      	it	eq
 800eeec:	1aad      	subeq	r5, r5, r2
 800eeee:	68a3      	ldr	r3, [r4, #8]
 800eef0:	6922      	ldr	r2, [r4, #16]
 800eef2:	bf0c      	ite	eq
 800eef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eef8:	2500      	movne	r5, #0
 800eefa:	4293      	cmp	r3, r2
 800eefc:	bfc4      	itt	gt
 800eefe:	1a9b      	subgt	r3, r3, r2
 800ef00:	18ed      	addgt	r5, r5, r3
 800ef02:	2600      	movs	r6, #0
 800ef04:	341a      	adds	r4, #26
 800ef06:	42b5      	cmp	r5, r6
 800ef08:	d11a      	bne.n	800ef40 <_printf_common+0xc8>
 800ef0a:	2000      	movs	r0, #0
 800ef0c:	e008      	b.n	800ef20 <_printf_common+0xa8>
 800ef0e:	2301      	movs	r3, #1
 800ef10:	4652      	mov	r2, sl
 800ef12:	4649      	mov	r1, r9
 800ef14:	4638      	mov	r0, r7
 800ef16:	47c0      	blx	r8
 800ef18:	3001      	adds	r0, #1
 800ef1a:	d103      	bne.n	800ef24 <_printf_common+0xac>
 800ef1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef24:	3501      	adds	r5, #1
 800ef26:	e7c6      	b.n	800eeb6 <_printf_common+0x3e>
 800ef28:	18e1      	adds	r1, r4, r3
 800ef2a:	1c5a      	adds	r2, r3, #1
 800ef2c:	2030      	movs	r0, #48	; 0x30
 800ef2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef32:	4422      	add	r2, r4
 800ef34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef3c:	3302      	adds	r3, #2
 800ef3e:	e7c7      	b.n	800eed0 <_printf_common+0x58>
 800ef40:	2301      	movs	r3, #1
 800ef42:	4622      	mov	r2, r4
 800ef44:	4649      	mov	r1, r9
 800ef46:	4638      	mov	r0, r7
 800ef48:	47c0      	blx	r8
 800ef4a:	3001      	adds	r0, #1
 800ef4c:	d0e6      	beq.n	800ef1c <_printf_common+0xa4>
 800ef4e:	3601      	adds	r6, #1
 800ef50:	e7d9      	b.n	800ef06 <_printf_common+0x8e>
	...

0800ef54 <_printf_i>:
 800ef54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef58:	460c      	mov	r4, r1
 800ef5a:	4691      	mov	r9, r2
 800ef5c:	7e27      	ldrb	r7, [r4, #24]
 800ef5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ef60:	2f78      	cmp	r7, #120	; 0x78
 800ef62:	4680      	mov	r8, r0
 800ef64:	469a      	mov	sl, r3
 800ef66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef6a:	d807      	bhi.n	800ef7c <_printf_i+0x28>
 800ef6c:	2f62      	cmp	r7, #98	; 0x62
 800ef6e:	d80a      	bhi.n	800ef86 <_printf_i+0x32>
 800ef70:	2f00      	cmp	r7, #0
 800ef72:	f000 80d8 	beq.w	800f126 <_printf_i+0x1d2>
 800ef76:	2f58      	cmp	r7, #88	; 0x58
 800ef78:	f000 80a3 	beq.w	800f0c2 <_printf_i+0x16e>
 800ef7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ef80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef84:	e03a      	b.n	800effc <_printf_i+0xa8>
 800ef86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef8a:	2b15      	cmp	r3, #21
 800ef8c:	d8f6      	bhi.n	800ef7c <_printf_i+0x28>
 800ef8e:	a001      	add	r0, pc, #4	; (adr r0, 800ef94 <_printf_i+0x40>)
 800ef90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ef94:	0800efed 	.word	0x0800efed
 800ef98:	0800f001 	.word	0x0800f001
 800ef9c:	0800ef7d 	.word	0x0800ef7d
 800efa0:	0800ef7d 	.word	0x0800ef7d
 800efa4:	0800ef7d 	.word	0x0800ef7d
 800efa8:	0800ef7d 	.word	0x0800ef7d
 800efac:	0800f001 	.word	0x0800f001
 800efb0:	0800ef7d 	.word	0x0800ef7d
 800efb4:	0800ef7d 	.word	0x0800ef7d
 800efb8:	0800ef7d 	.word	0x0800ef7d
 800efbc:	0800ef7d 	.word	0x0800ef7d
 800efc0:	0800f10d 	.word	0x0800f10d
 800efc4:	0800f031 	.word	0x0800f031
 800efc8:	0800f0ef 	.word	0x0800f0ef
 800efcc:	0800ef7d 	.word	0x0800ef7d
 800efd0:	0800ef7d 	.word	0x0800ef7d
 800efd4:	0800f12f 	.word	0x0800f12f
 800efd8:	0800ef7d 	.word	0x0800ef7d
 800efdc:	0800f031 	.word	0x0800f031
 800efe0:	0800ef7d 	.word	0x0800ef7d
 800efe4:	0800ef7d 	.word	0x0800ef7d
 800efe8:	0800f0f7 	.word	0x0800f0f7
 800efec:	680b      	ldr	r3, [r1, #0]
 800efee:	1d1a      	adds	r2, r3, #4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	600a      	str	r2, [r1, #0]
 800eff4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800eff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800effc:	2301      	movs	r3, #1
 800effe:	e0a3      	b.n	800f148 <_printf_i+0x1f4>
 800f000:	6825      	ldr	r5, [r4, #0]
 800f002:	6808      	ldr	r0, [r1, #0]
 800f004:	062e      	lsls	r6, r5, #24
 800f006:	f100 0304 	add.w	r3, r0, #4
 800f00a:	d50a      	bpl.n	800f022 <_printf_i+0xce>
 800f00c:	6805      	ldr	r5, [r0, #0]
 800f00e:	600b      	str	r3, [r1, #0]
 800f010:	2d00      	cmp	r5, #0
 800f012:	da03      	bge.n	800f01c <_printf_i+0xc8>
 800f014:	232d      	movs	r3, #45	; 0x2d
 800f016:	426d      	negs	r5, r5
 800f018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f01c:	485e      	ldr	r0, [pc, #376]	; (800f198 <_printf_i+0x244>)
 800f01e:	230a      	movs	r3, #10
 800f020:	e019      	b.n	800f056 <_printf_i+0x102>
 800f022:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f026:	6805      	ldr	r5, [r0, #0]
 800f028:	600b      	str	r3, [r1, #0]
 800f02a:	bf18      	it	ne
 800f02c:	b22d      	sxthne	r5, r5
 800f02e:	e7ef      	b.n	800f010 <_printf_i+0xbc>
 800f030:	680b      	ldr	r3, [r1, #0]
 800f032:	6825      	ldr	r5, [r4, #0]
 800f034:	1d18      	adds	r0, r3, #4
 800f036:	6008      	str	r0, [r1, #0]
 800f038:	0628      	lsls	r0, r5, #24
 800f03a:	d501      	bpl.n	800f040 <_printf_i+0xec>
 800f03c:	681d      	ldr	r5, [r3, #0]
 800f03e:	e002      	b.n	800f046 <_printf_i+0xf2>
 800f040:	0669      	lsls	r1, r5, #25
 800f042:	d5fb      	bpl.n	800f03c <_printf_i+0xe8>
 800f044:	881d      	ldrh	r5, [r3, #0]
 800f046:	4854      	ldr	r0, [pc, #336]	; (800f198 <_printf_i+0x244>)
 800f048:	2f6f      	cmp	r7, #111	; 0x6f
 800f04a:	bf0c      	ite	eq
 800f04c:	2308      	moveq	r3, #8
 800f04e:	230a      	movne	r3, #10
 800f050:	2100      	movs	r1, #0
 800f052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f056:	6866      	ldr	r6, [r4, #4]
 800f058:	60a6      	str	r6, [r4, #8]
 800f05a:	2e00      	cmp	r6, #0
 800f05c:	bfa2      	ittt	ge
 800f05e:	6821      	ldrge	r1, [r4, #0]
 800f060:	f021 0104 	bicge.w	r1, r1, #4
 800f064:	6021      	strge	r1, [r4, #0]
 800f066:	b90d      	cbnz	r5, 800f06c <_printf_i+0x118>
 800f068:	2e00      	cmp	r6, #0
 800f06a:	d04d      	beq.n	800f108 <_printf_i+0x1b4>
 800f06c:	4616      	mov	r6, r2
 800f06e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f072:	fb03 5711 	mls	r7, r3, r1, r5
 800f076:	5dc7      	ldrb	r7, [r0, r7]
 800f078:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f07c:	462f      	mov	r7, r5
 800f07e:	42bb      	cmp	r3, r7
 800f080:	460d      	mov	r5, r1
 800f082:	d9f4      	bls.n	800f06e <_printf_i+0x11a>
 800f084:	2b08      	cmp	r3, #8
 800f086:	d10b      	bne.n	800f0a0 <_printf_i+0x14c>
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	07df      	lsls	r7, r3, #31
 800f08c:	d508      	bpl.n	800f0a0 <_printf_i+0x14c>
 800f08e:	6923      	ldr	r3, [r4, #16]
 800f090:	6861      	ldr	r1, [r4, #4]
 800f092:	4299      	cmp	r1, r3
 800f094:	bfde      	ittt	le
 800f096:	2330      	movle	r3, #48	; 0x30
 800f098:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f09c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f0a0:	1b92      	subs	r2, r2, r6
 800f0a2:	6122      	str	r2, [r4, #16]
 800f0a4:	f8cd a000 	str.w	sl, [sp]
 800f0a8:	464b      	mov	r3, r9
 800f0aa:	aa03      	add	r2, sp, #12
 800f0ac:	4621      	mov	r1, r4
 800f0ae:	4640      	mov	r0, r8
 800f0b0:	f7ff fee2 	bl	800ee78 <_printf_common>
 800f0b4:	3001      	adds	r0, #1
 800f0b6:	d14c      	bne.n	800f152 <_printf_i+0x1fe>
 800f0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f0bc:	b004      	add	sp, #16
 800f0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0c2:	4835      	ldr	r0, [pc, #212]	; (800f198 <_printf_i+0x244>)
 800f0c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f0c8:	6823      	ldr	r3, [r4, #0]
 800f0ca:	680e      	ldr	r6, [r1, #0]
 800f0cc:	061f      	lsls	r7, r3, #24
 800f0ce:	f856 5b04 	ldr.w	r5, [r6], #4
 800f0d2:	600e      	str	r6, [r1, #0]
 800f0d4:	d514      	bpl.n	800f100 <_printf_i+0x1ac>
 800f0d6:	07d9      	lsls	r1, r3, #31
 800f0d8:	bf44      	itt	mi
 800f0da:	f043 0320 	orrmi.w	r3, r3, #32
 800f0de:	6023      	strmi	r3, [r4, #0]
 800f0e0:	b91d      	cbnz	r5, 800f0ea <_printf_i+0x196>
 800f0e2:	6823      	ldr	r3, [r4, #0]
 800f0e4:	f023 0320 	bic.w	r3, r3, #32
 800f0e8:	6023      	str	r3, [r4, #0]
 800f0ea:	2310      	movs	r3, #16
 800f0ec:	e7b0      	b.n	800f050 <_printf_i+0xfc>
 800f0ee:	6823      	ldr	r3, [r4, #0]
 800f0f0:	f043 0320 	orr.w	r3, r3, #32
 800f0f4:	6023      	str	r3, [r4, #0]
 800f0f6:	2378      	movs	r3, #120	; 0x78
 800f0f8:	4828      	ldr	r0, [pc, #160]	; (800f19c <_printf_i+0x248>)
 800f0fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0fe:	e7e3      	b.n	800f0c8 <_printf_i+0x174>
 800f100:	065e      	lsls	r6, r3, #25
 800f102:	bf48      	it	mi
 800f104:	b2ad      	uxthmi	r5, r5
 800f106:	e7e6      	b.n	800f0d6 <_printf_i+0x182>
 800f108:	4616      	mov	r6, r2
 800f10a:	e7bb      	b.n	800f084 <_printf_i+0x130>
 800f10c:	680b      	ldr	r3, [r1, #0]
 800f10e:	6826      	ldr	r6, [r4, #0]
 800f110:	6960      	ldr	r0, [r4, #20]
 800f112:	1d1d      	adds	r5, r3, #4
 800f114:	600d      	str	r5, [r1, #0]
 800f116:	0635      	lsls	r5, r6, #24
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	d501      	bpl.n	800f120 <_printf_i+0x1cc>
 800f11c:	6018      	str	r0, [r3, #0]
 800f11e:	e002      	b.n	800f126 <_printf_i+0x1d2>
 800f120:	0671      	lsls	r1, r6, #25
 800f122:	d5fb      	bpl.n	800f11c <_printf_i+0x1c8>
 800f124:	8018      	strh	r0, [r3, #0]
 800f126:	2300      	movs	r3, #0
 800f128:	6123      	str	r3, [r4, #16]
 800f12a:	4616      	mov	r6, r2
 800f12c:	e7ba      	b.n	800f0a4 <_printf_i+0x150>
 800f12e:	680b      	ldr	r3, [r1, #0]
 800f130:	1d1a      	adds	r2, r3, #4
 800f132:	600a      	str	r2, [r1, #0]
 800f134:	681e      	ldr	r6, [r3, #0]
 800f136:	6862      	ldr	r2, [r4, #4]
 800f138:	2100      	movs	r1, #0
 800f13a:	4630      	mov	r0, r6
 800f13c:	f7f1 f870 	bl	8000220 <memchr>
 800f140:	b108      	cbz	r0, 800f146 <_printf_i+0x1f2>
 800f142:	1b80      	subs	r0, r0, r6
 800f144:	6060      	str	r0, [r4, #4]
 800f146:	6863      	ldr	r3, [r4, #4]
 800f148:	6123      	str	r3, [r4, #16]
 800f14a:	2300      	movs	r3, #0
 800f14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f150:	e7a8      	b.n	800f0a4 <_printf_i+0x150>
 800f152:	6923      	ldr	r3, [r4, #16]
 800f154:	4632      	mov	r2, r6
 800f156:	4649      	mov	r1, r9
 800f158:	4640      	mov	r0, r8
 800f15a:	47d0      	blx	sl
 800f15c:	3001      	adds	r0, #1
 800f15e:	d0ab      	beq.n	800f0b8 <_printf_i+0x164>
 800f160:	6823      	ldr	r3, [r4, #0]
 800f162:	079b      	lsls	r3, r3, #30
 800f164:	d413      	bmi.n	800f18e <_printf_i+0x23a>
 800f166:	68e0      	ldr	r0, [r4, #12]
 800f168:	9b03      	ldr	r3, [sp, #12]
 800f16a:	4298      	cmp	r0, r3
 800f16c:	bfb8      	it	lt
 800f16e:	4618      	movlt	r0, r3
 800f170:	e7a4      	b.n	800f0bc <_printf_i+0x168>
 800f172:	2301      	movs	r3, #1
 800f174:	4632      	mov	r2, r6
 800f176:	4649      	mov	r1, r9
 800f178:	4640      	mov	r0, r8
 800f17a:	47d0      	blx	sl
 800f17c:	3001      	adds	r0, #1
 800f17e:	d09b      	beq.n	800f0b8 <_printf_i+0x164>
 800f180:	3501      	adds	r5, #1
 800f182:	68e3      	ldr	r3, [r4, #12]
 800f184:	9903      	ldr	r1, [sp, #12]
 800f186:	1a5b      	subs	r3, r3, r1
 800f188:	42ab      	cmp	r3, r5
 800f18a:	dcf2      	bgt.n	800f172 <_printf_i+0x21e>
 800f18c:	e7eb      	b.n	800f166 <_printf_i+0x212>
 800f18e:	2500      	movs	r5, #0
 800f190:	f104 0619 	add.w	r6, r4, #25
 800f194:	e7f5      	b.n	800f182 <_printf_i+0x22e>
 800f196:	bf00      	nop
 800f198:	08014d70 	.word	0x08014d70
 800f19c:	08014d81 	.word	0x08014d81

0800f1a0 <_scanf_float>:
 800f1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a4:	b087      	sub	sp, #28
 800f1a6:	4617      	mov	r7, r2
 800f1a8:	9303      	str	r3, [sp, #12]
 800f1aa:	688b      	ldr	r3, [r1, #8]
 800f1ac:	1e5a      	subs	r2, r3, #1
 800f1ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f1b2:	bf83      	ittte	hi
 800f1b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f1b8:	195b      	addhi	r3, r3, r5
 800f1ba:	9302      	strhi	r3, [sp, #8]
 800f1bc:	2300      	movls	r3, #0
 800f1be:	bf86      	itte	hi
 800f1c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f1c4:	608b      	strhi	r3, [r1, #8]
 800f1c6:	9302      	strls	r3, [sp, #8]
 800f1c8:	680b      	ldr	r3, [r1, #0]
 800f1ca:	468b      	mov	fp, r1
 800f1cc:	2500      	movs	r5, #0
 800f1ce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f1d2:	f84b 3b1c 	str.w	r3, [fp], #28
 800f1d6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f1da:	4680      	mov	r8, r0
 800f1dc:	460c      	mov	r4, r1
 800f1de:	465e      	mov	r6, fp
 800f1e0:	46aa      	mov	sl, r5
 800f1e2:	46a9      	mov	r9, r5
 800f1e4:	9501      	str	r5, [sp, #4]
 800f1e6:	68a2      	ldr	r2, [r4, #8]
 800f1e8:	b152      	cbz	r2, 800f200 <_scanf_float+0x60>
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	2b4e      	cmp	r3, #78	; 0x4e
 800f1f0:	d864      	bhi.n	800f2bc <_scanf_float+0x11c>
 800f1f2:	2b40      	cmp	r3, #64	; 0x40
 800f1f4:	d83c      	bhi.n	800f270 <_scanf_float+0xd0>
 800f1f6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f1fa:	b2c8      	uxtb	r0, r1
 800f1fc:	280e      	cmp	r0, #14
 800f1fe:	d93a      	bls.n	800f276 <_scanf_float+0xd6>
 800f200:	f1b9 0f00 	cmp.w	r9, #0
 800f204:	d003      	beq.n	800f20e <_scanf_float+0x6e>
 800f206:	6823      	ldr	r3, [r4, #0]
 800f208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f212:	f1ba 0f01 	cmp.w	sl, #1
 800f216:	f200 8113 	bhi.w	800f440 <_scanf_float+0x2a0>
 800f21a:	455e      	cmp	r6, fp
 800f21c:	f200 8105 	bhi.w	800f42a <_scanf_float+0x28a>
 800f220:	2501      	movs	r5, #1
 800f222:	4628      	mov	r0, r5
 800f224:	b007      	add	sp, #28
 800f226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f22a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f22e:	2a0d      	cmp	r2, #13
 800f230:	d8e6      	bhi.n	800f200 <_scanf_float+0x60>
 800f232:	a101      	add	r1, pc, #4	; (adr r1, 800f238 <_scanf_float+0x98>)
 800f234:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f238:	0800f377 	.word	0x0800f377
 800f23c:	0800f201 	.word	0x0800f201
 800f240:	0800f201 	.word	0x0800f201
 800f244:	0800f201 	.word	0x0800f201
 800f248:	0800f3d7 	.word	0x0800f3d7
 800f24c:	0800f3af 	.word	0x0800f3af
 800f250:	0800f201 	.word	0x0800f201
 800f254:	0800f201 	.word	0x0800f201
 800f258:	0800f385 	.word	0x0800f385
 800f25c:	0800f201 	.word	0x0800f201
 800f260:	0800f201 	.word	0x0800f201
 800f264:	0800f201 	.word	0x0800f201
 800f268:	0800f201 	.word	0x0800f201
 800f26c:	0800f33d 	.word	0x0800f33d
 800f270:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f274:	e7db      	b.n	800f22e <_scanf_float+0x8e>
 800f276:	290e      	cmp	r1, #14
 800f278:	d8c2      	bhi.n	800f200 <_scanf_float+0x60>
 800f27a:	a001      	add	r0, pc, #4	; (adr r0, 800f280 <_scanf_float+0xe0>)
 800f27c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f280:	0800f32f 	.word	0x0800f32f
 800f284:	0800f201 	.word	0x0800f201
 800f288:	0800f32f 	.word	0x0800f32f
 800f28c:	0800f3c3 	.word	0x0800f3c3
 800f290:	0800f201 	.word	0x0800f201
 800f294:	0800f2dd 	.word	0x0800f2dd
 800f298:	0800f319 	.word	0x0800f319
 800f29c:	0800f319 	.word	0x0800f319
 800f2a0:	0800f319 	.word	0x0800f319
 800f2a4:	0800f319 	.word	0x0800f319
 800f2a8:	0800f319 	.word	0x0800f319
 800f2ac:	0800f319 	.word	0x0800f319
 800f2b0:	0800f319 	.word	0x0800f319
 800f2b4:	0800f319 	.word	0x0800f319
 800f2b8:	0800f319 	.word	0x0800f319
 800f2bc:	2b6e      	cmp	r3, #110	; 0x6e
 800f2be:	d809      	bhi.n	800f2d4 <_scanf_float+0x134>
 800f2c0:	2b60      	cmp	r3, #96	; 0x60
 800f2c2:	d8b2      	bhi.n	800f22a <_scanf_float+0x8a>
 800f2c4:	2b54      	cmp	r3, #84	; 0x54
 800f2c6:	d077      	beq.n	800f3b8 <_scanf_float+0x218>
 800f2c8:	2b59      	cmp	r3, #89	; 0x59
 800f2ca:	d199      	bne.n	800f200 <_scanf_float+0x60>
 800f2cc:	2d07      	cmp	r5, #7
 800f2ce:	d197      	bne.n	800f200 <_scanf_float+0x60>
 800f2d0:	2508      	movs	r5, #8
 800f2d2:	e029      	b.n	800f328 <_scanf_float+0x188>
 800f2d4:	2b74      	cmp	r3, #116	; 0x74
 800f2d6:	d06f      	beq.n	800f3b8 <_scanf_float+0x218>
 800f2d8:	2b79      	cmp	r3, #121	; 0x79
 800f2da:	e7f6      	b.n	800f2ca <_scanf_float+0x12a>
 800f2dc:	6821      	ldr	r1, [r4, #0]
 800f2de:	05c8      	lsls	r0, r1, #23
 800f2e0:	d51a      	bpl.n	800f318 <_scanf_float+0x178>
 800f2e2:	9b02      	ldr	r3, [sp, #8]
 800f2e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f2e8:	6021      	str	r1, [r4, #0]
 800f2ea:	f109 0901 	add.w	r9, r9, #1
 800f2ee:	b11b      	cbz	r3, 800f2f8 <_scanf_float+0x158>
 800f2f0:	3b01      	subs	r3, #1
 800f2f2:	3201      	adds	r2, #1
 800f2f4:	9302      	str	r3, [sp, #8]
 800f2f6:	60a2      	str	r2, [r4, #8]
 800f2f8:	68a3      	ldr	r3, [r4, #8]
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	60a3      	str	r3, [r4, #8]
 800f2fe:	6923      	ldr	r3, [r4, #16]
 800f300:	3301      	adds	r3, #1
 800f302:	6123      	str	r3, [r4, #16]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	3b01      	subs	r3, #1
 800f308:	2b00      	cmp	r3, #0
 800f30a:	607b      	str	r3, [r7, #4]
 800f30c:	f340 8084 	ble.w	800f418 <_scanf_float+0x278>
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	3301      	adds	r3, #1
 800f314:	603b      	str	r3, [r7, #0]
 800f316:	e766      	b.n	800f1e6 <_scanf_float+0x46>
 800f318:	eb1a 0f05 	cmn.w	sl, r5
 800f31c:	f47f af70 	bne.w	800f200 <_scanf_float+0x60>
 800f320:	6822      	ldr	r2, [r4, #0]
 800f322:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f326:	6022      	str	r2, [r4, #0]
 800f328:	f806 3b01 	strb.w	r3, [r6], #1
 800f32c:	e7e4      	b.n	800f2f8 <_scanf_float+0x158>
 800f32e:	6822      	ldr	r2, [r4, #0]
 800f330:	0610      	lsls	r0, r2, #24
 800f332:	f57f af65 	bpl.w	800f200 <_scanf_float+0x60>
 800f336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f33a:	e7f4      	b.n	800f326 <_scanf_float+0x186>
 800f33c:	f1ba 0f00 	cmp.w	sl, #0
 800f340:	d10e      	bne.n	800f360 <_scanf_float+0x1c0>
 800f342:	f1b9 0f00 	cmp.w	r9, #0
 800f346:	d10e      	bne.n	800f366 <_scanf_float+0x1c6>
 800f348:	6822      	ldr	r2, [r4, #0]
 800f34a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f34e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f352:	d108      	bne.n	800f366 <_scanf_float+0x1c6>
 800f354:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f358:	6022      	str	r2, [r4, #0]
 800f35a:	f04f 0a01 	mov.w	sl, #1
 800f35e:	e7e3      	b.n	800f328 <_scanf_float+0x188>
 800f360:	f1ba 0f02 	cmp.w	sl, #2
 800f364:	d055      	beq.n	800f412 <_scanf_float+0x272>
 800f366:	2d01      	cmp	r5, #1
 800f368:	d002      	beq.n	800f370 <_scanf_float+0x1d0>
 800f36a:	2d04      	cmp	r5, #4
 800f36c:	f47f af48 	bne.w	800f200 <_scanf_float+0x60>
 800f370:	3501      	adds	r5, #1
 800f372:	b2ed      	uxtb	r5, r5
 800f374:	e7d8      	b.n	800f328 <_scanf_float+0x188>
 800f376:	f1ba 0f01 	cmp.w	sl, #1
 800f37a:	f47f af41 	bne.w	800f200 <_scanf_float+0x60>
 800f37e:	f04f 0a02 	mov.w	sl, #2
 800f382:	e7d1      	b.n	800f328 <_scanf_float+0x188>
 800f384:	b97d      	cbnz	r5, 800f3a6 <_scanf_float+0x206>
 800f386:	f1b9 0f00 	cmp.w	r9, #0
 800f38a:	f47f af3c 	bne.w	800f206 <_scanf_float+0x66>
 800f38e:	6822      	ldr	r2, [r4, #0]
 800f390:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f394:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f398:	f47f af39 	bne.w	800f20e <_scanf_float+0x6e>
 800f39c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f3a0:	6022      	str	r2, [r4, #0]
 800f3a2:	2501      	movs	r5, #1
 800f3a4:	e7c0      	b.n	800f328 <_scanf_float+0x188>
 800f3a6:	2d03      	cmp	r5, #3
 800f3a8:	d0e2      	beq.n	800f370 <_scanf_float+0x1d0>
 800f3aa:	2d05      	cmp	r5, #5
 800f3ac:	e7de      	b.n	800f36c <_scanf_float+0x1cc>
 800f3ae:	2d02      	cmp	r5, #2
 800f3b0:	f47f af26 	bne.w	800f200 <_scanf_float+0x60>
 800f3b4:	2503      	movs	r5, #3
 800f3b6:	e7b7      	b.n	800f328 <_scanf_float+0x188>
 800f3b8:	2d06      	cmp	r5, #6
 800f3ba:	f47f af21 	bne.w	800f200 <_scanf_float+0x60>
 800f3be:	2507      	movs	r5, #7
 800f3c0:	e7b2      	b.n	800f328 <_scanf_float+0x188>
 800f3c2:	6822      	ldr	r2, [r4, #0]
 800f3c4:	0591      	lsls	r1, r2, #22
 800f3c6:	f57f af1b 	bpl.w	800f200 <_scanf_float+0x60>
 800f3ca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f3ce:	6022      	str	r2, [r4, #0]
 800f3d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800f3d4:	e7a8      	b.n	800f328 <_scanf_float+0x188>
 800f3d6:	6822      	ldr	r2, [r4, #0]
 800f3d8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f3dc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f3e0:	d006      	beq.n	800f3f0 <_scanf_float+0x250>
 800f3e2:	0550      	lsls	r0, r2, #21
 800f3e4:	f57f af0c 	bpl.w	800f200 <_scanf_float+0x60>
 800f3e8:	f1b9 0f00 	cmp.w	r9, #0
 800f3ec:	f43f af0f 	beq.w	800f20e <_scanf_float+0x6e>
 800f3f0:	0591      	lsls	r1, r2, #22
 800f3f2:	bf58      	it	pl
 800f3f4:	9901      	ldrpl	r1, [sp, #4]
 800f3f6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f3fa:	bf58      	it	pl
 800f3fc:	eba9 0101 	subpl.w	r1, r9, r1
 800f400:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f404:	bf58      	it	pl
 800f406:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f40a:	6022      	str	r2, [r4, #0]
 800f40c:	f04f 0900 	mov.w	r9, #0
 800f410:	e78a      	b.n	800f328 <_scanf_float+0x188>
 800f412:	f04f 0a03 	mov.w	sl, #3
 800f416:	e787      	b.n	800f328 <_scanf_float+0x188>
 800f418:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f41c:	4639      	mov	r1, r7
 800f41e:	4640      	mov	r0, r8
 800f420:	4798      	blx	r3
 800f422:	2800      	cmp	r0, #0
 800f424:	f43f aedf 	beq.w	800f1e6 <_scanf_float+0x46>
 800f428:	e6ea      	b.n	800f200 <_scanf_float+0x60>
 800f42a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f42e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f432:	463a      	mov	r2, r7
 800f434:	4640      	mov	r0, r8
 800f436:	4798      	blx	r3
 800f438:	6923      	ldr	r3, [r4, #16]
 800f43a:	3b01      	subs	r3, #1
 800f43c:	6123      	str	r3, [r4, #16]
 800f43e:	e6ec      	b.n	800f21a <_scanf_float+0x7a>
 800f440:	1e6b      	subs	r3, r5, #1
 800f442:	2b06      	cmp	r3, #6
 800f444:	d825      	bhi.n	800f492 <_scanf_float+0x2f2>
 800f446:	2d02      	cmp	r5, #2
 800f448:	d836      	bhi.n	800f4b8 <_scanf_float+0x318>
 800f44a:	455e      	cmp	r6, fp
 800f44c:	f67f aee8 	bls.w	800f220 <_scanf_float+0x80>
 800f450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f454:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f458:	463a      	mov	r2, r7
 800f45a:	4640      	mov	r0, r8
 800f45c:	4798      	blx	r3
 800f45e:	6923      	ldr	r3, [r4, #16]
 800f460:	3b01      	subs	r3, #1
 800f462:	6123      	str	r3, [r4, #16]
 800f464:	e7f1      	b.n	800f44a <_scanf_float+0x2aa>
 800f466:	9802      	ldr	r0, [sp, #8]
 800f468:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f46c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f470:	9002      	str	r0, [sp, #8]
 800f472:	463a      	mov	r2, r7
 800f474:	4640      	mov	r0, r8
 800f476:	4798      	blx	r3
 800f478:	6923      	ldr	r3, [r4, #16]
 800f47a:	3b01      	subs	r3, #1
 800f47c:	6123      	str	r3, [r4, #16]
 800f47e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f482:	fa5f fa8a 	uxtb.w	sl, sl
 800f486:	f1ba 0f02 	cmp.w	sl, #2
 800f48a:	d1ec      	bne.n	800f466 <_scanf_float+0x2c6>
 800f48c:	3d03      	subs	r5, #3
 800f48e:	b2ed      	uxtb	r5, r5
 800f490:	1b76      	subs	r6, r6, r5
 800f492:	6823      	ldr	r3, [r4, #0]
 800f494:	05da      	lsls	r2, r3, #23
 800f496:	d52f      	bpl.n	800f4f8 <_scanf_float+0x358>
 800f498:	055b      	lsls	r3, r3, #21
 800f49a:	d510      	bpl.n	800f4be <_scanf_float+0x31e>
 800f49c:	455e      	cmp	r6, fp
 800f49e:	f67f aebf 	bls.w	800f220 <_scanf_float+0x80>
 800f4a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4aa:	463a      	mov	r2, r7
 800f4ac:	4640      	mov	r0, r8
 800f4ae:	4798      	blx	r3
 800f4b0:	6923      	ldr	r3, [r4, #16]
 800f4b2:	3b01      	subs	r3, #1
 800f4b4:	6123      	str	r3, [r4, #16]
 800f4b6:	e7f1      	b.n	800f49c <_scanf_float+0x2fc>
 800f4b8:	46aa      	mov	sl, r5
 800f4ba:	9602      	str	r6, [sp, #8]
 800f4bc:	e7df      	b.n	800f47e <_scanf_float+0x2de>
 800f4be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f4c2:	6923      	ldr	r3, [r4, #16]
 800f4c4:	2965      	cmp	r1, #101	; 0x65
 800f4c6:	f103 33ff 	add.w	r3, r3, #4294967295
 800f4ca:	f106 35ff 	add.w	r5, r6, #4294967295
 800f4ce:	6123      	str	r3, [r4, #16]
 800f4d0:	d00c      	beq.n	800f4ec <_scanf_float+0x34c>
 800f4d2:	2945      	cmp	r1, #69	; 0x45
 800f4d4:	d00a      	beq.n	800f4ec <_scanf_float+0x34c>
 800f4d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4da:	463a      	mov	r2, r7
 800f4dc:	4640      	mov	r0, r8
 800f4de:	4798      	blx	r3
 800f4e0:	6923      	ldr	r3, [r4, #16]
 800f4e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f4e6:	3b01      	subs	r3, #1
 800f4e8:	1eb5      	subs	r5, r6, #2
 800f4ea:	6123      	str	r3, [r4, #16]
 800f4ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4f0:	463a      	mov	r2, r7
 800f4f2:	4640      	mov	r0, r8
 800f4f4:	4798      	blx	r3
 800f4f6:	462e      	mov	r6, r5
 800f4f8:	6825      	ldr	r5, [r4, #0]
 800f4fa:	f015 0510 	ands.w	r5, r5, #16
 800f4fe:	d158      	bne.n	800f5b2 <_scanf_float+0x412>
 800f500:	7035      	strb	r5, [r6, #0]
 800f502:	6823      	ldr	r3, [r4, #0]
 800f504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f50c:	d11c      	bne.n	800f548 <_scanf_float+0x3a8>
 800f50e:	9b01      	ldr	r3, [sp, #4]
 800f510:	454b      	cmp	r3, r9
 800f512:	eba3 0209 	sub.w	r2, r3, r9
 800f516:	d124      	bne.n	800f562 <_scanf_float+0x3c2>
 800f518:	2200      	movs	r2, #0
 800f51a:	4659      	mov	r1, fp
 800f51c:	4640      	mov	r0, r8
 800f51e:	f000 ff45 	bl	80103ac <_strtod_r>
 800f522:	9b03      	ldr	r3, [sp, #12]
 800f524:	6821      	ldr	r1, [r4, #0]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f011 0f02 	tst.w	r1, #2
 800f52c:	ec57 6b10 	vmov	r6, r7, d0
 800f530:	f103 0204 	add.w	r2, r3, #4
 800f534:	d020      	beq.n	800f578 <_scanf_float+0x3d8>
 800f536:	9903      	ldr	r1, [sp, #12]
 800f538:	600a      	str	r2, [r1, #0]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	e9c3 6700 	strd	r6, r7, [r3]
 800f540:	68e3      	ldr	r3, [r4, #12]
 800f542:	3301      	adds	r3, #1
 800f544:	60e3      	str	r3, [r4, #12]
 800f546:	e66c      	b.n	800f222 <_scanf_float+0x82>
 800f548:	9b04      	ldr	r3, [sp, #16]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d0e4      	beq.n	800f518 <_scanf_float+0x378>
 800f54e:	9905      	ldr	r1, [sp, #20]
 800f550:	230a      	movs	r3, #10
 800f552:	462a      	mov	r2, r5
 800f554:	3101      	adds	r1, #1
 800f556:	4640      	mov	r0, r8
 800f558:	f000 ffb2 	bl	80104c0 <_strtol_r>
 800f55c:	9b04      	ldr	r3, [sp, #16]
 800f55e:	9e05      	ldr	r6, [sp, #20]
 800f560:	1ac2      	subs	r2, r0, r3
 800f562:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f566:	429e      	cmp	r6, r3
 800f568:	bf28      	it	cs
 800f56a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f56e:	4912      	ldr	r1, [pc, #72]	; (800f5b8 <_scanf_float+0x418>)
 800f570:	4630      	mov	r0, r6
 800f572:	f000 f83b 	bl	800f5ec <siprintf>
 800f576:	e7cf      	b.n	800f518 <_scanf_float+0x378>
 800f578:	f011 0f04 	tst.w	r1, #4
 800f57c:	9903      	ldr	r1, [sp, #12]
 800f57e:	600a      	str	r2, [r1, #0]
 800f580:	d1db      	bne.n	800f53a <_scanf_float+0x39a>
 800f582:	f8d3 8000 	ldr.w	r8, [r3]
 800f586:	ee10 2a10 	vmov	r2, s0
 800f58a:	ee10 0a10 	vmov	r0, s0
 800f58e:	463b      	mov	r3, r7
 800f590:	4639      	mov	r1, r7
 800f592:	f7f1 faeb 	bl	8000b6c <__aeabi_dcmpun>
 800f596:	b128      	cbz	r0, 800f5a4 <_scanf_float+0x404>
 800f598:	4808      	ldr	r0, [pc, #32]	; (800f5bc <_scanf_float+0x41c>)
 800f59a:	f000 f821 	bl	800f5e0 <nanf>
 800f59e:	ed88 0a00 	vstr	s0, [r8]
 800f5a2:	e7cd      	b.n	800f540 <_scanf_float+0x3a0>
 800f5a4:	4630      	mov	r0, r6
 800f5a6:	4639      	mov	r1, r7
 800f5a8:	f7f1 fb3e 	bl	8000c28 <__aeabi_d2f>
 800f5ac:	f8c8 0000 	str.w	r0, [r8]
 800f5b0:	e7c6      	b.n	800f540 <_scanf_float+0x3a0>
 800f5b2:	2500      	movs	r5, #0
 800f5b4:	e635      	b.n	800f222 <_scanf_float+0x82>
 800f5b6:	bf00      	nop
 800f5b8:	08014d92 	.word	0x08014d92
 800f5bc:	08015123 	.word	0x08015123

0800f5c0 <_sbrk_r>:
 800f5c0:	b538      	push	{r3, r4, r5, lr}
 800f5c2:	4d06      	ldr	r5, [pc, #24]	; (800f5dc <_sbrk_r+0x1c>)
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	4604      	mov	r4, r0
 800f5c8:	4608      	mov	r0, r1
 800f5ca:	602b      	str	r3, [r5, #0]
 800f5cc:	f7f5 f886 	bl	80046dc <_sbrk>
 800f5d0:	1c43      	adds	r3, r0, #1
 800f5d2:	d102      	bne.n	800f5da <_sbrk_r+0x1a>
 800f5d4:	682b      	ldr	r3, [r5, #0]
 800f5d6:	b103      	cbz	r3, 800f5da <_sbrk_r+0x1a>
 800f5d8:	6023      	str	r3, [r4, #0]
 800f5da:	bd38      	pop	{r3, r4, r5, pc}
 800f5dc:	20001a44 	.word	0x20001a44

0800f5e0 <nanf>:
 800f5e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f5e8 <nanf+0x8>
 800f5e4:	4770      	bx	lr
 800f5e6:	bf00      	nop
 800f5e8:	7fc00000 	.word	0x7fc00000

0800f5ec <siprintf>:
 800f5ec:	b40e      	push	{r1, r2, r3}
 800f5ee:	b500      	push	{lr}
 800f5f0:	b09c      	sub	sp, #112	; 0x70
 800f5f2:	ab1d      	add	r3, sp, #116	; 0x74
 800f5f4:	9002      	str	r0, [sp, #8]
 800f5f6:	9006      	str	r0, [sp, #24]
 800f5f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f5fc:	4809      	ldr	r0, [pc, #36]	; (800f624 <siprintf+0x38>)
 800f5fe:	9107      	str	r1, [sp, #28]
 800f600:	9104      	str	r1, [sp, #16]
 800f602:	4909      	ldr	r1, [pc, #36]	; (800f628 <siprintf+0x3c>)
 800f604:	f853 2b04 	ldr.w	r2, [r3], #4
 800f608:	9105      	str	r1, [sp, #20]
 800f60a:	6800      	ldr	r0, [r0, #0]
 800f60c:	9301      	str	r3, [sp, #4]
 800f60e:	a902      	add	r1, sp, #8
 800f610:	f003 f9de 	bl	80129d0 <_svfiprintf_r>
 800f614:	9b02      	ldr	r3, [sp, #8]
 800f616:	2200      	movs	r2, #0
 800f618:	701a      	strb	r2, [r3, #0]
 800f61a:	b01c      	add	sp, #112	; 0x70
 800f61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f620:	b003      	add	sp, #12
 800f622:	4770      	bx	lr
 800f624:	20000028 	.word	0x20000028
 800f628:	ffff0208 	.word	0xffff0208

0800f62c <siscanf>:
 800f62c:	b40e      	push	{r1, r2, r3}
 800f62e:	b510      	push	{r4, lr}
 800f630:	b09f      	sub	sp, #124	; 0x7c
 800f632:	ac21      	add	r4, sp, #132	; 0x84
 800f634:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f638:	f854 2b04 	ldr.w	r2, [r4], #4
 800f63c:	9201      	str	r2, [sp, #4]
 800f63e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f642:	9004      	str	r0, [sp, #16]
 800f644:	9008      	str	r0, [sp, #32]
 800f646:	f7f0 fddd 	bl	8000204 <strlen>
 800f64a:	4b0c      	ldr	r3, [pc, #48]	; (800f67c <siscanf+0x50>)
 800f64c:	9005      	str	r0, [sp, #20]
 800f64e:	9009      	str	r0, [sp, #36]	; 0x24
 800f650:	930d      	str	r3, [sp, #52]	; 0x34
 800f652:	480b      	ldr	r0, [pc, #44]	; (800f680 <siscanf+0x54>)
 800f654:	9a01      	ldr	r2, [sp, #4]
 800f656:	6800      	ldr	r0, [r0, #0]
 800f658:	9403      	str	r4, [sp, #12]
 800f65a:	2300      	movs	r3, #0
 800f65c:	9311      	str	r3, [sp, #68]	; 0x44
 800f65e:	9316      	str	r3, [sp, #88]	; 0x58
 800f660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f664:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f668:	a904      	add	r1, sp, #16
 800f66a:	4623      	mov	r3, r4
 800f66c:	f003 fb0a 	bl	8012c84 <__ssvfiscanf_r>
 800f670:	b01f      	add	sp, #124	; 0x7c
 800f672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f676:	b003      	add	sp, #12
 800f678:	4770      	bx	lr
 800f67a:	bf00      	nop
 800f67c:	0800f6a7 	.word	0x0800f6a7
 800f680:	20000028 	.word	0x20000028

0800f684 <__sread>:
 800f684:	b510      	push	{r4, lr}
 800f686:	460c      	mov	r4, r1
 800f688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f68c:	f003 ff18 	bl	80134c0 <_read_r>
 800f690:	2800      	cmp	r0, #0
 800f692:	bfab      	itete	ge
 800f694:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f696:	89a3      	ldrhlt	r3, [r4, #12]
 800f698:	181b      	addge	r3, r3, r0
 800f69a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f69e:	bfac      	ite	ge
 800f6a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6a2:	81a3      	strhlt	r3, [r4, #12]
 800f6a4:	bd10      	pop	{r4, pc}

0800f6a6 <__seofread>:
 800f6a6:	2000      	movs	r0, #0
 800f6a8:	4770      	bx	lr

0800f6aa <__swrite>:
 800f6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ae:	461f      	mov	r7, r3
 800f6b0:	898b      	ldrh	r3, [r1, #12]
 800f6b2:	05db      	lsls	r3, r3, #23
 800f6b4:	4605      	mov	r5, r0
 800f6b6:	460c      	mov	r4, r1
 800f6b8:	4616      	mov	r6, r2
 800f6ba:	d505      	bpl.n	800f6c8 <__swrite+0x1e>
 800f6bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6c0:	2302      	movs	r3, #2
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	f002 fbca 	bl	8011e5c <_lseek_r>
 800f6c8:	89a3      	ldrh	r3, [r4, #12]
 800f6ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6d2:	81a3      	strh	r3, [r4, #12]
 800f6d4:	4632      	mov	r2, r6
 800f6d6:	463b      	mov	r3, r7
 800f6d8:	4628      	mov	r0, r5
 800f6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6de:	f000 bf87 	b.w	80105f0 <_write_r>

0800f6e2 <__sseek>:
 800f6e2:	b510      	push	{r4, lr}
 800f6e4:	460c      	mov	r4, r1
 800f6e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6ea:	f002 fbb7 	bl	8011e5c <_lseek_r>
 800f6ee:	1c43      	adds	r3, r0, #1
 800f6f0:	89a3      	ldrh	r3, [r4, #12]
 800f6f2:	bf15      	itete	ne
 800f6f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800f6f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f6fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f6fe:	81a3      	strheq	r3, [r4, #12]
 800f700:	bf18      	it	ne
 800f702:	81a3      	strhne	r3, [r4, #12]
 800f704:	bd10      	pop	{r4, pc}

0800f706 <__sclose>:
 800f706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f70a:	f000 bff1 	b.w	80106f0 <_close_r>

0800f70e <strchr>:
 800f70e:	b2c9      	uxtb	r1, r1
 800f710:	4603      	mov	r3, r0
 800f712:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f716:	b11a      	cbz	r2, 800f720 <strchr+0x12>
 800f718:	428a      	cmp	r2, r1
 800f71a:	d1f9      	bne.n	800f710 <strchr+0x2>
 800f71c:	4618      	mov	r0, r3
 800f71e:	4770      	bx	lr
 800f720:	2900      	cmp	r1, #0
 800f722:	bf18      	it	ne
 800f724:	2300      	movne	r3, #0
 800f726:	e7f9      	b.n	800f71c <strchr+0xe>

0800f728 <strcpy>:
 800f728:	4603      	mov	r3, r0
 800f72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f72e:	f803 2b01 	strb.w	r2, [r3], #1
 800f732:	2a00      	cmp	r2, #0
 800f734:	d1f9      	bne.n	800f72a <strcpy+0x2>
 800f736:	4770      	bx	lr

0800f738 <strncmp>:
 800f738:	b510      	push	{r4, lr}
 800f73a:	b16a      	cbz	r2, 800f758 <strncmp+0x20>
 800f73c:	3901      	subs	r1, #1
 800f73e:	1884      	adds	r4, r0, r2
 800f740:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f744:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f748:	4293      	cmp	r3, r2
 800f74a:	d103      	bne.n	800f754 <strncmp+0x1c>
 800f74c:	42a0      	cmp	r0, r4
 800f74e:	d001      	beq.n	800f754 <strncmp+0x1c>
 800f750:	2b00      	cmp	r3, #0
 800f752:	d1f5      	bne.n	800f740 <strncmp+0x8>
 800f754:	1a98      	subs	r0, r3, r2
 800f756:	bd10      	pop	{r4, pc}
 800f758:	4610      	mov	r0, r2
 800f75a:	e7fc      	b.n	800f756 <strncmp+0x1e>

0800f75c <sulp>:
 800f75c:	b570      	push	{r4, r5, r6, lr}
 800f75e:	4604      	mov	r4, r0
 800f760:	460d      	mov	r5, r1
 800f762:	ec45 4b10 	vmov	d0, r4, r5
 800f766:	4616      	mov	r6, r2
 800f768:	f002 ff78 	bl	801265c <__ulp>
 800f76c:	ec51 0b10 	vmov	r0, r1, d0
 800f770:	b17e      	cbz	r6, 800f792 <sulp+0x36>
 800f772:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f776:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	dd09      	ble.n	800f792 <sulp+0x36>
 800f77e:	051b      	lsls	r3, r3, #20
 800f780:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f784:	2400      	movs	r4, #0
 800f786:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f78a:	4622      	mov	r2, r4
 800f78c:	462b      	mov	r3, r5
 800f78e:	f7f0 ff53 	bl	8000638 <__aeabi_dmul>
 800f792:	bd70      	pop	{r4, r5, r6, pc}
 800f794:	0000      	movs	r0, r0
	...

0800f798 <_strtod_l>:
 800f798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79c:	b0a3      	sub	sp, #140	; 0x8c
 800f79e:	461f      	mov	r7, r3
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	931e      	str	r3, [sp, #120]	; 0x78
 800f7a4:	4ba4      	ldr	r3, [pc, #656]	; (800fa38 <_strtod_l+0x2a0>)
 800f7a6:	9219      	str	r2, [sp, #100]	; 0x64
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	9307      	str	r3, [sp, #28]
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	4688      	mov	r8, r1
 800f7b2:	f7f0 fd27 	bl	8000204 <strlen>
 800f7b6:	f04f 0a00 	mov.w	sl, #0
 800f7ba:	4605      	mov	r5, r0
 800f7bc:	f04f 0b00 	mov.w	fp, #0
 800f7c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f7c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f7c6:	781a      	ldrb	r2, [r3, #0]
 800f7c8:	2a2b      	cmp	r2, #43	; 0x2b
 800f7ca:	d04c      	beq.n	800f866 <_strtod_l+0xce>
 800f7cc:	d839      	bhi.n	800f842 <_strtod_l+0xaa>
 800f7ce:	2a0d      	cmp	r2, #13
 800f7d0:	d832      	bhi.n	800f838 <_strtod_l+0xa0>
 800f7d2:	2a08      	cmp	r2, #8
 800f7d4:	d832      	bhi.n	800f83c <_strtod_l+0xa4>
 800f7d6:	2a00      	cmp	r2, #0
 800f7d8:	d03c      	beq.n	800f854 <_strtod_l+0xbc>
 800f7da:	2300      	movs	r3, #0
 800f7dc:	930e      	str	r3, [sp, #56]	; 0x38
 800f7de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f7e0:	7833      	ldrb	r3, [r6, #0]
 800f7e2:	2b30      	cmp	r3, #48	; 0x30
 800f7e4:	f040 80b4 	bne.w	800f950 <_strtod_l+0x1b8>
 800f7e8:	7873      	ldrb	r3, [r6, #1]
 800f7ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f7ee:	2b58      	cmp	r3, #88	; 0x58
 800f7f0:	d16c      	bne.n	800f8cc <_strtod_l+0x134>
 800f7f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f7f4:	9301      	str	r3, [sp, #4]
 800f7f6:	ab1e      	add	r3, sp, #120	; 0x78
 800f7f8:	9702      	str	r7, [sp, #8]
 800f7fa:	9300      	str	r3, [sp, #0]
 800f7fc:	4a8f      	ldr	r2, [pc, #572]	; (800fa3c <_strtod_l+0x2a4>)
 800f7fe:	ab1f      	add	r3, sp, #124	; 0x7c
 800f800:	a91d      	add	r1, sp, #116	; 0x74
 800f802:	4620      	mov	r0, r4
 800f804:	f002 f81a 	bl	801183c <__gethex>
 800f808:	f010 0707 	ands.w	r7, r0, #7
 800f80c:	4605      	mov	r5, r0
 800f80e:	d005      	beq.n	800f81c <_strtod_l+0x84>
 800f810:	2f06      	cmp	r7, #6
 800f812:	d12a      	bne.n	800f86a <_strtod_l+0xd2>
 800f814:	3601      	adds	r6, #1
 800f816:	2300      	movs	r3, #0
 800f818:	961d      	str	r6, [sp, #116]	; 0x74
 800f81a:	930e      	str	r3, [sp, #56]	; 0x38
 800f81c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f040 8596 	bne.w	8010350 <_strtod_l+0xbb8>
 800f824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f826:	b1db      	cbz	r3, 800f860 <_strtod_l+0xc8>
 800f828:	4652      	mov	r2, sl
 800f82a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f82e:	ec43 2b10 	vmov	d0, r2, r3
 800f832:	b023      	add	sp, #140	; 0x8c
 800f834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f838:	2a20      	cmp	r2, #32
 800f83a:	d1ce      	bne.n	800f7da <_strtod_l+0x42>
 800f83c:	3301      	adds	r3, #1
 800f83e:	931d      	str	r3, [sp, #116]	; 0x74
 800f840:	e7c0      	b.n	800f7c4 <_strtod_l+0x2c>
 800f842:	2a2d      	cmp	r2, #45	; 0x2d
 800f844:	d1c9      	bne.n	800f7da <_strtod_l+0x42>
 800f846:	2201      	movs	r2, #1
 800f848:	920e      	str	r2, [sp, #56]	; 0x38
 800f84a:	1c5a      	adds	r2, r3, #1
 800f84c:	921d      	str	r2, [sp, #116]	; 0x74
 800f84e:	785b      	ldrb	r3, [r3, #1]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d1c4      	bne.n	800f7de <_strtod_l+0x46>
 800f854:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f856:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	f040 8576 	bne.w	801034c <_strtod_l+0xbb4>
 800f860:	4652      	mov	r2, sl
 800f862:	465b      	mov	r3, fp
 800f864:	e7e3      	b.n	800f82e <_strtod_l+0x96>
 800f866:	2200      	movs	r2, #0
 800f868:	e7ee      	b.n	800f848 <_strtod_l+0xb0>
 800f86a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f86c:	b13a      	cbz	r2, 800f87e <_strtod_l+0xe6>
 800f86e:	2135      	movs	r1, #53	; 0x35
 800f870:	a820      	add	r0, sp, #128	; 0x80
 800f872:	f002 fffe 	bl	8012872 <__copybits>
 800f876:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f878:	4620      	mov	r0, r4
 800f87a:	f002 fbc3 	bl	8012004 <_Bfree>
 800f87e:	3f01      	subs	r7, #1
 800f880:	2f05      	cmp	r7, #5
 800f882:	d807      	bhi.n	800f894 <_strtod_l+0xfc>
 800f884:	e8df f007 	tbb	[pc, r7]
 800f888:	1d180b0e 	.word	0x1d180b0e
 800f88c:	030e      	.short	0x030e
 800f88e:	f04f 0b00 	mov.w	fp, #0
 800f892:	46da      	mov	sl, fp
 800f894:	0728      	lsls	r0, r5, #28
 800f896:	d5c1      	bpl.n	800f81c <_strtod_l+0x84>
 800f898:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f89c:	e7be      	b.n	800f81c <_strtod_l+0x84>
 800f89e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800f8a2:	e7f7      	b.n	800f894 <_strtod_l+0xfc>
 800f8a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800f8a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f8aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f8ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f8b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f8b6:	e7ed      	b.n	800f894 <_strtod_l+0xfc>
 800f8b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800fa40 <_strtod_l+0x2a8>
 800f8bc:	f04f 0a00 	mov.w	sl, #0
 800f8c0:	e7e8      	b.n	800f894 <_strtod_l+0xfc>
 800f8c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f8c6:	f04f 3aff 	mov.w	sl, #4294967295
 800f8ca:	e7e3      	b.n	800f894 <_strtod_l+0xfc>
 800f8cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8ce:	1c5a      	adds	r2, r3, #1
 800f8d0:	921d      	str	r2, [sp, #116]	; 0x74
 800f8d2:	785b      	ldrb	r3, [r3, #1]
 800f8d4:	2b30      	cmp	r3, #48	; 0x30
 800f8d6:	d0f9      	beq.n	800f8cc <_strtod_l+0x134>
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d09f      	beq.n	800f81c <_strtod_l+0x84>
 800f8dc:	2301      	movs	r3, #1
 800f8de:	f04f 0900 	mov.w	r9, #0
 800f8e2:	9304      	str	r3, [sp, #16]
 800f8e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800f8e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800f8ec:	464f      	mov	r7, r9
 800f8ee:	220a      	movs	r2, #10
 800f8f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800f8f2:	7806      	ldrb	r6, [r0, #0]
 800f8f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800f8f8:	b2d9      	uxtb	r1, r3
 800f8fa:	2909      	cmp	r1, #9
 800f8fc:	d92a      	bls.n	800f954 <_strtod_l+0x1bc>
 800f8fe:	9907      	ldr	r1, [sp, #28]
 800f900:	462a      	mov	r2, r5
 800f902:	f7ff ff19 	bl	800f738 <strncmp>
 800f906:	b398      	cbz	r0, 800f970 <_strtod_l+0x1d8>
 800f908:	2000      	movs	r0, #0
 800f90a:	4633      	mov	r3, r6
 800f90c:	463d      	mov	r5, r7
 800f90e:	9007      	str	r0, [sp, #28]
 800f910:	4602      	mov	r2, r0
 800f912:	2b65      	cmp	r3, #101	; 0x65
 800f914:	d001      	beq.n	800f91a <_strtod_l+0x182>
 800f916:	2b45      	cmp	r3, #69	; 0x45
 800f918:	d118      	bne.n	800f94c <_strtod_l+0x1b4>
 800f91a:	b91d      	cbnz	r5, 800f924 <_strtod_l+0x18c>
 800f91c:	9b04      	ldr	r3, [sp, #16]
 800f91e:	4303      	orrs	r3, r0
 800f920:	d098      	beq.n	800f854 <_strtod_l+0xbc>
 800f922:	2500      	movs	r5, #0
 800f924:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800f928:	f108 0301 	add.w	r3, r8, #1
 800f92c:	931d      	str	r3, [sp, #116]	; 0x74
 800f92e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f932:	2b2b      	cmp	r3, #43	; 0x2b
 800f934:	d075      	beq.n	800fa22 <_strtod_l+0x28a>
 800f936:	2b2d      	cmp	r3, #45	; 0x2d
 800f938:	d07b      	beq.n	800fa32 <_strtod_l+0x29a>
 800f93a:	f04f 0c00 	mov.w	ip, #0
 800f93e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f942:	2909      	cmp	r1, #9
 800f944:	f240 8082 	bls.w	800fa4c <_strtod_l+0x2b4>
 800f948:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f94c:	2600      	movs	r6, #0
 800f94e:	e09d      	b.n	800fa8c <_strtod_l+0x2f4>
 800f950:	2300      	movs	r3, #0
 800f952:	e7c4      	b.n	800f8de <_strtod_l+0x146>
 800f954:	2f08      	cmp	r7, #8
 800f956:	bfd8      	it	le
 800f958:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800f95a:	f100 0001 	add.w	r0, r0, #1
 800f95e:	bfda      	itte	le
 800f960:	fb02 3301 	mlale	r3, r2, r1, r3
 800f964:	9309      	strle	r3, [sp, #36]	; 0x24
 800f966:	fb02 3909 	mlagt	r9, r2, r9, r3
 800f96a:	3701      	adds	r7, #1
 800f96c:	901d      	str	r0, [sp, #116]	; 0x74
 800f96e:	e7bf      	b.n	800f8f0 <_strtod_l+0x158>
 800f970:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f972:	195a      	adds	r2, r3, r5
 800f974:	921d      	str	r2, [sp, #116]	; 0x74
 800f976:	5d5b      	ldrb	r3, [r3, r5]
 800f978:	2f00      	cmp	r7, #0
 800f97a:	d037      	beq.n	800f9ec <_strtod_l+0x254>
 800f97c:	9007      	str	r0, [sp, #28]
 800f97e:	463d      	mov	r5, r7
 800f980:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800f984:	2a09      	cmp	r2, #9
 800f986:	d912      	bls.n	800f9ae <_strtod_l+0x216>
 800f988:	2201      	movs	r2, #1
 800f98a:	e7c2      	b.n	800f912 <_strtod_l+0x17a>
 800f98c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f98e:	1c5a      	adds	r2, r3, #1
 800f990:	921d      	str	r2, [sp, #116]	; 0x74
 800f992:	785b      	ldrb	r3, [r3, #1]
 800f994:	3001      	adds	r0, #1
 800f996:	2b30      	cmp	r3, #48	; 0x30
 800f998:	d0f8      	beq.n	800f98c <_strtod_l+0x1f4>
 800f99a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f99e:	2a08      	cmp	r2, #8
 800f9a0:	f200 84db 	bhi.w	801035a <_strtod_l+0xbc2>
 800f9a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f9a6:	9007      	str	r0, [sp, #28]
 800f9a8:	2000      	movs	r0, #0
 800f9aa:	920a      	str	r2, [sp, #40]	; 0x28
 800f9ac:	4605      	mov	r5, r0
 800f9ae:	3b30      	subs	r3, #48	; 0x30
 800f9b0:	f100 0201 	add.w	r2, r0, #1
 800f9b4:	d014      	beq.n	800f9e0 <_strtod_l+0x248>
 800f9b6:	9907      	ldr	r1, [sp, #28]
 800f9b8:	4411      	add	r1, r2
 800f9ba:	9107      	str	r1, [sp, #28]
 800f9bc:	462a      	mov	r2, r5
 800f9be:	eb00 0e05 	add.w	lr, r0, r5
 800f9c2:	210a      	movs	r1, #10
 800f9c4:	4572      	cmp	r2, lr
 800f9c6:	d113      	bne.n	800f9f0 <_strtod_l+0x258>
 800f9c8:	182a      	adds	r2, r5, r0
 800f9ca:	2a08      	cmp	r2, #8
 800f9cc:	f105 0501 	add.w	r5, r5, #1
 800f9d0:	4405      	add	r5, r0
 800f9d2:	dc1c      	bgt.n	800fa0e <_strtod_l+0x276>
 800f9d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f9d6:	220a      	movs	r2, #10
 800f9d8:	fb02 3301 	mla	r3, r2, r1, r3
 800f9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f9de:	2200      	movs	r2, #0
 800f9e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9e2:	1c59      	adds	r1, r3, #1
 800f9e4:	911d      	str	r1, [sp, #116]	; 0x74
 800f9e6:	785b      	ldrb	r3, [r3, #1]
 800f9e8:	4610      	mov	r0, r2
 800f9ea:	e7c9      	b.n	800f980 <_strtod_l+0x1e8>
 800f9ec:	4638      	mov	r0, r7
 800f9ee:	e7d2      	b.n	800f996 <_strtod_l+0x1fe>
 800f9f0:	2a08      	cmp	r2, #8
 800f9f2:	dc04      	bgt.n	800f9fe <_strtod_l+0x266>
 800f9f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800f9f6:	434e      	muls	r6, r1
 800f9f8:	9609      	str	r6, [sp, #36]	; 0x24
 800f9fa:	3201      	adds	r2, #1
 800f9fc:	e7e2      	b.n	800f9c4 <_strtod_l+0x22c>
 800f9fe:	f102 0c01 	add.w	ip, r2, #1
 800fa02:	f1bc 0f10 	cmp.w	ip, #16
 800fa06:	bfd8      	it	le
 800fa08:	fb01 f909 	mulle.w	r9, r1, r9
 800fa0c:	e7f5      	b.n	800f9fa <_strtod_l+0x262>
 800fa0e:	2d10      	cmp	r5, #16
 800fa10:	bfdc      	itt	le
 800fa12:	220a      	movle	r2, #10
 800fa14:	fb02 3909 	mlale	r9, r2, r9, r3
 800fa18:	e7e1      	b.n	800f9de <_strtod_l+0x246>
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	9307      	str	r3, [sp, #28]
 800fa1e:	2201      	movs	r2, #1
 800fa20:	e77c      	b.n	800f91c <_strtod_l+0x184>
 800fa22:	f04f 0c00 	mov.w	ip, #0
 800fa26:	f108 0302 	add.w	r3, r8, #2
 800fa2a:	931d      	str	r3, [sp, #116]	; 0x74
 800fa2c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fa30:	e785      	b.n	800f93e <_strtod_l+0x1a6>
 800fa32:	f04f 0c01 	mov.w	ip, #1
 800fa36:	e7f6      	b.n	800fa26 <_strtod_l+0x28e>
 800fa38:	08014f48 	.word	0x08014f48
 800fa3c:	08014d98 	.word	0x08014d98
 800fa40:	7ff00000 	.word	0x7ff00000
 800fa44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa46:	1c59      	adds	r1, r3, #1
 800fa48:	911d      	str	r1, [sp, #116]	; 0x74
 800fa4a:	785b      	ldrb	r3, [r3, #1]
 800fa4c:	2b30      	cmp	r3, #48	; 0x30
 800fa4e:	d0f9      	beq.n	800fa44 <_strtod_l+0x2ac>
 800fa50:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800fa54:	2908      	cmp	r1, #8
 800fa56:	f63f af79 	bhi.w	800f94c <_strtod_l+0x1b4>
 800fa5a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fa5e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa60:	9308      	str	r3, [sp, #32]
 800fa62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa64:	1c59      	adds	r1, r3, #1
 800fa66:	911d      	str	r1, [sp, #116]	; 0x74
 800fa68:	785b      	ldrb	r3, [r3, #1]
 800fa6a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800fa6e:	2e09      	cmp	r6, #9
 800fa70:	d937      	bls.n	800fae2 <_strtod_l+0x34a>
 800fa72:	9e08      	ldr	r6, [sp, #32]
 800fa74:	1b89      	subs	r1, r1, r6
 800fa76:	2908      	cmp	r1, #8
 800fa78:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fa7c:	dc02      	bgt.n	800fa84 <_strtod_l+0x2ec>
 800fa7e:	4576      	cmp	r6, lr
 800fa80:	bfa8      	it	ge
 800fa82:	4676      	movge	r6, lr
 800fa84:	f1bc 0f00 	cmp.w	ip, #0
 800fa88:	d000      	beq.n	800fa8c <_strtod_l+0x2f4>
 800fa8a:	4276      	negs	r6, r6
 800fa8c:	2d00      	cmp	r5, #0
 800fa8e:	d14f      	bne.n	800fb30 <_strtod_l+0x398>
 800fa90:	9904      	ldr	r1, [sp, #16]
 800fa92:	4301      	orrs	r1, r0
 800fa94:	f47f aec2 	bne.w	800f81c <_strtod_l+0x84>
 800fa98:	2a00      	cmp	r2, #0
 800fa9a:	f47f aedb 	bne.w	800f854 <_strtod_l+0xbc>
 800fa9e:	2b69      	cmp	r3, #105	; 0x69
 800faa0:	d027      	beq.n	800faf2 <_strtod_l+0x35a>
 800faa2:	dc24      	bgt.n	800faee <_strtod_l+0x356>
 800faa4:	2b49      	cmp	r3, #73	; 0x49
 800faa6:	d024      	beq.n	800faf2 <_strtod_l+0x35a>
 800faa8:	2b4e      	cmp	r3, #78	; 0x4e
 800faaa:	f47f aed3 	bne.w	800f854 <_strtod_l+0xbc>
 800faae:	499e      	ldr	r1, [pc, #632]	; (800fd28 <_strtod_l+0x590>)
 800fab0:	a81d      	add	r0, sp, #116	; 0x74
 800fab2:	f002 f91b 	bl	8011cec <__match>
 800fab6:	2800      	cmp	r0, #0
 800fab8:	f43f aecc 	beq.w	800f854 <_strtod_l+0xbc>
 800fabc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	2b28      	cmp	r3, #40	; 0x28
 800fac2:	d12d      	bne.n	800fb20 <_strtod_l+0x388>
 800fac4:	4999      	ldr	r1, [pc, #612]	; (800fd2c <_strtod_l+0x594>)
 800fac6:	aa20      	add	r2, sp, #128	; 0x80
 800fac8:	a81d      	add	r0, sp, #116	; 0x74
 800faca:	f002 f923 	bl	8011d14 <__hexnan>
 800face:	2805      	cmp	r0, #5
 800fad0:	d126      	bne.n	800fb20 <_strtod_l+0x388>
 800fad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fad4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800fad8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fadc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fae0:	e69c      	b.n	800f81c <_strtod_l+0x84>
 800fae2:	210a      	movs	r1, #10
 800fae4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fae8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800faec:	e7b9      	b.n	800fa62 <_strtod_l+0x2ca>
 800faee:	2b6e      	cmp	r3, #110	; 0x6e
 800faf0:	e7db      	b.n	800faaa <_strtod_l+0x312>
 800faf2:	498f      	ldr	r1, [pc, #572]	; (800fd30 <_strtod_l+0x598>)
 800faf4:	a81d      	add	r0, sp, #116	; 0x74
 800faf6:	f002 f8f9 	bl	8011cec <__match>
 800fafa:	2800      	cmp	r0, #0
 800fafc:	f43f aeaa 	beq.w	800f854 <_strtod_l+0xbc>
 800fb00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb02:	498c      	ldr	r1, [pc, #560]	; (800fd34 <_strtod_l+0x59c>)
 800fb04:	3b01      	subs	r3, #1
 800fb06:	a81d      	add	r0, sp, #116	; 0x74
 800fb08:	931d      	str	r3, [sp, #116]	; 0x74
 800fb0a:	f002 f8ef 	bl	8011cec <__match>
 800fb0e:	b910      	cbnz	r0, 800fb16 <_strtod_l+0x37e>
 800fb10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb12:	3301      	adds	r3, #1
 800fb14:	931d      	str	r3, [sp, #116]	; 0x74
 800fb16:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800fd44 <_strtod_l+0x5ac>
 800fb1a:	f04f 0a00 	mov.w	sl, #0
 800fb1e:	e67d      	b.n	800f81c <_strtod_l+0x84>
 800fb20:	4885      	ldr	r0, [pc, #532]	; (800fd38 <_strtod_l+0x5a0>)
 800fb22:	f003 fce1 	bl	80134e8 <nan>
 800fb26:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fb2a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fb2e:	e675      	b.n	800f81c <_strtod_l+0x84>
 800fb30:	9b07      	ldr	r3, [sp, #28]
 800fb32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb34:	1af3      	subs	r3, r6, r3
 800fb36:	2f00      	cmp	r7, #0
 800fb38:	bf08      	it	eq
 800fb3a:	462f      	moveq	r7, r5
 800fb3c:	2d10      	cmp	r5, #16
 800fb3e:	9308      	str	r3, [sp, #32]
 800fb40:	46a8      	mov	r8, r5
 800fb42:	bfa8      	it	ge
 800fb44:	f04f 0810 	movge.w	r8, #16
 800fb48:	f7f0 fcfc 	bl	8000544 <__aeabi_ui2d>
 800fb4c:	2d09      	cmp	r5, #9
 800fb4e:	4682      	mov	sl, r0
 800fb50:	468b      	mov	fp, r1
 800fb52:	dd13      	ble.n	800fb7c <_strtod_l+0x3e4>
 800fb54:	4b79      	ldr	r3, [pc, #484]	; (800fd3c <_strtod_l+0x5a4>)
 800fb56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fb5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fb5e:	f7f0 fd6b 	bl	8000638 <__aeabi_dmul>
 800fb62:	4682      	mov	sl, r0
 800fb64:	4648      	mov	r0, r9
 800fb66:	468b      	mov	fp, r1
 800fb68:	f7f0 fcec 	bl	8000544 <__aeabi_ui2d>
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	460b      	mov	r3, r1
 800fb70:	4650      	mov	r0, sl
 800fb72:	4659      	mov	r1, fp
 800fb74:	f7f0 fbaa 	bl	80002cc <__adddf3>
 800fb78:	4682      	mov	sl, r0
 800fb7a:	468b      	mov	fp, r1
 800fb7c:	2d0f      	cmp	r5, #15
 800fb7e:	dc38      	bgt.n	800fbf2 <_strtod_l+0x45a>
 800fb80:	9b08      	ldr	r3, [sp, #32]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	f43f ae4a 	beq.w	800f81c <_strtod_l+0x84>
 800fb88:	dd24      	ble.n	800fbd4 <_strtod_l+0x43c>
 800fb8a:	2b16      	cmp	r3, #22
 800fb8c:	dc0b      	bgt.n	800fba6 <_strtod_l+0x40e>
 800fb8e:	4d6b      	ldr	r5, [pc, #428]	; (800fd3c <_strtod_l+0x5a4>)
 800fb90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fb94:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fb98:	4652      	mov	r2, sl
 800fb9a:	465b      	mov	r3, fp
 800fb9c:	f7f0 fd4c 	bl	8000638 <__aeabi_dmul>
 800fba0:	4682      	mov	sl, r0
 800fba2:	468b      	mov	fp, r1
 800fba4:	e63a      	b.n	800f81c <_strtod_l+0x84>
 800fba6:	9a08      	ldr	r2, [sp, #32]
 800fba8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fbac:	4293      	cmp	r3, r2
 800fbae:	db20      	blt.n	800fbf2 <_strtod_l+0x45a>
 800fbb0:	4c62      	ldr	r4, [pc, #392]	; (800fd3c <_strtod_l+0x5a4>)
 800fbb2:	f1c5 050f 	rsb	r5, r5, #15
 800fbb6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fbba:	4652      	mov	r2, sl
 800fbbc:	465b      	mov	r3, fp
 800fbbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbc2:	f7f0 fd39 	bl	8000638 <__aeabi_dmul>
 800fbc6:	9b08      	ldr	r3, [sp, #32]
 800fbc8:	1b5d      	subs	r5, r3, r5
 800fbca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fbce:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fbd2:	e7e3      	b.n	800fb9c <_strtod_l+0x404>
 800fbd4:	9b08      	ldr	r3, [sp, #32]
 800fbd6:	3316      	adds	r3, #22
 800fbd8:	db0b      	blt.n	800fbf2 <_strtod_l+0x45a>
 800fbda:	9b07      	ldr	r3, [sp, #28]
 800fbdc:	4a57      	ldr	r2, [pc, #348]	; (800fd3c <_strtod_l+0x5a4>)
 800fbde:	1b9e      	subs	r6, r3, r6
 800fbe0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800fbe4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fbe8:	4650      	mov	r0, sl
 800fbea:	4659      	mov	r1, fp
 800fbec:	f7f0 fe4e 	bl	800088c <__aeabi_ddiv>
 800fbf0:	e7d6      	b.n	800fba0 <_strtod_l+0x408>
 800fbf2:	9b08      	ldr	r3, [sp, #32]
 800fbf4:	eba5 0808 	sub.w	r8, r5, r8
 800fbf8:	4498      	add	r8, r3
 800fbfa:	f1b8 0f00 	cmp.w	r8, #0
 800fbfe:	dd71      	ble.n	800fce4 <_strtod_l+0x54c>
 800fc00:	f018 030f 	ands.w	r3, r8, #15
 800fc04:	d00a      	beq.n	800fc1c <_strtod_l+0x484>
 800fc06:	494d      	ldr	r1, [pc, #308]	; (800fd3c <_strtod_l+0x5a4>)
 800fc08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fc0c:	4652      	mov	r2, sl
 800fc0e:	465b      	mov	r3, fp
 800fc10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc14:	f7f0 fd10 	bl	8000638 <__aeabi_dmul>
 800fc18:	4682      	mov	sl, r0
 800fc1a:	468b      	mov	fp, r1
 800fc1c:	f038 080f 	bics.w	r8, r8, #15
 800fc20:	d04d      	beq.n	800fcbe <_strtod_l+0x526>
 800fc22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fc26:	dd22      	ble.n	800fc6e <_strtod_l+0x4d6>
 800fc28:	2500      	movs	r5, #0
 800fc2a:	462e      	mov	r6, r5
 800fc2c:	9509      	str	r5, [sp, #36]	; 0x24
 800fc2e:	9507      	str	r5, [sp, #28]
 800fc30:	2322      	movs	r3, #34	; 0x22
 800fc32:	f8df b110 	ldr.w	fp, [pc, #272]	; 800fd44 <_strtod_l+0x5ac>
 800fc36:	6023      	str	r3, [r4, #0]
 800fc38:	f04f 0a00 	mov.w	sl, #0
 800fc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f43f adec 	beq.w	800f81c <_strtod_l+0x84>
 800fc44:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fc46:	4620      	mov	r0, r4
 800fc48:	f002 f9dc 	bl	8012004 <_Bfree>
 800fc4c:	9907      	ldr	r1, [sp, #28]
 800fc4e:	4620      	mov	r0, r4
 800fc50:	f002 f9d8 	bl	8012004 <_Bfree>
 800fc54:	4631      	mov	r1, r6
 800fc56:	4620      	mov	r0, r4
 800fc58:	f002 f9d4 	bl	8012004 <_Bfree>
 800fc5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc5e:	4620      	mov	r0, r4
 800fc60:	f002 f9d0 	bl	8012004 <_Bfree>
 800fc64:	4629      	mov	r1, r5
 800fc66:	4620      	mov	r0, r4
 800fc68:	f002 f9cc 	bl	8012004 <_Bfree>
 800fc6c:	e5d6      	b.n	800f81c <_strtod_l+0x84>
 800fc6e:	2300      	movs	r3, #0
 800fc70:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fc74:	4650      	mov	r0, sl
 800fc76:	4659      	mov	r1, fp
 800fc78:	4699      	mov	r9, r3
 800fc7a:	f1b8 0f01 	cmp.w	r8, #1
 800fc7e:	dc21      	bgt.n	800fcc4 <_strtod_l+0x52c>
 800fc80:	b10b      	cbz	r3, 800fc86 <_strtod_l+0x4ee>
 800fc82:	4682      	mov	sl, r0
 800fc84:	468b      	mov	fp, r1
 800fc86:	4b2e      	ldr	r3, [pc, #184]	; (800fd40 <_strtod_l+0x5a8>)
 800fc88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fc8c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800fc90:	4652      	mov	r2, sl
 800fc92:	465b      	mov	r3, fp
 800fc94:	e9d9 0100 	ldrd	r0, r1, [r9]
 800fc98:	f7f0 fcce 	bl	8000638 <__aeabi_dmul>
 800fc9c:	4b29      	ldr	r3, [pc, #164]	; (800fd44 <_strtod_l+0x5ac>)
 800fc9e:	460a      	mov	r2, r1
 800fca0:	400b      	ands	r3, r1
 800fca2:	4929      	ldr	r1, [pc, #164]	; (800fd48 <_strtod_l+0x5b0>)
 800fca4:	428b      	cmp	r3, r1
 800fca6:	4682      	mov	sl, r0
 800fca8:	d8be      	bhi.n	800fc28 <_strtod_l+0x490>
 800fcaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fcae:	428b      	cmp	r3, r1
 800fcb0:	bf86      	itte	hi
 800fcb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800fd4c <_strtod_l+0x5b4>
 800fcb6:	f04f 3aff 	movhi.w	sl, #4294967295
 800fcba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	9304      	str	r3, [sp, #16]
 800fcc2:	e081      	b.n	800fdc8 <_strtod_l+0x630>
 800fcc4:	f018 0f01 	tst.w	r8, #1
 800fcc8:	d007      	beq.n	800fcda <_strtod_l+0x542>
 800fcca:	4b1d      	ldr	r3, [pc, #116]	; (800fd40 <_strtod_l+0x5a8>)
 800fccc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fcd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd4:	f7f0 fcb0 	bl	8000638 <__aeabi_dmul>
 800fcd8:	2301      	movs	r3, #1
 800fcda:	f109 0901 	add.w	r9, r9, #1
 800fcde:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fce2:	e7ca      	b.n	800fc7a <_strtod_l+0x4e2>
 800fce4:	d0eb      	beq.n	800fcbe <_strtod_l+0x526>
 800fce6:	f1c8 0800 	rsb	r8, r8, #0
 800fcea:	f018 020f 	ands.w	r2, r8, #15
 800fcee:	d00a      	beq.n	800fd06 <_strtod_l+0x56e>
 800fcf0:	4b12      	ldr	r3, [pc, #72]	; (800fd3c <_strtod_l+0x5a4>)
 800fcf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fcf6:	4650      	mov	r0, sl
 800fcf8:	4659      	mov	r1, fp
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 fdc5 	bl	800088c <__aeabi_ddiv>
 800fd02:	4682      	mov	sl, r0
 800fd04:	468b      	mov	fp, r1
 800fd06:	ea5f 1828 	movs.w	r8, r8, asr #4
 800fd0a:	d0d8      	beq.n	800fcbe <_strtod_l+0x526>
 800fd0c:	f1b8 0f1f 	cmp.w	r8, #31
 800fd10:	dd1e      	ble.n	800fd50 <_strtod_l+0x5b8>
 800fd12:	2500      	movs	r5, #0
 800fd14:	462e      	mov	r6, r5
 800fd16:	9509      	str	r5, [sp, #36]	; 0x24
 800fd18:	9507      	str	r5, [sp, #28]
 800fd1a:	2322      	movs	r3, #34	; 0x22
 800fd1c:	f04f 0a00 	mov.w	sl, #0
 800fd20:	f04f 0b00 	mov.w	fp, #0
 800fd24:	6023      	str	r3, [r4, #0]
 800fd26:	e789      	b.n	800fc3c <_strtod_l+0x4a4>
 800fd28:	08014d6d 	.word	0x08014d6d
 800fd2c:	08014dac 	.word	0x08014dac
 800fd30:	08014d65 	.word	0x08014d65
 800fd34:	08014deb 	.word	0x08014deb
 800fd38:	08015123 	.word	0x08015123
 800fd3c:	08014fe8 	.word	0x08014fe8
 800fd40:	08014fc0 	.word	0x08014fc0
 800fd44:	7ff00000 	.word	0x7ff00000
 800fd48:	7ca00000 	.word	0x7ca00000
 800fd4c:	7fefffff 	.word	0x7fefffff
 800fd50:	f018 0310 	ands.w	r3, r8, #16
 800fd54:	bf18      	it	ne
 800fd56:	236a      	movne	r3, #106	; 0x6a
 800fd58:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010110 <_strtod_l+0x978>
 800fd5c:	9304      	str	r3, [sp, #16]
 800fd5e:	4650      	mov	r0, sl
 800fd60:	4659      	mov	r1, fp
 800fd62:	2300      	movs	r3, #0
 800fd64:	f018 0f01 	tst.w	r8, #1
 800fd68:	d004      	beq.n	800fd74 <_strtod_l+0x5dc>
 800fd6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fd6e:	f7f0 fc63 	bl	8000638 <__aeabi_dmul>
 800fd72:	2301      	movs	r3, #1
 800fd74:	ea5f 0868 	movs.w	r8, r8, asr #1
 800fd78:	f109 0908 	add.w	r9, r9, #8
 800fd7c:	d1f2      	bne.n	800fd64 <_strtod_l+0x5cc>
 800fd7e:	b10b      	cbz	r3, 800fd84 <_strtod_l+0x5ec>
 800fd80:	4682      	mov	sl, r0
 800fd82:	468b      	mov	fp, r1
 800fd84:	9b04      	ldr	r3, [sp, #16]
 800fd86:	b1bb      	cbz	r3, 800fdb8 <_strtod_l+0x620>
 800fd88:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800fd8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	4659      	mov	r1, fp
 800fd94:	dd10      	ble.n	800fdb8 <_strtod_l+0x620>
 800fd96:	2b1f      	cmp	r3, #31
 800fd98:	f340 8128 	ble.w	800ffec <_strtod_l+0x854>
 800fd9c:	2b34      	cmp	r3, #52	; 0x34
 800fd9e:	bfde      	ittt	le
 800fda0:	3b20      	suble	r3, #32
 800fda2:	f04f 32ff 	movle.w	r2, #4294967295
 800fda6:	fa02 f303 	lslle.w	r3, r2, r3
 800fdaa:	f04f 0a00 	mov.w	sl, #0
 800fdae:	bfcc      	ite	gt
 800fdb0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800fdb4:	ea03 0b01 	andle.w	fp, r3, r1
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2300      	movs	r3, #0
 800fdbc:	4650      	mov	r0, sl
 800fdbe:	4659      	mov	r1, fp
 800fdc0:	f7f0 fea2 	bl	8000b08 <__aeabi_dcmpeq>
 800fdc4:	2800      	cmp	r0, #0
 800fdc6:	d1a4      	bne.n	800fd12 <_strtod_l+0x57a>
 800fdc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdca:	9300      	str	r3, [sp, #0]
 800fdcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fdce:	462b      	mov	r3, r5
 800fdd0:	463a      	mov	r2, r7
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f002 f982 	bl	80120dc <__s2b>
 800fdd8:	9009      	str	r0, [sp, #36]	; 0x24
 800fdda:	2800      	cmp	r0, #0
 800fddc:	f43f af24 	beq.w	800fc28 <_strtod_l+0x490>
 800fde0:	9b07      	ldr	r3, [sp, #28]
 800fde2:	1b9e      	subs	r6, r3, r6
 800fde4:	9b08      	ldr	r3, [sp, #32]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	bfb4      	ite	lt
 800fdea:	4633      	movlt	r3, r6
 800fdec:	2300      	movge	r3, #0
 800fdee:	9310      	str	r3, [sp, #64]	; 0x40
 800fdf0:	9b08      	ldr	r3, [sp, #32]
 800fdf2:	2500      	movs	r5, #0
 800fdf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fdf8:	9318      	str	r3, [sp, #96]	; 0x60
 800fdfa:	462e      	mov	r6, r5
 800fdfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdfe:	4620      	mov	r0, r4
 800fe00:	6859      	ldr	r1, [r3, #4]
 800fe02:	f002 f8bf 	bl	8011f84 <_Balloc>
 800fe06:	9007      	str	r0, [sp, #28]
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	f43f af11 	beq.w	800fc30 <_strtod_l+0x498>
 800fe0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe10:	691a      	ldr	r2, [r3, #16]
 800fe12:	3202      	adds	r2, #2
 800fe14:	f103 010c 	add.w	r1, r3, #12
 800fe18:	0092      	lsls	r2, r2, #2
 800fe1a:	300c      	adds	r0, #12
 800fe1c:	f7fe fc96 	bl	800e74c <memcpy>
 800fe20:	ec4b ab10 	vmov	d0, sl, fp
 800fe24:	aa20      	add	r2, sp, #128	; 0x80
 800fe26:	a91f      	add	r1, sp, #124	; 0x7c
 800fe28:	4620      	mov	r0, r4
 800fe2a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800fe2e:	f002 fc91 	bl	8012754 <__d2b>
 800fe32:	901e      	str	r0, [sp, #120]	; 0x78
 800fe34:	2800      	cmp	r0, #0
 800fe36:	f43f aefb 	beq.w	800fc30 <_strtod_l+0x498>
 800fe3a:	2101      	movs	r1, #1
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	f002 f9e7 	bl	8012210 <__i2b>
 800fe42:	4606      	mov	r6, r0
 800fe44:	2800      	cmp	r0, #0
 800fe46:	f43f aef3 	beq.w	800fc30 <_strtod_l+0x498>
 800fe4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fe4c:	9904      	ldr	r1, [sp, #16]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	bfab      	itete	ge
 800fe52:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800fe54:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800fe56:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800fe58:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800fe5c:	bfac      	ite	ge
 800fe5e:	eb03 0902 	addge.w	r9, r3, r2
 800fe62:	1ad7      	sublt	r7, r2, r3
 800fe64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe66:	eba3 0801 	sub.w	r8, r3, r1
 800fe6a:	4490      	add	r8, r2
 800fe6c:	4ba3      	ldr	r3, [pc, #652]	; (80100fc <_strtod_l+0x964>)
 800fe6e:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe72:	4598      	cmp	r8, r3
 800fe74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fe78:	f280 80cc 	bge.w	8010014 <_strtod_l+0x87c>
 800fe7c:	eba3 0308 	sub.w	r3, r3, r8
 800fe80:	2b1f      	cmp	r3, #31
 800fe82:	eba2 0203 	sub.w	r2, r2, r3
 800fe86:	f04f 0101 	mov.w	r1, #1
 800fe8a:	f300 80b6 	bgt.w	800fffa <_strtod_l+0x862>
 800fe8e:	fa01 f303 	lsl.w	r3, r1, r3
 800fe92:	9311      	str	r3, [sp, #68]	; 0x44
 800fe94:	2300      	movs	r3, #0
 800fe96:	930c      	str	r3, [sp, #48]	; 0x30
 800fe98:	eb09 0802 	add.w	r8, r9, r2
 800fe9c:	9b04      	ldr	r3, [sp, #16]
 800fe9e:	45c1      	cmp	r9, r8
 800fea0:	4417      	add	r7, r2
 800fea2:	441f      	add	r7, r3
 800fea4:	464b      	mov	r3, r9
 800fea6:	bfa8      	it	ge
 800fea8:	4643      	movge	r3, r8
 800feaa:	42bb      	cmp	r3, r7
 800feac:	bfa8      	it	ge
 800feae:	463b      	movge	r3, r7
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	bfc2      	ittt	gt
 800feb4:	eba8 0803 	subgt.w	r8, r8, r3
 800feb8:	1aff      	subgt	r7, r7, r3
 800feba:	eba9 0903 	subgt.w	r9, r9, r3
 800febe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	dd17      	ble.n	800fef4 <_strtod_l+0x75c>
 800fec4:	4631      	mov	r1, r6
 800fec6:	461a      	mov	r2, r3
 800fec8:	4620      	mov	r0, r4
 800feca:	f002 fa5d 	bl	8012388 <__pow5mult>
 800fece:	4606      	mov	r6, r0
 800fed0:	2800      	cmp	r0, #0
 800fed2:	f43f aead 	beq.w	800fc30 <_strtod_l+0x498>
 800fed6:	4601      	mov	r1, r0
 800fed8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800feda:	4620      	mov	r0, r4
 800fedc:	f002 f9ae 	bl	801223c <__multiply>
 800fee0:	900f      	str	r0, [sp, #60]	; 0x3c
 800fee2:	2800      	cmp	r0, #0
 800fee4:	f43f aea4 	beq.w	800fc30 <_strtod_l+0x498>
 800fee8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800feea:	4620      	mov	r0, r4
 800feec:	f002 f88a 	bl	8012004 <_Bfree>
 800fef0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fef2:	931e      	str	r3, [sp, #120]	; 0x78
 800fef4:	f1b8 0f00 	cmp.w	r8, #0
 800fef8:	f300 8091 	bgt.w	801001e <_strtod_l+0x886>
 800fefc:	9b08      	ldr	r3, [sp, #32]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	dd08      	ble.n	800ff14 <_strtod_l+0x77c>
 800ff02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ff04:	9907      	ldr	r1, [sp, #28]
 800ff06:	4620      	mov	r0, r4
 800ff08:	f002 fa3e 	bl	8012388 <__pow5mult>
 800ff0c:	9007      	str	r0, [sp, #28]
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	f43f ae8e 	beq.w	800fc30 <_strtod_l+0x498>
 800ff14:	2f00      	cmp	r7, #0
 800ff16:	dd08      	ble.n	800ff2a <_strtod_l+0x792>
 800ff18:	9907      	ldr	r1, [sp, #28]
 800ff1a:	463a      	mov	r2, r7
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f002 fa8d 	bl	801243c <__lshift>
 800ff22:	9007      	str	r0, [sp, #28]
 800ff24:	2800      	cmp	r0, #0
 800ff26:	f43f ae83 	beq.w	800fc30 <_strtod_l+0x498>
 800ff2a:	f1b9 0f00 	cmp.w	r9, #0
 800ff2e:	dd08      	ble.n	800ff42 <_strtod_l+0x7aa>
 800ff30:	4631      	mov	r1, r6
 800ff32:	464a      	mov	r2, r9
 800ff34:	4620      	mov	r0, r4
 800ff36:	f002 fa81 	bl	801243c <__lshift>
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	f43f ae77 	beq.w	800fc30 <_strtod_l+0x498>
 800ff42:	9a07      	ldr	r2, [sp, #28]
 800ff44:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ff46:	4620      	mov	r0, r4
 800ff48:	f002 fb00 	bl	801254c <__mdiff>
 800ff4c:	4605      	mov	r5, r0
 800ff4e:	2800      	cmp	r0, #0
 800ff50:	f43f ae6e 	beq.w	800fc30 <_strtod_l+0x498>
 800ff54:	68c3      	ldr	r3, [r0, #12]
 800ff56:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff58:	2300      	movs	r3, #0
 800ff5a:	60c3      	str	r3, [r0, #12]
 800ff5c:	4631      	mov	r1, r6
 800ff5e:	f002 fad9 	bl	8012514 <__mcmp>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	da65      	bge.n	8010032 <_strtod_l+0x89a>
 800ff66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ff68:	ea53 030a 	orrs.w	r3, r3, sl
 800ff6c:	f040 8087 	bne.w	801007e <_strtod_l+0x8e6>
 800ff70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f040 8082 	bne.w	801007e <_strtod_l+0x8e6>
 800ff7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ff7e:	0d1b      	lsrs	r3, r3, #20
 800ff80:	051b      	lsls	r3, r3, #20
 800ff82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ff86:	d97a      	bls.n	801007e <_strtod_l+0x8e6>
 800ff88:	696b      	ldr	r3, [r5, #20]
 800ff8a:	b913      	cbnz	r3, 800ff92 <_strtod_l+0x7fa>
 800ff8c:	692b      	ldr	r3, [r5, #16]
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	dd75      	ble.n	801007e <_strtod_l+0x8e6>
 800ff92:	4629      	mov	r1, r5
 800ff94:	2201      	movs	r2, #1
 800ff96:	4620      	mov	r0, r4
 800ff98:	f002 fa50 	bl	801243c <__lshift>
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4605      	mov	r5, r0
 800ffa0:	f002 fab8 	bl	8012514 <__mcmp>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	dd6a      	ble.n	801007e <_strtod_l+0x8e6>
 800ffa8:	9904      	ldr	r1, [sp, #16]
 800ffaa:	4a55      	ldr	r2, [pc, #340]	; (8010100 <_strtod_l+0x968>)
 800ffac:	465b      	mov	r3, fp
 800ffae:	2900      	cmp	r1, #0
 800ffb0:	f000 8085 	beq.w	80100be <_strtod_l+0x926>
 800ffb4:	ea02 010b 	and.w	r1, r2, fp
 800ffb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ffbc:	dc7f      	bgt.n	80100be <_strtod_l+0x926>
 800ffbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ffc2:	f77f aeaa 	ble.w	800fd1a <_strtod_l+0x582>
 800ffc6:	4a4f      	ldr	r2, [pc, #316]	; (8010104 <_strtod_l+0x96c>)
 800ffc8:	2300      	movs	r3, #0
 800ffca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ffce:	4650      	mov	r0, sl
 800ffd0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ffd4:	4659      	mov	r1, fp
 800ffd6:	f7f0 fb2f 	bl	8000638 <__aeabi_dmul>
 800ffda:	460b      	mov	r3, r1
 800ffdc:	4303      	orrs	r3, r0
 800ffde:	bf08      	it	eq
 800ffe0:	2322      	moveq	r3, #34	; 0x22
 800ffe2:	4682      	mov	sl, r0
 800ffe4:	468b      	mov	fp, r1
 800ffe6:	bf08      	it	eq
 800ffe8:	6023      	streq	r3, [r4, #0]
 800ffea:	e62b      	b.n	800fc44 <_strtod_l+0x4ac>
 800ffec:	f04f 32ff 	mov.w	r2, #4294967295
 800fff0:	fa02 f303 	lsl.w	r3, r2, r3
 800fff4:	ea03 0a0a 	and.w	sl, r3, sl
 800fff8:	e6de      	b.n	800fdb8 <_strtod_l+0x620>
 800fffa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800fffe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010002:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010006:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801000a:	fa01 f308 	lsl.w	r3, r1, r8
 801000e:	930c      	str	r3, [sp, #48]	; 0x30
 8010010:	9111      	str	r1, [sp, #68]	; 0x44
 8010012:	e741      	b.n	800fe98 <_strtod_l+0x700>
 8010014:	2300      	movs	r3, #0
 8010016:	930c      	str	r3, [sp, #48]	; 0x30
 8010018:	2301      	movs	r3, #1
 801001a:	9311      	str	r3, [sp, #68]	; 0x44
 801001c:	e73c      	b.n	800fe98 <_strtod_l+0x700>
 801001e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010020:	4642      	mov	r2, r8
 8010022:	4620      	mov	r0, r4
 8010024:	f002 fa0a 	bl	801243c <__lshift>
 8010028:	901e      	str	r0, [sp, #120]	; 0x78
 801002a:	2800      	cmp	r0, #0
 801002c:	f47f af66 	bne.w	800fefc <_strtod_l+0x764>
 8010030:	e5fe      	b.n	800fc30 <_strtod_l+0x498>
 8010032:	465f      	mov	r7, fp
 8010034:	d16e      	bne.n	8010114 <_strtod_l+0x97c>
 8010036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010038:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801003c:	b342      	cbz	r2, 8010090 <_strtod_l+0x8f8>
 801003e:	4a32      	ldr	r2, [pc, #200]	; (8010108 <_strtod_l+0x970>)
 8010040:	4293      	cmp	r3, r2
 8010042:	d128      	bne.n	8010096 <_strtod_l+0x8fe>
 8010044:	9b04      	ldr	r3, [sp, #16]
 8010046:	4650      	mov	r0, sl
 8010048:	b1eb      	cbz	r3, 8010086 <_strtod_l+0x8ee>
 801004a:	4a2d      	ldr	r2, [pc, #180]	; (8010100 <_strtod_l+0x968>)
 801004c:	403a      	ands	r2, r7
 801004e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010052:	f04f 31ff 	mov.w	r1, #4294967295
 8010056:	d819      	bhi.n	801008c <_strtod_l+0x8f4>
 8010058:	0d12      	lsrs	r2, r2, #20
 801005a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801005e:	fa01 f303 	lsl.w	r3, r1, r3
 8010062:	4298      	cmp	r0, r3
 8010064:	d117      	bne.n	8010096 <_strtod_l+0x8fe>
 8010066:	4b29      	ldr	r3, [pc, #164]	; (801010c <_strtod_l+0x974>)
 8010068:	429f      	cmp	r7, r3
 801006a:	d102      	bne.n	8010072 <_strtod_l+0x8da>
 801006c:	3001      	adds	r0, #1
 801006e:	f43f addf 	beq.w	800fc30 <_strtod_l+0x498>
 8010072:	4b23      	ldr	r3, [pc, #140]	; (8010100 <_strtod_l+0x968>)
 8010074:	403b      	ands	r3, r7
 8010076:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801007a:	f04f 0a00 	mov.w	sl, #0
 801007e:	9b04      	ldr	r3, [sp, #16]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1a0      	bne.n	800ffc6 <_strtod_l+0x82e>
 8010084:	e5de      	b.n	800fc44 <_strtod_l+0x4ac>
 8010086:	f04f 33ff 	mov.w	r3, #4294967295
 801008a:	e7ea      	b.n	8010062 <_strtod_l+0x8ca>
 801008c:	460b      	mov	r3, r1
 801008e:	e7e8      	b.n	8010062 <_strtod_l+0x8ca>
 8010090:	ea53 030a 	orrs.w	r3, r3, sl
 8010094:	d088      	beq.n	800ffa8 <_strtod_l+0x810>
 8010096:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010098:	b1db      	cbz	r3, 80100d2 <_strtod_l+0x93a>
 801009a:	423b      	tst	r3, r7
 801009c:	d0ef      	beq.n	801007e <_strtod_l+0x8e6>
 801009e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100a0:	9a04      	ldr	r2, [sp, #16]
 80100a2:	4650      	mov	r0, sl
 80100a4:	4659      	mov	r1, fp
 80100a6:	b1c3      	cbz	r3, 80100da <_strtod_l+0x942>
 80100a8:	f7ff fb58 	bl	800f75c <sulp>
 80100ac:	4602      	mov	r2, r0
 80100ae:	460b      	mov	r3, r1
 80100b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80100b4:	f7f0 f90a 	bl	80002cc <__adddf3>
 80100b8:	4682      	mov	sl, r0
 80100ba:	468b      	mov	fp, r1
 80100bc:	e7df      	b.n	801007e <_strtod_l+0x8e6>
 80100be:	4013      	ands	r3, r2
 80100c0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80100c4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80100c8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80100cc:	f04f 3aff 	mov.w	sl, #4294967295
 80100d0:	e7d5      	b.n	801007e <_strtod_l+0x8e6>
 80100d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100d4:	ea13 0f0a 	tst.w	r3, sl
 80100d8:	e7e0      	b.n	801009c <_strtod_l+0x904>
 80100da:	f7ff fb3f 	bl	800f75c <sulp>
 80100de:	4602      	mov	r2, r0
 80100e0:	460b      	mov	r3, r1
 80100e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80100e6:	f7f0 f8ef 	bl	80002c8 <__aeabi_dsub>
 80100ea:	2200      	movs	r2, #0
 80100ec:	2300      	movs	r3, #0
 80100ee:	4682      	mov	sl, r0
 80100f0:	468b      	mov	fp, r1
 80100f2:	f7f0 fd09 	bl	8000b08 <__aeabi_dcmpeq>
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d0c1      	beq.n	801007e <_strtod_l+0x8e6>
 80100fa:	e60e      	b.n	800fd1a <_strtod_l+0x582>
 80100fc:	fffffc02 	.word	0xfffffc02
 8010100:	7ff00000 	.word	0x7ff00000
 8010104:	39500000 	.word	0x39500000
 8010108:	000fffff 	.word	0x000fffff
 801010c:	7fefffff 	.word	0x7fefffff
 8010110:	08014dc0 	.word	0x08014dc0
 8010114:	4631      	mov	r1, r6
 8010116:	4628      	mov	r0, r5
 8010118:	f002 fb78 	bl	801280c <__ratio>
 801011c:	ec59 8b10 	vmov	r8, r9, d0
 8010120:	ee10 0a10 	vmov	r0, s0
 8010124:	2200      	movs	r2, #0
 8010126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801012a:	4649      	mov	r1, r9
 801012c:	f7f0 fd00 	bl	8000b30 <__aeabi_dcmple>
 8010130:	2800      	cmp	r0, #0
 8010132:	d07c      	beq.n	801022e <_strtod_l+0xa96>
 8010134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010136:	2b00      	cmp	r3, #0
 8010138:	d04c      	beq.n	80101d4 <_strtod_l+0xa3c>
 801013a:	4b95      	ldr	r3, [pc, #596]	; (8010390 <_strtod_l+0xbf8>)
 801013c:	2200      	movs	r2, #0
 801013e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010142:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010390 <_strtod_l+0xbf8>
 8010146:	f04f 0800 	mov.w	r8, #0
 801014a:	4b92      	ldr	r3, [pc, #584]	; (8010394 <_strtod_l+0xbfc>)
 801014c:	403b      	ands	r3, r7
 801014e:	9311      	str	r3, [sp, #68]	; 0x44
 8010150:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010152:	4b91      	ldr	r3, [pc, #580]	; (8010398 <_strtod_l+0xc00>)
 8010154:	429a      	cmp	r2, r3
 8010156:	f040 80b2 	bne.w	80102be <_strtod_l+0xb26>
 801015a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801015e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010162:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010166:	ec4b ab10 	vmov	d0, sl, fp
 801016a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801016e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010172:	f002 fa73 	bl	801265c <__ulp>
 8010176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801017a:	ec53 2b10 	vmov	r2, r3, d0
 801017e:	f7f0 fa5b 	bl	8000638 <__aeabi_dmul>
 8010182:	4652      	mov	r2, sl
 8010184:	465b      	mov	r3, fp
 8010186:	f7f0 f8a1 	bl	80002cc <__adddf3>
 801018a:	460b      	mov	r3, r1
 801018c:	4981      	ldr	r1, [pc, #516]	; (8010394 <_strtod_l+0xbfc>)
 801018e:	4a83      	ldr	r2, [pc, #524]	; (801039c <_strtod_l+0xc04>)
 8010190:	4019      	ands	r1, r3
 8010192:	4291      	cmp	r1, r2
 8010194:	4682      	mov	sl, r0
 8010196:	d95e      	bls.n	8010256 <_strtod_l+0xabe>
 8010198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801019a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801019e:	4293      	cmp	r3, r2
 80101a0:	d103      	bne.n	80101aa <_strtod_l+0xa12>
 80101a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101a4:	3301      	adds	r3, #1
 80101a6:	f43f ad43 	beq.w	800fc30 <_strtod_l+0x498>
 80101aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80103a8 <_strtod_l+0xc10>
 80101ae:	f04f 3aff 	mov.w	sl, #4294967295
 80101b2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80101b4:	4620      	mov	r0, r4
 80101b6:	f001 ff25 	bl	8012004 <_Bfree>
 80101ba:	9907      	ldr	r1, [sp, #28]
 80101bc:	4620      	mov	r0, r4
 80101be:	f001 ff21 	bl	8012004 <_Bfree>
 80101c2:	4631      	mov	r1, r6
 80101c4:	4620      	mov	r0, r4
 80101c6:	f001 ff1d 	bl	8012004 <_Bfree>
 80101ca:	4629      	mov	r1, r5
 80101cc:	4620      	mov	r0, r4
 80101ce:	f001 ff19 	bl	8012004 <_Bfree>
 80101d2:	e613      	b.n	800fdfc <_strtod_l+0x664>
 80101d4:	f1ba 0f00 	cmp.w	sl, #0
 80101d8:	d11b      	bne.n	8010212 <_strtod_l+0xa7a>
 80101da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101de:	b9f3      	cbnz	r3, 801021e <_strtod_l+0xa86>
 80101e0:	4b6b      	ldr	r3, [pc, #428]	; (8010390 <_strtod_l+0xbf8>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	4640      	mov	r0, r8
 80101e6:	4649      	mov	r1, r9
 80101e8:	f7f0 fc98 	bl	8000b1c <__aeabi_dcmplt>
 80101ec:	b9d0      	cbnz	r0, 8010224 <_strtod_l+0xa8c>
 80101ee:	4640      	mov	r0, r8
 80101f0:	4649      	mov	r1, r9
 80101f2:	4b6b      	ldr	r3, [pc, #428]	; (80103a0 <_strtod_l+0xc08>)
 80101f4:	2200      	movs	r2, #0
 80101f6:	f7f0 fa1f 	bl	8000638 <__aeabi_dmul>
 80101fa:	4680      	mov	r8, r0
 80101fc:	4689      	mov	r9, r1
 80101fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010202:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010206:	931b      	str	r3, [sp, #108]	; 0x6c
 8010208:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801020c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010210:	e79b      	b.n	801014a <_strtod_l+0x9b2>
 8010212:	f1ba 0f01 	cmp.w	sl, #1
 8010216:	d102      	bne.n	801021e <_strtod_l+0xa86>
 8010218:	2f00      	cmp	r7, #0
 801021a:	f43f ad7e 	beq.w	800fd1a <_strtod_l+0x582>
 801021e:	4b61      	ldr	r3, [pc, #388]	; (80103a4 <_strtod_l+0xc0c>)
 8010220:	2200      	movs	r2, #0
 8010222:	e78c      	b.n	801013e <_strtod_l+0x9a6>
 8010224:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80103a0 <_strtod_l+0xc08>
 8010228:	f04f 0800 	mov.w	r8, #0
 801022c:	e7e7      	b.n	80101fe <_strtod_l+0xa66>
 801022e:	4b5c      	ldr	r3, [pc, #368]	; (80103a0 <_strtod_l+0xc08>)
 8010230:	4640      	mov	r0, r8
 8010232:	4649      	mov	r1, r9
 8010234:	2200      	movs	r2, #0
 8010236:	f7f0 f9ff 	bl	8000638 <__aeabi_dmul>
 801023a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801023c:	4680      	mov	r8, r0
 801023e:	4689      	mov	r9, r1
 8010240:	b933      	cbnz	r3, 8010250 <_strtod_l+0xab8>
 8010242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010246:	9012      	str	r0, [sp, #72]	; 0x48
 8010248:	9313      	str	r3, [sp, #76]	; 0x4c
 801024a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801024e:	e7dd      	b.n	801020c <_strtod_l+0xa74>
 8010250:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010254:	e7f9      	b.n	801024a <_strtod_l+0xab2>
 8010256:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801025a:	9b04      	ldr	r3, [sp, #16]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1a8      	bne.n	80101b2 <_strtod_l+0xa1a>
 8010260:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010264:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010266:	0d1b      	lsrs	r3, r3, #20
 8010268:	051b      	lsls	r3, r3, #20
 801026a:	429a      	cmp	r2, r3
 801026c:	d1a1      	bne.n	80101b2 <_strtod_l+0xa1a>
 801026e:	4640      	mov	r0, r8
 8010270:	4649      	mov	r1, r9
 8010272:	f7f0 fd41 	bl	8000cf8 <__aeabi_d2lz>
 8010276:	f7f0 f9b1 	bl	80005dc <__aeabi_l2d>
 801027a:	4602      	mov	r2, r0
 801027c:	460b      	mov	r3, r1
 801027e:	4640      	mov	r0, r8
 8010280:	4649      	mov	r1, r9
 8010282:	f7f0 f821 	bl	80002c8 <__aeabi_dsub>
 8010286:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010288:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801028c:	ea43 030a 	orr.w	r3, r3, sl
 8010290:	4313      	orrs	r3, r2
 8010292:	4680      	mov	r8, r0
 8010294:	4689      	mov	r9, r1
 8010296:	d053      	beq.n	8010340 <_strtod_l+0xba8>
 8010298:	a335      	add	r3, pc, #212	; (adr r3, 8010370 <_strtod_l+0xbd8>)
 801029a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029e:	f7f0 fc3d 	bl	8000b1c <__aeabi_dcmplt>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	f47f acce 	bne.w	800fc44 <_strtod_l+0x4ac>
 80102a8:	a333      	add	r3, pc, #204	; (adr r3, 8010378 <_strtod_l+0xbe0>)
 80102aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ae:	4640      	mov	r0, r8
 80102b0:	4649      	mov	r1, r9
 80102b2:	f7f0 fc51 	bl	8000b58 <__aeabi_dcmpgt>
 80102b6:	2800      	cmp	r0, #0
 80102b8:	f43f af7b 	beq.w	80101b2 <_strtod_l+0xa1a>
 80102bc:	e4c2      	b.n	800fc44 <_strtod_l+0x4ac>
 80102be:	9b04      	ldr	r3, [sp, #16]
 80102c0:	b333      	cbz	r3, 8010310 <_strtod_l+0xb78>
 80102c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80102c8:	d822      	bhi.n	8010310 <_strtod_l+0xb78>
 80102ca:	a32d      	add	r3, pc, #180	; (adr r3, 8010380 <_strtod_l+0xbe8>)
 80102cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d0:	4640      	mov	r0, r8
 80102d2:	4649      	mov	r1, r9
 80102d4:	f7f0 fc2c 	bl	8000b30 <__aeabi_dcmple>
 80102d8:	b1a0      	cbz	r0, 8010304 <_strtod_l+0xb6c>
 80102da:	4649      	mov	r1, r9
 80102dc:	4640      	mov	r0, r8
 80102de:	f7f0 fc83 	bl	8000be8 <__aeabi_d2uiz>
 80102e2:	2801      	cmp	r0, #1
 80102e4:	bf38      	it	cc
 80102e6:	2001      	movcc	r0, #1
 80102e8:	f7f0 f92c 	bl	8000544 <__aeabi_ui2d>
 80102ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102ee:	4680      	mov	r8, r0
 80102f0:	4689      	mov	r9, r1
 80102f2:	bb13      	cbnz	r3, 801033a <_strtod_l+0xba2>
 80102f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102f8:	9014      	str	r0, [sp, #80]	; 0x50
 80102fa:	9315      	str	r3, [sp, #84]	; 0x54
 80102fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010300:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010306:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010308:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801030c:	1a9b      	subs	r3, r3, r2
 801030e:	930d      	str	r3, [sp, #52]	; 0x34
 8010310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010314:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010318:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801031c:	f002 f99e 	bl	801265c <__ulp>
 8010320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010324:	ec53 2b10 	vmov	r2, r3, d0
 8010328:	f7f0 f986 	bl	8000638 <__aeabi_dmul>
 801032c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010330:	f7ef ffcc 	bl	80002cc <__adddf3>
 8010334:	4682      	mov	sl, r0
 8010336:	468b      	mov	fp, r1
 8010338:	e78f      	b.n	801025a <_strtod_l+0xac2>
 801033a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801033e:	e7dd      	b.n	80102fc <_strtod_l+0xb64>
 8010340:	a311      	add	r3, pc, #68	; (adr r3, 8010388 <_strtod_l+0xbf0>)
 8010342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010346:	f7f0 fbe9 	bl	8000b1c <__aeabi_dcmplt>
 801034a:	e7b4      	b.n	80102b6 <_strtod_l+0xb1e>
 801034c:	2300      	movs	r3, #0
 801034e:	930e      	str	r3, [sp, #56]	; 0x38
 8010350:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010352:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010354:	6013      	str	r3, [r2, #0]
 8010356:	f7ff ba65 	b.w	800f824 <_strtod_l+0x8c>
 801035a:	2b65      	cmp	r3, #101	; 0x65
 801035c:	f43f ab5d 	beq.w	800fa1a <_strtod_l+0x282>
 8010360:	2b45      	cmp	r3, #69	; 0x45
 8010362:	f43f ab5a 	beq.w	800fa1a <_strtod_l+0x282>
 8010366:	2201      	movs	r2, #1
 8010368:	f7ff bb92 	b.w	800fa90 <_strtod_l+0x2f8>
 801036c:	f3af 8000 	nop.w
 8010370:	94a03595 	.word	0x94a03595
 8010374:	3fdfffff 	.word	0x3fdfffff
 8010378:	35afe535 	.word	0x35afe535
 801037c:	3fe00000 	.word	0x3fe00000
 8010380:	ffc00000 	.word	0xffc00000
 8010384:	41dfffff 	.word	0x41dfffff
 8010388:	94a03595 	.word	0x94a03595
 801038c:	3fcfffff 	.word	0x3fcfffff
 8010390:	3ff00000 	.word	0x3ff00000
 8010394:	7ff00000 	.word	0x7ff00000
 8010398:	7fe00000 	.word	0x7fe00000
 801039c:	7c9fffff 	.word	0x7c9fffff
 80103a0:	3fe00000 	.word	0x3fe00000
 80103a4:	bff00000 	.word	0xbff00000
 80103a8:	7fefffff 	.word	0x7fefffff

080103ac <_strtod_r>:
 80103ac:	4b01      	ldr	r3, [pc, #4]	; (80103b4 <_strtod_r+0x8>)
 80103ae:	f7ff b9f3 	b.w	800f798 <_strtod_l>
 80103b2:	bf00      	nop
 80103b4:	20000090 	.word	0x20000090

080103b8 <_strtol_l.isra.0>:
 80103b8:	2b01      	cmp	r3, #1
 80103ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103be:	d001      	beq.n	80103c4 <_strtol_l.isra.0+0xc>
 80103c0:	2b24      	cmp	r3, #36	; 0x24
 80103c2:	d906      	bls.n	80103d2 <_strtol_l.isra.0+0x1a>
 80103c4:	f7fe f990 	bl	800e6e8 <__errno>
 80103c8:	2316      	movs	r3, #22
 80103ca:	6003      	str	r3, [r0, #0]
 80103cc:	2000      	movs	r0, #0
 80103ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d2:	4f3a      	ldr	r7, [pc, #232]	; (80104bc <_strtol_l.isra.0+0x104>)
 80103d4:	468e      	mov	lr, r1
 80103d6:	4676      	mov	r6, lr
 80103d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80103dc:	5de5      	ldrb	r5, [r4, r7]
 80103de:	f015 0508 	ands.w	r5, r5, #8
 80103e2:	d1f8      	bne.n	80103d6 <_strtol_l.isra.0+0x1e>
 80103e4:	2c2d      	cmp	r4, #45	; 0x2d
 80103e6:	d134      	bne.n	8010452 <_strtol_l.isra.0+0x9a>
 80103e8:	f89e 4000 	ldrb.w	r4, [lr]
 80103ec:	f04f 0801 	mov.w	r8, #1
 80103f0:	f106 0e02 	add.w	lr, r6, #2
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d05c      	beq.n	80104b2 <_strtol_l.isra.0+0xfa>
 80103f8:	2b10      	cmp	r3, #16
 80103fa:	d10c      	bne.n	8010416 <_strtol_l.isra.0+0x5e>
 80103fc:	2c30      	cmp	r4, #48	; 0x30
 80103fe:	d10a      	bne.n	8010416 <_strtol_l.isra.0+0x5e>
 8010400:	f89e 4000 	ldrb.w	r4, [lr]
 8010404:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010408:	2c58      	cmp	r4, #88	; 0x58
 801040a:	d14d      	bne.n	80104a8 <_strtol_l.isra.0+0xf0>
 801040c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010410:	2310      	movs	r3, #16
 8010412:	f10e 0e02 	add.w	lr, lr, #2
 8010416:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801041a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801041e:	2600      	movs	r6, #0
 8010420:	fbbc f9f3 	udiv	r9, ip, r3
 8010424:	4635      	mov	r5, r6
 8010426:	fb03 ca19 	mls	sl, r3, r9, ip
 801042a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801042e:	2f09      	cmp	r7, #9
 8010430:	d818      	bhi.n	8010464 <_strtol_l.isra.0+0xac>
 8010432:	463c      	mov	r4, r7
 8010434:	42a3      	cmp	r3, r4
 8010436:	dd24      	ble.n	8010482 <_strtol_l.isra.0+0xca>
 8010438:	2e00      	cmp	r6, #0
 801043a:	db1f      	blt.n	801047c <_strtol_l.isra.0+0xc4>
 801043c:	45a9      	cmp	r9, r5
 801043e:	d31d      	bcc.n	801047c <_strtol_l.isra.0+0xc4>
 8010440:	d101      	bne.n	8010446 <_strtol_l.isra.0+0x8e>
 8010442:	45a2      	cmp	sl, r4
 8010444:	db1a      	blt.n	801047c <_strtol_l.isra.0+0xc4>
 8010446:	fb05 4503 	mla	r5, r5, r3, r4
 801044a:	2601      	movs	r6, #1
 801044c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010450:	e7eb      	b.n	801042a <_strtol_l.isra.0+0x72>
 8010452:	2c2b      	cmp	r4, #43	; 0x2b
 8010454:	bf08      	it	eq
 8010456:	f89e 4000 	ldrbeq.w	r4, [lr]
 801045a:	46a8      	mov	r8, r5
 801045c:	bf08      	it	eq
 801045e:	f106 0e02 	addeq.w	lr, r6, #2
 8010462:	e7c7      	b.n	80103f4 <_strtol_l.isra.0+0x3c>
 8010464:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010468:	2f19      	cmp	r7, #25
 801046a:	d801      	bhi.n	8010470 <_strtol_l.isra.0+0xb8>
 801046c:	3c37      	subs	r4, #55	; 0x37
 801046e:	e7e1      	b.n	8010434 <_strtol_l.isra.0+0x7c>
 8010470:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010474:	2f19      	cmp	r7, #25
 8010476:	d804      	bhi.n	8010482 <_strtol_l.isra.0+0xca>
 8010478:	3c57      	subs	r4, #87	; 0x57
 801047a:	e7db      	b.n	8010434 <_strtol_l.isra.0+0x7c>
 801047c:	f04f 36ff 	mov.w	r6, #4294967295
 8010480:	e7e4      	b.n	801044c <_strtol_l.isra.0+0x94>
 8010482:	2e00      	cmp	r6, #0
 8010484:	da05      	bge.n	8010492 <_strtol_l.isra.0+0xda>
 8010486:	2322      	movs	r3, #34	; 0x22
 8010488:	6003      	str	r3, [r0, #0]
 801048a:	4665      	mov	r5, ip
 801048c:	b942      	cbnz	r2, 80104a0 <_strtol_l.isra.0+0xe8>
 801048e:	4628      	mov	r0, r5
 8010490:	e79d      	b.n	80103ce <_strtol_l.isra.0+0x16>
 8010492:	f1b8 0f00 	cmp.w	r8, #0
 8010496:	d000      	beq.n	801049a <_strtol_l.isra.0+0xe2>
 8010498:	426d      	negs	r5, r5
 801049a:	2a00      	cmp	r2, #0
 801049c:	d0f7      	beq.n	801048e <_strtol_l.isra.0+0xd6>
 801049e:	b10e      	cbz	r6, 80104a4 <_strtol_l.isra.0+0xec>
 80104a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80104a4:	6011      	str	r1, [r2, #0]
 80104a6:	e7f2      	b.n	801048e <_strtol_l.isra.0+0xd6>
 80104a8:	2430      	movs	r4, #48	; 0x30
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d1b3      	bne.n	8010416 <_strtol_l.isra.0+0x5e>
 80104ae:	2308      	movs	r3, #8
 80104b0:	e7b1      	b.n	8010416 <_strtol_l.isra.0+0x5e>
 80104b2:	2c30      	cmp	r4, #48	; 0x30
 80104b4:	d0a4      	beq.n	8010400 <_strtol_l.isra.0+0x48>
 80104b6:	230a      	movs	r3, #10
 80104b8:	e7ad      	b.n	8010416 <_strtol_l.isra.0+0x5e>
 80104ba:	bf00      	nop
 80104bc:	08014c59 	.word	0x08014c59

080104c0 <_strtol_r>:
 80104c0:	f7ff bf7a 	b.w	80103b8 <_strtol_l.isra.0>

080104c4 <strtol>:
 80104c4:	4613      	mov	r3, r2
 80104c6:	460a      	mov	r2, r1
 80104c8:	4601      	mov	r1, r0
 80104ca:	4802      	ldr	r0, [pc, #8]	; (80104d4 <strtol+0x10>)
 80104cc:	6800      	ldr	r0, [r0, #0]
 80104ce:	f7ff bf73 	b.w	80103b8 <_strtol_l.isra.0>
 80104d2:	bf00      	nop
 80104d4:	20000028 	.word	0x20000028

080104d8 <_vsniprintf_r>:
 80104d8:	b530      	push	{r4, r5, lr}
 80104da:	1e14      	subs	r4, r2, #0
 80104dc:	4605      	mov	r5, r0
 80104de:	b09b      	sub	sp, #108	; 0x6c
 80104e0:	4618      	mov	r0, r3
 80104e2:	da05      	bge.n	80104f0 <_vsniprintf_r+0x18>
 80104e4:	238b      	movs	r3, #139	; 0x8b
 80104e6:	602b      	str	r3, [r5, #0]
 80104e8:	f04f 30ff 	mov.w	r0, #4294967295
 80104ec:	b01b      	add	sp, #108	; 0x6c
 80104ee:	bd30      	pop	{r4, r5, pc}
 80104f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80104f4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80104f8:	bf14      	ite	ne
 80104fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80104fe:	4623      	moveq	r3, r4
 8010500:	9302      	str	r3, [sp, #8]
 8010502:	9305      	str	r3, [sp, #20]
 8010504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010508:	9100      	str	r1, [sp, #0]
 801050a:	9104      	str	r1, [sp, #16]
 801050c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010510:	4602      	mov	r2, r0
 8010512:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010514:	4669      	mov	r1, sp
 8010516:	4628      	mov	r0, r5
 8010518:	f002 fa5a 	bl	80129d0 <_svfiprintf_r>
 801051c:	1c43      	adds	r3, r0, #1
 801051e:	bfbc      	itt	lt
 8010520:	238b      	movlt	r3, #139	; 0x8b
 8010522:	602b      	strlt	r3, [r5, #0]
 8010524:	2c00      	cmp	r4, #0
 8010526:	d0e1      	beq.n	80104ec <_vsniprintf_r+0x14>
 8010528:	9b00      	ldr	r3, [sp, #0]
 801052a:	2200      	movs	r2, #0
 801052c:	701a      	strb	r2, [r3, #0]
 801052e:	e7dd      	b.n	80104ec <_vsniprintf_r+0x14>

08010530 <vsniprintf>:
 8010530:	b507      	push	{r0, r1, r2, lr}
 8010532:	9300      	str	r3, [sp, #0]
 8010534:	4613      	mov	r3, r2
 8010536:	460a      	mov	r2, r1
 8010538:	4601      	mov	r1, r0
 801053a:	4803      	ldr	r0, [pc, #12]	; (8010548 <vsniprintf+0x18>)
 801053c:	6800      	ldr	r0, [r0, #0]
 801053e:	f7ff ffcb 	bl	80104d8 <_vsniprintf_r>
 8010542:	b003      	add	sp, #12
 8010544:	f85d fb04 	ldr.w	pc, [sp], #4
 8010548:	20000028 	.word	0x20000028

0801054c <__swbuf_r>:
 801054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801054e:	460e      	mov	r6, r1
 8010550:	4614      	mov	r4, r2
 8010552:	4605      	mov	r5, r0
 8010554:	b118      	cbz	r0, 801055e <__swbuf_r+0x12>
 8010556:	6983      	ldr	r3, [r0, #24]
 8010558:	b90b      	cbnz	r3, 801055e <__swbuf_r+0x12>
 801055a:	f001 f86b 	bl	8011634 <__sinit>
 801055e:	4b21      	ldr	r3, [pc, #132]	; (80105e4 <__swbuf_r+0x98>)
 8010560:	429c      	cmp	r4, r3
 8010562:	d12b      	bne.n	80105bc <__swbuf_r+0x70>
 8010564:	686c      	ldr	r4, [r5, #4]
 8010566:	69a3      	ldr	r3, [r4, #24]
 8010568:	60a3      	str	r3, [r4, #8]
 801056a:	89a3      	ldrh	r3, [r4, #12]
 801056c:	071a      	lsls	r2, r3, #28
 801056e:	d52f      	bpl.n	80105d0 <__swbuf_r+0x84>
 8010570:	6923      	ldr	r3, [r4, #16]
 8010572:	b36b      	cbz	r3, 80105d0 <__swbuf_r+0x84>
 8010574:	6923      	ldr	r3, [r4, #16]
 8010576:	6820      	ldr	r0, [r4, #0]
 8010578:	1ac0      	subs	r0, r0, r3
 801057a:	6963      	ldr	r3, [r4, #20]
 801057c:	b2f6      	uxtb	r6, r6
 801057e:	4283      	cmp	r3, r0
 8010580:	4637      	mov	r7, r6
 8010582:	dc04      	bgt.n	801058e <__swbuf_r+0x42>
 8010584:	4621      	mov	r1, r4
 8010586:	4628      	mov	r0, r5
 8010588:	f000 ffc0 	bl	801150c <_fflush_r>
 801058c:	bb30      	cbnz	r0, 80105dc <__swbuf_r+0x90>
 801058e:	68a3      	ldr	r3, [r4, #8]
 8010590:	3b01      	subs	r3, #1
 8010592:	60a3      	str	r3, [r4, #8]
 8010594:	6823      	ldr	r3, [r4, #0]
 8010596:	1c5a      	adds	r2, r3, #1
 8010598:	6022      	str	r2, [r4, #0]
 801059a:	701e      	strb	r6, [r3, #0]
 801059c:	6963      	ldr	r3, [r4, #20]
 801059e:	3001      	adds	r0, #1
 80105a0:	4283      	cmp	r3, r0
 80105a2:	d004      	beq.n	80105ae <__swbuf_r+0x62>
 80105a4:	89a3      	ldrh	r3, [r4, #12]
 80105a6:	07db      	lsls	r3, r3, #31
 80105a8:	d506      	bpl.n	80105b8 <__swbuf_r+0x6c>
 80105aa:	2e0a      	cmp	r6, #10
 80105ac:	d104      	bne.n	80105b8 <__swbuf_r+0x6c>
 80105ae:	4621      	mov	r1, r4
 80105b0:	4628      	mov	r0, r5
 80105b2:	f000 ffab 	bl	801150c <_fflush_r>
 80105b6:	b988      	cbnz	r0, 80105dc <__swbuf_r+0x90>
 80105b8:	4638      	mov	r0, r7
 80105ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105bc:	4b0a      	ldr	r3, [pc, #40]	; (80105e8 <__swbuf_r+0x9c>)
 80105be:	429c      	cmp	r4, r3
 80105c0:	d101      	bne.n	80105c6 <__swbuf_r+0x7a>
 80105c2:	68ac      	ldr	r4, [r5, #8]
 80105c4:	e7cf      	b.n	8010566 <__swbuf_r+0x1a>
 80105c6:	4b09      	ldr	r3, [pc, #36]	; (80105ec <__swbuf_r+0xa0>)
 80105c8:	429c      	cmp	r4, r3
 80105ca:	bf08      	it	eq
 80105cc:	68ec      	ldreq	r4, [r5, #12]
 80105ce:	e7ca      	b.n	8010566 <__swbuf_r+0x1a>
 80105d0:	4621      	mov	r1, r4
 80105d2:	4628      	mov	r0, r5
 80105d4:	f000 f81e 	bl	8010614 <__swsetup_r>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d0cb      	beq.n	8010574 <__swbuf_r+0x28>
 80105dc:	f04f 37ff 	mov.w	r7, #4294967295
 80105e0:	e7ea      	b.n	80105b8 <__swbuf_r+0x6c>
 80105e2:	bf00      	nop
 80105e4:	08014e9c 	.word	0x08014e9c
 80105e8:	08014ebc 	.word	0x08014ebc
 80105ec:	08014e7c 	.word	0x08014e7c

080105f0 <_write_r>:
 80105f0:	b538      	push	{r3, r4, r5, lr}
 80105f2:	4d07      	ldr	r5, [pc, #28]	; (8010610 <_write_r+0x20>)
 80105f4:	4604      	mov	r4, r0
 80105f6:	4608      	mov	r0, r1
 80105f8:	4611      	mov	r1, r2
 80105fa:	2200      	movs	r2, #0
 80105fc:	602a      	str	r2, [r5, #0]
 80105fe:	461a      	mov	r2, r3
 8010600:	f7f4 f81b 	bl	800463a <_write>
 8010604:	1c43      	adds	r3, r0, #1
 8010606:	d102      	bne.n	801060e <_write_r+0x1e>
 8010608:	682b      	ldr	r3, [r5, #0]
 801060a:	b103      	cbz	r3, 801060e <_write_r+0x1e>
 801060c:	6023      	str	r3, [r4, #0]
 801060e:	bd38      	pop	{r3, r4, r5, pc}
 8010610:	20001a44 	.word	0x20001a44

08010614 <__swsetup_r>:
 8010614:	4b32      	ldr	r3, [pc, #200]	; (80106e0 <__swsetup_r+0xcc>)
 8010616:	b570      	push	{r4, r5, r6, lr}
 8010618:	681d      	ldr	r5, [r3, #0]
 801061a:	4606      	mov	r6, r0
 801061c:	460c      	mov	r4, r1
 801061e:	b125      	cbz	r5, 801062a <__swsetup_r+0x16>
 8010620:	69ab      	ldr	r3, [r5, #24]
 8010622:	b913      	cbnz	r3, 801062a <__swsetup_r+0x16>
 8010624:	4628      	mov	r0, r5
 8010626:	f001 f805 	bl	8011634 <__sinit>
 801062a:	4b2e      	ldr	r3, [pc, #184]	; (80106e4 <__swsetup_r+0xd0>)
 801062c:	429c      	cmp	r4, r3
 801062e:	d10f      	bne.n	8010650 <__swsetup_r+0x3c>
 8010630:	686c      	ldr	r4, [r5, #4]
 8010632:	89a3      	ldrh	r3, [r4, #12]
 8010634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010638:	0719      	lsls	r1, r3, #28
 801063a:	d42c      	bmi.n	8010696 <__swsetup_r+0x82>
 801063c:	06dd      	lsls	r5, r3, #27
 801063e:	d411      	bmi.n	8010664 <__swsetup_r+0x50>
 8010640:	2309      	movs	r3, #9
 8010642:	6033      	str	r3, [r6, #0]
 8010644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010648:	81a3      	strh	r3, [r4, #12]
 801064a:	f04f 30ff 	mov.w	r0, #4294967295
 801064e:	e03e      	b.n	80106ce <__swsetup_r+0xba>
 8010650:	4b25      	ldr	r3, [pc, #148]	; (80106e8 <__swsetup_r+0xd4>)
 8010652:	429c      	cmp	r4, r3
 8010654:	d101      	bne.n	801065a <__swsetup_r+0x46>
 8010656:	68ac      	ldr	r4, [r5, #8]
 8010658:	e7eb      	b.n	8010632 <__swsetup_r+0x1e>
 801065a:	4b24      	ldr	r3, [pc, #144]	; (80106ec <__swsetup_r+0xd8>)
 801065c:	429c      	cmp	r4, r3
 801065e:	bf08      	it	eq
 8010660:	68ec      	ldreq	r4, [r5, #12]
 8010662:	e7e6      	b.n	8010632 <__swsetup_r+0x1e>
 8010664:	0758      	lsls	r0, r3, #29
 8010666:	d512      	bpl.n	801068e <__swsetup_r+0x7a>
 8010668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801066a:	b141      	cbz	r1, 801067e <__swsetup_r+0x6a>
 801066c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010670:	4299      	cmp	r1, r3
 8010672:	d002      	beq.n	801067a <__swsetup_r+0x66>
 8010674:	4630      	mov	r0, r6
 8010676:	f7fe f87f 	bl	800e778 <_free_r>
 801067a:	2300      	movs	r3, #0
 801067c:	6363      	str	r3, [r4, #52]	; 0x34
 801067e:	89a3      	ldrh	r3, [r4, #12]
 8010680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010684:	81a3      	strh	r3, [r4, #12]
 8010686:	2300      	movs	r3, #0
 8010688:	6063      	str	r3, [r4, #4]
 801068a:	6923      	ldr	r3, [r4, #16]
 801068c:	6023      	str	r3, [r4, #0]
 801068e:	89a3      	ldrh	r3, [r4, #12]
 8010690:	f043 0308 	orr.w	r3, r3, #8
 8010694:	81a3      	strh	r3, [r4, #12]
 8010696:	6923      	ldr	r3, [r4, #16]
 8010698:	b94b      	cbnz	r3, 80106ae <__swsetup_r+0x9a>
 801069a:	89a3      	ldrh	r3, [r4, #12]
 801069c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80106a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106a4:	d003      	beq.n	80106ae <__swsetup_r+0x9a>
 80106a6:	4621      	mov	r1, r4
 80106a8:	4630      	mov	r0, r6
 80106aa:	f001 fc0d 	bl	8011ec8 <__smakebuf_r>
 80106ae:	89a0      	ldrh	r0, [r4, #12]
 80106b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80106b4:	f010 0301 	ands.w	r3, r0, #1
 80106b8:	d00a      	beq.n	80106d0 <__swsetup_r+0xbc>
 80106ba:	2300      	movs	r3, #0
 80106bc:	60a3      	str	r3, [r4, #8]
 80106be:	6963      	ldr	r3, [r4, #20]
 80106c0:	425b      	negs	r3, r3
 80106c2:	61a3      	str	r3, [r4, #24]
 80106c4:	6923      	ldr	r3, [r4, #16]
 80106c6:	b943      	cbnz	r3, 80106da <__swsetup_r+0xc6>
 80106c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80106cc:	d1ba      	bne.n	8010644 <__swsetup_r+0x30>
 80106ce:	bd70      	pop	{r4, r5, r6, pc}
 80106d0:	0781      	lsls	r1, r0, #30
 80106d2:	bf58      	it	pl
 80106d4:	6963      	ldrpl	r3, [r4, #20]
 80106d6:	60a3      	str	r3, [r4, #8]
 80106d8:	e7f4      	b.n	80106c4 <__swsetup_r+0xb0>
 80106da:	2000      	movs	r0, #0
 80106dc:	e7f7      	b.n	80106ce <__swsetup_r+0xba>
 80106de:	bf00      	nop
 80106e0:	20000028 	.word	0x20000028
 80106e4:	08014e9c 	.word	0x08014e9c
 80106e8:	08014ebc 	.word	0x08014ebc
 80106ec:	08014e7c 	.word	0x08014e7c

080106f0 <_close_r>:
 80106f0:	b538      	push	{r3, r4, r5, lr}
 80106f2:	4d06      	ldr	r5, [pc, #24]	; (801070c <_close_r+0x1c>)
 80106f4:	2300      	movs	r3, #0
 80106f6:	4604      	mov	r4, r0
 80106f8:	4608      	mov	r0, r1
 80106fa:	602b      	str	r3, [r5, #0]
 80106fc:	f7f3 ffb9 	bl	8004672 <_close>
 8010700:	1c43      	adds	r3, r0, #1
 8010702:	d102      	bne.n	801070a <_close_r+0x1a>
 8010704:	682b      	ldr	r3, [r5, #0]
 8010706:	b103      	cbz	r3, 801070a <_close_r+0x1a>
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	bd38      	pop	{r3, r4, r5, pc}
 801070c:	20001a44 	.word	0x20001a44

08010710 <quorem>:
 8010710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010714:	6903      	ldr	r3, [r0, #16]
 8010716:	690c      	ldr	r4, [r1, #16]
 8010718:	42a3      	cmp	r3, r4
 801071a:	4607      	mov	r7, r0
 801071c:	f2c0 8081 	blt.w	8010822 <quorem+0x112>
 8010720:	3c01      	subs	r4, #1
 8010722:	f101 0814 	add.w	r8, r1, #20
 8010726:	f100 0514 	add.w	r5, r0, #20
 801072a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801072e:	9301      	str	r3, [sp, #4]
 8010730:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010738:	3301      	adds	r3, #1
 801073a:	429a      	cmp	r2, r3
 801073c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010744:	fbb2 f6f3 	udiv	r6, r2, r3
 8010748:	d331      	bcc.n	80107ae <quorem+0x9e>
 801074a:	f04f 0e00 	mov.w	lr, #0
 801074e:	4640      	mov	r0, r8
 8010750:	46ac      	mov	ip, r5
 8010752:	46f2      	mov	sl, lr
 8010754:	f850 2b04 	ldr.w	r2, [r0], #4
 8010758:	b293      	uxth	r3, r2
 801075a:	fb06 e303 	mla	r3, r6, r3, lr
 801075e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010762:	b29b      	uxth	r3, r3
 8010764:	ebaa 0303 	sub.w	r3, sl, r3
 8010768:	0c12      	lsrs	r2, r2, #16
 801076a:	f8dc a000 	ldr.w	sl, [ip]
 801076e:	fb06 e202 	mla	r2, r6, r2, lr
 8010772:	fa13 f38a 	uxtah	r3, r3, sl
 8010776:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801077a:	fa1f fa82 	uxth.w	sl, r2
 801077e:	f8dc 2000 	ldr.w	r2, [ip]
 8010782:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010786:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801078a:	b29b      	uxth	r3, r3
 801078c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010790:	4581      	cmp	r9, r0
 8010792:	f84c 3b04 	str.w	r3, [ip], #4
 8010796:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801079a:	d2db      	bcs.n	8010754 <quorem+0x44>
 801079c:	f855 300b 	ldr.w	r3, [r5, fp]
 80107a0:	b92b      	cbnz	r3, 80107ae <quorem+0x9e>
 80107a2:	9b01      	ldr	r3, [sp, #4]
 80107a4:	3b04      	subs	r3, #4
 80107a6:	429d      	cmp	r5, r3
 80107a8:	461a      	mov	r2, r3
 80107aa:	d32e      	bcc.n	801080a <quorem+0xfa>
 80107ac:	613c      	str	r4, [r7, #16]
 80107ae:	4638      	mov	r0, r7
 80107b0:	f001 feb0 	bl	8012514 <__mcmp>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	db24      	blt.n	8010802 <quorem+0xf2>
 80107b8:	3601      	adds	r6, #1
 80107ba:	4628      	mov	r0, r5
 80107bc:	f04f 0c00 	mov.w	ip, #0
 80107c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80107c4:	f8d0 e000 	ldr.w	lr, [r0]
 80107c8:	b293      	uxth	r3, r2
 80107ca:	ebac 0303 	sub.w	r3, ip, r3
 80107ce:	0c12      	lsrs	r2, r2, #16
 80107d0:	fa13 f38e 	uxtah	r3, r3, lr
 80107d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80107d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107dc:	b29b      	uxth	r3, r3
 80107de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107e2:	45c1      	cmp	r9, r8
 80107e4:	f840 3b04 	str.w	r3, [r0], #4
 80107e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80107ec:	d2e8      	bcs.n	80107c0 <quorem+0xb0>
 80107ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107f6:	b922      	cbnz	r2, 8010802 <quorem+0xf2>
 80107f8:	3b04      	subs	r3, #4
 80107fa:	429d      	cmp	r5, r3
 80107fc:	461a      	mov	r2, r3
 80107fe:	d30a      	bcc.n	8010816 <quorem+0x106>
 8010800:	613c      	str	r4, [r7, #16]
 8010802:	4630      	mov	r0, r6
 8010804:	b003      	add	sp, #12
 8010806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801080a:	6812      	ldr	r2, [r2, #0]
 801080c:	3b04      	subs	r3, #4
 801080e:	2a00      	cmp	r2, #0
 8010810:	d1cc      	bne.n	80107ac <quorem+0x9c>
 8010812:	3c01      	subs	r4, #1
 8010814:	e7c7      	b.n	80107a6 <quorem+0x96>
 8010816:	6812      	ldr	r2, [r2, #0]
 8010818:	3b04      	subs	r3, #4
 801081a:	2a00      	cmp	r2, #0
 801081c:	d1f0      	bne.n	8010800 <quorem+0xf0>
 801081e:	3c01      	subs	r4, #1
 8010820:	e7eb      	b.n	80107fa <quorem+0xea>
 8010822:	2000      	movs	r0, #0
 8010824:	e7ee      	b.n	8010804 <quorem+0xf4>
	...

08010828 <_dtoa_r>:
 8010828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801082c:	ed2d 8b02 	vpush	{d8}
 8010830:	ec57 6b10 	vmov	r6, r7, d0
 8010834:	b095      	sub	sp, #84	; 0x54
 8010836:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010838:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801083c:	9105      	str	r1, [sp, #20]
 801083e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010842:	4604      	mov	r4, r0
 8010844:	9209      	str	r2, [sp, #36]	; 0x24
 8010846:	930f      	str	r3, [sp, #60]	; 0x3c
 8010848:	b975      	cbnz	r5, 8010868 <_dtoa_r+0x40>
 801084a:	2010      	movs	r0, #16
 801084c:	f7fd ff76 	bl	800e73c <malloc>
 8010850:	4602      	mov	r2, r0
 8010852:	6260      	str	r0, [r4, #36]	; 0x24
 8010854:	b920      	cbnz	r0, 8010860 <_dtoa_r+0x38>
 8010856:	4bb2      	ldr	r3, [pc, #712]	; (8010b20 <_dtoa_r+0x2f8>)
 8010858:	21ea      	movs	r1, #234	; 0xea
 801085a:	48b2      	ldr	r0, [pc, #712]	; (8010b24 <_dtoa_r+0x2fc>)
 801085c:	f002 ff4c 	bl	80136f8 <__assert_func>
 8010860:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010864:	6005      	str	r5, [r0, #0]
 8010866:	60c5      	str	r5, [r0, #12]
 8010868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801086a:	6819      	ldr	r1, [r3, #0]
 801086c:	b151      	cbz	r1, 8010884 <_dtoa_r+0x5c>
 801086e:	685a      	ldr	r2, [r3, #4]
 8010870:	604a      	str	r2, [r1, #4]
 8010872:	2301      	movs	r3, #1
 8010874:	4093      	lsls	r3, r2
 8010876:	608b      	str	r3, [r1, #8]
 8010878:	4620      	mov	r0, r4
 801087a:	f001 fbc3 	bl	8012004 <_Bfree>
 801087e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010880:	2200      	movs	r2, #0
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	1e3b      	subs	r3, r7, #0
 8010886:	bfb9      	ittee	lt
 8010888:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801088c:	9303      	strlt	r3, [sp, #12]
 801088e:	2300      	movge	r3, #0
 8010890:	f8c8 3000 	strge.w	r3, [r8]
 8010894:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8010898:	4ba3      	ldr	r3, [pc, #652]	; (8010b28 <_dtoa_r+0x300>)
 801089a:	bfbc      	itt	lt
 801089c:	2201      	movlt	r2, #1
 801089e:	f8c8 2000 	strlt.w	r2, [r8]
 80108a2:	ea33 0309 	bics.w	r3, r3, r9
 80108a6:	d11b      	bne.n	80108e0 <_dtoa_r+0xb8>
 80108a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80108ae:	6013      	str	r3, [r2, #0]
 80108b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80108b4:	4333      	orrs	r3, r6
 80108b6:	f000 857a 	beq.w	80113ae <_dtoa_r+0xb86>
 80108ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108bc:	b963      	cbnz	r3, 80108d8 <_dtoa_r+0xb0>
 80108be:	4b9b      	ldr	r3, [pc, #620]	; (8010b2c <_dtoa_r+0x304>)
 80108c0:	e024      	b.n	801090c <_dtoa_r+0xe4>
 80108c2:	4b9b      	ldr	r3, [pc, #620]	; (8010b30 <_dtoa_r+0x308>)
 80108c4:	9300      	str	r3, [sp, #0]
 80108c6:	3308      	adds	r3, #8
 80108c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80108ca:	6013      	str	r3, [r2, #0]
 80108cc:	9800      	ldr	r0, [sp, #0]
 80108ce:	b015      	add	sp, #84	; 0x54
 80108d0:	ecbd 8b02 	vpop	{d8}
 80108d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d8:	4b94      	ldr	r3, [pc, #592]	; (8010b2c <_dtoa_r+0x304>)
 80108da:	9300      	str	r3, [sp, #0]
 80108dc:	3303      	adds	r3, #3
 80108de:	e7f3      	b.n	80108c8 <_dtoa_r+0xa0>
 80108e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80108e4:	2200      	movs	r2, #0
 80108e6:	ec51 0b17 	vmov	r0, r1, d7
 80108ea:	2300      	movs	r3, #0
 80108ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80108f0:	f7f0 f90a 	bl	8000b08 <__aeabi_dcmpeq>
 80108f4:	4680      	mov	r8, r0
 80108f6:	b158      	cbz	r0, 8010910 <_dtoa_r+0xe8>
 80108f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108fa:	2301      	movs	r3, #1
 80108fc:	6013      	str	r3, [r2, #0]
 80108fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010900:	2b00      	cmp	r3, #0
 8010902:	f000 8551 	beq.w	80113a8 <_dtoa_r+0xb80>
 8010906:	488b      	ldr	r0, [pc, #556]	; (8010b34 <_dtoa_r+0x30c>)
 8010908:	6018      	str	r0, [r3, #0]
 801090a:	1e43      	subs	r3, r0, #1
 801090c:	9300      	str	r3, [sp, #0]
 801090e:	e7dd      	b.n	80108cc <_dtoa_r+0xa4>
 8010910:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010914:	aa12      	add	r2, sp, #72	; 0x48
 8010916:	a913      	add	r1, sp, #76	; 0x4c
 8010918:	4620      	mov	r0, r4
 801091a:	f001 ff1b 	bl	8012754 <__d2b>
 801091e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010922:	4683      	mov	fp, r0
 8010924:	2d00      	cmp	r5, #0
 8010926:	d07c      	beq.n	8010a22 <_dtoa_r+0x1fa>
 8010928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801092a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801092e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010932:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010936:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801093a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801093e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010942:	4b7d      	ldr	r3, [pc, #500]	; (8010b38 <_dtoa_r+0x310>)
 8010944:	2200      	movs	r2, #0
 8010946:	4630      	mov	r0, r6
 8010948:	4639      	mov	r1, r7
 801094a:	f7ef fcbd 	bl	80002c8 <__aeabi_dsub>
 801094e:	a36e      	add	r3, pc, #440	; (adr r3, 8010b08 <_dtoa_r+0x2e0>)
 8010950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010954:	f7ef fe70 	bl	8000638 <__aeabi_dmul>
 8010958:	a36d      	add	r3, pc, #436	; (adr r3, 8010b10 <_dtoa_r+0x2e8>)
 801095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095e:	f7ef fcb5 	bl	80002cc <__adddf3>
 8010962:	4606      	mov	r6, r0
 8010964:	4628      	mov	r0, r5
 8010966:	460f      	mov	r7, r1
 8010968:	f7ef fdfc 	bl	8000564 <__aeabi_i2d>
 801096c:	a36a      	add	r3, pc, #424	; (adr r3, 8010b18 <_dtoa_r+0x2f0>)
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	f7ef fe61 	bl	8000638 <__aeabi_dmul>
 8010976:	4602      	mov	r2, r0
 8010978:	460b      	mov	r3, r1
 801097a:	4630      	mov	r0, r6
 801097c:	4639      	mov	r1, r7
 801097e:	f7ef fca5 	bl	80002cc <__adddf3>
 8010982:	4606      	mov	r6, r0
 8010984:	460f      	mov	r7, r1
 8010986:	f7f0 f907 	bl	8000b98 <__aeabi_d2iz>
 801098a:	2200      	movs	r2, #0
 801098c:	4682      	mov	sl, r0
 801098e:	2300      	movs	r3, #0
 8010990:	4630      	mov	r0, r6
 8010992:	4639      	mov	r1, r7
 8010994:	f7f0 f8c2 	bl	8000b1c <__aeabi_dcmplt>
 8010998:	b148      	cbz	r0, 80109ae <_dtoa_r+0x186>
 801099a:	4650      	mov	r0, sl
 801099c:	f7ef fde2 	bl	8000564 <__aeabi_i2d>
 80109a0:	4632      	mov	r2, r6
 80109a2:	463b      	mov	r3, r7
 80109a4:	f7f0 f8b0 	bl	8000b08 <__aeabi_dcmpeq>
 80109a8:	b908      	cbnz	r0, 80109ae <_dtoa_r+0x186>
 80109aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109ae:	f1ba 0f16 	cmp.w	sl, #22
 80109b2:	d854      	bhi.n	8010a5e <_dtoa_r+0x236>
 80109b4:	4b61      	ldr	r3, [pc, #388]	; (8010b3c <_dtoa_r+0x314>)
 80109b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80109ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80109c2:	f7f0 f8ab 	bl	8000b1c <__aeabi_dcmplt>
 80109c6:	2800      	cmp	r0, #0
 80109c8:	d04b      	beq.n	8010a62 <_dtoa_r+0x23a>
 80109ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80109ce:	2300      	movs	r3, #0
 80109d0:	930e      	str	r3, [sp, #56]	; 0x38
 80109d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80109d4:	1b5d      	subs	r5, r3, r5
 80109d6:	1e6b      	subs	r3, r5, #1
 80109d8:	9304      	str	r3, [sp, #16]
 80109da:	bf43      	ittte	mi
 80109dc:	2300      	movmi	r3, #0
 80109de:	f1c5 0801 	rsbmi	r8, r5, #1
 80109e2:	9304      	strmi	r3, [sp, #16]
 80109e4:	f04f 0800 	movpl.w	r8, #0
 80109e8:	f1ba 0f00 	cmp.w	sl, #0
 80109ec:	db3b      	blt.n	8010a66 <_dtoa_r+0x23e>
 80109ee:	9b04      	ldr	r3, [sp, #16]
 80109f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80109f4:	4453      	add	r3, sl
 80109f6:	9304      	str	r3, [sp, #16]
 80109f8:	2300      	movs	r3, #0
 80109fa:	9306      	str	r3, [sp, #24]
 80109fc:	9b05      	ldr	r3, [sp, #20]
 80109fe:	2b09      	cmp	r3, #9
 8010a00:	d869      	bhi.n	8010ad6 <_dtoa_r+0x2ae>
 8010a02:	2b05      	cmp	r3, #5
 8010a04:	bfc4      	itt	gt
 8010a06:	3b04      	subgt	r3, #4
 8010a08:	9305      	strgt	r3, [sp, #20]
 8010a0a:	9b05      	ldr	r3, [sp, #20]
 8010a0c:	f1a3 0302 	sub.w	r3, r3, #2
 8010a10:	bfcc      	ite	gt
 8010a12:	2500      	movgt	r5, #0
 8010a14:	2501      	movle	r5, #1
 8010a16:	2b03      	cmp	r3, #3
 8010a18:	d869      	bhi.n	8010aee <_dtoa_r+0x2c6>
 8010a1a:	e8df f003 	tbb	[pc, r3]
 8010a1e:	4e2c      	.short	0x4e2c
 8010a20:	5a4c      	.short	0x5a4c
 8010a22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010a26:	441d      	add	r5, r3
 8010a28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010a2c:	2b20      	cmp	r3, #32
 8010a2e:	bfc1      	itttt	gt
 8010a30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010a38:	fa09 f303 	lslgt.w	r3, r9, r3
 8010a3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010a40:	bfda      	itte	le
 8010a42:	f1c3 0320 	rsble	r3, r3, #32
 8010a46:	fa06 f003 	lslle.w	r0, r6, r3
 8010a4a:	4318      	orrgt	r0, r3
 8010a4c:	f7ef fd7a 	bl	8000544 <__aeabi_ui2d>
 8010a50:	2301      	movs	r3, #1
 8010a52:	4606      	mov	r6, r0
 8010a54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010a58:	3d01      	subs	r5, #1
 8010a5a:	9310      	str	r3, [sp, #64]	; 0x40
 8010a5c:	e771      	b.n	8010942 <_dtoa_r+0x11a>
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e7b6      	b.n	80109d0 <_dtoa_r+0x1a8>
 8010a62:	900e      	str	r0, [sp, #56]	; 0x38
 8010a64:	e7b5      	b.n	80109d2 <_dtoa_r+0x1aa>
 8010a66:	f1ca 0300 	rsb	r3, sl, #0
 8010a6a:	9306      	str	r3, [sp, #24]
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	eba8 080a 	sub.w	r8, r8, sl
 8010a72:	930d      	str	r3, [sp, #52]	; 0x34
 8010a74:	e7c2      	b.n	80109fc <_dtoa_r+0x1d4>
 8010a76:	2300      	movs	r3, #0
 8010a78:	9308      	str	r3, [sp, #32]
 8010a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	dc39      	bgt.n	8010af4 <_dtoa_r+0x2cc>
 8010a80:	f04f 0901 	mov.w	r9, #1
 8010a84:	f8cd 9004 	str.w	r9, [sp, #4]
 8010a88:	464b      	mov	r3, r9
 8010a8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010a8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010a90:	2200      	movs	r2, #0
 8010a92:	6042      	str	r2, [r0, #4]
 8010a94:	2204      	movs	r2, #4
 8010a96:	f102 0614 	add.w	r6, r2, #20
 8010a9a:	429e      	cmp	r6, r3
 8010a9c:	6841      	ldr	r1, [r0, #4]
 8010a9e:	d92f      	bls.n	8010b00 <_dtoa_r+0x2d8>
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	f001 fa6f 	bl	8011f84 <_Balloc>
 8010aa6:	9000      	str	r0, [sp, #0]
 8010aa8:	2800      	cmp	r0, #0
 8010aaa:	d14b      	bne.n	8010b44 <_dtoa_r+0x31c>
 8010aac:	4b24      	ldr	r3, [pc, #144]	; (8010b40 <_dtoa_r+0x318>)
 8010aae:	4602      	mov	r2, r0
 8010ab0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010ab4:	e6d1      	b.n	801085a <_dtoa_r+0x32>
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	e7de      	b.n	8010a78 <_dtoa_r+0x250>
 8010aba:	2300      	movs	r3, #0
 8010abc:	9308      	str	r3, [sp, #32]
 8010abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ac0:	eb0a 0903 	add.w	r9, sl, r3
 8010ac4:	f109 0301 	add.w	r3, r9, #1
 8010ac8:	2b01      	cmp	r3, #1
 8010aca:	9301      	str	r3, [sp, #4]
 8010acc:	bfb8      	it	lt
 8010ace:	2301      	movlt	r3, #1
 8010ad0:	e7dd      	b.n	8010a8e <_dtoa_r+0x266>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	e7f2      	b.n	8010abc <_dtoa_r+0x294>
 8010ad6:	2501      	movs	r5, #1
 8010ad8:	2300      	movs	r3, #0
 8010ada:	9305      	str	r3, [sp, #20]
 8010adc:	9508      	str	r5, [sp, #32]
 8010ade:	f04f 39ff 	mov.w	r9, #4294967295
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f8cd 9004 	str.w	r9, [sp, #4]
 8010ae8:	2312      	movs	r3, #18
 8010aea:	9209      	str	r2, [sp, #36]	; 0x24
 8010aec:	e7cf      	b.n	8010a8e <_dtoa_r+0x266>
 8010aee:	2301      	movs	r3, #1
 8010af0:	9308      	str	r3, [sp, #32]
 8010af2:	e7f4      	b.n	8010ade <_dtoa_r+0x2b6>
 8010af4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8010afc:	464b      	mov	r3, r9
 8010afe:	e7c6      	b.n	8010a8e <_dtoa_r+0x266>
 8010b00:	3101      	adds	r1, #1
 8010b02:	6041      	str	r1, [r0, #4]
 8010b04:	0052      	lsls	r2, r2, #1
 8010b06:	e7c6      	b.n	8010a96 <_dtoa_r+0x26e>
 8010b08:	636f4361 	.word	0x636f4361
 8010b0c:	3fd287a7 	.word	0x3fd287a7
 8010b10:	8b60c8b3 	.word	0x8b60c8b3
 8010b14:	3fc68a28 	.word	0x3fc68a28
 8010b18:	509f79fb 	.word	0x509f79fb
 8010b1c:	3fd34413 	.word	0x3fd34413
 8010b20:	08014df5 	.word	0x08014df5
 8010b24:	08014e0c 	.word	0x08014e0c
 8010b28:	7ff00000 	.word	0x7ff00000
 8010b2c:	08014df1 	.word	0x08014df1
 8010b30:	08014de8 	.word	0x08014de8
 8010b34:	080150d2 	.word	0x080150d2
 8010b38:	3ff80000 	.word	0x3ff80000
 8010b3c:	08014fe8 	.word	0x08014fe8
 8010b40:	08014e6b 	.word	0x08014e6b
 8010b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b46:	9a00      	ldr	r2, [sp, #0]
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	9b01      	ldr	r3, [sp, #4]
 8010b4c:	2b0e      	cmp	r3, #14
 8010b4e:	f200 80ad 	bhi.w	8010cac <_dtoa_r+0x484>
 8010b52:	2d00      	cmp	r5, #0
 8010b54:	f000 80aa 	beq.w	8010cac <_dtoa_r+0x484>
 8010b58:	f1ba 0f00 	cmp.w	sl, #0
 8010b5c:	dd36      	ble.n	8010bcc <_dtoa_r+0x3a4>
 8010b5e:	4ac3      	ldr	r2, [pc, #780]	; (8010e6c <_dtoa_r+0x644>)
 8010b60:	f00a 030f 	and.w	r3, sl, #15
 8010b64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010b68:	ed93 7b00 	vldr	d7, [r3]
 8010b6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010b70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010b74:	eeb0 8a47 	vmov.f32	s16, s14
 8010b78:	eef0 8a67 	vmov.f32	s17, s15
 8010b7c:	d016      	beq.n	8010bac <_dtoa_r+0x384>
 8010b7e:	4bbc      	ldr	r3, [pc, #752]	; (8010e70 <_dtoa_r+0x648>)
 8010b80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b88:	f7ef fe80 	bl	800088c <__aeabi_ddiv>
 8010b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b90:	f007 070f 	and.w	r7, r7, #15
 8010b94:	2503      	movs	r5, #3
 8010b96:	4eb6      	ldr	r6, [pc, #728]	; (8010e70 <_dtoa_r+0x648>)
 8010b98:	b957      	cbnz	r7, 8010bb0 <_dtoa_r+0x388>
 8010b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b9e:	ec53 2b18 	vmov	r2, r3, d8
 8010ba2:	f7ef fe73 	bl	800088c <__aeabi_ddiv>
 8010ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010baa:	e029      	b.n	8010c00 <_dtoa_r+0x3d8>
 8010bac:	2502      	movs	r5, #2
 8010bae:	e7f2      	b.n	8010b96 <_dtoa_r+0x36e>
 8010bb0:	07f9      	lsls	r1, r7, #31
 8010bb2:	d508      	bpl.n	8010bc6 <_dtoa_r+0x39e>
 8010bb4:	ec51 0b18 	vmov	r0, r1, d8
 8010bb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010bbc:	f7ef fd3c 	bl	8000638 <__aeabi_dmul>
 8010bc0:	ec41 0b18 	vmov	d8, r0, r1
 8010bc4:	3501      	adds	r5, #1
 8010bc6:	107f      	asrs	r7, r7, #1
 8010bc8:	3608      	adds	r6, #8
 8010bca:	e7e5      	b.n	8010b98 <_dtoa_r+0x370>
 8010bcc:	f000 80a6 	beq.w	8010d1c <_dtoa_r+0x4f4>
 8010bd0:	f1ca 0600 	rsb	r6, sl, #0
 8010bd4:	4ba5      	ldr	r3, [pc, #660]	; (8010e6c <_dtoa_r+0x644>)
 8010bd6:	4fa6      	ldr	r7, [pc, #664]	; (8010e70 <_dtoa_r+0x648>)
 8010bd8:	f006 020f 	and.w	r2, r6, #15
 8010bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010be8:	f7ef fd26 	bl	8000638 <__aeabi_dmul>
 8010bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bf0:	1136      	asrs	r6, r6, #4
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	2502      	movs	r5, #2
 8010bf6:	2e00      	cmp	r6, #0
 8010bf8:	f040 8085 	bne.w	8010d06 <_dtoa_r+0x4de>
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d1d2      	bne.n	8010ba6 <_dtoa_r+0x37e>
 8010c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	f000 808c 	beq.w	8010d20 <_dtoa_r+0x4f8>
 8010c08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010c0c:	4b99      	ldr	r3, [pc, #612]	; (8010e74 <_dtoa_r+0x64c>)
 8010c0e:	2200      	movs	r2, #0
 8010c10:	4630      	mov	r0, r6
 8010c12:	4639      	mov	r1, r7
 8010c14:	f7ef ff82 	bl	8000b1c <__aeabi_dcmplt>
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	f000 8081 	beq.w	8010d20 <_dtoa_r+0x4f8>
 8010c1e:	9b01      	ldr	r3, [sp, #4]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d07d      	beq.n	8010d20 <_dtoa_r+0x4f8>
 8010c24:	f1b9 0f00 	cmp.w	r9, #0
 8010c28:	dd3c      	ble.n	8010ca4 <_dtoa_r+0x47c>
 8010c2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010c2e:	9307      	str	r3, [sp, #28]
 8010c30:	2200      	movs	r2, #0
 8010c32:	4b91      	ldr	r3, [pc, #580]	; (8010e78 <_dtoa_r+0x650>)
 8010c34:	4630      	mov	r0, r6
 8010c36:	4639      	mov	r1, r7
 8010c38:	f7ef fcfe 	bl	8000638 <__aeabi_dmul>
 8010c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c40:	3501      	adds	r5, #1
 8010c42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010c46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f7ef fc8a 	bl	8000564 <__aeabi_i2d>
 8010c50:	4632      	mov	r2, r6
 8010c52:	463b      	mov	r3, r7
 8010c54:	f7ef fcf0 	bl	8000638 <__aeabi_dmul>
 8010c58:	4b88      	ldr	r3, [pc, #544]	; (8010e7c <_dtoa_r+0x654>)
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f7ef fb36 	bl	80002cc <__adddf3>
 8010c60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010c68:	9303      	str	r3, [sp, #12]
 8010c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d15c      	bne.n	8010d2a <_dtoa_r+0x502>
 8010c70:	4b83      	ldr	r3, [pc, #524]	; (8010e80 <_dtoa_r+0x658>)
 8010c72:	2200      	movs	r2, #0
 8010c74:	4630      	mov	r0, r6
 8010c76:	4639      	mov	r1, r7
 8010c78:	f7ef fb26 	bl	80002c8 <__aeabi_dsub>
 8010c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010c80:	4606      	mov	r6, r0
 8010c82:	460f      	mov	r7, r1
 8010c84:	f7ef ff68 	bl	8000b58 <__aeabi_dcmpgt>
 8010c88:	2800      	cmp	r0, #0
 8010c8a:	f040 8296 	bne.w	80111ba <_dtoa_r+0x992>
 8010c8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010c92:	4630      	mov	r0, r6
 8010c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c98:	4639      	mov	r1, r7
 8010c9a:	f7ef ff3f 	bl	8000b1c <__aeabi_dcmplt>
 8010c9e:	2800      	cmp	r0, #0
 8010ca0:	f040 8288 	bne.w	80111b4 <_dtoa_r+0x98c>
 8010ca4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	f2c0 8158 	blt.w	8010f64 <_dtoa_r+0x73c>
 8010cb4:	f1ba 0f0e 	cmp.w	sl, #14
 8010cb8:	f300 8154 	bgt.w	8010f64 <_dtoa_r+0x73c>
 8010cbc:	4b6b      	ldr	r3, [pc, #428]	; (8010e6c <_dtoa_r+0x644>)
 8010cbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010cc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f280 80e3 	bge.w	8010e94 <_dtoa_r+0x66c>
 8010cce:	9b01      	ldr	r3, [sp, #4]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f300 80df 	bgt.w	8010e94 <_dtoa_r+0x66c>
 8010cd6:	f040 826d 	bne.w	80111b4 <_dtoa_r+0x98c>
 8010cda:	4b69      	ldr	r3, [pc, #420]	; (8010e80 <_dtoa_r+0x658>)
 8010cdc:	2200      	movs	r2, #0
 8010cde:	4640      	mov	r0, r8
 8010ce0:	4649      	mov	r1, r9
 8010ce2:	f7ef fca9 	bl	8000638 <__aeabi_dmul>
 8010ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010cea:	f7ef ff2b 	bl	8000b44 <__aeabi_dcmpge>
 8010cee:	9e01      	ldr	r6, [sp, #4]
 8010cf0:	4637      	mov	r7, r6
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	f040 8243 	bne.w	801117e <_dtoa_r+0x956>
 8010cf8:	9d00      	ldr	r5, [sp, #0]
 8010cfa:	2331      	movs	r3, #49	; 0x31
 8010cfc:	f805 3b01 	strb.w	r3, [r5], #1
 8010d00:	f10a 0a01 	add.w	sl, sl, #1
 8010d04:	e23f      	b.n	8011186 <_dtoa_r+0x95e>
 8010d06:	07f2      	lsls	r2, r6, #31
 8010d08:	d505      	bpl.n	8010d16 <_dtoa_r+0x4ee>
 8010d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d0e:	f7ef fc93 	bl	8000638 <__aeabi_dmul>
 8010d12:	3501      	adds	r5, #1
 8010d14:	2301      	movs	r3, #1
 8010d16:	1076      	asrs	r6, r6, #1
 8010d18:	3708      	adds	r7, #8
 8010d1a:	e76c      	b.n	8010bf6 <_dtoa_r+0x3ce>
 8010d1c:	2502      	movs	r5, #2
 8010d1e:	e76f      	b.n	8010c00 <_dtoa_r+0x3d8>
 8010d20:	9b01      	ldr	r3, [sp, #4]
 8010d22:	f8cd a01c 	str.w	sl, [sp, #28]
 8010d26:	930c      	str	r3, [sp, #48]	; 0x30
 8010d28:	e78d      	b.n	8010c46 <_dtoa_r+0x41e>
 8010d2a:	9900      	ldr	r1, [sp, #0]
 8010d2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010d30:	4b4e      	ldr	r3, [pc, #312]	; (8010e6c <_dtoa_r+0x644>)
 8010d32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010d36:	4401      	add	r1, r0
 8010d38:	9102      	str	r1, [sp, #8]
 8010d3a:	9908      	ldr	r1, [sp, #32]
 8010d3c:	eeb0 8a47 	vmov.f32	s16, s14
 8010d40:	eef0 8a67 	vmov.f32	s17, s15
 8010d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010d4c:	2900      	cmp	r1, #0
 8010d4e:	d045      	beq.n	8010ddc <_dtoa_r+0x5b4>
 8010d50:	494c      	ldr	r1, [pc, #304]	; (8010e84 <_dtoa_r+0x65c>)
 8010d52:	2000      	movs	r0, #0
 8010d54:	f7ef fd9a 	bl	800088c <__aeabi_ddiv>
 8010d58:	ec53 2b18 	vmov	r2, r3, d8
 8010d5c:	f7ef fab4 	bl	80002c8 <__aeabi_dsub>
 8010d60:	9d00      	ldr	r5, [sp, #0]
 8010d62:	ec41 0b18 	vmov	d8, r0, r1
 8010d66:	4639      	mov	r1, r7
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7ef ff15 	bl	8000b98 <__aeabi_d2iz>
 8010d6e:	900c      	str	r0, [sp, #48]	; 0x30
 8010d70:	f7ef fbf8 	bl	8000564 <__aeabi_i2d>
 8010d74:	4602      	mov	r2, r0
 8010d76:	460b      	mov	r3, r1
 8010d78:	4630      	mov	r0, r6
 8010d7a:	4639      	mov	r1, r7
 8010d7c:	f7ef faa4 	bl	80002c8 <__aeabi_dsub>
 8010d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010d82:	3330      	adds	r3, #48	; 0x30
 8010d84:	f805 3b01 	strb.w	r3, [r5], #1
 8010d88:	ec53 2b18 	vmov	r2, r3, d8
 8010d8c:	4606      	mov	r6, r0
 8010d8e:	460f      	mov	r7, r1
 8010d90:	f7ef fec4 	bl	8000b1c <__aeabi_dcmplt>
 8010d94:	2800      	cmp	r0, #0
 8010d96:	d165      	bne.n	8010e64 <_dtoa_r+0x63c>
 8010d98:	4632      	mov	r2, r6
 8010d9a:	463b      	mov	r3, r7
 8010d9c:	4935      	ldr	r1, [pc, #212]	; (8010e74 <_dtoa_r+0x64c>)
 8010d9e:	2000      	movs	r0, #0
 8010da0:	f7ef fa92 	bl	80002c8 <__aeabi_dsub>
 8010da4:	ec53 2b18 	vmov	r2, r3, d8
 8010da8:	f7ef feb8 	bl	8000b1c <__aeabi_dcmplt>
 8010dac:	2800      	cmp	r0, #0
 8010dae:	f040 80b9 	bne.w	8010f24 <_dtoa_r+0x6fc>
 8010db2:	9b02      	ldr	r3, [sp, #8]
 8010db4:	429d      	cmp	r5, r3
 8010db6:	f43f af75 	beq.w	8010ca4 <_dtoa_r+0x47c>
 8010dba:	4b2f      	ldr	r3, [pc, #188]	; (8010e78 <_dtoa_r+0x650>)
 8010dbc:	ec51 0b18 	vmov	r0, r1, d8
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	f7ef fc39 	bl	8000638 <__aeabi_dmul>
 8010dc6:	4b2c      	ldr	r3, [pc, #176]	; (8010e78 <_dtoa_r+0x650>)
 8010dc8:	ec41 0b18 	vmov	d8, r0, r1
 8010dcc:	2200      	movs	r2, #0
 8010dce:	4630      	mov	r0, r6
 8010dd0:	4639      	mov	r1, r7
 8010dd2:	f7ef fc31 	bl	8000638 <__aeabi_dmul>
 8010dd6:	4606      	mov	r6, r0
 8010dd8:	460f      	mov	r7, r1
 8010dda:	e7c4      	b.n	8010d66 <_dtoa_r+0x53e>
 8010ddc:	ec51 0b17 	vmov	r0, r1, d7
 8010de0:	f7ef fc2a 	bl	8000638 <__aeabi_dmul>
 8010de4:	9b02      	ldr	r3, [sp, #8]
 8010de6:	9d00      	ldr	r5, [sp, #0]
 8010de8:	930c      	str	r3, [sp, #48]	; 0x30
 8010dea:	ec41 0b18 	vmov	d8, r0, r1
 8010dee:	4639      	mov	r1, r7
 8010df0:	4630      	mov	r0, r6
 8010df2:	f7ef fed1 	bl	8000b98 <__aeabi_d2iz>
 8010df6:	9011      	str	r0, [sp, #68]	; 0x44
 8010df8:	f7ef fbb4 	bl	8000564 <__aeabi_i2d>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	460b      	mov	r3, r1
 8010e00:	4630      	mov	r0, r6
 8010e02:	4639      	mov	r1, r7
 8010e04:	f7ef fa60 	bl	80002c8 <__aeabi_dsub>
 8010e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e0a:	3330      	adds	r3, #48	; 0x30
 8010e0c:	f805 3b01 	strb.w	r3, [r5], #1
 8010e10:	9b02      	ldr	r3, [sp, #8]
 8010e12:	429d      	cmp	r5, r3
 8010e14:	4606      	mov	r6, r0
 8010e16:	460f      	mov	r7, r1
 8010e18:	f04f 0200 	mov.w	r2, #0
 8010e1c:	d134      	bne.n	8010e88 <_dtoa_r+0x660>
 8010e1e:	4b19      	ldr	r3, [pc, #100]	; (8010e84 <_dtoa_r+0x65c>)
 8010e20:	ec51 0b18 	vmov	r0, r1, d8
 8010e24:	f7ef fa52 	bl	80002cc <__adddf3>
 8010e28:	4602      	mov	r2, r0
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	4639      	mov	r1, r7
 8010e30:	f7ef fe92 	bl	8000b58 <__aeabi_dcmpgt>
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d175      	bne.n	8010f24 <_dtoa_r+0x6fc>
 8010e38:	ec53 2b18 	vmov	r2, r3, d8
 8010e3c:	4911      	ldr	r1, [pc, #68]	; (8010e84 <_dtoa_r+0x65c>)
 8010e3e:	2000      	movs	r0, #0
 8010e40:	f7ef fa42 	bl	80002c8 <__aeabi_dsub>
 8010e44:	4602      	mov	r2, r0
 8010e46:	460b      	mov	r3, r1
 8010e48:	4630      	mov	r0, r6
 8010e4a:	4639      	mov	r1, r7
 8010e4c:	f7ef fe66 	bl	8000b1c <__aeabi_dcmplt>
 8010e50:	2800      	cmp	r0, #0
 8010e52:	f43f af27 	beq.w	8010ca4 <_dtoa_r+0x47c>
 8010e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010e58:	1e6b      	subs	r3, r5, #1
 8010e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8010e5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010e60:	2b30      	cmp	r3, #48	; 0x30
 8010e62:	d0f8      	beq.n	8010e56 <_dtoa_r+0x62e>
 8010e64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010e68:	e04a      	b.n	8010f00 <_dtoa_r+0x6d8>
 8010e6a:	bf00      	nop
 8010e6c:	08014fe8 	.word	0x08014fe8
 8010e70:	08014fc0 	.word	0x08014fc0
 8010e74:	3ff00000 	.word	0x3ff00000
 8010e78:	40240000 	.word	0x40240000
 8010e7c:	401c0000 	.word	0x401c0000
 8010e80:	40140000 	.word	0x40140000
 8010e84:	3fe00000 	.word	0x3fe00000
 8010e88:	4baf      	ldr	r3, [pc, #700]	; (8011148 <_dtoa_r+0x920>)
 8010e8a:	f7ef fbd5 	bl	8000638 <__aeabi_dmul>
 8010e8e:	4606      	mov	r6, r0
 8010e90:	460f      	mov	r7, r1
 8010e92:	e7ac      	b.n	8010dee <_dtoa_r+0x5c6>
 8010e94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010e98:	9d00      	ldr	r5, [sp, #0]
 8010e9a:	4642      	mov	r2, r8
 8010e9c:	464b      	mov	r3, r9
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	4639      	mov	r1, r7
 8010ea2:	f7ef fcf3 	bl	800088c <__aeabi_ddiv>
 8010ea6:	f7ef fe77 	bl	8000b98 <__aeabi_d2iz>
 8010eaa:	9002      	str	r0, [sp, #8]
 8010eac:	f7ef fb5a 	bl	8000564 <__aeabi_i2d>
 8010eb0:	4642      	mov	r2, r8
 8010eb2:	464b      	mov	r3, r9
 8010eb4:	f7ef fbc0 	bl	8000638 <__aeabi_dmul>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	4630      	mov	r0, r6
 8010ebe:	4639      	mov	r1, r7
 8010ec0:	f7ef fa02 	bl	80002c8 <__aeabi_dsub>
 8010ec4:	9e02      	ldr	r6, [sp, #8]
 8010ec6:	9f01      	ldr	r7, [sp, #4]
 8010ec8:	3630      	adds	r6, #48	; 0x30
 8010eca:	f805 6b01 	strb.w	r6, [r5], #1
 8010ece:	9e00      	ldr	r6, [sp, #0]
 8010ed0:	1bae      	subs	r6, r5, r6
 8010ed2:	42b7      	cmp	r7, r6
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	d137      	bne.n	8010f4a <_dtoa_r+0x722>
 8010eda:	f7ef f9f7 	bl	80002cc <__adddf3>
 8010ede:	4642      	mov	r2, r8
 8010ee0:	464b      	mov	r3, r9
 8010ee2:	4606      	mov	r6, r0
 8010ee4:	460f      	mov	r7, r1
 8010ee6:	f7ef fe37 	bl	8000b58 <__aeabi_dcmpgt>
 8010eea:	b9c8      	cbnz	r0, 8010f20 <_dtoa_r+0x6f8>
 8010eec:	4642      	mov	r2, r8
 8010eee:	464b      	mov	r3, r9
 8010ef0:	4630      	mov	r0, r6
 8010ef2:	4639      	mov	r1, r7
 8010ef4:	f7ef fe08 	bl	8000b08 <__aeabi_dcmpeq>
 8010ef8:	b110      	cbz	r0, 8010f00 <_dtoa_r+0x6d8>
 8010efa:	9b02      	ldr	r3, [sp, #8]
 8010efc:	07d9      	lsls	r1, r3, #31
 8010efe:	d40f      	bmi.n	8010f20 <_dtoa_r+0x6f8>
 8010f00:	4620      	mov	r0, r4
 8010f02:	4659      	mov	r1, fp
 8010f04:	f001 f87e 	bl	8012004 <_Bfree>
 8010f08:	2300      	movs	r3, #0
 8010f0a:	702b      	strb	r3, [r5, #0]
 8010f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f0e:	f10a 0001 	add.w	r0, sl, #1
 8010f12:	6018      	str	r0, [r3, #0]
 8010f14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	f43f acd8 	beq.w	80108cc <_dtoa_r+0xa4>
 8010f1c:	601d      	str	r5, [r3, #0]
 8010f1e:	e4d5      	b.n	80108cc <_dtoa_r+0xa4>
 8010f20:	f8cd a01c 	str.w	sl, [sp, #28]
 8010f24:	462b      	mov	r3, r5
 8010f26:	461d      	mov	r5, r3
 8010f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010f2c:	2a39      	cmp	r2, #57	; 0x39
 8010f2e:	d108      	bne.n	8010f42 <_dtoa_r+0x71a>
 8010f30:	9a00      	ldr	r2, [sp, #0]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d1f7      	bne.n	8010f26 <_dtoa_r+0x6fe>
 8010f36:	9a07      	ldr	r2, [sp, #28]
 8010f38:	9900      	ldr	r1, [sp, #0]
 8010f3a:	3201      	adds	r2, #1
 8010f3c:	9207      	str	r2, [sp, #28]
 8010f3e:	2230      	movs	r2, #48	; 0x30
 8010f40:	700a      	strb	r2, [r1, #0]
 8010f42:	781a      	ldrb	r2, [r3, #0]
 8010f44:	3201      	adds	r2, #1
 8010f46:	701a      	strb	r2, [r3, #0]
 8010f48:	e78c      	b.n	8010e64 <_dtoa_r+0x63c>
 8010f4a:	4b7f      	ldr	r3, [pc, #508]	; (8011148 <_dtoa_r+0x920>)
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f7ef fb73 	bl	8000638 <__aeabi_dmul>
 8010f52:	2200      	movs	r2, #0
 8010f54:	2300      	movs	r3, #0
 8010f56:	4606      	mov	r6, r0
 8010f58:	460f      	mov	r7, r1
 8010f5a:	f7ef fdd5 	bl	8000b08 <__aeabi_dcmpeq>
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d09b      	beq.n	8010e9a <_dtoa_r+0x672>
 8010f62:	e7cd      	b.n	8010f00 <_dtoa_r+0x6d8>
 8010f64:	9a08      	ldr	r2, [sp, #32]
 8010f66:	2a00      	cmp	r2, #0
 8010f68:	f000 80c4 	beq.w	80110f4 <_dtoa_r+0x8cc>
 8010f6c:	9a05      	ldr	r2, [sp, #20]
 8010f6e:	2a01      	cmp	r2, #1
 8010f70:	f300 80a8 	bgt.w	80110c4 <_dtoa_r+0x89c>
 8010f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f76:	2a00      	cmp	r2, #0
 8010f78:	f000 80a0 	beq.w	80110bc <_dtoa_r+0x894>
 8010f7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010f80:	9e06      	ldr	r6, [sp, #24]
 8010f82:	4645      	mov	r5, r8
 8010f84:	9a04      	ldr	r2, [sp, #16]
 8010f86:	2101      	movs	r1, #1
 8010f88:	441a      	add	r2, r3
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	4498      	add	r8, r3
 8010f8e:	9204      	str	r2, [sp, #16]
 8010f90:	f001 f93e 	bl	8012210 <__i2b>
 8010f94:	4607      	mov	r7, r0
 8010f96:	2d00      	cmp	r5, #0
 8010f98:	dd0b      	ble.n	8010fb2 <_dtoa_r+0x78a>
 8010f9a:	9b04      	ldr	r3, [sp, #16]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	dd08      	ble.n	8010fb2 <_dtoa_r+0x78a>
 8010fa0:	42ab      	cmp	r3, r5
 8010fa2:	9a04      	ldr	r2, [sp, #16]
 8010fa4:	bfa8      	it	ge
 8010fa6:	462b      	movge	r3, r5
 8010fa8:	eba8 0803 	sub.w	r8, r8, r3
 8010fac:	1aed      	subs	r5, r5, r3
 8010fae:	1ad3      	subs	r3, r2, r3
 8010fb0:	9304      	str	r3, [sp, #16]
 8010fb2:	9b06      	ldr	r3, [sp, #24]
 8010fb4:	b1fb      	cbz	r3, 8010ff6 <_dtoa_r+0x7ce>
 8010fb6:	9b08      	ldr	r3, [sp, #32]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	f000 809f 	beq.w	80110fc <_dtoa_r+0x8d4>
 8010fbe:	2e00      	cmp	r6, #0
 8010fc0:	dd11      	ble.n	8010fe6 <_dtoa_r+0x7be>
 8010fc2:	4639      	mov	r1, r7
 8010fc4:	4632      	mov	r2, r6
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f001 f9de 	bl	8012388 <__pow5mult>
 8010fcc:	465a      	mov	r2, fp
 8010fce:	4601      	mov	r1, r0
 8010fd0:	4607      	mov	r7, r0
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f001 f932 	bl	801223c <__multiply>
 8010fd8:	4659      	mov	r1, fp
 8010fda:	9007      	str	r0, [sp, #28]
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f001 f811 	bl	8012004 <_Bfree>
 8010fe2:	9b07      	ldr	r3, [sp, #28]
 8010fe4:	469b      	mov	fp, r3
 8010fe6:	9b06      	ldr	r3, [sp, #24]
 8010fe8:	1b9a      	subs	r2, r3, r6
 8010fea:	d004      	beq.n	8010ff6 <_dtoa_r+0x7ce>
 8010fec:	4659      	mov	r1, fp
 8010fee:	4620      	mov	r0, r4
 8010ff0:	f001 f9ca 	bl	8012388 <__pow5mult>
 8010ff4:	4683      	mov	fp, r0
 8010ff6:	2101      	movs	r1, #1
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f001 f909 	bl	8012210 <__i2b>
 8010ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011000:	2b00      	cmp	r3, #0
 8011002:	4606      	mov	r6, r0
 8011004:	dd7c      	ble.n	8011100 <_dtoa_r+0x8d8>
 8011006:	461a      	mov	r2, r3
 8011008:	4601      	mov	r1, r0
 801100a:	4620      	mov	r0, r4
 801100c:	f001 f9bc 	bl	8012388 <__pow5mult>
 8011010:	9b05      	ldr	r3, [sp, #20]
 8011012:	2b01      	cmp	r3, #1
 8011014:	4606      	mov	r6, r0
 8011016:	dd76      	ble.n	8011106 <_dtoa_r+0x8de>
 8011018:	2300      	movs	r3, #0
 801101a:	9306      	str	r3, [sp, #24]
 801101c:	6933      	ldr	r3, [r6, #16]
 801101e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011022:	6918      	ldr	r0, [r3, #16]
 8011024:	f001 f8a4 	bl	8012170 <__hi0bits>
 8011028:	f1c0 0020 	rsb	r0, r0, #32
 801102c:	9b04      	ldr	r3, [sp, #16]
 801102e:	4418      	add	r0, r3
 8011030:	f010 001f 	ands.w	r0, r0, #31
 8011034:	f000 8086 	beq.w	8011144 <_dtoa_r+0x91c>
 8011038:	f1c0 0320 	rsb	r3, r0, #32
 801103c:	2b04      	cmp	r3, #4
 801103e:	dd7f      	ble.n	8011140 <_dtoa_r+0x918>
 8011040:	f1c0 001c 	rsb	r0, r0, #28
 8011044:	9b04      	ldr	r3, [sp, #16]
 8011046:	4403      	add	r3, r0
 8011048:	4480      	add	r8, r0
 801104a:	4405      	add	r5, r0
 801104c:	9304      	str	r3, [sp, #16]
 801104e:	f1b8 0f00 	cmp.w	r8, #0
 8011052:	dd05      	ble.n	8011060 <_dtoa_r+0x838>
 8011054:	4659      	mov	r1, fp
 8011056:	4642      	mov	r2, r8
 8011058:	4620      	mov	r0, r4
 801105a:	f001 f9ef 	bl	801243c <__lshift>
 801105e:	4683      	mov	fp, r0
 8011060:	9b04      	ldr	r3, [sp, #16]
 8011062:	2b00      	cmp	r3, #0
 8011064:	dd05      	ble.n	8011072 <_dtoa_r+0x84a>
 8011066:	4631      	mov	r1, r6
 8011068:	461a      	mov	r2, r3
 801106a:	4620      	mov	r0, r4
 801106c:	f001 f9e6 	bl	801243c <__lshift>
 8011070:	4606      	mov	r6, r0
 8011072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011074:	2b00      	cmp	r3, #0
 8011076:	d069      	beq.n	801114c <_dtoa_r+0x924>
 8011078:	4631      	mov	r1, r6
 801107a:	4658      	mov	r0, fp
 801107c:	f001 fa4a 	bl	8012514 <__mcmp>
 8011080:	2800      	cmp	r0, #0
 8011082:	da63      	bge.n	801114c <_dtoa_r+0x924>
 8011084:	2300      	movs	r3, #0
 8011086:	4659      	mov	r1, fp
 8011088:	220a      	movs	r2, #10
 801108a:	4620      	mov	r0, r4
 801108c:	f000 ffdc 	bl	8012048 <__multadd>
 8011090:	9b08      	ldr	r3, [sp, #32]
 8011092:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011096:	4683      	mov	fp, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	f000 818f 	beq.w	80113bc <_dtoa_r+0xb94>
 801109e:	4639      	mov	r1, r7
 80110a0:	2300      	movs	r3, #0
 80110a2:	220a      	movs	r2, #10
 80110a4:	4620      	mov	r0, r4
 80110a6:	f000 ffcf 	bl	8012048 <__multadd>
 80110aa:	f1b9 0f00 	cmp.w	r9, #0
 80110ae:	4607      	mov	r7, r0
 80110b0:	f300 808e 	bgt.w	80111d0 <_dtoa_r+0x9a8>
 80110b4:	9b05      	ldr	r3, [sp, #20]
 80110b6:	2b02      	cmp	r3, #2
 80110b8:	dc50      	bgt.n	801115c <_dtoa_r+0x934>
 80110ba:	e089      	b.n	80111d0 <_dtoa_r+0x9a8>
 80110bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80110be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80110c2:	e75d      	b.n	8010f80 <_dtoa_r+0x758>
 80110c4:	9b01      	ldr	r3, [sp, #4]
 80110c6:	1e5e      	subs	r6, r3, #1
 80110c8:	9b06      	ldr	r3, [sp, #24]
 80110ca:	42b3      	cmp	r3, r6
 80110cc:	bfbf      	itttt	lt
 80110ce:	9b06      	ldrlt	r3, [sp, #24]
 80110d0:	9606      	strlt	r6, [sp, #24]
 80110d2:	1af2      	sublt	r2, r6, r3
 80110d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80110d6:	bfb6      	itet	lt
 80110d8:	189b      	addlt	r3, r3, r2
 80110da:	1b9e      	subge	r6, r3, r6
 80110dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80110de:	9b01      	ldr	r3, [sp, #4]
 80110e0:	bfb8      	it	lt
 80110e2:	2600      	movlt	r6, #0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	bfb5      	itete	lt
 80110e8:	eba8 0503 	sublt.w	r5, r8, r3
 80110ec:	9b01      	ldrge	r3, [sp, #4]
 80110ee:	2300      	movlt	r3, #0
 80110f0:	4645      	movge	r5, r8
 80110f2:	e747      	b.n	8010f84 <_dtoa_r+0x75c>
 80110f4:	9e06      	ldr	r6, [sp, #24]
 80110f6:	9f08      	ldr	r7, [sp, #32]
 80110f8:	4645      	mov	r5, r8
 80110fa:	e74c      	b.n	8010f96 <_dtoa_r+0x76e>
 80110fc:	9a06      	ldr	r2, [sp, #24]
 80110fe:	e775      	b.n	8010fec <_dtoa_r+0x7c4>
 8011100:	9b05      	ldr	r3, [sp, #20]
 8011102:	2b01      	cmp	r3, #1
 8011104:	dc18      	bgt.n	8011138 <_dtoa_r+0x910>
 8011106:	9b02      	ldr	r3, [sp, #8]
 8011108:	b9b3      	cbnz	r3, 8011138 <_dtoa_r+0x910>
 801110a:	9b03      	ldr	r3, [sp, #12]
 801110c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011110:	b9a3      	cbnz	r3, 801113c <_dtoa_r+0x914>
 8011112:	9b03      	ldr	r3, [sp, #12]
 8011114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011118:	0d1b      	lsrs	r3, r3, #20
 801111a:	051b      	lsls	r3, r3, #20
 801111c:	b12b      	cbz	r3, 801112a <_dtoa_r+0x902>
 801111e:	9b04      	ldr	r3, [sp, #16]
 8011120:	3301      	adds	r3, #1
 8011122:	9304      	str	r3, [sp, #16]
 8011124:	f108 0801 	add.w	r8, r8, #1
 8011128:	2301      	movs	r3, #1
 801112a:	9306      	str	r3, [sp, #24]
 801112c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801112e:	2b00      	cmp	r3, #0
 8011130:	f47f af74 	bne.w	801101c <_dtoa_r+0x7f4>
 8011134:	2001      	movs	r0, #1
 8011136:	e779      	b.n	801102c <_dtoa_r+0x804>
 8011138:	2300      	movs	r3, #0
 801113a:	e7f6      	b.n	801112a <_dtoa_r+0x902>
 801113c:	9b02      	ldr	r3, [sp, #8]
 801113e:	e7f4      	b.n	801112a <_dtoa_r+0x902>
 8011140:	d085      	beq.n	801104e <_dtoa_r+0x826>
 8011142:	4618      	mov	r0, r3
 8011144:	301c      	adds	r0, #28
 8011146:	e77d      	b.n	8011044 <_dtoa_r+0x81c>
 8011148:	40240000 	.word	0x40240000
 801114c:	9b01      	ldr	r3, [sp, #4]
 801114e:	2b00      	cmp	r3, #0
 8011150:	dc38      	bgt.n	80111c4 <_dtoa_r+0x99c>
 8011152:	9b05      	ldr	r3, [sp, #20]
 8011154:	2b02      	cmp	r3, #2
 8011156:	dd35      	ble.n	80111c4 <_dtoa_r+0x99c>
 8011158:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801115c:	f1b9 0f00 	cmp.w	r9, #0
 8011160:	d10d      	bne.n	801117e <_dtoa_r+0x956>
 8011162:	4631      	mov	r1, r6
 8011164:	464b      	mov	r3, r9
 8011166:	2205      	movs	r2, #5
 8011168:	4620      	mov	r0, r4
 801116a:	f000 ff6d 	bl	8012048 <__multadd>
 801116e:	4601      	mov	r1, r0
 8011170:	4606      	mov	r6, r0
 8011172:	4658      	mov	r0, fp
 8011174:	f001 f9ce 	bl	8012514 <__mcmp>
 8011178:	2800      	cmp	r0, #0
 801117a:	f73f adbd 	bgt.w	8010cf8 <_dtoa_r+0x4d0>
 801117e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011180:	9d00      	ldr	r5, [sp, #0]
 8011182:	ea6f 0a03 	mvn.w	sl, r3
 8011186:	f04f 0800 	mov.w	r8, #0
 801118a:	4631      	mov	r1, r6
 801118c:	4620      	mov	r0, r4
 801118e:	f000 ff39 	bl	8012004 <_Bfree>
 8011192:	2f00      	cmp	r7, #0
 8011194:	f43f aeb4 	beq.w	8010f00 <_dtoa_r+0x6d8>
 8011198:	f1b8 0f00 	cmp.w	r8, #0
 801119c:	d005      	beq.n	80111aa <_dtoa_r+0x982>
 801119e:	45b8      	cmp	r8, r7
 80111a0:	d003      	beq.n	80111aa <_dtoa_r+0x982>
 80111a2:	4641      	mov	r1, r8
 80111a4:	4620      	mov	r0, r4
 80111a6:	f000 ff2d 	bl	8012004 <_Bfree>
 80111aa:	4639      	mov	r1, r7
 80111ac:	4620      	mov	r0, r4
 80111ae:	f000 ff29 	bl	8012004 <_Bfree>
 80111b2:	e6a5      	b.n	8010f00 <_dtoa_r+0x6d8>
 80111b4:	2600      	movs	r6, #0
 80111b6:	4637      	mov	r7, r6
 80111b8:	e7e1      	b.n	801117e <_dtoa_r+0x956>
 80111ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80111bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80111c0:	4637      	mov	r7, r6
 80111c2:	e599      	b.n	8010cf8 <_dtoa_r+0x4d0>
 80111c4:	9b08      	ldr	r3, [sp, #32]
 80111c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	f000 80fd 	beq.w	80113ca <_dtoa_r+0xba2>
 80111d0:	2d00      	cmp	r5, #0
 80111d2:	dd05      	ble.n	80111e0 <_dtoa_r+0x9b8>
 80111d4:	4639      	mov	r1, r7
 80111d6:	462a      	mov	r2, r5
 80111d8:	4620      	mov	r0, r4
 80111da:	f001 f92f 	bl	801243c <__lshift>
 80111de:	4607      	mov	r7, r0
 80111e0:	9b06      	ldr	r3, [sp, #24]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d05c      	beq.n	80112a0 <_dtoa_r+0xa78>
 80111e6:	6879      	ldr	r1, [r7, #4]
 80111e8:	4620      	mov	r0, r4
 80111ea:	f000 fecb 	bl	8011f84 <_Balloc>
 80111ee:	4605      	mov	r5, r0
 80111f0:	b928      	cbnz	r0, 80111fe <_dtoa_r+0x9d6>
 80111f2:	4b80      	ldr	r3, [pc, #512]	; (80113f4 <_dtoa_r+0xbcc>)
 80111f4:	4602      	mov	r2, r0
 80111f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80111fa:	f7ff bb2e 	b.w	801085a <_dtoa_r+0x32>
 80111fe:	693a      	ldr	r2, [r7, #16]
 8011200:	3202      	adds	r2, #2
 8011202:	0092      	lsls	r2, r2, #2
 8011204:	f107 010c 	add.w	r1, r7, #12
 8011208:	300c      	adds	r0, #12
 801120a:	f7fd fa9f 	bl	800e74c <memcpy>
 801120e:	2201      	movs	r2, #1
 8011210:	4629      	mov	r1, r5
 8011212:	4620      	mov	r0, r4
 8011214:	f001 f912 	bl	801243c <__lshift>
 8011218:	9b00      	ldr	r3, [sp, #0]
 801121a:	3301      	adds	r3, #1
 801121c:	9301      	str	r3, [sp, #4]
 801121e:	9b00      	ldr	r3, [sp, #0]
 8011220:	444b      	add	r3, r9
 8011222:	9307      	str	r3, [sp, #28]
 8011224:	9b02      	ldr	r3, [sp, #8]
 8011226:	f003 0301 	and.w	r3, r3, #1
 801122a:	46b8      	mov	r8, r7
 801122c:	9306      	str	r3, [sp, #24]
 801122e:	4607      	mov	r7, r0
 8011230:	9b01      	ldr	r3, [sp, #4]
 8011232:	4631      	mov	r1, r6
 8011234:	3b01      	subs	r3, #1
 8011236:	4658      	mov	r0, fp
 8011238:	9302      	str	r3, [sp, #8]
 801123a:	f7ff fa69 	bl	8010710 <quorem>
 801123e:	4603      	mov	r3, r0
 8011240:	3330      	adds	r3, #48	; 0x30
 8011242:	9004      	str	r0, [sp, #16]
 8011244:	4641      	mov	r1, r8
 8011246:	4658      	mov	r0, fp
 8011248:	9308      	str	r3, [sp, #32]
 801124a:	f001 f963 	bl	8012514 <__mcmp>
 801124e:	463a      	mov	r2, r7
 8011250:	4681      	mov	r9, r0
 8011252:	4631      	mov	r1, r6
 8011254:	4620      	mov	r0, r4
 8011256:	f001 f979 	bl	801254c <__mdiff>
 801125a:	68c2      	ldr	r2, [r0, #12]
 801125c:	9b08      	ldr	r3, [sp, #32]
 801125e:	4605      	mov	r5, r0
 8011260:	bb02      	cbnz	r2, 80112a4 <_dtoa_r+0xa7c>
 8011262:	4601      	mov	r1, r0
 8011264:	4658      	mov	r0, fp
 8011266:	f001 f955 	bl	8012514 <__mcmp>
 801126a:	9b08      	ldr	r3, [sp, #32]
 801126c:	4602      	mov	r2, r0
 801126e:	4629      	mov	r1, r5
 8011270:	4620      	mov	r0, r4
 8011272:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011276:	f000 fec5 	bl	8012004 <_Bfree>
 801127a:	9b05      	ldr	r3, [sp, #20]
 801127c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801127e:	9d01      	ldr	r5, [sp, #4]
 8011280:	ea43 0102 	orr.w	r1, r3, r2
 8011284:	9b06      	ldr	r3, [sp, #24]
 8011286:	430b      	orrs	r3, r1
 8011288:	9b08      	ldr	r3, [sp, #32]
 801128a:	d10d      	bne.n	80112a8 <_dtoa_r+0xa80>
 801128c:	2b39      	cmp	r3, #57	; 0x39
 801128e:	d029      	beq.n	80112e4 <_dtoa_r+0xabc>
 8011290:	f1b9 0f00 	cmp.w	r9, #0
 8011294:	dd01      	ble.n	801129a <_dtoa_r+0xa72>
 8011296:	9b04      	ldr	r3, [sp, #16]
 8011298:	3331      	adds	r3, #49	; 0x31
 801129a:	9a02      	ldr	r2, [sp, #8]
 801129c:	7013      	strb	r3, [r2, #0]
 801129e:	e774      	b.n	801118a <_dtoa_r+0x962>
 80112a0:	4638      	mov	r0, r7
 80112a2:	e7b9      	b.n	8011218 <_dtoa_r+0x9f0>
 80112a4:	2201      	movs	r2, #1
 80112a6:	e7e2      	b.n	801126e <_dtoa_r+0xa46>
 80112a8:	f1b9 0f00 	cmp.w	r9, #0
 80112ac:	db06      	blt.n	80112bc <_dtoa_r+0xa94>
 80112ae:	9905      	ldr	r1, [sp, #20]
 80112b0:	ea41 0909 	orr.w	r9, r1, r9
 80112b4:	9906      	ldr	r1, [sp, #24]
 80112b6:	ea59 0101 	orrs.w	r1, r9, r1
 80112ba:	d120      	bne.n	80112fe <_dtoa_r+0xad6>
 80112bc:	2a00      	cmp	r2, #0
 80112be:	ddec      	ble.n	801129a <_dtoa_r+0xa72>
 80112c0:	4659      	mov	r1, fp
 80112c2:	2201      	movs	r2, #1
 80112c4:	4620      	mov	r0, r4
 80112c6:	9301      	str	r3, [sp, #4]
 80112c8:	f001 f8b8 	bl	801243c <__lshift>
 80112cc:	4631      	mov	r1, r6
 80112ce:	4683      	mov	fp, r0
 80112d0:	f001 f920 	bl	8012514 <__mcmp>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	9b01      	ldr	r3, [sp, #4]
 80112d8:	dc02      	bgt.n	80112e0 <_dtoa_r+0xab8>
 80112da:	d1de      	bne.n	801129a <_dtoa_r+0xa72>
 80112dc:	07da      	lsls	r2, r3, #31
 80112de:	d5dc      	bpl.n	801129a <_dtoa_r+0xa72>
 80112e0:	2b39      	cmp	r3, #57	; 0x39
 80112e2:	d1d8      	bne.n	8011296 <_dtoa_r+0xa6e>
 80112e4:	9a02      	ldr	r2, [sp, #8]
 80112e6:	2339      	movs	r3, #57	; 0x39
 80112e8:	7013      	strb	r3, [r2, #0]
 80112ea:	462b      	mov	r3, r5
 80112ec:	461d      	mov	r5, r3
 80112ee:	3b01      	subs	r3, #1
 80112f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80112f4:	2a39      	cmp	r2, #57	; 0x39
 80112f6:	d050      	beq.n	801139a <_dtoa_r+0xb72>
 80112f8:	3201      	adds	r2, #1
 80112fa:	701a      	strb	r2, [r3, #0]
 80112fc:	e745      	b.n	801118a <_dtoa_r+0x962>
 80112fe:	2a00      	cmp	r2, #0
 8011300:	dd03      	ble.n	801130a <_dtoa_r+0xae2>
 8011302:	2b39      	cmp	r3, #57	; 0x39
 8011304:	d0ee      	beq.n	80112e4 <_dtoa_r+0xabc>
 8011306:	3301      	adds	r3, #1
 8011308:	e7c7      	b.n	801129a <_dtoa_r+0xa72>
 801130a:	9a01      	ldr	r2, [sp, #4]
 801130c:	9907      	ldr	r1, [sp, #28]
 801130e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011312:	428a      	cmp	r2, r1
 8011314:	d02a      	beq.n	801136c <_dtoa_r+0xb44>
 8011316:	4659      	mov	r1, fp
 8011318:	2300      	movs	r3, #0
 801131a:	220a      	movs	r2, #10
 801131c:	4620      	mov	r0, r4
 801131e:	f000 fe93 	bl	8012048 <__multadd>
 8011322:	45b8      	cmp	r8, r7
 8011324:	4683      	mov	fp, r0
 8011326:	f04f 0300 	mov.w	r3, #0
 801132a:	f04f 020a 	mov.w	r2, #10
 801132e:	4641      	mov	r1, r8
 8011330:	4620      	mov	r0, r4
 8011332:	d107      	bne.n	8011344 <_dtoa_r+0xb1c>
 8011334:	f000 fe88 	bl	8012048 <__multadd>
 8011338:	4680      	mov	r8, r0
 801133a:	4607      	mov	r7, r0
 801133c:	9b01      	ldr	r3, [sp, #4]
 801133e:	3301      	adds	r3, #1
 8011340:	9301      	str	r3, [sp, #4]
 8011342:	e775      	b.n	8011230 <_dtoa_r+0xa08>
 8011344:	f000 fe80 	bl	8012048 <__multadd>
 8011348:	4639      	mov	r1, r7
 801134a:	4680      	mov	r8, r0
 801134c:	2300      	movs	r3, #0
 801134e:	220a      	movs	r2, #10
 8011350:	4620      	mov	r0, r4
 8011352:	f000 fe79 	bl	8012048 <__multadd>
 8011356:	4607      	mov	r7, r0
 8011358:	e7f0      	b.n	801133c <_dtoa_r+0xb14>
 801135a:	f1b9 0f00 	cmp.w	r9, #0
 801135e:	9a00      	ldr	r2, [sp, #0]
 8011360:	bfcc      	ite	gt
 8011362:	464d      	movgt	r5, r9
 8011364:	2501      	movle	r5, #1
 8011366:	4415      	add	r5, r2
 8011368:	f04f 0800 	mov.w	r8, #0
 801136c:	4659      	mov	r1, fp
 801136e:	2201      	movs	r2, #1
 8011370:	4620      	mov	r0, r4
 8011372:	9301      	str	r3, [sp, #4]
 8011374:	f001 f862 	bl	801243c <__lshift>
 8011378:	4631      	mov	r1, r6
 801137a:	4683      	mov	fp, r0
 801137c:	f001 f8ca 	bl	8012514 <__mcmp>
 8011380:	2800      	cmp	r0, #0
 8011382:	dcb2      	bgt.n	80112ea <_dtoa_r+0xac2>
 8011384:	d102      	bne.n	801138c <_dtoa_r+0xb64>
 8011386:	9b01      	ldr	r3, [sp, #4]
 8011388:	07db      	lsls	r3, r3, #31
 801138a:	d4ae      	bmi.n	80112ea <_dtoa_r+0xac2>
 801138c:	462b      	mov	r3, r5
 801138e:	461d      	mov	r5, r3
 8011390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011394:	2a30      	cmp	r2, #48	; 0x30
 8011396:	d0fa      	beq.n	801138e <_dtoa_r+0xb66>
 8011398:	e6f7      	b.n	801118a <_dtoa_r+0x962>
 801139a:	9a00      	ldr	r2, [sp, #0]
 801139c:	429a      	cmp	r2, r3
 801139e:	d1a5      	bne.n	80112ec <_dtoa_r+0xac4>
 80113a0:	f10a 0a01 	add.w	sl, sl, #1
 80113a4:	2331      	movs	r3, #49	; 0x31
 80113a6:	e779      	b.n	801129c <_dtoa_r+0xa74>
 80113a8:	4b13      	ldr	r3, [pc, #76]	; (80113f8 <_dtoa_r+0xbd0>)
 80113aa:	f7ff baaf 	b.w	801090c <_dtoa_r+0xe4>
 80113ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	f47f aa86 	bne.w	80108c2 <_dtoa_r+0x9a>
 80113b6:	4b11      	ldr	r3, [pc, #68]	; (80113fc <_dtoa_r+0xbd4>)
 80113b8:	f7ff baa8 	b.w	801090c <_dtoa_r+0xe4>
 80113bc:	f1b9 0f00 	cmp.w	r9, #0
 80113c0:	dc03      	bgt.n	80113ca <_dtoa_r+0xba2>
 80113c2:	9b05      	ldr	r3, [sp, #20]
 80113c4:	2b02      	cmp	r3, #2
 80113c6:	f73f aec9 	bgt.w	801115c <_dtoa_r+0x934>
 80113ca:	9d00      	ldr	r5, [sp, #0]
 80113cc:	4631      	mov	r1, r6
 80113ce:	4658      	mov	r0, fp
 80113d0:	f7ff f99e 	bl	8010710 <quorem>
 80113d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80113d8:	f805 3b01 	strb.w	r3, [r5], #1
 80113dc:	9a00      	ldr	r2, [sp, #0]
 80113de:	1aaa      	subs	r2, r5, r2
 80113e0:	4591      	cmp	r9, r2
 80113e2:	ddba      	ble.n	801135a <_dtoa_r+0xb32>
 80113e4:	4659      	mov	r1, fp
 80113e6:	2300      	movs	r3, #0
 80113e8:	220a      	movs	r2, #10
 80113ea:	4620      	mov	r0, r4
 80113ec:	f000 fe2c 	bl	8012048 <__multadd>
 80113f0:	4683      	mov	fp, r0
 80113f2:	e7eb      	b.n	80113cc <_dtoa_r+0xba4>
 80113f4:	08014e6b 	.word	0x08014e6b
 80113f8:	080150d1 	.word	0x080150d1
 80113fc:	08014de8 	.word	0x08014de8

08011400 <__sflush_r>:
 8011400:	898a      	ldrh	r2, [r1, #12]
 8011402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011406:	4605      	mov	r5, r0
 8011408:	0710      	lsls	r0, r2, #28
 801140a:	460c      	mov	r4, r1
 801140c:	d458      	bmi.n	80114c0 <__sflush_r+0xc0>
 801140e:	684b      	ldr	r3, [r1, #4]
 8011410:	2b00      	cmp	r3, #0
 8011412:	dc05      	bgt.n	8011420 <__sflush_r+0x20>
 8011414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011416:	2b00      	cmp	r3, #0
 8011418:	dc02      	bgt.n	8011420 <__sflush_r+0x20>
 801141a:	2000      	movs	r0, #0
 801141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011422:	2e00      	cmp	r6, #0
 8011424:	d0f9      	beq.n	801141a <__sflush_r+0x1a>
 8011426:	2300      	movs	r3, #0
 8011428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801142c:	682f      	ldr	r7, [r5, #0]
 801142e:	602b      	str	r3, [r5, #0]
 8011430:	d032      	beq.n	8011498 <__sflush_r+0x98>
 8011432:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011434:	89a3      	ldrh	r3, [r4, #12]
 8011436:	075a      	lsls	r2, r3, #29
 8011438:	d505      	bpl.n	8011446 <__sflush_r+0x46>
 801143a:	6863      	ldr	r3, [r4, #4]
 801143c:	1ac0      	subs	r0, r0, r3
 801143e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011440:	b10b      	cbz	r3, 8011446 <__sflush_r+0x46>
 8011442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011444:	1ac0      	subs	r0, r0, r3
 8011446:	2300      	movs	r3, #0
 8011448:	4602      	mov	r2, r0
 801144a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801144c:	6a21      	ldr	r1, [r4, #32]
 801144e:	4628      	mov	r0, r5
 8011450:	47b0      	blx	r6
 8011452:	1c43      	adds	r3, r0, #1
 8011454:	89a3      	ldrh	r3, [r4, #12]
 8011456:	d106      	bne.n	8011466 <__sflush_r+0x66>
 8011458:	6829      	ldr	r1, [r5, #0]
 801145a:	291d      	cmp	r1, #29
 801145c:	d82c      	bhi.n	80114b8 <__sflush_r+0xb8>
 801145e:	4a2a      	ldr	r2, [pc, #168]	; (8011508 <__sflush_r+0x108>)
 8011460:	40ca      	lsrs	r2, r1
 8011462:	07d6      	lsls	r6, r2, #31
 8011464:	d528      	bpl.n	80114b8 <__sflush_r+0xb8>
 8011466:	2200      	movs	r2, #0
 8011468:	6062      	str	r2, [r4, #4]
 801146a:	04d9      	lsls	r1, r3, #19
 801146c:	6922      	ldr	r2, [r4, #16]
 801146e:	6022      	str	r2, [r4, #0]
 8011470:	d504      	bpl.n	801147c <__sflush_r+0x7c>
 8011472:	1c42      	adds	r2, r0, #1
 8011474:	d101      	bne.n	801147a <__sflush_r+0x7a>
 8011476:	682b      	ldr	r3, [r5, #0]
 8011478:	b903      	cbnz	r3, 801147c <__sflush_r+0x7c>
 801147a:	6560      	str	r0, [r4, #84]	; 0x54
 801147c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801147e:	602f      	str	r7, [r5, #0]
 8011480:	2900      	cmp	r1, #0
 8011482:	d0ca      	beq.n	801141a <__sflush_r+0x1a>
 8011484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011488:	4299      	cmp	r1, r3
 801148a:	d002      	beq.n	8011492 <__sflush_r+0x92>
 801148c:	4628      	mov	r0, r5
 801148e:	f7fd f973 	bl	800e778 <_free_r>
 8011492:	2000      	movs	r0, #0
 8011494:	6360      	str	r0, [r4, #52]	; 0x34
 8011496:	e7c1      	b.n	801141c <__sflush_r+0x1c>
 8011498:	6a21      	ldr	r1, [r4, #32]
 801149a:	2301      	movs	r3, #1
 801149c:	4628      	mov	r0, r5
 801149e:	47b0      	blx	r6
 80114a0:	1c41      	adds	r1, r0, #1
 80114a2:	d1c7      	bne.n	8011434 <__sflush_r+0x34>
 80114a4:	682b      	ldr	r3, [r5, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d0c4      	beq.n	8011434 <__sflush_r+0x34>
 80114aa:	2b1d      	cmp	r3, #29
 80114ac:	d001      	beq.n	80114b2 <__sflush_r+0xb2>
 80114ae:	2b16      	cmp	r3, #22
 80114b0:	d101      	bne.n	80114b6 <__sflush_r+0xb6>
 80114b2:	602f      	str	r7, [r5, #0]
 80114b4:	e7b1      	b.n	801141a <__sflush_r+0x1a>
 80114b6:	89a3      	ldrh	r3, [r4, #12]
 80114b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114bc:	81a3      	strh	r3, [r4, #12]
 80114be:	e7ad      	b.n	801141c <__sflush_r+0x1c>
 80114c0:	690f      	ldr	r7, [r1, #16]
 80114c2:	2f00      	cmp	r7, #0
 80114c4:	d0a9      	beq.n	801141a <__sflush_r+0x1a>
 80114c6:	0793      	lsls	r3, r2, #30
 80114c8:	680e      	ldr	r6, [r1, #0]
 80114ca:	bf08      	it	eq
 80114cc:	694b      	ldreq	r3, [r1, #20]
 80114ce:	600f      	str	r7, [r1, #0]
 80114d0:	bf18      	it	ne
 80114d2:	2300      	movne	r3, #0
 80114d4:	eba6 0807 	sub.w	r8, r6, r7
 80114d8:	608b      	str	r3, [r1, #8]
 80114da:	f1b8 0f00 	cmp.w	r8, #0
 80114de:	dd9c      	ble.n	801141a <__sflush_r+0x1a>
 80114e0:	6a21      	ldr	r1, [r4, #32]
 80114e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114e4:	4643      	mov	r3, r8
 80114e6:	463a      	mov	r2, r7
 80114e8:	4628      	mov	r0, r5
 80114ea:	47b0      	blx	r6
 80114ec:	2800      	cmp	r0, #0
 80114ee:	dc06      	bgt.n	80114fe <__sflush_r+0xfe>
 80114f0:	89a3      	ldrh	r3, [r4, #12]
 80114f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114f6:	81a3      	strh	r3, [r4, #12]
 80114f8:	f04f 30ff 	mov.w	r0, #4294967295
 80114fc:	e78e      	b.n	801141c <__sflush_r+0x1c>
 80114fe:	4407      	add	r7, r0
 8011500:	eba8 0800 	sub.w	r8, r8, r0
 8011504:	e7e9      	b.n	80114da <__sflush_r+0xda>
 8011506:	bf00      	nop
 8011508:	20400001 	.word	0x20400001

0801150c <_fflush_r>:
 801150c:	b538      	push	{r3, r4, r5, lr}
 801150e:	690b      	ldr	r3, [r1, #16]
 8011510:	4605      	mov	r5, r0
 8011512:	460c      	mov	r4, r1
 8011514:	b913      	cbnz	r3, 801151c <_fflush_r+0x10>
 8011516:	2500      	movs	r5, #0
 8011518:	4628      	mov	r0, r5
 801151a:	bd38      	pop	{r3, r4, r5, pc}
 801151c:	b118      	cbz	r0, 8011526 <_fflush_r+0x1a>
 801151e:	6983      	ldr	r3, [r0, #24]
 8011520:	b90b      	cbnz	r3, 8011526 <_fflush_r+0x1a>
 8011522:	f000 f887 	bl	8011634 <__sinit>
 8011526:	4b14      	ldr	r3, [pc, #80]	; (8011578 <_fflush_r+0x6c>)
 8011528:	429c      	cmp	r4, r3
 801152a:	d11b      	bne.n	8011564 <_fflush_r+0x58>
 801152c:	686c      	ldr	r4, [r5, #4]
 801152e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d0ef      	beq.n	8011516 <_fflush_r+0xa>
 8011536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011538:	07d0      	lsls	r0, r2, #31
 801153a:	d404      	bmi.n	8011546 <_fflush_r+0x3a>
 801153c:	0599      	lsls	r1, r3, #22
 801153e:	d402      	bmi.n	8011546 <_fflush_r+0x3a>
 8011540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011542:	f000 fc88 	bl	8011e56 <__retarget_lock_acquire_recursive>
 8011546:	4628      	mov	r0, r5
 8011548:	4621      	mov	r1, r4
 801154a:	f7ff ff59 	bl	8011400 <__sflush_r>
 801154e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011550:	07da      	lsls	r2, r3, #31
 8011552:	4605      	mov	r5, r0
 8011554:	d4e0      	bmi.n	8011518 <_fflush_r+0xc>
 8011556:	89a3      	ldrh	r3, [r4, #12]
 8011558:	059b      	lsls	r3, r3, #22
 801155a:	d4dd      	bmi.n	8011518 <_fflush_r+0xc>
 801155c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801155e:	f000 fc7b 	bl	8011e58 <__retarget_lock_release_recursive>
 8011562:	e7d9      	b.n	8011518 <_fflush_r+0xc>
 8011564:	4b05      	ldr	r3, [pc, #20]	; (801157c <_fflush_r+0x70>)
 8011566:	429c      	cmp	r4, r3
 8011568:	d101      	bne.n	801156e <_fflush_r+0x62>
 801156a:	68ac      	ldr	r4, [r5, #8]
 801156c:	e7df      	b.n	801152e <_fflush_r+0x22>
 801156e:	4b04      	ldr	r3, [pc, #16]	; (8011580 <_fflush_r+0x74>)
 8011570:	429c      	cmp	r4, r3
 8011572:	bf08      	it	eq
 8011574:	68ec      	ldreq	r4, [r5, #12]
 8011576:	e7da      	b.n	801152e <_fflush_r+0x22>
 8011578:	08014e9c 	.word	0x08014e9c
 801157c:	08014ebc 	.word	0x08014ebc
 8011580:	08014e7c 	.word	0x08014e7c

08011584 <std>:
 8011584:	2300      	movs	r3, #0
 8011586:	b510      	push	{r4, lr}
 8011588:	4604      	mov	r4, r0
 801158a:	e9c0 3300 	strd	r3, r3, [r0]
 801158e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011592:	6083      	str	r3, [r0, #8]
 8011594:	8181      	strh	r1, [r0, #12]
 8011596:	6643      	str	r3, [r0, #100]	; 0x64
 8011598:	81c2      	strh	r2, [r0, #14]
 801159a:	6183      	str	r3, [r0, #24]
 801159c:	4619      	mov	r1, r3
 801159e:	2208      	movs	r2, #8
 80115a0:	305c      	adds	r0, #92	; 0x5c
 80115a2:	f7fd f8e1 	bl	800e768 <memset>
 80115a6:	4b05      	ldr	r3, [pc, #20]	; (80115bc <std+0x38>)
 80115a8:	6263      	str	r3, [r4, #36]	; 0x24
 80115aa:	4b05      	ldr	r3, [pc, #20]	; (80115c0 <std+0x3c>)
 80115ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80115ae:	4b05      	ldr	r3, [pc, #20]	; (80115c4 <std+0x40>)
 80115b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80115b2:	4b05      	ldr	r3, [pc, #20]	; (80115c8 <std+0x44>)
 80115b4:	6224      	str	r4, [r4, #32]
 80115b6:	6323      	str	r3, [r4, #48]	; 0x30
 80115b8:	bd10      	pop	{r4, pc}
 80115ba:	bf00      	nop
 80115bc:	0800f685 	.word	0x0800f685
 80115c0:	0800f6ab 	.word	0x0800f6ab
 80115c4:	0800f6e3 	.word	0x0800f6e3
 80115c8:	0800f707 	.word	0x0800f707

080115cc <_cleanup_r>:
 80115cc:	4901      	ldr	r1, [pc, #4]	; (80115d4 <_cleanup_r+0x8>)
 80115ce:	f000 b8af 	b.w	8011730 <_fwalk_reent>
 80115d2:	bf00      	nop
 80115d4:	0801150d 	.word	0x0801150d

080115d8 <__sfmoreglue>:
 80115d8:	b570      	push	{r4, r5, r6, lr}
 80115da:	1e4a      	subs	r2, r1, #1
 80115dc:	2568      	movs	r5, #104	; 0x68
 80115de:	4355      	muls	r5, r2
 80115e0:	460e      	mov	r6, r1
 80115e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80115e6:	f7fd f917 	bl	800e818 <_malloc_r>
 80115ea:	4604      	mov	r4, r0
 80115ec:	b140      	cbz	r0, 8011600 <__sfmoreglue+0x28>
 80115ee:	2100      	movs	r1, #0
 80115f0:	e9c0 1600 	strd	r1, r6, [r0]
 80115f4:	300c      	adds	r0, #12
 80115f6:	60a0      	str	r0, [r4, #8]
 80115f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80115fc:	f7fd f8b4 	bl	800e768 <memset>
 8011600:	4620      	mov	r0, r4
 8011602:	bd70      	pop	{r4, r5, r6, pc}

08011604 <__sfp_lock_acquire>:
 8011604:	4801      	ldr	r0, [pc, #4]	; (801160c <__sfp_lock_acquire+0x8>)
 8011606:	f000 bc26 	b.w	8011e56 <__retarget_lock_acquire_recursive>
 801160a:	bf00      	nop
 801160c:	20001a40 	.word	0x20001a40

08011610 <__sfp_lock_release>:
 8011610:	4801      	ldr	r0, [pc, #4]	; (8011618 <__sfp_lock_release+0x8>)
 8011612:	f000 bc21 	b.w	8011e58 <__retarget_lock_release_recursive>
 8011616:	bf00      	nop
 8011618:	20001a40 	.word	0x20001a40

0801161c <__sinit_lock_acquire>:
 801161c:	4801      	ldr	r0, [pc, #4]	; (8011624 <__sinit_lock_acquire+0x8>)
 801161e:	f000 bc1a 	b.w	8011e56 <__retarget_lock_acquire_recursive>
 8011622:	bf00      	nop
 8011624:	20001a3b 	.word	0x20001a3b

08011628 <__sinit_lock_release>:
 8011628:	4801      	ldr	r0, [pc, #4]	; (8011630 <__sinit_lock_release+0x8>)
 801162a:	f000 bc15 	b.w	8011e58 <__retarget_lock_release_recursive>
 801162e:	bf00      	nop
 8011630:	20001a3b 	.word	0x20001a3b

08011634 <__sinit>:
 8011634:	b510      	push	{r4, lr}
 8011636:	4604      	mov	r4, r0
 8011638:	f7ff fff0 	bl	801161c <__sinit_lock_acquire>
 801163c:	69a3      	ldr	r3, [r4, #24]
 801163e:	b11b      	cbz	r3, 8011648 <__sinit+0x14>
 8011640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011644:	f7ff bff0 	b.w	8011628 <__sinit_lock_release>
 8011648:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801164c:	6523      	str	r3, [r4, #80]	; 0x50
 801164e:	4b13      	ldr	r3, [pc, #76]	; (801169c <__sinit+0x68>)
 8011650:	4a13      	ldr	r2, [pc, #76]	; (80116a0 <__sinit+0x6c>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	62a2      	str	r2, [r4, #40]	; 0x28
 8011656:	42a3      	cmp	r3, r4
 8011658:	bf04      	itt	eq
 801165a:	2301      	moveq	r3, #1
 801165c:	61a3      	streq	r3, [r4, #24]
 801165e:	4620      	mov	r0, r4
 8011660:	f000 f820 	bl	80116a4 <__sfp>
 8011664:	6060      	str	r0, [r4, #4]
 8011666:	4620      	mov	r0, r4
 8011668:	f000 f81c 	bl	80116a4 <__sfp>
 801166c:	60a0      	str	r0, [r4, #8]
 801166e:	4620      	mov	r0, r4
 8011670:	f000 f818 	bl	80116a4 <__sfp>
 8011674:	2200      	movs	r2, #0
 8011676:	60e0      	str	r0, [r4, #12]
 8011678:	2104      	movs	r1, #4
 801167a:	6860      	ldr	r0, [r4, #4]
 801167c:	f7ff ff82 	bl	8011584 <std>
 8011680:	68a0      	ldr	r0, [r4, #8]
 8011682:	2201      	movs	r2, #1
 8011684:	2109      	movs	r1, #9
 8011686:	f7ff ff7d 	bl	8011584 <std>
 801168a:	68e0      	ldr	r0, [r4, #12]
 801168c:	2202      	movs	r2, #2
 801168e:	2112      	movs	r1, #18
 8011690:	f7ff ff78 	bl	8011584 <std>
 8011694:	2301      	movs	r3, #1
 8011696:	61a3      	str	r3, [r4, #24]
 8011698:	e7d2      	b.n	8011640 <__sinit+0xc>
 801169a:	bf00      	nop
 801169c:	08014d5c 	.word	0x08014d5c
 80116a0:	080115cd 	.word	0x080115cd

080116a4 <__sfp>:
 80116a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116a6:	4607      	mov	r7, r0
 80116a8:	f7ff ffac 	bl	8011604 <__sfp_lock_acquire>
 80116ac:	4b1e      	ldr	r3, [pc, #120]	; (8011728 <__sfp+0x84>)
 80116ae:	681e      	ldr	r6, [r3, #0]
 80116b0:	69b3      	ldr	r3, [r6, #24]
 80116b2:	b913      	cbnz	r3, 80116ba <__sfp+0x16>
 80116b4:	4630      	mov	r0, r6
 80116b6:	f7ff ffbd 	bl	8011634 <__sinit>
 80116ba:	3648      	adds	r6, #72	; 0x48
 80116bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80116c0:	3b01      	subs	r3, #1
 80116c2:	d503      	bpl.n	80116cc <__sfp+0x28>
 80116c4:	6833      	ldr	r3, [r6, #0]
 80116c6:	b30b      	cbz	r3, 801170c <__sfp+0x68>
 80116c8:	6836      	ldr	r6, [r6, #0]
 80116ca:	e7f7      	b.n	80116bc <__sfp+0x18>
 80116cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80116d0:	b9d5      	cbnz	r5, 8011708 <__sfp+0x64>
 80116d2:	4b16      	ldr	r3, [pc, #88]	; (801172c <__sfp+0x88>)
 80116d4:	60e3      	str	r3, [r4, #12]
 80116d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80116da:	6665      	str	r5, [r4, #100]	; 0x64
 80116dc:	f000 fbba 	bl	8011e54 <__retarget_lock_init_recursive>
 80116e0:	f7ff ff96 	bl	8011610 <__sfp_lock_release>
 80116e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80116e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80116ec:	6025      	str	r5, [r4, #0]
 80116ee:	61a5      	str	r5, [r4, #24]
 80116f0:	2208      	movs	r2, #8
 80116f2:	4629      	mov	r1, r5
 80116f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80116f8:	f7fd f836 	bl	800e768 <memset>
 80116fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011704:	4620      	mov	r0, r4
 8011706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011708:	3468      	adds	r4, #104	; 0x68
 801170a:	e7d9      	b.n	80116c0 <__sfp+0x1c>
 801170c:	2104      	movs	r1, #4
 801170e:	4638      	mov	r0, r7
 8011710:	f7ff ff62 	bl	80115d8 <__sfmoreglue>
 8011714:	4604      	mov	r4, r0
 8011716:	6030      	str	r0, [r6, #0]
 8011718:	2800      	cmp	r0, #0
 801171a:	d1d5      	bne.n	80116c8 <__sfp+0x24>
 801171c:	f7ff ff78 	bl	8011610 <__sfp_lock_release>
 8011720:	230c      	movs	r3, #12
 8011722:	603b      	str	r3, [r7, #0]
 8011724:	e7ee      	b.n	8011704 <__sfp+0x60>
 8011726:	bf00      	nop
 8011728:	08014d5c 	.word	0x08014d5c
 801172c:	ffff0001 	.word	0xffff0001

08011730 <_fwalk_reent>:
 8011730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011734:	4606      	mov	r6, r0
 8011736:	4688      	mov	r8, r1
 8011738:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801173c:	2700      	movs	r7, #0
 801173e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011742:	f1b9 0901 	subs.w	r9, r9, #1
 8011746:	d505      	bpl.n	8011754 <_fwalk_reent+0x24>
 8011748:	6824      	ldr	r4, [r4, #0]
 801174a:	2c00      	cmp	r4, #0
 801174c:	d1f7      	bne.n	801173e <_fwalk_reent+0xe>
 801174e:	4638      	mov	r0, r7
 8011750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011754:	89ab      	ldrh	r3, [r5, #12]
 8011756:	2b01      	cmp	r3, #1
 8011758:	d907      	bls.n	801176a <_fwalk_reent+0x3a>
 801175a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801175e:	3301      	adds	r3, #1
 8011760:	d003      	beq.n	801176a <_fwalk_reent+0x3a>
 8011762:	4629      	mov	r1, r5
 8011764:	4630      	mov	r0, r6
 8011766:	47c0      	blx	r8
 8011768:	4307      	orrs	r7, r0
 801176a:	3568      	adds	r5, #104	; 0x68
 801176c:	e7e9      	b.n	8011742 <_fwalk_reent+0x12>

0801176e <rshift>:
 801176e:	6903      	ldr	r3, [r0, #16]
 8011770:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011778:	ea4f 1261 	mov.w	r2, r1, asr #5
 801177c:	f100 0414 	add.w	r4, r0, #20
 8011780:	dd45      	ble.n	801180e <rshift+0xa0>
 8011782:	f011 011f 	ands.w	r1, r1, #31
 8011786:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801178a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801178e:	d10c      	bne.n	80117aa <rshift+0x3c>
 8011790:	f100 0710 	add.w	r7, r0, #16
 8011794:	4629      	mov	r1, r5
 8011796:	42b1      	cmp	r1, r6
 8011798:	d334      	bcc.n	8011804 <rshift+0x96>
 801179a:	1a9b      	subs	r3, r3, r2
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	1eea      	subs	r2, r5, #3
 80117a0:	4296      	cmp	r6, r2
 80117a2:	bf38      	it	cc
 80117a4:	2300      	movcc	r3, #0
 80117a6:	4423      	add	r3, r4
 80117a8:	e015      	b.n	80117d6 <rshift+0x68>
 80117aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80117ae:	f1c1 0820 	rsb	r8, r1, #32
 80117b2:	40cf      	lsrs	r7, r1
 80117b4:	f105 0e04 	add.w	lr, r5, #4
 80117b8:	46a1      	mov	r9, r4
 80117ba:	4576      	cmp	r6, lr
 80117bc:	46f4      	mov	ip, lr
 80117be:	d815      	bhi.n	80117ec <rshift+0x7e>
 80117c0:	1a9b      	subs	r3, r3, r2
 80117c2:	009a      	lsls	r2, r3, #2
 80117c4:	3a04      	subs	r2, #4
 80117c6:	3501      	adds	r5, #1
 80117c8:	42ae      	cmp	r6, r5
 80117ca:	bf38      	it	cc
 80117cc:	2200      	movcc	r2, #0
 80117ce:	18a3      	adds	r3, r4, r2
 80117d0:	50a7      	str	r7, [r4, r2]
 80117d2:	b107      	cbz	r7, 80117d6 <rshift+0x68>
 80117d4:	3304      	adds	r3, #4
 80117d6:	1b1a      	subs	r2, r3, r4
 80117d8:	42a3      	cmp	r3, r4
 80117da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80117de:	bf08      	it	eq
 80117e0:	2300      	moveq	r3, #0
 80117e2:	6102      	str	r2, [r0, #16]
 80117e4:	bf08      	it	eq
 80117e6:	6143      	streq	r3, [r0, #20]
 80117e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80117ec:	f8dc c000 	ldr.w	ip, [ip]
 80117f0:	fa0c fc08 	lsl.w	ip, ip, r8
 80117f4:	ea4c 0707 	orr.w	r7, ip, r7
 80117f8:	f849 7b04 	str.w	r7, [r9], #4
 80117fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011800:	40cf      	lsrs	r7, r1
 8011802:	e7da      	b.n	80117ba <rshift+0x4c>
 8011804:	f851 cb04 	ldr.w	ip, [r1], #4
 8011808:	f847 cf04 	str.w	ip, [r7, #4]!
 801180c:	e7c3      	b.n	8011796 <rshift+0x28>
 801180e:	4623      	mov	r3, r4
 8011810:	e7e1      	b.n	80117d6 <rshift+0x68>

08011812 <__hexdig_fun>:
 8011812:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011816:	2b09      	cmp	r3, #9
 8011818:	d802      	bhi.n	8011820 <__hexdig_fun+0xe>
 801181a:	3820      	subs	r0, #32
 801181c:	b2c0      	uxtb	r0, r0
 801181e:	4770      	bx	lr
 8011820:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011824:	2b05      	cmp	r3, #5
 8011826:	d801      	bhi.n	801182c <__hexdig_fun+0x1a>
 8011828:	3847      	subs	r0, #71	; 0x47
 801182a:	e7f7      	b.n	801181c <__hexdig_fun+0xa>
 801182c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011830:	2b05      	cmp	r3, #5
 8011832:	d801      	bhi.n	8011838 <__hexdig_fun+0x26>
 8011834:	3827      	subs	r0, #39	; 0x27
 8011836:	e7f1      	b.n	801181c <__hexdig_fun+0xa>
 8011838:	2000      	movs	r0, #0
 801183a:	4770      	bx	lr

0801183c <__gethex>:
 801183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011840:	ed2d 8b02 	vpush	{d8}
 8011844:	b089      	sub	sp, #36	; 0x24
 8011846:	ee08 0a10 	vmov	s16, r0
 801184a:	9304      	str	r3, [sp, #16]
 801184c:	4bbc      	ldr	r3, [pc, #752]	; (8011b40 <__gethex+0x304>)
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	9301      	str	r3, [sp, #4]
 8011852:	4618      	mov	r0, r3
 8011854:	468b      	mov	fp, r1
 8011856:	4690      	mov	r8, r2
 8011858:	f7ee fcd4 	bl	8000204 <strlen>
 801185c:	9b01      	ldr	r3, [sp, #4]
 801185e:	f8db 2000 	ldr.w	r2, [fp]
 8011862:	4403      	add	r3, r0
 8011864:	4682      	mov	sl, r0
 8011866:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801186a:	9305      	str	r3, [sp, #20]
 801186c:	1c93      	adds	r3, r2, #2
 801186e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011872:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011876:	32fe      	adds	r2, #254	; 0xfe
 8011878:	18d1      	adds	r1, r2, r3
 801187a:	461f      	mov	r7, r3
 801187c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011880:	9100      	str	r1, [sp, #0]
 8011882:	2830      	cmp	r0, #48	; 0x30
 8011884:	d0f8      	beq.n	8011878 <__gethex+0x3c>
 8011886:	f7ff ffc4 	bl	8011812 <__hexdig_fun>
 801188a:	4604      	mov	r4, r0
 801188c:	2800      	cmp	r0, #0
 801188e:	d13a      	bne.n	8011906 <__gethex+0xca>
 8011890:	9901      	ldr	r1, [sp, #4]
 8011892:	4652      	mov	r2, sl
 8011894:	4638      	mov	r0, r7
 8011896:	f7fd ff4f 	bl	800f738 <strncmp>
 801189a:	4605      	mov	r5, r0
 801189c:	2800      	cmp	r0, #0
 801189e:	d168      	bne.n	8011972 <__gethex+0x136>
 80118a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80118a4:	eb07 060a 	add.w	r6, r7, sl
 80118a8:	f7ff ffb3 	bl	8011812 <__hexdig_fun>
 80118ac:	2800      	cmp	r0, #0
 80118ae:	d062      	beq.n	8011976 <__gethex+0x13a>
 80118b0:	4633      	mov	r3, r6
 80118b2:	7818      	ldrb	r0, [r3, #0]
 80118b4:	2830      	cmp	r0, #48	; 0x30
 80118b6:	461f      	mov	r7, r3
 80118b8:	f103 0301 	add.w	r3, r3, #1
 80118bc:	d0f9      	beq.n	80118b2 <__gethex+0x76>
 80118be:	f7ff ffa8 	bl	8011812 <__hexdig_fun>
 80118c2:	2301      	movs	r3, #1
 80118c4:	fab0 f480 	clz	r4, r0
 80118c8:	0964      	lsrs	r4, r4, #5
 80118ca:	4635      	mov	r5, r6
 80118cc:	9300      	str	r3, [sp, #0]
 80118ce:	463a      	mov	r2, r7
 80118d0:	4616      	mov	r6, r2
 80118d2:	3201      	adds	r2, #1
 80118d4:	7830      	ldrb	r0, [r6, #0]
 80118d6:	f7ff ff9c 	bl	8011812 <__hexdig_fun>
 80118da:	2800      	cmp	r0, #0
 80118dc:	d1f8      	bne.n	80118d0 <__gethex+0x94>
 80118de:	9901      	ldr	r1, [sp, #4]
 80118e0:	4652      	mov	r2, sl
 80118e2:	4630      	mov	r0, r6
 80118e4:	f7fd ff28 	bl	800f738 <strncmp>
 80118e8:	b980      	cbnz	r0, 801190c <__gethex+0xd0>
 80118ea:	b94d      	cbnz	r5, 8011900 <__gethex+0xc4>
 80118ec:	eb06 050a 	add.w	r5, r6, sl
 80118f0:	462a      	mov	r2, r5
 80118f2:	4616      	mov	r6, r2
 80118f4:	3201      	adds	r2, #1
 80118f6:	7830      	ldrb	r0, [r6, #0]
 80118f8:	f7ff ff8b 	bl	8011812 <__hexdig_fun>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d1f8      	bne.n	80118f2 <__gethex+0xb6>
 8011900:	1bad      	subs	r5, r5, r6
 8011902:	00ad      	lsls	r5, r5, #2
 8011904:	e004      	b.n	8011910 <__gethex+0xd4>
 8011906:	2400      	movs	r4, #0
 8011908:	4625      	mov	r5, r4
 801190a:	e7e0      	b.n	80118ce <__gethex+0x92>
 801190c:	2d00      	cmp	r5, #0
 801190e:	d1f7      	bne.n	8011900 <__gethex+0xc4>
 8011910:	7833      	ldrb	r3, [r6, #0]
 8011912:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011916:	2b50      	cmp	r3, #80	; 0x50
 8011918:	d13b      	bne.n	8011992 <__gethex+0x156>
 801191a:	7873      	ldrb	r3, [r6, #1]
 801191c:	2b2b      	cmp	r3, #43	; 0x2b
 801191e:	d02c      	beq.n	801197a <__gethex+0x13e>
 8011920:	2b2d      	cmp	r3, #45	; 0x2d
 8011922:	d02e      	beq.n	8011982 <__gethex+0x146>
 8011924:	1c71      	adds	r1, r6, #1
 8011926:	f04f 0900 	mov.w	r9, #0
 801192a:	7808      	ldrb	r0, [r1, #0]
 801192c:	f7ff ff71 	bl	8011812 <__hexdig_fun>
 8011930:	1e43      	subs	r3, r0, #1
 8011932:	b2db      	uxtb	r3, r3
 8011934:	2b18      	cmp	r3, #24
 8011936:	d82c      	bhi.n	8011992 <__gethex+0x156>
 8011938:	f1a0 0210 	sub.w	r2, r0, #16
 801193c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011940:	f7ff ff67 	bl	8011812 <__hexdig_fun>
 8011944:	1e43      	subs	r3, r0, #1
 8011946:	b2db      	uxtb	r3, r3
 8011948:	2b18      	cmp	r3, #24
 801194a:	d91d      	bls.n	8011988 <__gethex+0x14c>
 801194c:	f1b9 0f00 	cmp.w	r9, #0
 8011950:	d000      	beq.n	8011954 <__gethex+0x118>
 8011952:	4252      	negs	r2, r2
 8011954:	4415      	add	r5, r2
 8011956:	f8cb 1000 	str.w	r1, [fp]
 801195a:	b1e4      	cbz	r4, 8011996 <__gethex+0x15a>
 801195c:	9b00      	ldr	r3, [sp, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	bf14      	ite	ne
 8011962:	2700      	movne	r7, #0
 8011964:	2706      	moveq	r7, #6
 8011966:	4638      	mov	r0, r7
 8011968:	b009      	add	sp, #36	; 0x24
 801196a:	ecbd 8b02 	vpop	{d8}
 801196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011972:	463e      	mov	r6, r7
 8011974:	4625      	mov	r5, r4
 8011976:	2401      	movs	r4, #1
 8011978:	e7ca      	b.n	8011910 <__gethex+0xd4>
 801197a:	f04f 0900 	mov.w	r9, #0
 801197e:	1cb1      	adds	r1, r6, #2
 8011980:	e7d3      	b.n	801192a <__gethex+0xee>
 8011982:	f04f 0901 	mov.w	r9, #1
 8011986:	e7fa      	b.n	801197e <__gethex+0x142>
 8011988:	230a      	movs	r3, #10
 801198a:	fb03 0202 	mla	r2, r3, r2, r0
 801198e:	3a10      	subs	r2, #16
 8011990:	e7d4      	b.n	801193c <__gethex+0x100>
 8011992:	4631      	mov	r1, r6
 8011994:	e7df      	b.n	8011956 <__gethex+0x11a>
 8011996:	1bf3      	subs	r3, r6, r7
 8011998:	3b01      	subs	r3, #1
 801199a:	4621      	mov	r1, r4
 801199c:	2b07      	cmp	r3, #7
 801199e:	dc0b      	bgt.n	80119b8 <__gethex+0x17c>
 80119a0:	ee18 0a10 	vmov	r0, s16
 80119a4:	f000 faee 	bl	8011f84 <_Balloc>
 80119a8:	4604      	mov	r4, r0
 80119aa:	b940      	cbnz	r0, 80119be <__gethex+0x182>
 80119ac:	4b65      	ldr	r3, [pc, #404]	; (8011b44 <__gethex+0x308>)
 80119ae:	4602      	mov	r2, r0
 80119b0:	21de      	movs	r1, #222	; 0xde
 80119b2:	4865      	ldr	r0, [pc, #404]	; (8011b48 <__gethex+0x30c>)
 80119b4:	f001 fea0 	bl	80136f8 <__assert_func>
 80119b8:	3101      	adds	r1, #1
 80119ba:	105b      	asrs	r3, r3, #1
 80119bc:	e7ee      	b.n	801199c <__gethex+0x160>
 80119be:	f100 0914 	add.w	r9, r0, #20
 80119c2:	f04f 0b00 	mov.w	fp, #0
 80119c6:	f1ca 0301 	rsb	r3, sl, #1
 80119ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80119ce:	f8cd b000 	str.w	fp, [sp]
 80119d2:	9306      	str	r3, [sp, #24]
 80119d4:	42b7      	cmp	r7, r6
 80119d6:	d340      	bcc.n	8011a5a <__gethex+0x21e>
 80119d8:	9802      	ldr	r0, [sp, #8]
 80119da:	9b00      	ldr	r3, [sp, #0]
 80119dc:	f840 3b04 	str.w	r3, [r0], #4
 80119e0:	eba0 0009 	sub.w	r0, r0, r9
 80119e4:	1080      	asrs	r0, r0, #2
 80119e6:	0146      	lsls	r6, r0, #5
 80119e8:	6120      	str	r0, [r4, #16]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f000 fbc0 	bl	8012170 <__hi0bits>
 80119f0:	1a30      	subs	r0, r6, r0
 80119f2:	f8d8 6000 	ldr.w	r6, [r8]
 80119f6:	42b0      	cmp	r0, r6
 80119f8:	dd63      	ble.n	8011ac2 <__gethex+0x286>
 80119fa:	1b87      	subs	r7, r0, r6
 80119fc:	4639      	mov	r1, r7
 80119fe:	4620      	mov	r0, r4
 8011a00:	f000 ff5a 	bl	80128b8 <__any_on>
 8011a04:	4682      	mov	sl, r0
 8011a06:	b1a8      	cbz	r0, 8011a34 <__gethex+0x1f8>
 8011a08:	1e7b      	subs	r3, r7, #1
 8011a0a:	1159      	asrs	r1, r3, #5
 8011a0c:	f003 021f 	and.w	r2, r3, #31
 8011a10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011a14:	f04f 0a01 	mov.w	sl, #1
 8011a18:	fa0a f202 	lsl.w	r2, sl, r2
 8011a1c:	420a      	tst	r2, r1
 8011a1e:	d009      	beq.n	8011a34 <__gethex+0x1f8>
 8011a20:	4553      	cmp	r3, sl
 8011a22:	dd05      	ble.n	8011a30 <__gethex+0x1f4>
 8011a24:	1eb9      	subs	r1, r7, #2
 8011a26:	4620      	mov	r0, r4
 8011a28:	f000 ff46 	bl	80128b8 <__any_on>
 8011a2c:	2800      	cmp	r0, #0
 8011a2e:	d145      	bne.n	8011abc <__gethex+0x280>
 8011a30:	f04f 0a02 	mov.w	sl, #2
 8011a34:	4639      	mov	r1, r7
 8011a36:	4620      	mov	r0, r4
 8011a38:	f7ff fe99 	bl	801176e <rshift>
 8011a3c:	443d      	add	r5, r7
 8011a3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011a42:	42ab      	cmp	r3, r5
 8011a44:	da4c      	bge.n	8011ae0 <__gethex+0x2a4>
 8011a46:	ee18 0a10 	vmov	r0, s16
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	f000 fada 	bl	8012004 <_Bfree>
 8011a50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011a52:	2300      	movs	r3, #0
 8011a54:	6013      	str	r3, [r2, #0]
 8011a56:	27a3      	movs	r7, #163	; 0xa3
 8011a58:	e785      	b.n	8011966 <__gethex+0x12a>
 8011a5a:	1e73      	subs	r3, r6, #1
 8011a5c:	9a05      	ldr	r2, [sp, #20]
 8011a5e:	9303      	str	r3, [sp, #12]
 8011a60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011a64:	4293      	cmp	r3, r2
 8011a66:	d019      	beq.n	8011a9c <__gethex+0x260>
 8011a68:	f1bb 0f20 	cmp.w	fp, #32
 8011a6c:	d107      	bne.n	8011a7e <__gethex+0x242>
 8011a6e:	9b02      	ldr	r3, [sp, #8]
 8011a70:	9a00      	ldr	r2, [sp, #0]
 8011a72:	f843 2b04 	str.w	r2, [r3], #4
 8011a76:	9302      	str	r3, [sp, #8]
 8011a78:	2300      	movs	r3, #0
 8011a7a:	9300      	str	r3, [sp, #0]
 8011a7c:	469b      	mov	fp, r3
 8011a7e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011a82:	f7ff fec6 	bl	8011812 <__hexdig_fun>
 8011a86:	9b00      	ldr	r3, [sp, #0]
 8011a88:	f000 000f 	and.w	r0, r0, #15
 8011a8c:	fa00 f00b 	lsl.w	r0, r0, fp
 8011a90:	4303      	orrs	r3, r0
 8011a92:	9300      	str	r3, [sp, #0]
 8011a94:	f10b 0b04 	add.w	fp, fp, #4
 8011a98:	9b03      	ldr	r3, [sp, #12]
 8011a9a:	e00d      	b.n	8011ab8 <__gethex+0x27c>
 8011a9c:	9b03      	ldr	r3, [sp, #12]
 8011a9e:	9a06      	ldr	r2, [sp, #24]
 8011aa0:	4413      	add	r3, r2
 8011aa2:	42bb      	cmp	r3, r7
 8011aa4:	d3e0      	bcc.n	8011a68 <__gethex+0x22c>
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	9901      	ldr	r1, [sp, #4]
 8011aaa:	9307      	str	r3, [sp, #28]
 8011aac:	4652      	mov	r2, sl
 8011aae:	f7fd fe43 	bl	800f738 <strncmp>
 8011ab2:	9b07      	ldr	r3, [sp, #28]
 8011ab4:	2800      	cmp	r0, #0
 8011ab6:	d1d7      	bne.n	8011a68 <__gethex+0x22c>
 8011ab8:	461e      	mov	r6, r3
 8011aba:	e78b      	b.n	80119d4 <__gethex+0x198>
 8011abc:	f04f 0a03 	mov.w	sl, #3
 8011ac0:	e7b8      	b.n	8011a34 <__gethex+0x1f8>
 8011ac2:	da0a      	bge.n	8011ada <__gethex+0x29e>
 8011ac4:	1a37      	subs	r7, r6, r0
 8011ac6:	4621      	mov	r1, r4
 8011ac8:	ee18 0a10 	vmov	r0, s16
 8011acc:	463a      	mov	r2, r7
 8011ace:	f000 fcb5 	bl	801243c <__lshift>
 8011ad2:	1bed      	subs	r5, r5, r7
 8011ad4:	4604      	mov	r4, r0
 8011ad6:	f100 0914 	add.w	r9, r0, #20
 8011ada:	f04f 0a00 	mov.w	sl, #0
 8011ade:	e7ae      	b.n	8011a3e <__gethex+0x202>
 8011ae0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011ae4:	42a8      	cmp	r0, r5
 8011ae6:	dd72      	ble.n	8011bce <__gethex+0x392>
 8011ae8:	1b45      	subs	r5, r0, r5
 8011aea:	42ae      	cmp	r6, r5
 8011aec:	dc36      	bgt.n	8011b5c <__gethex+0x320>
 8011aee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011af2:	2b02      	cmp	r3, #2
 8011af4:	d02a      	beq.n	8011b4c <__gethex+0x310>
 8011af6:	2b03      	cmp	r3, #3
 8011af8:	d02c      	beq.n	8011b54 <__gethex+0x318>
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d115      	bne.n	8011b2a <__gethex+0x2ee>
 8011afe:	42ae      	cmp	r6, r5
 8011b00:	d113      	bne.n	8011b2a <__gethex+0x2ee>
 8011b02:	2e01      	cmp	r6, #1
 8011b04:	d10b      	bne.n	8011b1e <__gethex+0x2e2>
 8011b06:	9a04      	ldr	r2, [sp, #16]
 8011b08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011b0c:	6013      	str	r3, [r2, #0]
 8011b0e:	2301      	movs	r3, #1
 8011b10:	6123      	str	r3, [r4, #16]
 8011b12:	f8c9 3000 	str.w	r3, [r9]
 8011b16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011b18:	2762      	movs	r7, #98	; 0x62
 8011b1a:	601c      	str	r4, [r3, #0]
 8011b1c:	e723      	b.n	8011966 <__gethex+0x12a>
 8011b1e:	1e71      	subs	r1, r6, #1
 8011b20:	4620      	mov	r0, r4
 8011b22:	f000 fec9 	bl	80128b8 <__any_on>
 8011b26:	2800      	cmp	r0, #0
 8011b28:	d1ed      	bne.n	8011b06 <__gethex+0x2ca>
 8011b2a:	ee18 0a10 	vmov	r0, s16
 8011b2e:	4621      	mov	r1, r4
 8011b30:	f000 fa68 	bl	8012004 <_Bfree>
 8011b34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011b36:	2300      	movs	r3, #0
 8011b38:	6013      	str	r3, [r2, #0]
 8011b3a:	2750      	movs	r7, #80	; 0x50
 8011b3c:	e713      	b.n	8011966 <__gethex+0x12a>
 8011b3e:	bf00      	nop
 8011b40:	08014f48 	.word	0x08014f48
 8011b44:	08014e6b 	.word	0x08014e6b
 8011b48:	08014edc 	.word	0x08014edc
 8011b4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d1eb      	bne.n	8011b2a <__gethex+0x2ee>
 8011b52:	e7d8      	b.n	8011b06 <__gethex+0x2ca>
 8011b54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d1d5      	bne.n	8011b06 <__gethex+0x2ca>
 8011b5a:	e7e6      	b.n	8011b2a <__gethex+0x2ee>
 8011b5c:	1e6f      	subs	r7, r5, #1
 8011b5e:	f1ba 0f00 	cmp.w	sl, #0
 8011b62:	d131      	bne.n	8011bc8 <__gethex+0x38c>
 8011b64:	b127      	cbz	r7, 8011b70 <__gethex+0x334>
 8011b66:	4639      	mov	r1, r7
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f000 fea5 	bl	80128b8 <__any_on>
 8011b6e:	4682      	mov	sl, r0
 8011b70:	117b      	asrs	r3, r7, #5
 8011b72:	2101      	movs	r1, #1
 8011b74:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011b78:	f007 071f 	and.w	r7, r7, #31
 8011b7c:	fa01 f707 	lsl.w	r7, r1, r7
 8011b80:	421f      	tst	r7, r3
 8011b82:	4629      	mov	r1, r5
 8011b84:	4620      	mov	r0, r4
 8011b86:	bf18      	it	ne
 8011b88:	f04a 0a02 	orrne.w	sl, sl, #2
 8011b8c:	1b76      	subs	r6, r6, r5
 8011b8e:	f7ff fdee 	bl	801176e <rshift>
 8011b92:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011b96:	2702      	movs	r7, #2
 8011b98:	f1ba 0f00 	cmp.w	sl, #0
 8011b9c:	d048      	beq.n	8011c30 <__gethex+0x3f4>
 8011b9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ba2:	2b02      	cmp	r3, #2
 8011ba4:	d015      	beq.n	8011bd2 <__gethex+0x396>
 8011ba6:	2b03      	cmp	r3, #3
 8011ba8:	d017      	beq.n	8011bda <__gethex+0x39e>
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d109      	bne.n	8011bc2 <__gethex+0x386>
 8011bae:	f01a 0f02 	tst.w	sl, #2
 8011bb2:	d006      	beq.n	8011bc2 <__gethex+0x386>
 8011bb4:	f8d9 0000 	ldr.w	r0, [r9]
 8011bb8:	ea4a 0a00 	orr.w	sl, sl, r0
 8011bbc:	f01a 0f01 	tst.w	sl, #1
 8011bc0:	d10e      	bne.n	8011be0 <__gethex+0x3a4>
 8011bc2:	f047 0710 	orr.w	r7, r7, #16
 8011bc6:	e033      	b.n	8011c30 <__gethex+0x3f4>
 8011bc8:	f04f 0a01 	mov.w	sl, #1
 8011bcc:	e7d0      	b.n	8011b70 <__gethex+0x334>
 8011bce:	2701      	movs	r7, #1
 8011bd0:	e7e2      	b.n	8011b98 <__gethex+0x35c>
 8011bd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bd4:	f1c3 0301 	rsb	r3, r3, #1
 8011bd8:	9315      	str	r3, [sp, #84]	; 0x54
 8011bda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d0f0      	beq.n	8011bc2 <__gethex+0x386>
 8011be0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011be4:	f104 0314 	add.w	r3, r4, #20
 8011be8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011bec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011bf0:	f04f 0c00 	mov.w	ip, #0
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bfa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011bfe:	d01c      	beq.n	8011c3a <__gethex+0x3fe>
 8011c00:	3201      	adds	r2, #1
 8011c02:	6002      	str	r2, [r0, #0]
 8011c04:	2f02      	cmp	r7, #2
 8011c06:	f104 0314 	add.w	r3, r4, #20
 8011c0a:	d13f      	bne.n	8011c8c <__gethex+0x450>
 8011c0c:	f8d8 2000 	ldr.w	r2, [r8]
 8011c10:	3a01      	subs	r2, #1
 8011c12:	42b2      	cmp	r2, r6
 8011c14:	d10a      	bne.n	8011c2c <__gethex+0x3f0>
 8011c16:	1171      	asrs	r1, r6, #5
 8011c18:	2201      	movs	r2, #1
 8011c1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011c1e:	f006 061f 	and.w	r6, r6, #31
 8011c22:	fa02 f606 	lsl.w	r6, r2, r6
 8011c26:	421e      	tst	r6, r3
 8011c28:	bf18      	it	ne
 8011c2a:	4617      	movne	r7, r2
 8011c2c:	f047 0720 	orr.w	r7, r7, #32
 8011c30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c32:	601c      	str	r4, [r3, #0]
 8011c34:	9b04      	ldr	r3, [sp, #16]
 8011c36:	601d      	str	r5, [r3, #0]
 8011c38:	e695      	b.n	8011966 <__gethex+0x12a>
 8011c3a:	4299      	cmp	r1, r3
 8011c3c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011c40:	d8d8      	bhi.n	8011bf4 <__gethex+0x3b8>
 8011c42:	68a3      	ldr	r3, [r4, #8]
 8011c44:	459b      	cmp	fp, r3
 8011c46:	db19      	blt.n	8011c7c <__gethex+0x440>
 8011c48:	6861      	ldr	r1, [r4, #4]
 8011c4a:	ee18 0a10 	vmov	r0, s16
 8011c4e:	3101      	adds	r1, #1
 8011c50:	f000 f998 	bl	8011f84 <_Balloc>
 8011c54:	4681      	mov	r9, r0
 8011c56:	b918      	cbnz	r0, 8011c60 <__gethex+0x424>
 8011c58:	4b1a      	ldr	r3, [pc, #104]	; (8011cc4 <__gethex+0x488>)
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	2184      	movs	r1, #132	; 0x84
 8011c5e:	e6a8      	b.n	80119b2 <__gethex+0x176>
 8011c60:	6922      	ldr	r2, [r4, #16]
 8011c62:	3202      	adds	r2, #2
 8011c64:	f104 010c 	add.w	r1, r4, #12
 8011c68:	0092      	lsls	r2, r2, #2
 8011c6a:	300c      	adds	r0, #12
 8011c6c:	f7fc fd6e 	bl	800e74c <memcpy>
 8011c70:	4621      	mov	r1, r4
 8011c72:	ee18 0a10 	vmov	r0, s16
 8011c76:	f000 f9c5 	bl	8012004 <_Bfree>
 8011c7a:	464c      	mov	r4, r9
 8011c7c:	6923      	ldr	r3, [r4, #16]
 8011c7e:	1c5a      	adds	r2, r3, #1
 8011c80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011c84:	6122      	str	r2, [r4, #16]
 8011c86:	2201      	movs	r2, #1
 8011c88:	615a      	str	r2, [r3, #20]
 8011c8a:	e7bb      	b.n	8011c04 <__gethex+0x3c8>
 8011c8c:	6922      	ldr	r2, [r4, #16]
 8011c8e:	455a      	cmp	r2, fp
 8011c90:	dd0b      	ble.n	8011caa <__gethex+0x46e>
 8011c92:	2101      	movs	r1, #1
 8011c94:	4620      	mov	r0, r4
 8011c96:	f7ff fd6a 	bl	801176e <rshift>
 8011c9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011c9e:	3501      	adds	r5, #1
 8011ca0:	42ab      	cmp	r3, r5
 8011ca2:	f6ff aed0 	blt.w	8011a46 <__gethex+0x20a>
 8011ca6:	2701      	movs	r7, #1
 8011ca8:	e7c0      	b.n	8011c2c <__gethex+0x3f0>
 8011caa:	f016 061f 	ands.w	r6, r6, #31
 8011cae:	d0fa      	beq.n	8011ca6 <__gethex+0x46a>
 8011cb0:	449a      	add	sl, r3
 8011cb2:	f1c6 0620 	rsb	r6, r6, #32
 8011cb6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011cba:	f000 fa59 	bl	8012170 <__hi0bits>
 8011cbe:	42b0      	cmp	r0, r6
 8011cc0:	dbe7      	blt.n	8011c92 <__gethex+0x456>
 8011cc2:	e7f0      	b.n	8011ca6 <__gethex+0x46a>
 8011cc4:	08014e6b 	.word	0x08014e6b

08011cc8 <L_shift>:
 8011cc8:	f1c2 0208 	rsb	r2, r2, #8
 8011ccc:	0092      	lsls	r2, r2, #2
 8011cce:	b570      	push	{r4, r5, r6, lr}
 8011cd0:	f1c2 0620 	rsb	r6, r2, #32
 8011cd4:	6843      	ldr	r3, [r0, #4]
 8011cd6:	6804      	ldr	r4, [r0, #0]
 8011cd8:	fa03 f506 	lsl.w	r5, r3, r6
 8011cdc:	432c      	orrs	r4, r5
 8011cde:	40d3      	lsrs	r3, r2
 8011ce0:	6004      	str	r4, [r0, #0]
 8011ce2:	f840 3f04 	str.w	r3, [r0, #4]!
 8011ce6:	4288      	cmp	r0, r1
 8011ce8:	d3f4      	bcc.n	8011cd4 <L_shift+0xc>
 8011cea:	bd70      	pop	{r4, r5, r6, pc}

08011cec <__match>:
 8011cec:	b530      	push	{r4, r5, lr}
 8011cee:	6803      	ldr	r3, [r0, #0]
 8011cf0:	3301      	adds	r3, #1
 8011cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cf6:	b914      	cbnz	r4, 8011cfe <__match+0x12>
 8011cf8:	6003      	str	r3, [r0, #0]
 8011cfa:	2001      	movs	r0, #1
 8011cfc:	bd30      	pop	{r4, r5, pc}
 8011cfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d02:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011d06:	2d19      	cmp	r5, #25
 8011d08:	bf98      	it	ls
 8011d0a:	3220      	addls	r2, #32
 8011d0c:	42a2      	cmp	r2, r4
 8011d0e:	d0f0      	beq.n	8011cf2 <__match+0x6>
 8011d10:	2000      	movs	r0, #0
 8011d12:	e7f3      	b.n	8011cfc <__match+0x10>

08011d14 <__hexnan>:
 8011d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d18:	680b      	ldr	r3, [r1, #0]
 8011d1a:	6801      	ldr	r1, [r0, #0]
 8011d1c:	115e      	asrs	r6, r3, #5
 8011d1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011d22:	f013 031f 	ands.w	r3, r3, #31
 8011d26:	b087      	sub	sp, #28
 8011d28:	bf18      	it	ne
 8011d2a:	3604      	addne	r6, #4
 8011d2c:	2500      	movs	r5, #0
 8011d2e:	1f37      	subs	r7, r6, #4
 8011d30:	4682      	mov	sl, r0
 8011d32:	4690      	mov	r8, r2
 8011d34:	9301      	str	r3, [sp, #4]
 8011d36:	f846 5c04 	str.w	r5, [r6, #-4]
 8011d3a:	46b9      	mov	r9, r7
 8011d3c:	463c      	mov	r4, r7
 8011d3e:	9502      	str	r5, [sp, #8]
 8011d40:	46ab      	mov	fp, r5
 8011d42:	784a      	ldrb	r2, [r1, #1]
 8011d44:	1c4b      	adds	r3, r1, #1
 8011d46:	9303      	str	r3, [sp, #12]
 8011d48:	b342      	cbz	r2, 8011d9c <__hexnan+0x88>
 8011d4a:	4610      	mov	r0, r2
 8011d4c:	9105      	str	r1, [sp, #20]
 8011d4e:	9204      	str	r2, [sp, #16]
 8011d50:	f7ff fd5f 	bl	8011812 <__hexdig_fun>
 8011d54:	2800      	cmp	r0, #0
 8011d56:	d14f      	bne.n	8011df8 <__hexnan+0xe4>
 8011d58:	9a04      	ldr	r2, [sp, #16]
 8011d5a:	9905      	ldr	r1, [sp, #20]
 8011d5c:	2a20      	cmp	r2, #32
 8011d5e:	d818      	bhi.n	8011d92 <__hexnan+0x7e>
 8011d60:	9b02      	ldr	r3, [sp, #8]
 8011d62:	459b      	cmp	fp, r3
 8011d64:	dd13      	ble.n	8011d8e <__hexnan+0x7a>
 8011d66:	454c      	cmp	r4, r9
 8011d68:	d206      	bcs.n	8011d78 <__hexnan+0x64>
 8011d6a:	2d07      	cmp	r5, #7
 8011d6c:	dc04      	bgt.n	8011d78 <__hexnan+0x64>
 8011d6e:	462a      	mov	r2, r5
 8011d70:	4649      	mov	r1, r9
 8011d72:	4620      	mov	r0, r4
 8011d74:	f7ff ffa8 	bl	8011cc8 <L_shift>
 8011d78:	4544      	cmp	r4, r8
 8011d7a:	d950      	bls.n	8011e1e <__hexnan+0x10a>
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	f1a4 0904 	sub.w	r9, r4, #4
 8011d82:	f844 3c04 	str.w	r3, [r4, #-4]
 8011d86:	f8cd b008 	str.w	fp, [sp, #8]
 8011d8a:	464c      	mov	r4, r9
 8011d8c:	461d      	mov	r5, r3
 8011d8e:	9903      	ldr	r1, [sp, #12]
 8011d90:	e7d7      	b.n	8011d42 <__hexnan+0x2e>
 8011d92:	2a29      	cmp	r2, #41	; 0x29
 8011d94:	d156      	bne.n	8011e44 <__hexnan+0x130>
 8011d96:	3102      	adds	r1, #2
 8011d98:	f8ca 1000 	str.w	r1, [sl]
 8011d9c:	f1bb 0f00 	cmp.w	fp, #0
 8011da0:	d050      	beq.n	8011e44 <__hexnan+0x130>
 8011da2:	454c      	cmp	r4, r9
 8011da4:	d206      	bcs.n	8011db4 <__hexnan+0xa0>
 8011da6:	2d07      	cmp	r5, #7
 8011da8:	dc04      	bgt.n	8011db4 <__hexnan+0xa0>
 8011daa:	462a      	mov	r2, r5
 8011dac:	4649      	mov	r1, r9
 8011dae:	4620      	mov	r0, r4
 8011db0:	f7ff ff8a 	bl	8011cc8 <L_shift>
 8011db4:	4544      	cmp	r4, r8
 8011db6:	d934      	bls.n	8011e22 <__hexnan+0x10e>
 8011db8:	f1a8 0204 	sub.w	r2, r8, #4
 8011dbc:	4623      	mov	r3, r4
 8011dbe:	f853 1b04 	ldr.w	r1, [r3], #4
 8011dc2:	f842 1f04 	str.w	r1, [r2, #4]!
 8011dc6:	429f      	cmp	r7, r3
 8011dc8:	d2f9      	bcs.n	8011dbe <__hexnan+0xaa>
 8011dca:	1b3b      	subs	r3, r7, r4
 8011dcc:	f023 0303 	bic.w	r3, r3, #3
 8011dd0:	3304      	adds	r3, #4
 8011dd2:	3401      	adds	r4, #1
 8011dd4:	3e03      	subs	r6, #3
 8011dd6:	42b4      	cmp	r4, r6
 8011dd8:	bf88      	it	hi
 8011dda:	2304      	movhi	r3, #4
 8011ddc:	4443      	add	r3, r8
 8011dde:	2200      	movs	r2, #0
 8011de0:	f843 2b04 	str.w	r2, [r3], #4
 8011de4:	429f      	cmp	r7, r3
 8011de6:	d2fb      	bcs.n	8011de0 <__hexnan+0xcc>
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	b91b      	cbnz	r3, 8011df4 <__hexnan+0xe0>
 8011dec:	4547      	cmp	r7, r8
 8011dee:	d127      	bne.n	8011e40 <__hexnan+0x12c>
 8011df0:	2301      	movs	r3, #1
 8011df2:	603b      	str	r3, [r7, #0]
 8011df4:	2005      	movs	r0, #5
 8011df6:	e026      	b.n	8011e46 <__hexnan+0x132>
 8011df8:	3501      	adds	r5, #1
 8011dfa:	2d08      	cmp	r5, #8
 8011dfc:	f10b 0b01 	add.w	fp, fp, #1
 8011e00:	dd06      	ble.n	8011e10 <__hexnan+0xfc>
 8011e02:	4544      	cmp	r4, r8
 8011e04:	d9c3      	bls.n	8011d8e <__hexnan+0x7a>
 8011e06:	2300      	movs	r3, #0
 8011e08:	f844 3c04 	str.w	r3, [r4, #-4]
 8011e0c:	2501      	movs	r5, #1
 8011e0e:	3c04      	subs	r4, #4
 8011e10:	6822      	ldr	r2, [r4, #0]
 8011e12:	f000 000f 	and.w	r0, r0, #15
 8011e16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011e1a:	6022      	str	r2, [r4, #0]
 8011e1c:	e7b7      	b.n	8011d8e <__hexnan+0x7a>
 8011e1e:	2508      	movs	r5, #8
 8011e20:	e7b5      	b.n	8011d8e <__hexnan+0x7a>
 8011e22:	9b01      	ldr	r3, [sp, #4]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d0df      	beq.n	8011de8 <__hexnan+0xd4>
 8011e28:	f04f 32ff 	mov.w	r2, #4294967295
 8011e2c:	f1c3 0320 	rsb	r3, r3, #32
 8011e30:	fa22 f303 	lsr.w	r3, r2, r3
 8011e34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011e38:	401a      	ands	r2, r3
 8011e3a:	f846 2c04 	str.w	r2, [r6, #-4]
 8011e3e:	e7d3      	b.n	8011de8 <__hexnan+0xd4>
 8011e40:	3f04      	subs	r7, #4
 8011e42:	e7d1      	b.n	8011de8 <__hexnan+0xd4>
 8011e44:	2004      	movs	r0, #4
 8011e46:	b007      	add	sp, #28
 8011e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011e4c <_localeconv_r>:
 8011e4c:	4800      	ldr	r0, [pc, #0]	; (8011e50 <_localeconv_r+0x4>)
 8011e4e:	4770      	bx	lr
 8011e50:	20000180 	.word	0x20000180

08011e54 <__retarget_lock_init_recursive>:
 8011e54:	4770      	bx	lr

08011e56 <__retarget_lock_acquire_recursive>:
 8011e56:	4770      	bx	lr

08011e58 <__retarget_lock_release_recursive>:
 8011e58:	4770      	bx	lr
	...

08011e5c <_lseek_r>:
 8011e5c:	b538      	push	{r3, r4, r5, lr}
 8011e5e:	4d07      	ldr	r5, [pc, #28]	; (8011e7c <_lseek_r+0x20>)
 8011e60:	4604      	mov	r4, r0
 8011e62:	4608      	mov	r0, r1
 8011e64:	4611      	mov	r1, r2
 8011e66:	2200      	movs	r2, #0
 8011e68:	602a      	str	r2, [r5, #0]
 8011e6a:	461a      	mov	r2, r3
 8011e6c:	f7f2 fc28 	bl	80046c0 <_lseek>
 8011e70:	1c43      	adds	r3, r0, #1
 8011e72:	d102      	bne.n	8011e7a <_lseek_r+0x1e>
 8011e74:	682b      	ldr	r3, [r5, #0]
 8011e76:	b103      	cbz	r3, 8011e7a <_lseek_r+0x1e>
 8011e78:	6023      	str	r3, [r4, #0]
 8011e7a:	bd38      	pop	{r3, r4, r5, pc}
 8011e7c:	20001a44 	.word	0x20001a44

08011e80 <__swhatbuf_r>:
 8011e80:	b570      	push	{r4, r5, r6, lr}
 8011e82:	460e      	mov	r6, r1
 8011e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e88:	2900      	cmp	r1, #0
 8011e8a:	b096      	sub	sp, #88	; 0x58
 8011e8c:	4614      	mov	r4, r2
 8011e8e:	461d      	mov	r5, r3
 8011e90:	da07      	bge.n	8011ea2 <__swhatbuf_r+0x22>
 8011e92:	2300      	movs	r3, #0
 8011e94:	602b      	str	r3, [r5, #0]
 8011e96:	89b3      	ldrh	r3, [r6, #12]
 8011e98:	061a      	lsls	r2, r3, #24
 8011e9a:	d410      	bmi.n	8011ebe <__swhatbuf_r+0x3e>
 8011e9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ea0:	e00e      	b.n	8011ec0 <__swhatbuf_r+0x40>
 8011ea2:	466a      	mov	r2, sp
 8011ea4:	f001 fc58 	bl	8013758 <_fstat_r>
 8011ea8:	2800      	cmp	r0, #0
 8011eaa:	dbf2      	blt.n	8011e92 <__swhatbuf_r+0x12>
 8011eac:	9a01      	ldr	r2, [sp, #4]
 8011eae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011eb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011eb6:	425a      	negs	r2, r3
 8011eb8:	415a      	adcs	r2, r3
 8011eba:	602a      	str	r2, [r5, #0]
 8011ebc:	e7ee      	b.n	8011e9c <__swhatbuf_r+0x1c>
 8011ebe:	2340      	movs	r3, #64	; 0x40
 8011ec0:	2000      	movs	r0, #0
 8011ec2:	6023      	str	r3, [r4, #0]
 8011ec4:	b016      	add	sp, #88	; 0x58
 8011ec6:	bd70      	pop	{r4, r5, r6, pc}

08011ec8 <__smakebuf_r>:
 8011ec8:	898b      	ldrh	r3, [r1, #12]
 8011eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011ecc:	079d      	lsls	r5, r3, #30
 8011ece:	4606      	mov	r6, r0
 8011ed0:	460c      	mov	r4, r1
 8011ed2:	d507      	bpl.n	8011ee4 <__smakebuf_r+0x1c>
 8011ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011ed8:	6023      	str	r3, [r4, #0]
 8011eda:	6123      	str	r3, [r4, #16]
 8011edc:	2301      	movs	r3, #1
 8011ede:	6163      	str	r3, [r4, #20]
 8011ee0:	b002      	add	sp, #8
 8011ee2:	bd70      	pop	{r4, r5, r6, pc}
 8011ee4:	ab01      	add	r3, sp, #4
 8011ee6:	466a      	mov	r2, sp
 8011ee8:	f7ff ffca 	bl	8011e80 <__swhatbuf_r>
 8011eec:	9900      	ldr	r1, [sp, #0]
 8011eee:	4605      	mov	r5, r0
 8011ef0:	4630      	mov	r0, r6
 8011ef2:	f7fc fc91 	bl	800e818 <_malloc_r>
 8011ef6:	b948      	cbnz	r0, 8011f0c <__smakebuf_r+0x44>
 8011ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011efc:	059a      	lsls	r2, r3, #22
 8011efe:	d4ef      	bmi.n	8011ee0 <__smakebuf_r+0x18>
 8011f00:	f023 0303 	bic.w	r3, r3, #3
 8011f04:	f043 0302 	orr.w	r3, r3, #2
 8011f08:	81a3      	strh	r3, [r4, #12]
 8011f0a:	e7e3      	b.n	8011ed4 <__smakebuf_r+0xc>
 8011f0c:	4b0d      	ldr	r3, [pc, #52]	; (8011f44 <__smakebuf_r+0x7c>)
 8011f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011f10:	89a3      	ldrh	r3, [r4, #12]
 8011f12:	6020      	str	r0, [r4, #0]
 8011f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f18:	81a3      	strh	r3, [r4, #12]
 8011f1a:	9b00      	ldr	r3, [sp, #0]
 8011f1c:	6163      	str	r3, [r4, #20]
 8011f1e:	9b01      	ldr	r3, [sp, #4]
 8011f20:	6120      	str	r0, [r4, #16]
 8011f22:	b15b      	cbz	r3, 8011f3c <__smakebuf_r+0x74>
 8011f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f28:	4630      	mov	r0, r6
 8011f2a:	f001 fc27 	bl	801377c <_isatty_r>
 8011f2e:	b128      	cbz	r0, 8011f3c <__smakebuf_r+0x74>
 8011f30:	89a3      	ldrh	r3, [r4, #12]
 8011f32:	f023 0303 	bic.w	r3, r3, #3
 8011f36:	f043 0301 	orr.w	r3, r3, #1
 8011f3a:	81a3      	strh	r3, [r4, #12]
 8011f3c:	89a0      	ldrh	r0, [r4, #12]
 8011f3e:	4305      	orrs	r5, r0
 8011f40:	81a5      	strh	r5, [r4, #12]
 8011f42:	e7cd      	b.n	8011ee0 <__smakebuf_r+0x18>
 8011f44:	080115cd 	.word	0x080115cd

08011f48 <__ascii_mbtowc>:
 8011f48:	b082      	sub	sp, #8
 8011f4a:	b901      	cbnz	r1, 8011f4e <__ascii_mbtowc+0x6>
 8011f4c:	a901      	add	r1, sp, #4
 8011f4e:	b142      	cbz	r2, 8011f62 <__ascii_mbtowc+0x1a>
 8011f50:	b14b      	cbz	r3, 8011f66 <__ascii_mbtowc+0x1e>
 8011f52:	7813      	ldrb	r3, [r2, #0]
 8011f54:	600b      	str	r3, [r1, #0]
 8011f56:	7812      	ldrb	r2, [r2, #0]
 8011f58:	1e10      	subs	r0, r2, #0
 8011f5a:	bf18      	it	ne
 8011f5c:	2001      	movne	r0, #1
 8011f5e:	b002      	add	sp, #8
 8011f60:	4770      	bx	lr
 8011f62:	4610      	mov	r0, r2
 8011f64:	e7fb      	b.n	8011f5e <__ascii_mbtowc+0x16>
 8011f66:	f06f 0001 	mvn.w	r0, #1
 8011f6a:	e7f8      	b.n	8011f5e <__ascii_mbtowc+0x16>

08011f6c <__malloc_lock>:
 8011f6c:	4801      	ldr	r0, [pc, #4]	; (8011f74 <__malloc_lock+0x8>)
 8011f6e:	f7ff bf72 	b.w	8011e56 <__retarget_lock_acquire_recursive>
 8011f72:	bf00      	nop
 8011f74:	20001a3c 	.word	0x20001a3c

08011f78 <__malloc_unlock>:
 8011f78:	4801      	ldr	r0, [pc, #4]	; (8011f80 <__malloc_unlock+0x8>)
 8011f7a:	f7ff bf6d 	b.w	8011e58 <__retarget_lock_release_recursive>
 8011f7e:	bf00      	nop
 8011f80:	20001a3c 	.word	0x20001a3c

08011f84 <_Balloc>:
 8011f84:	b570      	push	{r4, r5, r6, lr}
 8011f86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011f88:	4604      	mov	r4, r0
 8011f8a:	460d      	mov	r5, r1
 8011f8c:	b976      	cbnz	r6, 8011fac <_Balloc+0x28>
 8011f8e:	2010      	movs	r0, #16
 8011f90:	f7fc fbd4 	bl	800e73c <malloc>
 8011f94:	4602      	mov	r2, r0
 8011f96:	6260      	str	r0, [r4, #36]	; 0x24
 8011f98:	b920      	cbnz	r0, 8011fa4 <_Balloc+0x20>
 8011f9a:	4b18      	ldr	r3, [pc, #96]	; (8011ffc <_Balloc+0x78>)
 8011f9c:	4818      	ldr	r0, [pc, #96]	; (8012000 <_Balloc+0x7c>)
 8011f9e:	2166      	movs	r1, #102	; 0x66
 8011fa0:	f001 fbaa 	bl	80136f8 <__assert_func>
 8011fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011fa8:	6006      	str	r6, [r0, #0]
 8011faa:	60c6      	str	r6, [r0, #12]
 8011fac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011fae:	68f3      	ldr	r3, [r6, #12]
 8011fb0:	b183      	cbz	r3, 8011fd4 <_Balloc+0x50>
 8011fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011fba:	b9b8      	cbnz	r0, 8011fec <_Balloc+0x68>
 8011fbc:	2101      	movs	r1, #1
 8011fbe:	fa01 f605 	lsl.w	r6, r1, r5
 8011fc2:	1d72      	adds	r2, r6, #5
 8011fc4:	0092      	lsls	r2, r2, #2
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f000 fc97 	bl	80128fa <_calloc_r>
 8011fcc:	b160      	cbz	r0, 8011fe8 <_Balloc+0x64>
 8011fce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011fd2:	e00e      	b.n	8011ff2 <_Balloc+0x6e>
 8011fd4:	2221      	movs	r2, #33	; 0x21
 8011fd6:	2104      	movs	r1, #4
 8011fd8:	4620      	mov	r0, r4
 8011fda:	f000 fc8e 	bl	80128fa <_calloc_r>
 8011fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fe0:	60f0      	str	r0, [r6, #12]
 8011fe2:	68db      	ldr	r3, [r3, #12]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d1e4      	bne.n	8011fb2 <_Balloc+0x2e>
 8011fe8:	2000      	movs	r0, #0
 8011fea:	bd70      	pop	{r4, r5, r6, pc}
 8011fec:	6802      	ldr	r2, [r0, #0]
 8011fee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011ff8:	e7f7      	b.n	8011fea <_Balloc+0x66>
 8011ffa:	bf00      	nop
 8011ffc:	08014df5 	.word	0x08014df5
 8012000:	08014f5c 	.word	0x08014f5c

08012004 <_Bfree>:
 8012004:	b570      	push	{r4, r5, r6, lr}
 8012006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012008:	4605      	mov	r5, r0
 801200a:	460c      	mov	r4, r1
 801200c:	b976      	cbnz	r6, 801202c <_Bfree+0x28>
 801200e:	2010      	movs	r0, #16
 8012010:	f7fc fb94 	bl	800e73c <malloc>
 8012014:	4602      	mov	r2, r0
 8012016:	6268      	str	r0, [r5, #36]	; 0x24
 8012018:	b920      	cbnz	r0, 8012024 <_Bfree+0x20>
 801201a:	4b09      	ldr	r3, [pc, #36]	; (8012040 <_Bfree+0x3c>)
 801201c:	4809      	ldr	r0, [pc, #36]	; (8012044 <_Bfree+0x40>)
 801201e:	218a      	movs	r1, #138	; 0x8a
 8012020:	f001 fb6a 	bl	80136f8 <__assert_func>
 8012024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012028:	6006      	str	r6, [r0, #0]
 801202a:	60c6      	str	r6, [r0, #12]
 801202c:	b13c      	cbz	r4, 801203e <_Bfree+0x3a>
 801202e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012030:	6862      	ldr	r2, [r4, #4]
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012038:	6021      	str	r1, [r4, #0]
 801203a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801203e:	bd70      	pop	{r4, r5, r6, pc}
 8012040:	08014df5 	.word	0x08014df5
 8012044:	08014f5c 	.word	0x08014f5c

08012048 <__multadd>:
 8012048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801204c:	690e      	ldr	r6, [r1, #16]
 801204e:	4607      	mov	r7, r0
 8012050:	4698      	mov	r8, r3
 8012052:	460c      	mov	r4, r1
 8012054:	f101 0014 	add.w	r0, r1, #20
 8012058:	2300      	movs	r3, #0
 801205a:	6805      	ldr	r5, [r0, #0]
 801205c:	b2a9      	uxth	r1, r5
 801205e:	fb02 8101 	mla	r1, r2, r1, r8
 8012062:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012066:	0c2d      	lsrs	r5, r5, #16
 8012068:	fb02 c505 	mla	r5, r2, r5, ip
 801206c:	b289      	uxth	r1, r1
 801206e:	3301      	adds	r3, #1
 8012070:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012074:	429e      	cmp	r6, r3
 8012076:	f840 1b04 	str.w	r1, [r0], #4
 801207a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801207e:	dcec      	bgt.n	801205a <__multadd+0x12>
 8012080:	f1b8 0f00 	cmp.w	r8, #0
 8012084:	d022      	beq.n	80120cc <__multadd+0x84>
 8012086:	68a3      	ldr	r3, [r4, #8]
 8012088:	42b3      	cmp	r3, r6
 801208a:	dc19      	bgt.n	80120c0 <__multadd+0x78>
 801208c:	6861      	ldr	r1, [r4, #4]
 801208e:	4638      	mov	r0, r7
 8012090:	3101      	adds	r1, #1
 8012092:	f7ff ff77 	bl	8011f84 <_Balloc>
 8012096:	4605      	mov	r5, r0
 8012098:	b928      	cbnz	r0, 80120a6 <__multadd+0x5e>
 801209a:	4602      	mov	r2, r0
 801209c:	4b0d      	ldr	r3, [pc, #52]	; (80120d4 <__multadd+0x8c>)
 801209e:	480e      	ldr	r0, [pc, #56]	; (80120d8 <__multadd+0x90>)
 80120a0:	21b5      	movs	r1, #181	; 0xb5
 80120a2:	f001 fb29 	bl	80136f8 <__assert_func>
 80120a6:	6922      	ldr	r2, [r4, #16]
 80120a8:	3202      	adds	r2, #2
 80120aa:	f104 010c 	add.w	r1, r4, #12
 80120ae:	0092      	lsls	r2, r2, #2
 80120b0:	300c      	adds	r0, #12
 80120b2:	f7fc fb4b 	bl	800e74c <memcpy>
 80120b6:	4621      	mov	r1, r4
 80120b8:	4638      	mov	r0, r7
 80120ba:	f7ff ffa3 	bl	8012004 <_Bfree>
 80120be:	462c      	mov	r4, r5
 80120c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80120c4:	3601      	adds	r6, #1
 80120c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80120ca:	6126      	str	r6, [r4, #16]
 80120cc:	4620      	mov	r0, r4
 80120ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d2:	bf00      	nop
 80120d4:	08014e6b 	.word	0x08014e6b
 80120d8:	08014f5c 	.word	0x08014f5c

080120dc <__s2b>:
 80120dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120e0:	460c      	mov	r4, r1
 80120e2:	4615      	mov	r5, r2
 80120e4:	461f      	mov	r7, r3
 80120e6:	2209      	movs	r2, #9
 80120e8:	3308      	adds	r3, #8
 80120ea:	4606      	mov	r6, r0
 80120ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80120f0:	2100      	movs	r1, #0
 80120f2:	2201      	movs	r2, #1
 80120f4:	429a      	cmp	r2, r3
 80120f6:	db09      	blt.n	801210c <__s2b+0x30>
 80120f8:	4630      	mov	r0, r6
 80120fa:	f7ff ff43 	bl	8011f84 <_Balloc>
 80120fe:	b940      	cbnz	r0, 8012112 <__s2b+0x36>
 8012100:	4602      	mov	r2, r0
 8012102:	4b19      	ldr	r3, [pc, #100]	; (8012168 <__s2b+0x8c>)
 8012104:	4819      	ldr	r0, [pc, #100]	; (801216c <__s2b+0x90>)
 8012106:	21ce      	movs	r1, #206	; 0xce
 8012108:	f001 faf6 	bl	80136f8 <__assert_func>
 801210c:	0052      	lsls	r2, r2, #1
 801210e:	3101      	adds	r1, #1
 8012110:	e7f0      	b.n	80120f4 <__s2b+0x18>
 8012112:	9b08      	ldr	r3, [sp, #32]
 8012114:	6143      	str	r3, [r0, #20]
 8012116:	2d09      	cmp	r5, #9
 8012118:	f04f 0301 	mov.w	r3, #1
 801211c:	6103      	str	r3, [r0, #16]
 801211e:	dd16      	ble.n	801214e <__s2b+0x72>
 8012120:	f104 0909 	add.w	r9, r4, #9
 8012124:	46c8      	mov	r8, r9
 8012126:	442c      	add	r4, r5
 8012128:	f818 3b01 	ldrb.w	r3, [r8], #1
 801212c:	4601      	mov	r1, r0
 801212e:	3b30      	subs	r3, #48	; 0x30
 8012130:	220a      	movs	r2, #10
 8012132:	4630      	mov	r0, r6
 8012134:	f7ff ff88 	bl	8012048 <__multadd>
 8012138:	45a0      	cmp	r8, r4
 801213a:	d1f5      	bne.n	8012128 <__s2b+0x4c>
 801213c:	f1a5 0408 	sub.w	r4, r5, #8
 8012140:	444c      	add	r4, r9
 8012142:	1b2d      	subs	r5, r5, r4
 8012144:	1963      	adds	r3, r4, r5
 8012146:	42bb      	cmp	r3, r7
 8012148:	db04      	blt.n	8012154 <__s2b+0x78>
 801214a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801214e:	340a      	adds	r4, #10
 8012150:	2509      	movs	r5, #9
 8012152:	e7f6      	b.n	8012142 <__s2b+0x66>
 8012154:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012158:	4601      	mov	r1, r0
 801215a:	3b30      	subs	r3, #48	; 0x30
 801215c:	220a      	movs	r2, #10
 801215e:	4630      	mov	r0, r6
 8012160:	f7ff ff72 	bl	8012048 <__multadd>
 8012164:	e7ee      	b.n	8012144 <__s2b+0x68>
 8012166:	bf00      	nop
 8012168:	08014e6b 	.word	0x08014e6b
 801216c:	08014f5c 	.word	0x08014f5c

08012170 <__hi0bits>:
 8012170:	0c03      	lsrs	r3, r0, #16
 8012172:	041b      	lsls	r3, r3, #16
 8012174:	b9d3      	cbnz	r3, 80121ac <__hi0bits+0x3c>
 8012176:	0400      	lsls	r0, r0, #16
 8012178:	2310      	movs	r3, #16
 801217a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801217e:	bf04      	itt	eq
 8012180:	0200      	lsleq	r0, r0, #8
 8012182:	3308      	addeq	r3, #8
 8012184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012188:	bf04      	itt	eq
 801218a:	0100      	lsleq	r0, r0, #4
 801218c:	3304      	addeq	r3, #4
 801218e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012192:	bf04      	itt	eq
 8012194:	0080      	lsleq	r0, r0, #2
 8012196:	3302      	addeq	r3, #2
 8012198:	2800      	cmp	r0, #0
 801219a:	db05      	blt.n	80121a8 <__hi0bits+0x38>
 801219c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80121a0:	f103 0301 	add.w	r3, r3, #1
 80121a4:	bf08      	it	eq
 80121a6:	2320      	moveq	r3, #32
 80121a8:	4618      	mov	r0, r3
 80121aa:	4770      	bx	lr
 80121ac:	2300      	movs	r3, #0
 80121ae:	e7e4      	b.n	801217a <__hi0bits+0xa>

080121b0 <__lo0bits>:
 80121b0:	6803      	ldr	r3, [r0, #0]
 80121b2:	f013 0207 	ands.w	r2, r3, #7
 80121b6:	4601      	mov	r1, r0
 80121b8:	d00b      	beq.n	80121d2 <__lo0bits+0x22>
 80121ba:	07da      	lsls	r2, r3, #31
 80121bc:	d424      	bmi.n	8012208 <__lo0bits+0x58>
 80121be:	0798      	lsls	r0, r3, #30
 80121c0:	bf49      	itett	mi
 80121c2:	085b      	lsrmi	r3, r3, #1
 80121c4:	089b      	lsrpl	r3, r3, #2
 80121c6:	2001      	movmi	r0, #1
 80121c8:	600b      	strmi	r3, [r1, #0]
 80121ca:	bf5c      	itt	pl
 80121cc:	600b      	strpl	r3, [r1, #0]
 80121ce:	2002      	movpl	r0, #2
 80121d0:	4770      	bx	lr
 80121d2:	b298      	uxth	r0, r3
 80121d4:	b9b0      	cbnz	r0, 8012204 <__lo0bits+0x54>
 80121d6:	0c1b      	lsrs	r3, r3, #16
 80121d8:	2010      	movs	r0, #16
 80121da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80121de:	bf04      	itt	eq
 80121e0:	0a1b      	lsreq	r3, r3, #8
 80121e2:	3008      	addeq	r0, #8
 80121e4:	071a      	lsls	r2, r3, #28
 80121e6:	bf04      	itt	eq
 80121e8:	091b      	lsreq	r3, r3, #4
 80121ea:	3004      	addeq	r0, #4
 80121ec:	079a      	lsls	r2, r3, #30
 80121ee:	bf04      	itt	eq
 80121f0:	089b      	lsreq	r3, r3, #2
 80121f2:	3002      	addeq	r0, #2
 80121f4:	07da      	lsls	r2, r3, #31
 80121f6:	d403      	bmi.n	8012200 <__lo0bits+0x50>
 80121f8:	085b      	lsrs	r3, r3, #1
 80121fa:	f100 0001 	add.w	r0, r0, #1
 80121fe:	d005      	beq.n	801220c <__lo0bits+0x5c>
 8012200:	600b      	str	r3, [r1, #0]
 8012202:	4770      	bx	lr
 8012204:	4610      	mov	r0, r2
 8012206:	e7e8      	b.n	80121da <__lo0bits+0x2a>
 8012208:	2000      	movs	r0, #0
 801220a:	4770      	bx	lr
 801220c:	2020      	movs	r0, #32
 801220e:	4770      	bx	lr

08012210 <__i2b>:
 8012210:	b510      	push	{r4, lr}
 8012212:	460c      	mov	r4, r1
 8012214:	2101      	movs	r1, #1
 8012216:	f7ff feb5 	bl	8011f84 <_Balloc>
 801221a:	4602      	mov	r2, r0
 801221c:	b928      	cbnz	r0, 801222a <__i2b+0x1a>
 801221e:	4b05      	ldr	r3, [pc, #20]	; (8012234 <__i2b+0x24>)
 8012220:	4805      	ldr	r0, [pc, #20]	; (8012238 <__i2b+0x28>)
 8012222:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012226:	f001 fa67 	bl	80136f8 <__assert_func>
 801222a:	2301      	movs	r3, #1
 801222c:	6144      	str	r4, [r0, #20]
 801222e:	6103      	str	r3, [r0, #16]
 8012230:	bd10      	pop	{r4, pc}
 8012232:	bf00      	nop
 8012234:	08014e6b 	.word	0x08014e6b
 8012238:	08014f5c 	.word	0x08014f5c

0801223c <__multiply>:
 801223c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012240:	4614      	mov	r4, r2
 8012242:	690a      	ldr	r2, [r1, #16]
 8012244:	6923      	ldr	r3, [r4, #16]
 8012246:	429a      	cmp	r2, r3
 8012248:	bfb8      	it	lt
 801224a:	460b      	movlt	r3, r1
 801224c:	460d      	mov	r5, r1
 801224e:	bfbc      	itt	lt
 8012250:	4625      	movlt	r5, r4
 8012252:	461c      	movlt	r4, r3
 8012254:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012258:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801225c:	68ab      	ldr	r3, [r5, #8]
 801225e:	6869      	ldr	r1, [r5, #4]
 8012260:	eb0a 0709 	add.w	r7, sl, r9
 8012264:	42bb      	cmp	r3, r7
 8012266:	b085      	sub	sp, #20
 8012268:	bfb8      	it	lt
 801226a:	3101      	addlt	r1, #1
 801226c:	f7ff fe8a 	bl	8011f84 <_Balloc>
 8012270:	b930      	cbnz	r0, 8012280 <__multiply+0x44>
 8012272:	4602      	mov	r2, r0
 8012274:	4b42      	ldr	r3, [pc, #264]	; (8012380 <__multiply+0x144>)
 8012276:	4843      	ldr	r0, [pc, #268]	; (8012384 <__multiply+0x148>)
 8012278:	f240 115d 	movw	r1, #349	; 0x15d
 801227c:	f001 fa3c 	bl	80136f8 <__assert_func>
 8012280:	f100 0614 	add.w	r6, r0, #20
 8012284:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012288:	4633      	mov	r3, r6
 801228a:	2200      	movs	r2, #0
 801228c:	4543      	cmp	r3, r8
 801228e:	d31e      	bcc.n	80122ce <__multiply+0x92>
 8012290:	f105 0c14 	add.w	ip, r5, #20
 8012294:	f104 0314 	add.w	r3, r4, #20
 8012298:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801229c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80122a0:	9202      	str	r2, [sp, #8]
 80122a2:	ebac 0205 	sub.w	r2, ip, r5
 80122a6:	3a15      	subs	r2, #21
 80122a8:	f022 0203 	bic.w	r2, r2, #3
 80122ac:	3204      	adds	r2, #4
 80122ae:	f105 0115 	add.w	r1, r5, #21
 80122b2:	458c      	cmp	ip, r1
 80122b4:	bf38      	it	cc
 80122b6:	2204      	movcc	r2, #4
 80122b8:	9201      	str	r2, [sp, #4]
 80122ba:	9a02      	ldr	r2, [sp, #8]
 80122bc:	9303      	str	r3, [sp, #12]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d808      	bhi.n	80122d4 <__multiply+0x98>
 80122c2:	2f00      	cmp	r7, #0
 80122c4:	dc55      	bgt.n	8012372 <__multiply+0x136>
 80122c6:	6107      	str	r7, [r0, #16]
 80122c8:	b005      	add	sp, #20
 80122ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ce:	f843 2b04 	str.w	r2, [r3], #4
 80122d2:	e7db      	b.n	801228c <__multiply+0x50>
 80122d4:	f8b3 a000 	ldrh.w	sl, [r3]
 80122d8:	f1ba 0f00 	cmp.w	sl, #0
 80122dc:	d020      	beq.n	8012320 <__multiply+0xe4>
 80122de:	f105 0e14 	add.w	lr, r5, #20
 80122e2:	46b1      	mov	r9, r6
 80122e4:	2200      	movs	r2, #0
 80122e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80122ea:	f8d9 b000 	ldr.w	fp, [r9]
 80122ee:	b2a1      	uxth	r1, r4
 80122f0:	fa1f fb8b 	uxth.w	fp, fp
 80122f4:	fb0a b101 	mla	r1, sl, r1, fp
 80122f8:	4411      	add	r1, r2
 80122fa:	f8d9 2000 	ldr.w	r2, [r9]
 80122fe:	0c24      	lsrs	r4, r4, #16
 8012300:	0c12      	lsrs	r2, r2, #16
 8012302:	fb0a 2404 	mla	r4, sl, r4, r2
 8012306:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801230a:	b289      	uxth	r1, r1
 801230c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012310:	45f4      	cmp	ip, lr
 8012312:	f849 1b04 	str.w	r1, [r9], #4
 8012316:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801231a:	d8e4      	bhi.n	80122e6 <__multiply+0xaa>
 801231c:	9901      	ldr	r1, [sp, #4]
 801231e:	5072      	str	r2, [r6, r1]
 8012320:	9a03      	ldr	r2, [sp, #12]
 8012322:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012326:	3304      	adds	r3, #4
 8012328:	f1b9 0f00 	cmp.w	r9, #0
 801232c:	d01f      	beq.n	801236e <__multiply+0x132>
 801232e:	6834      	ldr	r4, [r6, #0]
 8012330:	f105 0114 	add.w	r1, r5, #20
 8012334:	46b6      	mov	lr, r6
 8012336:	f04f 0a00 	mov.w	sl, #0
 801233a:	880a      	ldrh	r2, [r1, #0]
 801233c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012340:	fb09 b202 	mla	r2, r9, r2, fp
 8012344:	4492      	add	sl, r2
 8012346:	b2a4      	uxth	r4, r4
 8012348:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801234c:	f84e 4b04 	str.w	r4, [lr], #4
 8012350:	f851 4b04 	ldr.w	r4, [r1], #4
 8012354:	f8be 2000 	ldrh.w	r2, [lr]
 8012358:	0c24      	lsrs	r4, r4, #16
 801235a:	fb09 2404 	mla	r4, r9, r4, r2
 801235e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012362:	458c      	cmp	ip, r1
 8012364:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012368:	d8e7      	bhi.n	801233a <__multiply+0xfe>
 801236a:	9a01      	ldr	r2, [sp, #4]
 801236c:	50b4      	str	r4, [r6, r2]
 801236e:	3604      	adds	r6, #4
 8012370:	e7a3      	b.n	80122ba <__multiply+0x7e>
 8012372:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012376:	2b00      	cmp	r3, #0
 8012378:	d1a5      	bne.n	80122c6 <__multiply+0x8a>
 801237a:	3f01      	subs	r7, #1
 801237c:	e7a1      	b.n	80122c2 <__multiply+0x86>
 801237e:	bf00      	nop
 8012380:	08014e6b 	.word	0x08014e6b
 8012384:	08014f5c 	.word	0x08014f5c

08012388 <__pow5mult>:
 8012388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801238c:	4615      	mov	r5, r2
 801238e:	f012 0203 	ands.w	r2, r2, #3
 8012392:	4606      	mov	r6, r0
 8012394:	460f      	mov	r7, r1
 8012396:	d007      	beq.n	80123a8 <__pow5mult+0x20>
 8012398:	4c25      	ldr	r4, [pc, #148]	; (8012430 <__pow5mult+0xa8>)
 801239a:	3a01      	subs	r2, #1
 801239c:	2300      	movs	r3, #0
 801239e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80123a2:	f7ff fe51 	bl	8012048 <__multadd>
 80123a6:	4607      	mov	r7, r0
 80123a8:	10ad      	asrs	r5, r5, #2
 80123aa:	d03d      	beq.n	8012428 <__pow5mult+0xa0>
 80123ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80123ae:	b97c      	cbnz	r4, 80123d0 <__pow5mult+0x48>
 80123b0:	2010      	movs	r0, #16
 80123b2:	f7fc f9c3 	bl	800e73c <malloc>
 80123b6:	4602      	mov	r2, r0
 80123b8:	6270      	str	r0, [r6, #36]	; 0x24
 80123ba:	b928      	cbnz	r0, 80123c8 <__pow5mult+0x40>
 80123bc:	4b1d      	ldr	r3, [pc, #116]	; (8012434 <__pow5mult+0xac>)
 80123be:	481e      	ldr	r0, [pc, #120]	; (8012438 <__pow5mult+0xb0>)
 80123c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80123c4:	f001 f998 	bl	80136f8 <__assert_func>
 80123c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80123cc:	6004      	str	r4, [r0, #0]
 80123ce:	60c4      	str	r4, [r0, #12]
 80123d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80123d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80123d8:	b94c      	cbnz	r4, 80123ee <__pow5mult+0x66>
 80123da:	f240 2171 	movw	r1, #625	; 0x271
 80123de:	4630      	mov	r0, r6
 80123e0:	f7ff ff16 	bl	8012210 <__i2b>
 80123e4:	2300      	movs	r3, #0
 80123e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80123ea:	4604      	mov	r4, r0
 80123ec:	6003      	str	r3, [r0, #0]
 80123ee:	f04f 0900 	mov.w	r9, #0
 80123f2:	07eb      	lsls	r3, r5, #31
 80123f4:	d50a      	bpl.n	801240c <__pow5mult+0x84>
 80123f6:	4639      	mov	r1, r7
 80123f8:	4622      	mov	r2, r4
 80123fa:	4630      	mov	r0, r6
 80123fc:	f7ff ff1e 	bl	801223c <__multiply>
 8012400:	4639      	mov	r1, r7
 8012402:	4680      	mov	r8, r0
 8012404:	4630      	mov	r0, r6
 8012406:	f7ff fdfd 	bl	8012004 <_Bfree>
 801240a:	4647      	mov	r7, r8
 801240c:	106d      	asrs	r5, r5, #1
 801240e:	d00b      	beq.n	8012428 <__pow5mult+0xa0>
 8012410:	6820      	ldr	r0, [r4, #0]
 8012412:	b938      	cbnz	r0, 8012424 <__pow5mult+0x9c>
 8012414:	4622      	mov	r2, r4
 8012416:	4621      	mov	r1, r4
 8012418:	4630      	mov	r0, r6
 801241a:	f7ff ff0f 	bl	801223c <__multiply>
 801241e:	6020      	str	r0, [r4, #0]
 8012420:	f8c0 9000 	str.w	r9, [r0]
 8012424:	4604      	mov	r4, r0
 8012426:	e7e4      	b.n	80123f2 <__pow5mult+0x6a>
 8012428:	4638      	mov	r0, r7
 801242a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801242e:	bf00      	nop
 8012430:	080150b0 	.word	0x080150b0
 8012434:	08014df5 	.word	0x08014df5
 8012438:	08014f5c 	.word	0x08014f5c

0801243c <__lshift>:
 801243c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012440:	460c      	mov	r4, r1
 8012442:	6849      	ldr	r1, [r1, #4]
 8012444:	6923      	ldr	r3, [r4, #16]
 8012446:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801244a:	68a3      	ldr	r3, [r4, #8]
 801244c:	4607      	mov	r7, r0
 801244e:	4691      	mov	r9, r2
 8012450:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012454:	f108 0601 	add.w	r6, r8, #1
 8012458:	42b3      	cmp	r3, r6
 801245a:	db0b      	blt.n	8012474 <__lshift+0x38>
 801245c:	4638      	mov	r0, r7
 801245e:	f7ff fd91 	bl	8011f84 <_Balloc>
 8012462:	4605      	mov	r5, r0
 8012464:	b948      	cbnz	r0, 801247a <__lshift+0x3e>
 8012466:	4602      	mov	r2, r0
 8012468:	4b28      	ldr	r3, [pc, #160]	; (801250c <__lshift+0xd0>)
 801246a:	4829      	ldr	r0, [pc, #164]	; (8012510 <__lshift+0xd4>)
 801246c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012470:	f001 f942 	bl	80136f8 <__assert_func>
 8012474:	3101      	adds	r1, #1
 8012476:	005b      	lsls	r3, r3, #1
 8012478:	e7ee      	b.n	8012458 <__lshift+0x1c>
 801247a:	2300      	movs	r3, #0
 801247c:	f100 0114 	add.w	r1, r0, #20
 8012480:	f100 0210 	add.w	r2, r0, #16
 8012484:	4618      	mov	r0, r3
 8012486:	4553      	cmp	r3, sl
 8012488:	db33      	blt.n	80124f2 <__lshift+0xb6>
 801248a:	6920      	ldr	r0, [r4, #16]
 801248c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012490:	f104 0314 	add.w	r3, r4, #20
 8012494:	f019 091f 	ands.w	r9, r9, #31
 8012498:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801249c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80124a0:	d02b      	beq.n	80124fa <__lshift+0xbe>
 80124a2:	f1c9 0e20 	rsb	lr, r9, #32
 80124a6:	468a      	mov	sl, r1
 80124a8:	2200      	movs	r2, #0
 80124aa:	6818      	ldr	r0, [r3, #0]
 80124ac:	fa00 f009 	lsl.w	r0, r0, r9
 80124b0:	4302      	orrs	r2, r0
 80124b2:	f84a 2b04 	str.w	r2, [sl], #4
 80124b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80124ba:	459c      	cmp	ip, r3
 80124bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80124c0:	d8f3      	bhi.n	80124aa <__lshift+0x6e>
 80124c2:	ebac 0304 	sub.w	r3, ip, r4
 80124c6:	3b15      	subs	r3, #21
 80124c8:	f023 0303 	bic.w	r3, r3, #3
 80124cc:	3304      	adds	r3, #4
 80124ce:	f104 0015 	add.w	r0, r4, #21
 80124d2:	4584      	cmp	ip, r0
 80124d4:	bf38      	it	cc
 80124d6:	2304      	movcc	r3, #4
 80124d8:	50ca      	str	r2, [r1, r3]
 80124da:	b10a      	cbz	r2, 80124e0 <__lshift+0xa4>
 80124dc:	f108 0602 	add.w	r6, r8, #2
 80124e0:	3e01      	subs	r6, #1
 80124e2:	4638      	mov	r0, r7
 80124e4:	612e      	str	r6, [r5, #16]
 80124e6:	4621      	mov	r1, r4
 80124e8:	f7ff fd8c 	bl	8012004 <_Bfree>
 80124ec:	4628      	mov	r0, r5
 80124ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80124f6:	3301      	adds	r3, #1
 80124f8:	e7c5      	b.n	8012486 <__lshift+0x4a>
 80124fa:	3904      	subs	r1, #4
 80124fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8012500:	f841 2f04 	str.w	r2, [r1, #4]!
 8012504:	459c      	cmp	ip, r3
 8012506:	d8f9      	bhi.n	80124fc <__lshift+0xc0>
 8012508:	e7ea      	b.n	80124e0 <__lshift+0xa4>
 801250a:	bf00      	nop
 801250c:	08014e6b 	.word	0x08014e6b
 8012510:	08014f5c 	.word	0x08014f5c

08012514 <__mcmp>:
 8012514:	b530      	push	{r4, r5, lr}
 8012516:	6902      	ldr	r2, [r0, #16]
 8012518:	690c      	ldr	r4, [r1, #16]
 801251a:	1b12      	subs	r2, r2, r4
 801251c:	d10e      	bne.n	801253c <__mcmp+0x28>
 801251e:	f100 0314 	add.w	r3, r0, #20
 8012522:	3114      	adds	r1, #20
 8012524:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012528:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801252c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012530:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012534:	42a5      	cmp	r5, r4
 8012536:	d003      	beq.n	8012540 <__mcmp+0x2c>
 8012538:	d305      	bcc.n	8012546 <__mcmp+0x32>
 801253a:	2201      	movs	r2, #1
 801253c:	4610      	mov	r0, r2
 801253e:	bd30      	pop	{r4, r5, pc}
 8012540:	4283      	cmp	r3, r0
 8012542:	d3f3      	bcc.n	801252c <__mcmp+0x18>
 8012544:	e7fa      	b.n	801253c <__mcmp+0x28>
 8012546:	f04f 32ff 	mov.w	r2, #4294967295
 801254a:	e7f7      	b.n	801253c <__mcmp+0x28>

0801254c <__mdiff>:
 801254c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012550:	460c      	mov	r4, r1
 8012552:	4606      	mov	r6, r0
 8012554:	4611      	mov	r1, r2
 8012556:	4620      	mov	r0, r4
 8012558:	4617      	mov	r7, r2
 801255a:	f7ff ffdb 	bl	8012514 <__mcmp>
 801255e:	1e05      	subs	r5, r0, #0
 8012560:	d110      	bne.n	8012584 <__mdiff+0x38>
 8012562:	4629      	mov	r1, r5
 8012564:	4630      	mov	r0, r6
 8012566:	f7ff fd0d 	bl	8011f84 <_Balloc>
 801256a:	b930      	cbnz	r0, 801257a <__mdiff+0x2e>
 801256c:	4b39      	ldr	r3, [pc, #228]	; (8012654 <__mdiff+0x108>)
 801256e:	4602      	mov	r2, r0
 8012570:	f240 2132 	movw	r1, #562	; 0x232
 8012574:	4838      	ldr	r0, [pc, #224]	; (8012658 <__mdiff+0x10c>)
 8012576:	f001 f8bf 	bl	80136f8 <__assert_func>
 801257a:	2301      	movs	r3, #1
 801257c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012584:	bfa4      	itt	ge
 8012586:	463b      	movge	r3, r7
 8012588:	4627      	movge	r7, r4
 801258a:	4630      	mov	r0, r6
 801258c:	6879      	ldr	r1, [r7, #4]
 801258e:	bfa6      	itte	ge
 8012590:	461c      	movge	r4, r3
 8012592:	2500      	movge	r5, #0
 8012594:	2501      	movlt	r5, #1
 8012596:	f7ff fcf5 	bl	8011f84 <_Balloc>
 801259a:	b920      	cbnz	r0, 80125a6 <__mdiff+0x5a>
 801259c:	4b2d      	ldr	r3, [pc, #180]	; (8012654 <__mdiff+0x108>)
 801259e:	4602      	mov	r2, r0
 80125a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80125a4:	e7e6      	b.n	8012574 <__mdiff+0x28>
 80125a6:	693e      	ldr	r6, [r7, #16]
 80125a8:	60c5      	str	r5, [r0, #12]
 80125aa:	6925      	ldr	r5, [r4, #16]
 80125ac:	f107 0114 	add.w	r1, r7, #20
 80125b0:	f104 0914 	add.w	r9, r4, #20
 80125b4:	f100 0e14 	add.w	lr, r0, #20
 80125b8:	f107 0210 	add.w	r2, r7, #16
 80125bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80125c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80125c4:	46f2      	mov	sl, lr
 80125c6:	2700      	movs	r7, #0
 80125c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80125cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80125d0:	fa1f f883 	uxth.w	r8, r3
 80125d4:	fa17 f78b 	uxtah	r7, r7, fp
 80125d8:	0c1b      	lsrs	r3, r3, #16
 80125da:	eba7 0808 	sub.w	r8, r7, r8
 80125de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80125e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80125e6:	fa1f f888 	uxth.w	r8, r8
 80125ea:	141f      	asrs	r7, r3, #16
 80125ec:	454d      	cmp	r5, r9
 80125ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80125f2:	f84a 3b04 	str.w	r3, [sl], #4
 80125f6:	d8e7      	bhi.n	80125c8 <__mdiff+0x7c>
 80125f8:	1b2b      	subs	r3, r5, r4
 80125fa:	3b15      	subs	r3, #21
 80125fc:	f023 0303 	bic.w	r3, r3, #3
 8012600:	3304      	adds	r3, #4
 8012602:	3415      	adds	r4, #21
 8012604:	42a5      	cmp	r5, r4
 8012606:	bf38      	it	cc
 8012608:	2304      	movcc	r3, #4
 801260a:	4419      	add	r1, r3
 801260c:	4473      	add	r3, lr
 801260e:	469e      	mov	lr, r3
 8012610:	460d      	mov	r5, r1
 8012612:	4565      	cmp	r5, ip
 8012614:	d30e      	bcc.n	8012634 <__mdiff+0xe8>
 8012616:	f10c 0203 	add.w	r2, ip, #3
 801261a:	1a52      	subs	r2, r2, r1
 801261c:	f022 0203 	bic.w	r2, r2, #3
 8012620:	3903      	subs	r1, #3
 8012622:	458c      	cmp	ip, r1
 8012624:	bf38      	it	cc
 8012626:	2200      	movcc	r2, #0
 8012628:	441a      	add	r2, r3
 801262a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801262e:	b17b      	cbz	r3, 8012650 <__mdiff+0x104>
 8012630:	6106      	str	r6, [r0, #16]
 8012632:	e7a5      	b.n	8012580 <__mdiff+0x34>
 8012634:	f855 8b04 	ldr.w	r8, [r5], #4
 8012638:	fa17 f488 	uxtah	r4, r7, r8
 801263c:	1422      	asrs	r2, r4, #16
 801263e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012642:	b2a4      	uxth	r4, r4
 8012644:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012648:	f84e 4b04 	str.w	r4, [lr], #4
 801264c:	1417      	asrs	r7, r2, #16
 801264e:	e7e0      	b.n	8012612 <__mdiff+0xc6>
 8012650:	3e01      	subs	r6, #1
 8012652:	e7ea      	b.n	801262a <__mdiff+0xde>
 8012654:	08014e6b 	.word	0x08014e6b
 8012658:	08014f5c 	.word	0x08014f5c

0801265c <__ulp>:
 801265c:	b082      	sub	sp, #8
 801265e:	ed8d 0b00 	vstr	d0, [sp]
 8012662:	9b01      	ldr	r3, [sp, #4]
 8012664:	4912      	ldr	r1, [pc, #72]	; (80126b0 <__ulp+0x54>)
 8012666:	4019      	ands	r1, r3
 8012668:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801266c:	2900      	cmp	r1, #0
 801266e:	dd05      	ble.n	801267c <__ulp+0x20>
 8012670:	2200      	movs	r2, #0
 8012672:	460b      	mov	r3, r1
 8012674:	ec43 2b10 	vmov	d0, r2, r3
 8012678:	b002      	add	sp, #8
 801267a:	4770      	bx	lr
 801267c:	4249      	negs	r1, r1
 801267e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012682:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012686:	f04f 0200 	mov.w	r2, #0
 801268a:	f04f 0300 	mov.w	r3, #0
 801268e:	da04      	bge.n	801269a <__ulp+0x3e>
 8012690:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012694:	fa41 f300 	asr.w	r3, r1, r0
 8012698:	e7ec      	b.n	8012674 <__ulp+0x18>
 801269a:	f1a0 0114 	sub.w	r1, r0, #20
 801269e:	291e      	cmp	r1, #30
 80126a0:	bfda      	itte	le
 80126a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80126a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80126aa:	2101      	movgt	r1, #1
 80126ac:	460a      	mov	r2, r1
 80126ae:	e7e1      	b.n	8012674 <__ulp+0x18>
 80126b0:	7ff00000 	.word	0x7ff00000

080126b4 <__b2d>:
 80126b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126b6:	6905      	ldr	r5, [r0, #16]
 80126b8:	f100 0714 	add.w	r7, r0, #20
 80126bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80126c0:	1f2e      	subs	r6, r5, #4
 80126c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80126c6:	4620      	mov	r0, r4
 80126c8:	f7ff fd52 	bl	8012170 <__hi0bits>
 80126cc:	f1c0 0320 	rsb	r3, r0, #32
 80126d0:	280a      	cmp	r0, #10
 80126d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012750 <__b2d+0x9c>
 80126d6:	600b      	str	r3, [r1, #0]
 80126d8:	dc14      	bgt.n	8012704 <__b2d+0x50>
 80126da:	f1c0 0e0b 	rsb	lr, r0, #11
 80126de:	fa24 f10e 	lsr.w	r1, r4, lr
 80126e2:	42b7      	cmp	r7, r6
 80126e4:	ea41 030c 	orr.w	r3, r1, ip
 80126e8:	bf34      	ite	cc
 80126ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80126ee:	2100      	movcs	r1, #0
 80126f0:	3015      	adds	r0, #21
 80126f2:	fa04 f000 	lsl.w	r0, r4, r0
 80126f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80126fa:	ea40 0201 	orr.w	r2, r0, r1
 80126fe:	ec43 2b10 	vmov	d0, r2, r3
 8012702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012704:	42b7      	cmp	r7, r6
 8012706:	bf3a      	itte	cc
 8012708:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801270c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012710:	2100      	movcs	r1, #0
 8012712:	380b      	subs	r0, #11
 8012714:	d017      	beq.n	8012746 <__b2d+0x92>
 8012716:	f1c0 0c20 	rsb	ip, r0, #32
 801271a:	fa04 f500 	lsl.w	r5, r4, r0
 801271e:	42be      	cmp	r6, r7
 8012720:	fa21 f40c 	lsr.w	r4, r1, ip
 8012724:	ea45 0504 	orr.w	r5, r5, r4
 8012728:	bf8c      	ite	hi
 801272a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801272e:	2400      	movls	r4, #0
 8012730:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012734:	fa01 f000 	lsl.w	r0, r1, r0
 8012738:	fa24 f40c 	lsr.w	r4, r4, ip
 801273c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012740:	ea40 0204 	orr.w	r2, r0, r4
 8012744:	e7db      	b.n	80126fe <__b2d+0x4a>
 8012746:	ea44 030c 	orr.w	r3, r4, ip
 801274a:	460a      	mov	r2, r1
 801274c:	e7d7      	b.n	80126fe <__b2d+0x4a>
 801274e:	bf00      	nop
 8012750:	3ff00000 	.word	0x3ff00000

08012754 <__d2b>:
 8012754:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012758:	4689      	mov	r9, r1
 801275a:	2101      	movs	r1, #1
 801275c:	ec57 6b10 	vmov	r6, r7, d0
 8012760:	4690      	mov	r8, r2
 8012762:	f7ff fc0f 	bl	8011f84 <_Balloc>
 8012766:	4604      	mov	r4, r0
 8012768:	b930      	cbnz	r0, 8012778 <__d2b+0x24>
 801276a:	4602      	mov	r2, r0
 801276c:	4b25      	ldr	r3, [pc, #148]	; (8012804 <__d2b+0xb0>)
 801276e:	4826      	ldr	r0, [pc, #152]	; (8012808 <__d2b+0xb4>)
 8012770:	f240 310a 	movw	r1, #778	; 0x30a
 8012774:	f000 ffc0 	bl	80136f8 <__assert_func>
 8012778:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801277c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012780:	bb35      	cbnz	r5, 80127d0 <__d2b+0x7c>
 8012782:	2e00      	cmp	r6, #0
 8012784:	9301      	str	r3, [sp, #4]
 8012786:	d028      	beq.n	80127da <__d2b+0x86>
 8012788:	4668      	mov	r0, sp
 801278a:	9600      	str	r6, [sp, #0]
 801278c:	f7ff fd10 	bl	80121b0 <__lo0bits>
 8012790:	9900      	ldr	r1, [sp, #0]
 8012792:	b300      	cbz	r0, 80127d6 <__d2b+0x82>
 8012794:	9a01      	ldr	r2, [sp, #4]
 8012796:	f1c0 0320 	rsb	r3, r0, #32
 801279a:	fa02 f303 	lsl.w	r3, r2, r3
 801279e:	430b      	orrs	r3, r1
 80127a0:	40c2      	lsrs	r2, r0
 80127a2:	6163      	str	r3, [r4, #20]
 80127a4:	9201      	str	r2, [sp, #4]
 80127a6:	9b01      	ldr	r3, [sp, #4]
 80127a8:	61a3      	str	r3, [r4, #24]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	bf14      	ite	ne
 80127ae:	2202      	movne	r2, #2
 80127b0:	2201      	moveq	r2, #1
 80127b2:	6122      	str	r2, [r4, #16]
 80127b4:	b1d5      	cbz	r5, 80127ec <__d2b+0x98>
 80127b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80127ba:	4405      	add	r5, r0
 80127bc:	f8c9 5000 	str.w	r5, [r9]
 80127c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80127c4:	f8c8 0000 	str.w	r0, [r8]
 80127c8:	4620      	mov	r0, r4
 80127ca:	b003      	add	sp, #12
 80127cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80127d4:	e7d5      	b.n	8012782 <__d2b+0x2e>
 80127d6:	6161      	str	r1, [r4, #20]
 80127d8:	e7e5      	b.n	80127a6 <__d2b+0x52>
 80127da:	a801      	add	r0, sp, #4
 80127dc:	f7ff fce8 	bl	80121b0 <__lo0bits>
 80127e0:	9b01      	ldr	r3, [sp, #4]
 80127e2:	6163      	str	r3, [r4, #20]
 80127e4:	2201      	movs	r2, #1
 80127e6:	6122      	str	r2, [r4, #16]
 80127e8:	3020      	adds	r0, #32
 80127ea:	e7e3      	b.n	80127b4 <__d2b+0x60>
 80127ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80127f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80127f4:	f8c9 0000 	str.w	r0, [r9]
 80127f8:	6918      	ldr	r0, [r3, #16]
 80127fa:	f7ff fcb9 	bl	8012170 <__hi0bits>
 80127fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012802:	e7df      	b.n	80127c4 <__d2b+0x70>
 8012804:	08014e6b 	.word	0x08014e6b
 8012808:	08014f5c 	.word	0x08014f5c

0801280c <__ratio>:
 801280c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012810:	4688      	mov	r8, r1
 8012812:	4669      	mov	r1, sp
 8012814:	4681      	mov	r9, r0
 8012816:	f7ff ff4d 	bl	80126b4 <__b2d>
 801281a:	a901      	add	r1, sp, #4
 801281c:	4640      	mov	r0, r8
 801281e:	ec55 4b10 	vmov	r4, r5, d0
 8012822:	f7ff ff47 	bl	80126b4 <__b2d>
 8012826:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801282a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801282e:	eba3 0c02 	sub.w	ip, r3, r2
 8012832:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012836:	1a9b      	subs	r3, r3, r2
 8012838:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801283c:	ec51 0b10 	vmov	r0, r1, d0
 8012840:	2b00      	cmp	r3, #0
 8012842:	bfd6      	itet	le
 8012844:	460a      	movle	r2, r1
 8012846:	462a      	movgt	r2, r5
 8012848:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801284c:	468b      	mov	fp, r1
 801284e:	462f      	mov	r7, r5
 8012850:	bfd4      	ite	le
 8012852:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012856:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801285a:	4620      	mov	r0, r4
 801285c:	ee10 2a10 	vmov	r2, s0
 8012860:	465b      	mov	r3, fp
 8012862:	4639      	mov	r1, r7
 8012864:	f7ee f812 	bl	800088c <__aeabi_ddiv>
 8012868:	ec41 0b10 	vmov	d0, r0, r1
 801286c:	b003      	add	sp, #12
 801286e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012872 <__copybits>:
 8012872:	3901      	subs	r1, #1
 8012874:	b570      	push	{r4, r5, r6, lr}
 8012876:	1149      	asrs	r1, r1, #5
 8012878:	6914      	ldr	r4, [r2, #16]
 801287a:	3101      	adds	r1, #1
 801287c:	f102 0314 	add.w	r3, r2, #20
 8012880:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012884:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012888:	1f05      	subs	r5, r0, #4
 801288a:	42a3      	cmp	r3, r4
 801288c:	d30c      	bcc.n	80128a8 <__copybits+0x36>
 801288e:	1aa3      	subs	r3, r4, r2
 8012890:	3b11      	subs	r3, #17
 8012892:	f023 0303 	bic.w	r3, r3, #3
 8012896:	3211      	adds	r2, #17
 8012898:	42a2      	cmp	r2, r4
 801289a:	bf88      	it	hi
 801289c:	2300      	movhi	r3, #0
 801289e:	4418      	add	r0, r3
 80128a0:	2300      	movs	r3, #0
 80128a2:	4288      	cmp	r0, r1
 80128a4:	d305      	bcc.n	80128b2 <__copybits+0x40>
 80128a6:	bd70      	pop	{r4, r5, r6, pc}
 80128a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80128ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80128b0:	e7eb      	b.n	801288a <__copybits+0x18>
 80128b2:	f840 3b04 	str.w	r3, [r0], #4
 80128b6:	e7f4      	b.n	80128a2 <__copybits+0x30>

080128b8 <__any_on>:
 80128b8:	f100 0214 	add.w	r2, r0, #20
 80128bc:	6900      	ldr	r0, [r0, #16]
 80128be:	114b      	asrs	r3, r1, #5
 80128c0:	4298      	cmp	r0, r3
 80128c2:	b510      	push	{r4, lr}
 80128c4:	db11      	blt.n	80128ea <__any_on+0x32>
 80128c6:	dd0a      	ble.n	80128de <__any_on+0x26>
 80128c8:	f011 011f 	ands.w	r1, r1, #31
 80128cc:	d007      	beq.n	80128de <__any_on+0x26>
 80128ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80128d2:	fa24 f001 	lsr.w	r0, r4, r1
 80128d6:	fa00 f101 	lsl.w	r1, r0, r1
 80128da:	428c      	cmp	r4, r1
 80128dc:	d10b      	bne.n	80128f6 <__any_on+0x3e>
 80128de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80128e2:	4293      	cmp	r3, r2
 80128e4:	d803      	bhi.n	80128ee <__any_on+0x36>
 80128e6:	2000      	movs	r0, #0
 80128e8:	bd10      	pop	{r4, pc}
 80128ea:	4603      	mov	r3, r0
 80128ec:	e7f7      	b.n	80128de <__any_on+0x26>
 80128ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80128f2:	2900      	cmp	r1, #0
 80128f4:	d0f5      	beq.n	80128e2 <__any_on+0x2a>
 80128f6:	2001      	movs	r0, #1
 80128f8:	e7f6      	b.n	80128e8 <__any_on+0x30>

080128fa <_calloc_r>:
 80128fa:	b513      	push	{r0, r1, r4, lr}
 80128fc:	434a      	muls	r2, r1
 80128fe:	4611      	mov	r1, r2
 8012900:	9201      	str	r2, [sp, #4]
 8012902:	f7fb ff89 	bl	800e818 <_malloc_r>
 8012906:	4604      	mov	r4, r0
 8012908:	b118      	cbz	r0, 8012912 <_calloc_r+0x18>
 801290a:	9a01      	ldr	r2, [sp, #4]
 801290c:	2100      	movs	r1, #0
 801290e:	f7fb ff2b 	bl	800e768 <memset>
 8012912:	4620      	mov	r0, r4
 8012914:	b002      	add	sp, #8
 8012916:	bd10      	pop	{r4, pc}

08012918 <__ssputs_r>:
 8012918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801291c:	688e      	ldr	r6, [r1, #8]
 801291e:	429e      	cmp	r6, r3
 8012920:	4682      	mov	sl, r0
 8012922:	460c      	mov	r4, r1
 8012924:	4690      	mov	r8, r2
 8012926:	461f      	mov	r7, r3
 8012928:	d838      	bhi.n	801299c <__ssputs_r+0x84>
 801292a:	898a      	ldrh	r2, [r1, #12]
 801292c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012930:	d032      	beq.n	8012998 <__ssputs_r+0x80>
 8012932:	6825      	ldr	r5, [r4, #0]
 8012934:	6909      	ldr	r1, [r1, #16]
 8012936:	eba5 0901 	sub.w	r9, r5, r1
 801293a:	6965      	ldr	r5, [r4, #20]
 801293c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012944:	3301      	adds	r3, #1
 8012946:	444b      	add	r3, r9
 8012948:	106d      	asrs	r5, r5, #1
 801294a:	429d      	cmp	r5, r3
 801294c:	bf38      	it	cc
 801294e:	461d      	movcc	r5, r3
 8012950:	0553      	lsls	r3, r2, #21
 8012952:	d531      	bpl.n	80129b8 <__ssputs_r+0xa0>
 8012954:	4629      	mov	r1, r5
 8012956:	f7fb ff5f 	bl	800e818 <_malloc_r>
 801295a:	4606      	mov	r6, r0
 801295c:	b950      	cbnz	r0, 8012974 <__ssputs_r+0x5c>
 801295e:	230c      	movs	r3, #12
 8012960:	f8ca 3000 	str.w	r3, [sl]
 8012964:	89a3      	ldrh	r3, [r4, #12]
 8012966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801296a:	81a3      	strh	r3, [r4, #12]
 801296c:	f04f 30ff 	mov.w	r0, #4294967295
 8012970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012974:	6921      	ldr	r1, [r4, #16]
 8012976:	464a      	mov	r2, r9
 8012978:	f7fb fee8 	bl	800e74c <memcpy>
 801297c:	89a3      	ldrh	r3, [r4, #12]
 801297e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012986:	81a3      	strh	r3, [r4, #12]
 8012988:	6126      	str	r6, [r4, #16]
 801298a:	6165      	str	r5, [r4, #20]
 801298c:	444e      	add	r6, r9
 801298e:	eba5 0509 	sub.w	r5, r5, r9
 8012992:	6026      	str	r6, [r4, #0]
 8012994:	60a5      	str	r5, [r4, #8]
 8012996:	463e      	mov	r6, r7
 8012998:	42be      	cmp	r6, r7
 801299a:	d900      	bls.n	801299e <__ssputs_r+0x86>
 801299c:	463e      	mov	r6, r7
 801299e:	4632      	mov	r2, r6
 80129a0:	6820      	ldr	r0, [r4, #0]
 80129a2:	4641      	mov	r1, r8
 80129a4:	f000 fefa 	bl	801379c <memmove>
 80129a8:	68a3      	ldr	r3, [r4, #8]
 80129aa:	6822      	ldr	r2, [r4, #0]
 80129ac:	1b9b      	subs	r3, r3, r6
 80129ae:	4432      	add	r2, r6
 80129b0:	60a3      	str	r3, [r4, #8]
 80129b2:	6022      	str	r2, [r4, #0]
 80129b4:	2000      	movs	r0, #0
 80129b6:	e7db      	b.n	8012970 <__ssputs_r+0x58>
 80129b8:	462a      	mov	r2, r5
 80129ba:	f000 ff09 	bl	80137d0 <_realloc_r>
 80129be:	4606      	mov	r6, r0
 80129c0:	2800      	cmp	r0, #0
 80129c2:	d1e1      	bne.n	8012988 <__ssputs_r+0x70>
 80129c4:	6921      	ldr	r1, [r4, #16]
 80129c6:	4650      	mov	r0, sl
 80129c8:	f7fb fed6 	bl	800e778 <_free_r>
 80129cc:	e7c7      	b.n	801295e <__ssputs_r+0x46>
	...

080129d0 <_svfiprintf_r>:
 80129d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d4:	4698      	mov	r8, r3
 80129d6:	898b      	ldrh	r3, [r1, #12]
 80129d8:	061b      	lsls	r3, r3, #24
 80129da:	b09d      	sub	sp, #116	; 0x74
 80129dc:	4607      	mov	r7, r0
 80129de:	460d      	mov	r5, r1
 80129e0:	4614      	mov	r4, r2
 80129e2:	d50e      	bpl.n	8012a02 <_svfiprintf_r+0x32>
 80129e4:	690b      	ldr	r3, [r1, #16]
 80129e6:	b963      	cbnz	r3, 8012a02 <_svfiprintf_r+0x32>
 80129e8:	2140      	movs	r1, #64	; 0x40
 80129ea:	f7fb ff15 	bl	800e818 <_malloc_r>
 80129ee:	6028      	str	r0, [r5, #0]
 80129f0:	6128      	str	r0, [r5, #16]
 80129f2:	b920      	cbnz	r0, 80129fe <_svfiprintf_r+0x2e>
 80129f4:	230c      	movs	r3, #12
 80129f6:	603b      	str	r3, [r7, #0]
 80129f8:	f04f 30ff 	mov.w	r0, #4294967295
 80129fc:	e0d1      	b.n	8012ba2 <_svfiprintf_r+0x1d2>
 80129fe:	2340      	movs	r3, #64	; 0x40
 8012a00:	616b      	str	r3, [r5, #20]
 8012a02:	2300      	movs	r3, #0
 8012a04:	9309      	str	r3, [sp, #36]	; 0x24
 8012a06:	2320      	movs	r3, #32
 8012a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a10:	2330      	movs	r3, #48	; 0x30
 8012a12:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012bbc <_svfiprintf_r+0x1ec>
 8012a16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a1a:	f04f 0901 	mov.w	r9, #1
 8012a1e:	4623      	mov	r3, r4
 8012a20:	469a      	mov	sl, r3
 8012a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a26:	b10a      	cbz	r2, 8012a2c <_svfiprintf_r+0x5c>
 8012a28:	2a25      	cmp	r2, #37	; 0x25
 8012a2a:	d1f9      	bne.n	8012a20 <_svfiprintf_r+0x50>
 8012a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8012a30:	d00b      	beq.n	8012a4a <_svfiprintf_r+0x7a>
 8012a32:	465b      	mov	r3, fp
 8012a34:	4622      	mov	r2, r4
 8012a36:	4629      	mov	r1, r5
 8012a38:	4638      	mov	r0, r7
 8012a3a:	f7ff ff6d 	bl	8012918 <__ssputs_r>
 8012a3e:	3001      	adds	r0, #1
 8012a40:	f000 80aa 	beq.w	8012b98 <_svfiprintf_r+0x1c8>
 8012a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a46:	445a      	add	r2, fp
 8012a48:	9209      	str	r2, [sp, #36]	; 0x24
 8012a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	f000 80a2 	beq.w	8012b98 <_svfiprintf_r+0x1c8>
 8012a54:	2300      	movs	r3, #0
 8012a56:	f04f 32ff 	mov.w	r2, #4294967295
 8012a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a5e:	f10a 0a01 	add.w	sl, sl, #1
 8012a62:	9304      	str	r3, [sp, #16]
 8012a64:	9307      	str	r3, [sp, #28]
 8012a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8012a6c:	4654      	mov	r4, sl
 8012a6e:	2205      	movs	r2, #5
 8012a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012a74:	4851      	ldr	r0, [pc, #324]	; (8012bbc <_svfiprintf_r+0x1ec>)
 8012a76:	f7ed fbd3 	bl	8000220 <memchr>
 8012a7a:	9a04      	ldr	r2, [sp, #16]
 8012a7c:	b9d8      	cbnz	r0, 8012ab6 <_svfiprintf_r+0xe6>
 8012a7e:	06d0      	lsls	r0, r2, #27
 8012a80:	bf44      	itt	mi
 8012a82:	2320      	movmi	r3, #32
 8012a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a88:	0711      	lsls	r1, r2, #28
 8012a8a:	bf44      	itt	mi
 8012a8c:	232b      	movmi	r3, #43	; 0x2b
 8012a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012a92:	f89a 3000 	ldrb.w	r3, [sl]
 8012a96:	2b2a      	cmp	r3, #42	; 0x2a
 8012a98:	d015      	beq.n	8012ac6 <_svfiprintf_r+0xf6>
 8012a9a:	9a07      	ldr	r2, [sp, #28]
 8012a9c:	4654      	mov	r4, sl
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	f04f 0c0a 	mov.w	ip, #10
 8012aa4:	4621      	mov	r1, r4
 8012aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012aaa:	3b30      	subs	r3, #48	; 0x30
 8012aac:	2b09      	cmp	r3, #9
 8012aae:	d94e      	bls.n	8012b4e <_svfiprintf_r+0x17e>
 8012ab0:	b1b0      	cbz	r0, 8012ae0 <_svfiprintf_r+0x110>
 8012ab2:	9207      	str	r2, [sp, #28]
 8012ab4:	e014      	b.n	8012ae0 <_svfiprintf_r+0x110>
 8012ab6:	eba0 0308 	sub.w	r3, r0, r8
 8012aba:	fa09 f303 	lsl.w	r3, r9, r3
 8012abe:	4313      	orrs	r3, r2
 8012ac0:	9304      	str	r3, [sp, #16]
 8012ac2:	46a2      	mov	sl, r4
 8012ac4:	e7d2      	b.n	8012a6c <_svfiprintf_r+0x9c>
 8012ac6:	9b03      	ldr	r3, [sp, #12]
 8012ac8:	1d19      	adds	r1, r3, #4
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	9103      	str	r1, [sp, #12]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	bfbb      	ittet	lt
 8012ad2:	425b      	neglt	r3, r3
 8012ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8012ad8:	9307      	strge	r3, [sp, #28]
 8012ada:	9307      	strlt	r3, [sp, #28]
 8012adc:	bfb8      	it	lt
 8012ade:	9204      	strlt	r2, [sp, #16]
 8012ae0:	7823      	ldrb	r3, [r4, #0]
 8012ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8012ae4:	d10c      	bne.n	8012b00 <_svfiprintf_r+0x130>
 8012ae6:	7863      	ldrb	r3, [r4, #1]
 8012ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8012aea:	d135      	bne.n	8012b58 <_svfiprintf_r+0x188>
 8012aec:	9b03      	ldr	r3, [sp, #12]
 8012aee:	1d1a      	adds	r2, r3, #4
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	9203      	str	r2, [sp, #12]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	bfb8      	it	lt
 8012af8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012afc:	3402      	adds	r4, #2
 8012afe:	9305      	str	r3, [sp, #20]
 8012b00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012bcc <_svfiprintf_r+0x1fc>
 8012b04:	7821      	ldrb	r1, [r4, #0]
 8012b06:	2203      	movs	r2, #3
 8012b08:	4650      	mov	r0, sl
 8012b0a:	f7ed fb89 	bl	8000220 <memchr>
 8012b0e:	b140      	cbz	r0, 8012b22 <_svfiprintf_r+0x152>
 8012b10:	2340      	movs	r3, #64	; 0x40
 8012b12:	eba0 000a 	sub.w	r0, r0, sl
 8012b16:	fa03 f000 	lsl.w	r0, r3, r0
 8012b1a:	9b04      	ldr	r3, [sp, #16]
 8012b1c:	4303      	orrs	r3, r0
 8012b1e:	3401      	adds	r4, #1
 8012b20:	9304      	str	r3, [sp, #16]
 8012b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b26:	4826      	ldr	r0, [pc, #152]	; (8012bc0 <_svfiprintf_r+0x1f0>)
 8012b28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b2c:	2206      	movs	r2, #6
 8012b2e:	f7ed fb77 	bl	8000220 <memchr>
 8012b32:	2800      	cmp	r0, #0
 8012b34:	d038      	beq.n	8012ba8 <_svfiprintf_r+0x1d8>
 8012b36:	4b23      	ldr	r3, [pc, #140]	; (8012bc4 <_svfiprintf_r+0x1f4>)
 8012b38:	bb1b      	cbnz	r3, 8012b82 <_svfiprintf_r+0x1b2>
 8012b3a:	9b03      	ldr	r3, [sp, #12]
 8012b3c:	3307      	adds	r3, #7
 8012b3e:	f023 0307 	bic.w	r3, r3, #7
 8012b42:	3308      	adds	r3, #8
 8012b44:	9303      	str	r3, [sp, #12]
 8012b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b48:	4433      	add	r3, r6
 8012b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8012b4c:	e767      	b.n	8012a1e <_svfiprintf_r+0x4e>
 8012b4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b52:	460c      	mov	r4, r1
 8012b54:	2001      	movs	r0, #1
 8012b56:	e7a5      	b.n	8012aa4 <_svfiprintf_r+0xd4>
 8012b58:	2300      	movs	r3, #0
 8012b5a:	3401      	adds	r4, #1
 8012b5c:	9305      	str	r3, [sp, #20]
 8012b5e:	4619      	mov	r1, r3
 8012b60:	f04f 0c0a 	mov.w	ip, #10
 8012b64:	4620      	mov	r0, r4
 8012b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b6a:	3a30      	subs	r2, #48	; 0x30
 8012b6c:	2a09      	cmp	r2, #9
 8012b6e:	d903      	bls.n	8012b78 <_svfiprintf_r+0x1a8>
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d0c5      	beq.n	8012b00 <_svfiprintf_r+0x130>
 8012b74:	9105      	str	r1, [sp, #20]
 8012b76:	e7c3      	b.n	8012b00 <_svfiprintf_r+0x130>
 8012b78:	fb0c 2101 	mla	r1, ip, r1, r2
 8012b7c:	4604      	mov	r4, r0
 8012b7e:	2301      	movs	r3, #1
 8012b80:	e7f0      	b.n	8012b64 <_svfiprintf_r+0x194>
 8012b82:	ab03      	add	r3, sp, #12
 8012b84:	9300      	str	r3, [sp, #0]
 8012b86:	462a      	mov	r2, r5
 8012b88:	4b0f      	ldr	r3, [pc, #60]	; (8012bc8 <_svfiprintf_r+0x1f8>)
 8012b8a:	a904      	add	r1, sp, #16
 8012b8c:	4638      	mov	r0, r7
 8012b8e:	f7fb ff3d 	bl	800ea0c <_printf_float>
 8012b92:	1c42      	adds	r2, r0, #1
 8012b94:	4606      	mov	r6, r0
 8012b96:	d1d6      	bne.n	8012b46 <_svfiprintf_r+0x176>
 8012b98:	89ab      	ldrh	r3, [r5, #12]
 8012b9a:	065b      	lsls	r3, r3, #25
 8012b9c:	f53f af2c 	bmi.w	80129f8 <_svfiprintf_r+0x28>
 8012ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012ba2:	b01d      	add	sp, #116	; 0x74
 8012ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba8:	ab03      	add	r3, sp, #12
 8012baa:	9300      	str	r3, [sp, #0]
 8012bac:	462a      	mov	r2, r5
 8012bae:	4b06      	ldr	r3, [pc, #24]	; (8012bc8 <_svfiprintf_r+0x1f8>)
 8012bb0:	a904      	add	r1, sp, #16
 8012bb2:	4638      	mov	r0, r7
 8012bb4:	f7fc f9ce 	bl	800ef54 <_printf_i>
 8012bb8:	e7eb      	b.n	8012b92 <_svfiprintf_r+0x1c2>
 8012bba:	bf00      	nop
 8012bbc:	080150bc 	.word	0x080150bc
 8012bc0:	080150c6 	.word	0x080150c6
 8012bc4:	0800ea0d 	.word	0x0800ea0d
 8012bc8:	08012919 	.word	0x08012919
 8012bcc:	080150c2 	.word	0x080150c2

08012bd0 <_sungetc_r>:
 8012bd0:	b538      	push	{r3, r4, r5, lr}
 8012bd2:	1c4b      	adds	r3, r1, #1
 8012bd4:	4614      	mov	r4, r2
 8012bd6:	d103      	bne.n	8012be0 <_sungetc_r+0x10>
 8012bd8:	f04f 35ff 	mov.w	r5, #4294967295
 8012bdc:	4628      	mov	r0, r5
 8012bde:	bd38      	pop	{r3, r4, r5, pc}
 8012be0:	8993      	ldrh	r3, [r2, #12]
 8012be2:	f023 0320 	bic.w	r3, r3, #32
 8012be6:	8193      	strh	r3, [r2, #12]
 8012be8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012bea:	6852      	ldr	r2, [r2, #4]
 8012bec:	b2cd      	uxtb	r5, r1
 8012bee:	b18b      	cbz	r3, 8012c14 <_sungetc_r+0x44>
 8012bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	dd08      	ble.n	8012c08 <_sungetc_r+0x38>
 8012bf6:	6823      	ldr	r3, [r4, #0]
 8012bf8:	1e5a      	subs	r2, r3, #1
 8012bfa:	6022      	str	r2, [r4, #0]
 8012bfc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012c00:	6863      	ldr	r3, [r4, #4]
 8012c02:	3301      	adds	r3, #1
 8012c04:	6063      	str	r3, [r4, #4]
 8012c06:	e7e9      	b.n	8012bdc <_sungetc_r+0xc>
 8012c08:	4621      	mov	r1, r4
 8012c0a:	f000 fd2d 	bl	8013668 <__submore>
 8012c0e:	2800      	cmp	r0, #0
 8012c10:	d0f1      	beq.n	8012bf6 <_sungetc_r+0x26>
 8012c12:	e7e1      	b.n	8012bd8 <_sungetc_r+0x8>
 8012c14:	6921      	ldr	r1, [r4, #16]
 8012c16:	6823      	ldr	r3, [r4, #0]
 8012c18:	b151      	cbz	r1, 8012c30 <_sungetc_r+0x60>
 8012c1a:	4299      	cmp	r1, r3
 8012c1c:	d208      	bcs.n	8012c30 <_sungetc_r+0x60>
 8012c1e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8012c22:	42a9      	cmp	r1, r5
 8012c24:	d104      	bne.n	8012c30 <_sungetc_r+0x60>
 8012c26:	3b01      	subs	r3, #1
 8012c28:	3201      	adds	r2, #1
 8012c2a:	6023      	str	r3, [r4, #0]
 8012c2c:	6062      	str	r2, [r4, #4]
 8012c2e:	e7d5      	b.n	8012bdc <_sungetc_r+0xc>
 8012c30:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8012c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c38:	6363      	str	r3, [r4, #52]	; 0x34
 8012c3a:	2303      	movs	r3, #3
 8012c3c:	63a3      	str	r3, [r4, #56]	; 0x38
 8012c3e:	4623      	mov	r3, r4
 8012c40:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012c44:	6023      	str	r3, [r4, #0]
 8012c46:	2301      	movs	r3, #1
 8012c48:	e7dc      	b.n	8012c04 <_sungetc_r+0x34>

08012c4a <__ssrefill_r>:
 8012c4a:	b510      	push	{r4, lr}
 8012c4c:	460c      	mov	r4, r1
 8012c4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012c50:	b169      	cbz	r1, 8012c6e <__ssrefill_r+0x24>
 8012c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c56:	4299      	cmp	r1, r3
 8012c58:	d001      	beq.n	8012c5e <__ssrefill_r+0x14>
 8012c5a:	f7fb fd8d 	bl	800e778 <_free_r>
 8012c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012c60:	6063      	str	r3, [r4, #4]
 8012c62:	2000      	movs	r0, #0
 8012c64:	6360      	str	r0, [r4, #52]	; 0x34
 8012c66:	b113      	cbz	r3, 8012c6e <__ssrefill_r+0x24>
 8012c68:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012c6a:	6023      	str	r3, [r4, #0]
 8012c6c:	bd10      	pop	{r4, pc}
 8012c6e:	6923      	ldr	r3, [r4, #16]
 8012c70:	6023      	str	r3, [r4, #0]
 8012c72:	2300      	movs	r3, #0
 8012c74:	6063      	str	r3, [r4, #4]
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	f043 0320 	orr.w	r3, r3, #32
 8012c7c:	81a3      	strh	r3, [r4, #12]
 8012c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c82:	e7f3      	b.n	8012c6c <__ssrefill_r+0x22>

08012c84 <__ssvfiscanf_r>:
 8012c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c88:	460c      	mov	r4, r1
 8012c8a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8012c8e:	2100      	movs	r1, #0
 8012c90:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8012c94:	49b2      	ldr	r1, [pc, #712]	; (8012f60 <__ssvfiscanf_r+0x2dc>)
 8012c96:	91a0      	str	r1, [sp, #640]	; 0x280
 8012c98:	f10d 0804 	add.w	r8, sp, #4
 8012c9c:	49b1      	ldr	r1, [pc, #708]	; (8012f64 <__ssvfiscanf_r+0x2e0>)
 8012c9e:	4fb2      	ldr	r7, [pc, #712]	; (8012f68 <__ssvfiscanf_r+0x2e4>)
 8012ca0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8012f6c <__ssvfiscanf_r+0x2e8>
 8012ca4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8012ca8:	4606      	mov	r6, r0
 8012caa:	91a1      	str	r1, [sp, #644]	; 0x284
 8012cac:	9300      	str	r3, [sp, #0]
 8012cae:	f892 a000 	ldrb.w	sl, [r2]
 8012cb2:	f1ba 0f00 	cmp.w	sl, #0
 8012cb6:	f000 8151 	beq.w	8012f5c <__ssvfiscanf_r+0x2d8>
 8012cba:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8012cbe:	f013 0308 	ands.w	r3, r3, #8
 8012cc2:	f102 0501 	add.w	r5, r2, #1
 8012cc6:	d019      	beq.n	8012cfc <__ssvfiscanf_r+0x78>
 8012cc8:	6863      	ldr	r3, [r4, #4]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	dd0f      	ble.n	8012cee <__ssvfiscanf_r+0x6a>
 8012cce:	6823      	ldr	r3, [r4, #0]
 8012cd0:	781a      	ldrb	r2, [r3, #0]
 8012cd2:	5cba      	ldrb	r2, [r7, r2]
 8012cd4:	0712      	lsls	r2, r2, #28
 8012cd6:	d401      	bmi.n	8012cdc <__ssvfiscanf_r+0x58>
 8012cd8:	462a      	mov	r2, r5
 8012cda:	e7e8      	b.n	8012cae <__ssvfiscanf_r+0x2a>
 8012cdc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012cde:	3201      	adds	r2, #1
 8012ce0:	9245      	str	r2, [sp, #276]	; 0x114
 8012ce2:	6862      	ldr	r2, [r4, #4]
 8012ce4:	3301      	adds	r3, #1
 8012ce6:	3a01      	subs	r2, #1
 8012ce8:	6062      	str	r2, [r4, #4]
 8012cea:	6023      	str	r3, [r4, #0]
 8012cec:	e7ec      	b.n	8012cc8 <__ssvfiscanf_r+0x44>
 8012cee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012cf0:	4621      	mov	r1, r4
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	4798      	blx	r3
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	d0e9      	beq.n	8012cce <__ssvfiscanf_r+0x4a>
 8012cfa:	e7ed      	b.n	8012cd8 <__ssvfiscanf_r+0x54>
 8012cfc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8012d00:	f040 8083 	bne.w	8012e0a <__ssvfiscanf_r+0x186>
 8012d04:	9341      	str	r3, [sp, #260]	; 0x104
 8012d06:	9343      	str	r3, [sp, #268]	; 0x10c
 8012d08:	7853      	ldrb	r3, [r2, #1]
 8012d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8012d0c:	bf02      	ittt	eq
 8012d0e:	2310      	moveq	r3, #16
 8012d10:	1c95      	addeq	r5, r2, #2
 8012d12:	9341      	streq	r3, [sp, #260]	; 0x104
 8012d14:	220a      	movs	r2, #10
 8012d16:	46ab      	mov	fp, r5
 8012d18:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8012d1c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012d20:	2b09      	cmp	r3, #9
 8012d22:	d91d      	bls.n	8012d60 <__ssvfiscanf_r+0xdc>
 8012d24:	4891      	ldr	r0, [pc, #580]	; (8012f6c <__ssvfiscanf_r+0x2e8>)
 8012d26:	2203      	movs	r2, #3
 8012d28:	f7ed fa7a 	bl	8000220 <memchr>
 8012d2c:	b140      	cbz	r0, 8012d40 <__ssvfiscanf_r+0xbc>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	eba0 0009 	sub.w	r0, r0, r9
 8012d34:	fa03 f000 	lsl.w	r0, r3, r0
 8012d38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012d3a:	4318      	orrs	r0, r3
 8012d3c:	9041      	str	r0, [sp, #260]	; 0x104
 8012d3e:	465d      	mov	r5, fp
 8012d40:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012d44:	2b78      	cmp	r3, #120	; 0x78
 8012d46:	d806      	bhi.n	8012d56 <__ssvfiscanf_r+0xd2>
 8012d48:	2b57      	cmp	r3, #87	; 0x57
 8012d4a:	d810      	bhi.n	8012d6e <__ssvfiscanf_r+0xea>
 8012d4c:	2b25      	cmp	r3, #37	; 0x25
 8012d4e:	d05c      	beq.n	8012e0a <__ssvfiscanf_r+0x186>
 8012d50:	d856      	bhi.n	8012e00 <__ssvfiscanf_r+0x17c>
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d074      	beq.n	8012e40 <__ssvfiscanf_r+0x1bc>
 8012d56:	2303      	movs	r3, #3
 8012d58:	9347      	str	r3, [sp, #284]	; 0x11c
 8012d5a:	230a      	movs	r3, #10
 8012d5c:	9342      	str	r3, [sp, #264]	; 0x108
 8012d5e:	e081      	b.n	8012e64 <__ssvfiscanf_r+0x1e0>
 8012d60:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012d62:	fb02 1303 	mla	r3, r2, r3, r1
 8012d66:	3b30      	subs	r3, #48	; 0x30
 8012d68:	9343      	str	r3, [sp, #268]	; 0x10c
 8012d6a:	465d      	mov	r5, fp
 8012d6c:	e7d3      	b.n	8012d16 <__ssvfiscanf_r+0x92>
 8012d6e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012d72:	2a20      	cmp	r2, #32
 8012d74:	d8ef      	bhi.n	8012d56 <__ssvfiscanf_r+0xd2>
 8012d76:	a101      	add	r1, pc, #4	; (adr r1, 8012d7c <__ssvfiscanf_r+0xf8>)
 8012d78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012d7c:	08012e4f 	.word	0x08012e4f
 8012d80:	08012d57 	.word	0x08012d57
 8012d84:	08012d57 	.word	0x08012d57
 8012d88:	08012ead 	.word	0x08012ead
 8012d8c:	08012d57 	.word	0x08012d57
 8012d90:	08012d57 	.word	0x08012d57
 8012d94:	08012d57 	.word	0x08012d57
 8012d98:	08012d57 	.word	0x08012d57
 8012d9c:	08012d57 	.word	0x08012d57
 8012da0:	08012d57 	.word	0x08012d57
 8012da4:	08012d57 	.word	0x08012d57
 8012da8:	08012ec3 	.word	0x08012ec3
 8012dac:	08012e99 	.word	0x08012e99
 8012db0:	08012e07 	.word	0x08012e07
 8012db4:	08012e07 	.word	0x08012e07
 8012db8:	08012e07 	.word	0x08012e07
 8012dbc:	08012d57 	.word	0x08012d57
 8012dc0:	08012e9d 	.word	0x08012e9d
 8012dc4:	08012d57 	.word	0x08012d57
 8012dc8:	08012d57 	.word	0x08012d57
 8012dcc:	08012d57 	.word	0x08012d57
 8012dd0:	08012d57 	.word	0x08012d57
 8012dd4:	08012ed3 	.word	0x08012ed3
 8012dd8:	08012ea5 	.word	0x08012ea5
 8012ddc:	08012e47 	.word	0x08012e47
 8012de0:	08012d57 	.word	0x08012d57
 8012de4:	08012d57 	.word	0x08012d57
 8012de8:	08012ecf 	.word	0x08012ecf
 8012dec:	08012d57 	.word	0x08012d57
 8012df0:	08012e99 	.word	0x08012e99
 8012df4:	08012d57 	.word	0x08012d57
 8012df8:	08012d57 	.word	0x08012d57
 8012dfc:	08012e4f 	.word	0x08012e4f
 8012e00:	3b45      	subs	r3, #69	; 0x45
 8012e02:	2b02      	cmp	r3, #2
 8012e04:	d8a7      	bhi.n	8012d56 <__ssvfiscanf_r+0xd2>
 8012e06:	2305      	movs	r3, #5
 8012e08:	e02b      	b.n	8012e62 <__ssvfiscanf_r+0x1de>
 8012e0a:	6863      	ldr	r3, [r4, #4]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	dd0d      	ble.n	8012e2c <__ssvfiscanf_r+0x1a8>
 8012e10:	6823      	ldr	r3, [r4, #0]
 8012e12:	781a      	ldrb	r2, [r3, #0]
 8012e14:	4552      	cmp	r2, sl
 8012e16:	f040 80a1 	bne.w	8012f5c <__ssvfiscanf_r+0x2d8>
 8012e1a:	3301      	adds	r3, #1
 8012e1c:	6862      	ldr	r2, [r4, #4]
 8012e1e:	6023      	str	r3, [r4, #0]
 8012e20:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8012e22:	3a01      	subs	r2, #1
 8012e24:	3301      	adds	r3, #1
 8012e26:	6062      	str	r2, [r4, #4]
 8012e28:	9345      	str	r3, [sp, #276]	; 0x114
 8012e2a:	e755      	b.n	8012cd8 <__ssvfiscanf_r+0x54>
 8012e2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012e2e:	4621      	mov	r1, r4
 8012e30:	4630      	mov	r0, r6
 8012e32:	4798      	blx	r3
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d0eb      	beq.n	8012e10 <__ssvfiscanf_r+0x18c>
 8012e38:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012e3a:	2800      	cmp	r0, #0
 8012e3c:	f040 8084 	bne.w	8012f48 <__ssvfiscanf_r+0x2c4>
 8012e40:	f04f 30ff 	mov.w	r0, #4294967295
 8012e44:	e086      	b.n	8012f54 <__ssvfiscanf_r+0x2d0>
 8012e46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012e48:	f042 0220 	orr.w	r2, r2, #32
 8012e4c:	9241      	str	r2, [sp, #260]	; 0x104
 8012e4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012e54:	9241      	str	r2, [sp, #260]	; 0x104
 8012e56:	2210      	movs	r2, #16
 8012e58:	2b6f      	cmp	r3, #111	; 0x6f
 8012e5a:	9242      	str	r2, [sp, #264]	; 0x108
 8012e5c:	bf34      	ite	cc
 8012e5e:	2303      	movcc	r3, #3
 8012e60:	2304      	movcs	r3, #4
 8012e62:	9347      	str	r3, [sp, #284]	; 0x11c
 8012e64:	6863      	ldr	r3, [r4, #4]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	dd41      	ble.n	8012eee <__ssvfiscanf_r+0x26a>
 8012e6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012e6c:	0659      	lsls	r1, r3, #25
 8012e6e:	d404      	bmi.n	8012e7a <__ssvfiscanf_r+0x1f6>
 8012e70:	6823      	ldr	r3, [r4, #0]
 8012e72:	781a      	ldrb	r2, [r3, #0]
 8012e74:	5cba      	ldrb	r2, [r7, r2]
 8012e76:	0712      	lsls	r2, r2, #28
 8012e78:	d440      	bmi.n	8012efc <__ssvfiscanf_r+0x278>
 8012e7a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8012e7c:	2b02      	cmp	r3, #2
 8012e7e:	dc4f      	bgt.n	8012f20 <__ssvfiscanf_r+0x29c>
 8012e80:	466b      	mov	r3, sp
 8012e82:	4622      	mov	r2, r4
 8012e84:	a941      	add	r1, sp, #260	; 0x104
 8012e86:	4630      	mov	r0, r6
 8012e88:	f000 f9ce 	bl	8013228 <_scanf_chars>
 8012e8c:	2801      	cmp	r0, #1
 8012e8e:	d065      	beq.n	8012f5c <__ssvfiscanf_r+0x2d8>
 8012e90:	2802      	cmp	r0, #2
 8012e92:	f47f af21 	bne.w	8012cd8 <__ssvfiscanf_r+0x54>
 8012e96:	e7cf      	b.n	8012e38 <__ssvfiscanf_r+0x1b4>
 8012e98:	220a      	movs	r2, #10
 8012e9a:	e7dd      	b.n	8012e58 <__ssvfiscanf_r+0x1d4>
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	9342      	str	r3, [sp, #264]	; 0x108
 8012ea0:	2303      	movs	r3, #3
 8012ea2:	e7de      	b.n	8012e62 <__ssvfiscanf_r+0x1de>
 8012ea4:	2308      	movs	r3, #8
 8012ea6:	9342      	str	r3, [sp, #264]	; 0x108
 8012ea8:	2304      	movs	r3, #4
 8012eaa:	e7da      	b.n	8012e62 <__ssvfiscanf_r+0x1de>
 8012eac:	4629      	mov	r1, r5
 8012eae:	4640      	mov	r0, r8
 8012eb0:	f000 fb22 	bl	80134f8 <__sccl>
 8012eb4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eba:	9341      	str	r3, [sp, #260]	; 0x104
 8012ebc:	4605      	mov	r5, r0
 8012ebe:	2301      	movs	r3, #1
 8012ec0:	e7cf      	b.n	8012e62 <__ssvfiscanf_r+0x1de>
 8012ec2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012ec8:	9341      	str	r3, [sp, #260]	; 0x104
 8012eca:	2300      	movs	r3, #0
 8012ecc:	e7c9      	b.n	8012e62 <__ssvfiscanf_r+0x1de>
 8012ece:	2302      	movs	r3, #2
 8012ed0:	e7c7      	b.n	8012e62 <__ssvfiscanf_r+0x1de>
 8012ed2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8012ed4:	06c3      	lsls	r3, r0, #27
 8012ed6:	f53f aeff 	bmi.w	8012cd8 <__ssvfiscanf_r+0x54>
 8012eda:	9b00      	ldr	r3, [sp, #0]
 8012edc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012ede:	1d19      	adds	r1, r3, #4
 8012ee0:	9100      	str	r1, [sp, #0]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	07c0      	lsls	r0, r0, #31
 8012ee6:	bf4c      	ite	mi
 8012ee8:	801a      	strhmi	r2, [r3, #0]
 8012eea:	601a      	strpl	r2, [r3, #0]
 8012eec:	e6f4      	b.n	8012cd8 <__ssvfiscanf_r+0x54>
 8012eee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012ef0:	4621      	mov	r1, r4
 8012ef2:	4630      	mov	r0, r6
 8012ef4:	4798      	blx	r3
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d0b7      	beq.n	8012e6a <__ssvfiscanf_r+0x1e6>
 8012efa:	e79d      	b.n	8012e38 <__ssvfiscanf_r+0x1b4>
 8012efc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8012efe:	3201      	adds	r2, #1
 8012f00:	9245      	str	r2, [sp, #276]	; 0x114
 8012f02:	6862      	ldr	r2, [r4, #4]
 8012f04:	3a01      	subs	r2, #1
 8012f06:	2a00      	cmp	r2, #0
 8012f08:	6062      	str	r2, [r4, #4]
 8012f0a:	dd02      	ble.n	8012f12 <__ssvfiscanf_r+0x28e>
 8012f0c:	3301      	adds	r3, #1
 8012f0e:	6023      	str	r3, [r4, #0]
 8012f10:	e7ae      	b.n	8012e70 <__ssvfiscanf_r+0x1ec>
 8012f12:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8012f14:	4621      	mov	r1, r4
 8012f16:	4630      	mov	r0, r6
 8012f18:	4798      	blx	r3
 8012f1a:	2800      	cmp	r0, #0
 8012f1c:	d0a8      	beq.n	8012e70 <__ssvfiscanf_r+0x1ec>
 8012f1e:	e78b      	b.n	8012e38 <__ssvfiscanf_r+0x1b4>
 8012f20:	2b04      	cmp	r3, #4
 8012f22:	dc06      	bgt.n	8012f32 <__ssvfiscanf_r+0x2ae>
 8012f24:	466b      	mov	r3, sp
 8012f26:	4622      	mov	r2, r4
 8012f28:	a941      	add	r1, sp, #260	; 0x104
 8012f2a:	4630      	mov	r0, r6
 8012f2c:	f000 f9d4 	bl	80132d8 <_scanf_i>
 8012f30:	e7ac      	b.n	8012e8c <__ssvfiscanf_r+0x208>
 8012f32:	4b0f      	ldr	r3, [pc, #60]	; (8012f70 <__ssvfiscanf_r+0x2ec>)
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	f43f aecf 	beq.w	8012cd8 <__ssvfiscanf_r+0x54>
 8012f3a:	466b      	mov	r3, sp
 8012f3c:	4622      	mov	r2, r4
 8012f3e:	a941      	add	r1, sp, #260	; 0x104
 8012f40:	4630      	mov	r0, r6
 8012f42:	f7fc f92d 	bl	800f1a0 <_scanf_float>
 8012f46:	e7a1      	b.n	8012e8c <__ssvfiscanf_r+0x208>
 8012f48:	89a3      	ldrh	r3, [r4, #12]
 8012f4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012f4e:	bf18      	it	ne
 8012f50:	f04f 30ff 	movne.w	r0, #4294967295
 8012f54:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8012f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f5c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012f5e:	e7f9      	b.n	8012f54 <__ssvfiscanf_r+0x2d0>
 8012f60:	08012bd1 	.word	0x08012bd1
 8012f64:	08012c4b 	.word	0x08012c4b
 8012f68:	08014c59 	.word	0x08014c59
 8012f6c:	080150c2 	.word	0x080150c2
 8012f70:	0800f1a1 	.word	0x0800f1a1

08012f74 <__sfputc_r>:
 8012f74:	6893      	ldr	r3, [r2, #8]
 8012f76:	3b01      	subs	r3, #1
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	b410      	push	{r4}
 8012f7c:	6093      	str	r3, [r2, #8]
 8012f7e:	da08      	bge.n	8012f92 <__sfputc_r+0x1e>
 8012f80:	6994      	ldr	r4, [r2, #24]
 8012f82:	42a3      	cmp	r3, r4
 8012f84:	db01      	blt.n	8012f8a <__sfputc_r+0x16>
 8012f86:	290a      	cmp	r1, #10
 8012f88:	d103      	bne.n	8012f92 <__sfputc_r+0x1e>
 8012f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012f8e:	f7fd badd 	b.w	801054c <__swbuf_r>
 8012f92:	6813      	ldr	r3, [r2, #0]
 8012f94:	1c58      	adds	r0, r3, #1
 8012f96:	6010      	str	r0, [r2, #0]
 8012f98:	7019      	strb	r1, [r3, #0]
 8012f9a:	4608      	mov	r0, r1
 8012f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012fa0:	4770      	bx	lr

08012fa2 <__sfputs_r>:
 8012fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fa4:	4606      	mov	r6, r0
 8012fa6:	460f      	mov	r7, r1
 8012fa8:	4614      	mov	r4, r2
 8012faa:	18d5      	adds	r5, r2, r3
 8012fac:	42ac      	cmp	r4, r5
 8012fae:	d101      	bne.n	8012fb4 <__sfputs_r+0x12>
 8012fb0:	2000      	movs	r0, #0
 8012fb2:	e007      	b.n	8012fc4 <__sfputs_r+0x22>
 8012fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fb8:	463a      	mov	r2, r7
 8012fba:	4630      	mov	r0, r6
 8012fbc:	f7ff ffda 	bl	8012f74 <__sfputc_r>
 8012fc0:	1c43      	adds	r3, r0, #1
 8012fc2:	d1f3      	bne.n	8012fac <__sfputs_r+0xa>
 8012fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012fc8 <_vfiprintf_r>:
 8012fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fcc:	460d      	mov	r5, r1
 8012fce:	b09d      	sub	sp, #116	; 0x74
 8012fd0:	4614      	mov	r4, r2
 8012fd2:	4698      	mov	r8, r3
 8012fd4:	4606      	mov	r6, r0
 8012fd6:	b118      	cbz	r0, 8012fe0 <_vfiprintf_r+0x18>
 8012fd8:	6983      	ldr	r3, [r0, #24]
 8012fda:	b90b      	cbnz	r3, 8012fe0 <_vfiprintf_r+0x18>
 8012fdc:	f7fe fb2a 	bl	8011634 <__sinit>
 8012fe0:	4b89      	ldr	r3, [pc, #548]	; (8013208 <_vfiprintf_r+0x240>)
 8012fe2:	429d      	cmp	r5, r3
 8012fe4:	d11b      	bne.n	801301e <_vfiprintf_r+0x56>
 8012fe6:	6875      	ldr	r5, [r6, #4]
 8012fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012fea:	07d9      	lsls	r1, r3, #31
 8012fec:	d405      	bmi.n	8012ffa <_vfiprintf_r+0x32>
 8012fee:	89ab      	ldrh	r3, [r5, #12]
 8012ff0:	059a      	lsls	r2, r3, #22
 8012ff2:	d402      	bmi.n	8012ffa <_vfiprintf_r+0x32>
 8012ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ff6:	f7fe ff2e 	bl	8011e56 <__retarget_lock_acquire_recursive>
 8012ffa:	89ab      	ldrh	r3, [r5, #12]
 8012ffc:	071b      	lsls	r3, r3, #28
 8012ffe:	d501      	bpl.n	8013004 <_vfiprintf_r+0x3c>
 8013000:	692b      	ldr	r3, [r5, #16]
 8013002:	b9eb      	cbnz	r3, 8013040 <_vfiprintf_r+0x78>
 8013004:	4629      	mov	r1, r5
 8013006:	4630      	mov	r0, r6
 8013008:	f7fd fb04 	bl	8010614 <__swsetup_r>
 801300c:	b1c0      	cbz	r0, 8013040 <_vfiprintf_r+0x78>
 801300e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013010:	07dc      	lsls	r4, r3, #31
 8013012:	d50e      	bpl.n	8013032 <_vfiprintf_r+0x6a>
 8013014:	f04f 30ff 	mov.w	r0, #4294967295
 8013018:	b01d      	add	sp, #116	; 0x74
 801301a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801301e:	4b7b      	ldr	r3, [pc, #492]	; (801320c <_vfiprintf_r+0x244>)
 8013020:	429d      	cmp	r5, r3
 8013022:	d101      	bne.n	8013028 <_vfiprintf_r+0x60>
 8013024:	68b5      	ldr	r5, [r6, #8]
 8013026:	e7df      	b.n	8012fe8 <_vfiprintf_r+0x20>
 8013028:	4b79      	ldr	r3, [pc, #484]	; (8013210 <_vfiprintf_r+0x248>)
 801302a:	429d      	cmp	r5, r3
 801302c:	bf08      	it	eq
 801302e:	68f5      	ldreq	r5, [r6, #12]
 8013030:	e7da      	b.n	8012fe8 <_vfiprintf_r+0x20>
 8013032:	89ab      	ldrh	r3, [r5, #12]
 8013034:	0598      	lsls	r0, r3, #22
 8013036:	d4ed      	bmi.n	8013014 <_vfiprintf_r+0x4c>
 8013038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801303a:	f7fe ff0d 	bl	8011e58 <__retarget_lock_release_recursive>
 801303e:	e7e9      	b.n	8013014 <_vfiprintf_r+0x4c>
 8013040:	2300      	movs	r3, #0
 8013042:	9309      	str	r3, [sp, #36]	; 0x24
 8013044:	2320      	movs	r3, #32
 8013046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801304a:	f8cd 800c 	str.w	r8, [sp, #12]
 801304e:	2330      	movs	r3, #48	; 0x30
 8013050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013214 <_vfiprintf_r+0x24c>
 8013054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013058:	f04f 0901 	mov.w	r9, #1
 801305c:	4623      	mov	r3, r4
 801305e:	469a      	mov	sl, r3
 8013060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013064:	b10a      	cbz	r2, 801306a <_vfiprintf_r+0xa2>
 8013066:	2a25      	cmp	r2, #37	; 0x25
 8013068:	d1f9      	bne.n	801305e <_vfiprintf_r+0x96>
 801306a:	ebba 0b04 	subs.w	fp, sl, r4
 801306e:	d00b      	beq.n	8013088 <_vfiprintf_r+0xc0>
 8013070:	465b      	mov	r3, fp
 8013072:	4622      	mov	r2, r4
 8013074:	4629      	mov	r1, r5
 8013076:	4630      	mov	r0, r6
 8013078:	f7ff ff93 	bl	8012fa2 <__sfputs_r>
 801307c:	3001      	adds	r0, #1
 801307e:	f000 80aa 	beq.w	80131d6 <_vfiprintf_r+0x20e>
 8013082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013084:	445a      	add	r2, fp
 8013086:	9209      	str	r2, [sp, #36]	; 0x24
 8013088:	f89a 3000 	ldrb.w	r3, [sl]
 801308c:	2b00      	cmp	r3, #0
 801308e:	f000 80a2 	beq.w	80131d6 <_vfiprintf_r+0x20e>
 8013092:	2300      	movs	r3, #0
 8013094:	f04f 32ff 	mov.w	r2, #4294967295
 8013098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801309c:	f10a 0a01 	add.w	sl, sl, #1
 80130a0:	9304      	str	r3, [sp, #16]
 80130a2:	9307      	str	r3, [sp, #28]
 80130a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80130a8:	931a      	str	r3, [sp, #104]	; 0x68
 80130aa:	4654      	mov	r4, sl
 80130ac:	2205      	movs	r2, #5
 80130ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80130b2:	4858      	ldr	r0, [pc, #352]	; (8013214 <_vfiprintf_r+0x24c>)
 80130b4:	f7ed f8b4 	bl	8000220 <memchr>
 80130b8:	9a04      	ldr	r2, [sp, #16]
 80130ba:	b9d8      	cbnz	r0, 80130f4 <_vfiprintf_r+0x12c>
 80130bc:	06d1      	lsls	r1, r2, #27
 80130be:	bf44      	itt	mi
 80130c0:	2320      	movmi	r3, #32
 80130c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130c6:	0713      	lsls	r3, r2, #28
 80130c8:	bf44      	itt	mi
 80130ca:	232b      	movmi	r3, #43	; 0x2b
 80130cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80130d0:	f89a 3000 	ldrb.w	r3, [sl]
 80130d4:	2b2a      	cmp	r3, #42	; 0x2a
 80130d6:	d015      	beq.n	8013104 <_vfiprintf_r+0x13c>
 80130d8:	9a07      	ldr	r2, [sp, #28]
 80130da:	4654      	mov	r4, sl
 80130dc:	2000      	movs	r0, #0
 80130de:	f04f 0c0a 	mov.w	ip, #10
 80130e2:	4621      	mov	r1, r4
 80130e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130e8:	3b30      	subs	r3, #48	; 0x30
 80130ea:	2b09      	cmp	r3, #9
 80130ec:	d94e      	bls.n	801318c <_vfiprintf_r+0x1c4>
 80130ee:	b1b0      	cbz	r0, 801311e <_vfiprintf_r+0x156>
 80130f0:	9207      	str	r2, [sp, #28]
 80130f2:	e014      	b.n	801311e <_vfiprintf_r+0x156>
 80130f4:	eba0 0308 	sub.w	r3, r0, r8
 80130f8:	fa09 f303 	lsl.w	r3, r9, r3
 80130fc:	4313      	orrs	r3, r2
 80130fe:	9304      	str	r3, [sp, #16]
 8013100:	46a2      	mov	sl, r4
 8013102:	e7d2      	b.n	80130aa <_vfiprintf_r+0xe2>
 8013104:	9b03      	ldr	r3, [sp, #12]
 8013106:	1d19      	adds	r1, r3, #4
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	9103      	str	r1, [sp, #12]
 801310c:	2b00      	cmp	r3, #0
 801310e:	bfbb      	ittet	lt
 8013110:	425b      	neglt	r3, r3
 8013112:	f042 0202 	orrlt.w	r2, r2, #2
 8013116:	9307      	strge	r3, [sp, #28]
 8013118:	9307      	strlt	r3, [sp, #28]
 801311a:	bfb8      	it	lt
 801311c:	9204      	strlt	r2, [sp, #16]
 801311e:	7823      	ldrb	r3, [r4, #0]
 8013120:	2b2e      	cmp	r3, #46	; 0x2e
 8013122:	d10c      	bne.n	801313e <_vfiprintf_r+0x176>
 8013124:	7863      	ldrb	r3, [r4, #1]
 8013126:	2b2a      	cmp	r3, #42	; 0x2a
 8013128:	d135      	bne.n	8013196 <_vfiprintf_r+0x1ce>
 801312a:	9b03      	ldr	r3, [sp, #12]
 801312c:	1d1a      	adds	r2, r3, #4
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	9203      	str	r2, [sp, #12]
 8013132:	2b00      	cmp	r3, #0
 8013134:	bfb8      	it	lt
 8013136:	f04f 33ff 	movlt.w	r3, #4294967295
 801313a:	3402      	adds	r4, #2
 801313c:	9305      	str	r3, [sp, #20]
 801313e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013224 <_vfiprintf_r+0x25c>
 8013142:	7821      	ldrb	r1, [r4, #0]
 8013144:	2203      	movs	r2, #3
 8013146:	4650      	mov	r0, sl
 8013148:	f7ed f86a 	bl	8000220 <memchr>
 801314c:	b140      	cbz	r0, 8013160 <_vfiprintf_r+0x198>
 801314e:	2340      	movs	r3, #64	; 0x40
 8013150:	eba0 000a 	sub.w	r0, r0, sl
 8013154:	fa03 f000 	lsl.w	r0, r3, r0
 8013158:	9b04      	ldr	r3, [sp, #16]
 801315a:	4303      	orrs	r3, r0
 801315c:	3401      	adds	r4, #1
 801315e:	9304      	str	r3, [sp, #16]
 8013160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013164:	482c      	ldr	r0, [pc, #176]	; (8013218 <_vfiprintf_r+0x250>)
 8013166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801316a:	2206      	movs	r2, #6
 801316c:	f7ed f858 	bl	8000220 <memchr>
 8013170:	2800      	cmp	r0, #0
 8013172:	d03f      	beq.n	80131f4 <_vfiprintf_r+0x22c>
 8013174:	4b29      	ldr	r3, [pc, #164]	; (801321c <_vfiprintf_r+0x254>)
 8013176:	bb1b      	cbnz	r3, 80131c0 <_vfiprintf_r+0x1f8>
 8013178:	9b03      	ldr	r3, [sp, #12]
 801317a:	3307      	adds	r3, #7
 801317c:	f023 0307 	bic.w	r3, r3, #7
 8013180:	3308      	adds	r3, #8
 8013182:	9303      	str	r3, [sp, #12]
 8013184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013186:	443b      	add	r3, r7
 8013188:	9309      	str	r3, [sp, #36]	; 0x24
 801318a:	e767      	b.n	801305c <_vfiprintf_r+0x94>
 801318c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013190:	460c      	mov	r4, r1
 8013192:	2001      	movs	r0, #1
 8013194:	e7a5      	b.n	80130e2 <_vfiprintf_r+0x11a>
 8013196:	2300      	movs	r3, #0
 8013198:	3401      	adds	r4, #1
 801319a:	9305      	str	r3, [sp, #20]
 801319c:	4619      	mov	r1, r3
 801319e:	f04f 0c0a 	mov.w	ip, #10
 80131a2:	4620      	mov	r0, r4
 80131a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80131a8:	3a30      	subs	r2, #48	; 0x30
 80131aa:	2a09      	cmp	r2, #9
 80131ac:	d903      	bls.n	80131b6 <_vfiprintf_r+0x1ee>
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d0c5      	beq.n	801313e <_vfiprintf_r+0x176>
 80131b2:	9105      	str	r1, [sp, #20]
 80131b4:	e7c3      	b.n	801313e <_vfiprintf_r+0x176>
 80131b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80131ba:	4604      	mov	r4, r0
 80131bc:	2301      	movs	r3, #1
 80131be:	e7f0      	b.n	80131a2 <_vfiprintf_r+0x1da>
 80131c0:	ab03      	add	r3, sp, #12
 80131c2:	9300      	str	r3, [sp, #0]
 80131c4:	462a      	mov	r2, r5
 80131c6:	4b16      	ldr	r3, [pc, #88]	; (8013220 <_vfiprintf_r+0x258>)
 80131c8:	a904      	add	r1, sp, #16
 80131ca:	4630      	mov	r0, r6
 80131cc:	f7fb fc1e 	bl	800ea0c <_printf_float>
 80131d0:	4607      	mov	r7, r0
 80131d2:	1c78      	adds	r0, r7, #1
 80131d4:	d1d6      	bne.n	8013184 <_vfiprintf_r+0x1bc>
 80131d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80131d8:	07d9      	lsls	r1, r3, #31
 80131da:	d405      	bmi.n	80131e8 <_vfiprintf_r+0x220>
 80131dc:	89ab      	ldrh	r3, [r5, #12]
 80131de:	059a      	lsls	r2, r3, #22
 80131e0:	d402      	bmi.n	80131e8 <_vfiprintf_r+0x220>
 80131e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80131e4:	f7fe fe38 	bl	8011e58 <__retarget_lock_release_recursive>
 80131e8:	89ab      	ldrh	r3, [r5, #12]
 80131ea:	065b      	lsls	r3, r3, #25
 80131ec:	f53f af12 	bmi.w	8013014 <_vfiprintf_r+0x4c>
 80131f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131f2:	e711      	b.n	8013018 <_vfiprintf_r+0x50>
 80131f4:	ab03      	add	r3, sp, #12
 80131f6:	9300      	str	r3, [sp, #0]
 80131f8:	462a      	mov	r2, r5
 80131fa:	4b09      	ldr	r3, [pc, #36]	; (8013220 <_vfiprintf_r+0x258>)
 80131fc:	a904      	add	r1, sp, #16
 80131fe:	4630      	mov	r0, r6
 8013200:	f7fb fea8 	bl	800ef54 <_printf_i>
 8013204:	e7e4      	b.n	80131d0 <_vfiprintf_r+0x208>
 8013206:	bf00      	nop
 8013208:	08014e9c 	.word	0x08014e9c
 801320c:	08014ebc 	.word	0x08014ebc
 8013210:	08014e7c 	.word	0x08014e7c
 8013214:	080150bc 	.word	0x080150bc
 8013218:	080150c6 	.word	0x080150c6
 801321c:	0800ea0d 	.word	0x0800ea0d
 8013220:	08012fa3 	.word	0x08012fa3
 8013224:	080150c2 	.word	0x080150c2

08013228 <_scanf_chars>:
 8013228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801322c:	4615      	mov	r5, r2
 801322e:	688a      	ldr	r2, [r1, #8]
 8013230:	4680      	mov	r8, r0
 8013232:	460c      	mov	r4, r1
 8013234:	b932      	cbnz	r2, 8013244 <_scanf_chars+0x1c>
 8013236:	698a      	ldr	r2, [r1, #24]
 8013238:	2a00      	cmp	r2, #0
 801323a:	bf0c      	ite	eq
 801323c:	2201      	moveq	r2, #1
 801323e:	f04f 32ff 	movne.w	r2, #4294967295
 8013242:	608a      	str	r2, [r1, #8]
 8013244:	6822      	ldr	r2, [r4, #0]
 8013246:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80132d4 <_scanf_chars+0xac>
 801324a:	06d1      	lsls	r1, r2, #27
 801324c:	bf5f      	itttt	pl
 801324e:	681a      	ldrpl	r2, [r3, #0]
 8013250:	1d11      	addpl	r1, r2, #4
 8013252:	6019      	strpl	r1, [r3, #0]
 8013254:	6816      	ldrpl	r6, [r2, #0]
 8013256:	2700      	movs	r7, #0
 8013258:	69a0      	ldr	r0, [r4, #24]
 801325a:	b188      	cbz	r0, 8013280 <_scanf_chars+0x58>
 801325c:	2801      	cmp	r0, #1
 801325e:	d107      	bne.n	8013270 <_scanf_chars+0x48>
 8013260:	682b      	ldr	r3, [r5, #0]
 8013262:	781a      	ldrb	r2, [r3, #0]
 8013264:	6963      	ldr	r3, [r4, #20]
 8013266:	5c9b      	ldrb	r3, [r3, r2]
 8013268:	b953      	cbnz	r3, 8013280 <_scanf_chars+0x58>
 801326a:	bb27      	cbnz	r7, 80132b6 <_scanf_chars+0x8e>
 801326c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013270:	2802      	cmp	r0, #2
 8013272:	d120      	bne.n	80132b6 <_scanf_chars+0x8e>
 8013274:	682b      	ldr	r3, [r5, #0]
 8013276:	781b      	ldrb	r3, [r3, #0]
 8013278:	f813 3009 	ldrb.w	r3, [r3, r9]
 801327c:	071b      	lsls	r3, r3, #28
 801327e:	d41a      	bmi.n	80132b6 <_scanf_chars+0x8e>
 8013280:	6823      	ldr	r3, [r4, #0]
 8013282:	06da      	lsls	r2, r3, #27
 8013284:	bf5e      	ittt	pl
 8013286:	682b      	ldrpl	r3, [r5, #0]
 8013288:	781b      	ldrbpl	r3, [r3, #0]
 801328a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801328e:	682a      	ldr	r2, [r5, #0]
 8013290:	686b      	ldr	r3, [r5, #4]
 8013292:	3201      	adds	r2, #1
 8013294:	602a      	str	r2, [r5, #0]
 8013296:	68a2      	ldr	r2, [r4, #8]
 8013298:	3b01      	subs	r3, #1
 801329a:	3a01      	subs	r2, #1
 801329c:	606b      	str	r3, [r5, #4]
 801329e:	3701      	adds	r7, #1
 80132a0:	60a2      	str	r2, [r4, #8]
 80132a2:	b142      	cbz	r2, 80132b6 <_scanf_chars+0x8e>
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	dcd7      	bgt.n	8013258 <_scanf_chars+0x30>
 80132a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80132ac:	4629      	mov	r1, r5
 80132ae:	4640      	mov	r0, r8
 80132b0:	4798      	blx	r3
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d0d0      	beq.n	8013258 <_scanf_chars+0x30>
 80132b6:	6823      	ldr	r3, [r4, #0]
 80132b8:	f013 0310 	ands.w	r3, r3, #16
 80132bc:	d105      	bne.n	80132ca <_scanf_chars+0xa2>
 80132be:	68e2      	ldr	r2, [r4, #12]
 80132c0:	3201      	adds	r2, #1
 80132c2:	60e2      	str	r2, [r4, #12]
 80132c4:	69a2      	ldr	r2, [r4, #24]
 80132c6:	b102      	cbz	r2, 80132ca <_scanf_chars+0xa2>
 80132c8:	7033      	strb	r3, [r6, #0]
 80132ca:	6923      	ldr	r3, [r4, #16]
 80132cc:	441f      	add	r7, r3
 80132ce:	6127      	str	r7, [r4, #16]
 80132d0:	2000      	movs	r0, #0
 80132d2:	e7cb      	b.n	801326c <_scanf_chars+0x44>
 80132d4:	08014c59 	.word	0x08014c59

080132d8 <_scanf_i>:
 80132d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132dc:	4698      	mov	r8, r3
 80132de:	4b74      	ldr	r3, [pc, #464]	; (80134b0 <_scanf_i+0x1d8>)
 80132e0:	460c      	mov	r4, r1
 80132e2:	4682      	mov	sl, r0
 80132e4:	4616      	mov	r6, r2
 80132e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80132ea:	b087      	sub	sp, #28
 80132ec:	ab03      	add	r3, sp, #12
 80132ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80132f2:	4b70      	ldr	r3, [pc, #448]	; (80134b4 <_scanf_i+0x1dc>)
 80132f4:	69a1      	ldr	r1, [r4, #24]
 80132f6:	4a70      	ldr	r2, [pc, #448]	; (80134b8 <_scanf_i+0x1e0>)
 80132f8:	2903      	cmp	r1, #3
 80132fa:	bf18      	it	ne
 80132fc:	461a      	movne	r2, r3
 80132fe:	68a3      	ldr	r3, [r4, #8]
 8013300:	9201      	str	r2, [sp, #4]
 8013302:	1e5a      	subs	r2, r3, #1
 8013304:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013308:	bf88      	it	hi
 801330a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801330e:	4627      	mov	r7, r4
 8013310:	bf82      	ittt	hi
 8013312:	eb03 0905 	addhi.w	r9, r3, r5
 8013316:	f240 135d 	movwhi	r3, #349	; 0x15d
 801331a:	60a3      	strhi	r3, [r4, #8]
 801331c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8013320:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8013324:	bf98      	it	ls
 8013326:	f04f 0900 	movls.w	r9, #0
 801332a:	6023      	str	r3, [r4, #0]
 801332c:	463d      	mov	r5, r7
 801332e:	f04f 0b00 	mov.w	fp, #0
 8013332:	6831      	ldr	r1, [r6, #0]
 8013334:	ab03      	add	r3, sp, #12
 8013336:	7809      	ldrb	r1, [r1, #0]
 8013338:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801333c:	2202      	movs	r2, #2
 801333e:	f7ec ff6f 	bl	8000220 <memchr>
 8013342:	b328      	cbz	r0, 8013390 <_scanf_i+0xb8>
 8013344:	f1bb 0f01 	cmp.w	fp, #1
 8013348:	d159      	bne.n	80133fe <_scanf_i+0x126>
 801334a:	6862      	ldr	r2, [r4, #4]
 801334c:	b92a      	cbnz	r2, 801335a <_scanf_i+0x82>
 801334e:	6822      	ldr	r2, [r4, #0]
 8013350:	2308      	movs	r3, #8
 8013352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013356:	6063      	str	r3, [r4, #4]
 8013358:	6022      	str	r2, [r4, #0]
 801335a:	6822      	ldr	r2, [r4, #0]
 801335c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8013360:	6022      	str	r2, [r4, #0]
 8013362:	68a2      	ldr	r2, [r4, #8]
 8013364:	1e51      	subs	r1, r2, #1
 8013366:	60a1      	str	r1, [r4, #8]
 8013368:	b192      	cbz	r2, 8013390 <_scanf_i+0xb8>
 801336a:	6832      	ldr	r2, [r6, #0]
 801336c:	1c51      	adds	r1, r2, #1
 801336e:	6031      	str	r1, [r6, #0]
 8013370:	7812      	ldrb	r2, [r2, #0]
 8013372:	f805 2b01 	strb.w	r2, [r5], #1
 8013376:	6872      	ldr	r2, [r6, #4]
 8013378:	3a01      	subs	r2, #1
 801337a:	2a00      	cmp	r2, #0
 801337c:	6072      	str	r2, [r6, #4]
 801337e:	dc07      	bgt.n	8013390 <_scanf_i+0xb8>
 8013380:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8013384:	4631      	mov	r1, r6
 8013386:	4650      	mov	r0, sl
 8013388:	4790      	blx	r2
 801338a:	2800      	cmp	r0, #0
 801338c:	f040 8085 	bne.w	801349a <_scanf_i+0x1c2>
 8013390:	f10b 0b01 	add.w	fp, fp, #1
 8013394:	f1bb 0f03 	cmp.w	fp, #3
 8013398:	d1cb      	bne.n	8013332 <_scanf_i+0x5a>
 801339a:	6863      	ldr	r3, [r4, #4]
 801339c:	b90b      	cbnz	r3, 80133a2 <_scanf_i+0xca>
 801339e:	230a      	movs	r3, #10
 80133a0:	6063      	str	r3, [r4, #4]
 80133a2:	6863      	ldr	r3, [r4, #4]
 80133a4:	4945      	ldr	r1, [pc, #276]	; (80134bc <_scanf_i+0x1e4>)
 80133a6:	6960      	ldr	r0, [r4, #20]
 80133a8:	1ac9      	subs	r1, r1, r3
 80133aa:	f000 f8a5 	bl	80134f8 <__sccl>
 80133ae:	f04f 0b00 	mov.w	fp, #0
 80133b2:	68a3      	ldr	r3, [r4, #8]
 80133b4:	6822      	ldr	r2, [r4, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d03d      	beq.n	8013436 <_scanf_i+0x15e>
 80133ba:	6831      	ldr	r1, [r6, #0]
 80133bc:	6960      	ldr	r0, [r4, #20]
 80133be:	f891 c000 	ldrb.w	ip, [r1]
 80133c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80133c6:	2800      	cmp	r0, #0
 80133c8:	d035      	beq.n	8013436 <_scanf_i+0x15e>
 80133ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80133ce:	d124      	bne.n	801341a <_scanf_i+0x142>
 80133d0:	0510      	lsls	r0, r2, #20
 80133d2:	d522      	bpl.n	801341a <_scanf_i+0x142>
 80133d4:	f10b 0b01 	add.w	fp, fp, #1
 80133d8:	f1b9 0f00 	cmp.w	r9, #0
 80133dc:	d003      	beq.n	80133e6 <_scanf_i+0x10e>
 80133de:	3301      	adds	r3, #1
 80133e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80133e4:	60a3      	str	r3, [r4, #8]
 80133e6:	6873      	ldr	r3, [r6, #4]
 80133e8:	3b01      	subs	r3, #1
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	6073      	str	r3, [r6, #4]
 80133ee:	dd1b      	ble.n	8013428 <_scanf_i+0x150>
 80133f0:	6833      	ldr	r3, [r6, #0]
 80133f2:	3301      	adds	r3, #1
 80133f4:	6033      	str	r3, [r6, #0]
 80133f6:	68a3      	ldr	r3, [r4, #8]
 80133f8:	3b01      	subs	r3, #1
 80133fa:	60a3      	str	r3, [r4, #8]
 80133fc:	e7d9      	b.n	80133b2 <_scanf_i+0xda>
 80133fe:	f1bb 0f02 	cmp.w	fp, #2
 8013402:	d1ae      	bne.n	8013362 <_scanf_i+0x8a>
 8013404:	6822      	ldr	r2, [r4, #0]
 8013406:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801340a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801340e:	d1bf      	bne.n	8013390 <_scanf_i+0xb8>
 8013410:	2310      	movs	r3, #16
 8013412:	6063      	str	r3, [r4, #4]
 8013414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013418:	e7a2      	b.n	8013360 <_scanf_i+0x88>
 801341a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801341e:	6022      	str	r2, [r4, #0]
 8013420:	780b      	ldrb	r3, [r1, #0]
 8013422:	f805 3b01 	strb.w	r3, [r5], #1
 8013426:	e7de      	b.n	80133e6 <_scanf_i+0x10e>
 8013428:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801342c:	4631      	mov	r1, r6
 801342e:	4650      	mov	r0, sl
 8013430:	4798      	blx	r3
 8013432:	2800      	cmp	r0, #0
 8013434:	d0df      	beq.n	80133f6 <_scanf_i+0x11e>
 8013436:	6823      	ldr	r3, [r4, #0]
 8013438:	05d9      	lsls	r1, r3, #23
 801343a:	d50d      	bpl.n	8013458 <_scanf_i+0x180>
 801343c:	42bd      	cmp	r5, r7
 801343e:	d909      	bls.n	8013454 <_scanf_i+0x17c>
 8013440:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013448:	4632      	mov	r2, r6
 801344a:	4650      	mov	r0, sl
 801344c:	4798      	blx	r3
 801344e:	f105 39ff 	add.w	r9, r5, #4294967295
 8013452:	464d      	mov	r5, r9
 8013454:	42bd      	cmp	r5, r7
 8013456:	d028      	beq.n	80134aa <_scanf_i+0x1d2>
 8013458:	6822      	ldr	r2, [r4, #0]
 801345a:	f012 0210 	ands.w	r2, r2, #16
 801345e:	d113      	bne.n	8013488 <_scanf_i+0x1b0>
 8013460:	702a      	strb	r2, [r5, #0]
 8013462:	6863      	ldr	r3, [r4, #4]
 8013464:	9e01      	ldr	r6, [sp, #4]
 8013466:	4639      	mov	r1, r7
 8013468:	4650      	mov	r0, sl
 801346a:	47b0      	blx	r6
 801346c:	f8d8 3000 	ldr.w	r3, [r8]
 8013470:	6821      	ldr	r1, [r4, #0]
 8013472:	1d1a      	adds	r2, r3, #4
 8013474:	f8c8 2000 	str.w	r2, [r8]
 8013478:	f011 0f20 	tst.w	r1, #32
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	d00f      	beq.n	80134a0 <_scanf_i+0x1c8>
 8013480:	6018      	str	r0, [r3, #0]
 8013482:	68e3      	ldr	r3, [r4, #12]
 8013484:	3301      	adds	r3, #1
 8013486:	60e3      	str	r3, [r4, #12]
 8013488:	1bed      	subs	r5, r5, r7
 801348a:	44ab      	add	fp, r5
 801348c:	6925      	ldr	r5, [r4, #16]
 801348e:	445d      	add	r5, fp
 8013490:	6125      	str	r5, [r4, #16]
 8013492:	2000      	movs	r0, #0
 8013494:	b007      	add	sp, #28
 8013496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801349a:	f04f 0b00 	mov.w	fp, #0
 801349e:	e7ca      	b.n	8013436 <_scanf_i+0x15e>
 80134a0:	07ca      	lsls	r2, r1, #31
 80134a2:	bf4c      	ite	mi
 80134a4:	8018      	strhmi	r0, [r3, #0]
 80134a6:	6018      	strpl	r0, [r3, #0]
 80134a8:	e7eb      	b.n	8013482 <_scanf_i+0x1aa>
 80134aa:	2001      	movs	r0, #1
 80134ac:	e7f2      	b.n	8013494 <_scanf_i+0x1bc>
 80134ae:	bf00      	nop
 80134b0:	08014b5c 	.word	0x08014b5c
 80134b4:	08013665 	.word	0x08013665
 80134b8:	080104c1 	.word	0x080104c1
 80134bc:	080150e6 	.word	0x080150e6

080134c0 <_read_r>:
 80134c0:	b538      	push	{r3, r4, r5, lr}
 80134c2:	4d07      	ldr	r5, [pc, #28]	; (80134e0 <_read_r+0x20>)
 80134c4:	4604      	mov	r4, r0
 80134c6:	4608      	mov	r0, r1
 80134c8:	4611      	mov	r1, r2
 80134ca:	2200      	movs	r2, #0
 80134cc:	602a      	str	r2, [r5, #0]
 80134ce:	461a      	mov	r2, r3
 80134d0:	f7f1 f896 	bl	8004600 <_read>
 80134d4:	1c43      	adds	r3, r0, #1
 80134d6:	d102      	bne.n	80134de <_read_r+0x1e>
 80134d8:	682b      	ldr	r3, [r5, #0]
 80134da:	b103      	cbz	r3, 80134de <_read_r+0x1e>
 80134dc:	6023      	str	r3, [r4, #0]
 80134de:	bd38      	pop	{r3, r4, r5, pc}
 80134e0:	20001a44 	.word	0x20001a44
 80134e4:	00000000 	.word	0x00000000

080134e8 <nan>:
 80134e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80134f0 <nan+0x8>
 80134ec:	4770      	bx	lr
 80134ee:	bf00      	nop
 80134f0:	00000000 	.word	0x00000000
 80134f4:	7ff80000 	.word	0x7ff80000

080134f8 <__sccl>:
 80134f8:	b570      	push	{r4, r5, r6, lr}
 80134fa:	780b      	ldrb	r3, [r1, #0]
 80134fc:	4604      	mov	r4, r0
 80134fe:	2b5e      	cmp	r3, #94	; 0x5e
 8013500:	bf0b      	itete	eq
 8013502:	784b      	ldrbeq	r3, [r1, #1]
 8013504:	1c48      	addne	r0, r1, #1
 8013506:	1c88      	addeq	r0, r1, #2
 8013508:	2200      	movne	r2, #0
 801350a:	bf08      	it	eq
 801350c:	2201      	moveq	r2, #1
 801350e:	1e61      	subs	r1, r4, #1
 8013510:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8013514:	f801 2f01 	strb.w	r2, [r1, #1]!
 8013518:	42a9      	cmp	r1, r5
 801351a:	d1fb      	bne.n	8013514 <__sccl+0x1c>
 801351c:	b90b      	cbnz	r3, 8013522 <__sccl+0x2a>
 801351e:	3801      	subs	r0, #1
 8013520:	bd70      	pop	{r4, r5, r6, pc}
 8013522:	f082 0101 	eor.w	r1, r2, #1
 8013526:	54e1      	strb	r1, [r4, r3]
 8013528:	1c42      	adds	r2, r0, #1
 801352a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801352e:	2d2d      	cmp	r5, #45	; 0x2d
 8013530:	f102 36ff 	add.w	r6, r2, #4294967295
 8013534:	4610      	mov	r0, r2
 8013536:	d006      	beq.n	8013546 <__sccl+0x4e>
 8013538:	2d5d      	cmp	r5, #93	; 0x5d
 801353a:	d0f1      	beq.n	8013520 <__sccl+0x28>
 801353c:	b90d      	cbnz	r5, 8013542 <__sccl+0x4a>
 801353e:	4630      	mov	r0, r6
 8013540:	e7ee      	b.n	8013520 <__sccl+0x28>
 8013542:	462b      	mov	r3, r5
 8013544:	e7ef      	b.n	8013526 <__sccl+0x2e>
 8013546:	7816      	ldrb	r6, [r2, #0]
 8013548:	2e5d      	cmp	r6, #93	; 0x5d
 801354a:	d0fa      	beq.n	8013542 <__sccl+0x4a>
 801354c:	42b3      	cmp	r3, r6
 801354e:	dcf8      	bgt.n	8013542 <__sccl+0x4a>
 8013550:	4618      	mov	r0, r3
 8013552:	3001      	adds	r0, #1
 8013554:	4286      	cmp	r6, r0
 8013556:	5421      	strb	r1, [r4, r0]
 8013558:	dcfb      	bgt.n	8013552 <__sccl+0x5a>
 801355a:	43d8      	mvns	r0, r3
 801355c:	4430      	add	r0, r6
 801355e:	1c5d      	adds	r5, r3, #1
 8013560:	42b3      	cmp	r3, r6
 8013562:	bfa8      	it	ge
 8013564:	2000      	movge	r0, #0
 8013566:	182b      	adds	r3, r5, r0
 8013568:	3202      	adds	r2, #2
 801356a:	e7de      	b.n	801352a <__sccl+0x32>

0801356c <_strtoul_l.isra.0>:
 801356c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013570:	4e3b      	ldr	r6, [pc, #236]	; (8013660 <_strtoul_l.isra.0+0xf4>)
 8013572:	4686      	mov	lr, r0
 8013574:	468c      	mov	ip, r1
 8013576:	4660      	mov	r0, ip
 8013578:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801357c:	5da5      	ldrb	r5, [r4, r6]
 801357e:	f015 0508 	ands.w	r5, r5, #8
 8013582:	d1f8      	bne.n	8013576 <_strtoul_l.isra.0+0xa>
 8013584:	2c2d      	cmp	r4, #45	; 0x2d
 8013586:	d134      	bne.n	80135f2 <_strtoul_l.isra.0+0x86>
 8013588:	f89c 4000 	ldrb.w	r4, [ip]
 801358c:	f04f 0801 	mov.w	r8, #1
 8013590:	f100 0c02 	add.w	ip, r0, #2
 8013594:	2b00      	cmp	r3, #0
 8013596:	d05e      	beq.n	8013656 <_strtoul_l.isra.0+0xea>
 8013598:	2b10      	cmp	r3, #16
 801359a:	d10c      	bne.n	80135b6 <_strtoul_l.isra.0+0x4a>
 801359c:	2c30      	cmp	r4, #48	; 0x30
 801359e:	d10a      	bne.n	80135b6 <_strtoul_l.isra.0+0x4a>
 80135a0:	f89c 0000 	ldrb.w	r0, [ip]
 80135a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80135a8:	2858      	cmp	r0, #88	; 0x58
 80135aa:	d14f      	bne.n	801364c <_strtoul_l.isra.0+0xe0>
 80135ac:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80135b0:	2310      	movs	r3, #16
 80135b2:	f10c 0c02 	add.w	ip, ip, #2
 80135b6:	f04f 37ff 	mov.w	r7, #4294967295
 80135ba:	2500      	movs	r5, #0
 80135bc:	fbb7 f7f3 	udiv	r7, r7, r3
 80135c0:	fb03 f907 	mul.w	r9, r3, r7
 80135c4:	ea6f 0909 	mvn.w	r9, r9
 80135c8:	4628      	mov	r0, r5
 80135ca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80135ce:	2e09      	cmp	r6, #9
 80135d0:	d818      	bhi.n	8013604 <_strtoul_l.isra.0+0x98>
 80135d2:	4634      	mov	r4, r6
 80135d4:	42a3      	cmp	r3, r4
 80135d6:	dd24      	ble.n	8013622 <_strtoul_l.isra.0+0xb6>
 80135d8:	2d00      	cmp	r5, #0
 80135da:	db1f      	blt.n	801361c <_strtoul_l.isra.0+0xb0>
 80135dc:	4287      	cmp	r7, r0
 80135de:	d31d      	bcc.n	801361c <_strtoul_l.isra.0+0xb0>
 80135e0:	d101      	bne.n	80135e6 <_strtoul_l.isra.0+0x7a>
 80135e2:	45a1      	cmp	r9, r4
 80135e4:	db1a      	blt.n	801361c <_strtoul_l.isra.0+0xb0>
 80135e6:	fb00 4003 	mla	r0, r0, r3, r4
 80135ea:	2501      	movs	r5, #1
 80135ec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80135f0:	e7eb      	b.n	80135ca <_strtoul_l.isra.0+0x5e>
 80135f2:	2c2b      	cmp	r4, #43	; 0x2b
 80135f4:	bf08      	it	eq
 80135f6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80135fa:	46a8      	mov	r8, r5
 80135fc:	bf08      	it	eq
 80135fe:	f100 0c02 	addeq.w	ip, r0, #2
 8013602:	e7c7      	b.n	8013594 <_strtoul_l.isra.0+0x28>
 8013604:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8013608:	2e19      	cmp	r6, #25
 801360a:	d801      	bhi.n	8013610 <_strtoul_l.isra.0+0xa4>
 801360c:	3c37      	subs	r4, #55	; 0x37
 801360e:	e7e1      	b.n	80135d4 <_strtoul_l.isra.0+0x68>
 8013610:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8013614:	2e19      	cmp	r6, #25
 8013616:	d804      	bhi.n	8013622 <_strtoul_l.isra.0+0xb6>
 8013618:	3c57      	subs	r4, #87	; 0x57
 801361a:	e7db      	b.n	80135d4 <_strtoul_l.isra.0+0x68>
 801361c:	f04f 35ff 	mov.w	r5, #4294967295
 8013620:	e7e4      	b.n	80135ec <_strtoul_l.isra.0+0x80>
 8013622:	2d00      	cmp	r5, #0
 8013624:	da07      	bge.n	8013636 <_strtoul_l.isra.0+0xca>
 8013626:	2322      	movs	r3, #34	; 0x22
 8013628:	f8ce 3000 	str.w	r3, [lr]
 801362c:	f04f 30ff 	mov.w	r0, #4294967295
 8013630:	b942      	cbnz	r2, 8013644 <_strtoul_l.isra.0+0xd8>
 8013632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013636:	f1b8 0f00 	cmp.w	r8, #0
 801363a:	d000      	beq.n	801363e <_strtoul_l.isra.0+0xd2>
 801363c:	4240      	negs	r0, r0
 801363e:	2a00      	cmp	r2, #0
 8013640:	d0f7      	beq.n	8013632 <_strtoul_l.isra.0+0xc6>
 8013642:	b10d      	cbz	r5, 8013648 <_strtoul_l.isra.0+0xdc>
 8013644:	f10c 31ff 	add.w	r1, ip, #4294967295
 8013648:	6011      	str	r1, [r2, #0]
 801364a:	e7f2      	b.n	8013632 <_strtoul_l.isra.0+0xc6>
 801364c:	2430      	movs	r4, #48	; 0x30
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1b1      	bne.n	80135b6 <_strtoul_l.isra.0+0x4a>
 8013652:	2308      	movs	r3, #8
 8013654:	e7af      	b.n	80135b6 <_strtoul_l.isra.0+0x4a>
 8013656:	2c30      	cmp	r4, #48	; 0x30
 8013658:	d0a2      	beq.n	80135a0 <_strtoul_l.isra.0+0x34>
 801365a:	230a      	movs	r3, #10
 801365c:	e7ab      	b.n	80135b6 <_strtoul_l.isra.0+0x4a>
 801365e:	bf00      	nop
 8013660:	08014c59 	.word	0x08014c59

08013664 <_strtoul_r>:
 8013664:	f7ff bf82 	b.w	801356c <_strtoul_l.isra.0>

08013668 <__submore>:
 8013668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801366c:	460c      	mov	r4, r1
 801366e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013670:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013674:	4299      	cmp	r1, r3
 8013676:	d11d      	bne.n	80136b4 <__submore+0x4c>
 8013678:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801367c:	f7fb f8cc 	bl	800e818 <_malloc_r>
 8013680:	b918      	cbnz	r0, 801368a <__submore+0x22>
 8013682:	f04f 30ff 	mov.w	r0, #4294967295
 8013686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801368a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801368e:	63a3      	str	r3, [r4, #56]	; 0x38
 8013690:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8013694:	6360      	str	r0, [r4, #52]	; 0x34
 8013696:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801369a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801369e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80136a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80136a6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80136aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80136ae:	6020      	str	r0, [r4, #0]
 80136b0:	2000      	movs	r0, #0
 80136b2:	e7e8      	b.n	8013686 <__submore+0x1e>
 80136b4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80136b6:	0077      	lsls	r7, r6, #1
 80136b8:	463a      	mov	r2, r7
 80136ba:	f000 f889 	bl	80137d0 <_realloc_r>
 80136be:	4605      	mov	r5, r0
 80136c0:	2800      	cmp	r0, #0
 80136c2:	d0de      	beq.n	8013682 <__submore+0x1a>
 80136c4:	eb00 0806 	add.w	r8, r0, r6
 80136c8:	4601      	mov	r1, r0
 80136ca:	4632      	mov	r2, r6
 80136cc:	4640      	mov	r0, r8
 80136ce:	f7fb f83d 	bl	800e74c <memcpy>
 80136d2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80136d6:	f8c4 8000 	str.w	r8, [r4]
 80136da:	e7e9      	b.n	80136b0 <__submore+0x48>

080136dc <__ascii_wctomb>:
 80136dc:	b149      	cbz	r1, 80136f2 <__ascii_wctomb+0x16>
 80136de:	2aff      	cmp	r2, #255	; 0xff
 80136e0:	bf85      	ittet	hi
 80136e2:	238a      	movhi	r3, #138	; 0x8a
 80136e4:	6003      	strhi	r3, [r0, #0]
 80136e6:	700a      	strbls	r2, [r1, #0]
 80136e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80136ec:	bf98      	it	ls
 80136ee:	2001      	movls	r0, #1
 80136f0:	4770      	bx	lr
 80136f2:	4608      	mov	r0, r1
 80136f4:	4770      	bx	lr
	...

080136f8 <__assert_func>:
 80136f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136fa:	4614      	mov	r4, r2
 80136fc:	461a      	mov	r2, r3
 80136fe:	4b09      	ldr	r3, [pc, #36]	; (8013724 <__assert_func+0x2c>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	4605      	mov	r5, r0
 8013704:	68d8      	ldr	r0, [r3, #12]
 8013706:	b14c      	cbz	r4, 801371c <__assert_func+0x24>
 8013708:	4b07      	ldr	r3, [pc, #28]	; (8013728 <__assert_func+0x30>)
 801370a:	9100      	str	r1, [sp, #0]
 801370c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013710:	4906      	ldr	r1, [pc, #24]	; (801372c <__assert_func+0x34>)
 8013712:	462b      	mov	r3, r5
 8013714:	f000 f80e 	bl	8013734 <fiprintf>
 8013718:	f000 f880 	bl	801381c <abort>
 801371c:	4b04      	ldr	r3, [pc, #16]	; (8013730 <__assert_func+0x38>)
 801371e:	461c      	mov	r4, r3
 8013720:	e7f3      	b.n	801370a <__assert_func+0x12>
 8013722:	bf00      	nop
 8013724:	20000028 	.word	0x20000028
 8013728:	080150e8 	.word	0x080150e8
 801372c:	080150f5 	.word	0x080150f5
 8013730:	08015123 	.word	0x08015123

08013734 <fiprintf>:
 8013734:	b40e      	push	{r1, r2, r3}
 8013736:	b503      	push	{r0, r1, lr}
 8013738:	4601      	mov	r1, r0
 801373a:	ab03      	add	r3, sp, #12
 801373c:	4805      	ldr	r0, [pc, #20]	; (8013754 <fiprintf+0x20>)
 801373e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013742:	6800      	ldr	r0, [r0, #0]
 8013744:	9301      	str	r3, [sp, #4]
 8013746:	f7ff fc3f 	bl	8012fc8 <_vfiprintf_r>
 801374a:	b002      	add	sp, #8
 801374c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013750:	b003      	add	sp, #12
 8013752:	4770      	bx	lr
 8013754:	20000028 	.word	0x20000028

08013758 <_fstat_r>:
 8013758:	b538      	push	{r3, r4, r5, lr}
 801375a:	4d07      	ldr	r5, [pc, #28]	; (8013778 <_fstat_r+0x20>)
 801375c:	2300      	movs	r3, #0
 801375e:	4604      	mov	r4, r0
 8013760:	4608      	mov	r0, r1
 8013762:	4611      	mov	r1, r2
 8013764:	602b      	str	r3, [r5, #0]
 8013766:	f7f0 ff90 	bl	800468a <_fstat>
 801376a:	1c43      	adds	r3, r0, #1
 801376c:	d102      	bne.n	8013774 <_fstat_r+0x1c>
 801376e:	682b      	ldr	r3, [r5, #0]
 8013770:	b103      	cbz	r3, 8013774 <_fstat_r+0x1c>
 8013772:	6023      	str	r3, [r4, #0]
 8013774:	bd38      	pop	{r3, r4, r5, pc}
 8013776:	bf00      	nop
 8013778:	20001a44 	.word	0x20001a44

0801377c <_isatty_r>:
 801377c:	b538      	push	{r3, r4, r5, lr}
 801377e:	4d06      	ldr	r5, [pc, #24]	; (8013798 <_isatty_r+0x1c>)
 8013780:	2300      	movs	r3, #0
 8013782:	4604      	mov	r4, r0
 8013784:	4608      	mov	r0, r1
 8013786:	602b      	str	r3, [r5, #0]
 8013788:	f7f0 ff8f 	bl	80046aa <_isatty>
 801378c:	1c43      	adds	r3, r0, #1
 801378e:	d102      	bne.n	8013796 <_isatty_r+0x1a>
 8013790:	682b      	ldr	r3, [r5, #0]
 8013792:	b103      	cbz	r3, 8013796 <_isatty_r+0x1a>
 8013794:	6023      	str	r3, [r4, #0]
 8013796:	bd38      	pop	{r3, r4, r5, pc}
 8013798:	20001a44 	.word	0x20001a44

0801379c <memmove>:
 801379c:	4288      	cmp	r0, r1
 801379e:	b510      	push	{r4, lr}
 80137a0:	eb01 0402 	add.w	r4, r1, r2
 80137a4:	d902      	bls.n	80137ac <memmove+0x10>
 80137a6:	4284      	cmp	r4, r0
 80137a8:	4623      	mov	r3, r4
 80137aa:	d807      	bhi.n	80137bc <memmove+0x20>
 80137ac:	1e43      	subs	r3, r0, #1
 80137ae:	42a1      	cmp	r1, r4
 80137b0:	d008      	beq.n	80137c4 <memmove+0x28>
 80137b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80137ba:	e7f8      	b.n	80137ae <memmove+0x12>
 80137bc:	4402      	add	r2, r0
 80137be:	4601      	mov	r1, r0
 80137c0:	428a      	cmp	r2, r1
 80137c2:	d100      	bne.n	80137c6 <memmove+0x2a>
 80137c4:	bd10      	pop	{r4, pc}
 80137c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80137ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80137ce:	e7f7      	b.n	80137c0 <memmove+0x24>

080137d0 <_realloc_r>:
 80137d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137d2:	4607      	mov	r7, r0
 80137d4:	4614      	mov	r4, r2
 80137d6:	460e      	mov	r6, r1
 80137d8:	b921      	cbnz	r1, 80137e4 <_realloc_r+0x14>
 80137da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80137de:	4611      	mov	r1, r2
 80137e0:	f7fb b81a 	b.w	800e818 <_malloc_r>
 80137e4:	b922      	cbnz	r2, 80137f0 <_realloc_r+0x20>
 80137e6:	f7fa ffc7 	bl	800e778 <_free_r>
 80137ea:	4625      	mov	r5, r4
 80137ec:	4628      	mov	r0, r5
 80137ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137f0:	f000 f81b 	bl	801382a <_malloc_usable_size_r>
 80137f4:	42a0      	cmp	r0, r4
 80137f6:	d20f      	bcs.n	8013818 <_realloc_r+0x48>
 80137f8:	4621      	mov	r1, r4
 80137fa:	4638      	mov	r0, r7
 80137fc:	f7fb f80c 	bl	800e818 <_malloc_r>
 8013800:	4605      	mov	r5, r0
 8013802:	2800      	cmp	r0, #0
 8013804:	d0f2      	beq.n	80137ec <_realloc_r+0x1c>
 8013806:	4631      	mov	r1, r6
 8013808:	4622      	mov	r2, r4
 801380a:	f7fa ff9f 	bl	800e74c <memcpy>
 801380e:	4631      	mov	r1, r6
 8013810:	4638      	mov	r0, r7
 8013812:	f7fa ffb1 	bl	800e778 <_free_r>
 8013816:	e7e9      	b.n	80137ec <_realloc_r+0x1c>
 8013818:	4635      	mov	r5, r6
 801381a:	e7e7      	b.n	80137ec <_realloc_r+0x1c>

0801381c <abort>:
 801381c:	b508      	push	{r3, lr}
 801381e:	2006      	movs	r0, #6
 8013820:	f000 f834 	bl	801388c <raise>
 8013824:	2001      	movs	r0, #1
 8013826:	f7f0 fee1 	bl	80045ec <_exit>

0801382a <_malloc_usable_size_r>:
 801382a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801382e:	1f18      	subs	r0, r3, #4
 8013830:	2b00      	cmp	r3, #0
 8013832:	bfbc      	itt	lt
 8013834:	580b      	ldrlt	r3, [r1, r0]
 8013836:	18c0      	addlt	r0, r0, r3
 8013838:	4770      	bx	lr

0801383a <_raise_r>:
 801383a:	291f      	cmp	r1, #31
 801383c:	b538      	push	{r3, r4, r5, lr}
 801383e:	4604      	mov	r4, r0
 8013840:	460d      	mov	r5, r1
 8013842:	d904      	bls.n	801384e <_raise_r+0x14>
 8013844:	2316      	movs	r3, #22
 8013846:	6003      	str	r3, [r0, #0]
 8013848:	f04f 30ff 	mov.w	r0, #4294967295
 801384c:	bd38      	pop	{r3, r4, r5, pc}
 801384e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013850:	b112      	cbz	r2, 8013858 <_raise_r+0x1e>
 8013852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013856:	b94b      	cbnz	r3, 801386c <_raise_r+0x32>
 8013858:	4620      	mov	r0, r4
 801385a:	f000 f831 	bl	80138c0 <_getpid_r>
 801385e:	462a      	mov	r2, r5
 8013860:	4601      	mov	r1, r0
 8013862:	4620      	mov	r0, r4
 8013864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013868:	f000 b818 	b.w	801389c <_kill_r>
 801386c:	2b01      	cmp	r3, #1
 801386e:	d00a      	beq.n	8013886 <_raise_r+0x4c>
 8013870:	1c59      	adds	r1, r3, #1
 8013872:	d103      	bne.n	801387c <_raise_r+0x42>
 8013874:	2316      	movs	r3, #22
 8013876:	6003      	str	r3, [r0, #0]
 8013878:	2001      	movs	r0, #1
 801387a:	e7e7      	b.n	801384c <_raise_r+0x12>
 801387c:	2400      	movs	r4, #0
 801387e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013882:	4628      	mov	r0, r5
 8013884:	4798      	blx	r3
 8013886:	2000      	movs	r0, #0
 8013888:	e7e0      	b.n	801384c <_raise_r+0x12>
	...

0801388c <raise>:
 801388c:	4b02      	ldr	r3, [pc, #8]	; (8013898 <raise+0xc>)
 801388e:	4601      	mov	r1, r0
 8013890:	6818      	ldr	r0, [r3, #0]
 8013892:	f7ff bfd2 	b.w	801383a <_raise_r>
 8013896:	bf00      	nop
 8013898:	20000028 	.word	0x20000028

0801389c <_kill_r>:
 801389c:	b538      	push	{r3, r4, r5, lr}
 801389e:	4d07      	ldr	r5, [pc, #28]	; (80138bc <_kill_r+0x20>)
 80138a0:	2300      	movs	r3, #0
 80138a2:	4604      	mov	r4, r0
 80138a4:	4608      	mov	r0, r1
 80138a6:	4611      	mov	r1, r2
 80138a8:	602b      	str	r3, [r5, #0]
 80138aa:	f7f0 fe8f 	bl	80045cc <_kill>
 80138ae:	1c43      	adds	r3, r0, #1
 80138b0:	d102      	bne.n	80138b8 <_kill_r+0x1c>
 80138b2:	682b      	ldr	r3, [r5, #0]
 80138b4:	b103      	cbz	r3, 80138b8 <_kill_r+0x1c>
 80138b6:	6023      	str	r3, [r4, #0]
 80138b8:	bd38      	pop	{r3, r4, r5, pc}
 80138ba:	bf00      	nop
 80138bc:	20001a44 	.word	0x20001a44

080138c0 <_getpid_r>:
 80138c0:	f7f0 be7c 	b.w	80045bc <_getpid>

080138c4 <pow>:
 80138c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138c8:	ec59 8b10 	vmov	r8, r9, d0
 80138cc:	ec57 6b11 	vmov	r6, r7, d1
 80138d0:	f000 f8a6 	bl	8013a20 <__ieee754_pow>
 80138d4:	4b4e      	ldr	r3, [pc, #312]	; (8013a10 <pow+0x14c>)
 80138d6:	f993 3000 	ldrsb.w	r3, [r3]
 80138da:	3301      	adds	r3, #1
 80138dc:	ec55 4b10 	vmov	r4, r5, d0
 80138e0:	d015      	beq.n	801390e <pow+0x4a>
 80138e2:	4632      	mov	r2, r6
 80138e4:	463b      	mov	r3, r7
 80138e6:	4630      	mov	r0, r6
 80138e8:	4639      	mov	r1, r7
 80138ea:	f7ed f93f 	bl	8000b6c <__aeabi_dcmpun>
 80138ee:	b970      	cbnz	r0, 801390e <pow+0x4a>
 80138f0:	4642      	mov	r2, r8
 80138f2:	464b      	mov	r3, r9
 80138f4:	4640      	mov	r0, r8
 80138f6:	4649      	mov	r1, r9
 80138f8:	f7ed f938 	bl	8000b6c <__aeabi_dcmpun>
 80138fc:	2200      	movs	r2, #0
 80138fe:	2300      	movs	r3, #0
 8013900:	b148      	cbz	r0, 8013916 <pow+0x52>
 8013902:	4630      	mov	r0, r6
 8013904:	4639      	mov	r1, r7
 8013906:	f7ed f8ff 	bl	8000b08 <__aeabi_dcmpeq>
 801390a:	2800      	cmp	r0, #0
 801390c:	d17d      	bne.n	8013a0a <pow+0x146>
 801390e:	ec45 4b10 	vmov	d0, r4, r5
 8013912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013916:	4640      	mov	r0, r8
 8013918:	4649      	mov	r1, r9
 801391a:	f7ed f8f5 	bl	8000b08 <__aeabi_dcmpeq>
 801391e:	b1e0      	cbz	r0, 801395a <pow+0x96>
 8013920:	2200      	movs	r2, #0
 8013922:	2300      	movs	r3, #0
 8013924:	4630      	mov	r0, r6
 8013926:	4639      	mov	r1, r7
 8013928:	f7ed f8ee 	bl	8000b08 <__aeabi_dcmpeq>
 801392c:	2800      	cmp	r0, #0
 801392e:	d16c      	bne.n	8013a0a <pow+0x146>
 8013930:	ec47 6b10 	vmov	d0, r6, r7
 8013934:	f000 fe53 	bl	80145de <finite>
 8013938:	2800      	cmp	r0, #0
 801393a:	d0e8      	beq.n	801390e <pow+0x4a>
 801393c:	2200      	movs	r2, #0
 801393e:	2300      	movs	r3, #0
 8013940:	4630      	mov	r0, r6
 8013942:	4639      	mov	r1, r7
 8013944:	f7ed f8ea 	bl	8000b1c <__aeabi_dcmplt>
 8013948:	2800      	cmp	r0, #0
 801394a:	d0e0      	beq.n	801390e <pow+0x4a>
 801394c:	f7fa fecc 	bl	800e6e8 <__errno>
 8013950:	2321      	movs	r3, #33	; 0x21
 8013952:	6003      	str	r3, [r0, #0]
 8013954:	2400      	movs	r4, #0
 8013956:	4d2f      	ldr	r5, [pc, #188]	; (8013a14 <pow+0x150>)
 8013958:	e7d9      	b.n	801390e <pow+0x4a>
 801395a:	ec45 4b10 	vmov	d0, r4, r5
 801395e:	f000 fe3e 	bl	80145de <finite>
 8013962:	bbb8      	cbnz	r0, 80139d4 <pow+0x110>
 8013964:	ec49 8b10 	vmov	d0, r8, r9
 8013968:	f000 fe39 	bl	80145de <finite>
 801396c:	b390      	cbz	r0, 80139d4 <pow+0x110>
 801396e:	ec47 6b10 	vmov	d0, r6, r7
 8013972:	f000 fe34 	bl	80145de <finite>
 8013976:	b368      	cbz	r0, 80139d4 <pow+0x110>
 8013978:	4622      	mov	r2, r4
 801397a:	462b      	mov	r3, r5
 801397c:	4620      	mov	r0, r4
 801397e:	4629      	mov	r1, r5
 8013980:	f7ed f8f4 	bl	8000b6c <__aeabi_dcmpun>
 8013984:	b160      	cbz	r0, 80139a0 <pow+0xdc>
 8013986:	f7fa feaf 	bl	800e6e8 <__errno>
 801398a:	2321      	movs	r3, #33	; 0x21
 801398c:	6003      	str	r3, [r0, #0]
 801398e:	2200      	movs	r2, #0
 8013990:	2300      	movs	r3, #0
 8013992:	4610      	mov	r0, r2
 8013994:	4619      	mov	r1, r3
 8013996:	f7ec ff79 	bl	800088c <__aeabi_ddiv>
 801399a:	4604      	mov	r4, r0
 801399c:	460d      	mov	r5, r1
 801399e:	e7b6      	b.n	801390e <pow+0x4a>
 80139a0:	f7fa fea2 	bl	800e6e8 <__errno>
 80139a4:	2322      	movs	r3, #34	; 0x22
 80139a6:	6003      	str	r3, [r0, #0]
 80139a8:	2200      	movs	r2, #0
 80139aa:	2300      	movs	r3, #0
 80139ac:	4640      	mov	r0, r8
 80139ae:	4649      	mov	r1, r9
 80139b0:	f7ed f8b4 	bl	8000b1c <__aeabi_dcmplt>
 80139b4:	2400      	movs	r4, #0
 80139b6:	b158      	cbz	r0, 80139d0 <pow+0x10c>
 80139b8:	ec47 6b10 	vmov	d0, r6, r7
 80139bc:	f000 fe1a 	bl	80145f4 <rint>
 80139c0:	4632      	mov	r2, r6
 80139c2:	ec51 0b10 	vmov	r0, r1, d0
 80139c6:	463b      	mov	r3, r7
 80139c8:	f7ed f89e 	bl	8000b08 <__aeabi_dcmpeq>
 80139cc:	2800      	cmp	r0, #0
 80139ce:	d0c2      	beq.n	8013956 <pow+0x92>
 80139d0:	4d11      	ldr	r5, [pc, #68]	; (8013a18 <pow+0x154>)
 80139d2:	e79c      	b.n	801390e <pow+0x4a>
 80139d4:	2200      	movs	r2, #0
 80139d6:	2300      	movs	r3, #0
 80139d8:	4620      	mov	r0, r4
 80139da:	4629      	mov	r1, r5
 80139dc:	f7ed f894 	bl	8000b08 <__aeabi_dcmpeq>
 80139e0:	2800      	cmp	r0, #0
 80139e2:	d094      	beq.n	801390e <pow+0x4a>
 80139e4:	ec49 8b10 	vmov	d0, r8, r9
 80139e8:	f000 fdf9 	bl	80145de <finite>
 80139ec:	2800      	cmp	r0, #0
 80139ee:	d08e      	beq.n	801390e <pow+0x4a>
 80139f0:	ec47 6b10 	vmov	d0, r6, r7
 80139f4:	f000 fdf3 	bl	80145de <finite>
 80139f8:	2800      	cmp	r0, #0
 80139fa:	d088      	beq.n	801390e <pow+0x4a>
 80139fc:	f7fa fe74 	bl	800e6e8 <__errno>
 8013a00:	2322      	movs	r3, #34	; 0x22
 8013a02:	6003      	str	r3, [r0, #0]
 8013a04:	2400      	movs	r4, #0
 8013a06:	2500      	movs	r5, #0
 8013a08:	e781      	b.n	801390e <pow+0x4a>
 8013a0a:	4d04      	ldr	r5, [pc, #16]	; (8013a1c <pow+0x158>)
 8013a0c:	2400      	movs	r4, #0
 8013a0e:	e77e      	b.n	801390e <pow+0x4a>
 8013a10:	200001fc 	.word	0x200001fc
 8013a14:	fff00000 	.word	0xfff00000
 8013a18:	7ff00000 	.word	0x7ff00000
 8013a1c:	3ff00000 	.word	0x3ff00000

08013a20 <__ieee754_pow>:
 8013a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a24:	ed2d 8b06 	vpush	{d8-d10}
 8013a28:	b08d      	sub	sp, #52	; 0x34
 8013a2a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013a2e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8013a32:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8013a36:	ea56 0100 	orrs.w	r1, r6, r0
 8013a3a:	ec53 2b10 	vmov	r2, r3, d0
 8013a3e:	f000 84d1 	beq.w	80143e4 <__ieee754_pow+0x9c4>
 8013a42:	497f      	ldr	r1, [pc, #508]	; (8013c40 <__ieee754_pow+0x220>)
 8013a44:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8013a48:	428c      	cmp	r4, r1
 8013a4a:	ee10 8a10 	vmov	r8, s0
 8013a4e:	4699      	mov	r9, r3
 8013a50:	dc09      	bgt.n	8013a66 <__ieee754_pow+0x46>
 8013a52:	d103      	bne.n	8013a5c <__ieee754_pow+0x3c>
 8013a54:	b97a      	cbnz	r2, 8013a76 <__ieee754_pow+0x56>
 8013a56:	42a6      	cmp	r6, r4
 8013a58:	dd02      	ble.n	8013a60 <__ieee754_pow+0x40>
 8013a5a:	e00c      	b.n	8013a76 <__ieee754_pow+0x56>
 8013a5c:	428e      	cmp	r6, r1
 8013a5e:	dc02      	bgt.n	8013a66 <__ieee754_pow+0x46>
 8013a60:	428e      	cmp	r6, r1
 8013a62:	d110      	bne.n	8013a86 <__ieee754_pow+0x66>
 8013a64:	b178      	cbz	r0, 8013a86 <__ieee754_pow+0x66>
 8013a66:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013a6a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013a6e:	ea54 0308 	orrs.w	r3, r4, r8
 8013a72:	f000 84b7 	beq.w	80143e4 <__ieee754_pow+0x9c4>
 8013a76:	4873      	ldr	r0, [pc, #460]	; (8013c44 <__ieee754_pow+0x224>)
 8013a78:	b00d      	add	sp, #52	; 0x34
 8013a7a:	ecbd 8b06 	vpop	{d8-d10}
 8013a7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a82:	f7ff bd31 	b.w	80134e8 <nan>
 8013a86:	f1b9 0f00 	cmp.w	r9, #0
 8013a8a:	da36      	bge.n	8013afa <__ieee754_pow+0xda>
 8013a8c:	496e      	ldr	r1, [pc, #440]	; (8013c48 <__ieee754_pow+0x228>)
 8013a8e:	428e      	cmp	r6, r1
 8013a90:	dc51      	bgt.n	8013b36 <__ieee754_pow+0x116>
 8013a92:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8013a96:	428e      	cmp	r6, r1
 8013a98:	f340 84af 	ble.w	80143fa <__ieee754_pow+0x9da>
 8013a9c:	1531      	asrs	r1, r6, #20
 8013a9e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8013aa2:	2914      	cmp	r1, #20
 8013aa4:	dd0f      	ble.n	8013ac6 <__ieee754_pow+0xa6>
 8013aa6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8013aaa:	fa20 fc01 	lsr.w	ip, r0, r1
 8013aae:	fa0c f101 	lsl.w	r1, ip, r1
 8013ab2:	4281      	cmp	r1, r0
 8013ab4:	f040 84a1 	bne.w	80143fa <__ieee754_pow+0x9da>
 8013ab8:	f00c 0c01 	and.w	ip, ip, #1
 8013abc:	f1cc 0102 	rsb	r1, ip, #2
 8013ac0:	9100      	str	r1, [sp, #0]
 8013ac2:	b180      	cbz	r0, 8013ae6 <__ieee754_pow+0xc6>
 8013ac4:	e059      	b.n	8013b7a <__ieee754_pow+0x15a>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d155      	bne.n	8013b76 <__ieee754_pow+0x156>
 8013aca:	f1c1 0114 	rsb	r1, r1, #20
 8013ace:	fa46 fc01 	asr.w	ip, r6, r1
 8013ad2:	fa0c f101 	lsl.w	r1, ip, r1
 8013ad6:	42b1      	cmp	r1, r6
 8013ad8:	f040 848c 	bne.w	80143f4 <__ieee754_pow+0x9d4>
 8013adc:	f00c 0c01 	and.w	ip, ip, #1
 8013ae0:	f1cc 0102 	rsb	r1, ip, #2
 8013ae4:	9100      	str	r1, [sp, #0]
 8013ae6:	4959      	ldr	r1, [pc, #356]	; (8013c4c <__ieee754_pow+0x22c>)
 8013ae8:	428e      	cmp	r6, r1
 8013aea:	d12d      	bne.n	8013b48 <__ieee754_pow+0x128>
 8013aec:	2f00      	cmp	r7, #0
 8013aee:	da79      	bge.n	8013be4 <__ieee754_pow+0x1c4>
 8013af0:	4956      	ldr	r1, [pc, #344]	; (8013c4c <__ieee754_pow+0x22c>)
 8013af2:	2000      	movs	r0, #0
 8013af4:	f7ec feca 	bl	800088c <__aeabi_ddiv>
 8013af8:	e016      	b.n	8013b28 <__ieee754_pow+0x108>
 8013afa:	2100      	movs	r1, #0
 8013afc:	9100      	str	r1, [sp, #0]
 8013afe:	2800      	cmp	r0, #0
 8013b00:	d13b      	bne.n	8013b7a <__ieee754_pow+0x15a>
 8013b02:	494f      	ldr	r1, [pc, #316]	; (8013c40 <__ieee754_pow+0x220>)
 8013b04:	428e      	cmp	r6, r1
 8013b06:	d1ee      	bne.n	8013ae6 <__ieee754_pow+0xc6>
 8013b08:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013b0c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013b10:	ea53 0308 	orrs.w	r3, r3, r8
 8013b14:	f000 8466 	beq.w	80143e4 <__ieee754_pow+0x9c4>
 8013b18:	4b4d      	ldr	r3, [pc, #308]	; (8013c50 <__ieee754_pow+0x230>)
 8013b1a:	429c      	cmp	r4, r3
 8013b1c:	dd0d      	ble.n	8013b3a <__ieee754_pow+0x11a>
 8013b1e:	2f00      	cmp	r7, #0
 8013b20:	f280 8464 	bge.w	80143ec <__ieee754_pow+0x9cc>
 8013b24:	2000      	movs	r0, #0
 8013b26:	2100      	movs	r1, #0
 8013b28:	ec41 0b10 	vmov	d0, r0, r1
 8013b2c:	b00d      	add	sp, #52	; 0x34
 8013b2e:	ecbd 8b06 	vpop	{d8-d10}
 8013b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b36:	2102      	movs	r1, #2
 8013b38:	e7e0      	b.n	8013afc <__ieee754_pow+0xdc>
 8013b3a:	2f00      	cmp	r7, #0
 8013b3c:	daf2      	bge.n	8013b24 <__ieee754_pow+0x104>
 8013b3e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8013b42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013b46:	e7ef      	b.n	8013b28 <__ieee754_pow+0x108>
 8013b48:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8013b4c:	d104      	bne.n	8013b58 <__ieee754_pow+0x138>
 8013b4e:	4610      	mov	r0, r2
 8013b50:	4619      	mov	r1, r3
 8013b52:	f7ec fd71 	bl	8000638 <__aeabi_dmul>
 8013b56:	e7e7      	b.n	8013b28 <__ieee754_pow+0x108>
 8013b58:	493e      	ldr	r1, [pc, #248]	; (8013c54 <__ieee754_pow+0x234>)
 8013b5a:	428f      	cmp	r7, r1
 8013b5c:	d10d      	bne.n	8013b7a <__ieee754_pow+0x15a>
 8013b5e:	f1b9 0f00 	cmp.w	r9, #0
 8013b62:	db0a      	blt.n	8013b7a <__ieee754_pow+0x15a>
 8013b64:	ec43 2b10 	vmov	d0, r2, r3
 8013b68:	b00d      	add	sp, #52	; 0x34
 8013b6a:	ecbd 8b06 	vpop	{d8-d10}
 8013b6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b72:	f000 bc77 	b.w	8014464 <__ieee754_sqrt>
 8013b76:	2100      	movs	r1, #0
 8013b78:	9100      	str	r1, [sp, #0]
 8013b7a:	ec43 2b10 	vmov	d0, r2, r3
 8013b7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013b82:	f000 fd23 	bl	80145cc <fabs>
 8013b86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b8a:	ec51 0b10 	vmov	r0, r1, d0
 8013b8e:	f1b8 0f00 	cmp.w	r8, #0
 8013b92:	d12a      	bne.n	8013bea <__ieee754_pow+0x1ca>
 8013b94:	b12c      	cbz	r4, 8013ba2 <__ieee754_pow+0x182>
 8013b96:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8013c4c <__ieee754_pow+0x22c>
 8013b9a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8013b9e:	45e6      	cmp	lr, ip
 8013ba0:	d123      	bne.n	8013bea <__ieee754_pow+0x1ca>
 8013ba2:	2f00      	cmp	r7, #0
 8013ba4:	da05      	bge.n	8013bb2 <__ieee754_pow+0x192>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	460b      	mov	r3, r1
 8013baa:	2000      	movs	r0, #0
 8013bac:	4927      	ldr	r1, [pc, #156]	; (8013c4c <__ieee754_pow+0x22c>)
 8013bae:	f7ec fe6d 	bl	800088c <__aeabi_ddiv>
 8013bb2:	f1b9 0f00 	cmp.w	r9, #0
 8013bb6:	dab7      	bge.n	8013b28 <__ieee754_pow+0x108>
 8013bb8:	9b00      	ldr	r3, [sp, #0]
 8013bba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013bbe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013bc2:	4323      	orrs	r3, r4
 8013bc4:	d108      	bne.n	8013bd8 <__ieee754_pow+0x1b8>
 8013bc6:	4602      	mov	r2, r0
 8013bc8:	460b      	mov	r3, r1
 8013bca:	4610      	mov	r0, r2
 8013bcc:	4619      	mov	r1, r3
 8013bce:	f7ec fb7b 	bl	80002c8 <__aeabi_dsub>
 8013bd2:	4602      	mov	r2, r0
 8013bd4:	460b      	mov	r3, r1
 8013bd6:	e78d      	b.n	8013af4 <__ieee754_pow+0xd4>
 8013bd8:	9b00      	ldr	r3, [sp, #0]
 8013bda:	2b01      	cmp	r3, #1
 8013bdc:	d1a4      	bne.n	8013b28 <__ieee754_pow+0x108>
 8013bde:	4602      	mov	r2, r0
 8013be0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013be4:	4610      	mov	r0, r2
 8013be6:	4619      	mov	r1, r3
 8013be8:	e79e      	b.n	8013b28 <__ieee754_pow+0x108>
 8013bea:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8013bee:	f10c 35ff 	add.w	r5, ip, #4294967295
 8013bf2:	950a      	str	r5, [sp, #40]	; 0x28
 8013bf4:	9d00      	ldr	r5, [sp, #0]
 8013bf6:	46ac      	mov	ip, r5
 8013bf8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8013bfa:	ea5c 0505 	orrs.w	r5, ip, r5
 8013bfe:	d0e4      	beq.n	8013bca <__ieee754_pow+0x1aa>
 8013c00:	4b15      	ldr	r3, [pc, #84]	; (8013c58 <__ieee754_pow+0x238>)
 8013c02:	429e      	cmp	r6, r3
 8013c04:	f340 80fc 	ble.w	8013e00 <__ieee754_pow+0x3e0>
 8013c08:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013c0c:	429e      	cmp	r6, r3
 8013c0e:	4b10      	ldr	r3, [pc, #64]	; (8013c50 <__ieee754_pow+0x230>)
 8013c10:	dd07      	ble.n	8013c22 <__ieee754_pow+0x202>
 8013c12:	429c      	cmp	r4, r3
 8013c14:	dc0a      	bgt.n	8013c2c <__ieee754_pow+0x20c>
 8013c16:	2f00      	cmp	r7, #0
 8013c18:	da84      	bge.n	8013b24 <__ieee754_pow+0x104>
 8013c1a:	a307      	add	r3, pc, #28	; (adr r3, 8013c38 <__ieee754_pow+0x218>)
 8013c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c20:	e795      	b.n	8013b4e <__ieee754_pow+0x12e>
 8013c22:	429c      	cmp	r4, r3
 8013c24:	dbf7      	blt.n	8013c16 <__ieee754_pow+0x1f6>
 8013c26:	4b09      	ldr	r3, [pc, #36]	; (8013c4c <__ieee754_pow+0x22c>)
 8013c28:	429c      	cmp	r4, r3
 8013c2a:	dd17      	ble.n	8013c5c <__ieee754_pow+0x23c>
 8013c2c:	2f00      	cmp	r7, #0
 8013c2e:	dcf4      	bgt.n	8013c1a <__ieee754_pow+0x1fa>
 8013c30:	e778      	b.n	8013b24 <__ieee754_pow+0x104>
 8013c32:	bf00      	nop
 8013c34:	f3af 8000 	nop.w
 8013c38:	8800759c 	.word	0x8800759c
 8013c3c:	7e37e43c 	.word	0x7e37e43c
 8013c40:	7ff00000 	.word	0x7ff00000
 8013c44:	08015123 	.word	0x08015123
 8013c48:	433fffff 	.word	0x433fffff
 8013c4c:	3ff00000 	.word	0x3ff00000
 8013c50:	3fefffff 	.word	0x3fefffff
 8013c54:	3fe00000 	.word	0x3fe00000
 8013c58:	41e00000 	.word	0x41e00000
 8013c5c:	4b64      	ldr	r3, [pc, #400]	; (8013df0 <__ieee754_pow+0x3d0>)
 8013c5e:	2200      	movs	r2, #0
 8013c60:	f7ec fb32 	bl	80002c8 <__aeabi_dsub>
 8013c64:	a356      	add	r3, pc, #344	; (adr r3, 8013dc0 <__ieee754_pow+0x3a0>)
 8013c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6a:	4604      	mov	r4, r0
 8013c6c:	460d      	mov	r5, r1
 8013c6e:	f7ec fce3 	bl	8000638 <__aeabi_dmul>
 8013c72:	a355      	add	r3, pc, #340	; (adr r3, 8013dc8 <__ieee754_pow+0x3a8>)
 8013c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c78:	4606      	mov	r6, r0
 8013c7a:	460f      	mov	r7, r1
 8013c7c:	4620      	mov	r0, r4
 8013c7e:	4629      	mov	r1, r5
 8013c80:	f7ec fcda 	bl	8000638 <__aeabi_dmul>
 8013c84:	4b5b      	ldr	r3, [pc, #364]	; (8013df4 <__ieee754_pow+0x3d4>)
 8013c86:	4682      	mov	sl, r0
 8013c88:	468b      	mov	fp, r1
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	4620      	mov	r0, r4
 8013c8e:	4629      	mov	r1, r5
 8013c90:	f7ec fcd2 	bl	8000638 <__aeabi_dmul>
 8013c94:	4602      	mov	r2, r0
 8013c96:	460b      	mov	r3, r1
 8013c98:	a14d      	add	r1, pc, #308	; (adr r1, 8013dd0 <__ieee754_pow+0x3b0>)
 8013c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c9e:	f7ec fb13 	bl	80002c8 <__aeabi_dsub>
 8013ca2:	4622      	mov	r2, r4
 8013ca4:	462b      	mov	r3, r5
 8013ca6:	f7ec fcc7 	bl	8000638 <__aeabi_dmul>
 8013caa:	4602      	mov	r2, r0
 8013cac:	460b      	mov	r3, r1
 8013cae:	2000      	movs	r0, #0
 8013cb0:	4951      	ldr	r1, [pc, #324]	; (8013df8 <__ieee754_pow+0x3d8>)
 8013cb2:	f7ec fb09 	bl	80002c8 <__aeabi_dsub>
 8013cb6:	4622      	mov	r2, r4
 8013cb8:	4680      	mov	r8, r0
 8013cba:	4689      	mov	r9, r1
 8013cbc:	462b      	mov	r3, r5
 8013cbe:	4620      	mov	r0, r4
 8013cc0:	4629      	mov	r1, r5
 8013cc2:	f7ec fcb9 	bl	8000638 <__aeabi_dmul>
 8013cc6:	4602      	mov	r2, r0
 8013cc8:	460b      	mov	r3, r1
 8013cca:	4640      	mov	r0, r8
 8013ccc:	4649      	mov	r1, r9
 8013cce:	f7ec fcb3 	bl	8000638 <__aeabi_dmul>
 8013cd2:	a341      	add	r3, pc, #260	; (adr r3, 8013dd8 <__ieee754_pow+0x3b8>)
 8013cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cd8:	f7ec fcae 	bl	8000638 <__aeabi_dmul>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	460b      	mov	r3, r1
 8013ce0:	4650      	mov	r0, sl
 8013ce2:	4659      	mov	r1, fp
 8013ce4:	f7ec faf0 	bl	80002c8 <__aeabi_dsub>
 8013ce8:	4602      	mov	r2, r0
 8013cea:	460b      	mov	r3, r1
 8013cec:	4680      	mov	r8, r0
 8013cee:	4689      	mov	r9, r1
 8013cf0:	4630      	mov	r0, r6
 8013cf2:	4639      	mov	r1, r7
 8013cf4:	f7ec faea 	bl	80002cc <__adddf3>
 8013cf8:	2400      	movs	r4, #0
 8013cfa:	4632      	mov	r2, r6
 8013cfc:	463b      	mov	r3, r7
 8013cfe:	4620      	mov	r0, r4
 8013d00:	460d      	mov	r5, r1
 8013d02:	f7ec fae1 	bl	80002c8 <__aeabi_dsub>
 8013d06:	4602      	mov	r2, r0
 8013d08:	460b      	mov	r3, r1
 8013d0a:	4640      	mov	r0, r8
 8013d0c:	4649      	mov	r1, r9
 8013d0e:	f7ec fadb 	bl	80002c8 <__aeabi_dsub>
 8013d12:	9b00      	ldr	r3, [sp, #0]
 8013d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d16:	3b01      	subs	r3, #1
 8013d18:	4313      	orrs	r3, r2
 8013d1a:	4682      	mov	sl, r0
 8013d1c:	468b      	mov	fp, r1
 8013d1e:	f040 81f1 	bne.w	8014104 <__ieee754_pow+0x6e4>
 8013d22:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8013de0 <__ieee754_pow+0x3c0>
 8013d26:	eeb0 8a47 	vmov.f32	s16, s14
 8013d2a:	eef0 8a67 	vmov.f32	s17, s15
 8013d2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013d32:	2600      	movs	r6, #0
 8013d34:	4632      	mov	r2, r6
 8013d36:	463b      	mov	r3, r7
 8013d38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013d3c:	f7ec fac4 	bl	80002c8 <__aeabi_dsub>
 8013d40:	4622      	mov	r2, r4
 8013d42:	462b      	mov	r3, r5
 8013d44:	f7ec fc78 	bl	8000638 <__aeabi_dmul>
 8013d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d4c:	4680      	mov	r8, r0
 8013d4e:	4689      	mov	r9, r1
 8013d50:	4650      	mov	r0, sl
 8013d52:	4659      	mov	r1, fp
 8013d54:	f7ec fc70 	bl	8000638 <__aeabi_dmul>
 8013d58:	4602      	mov	r2, r0
 8013d5a:	460b      	mov	r3, r1
 8013d5c:	4640      	mov	r0, r8
 8013d5e:	4649      	mov	r1, r9
 8013d60:	f7ec fab4 	bl	80002cc <__adddf3>
 8013d64:	4632      	mov	r2, r6
 8013d66:	463b      	mov	r3, r7
 8013d68:	4680      	mov	r8, r0
 8013d6a:	4689      	mov	r9, r1
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	4629      	mov	r1, r5
 8013d70:	f7ec fc62 	bl	8000638 <__aeabi_dmul>
 8013d74:	460b      	mov	r3, r1
 8013d76:	4604      	mov	r4, r0
 8013d78:	460d      	mov	r5, r1
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	4649      	mov	r1, r9
 8013d7e:	4640      	mov	r0, r8
 8013d80:	f7ec faa4 	bl	80002cc <__adddf3>
 8013d84:	4b1d      	ldr	r3, [pc, #116]	; (8013dfc <__ieee754_pow+0x3dc>)
 8013d86:	4299      	cmp	r1, r3
 8013d88:	ec45 4b19 	vmov	d9, r4, r5
 8013d8c:	4606      	mov	r6, r0
 8013d8e:	460f      	mov	r7, r1
 8013d90:	468b      	mov	fp, r1
 8013d92:	f340 82fe 	ble.w	8014392 <__ieee754_pow+0x972>
 8013d96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013d9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013d9e:	4303      	orrs	r3, r0
 8013da0:	f000 81f0 	beq.w	8014184 <__ieee754_pow+0x764>
 8013da4:	a310      	add	r3, pc, #64	; (adr r3, 8013de8 <__ieee754_pow+0x3c8>)
 8013da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013daa:	ec51 0b18 	vmov	r0, r1, d8
 8013dae:	f7ec fc43 	bl	8000638 <__aeabi_dmul>
 8013db2:	a30d      	add	r3, pc, #52	; (adr r3, 8013de8 <__ieee754_pow+0x3c8>)
 8013db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013db8:	e6cb      	b.n	8013b52 <__ieee754_pow+0x132>
 8013dba:	bf00      	nop
 8013dbc:	f3af 8000 	nop.w
 8013dc0:	60000000 	.word	0x60000000
 8013dc4:	3ff71547 	.word	0x3ff71547
 8013dc8:	f85ddf44 	.word	0xf85ddf44
 8013dcc:	3e54ae0b 	.word	0x3e54ae0b
 8013dd0:	55555555 	.word	0x55555555
 8013dd4:	3fd55555 	.word	0x3fd55555
 8013dd8:	652b82fe 	.word	0x652b82fe
 8013ddc:	3ff71547 	.word	0x3ff71547
 8013de0:	00000000 	.word	0x00000000
 8013de4:	bff00000 	.word	0xbff00000
 8013de8:	8800759c 	.word	0x8800759c
 8013dec:	7e37e43c 	.word	0x7e37e43c
 8013df0:	3ff00000 	.word	0x3ff00000
 8013df4:	3fd00000 	.word	0x3fd00000
 8013df8:	3fe00000 	.word	0x3fe00000
 8013dfc:	408fffff 	.word	0x408fffff
 8013e00:	4bd7      	ldr	r3, [pc, #860]	; (8014160 <__ieee754_pow+0x740>)
 8013e02:	ea03 0309 	and.w	r3, r3, r9
 8013e06:	2200      	movs	r2, #0
 8013e08:	b92b      	cbnz	r3, 8013e16 <__ieee754_pow+0x3f6>
 8013e0a:	4bd6      	ldr	r3, [pc, #856]	; (8014164 <__ieee754_pow+0x744>)
 8013e0c:	f7ec fc14 	bl	8000638 <__aeabi_dmul>
 8013e10:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013e14:	460c      	mov	r4, r1
 8013e16:	1523      	asrs	r3, r4, #20
 8013e18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013e1c:	4413      	add	r3, r2
 8013e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e20:	4bd1      	ldr	r3, [pc, #836]	; (8014168 <__ieee754_pow+0x748>)
 8013e22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013e26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013e2a:	429c      	cmp	r4, r3
 8013e2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013e30:	dd08      	ble.n	8013e44 <__ieee754_pow+0x424>
 8013e32:	4bce      	ldr	r3, [pc, #824]	; (801416c <__ieee754_pow+0x74c>)
 8013e34:	429c      	cmp	r4, r3
 8013e36:	f340 8163 	ble.w	8014100 <__ieee754_pow+0x6e0>
 8013e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e3c:	3301      	adds	r3, #1
 8013e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e40:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013e44:	2400      	movs	r4, #0
 8013e46:	00e3      	lsls	r3, r4, #3
 8013e48:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e4a:	4bc9      	ldr	r3, [pc, #804]	; (8014170 <__ieee754_pow+0x750>)
 8013e4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013e50:	ed93 7b00 	vldr	d7, [r3]
 8013e54:	4629      	mov	r1, r5
 8013e56:	ec53 2b17 	vmov	r2, r3, d7
 8013e5a:	eeb0 8a47 	vmov.f32	s16, s14
 8013e5e:	eef0 8a67 	vmov.f32	s17, s15
 8013e62:	4682      	mov	sl, r0
 8013e64:	f7ec fa30 	bl	80002c8 <__aeabi_dsub>
 8013e68:	4652      	mov	r2, sl
 8013e6a:	4606      	mov	r6, r0
 8013e6c:	460f      	mov	r7, r1
 8013e6e:	462b      	mov	r3, r5
 8013e70:	ec51 0b18 	vmov	r0, r1, d8
 8013e74:	f7ec fa2a 	bl	80002cc <__adddf3>
 8013e78:	4602      	mov	r2, r0
 8013e7a:	460b      	mov	r3, r1
 8013e7c:	2000      	movs	r0, #0
 8013e7e:	49bd      	ldr	r1, [pc, #756]	; (8014174 <__ieee754_pow+0x754>)
 8013e80:	f7ec fd04 	bl	800088c <__aeabi_ddiv>
 8013e84:	ec41 0b19 	vmov	d9, r0, r1
 8013e88:	4602      	mov	r2, r0
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	4630      	mov	r0, r6
 8013e8e:	4639      	mov	r1, r7
 8013e90:	f7ec fbd2 	bl	8000638 <__aeabi_dmul>
 8013e94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013e98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013e9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	9304      	str	r3, [sp, #16]
 8013ea4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8013ea8:	46ab      	mov	fp, r5
 8013eaa:	106d      	asrs	r5, r5, #1
 8013eac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013eb0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013eb4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8013eb8:	2200      	movs	r2, #0
 8013eba:	4640      	mov	r0, r8
 8013ebc:	4649      	mov	r1, r9
 8013ebe:	4614      	mov	r4, r2
 8013ec0:	461d      	mov	r5, r3
 8013ec2:	f7ec fbb9 	bl	8000638 <__aeabi_dmul>
 8013ec6:	4602      	mov	r2, r0
 8013ec8:	460b      	mov	r3, r1
 8013eca:	4630      	mov	r0, r6
 8013ecc:	4639      	mov	r1, r7
 8013ece:	f7ec f9fb 	bl	80002c8 <__aeabi_dsub>
 8013ed2:	ec53 2b18 	vmov	r2, r3, d8
 8013ed6:	4606      	mov	r6, r0
 8013ed8:	460f      	mov	r7, r1
 8013eda:	4620      	mov	r0, r4
 8013edc:	4629      	mov	r1, r5
 8013ede:	f7ec f9f3 	bl	80002c8 <__aeabi_dsub>
 8013ee2:	4602      	mov	r2, r0
 8013ee4:	460b      	mov	r3, r1
 8013ee6:	4650      	mov	r0, sl
 8013ee8:	4659      	mov	r1, fp
 8013eea:	f7ec f9ed 	bl	80002c8 <__aeabi_dsub>
 8013eee:	4642      	mov	r2, r8
 8013ef0:	464b      	mov	r3, r9
 8013ef2:	f7ec fba1 	bl	8000638 <__aeabi_dmul>
 8013ef6:	4602      	mov	r2, r0
 8013ef8:	460b      	mov	r3, r1
 8013efa:	4630      	mov	r0, r6
 8013efc:	4639      	mov	r1, r7
 8013efe:	f7ec f9e3 	bl	80002c8 <__aeabi_dsub>
 8013f02:	ec53 2b19 	vmov	r2, r3, d9
 8013f06:	f7ec fb97 	bl	8000638 <__aeabi_dmul>
 8013f0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013f0e:	ec41 0b18 	vmov	d8, r0, r1
 8013f12:	4610      	mov	r0, r2
 8013f14:	4619      	mov	r1, r3
 8013f16:	f7ec fb8f 	bl	8000638 <__aeabi_dmul>
 8013f1a:	a37d      	add	r3, pc, #500	; (adr r3, 8014110 <__ieee754_pow+0x6f0>)
 8013f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f20:	4604      	mov	r4, r0
 8013f22:	460d      	mov	r5, r1
 8013f24:	f7ec fb88 	bl	8000638 <__aeabi_dmul>
 8013f28:	a37b      	add	r3, pc, #492	; (adr r3, 8014118 <__ieee754_pow+0x6f8>)
 8013f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f2e:	f7ec f9cd 	bl	80002cc <__adddf3>
 8013f32:	4622      	mov	r2, r4
 8013f34:	462b      	mov	r3, r5
 8013f36:	f7ec fb7f 	bl	8000638 <__aeabi_dmul>
 8013f3a:	a379      	add	r3, pc, #484	; (adr r3, 8014120 <__ieee754_pow+0x700>)
 8013f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f40:	f7ec f9c4 	bl	80002cc <__adddf3>
 8013f44:	4622      	mov	r2, r4
 8013f46:	462b      	mov	r3, r5
 8013f48:	f7ec fb76 	bl	8000638 <__aeabi_dmul>
 8013f4c:	a376      	add	r3, pc, #472	; (adr r3, 8014128 <__ieee754_pow+0x708>)
 8013f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f52:	f7ec f9bb 	bl	80002cc <__adddf3>
 8013f56:	4622      	mov	r2, r4
 8013f58:	462b      	mov	r3, r5
 8013f5a:	f7ec fb6d 	bl	8000638 <__aeabi_dmul>
 8013f5e:	a374      	add	r3, pc, #464	; (adr r3, 8014130 <__ieee754_pow+0x710>)
 8013f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f64:	f7ec f9b2 	bl	80002cc <__adddf3>
 8013f68:	4622      	mov	r2, r4
 8013f6a:	462b      	mov	r3, r5
 8013f6c:	f7ec fb64 	bl	8000638 <__aeabi_dmul>
 8013f70:	a371      	add	r3, pc, #452	; (adr r3, 8014138 <__ieee754_pow+0x718>)
 8013f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f76:	f7ec f9a9 	bl	80002cc <__adddf3>
 8013f7a:	4622      	mov	r2, r4
 8013f7c:	4606      	mov	r6, r0
 8013f7e:	460f      	mov	r7, r1
 8013f80:	462b      	mov	r3, r5
 8013f82:	4620      	mov	r0, r4
 8013f84:	4629      	mov	r1, r5
 8013f86:	f7ec fb57 	bl	8000638 <__aeabi_dmul>
 8013f8a:	4602      	mov	r2, r0
 8013f8c:	460b      	mov	r3, r1
 8013f8e:	4630      	mov	r0, r6
 8013f90:	4639      	mov	r1, r7
 8013f92:	f7ec fb51 	bl	8000638 <__aeabi_dmul>
 8013f96:	4642      	mov	r2, r8
 8013f98:	4604      	mov	r4, r0
 8013f9a:	460d      	mov	r5, r1
 8013f9c:	464b      	mov	r3, r9
 8013f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fa2:	f7ec f993 	bl	80002cc <__adddf3>
 8013fa6:	ec53 2b18 	vmov	r2, r3, d8
 8013faa:	f7ec fb45 	bl	8000638 <__aeabi_dmul>
 8013fae:	4622      	mov	r2, r4
 8013fb0:	462b      	mov	r3, r5
 8013fb2:	f7ec f98b 	bl	80002cc <__adddf3>
 8013fb6:	4642      	mov	r2, r8
 8013fb8:	4682      	mov	sl, r0
 8013fba:	468b      	mov	fp, r1
 8013fbc:	464b      	mov	r3, r9
 8013fbe:	4640      	mov	r0, r8
 8013fc0:	4649      	mov	r1, r9
 8013fc2:	f7ec fb39 	bl	8000638 <__aeabi_dmul>
 8013fc6:	4b6c      	ldr	r3, [pc, #432]	; (8014178 <__ieee754_pow+0x758>)
 8013fc8:	2200      	movs	r2, #0
 8013fca:	4606      	mov	r6, r0
 8013fcc:	460f      	mov	r7, r1
 8013fce:	f7ec f97d 	bl	80002cc <__adddf3>
 8013fd2:	4652      	mov	r2, sl
 8013fd4:	465b      	mov	r3, fp
 8013fd6:	f7ec f979 	bl	80002cc <__adddf3>
 8013fda:	9c04      	ldr	r4, [sp, #16]
 8013fdc:	460d      	mov	r5, r1
 8013fde:	4622      	mov	r2, r4
 8013fe0:	460b      	mov	r3, r1
 8013fe2:	4640      	mov	r0, r8
 8013fe4:	4649      	mov	r1, r9
 8013fe6:	f7ec fb27 	bl	8000638 <__aeabi_dmul>
 8013fea:	4b63      	ldr	r3, [pc, #396]	; (8014178 <__ieee754_pow+0x758>)
 8013fec:	4680      	mov	r8, r0
 8013fee:	4689      	mov	r9, r1
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	4629      	mov	r1, r5
 8013ff6:	f7ec f967 	bl	80002c8 <__aeabi_dsub>
 8013ffa:	4632      	mov	r2, r6
 8013ffc:	463b      	mov	r3, r7
 8013ffe:	f7ec f963 	bl	80002c8 <__aeabi_dsub>
 8014002:	4602      	mov	r2, r0
 8014004:	460b      	mov	r3, r1
 8014006:	4650      	mov	r0, sl
 8014008:	4659      	mov	r1, fp
 801400a:	f7ec f95d 	bl	80002c8 <__aeabi_dsub>
 801400e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014012:	f7ec fb11 	bl	8000638 <__aeabi_dmul>
 8014016:	4622      	mov	r2, r4
 8014018:	4606      	mov	r6, r0
 801401a:	460f      	mov	r7, r1
 801401c:	462b      	mov	r3, r5
 801401e:	ec51 0b18 	vmov	r0, r1, d8
 8014022:	f7ec fb09 	bl	8000638 <__aeabi_dmul>
 8014026:	4602      	mov	r2, r0
 8014028:	460b      	mov	r3, r1
 801402a:	4630      	mov	r0, r6
 801402c:	4639      	mov	r1, r7
 801402e:	f7ec f94d 	bl	80002cc <__adddf3>
 8014032:	4606      	mov	r6, r0
 8014034:	460f      	mov	r7, r1
 8014036:	4602      	mov	r2, r0
 8014038:	460b      	mov	r3, r1
 801403a:	4640      	mov	r0, r8
 801403c:	4649      	mov	r1, r9
 801403e:	f7ec f945 	bl	80002cc <__adddf3>
 8014042:	9c04      	ldr	r4, [sp, #16]
 8014044:	a33e      	add	r3, pc, #248	; (adr r3, 8014140 <__ieee754_pow+0x720>)
 8014046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801404a:	4620      	mov	r0, r4
 801404c:	460d      	mov	r5, r1
 801404e:	f7ec faf3 	bl	8000638 <__aeabi_dmul>
 8014052:	4642      	mov	r2, r8
 8014054:	ec41 0b18 	vmov	d8, r0, r1
 8014058:	464b      	mov	r3, r9
 801405a:	4620      	mov	r0, r4
 801405c:	4629      	mov	r1, r5
 801405e:	f7ec f933 	bl	80002c8 <__aeabi_dsub>
 8014062:	4602      	mov	r2, r0
 8014064:	460b      	mov	r3, r1
 8014066:	4630      	mov	r0, r6
 8014068:	4639      	mov	r1, r7
 801406a:	f7ec f92d 	bl	80002c8 <__aeabi_dsub>
 801406e:	a336      	add	r3, pc, #216	; (adr r3, 8014148 <__ieee754_pow+0x728>)
 8014070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014074:	f7ec fae0 	bl	8000638 <__aeabi_dmul>
 8014078:	a335      	add	r3, pc, #212	; (adr r3, 8014150 <__ieee754_pow+0x730>)
 801407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801407e:	4606      	mov	r6, r0
 8014080:	460f      	mov	r7, r1
 8014082:	4620      	mov	r0, r4
 8014084:	4629      	mov	r1, r5
 8014086:	f7ec fad7 	bl	8000638 <__aeabi_dmul>
 801408a:	4602      	mov	r2, r0
 801408c:	460b      	mov	r3, r1
 801408e:	4630      	mov	r0, r6
 8014090:	4639      	mov	r1, r7
 8014092:	f7ec f91b 	bl	80002cc <__adddf3>
 8014096:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014098:	4b38      	ldr	r3, [pc, #224]	; (801417c <__ieee754_pow+0x75c>)
 801409a:	4413      	add	r3, r2
 801409c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a0:	f7ec f914 	bl	80002cc <__adddf3>
 80140a4:	4682      	mov	sl, r0
 80140a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80140a8:	468b      	mov	fp, r1
 80140aa:	f7ec fa5b 	bl	8000564 <__aeabi_i2d>
 80140ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140b0:	4b33      	ldr	r3, [pc, #204]	; (8014180 <__ieee754_pow+0x760>)
 80140b2:	4413      	add	r3, r2
 80140b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80140b8:	4606      	mov	r6, r0
 80140ba:	460f      	mov	r7, r1
 80140bc:	4652      	mov	r2, sl
 80140be:	465b      	mov	r3, fp
 80140c0:	ec51 0b18 	vmov	r0, r1, d8
 80140c4:	f7ec f902 	bl	80002cc <__adddf3>
 80140c8:	4642      	mov	r2, r8
 80140ca:	464b      	mov	r3, r9
 80140cc:	f7ec f8fe 	bl	80002cc <__adddf3>
 80140d0:	4632      	mov	r2, r6
 80140d2:	463b      	mov	r3, r7
 80140d4:	f7ec f8fa 	bl	80002cc <__adddf3>
 80140d8:	9c04      	ldr	r4, [sp, #16]
 80140da:	4632      	mov	r2, r6
 80140dc:	463b      	mov	r3, r7
 80140de:	4620      	mov	r0, r4
 80140e0:	460d      	mov	r5, r1
 80140e2:	f7ec f8f1 	bl	80002c8 <__aeabi_dsub>
 80140e6:	4642      	mov	r2, r8
 80140e8:	464b      	mov	r3, r9
 80140ea:	f7ec f8ed 	bl	80002c8 <__aeabi_dsub>
 80140ee:	ec53 2b18 	vmov	r2, r3, d8
 80140f2:	f7ec f8e9 	bl	80002c8 <__aeabi_dsub>
 80140f6:	4602      	mov	r2, r0
 80140f8:	460b      	mov	r3, r1
 80140fa:	4650      	mov	r0, sl
 80140fc:	4659      	mov	r1, fp
 80140fe:	e606      	b.n	8013d0e <__ieee754_pow+0x2ee>
 8014100:	2401      	movs	r4, #1
 8014102:	e6a0      	b.n	8013e46 <__ieee754_pow+0x426>
 8014104:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014158 <__ieee754_pow+0x738>
 8014108:	e60d      	b.n	8013d26 <__ieee754_pow+0x306>
 801410a:	bf00      	nop
 801410c:	f3af 8000 	nop.w
 8014110:	4a454eef 	.word	0x4a454eef
 8014114:	3fca7e28 	.word	0x3fca7e28
 8014118:	93c9db65 	.word	0x93c9db65
 801411c:	3fcd864a 	.word	0x3fcd864a
 8014120:	a91d4101 	.word	0xa91d4101
 8014124:	3fd17460 	.word	0x3fd17460
 8014128:	518f264d 	.word	0x518f264d
 801412c:	3fd55555 	.word	0x3fd55555
 8014130:	db6fabff 	.word	0xdb6fabff
 8014134:	3fdb6db6 	.word	0x3fdb6db6
 8014138:	33333303 	.word	0x33333303
 801413c:	3fe33333 	.word	0x3fe33333
 8014140:	e0000000 	.word	0xe0000000
 8014144:	3feec709 	.word	0x3feec709
 8014148:	dc3a03fd 	.word	0xdc3a03fd
 801414c:	3feec709 	.word	0x3feec709
 8014150:	145b01f5 	.word	0x145b01f5
 8014154:	be3e2fe0 	.word	0xbe3e2fe0
 8014158:	00000000 	.word	0x00000000
 801415c:	3ff00000 	.word	0x3ff00000
 8014160:	7ff00000 	.word	0x7ff00000
 8014164:	43400000 	.word	0x43400000
 8014168:	0003988e 	.word	0x0003988e
 801416c:	000bb679 	.word	0x000bb679
 8014170:	08015128 	.word	0x08015128
 8014174:	3ff00000 	.word	0x3ff00000
 8014178:	40080000 	.word	0x40080000
 801417c:	08015148 	.word	0x08015148
 8014180:	08015138 	.word	0x08015138
 8014184:	a3b5      	add	r3, pc, #724	; (adr r3, 801445c <__ieee754_pow+0xa3c>)
 8014186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801418a:	4640      	mov	r0, r8
 801418c:	4649      	mov	r1, r9
 801418e:	f7ec f89d 	bl	80002cc <__adddf3>
 8014192:	4622      	mov	r2, r4
 8014194:	ec41 0b1a 	vmov	d10, r0, r1
 8014198:	462b      	mov	r3, r5
 801419a:	4630      	mov	r0, r6
 801419c:	4639      	mov	r1, r7
 801419e:	f7ec f893 	bl	80002c8 <__aeabi_dsub>
 80141a2:	4602      	mov	r2, r0
 80141a4:	460b      	mov	r3, r1
 80141a6:	ec51 0b1a 	vmov	r0, r1, d10
 80141aa:	f7ec fcd5 	bl	8000b58 <__aeabi_dcmpgt>
 80141ae:	2800      	cmp	r0, #0
 80141b0:	f47f adf8 	bne.w	8013da4 <__ieee754_pow+0x384>
 80141b4:	4aa4      	ldr	r2, [pc, #656]	; (8014448 <__ieee754_pow+0xa28>)
 80141b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80141ba:	4293      	cmp	r3, r2
 80141bc:	f340 810b 	ble.w	80143d6 <__ieee754_pow+0x9b6>
 80141c0:	151b      	asrs	r3, r3, #20
 80141c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80141c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80141ca:	fa4a f303 	asr.w	r3, sl, r3
 80141ce:	445b      	add	r3, fp
 80141d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80141d4:	4e9d      	ldr	r6, [pc, #628]	; (801444c <__ieee754_pow+0xa2c>)
 80141d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80141da:	4116      	asrs	r6, r2
 80141dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80141e0:	2000      	movs	r0, #0
 80141e2:	ea23 0106 	bic.w	r1, r3, r6
 80141e6:	f1c2 0214 	rsb	r2, r2, #20
 80141ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80141ee:	fa4a fa02 	asr.w	sl, sl, r2
 80141f2:	f1bb 0f00 	cmp.w	fp, #0
 80141f6:	4602      	mov	r2, r0
 80141f8:	460b      	mov	r3, r1
 80141fa:	4620      	mov	r0, r4
 80141fc:	4629      	mov	r1, r5
 80141fe:	bfb8      	it	lt
 8014200:	f1ca 0a00 	rsblt	sl, sl, #0
 8014204:	f7ec f860 	bl	80002c8 <__aeabi_dsub>
 8014208:	ec41 0b19 	vmov	d9, r0, r1
 801420c:	4642      	mov	r2, r8
 801420e:	464b      	mov	r3, r9
 8014210:	ec51 0b19 	vmov	r0, r1, d9
 8014214:	f7ec f85a 	bl	80002cc <__adddf3>
 8014218:	2400      	movs	r4, #0
 801421a:	a379      	add	r3, pc, #484	; (adr r3, 8014400 <__ieee754_pow+0x9e0>)
 801421c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014220:	4620      	mov	r0, r4
 8014222:	460d      	mov	r5, r1
 8014224:	f7ec fa08 	bl	8000638 <__aeabi_dmul>
 8014228:	ec53 2b19 	vmov	r2, r3, d9
 801422c:	4606      	mov	r6, r0
 801422e:	460f      	mov	r7, r1
 8014230:	4620      	mov	r0, r4
 8014232:	4629      	mov	r1, r5
 8014234:	f7ec f848 	bl	80002c8 <__aeabi_dsub>
 8014238:	4602      	mov	r2, r0
 801423a:	460b      	mov	r3, r1
 801423c:	4640      	mov	r0, r8
 801423e:	4649      	mov	r1, r9
 8014240:	f7ec f842 	bl	80002c8 <__aeabi_dsub>
 8014244:	a370      	add	r3, pc, #448	; (adr r3, 8014408 <__ieee754_pow+0x9e8>)
 8014246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801424a:	f7ec f9f5 	bl	8000638 <__aeabi_dmul>
 801424e:	a370      	add	r3, pc, #448	; (adr r3, 8014410 <__ieee754_pow+0x9f0>)
 8014250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014254:	4680      	mov	r8, r0
 8014256:	4689      	mov	r9, r1
 8014258:	4620      	mov	r0, r4
 801425a:	4629      	mov	r1, r5
 801425c:	f7ec f9ec 	bl	8000638 <__aeabi_dmul>
 8014260:	4602      	mov	r2, r0
 8014262:	460b      	mov	r3, r1
 8014264:	4640      	mov	r0, r8
 8014266:	4649      	mov	r1, r9
 8014268:	f7ec f830 	bl	80002cc <__adddf3>
 801426c:	4604      	mov	r4, r0
 801426e:	460d      	mov	r5, r1
 8014270:	4602      	mov	r2, r0
 8014272:	460b      	mov	r3, r1
 8014274:	4630      	mov	r0, r6
 8014276:	4639      	mov	r1, r7
 8014278:	f7ec f828 	bl	80002cc <__adddf3>
 801427c:	4632      	mov	r2, r6
 801427e:	463b      	mov	r3, r7
 8014280:	4680      	mov	r8, r0
 8014282:	4689      	mov	r9, r1
 8014284:	f7ec f820 	bl	80002c8 <__aeabi_dsub>
 8014288:	4602      	mov	r2, r0
 801428a:	460b      	mov	r3, r1
 801428c:	4620      	mov	r0, r4
 801428e:	4629      	mov	r1, r5
 8014290:	f7ec f81a 	bl	80002c8 <__aeabi_dsub>
 8014294:	4642      	mov	r2, r8
 8014296:	4606      	mov	r6, r0
 8014298:	460f      	mov	r7, r1
 801429a:	464b      	mov	r3, r9
 801429c:	4640      	mov	r0, r8
 801429e:	4649      	mov	r1, r9
 80142a0:	f7ec f9ca 	bl	8000638 <__aeabi_dmul>
 80142a4:	a35c      	add	r3, pc, #368	; (adr r3, 8014418 <__ieee754_pow+0x9f8>)
 80142a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142aa:	4604      	mov	r4, r0
 80142ac:	460d      	mov	r5, r1
 80142ae:	f7ec f9c3 	bl	8000638 <__aeabi_dmul>
 80142b2:	a35b      	add	r3, pc, #364	; (adr r3, 8014420 <__ieee754_pow+0xa00>)
 80142b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b8:	f7ec f806 	bl	80002c8 <__aeabi_dsub>
 80142bc:	4622      	mov	r2, r4
 80142be:	462b      	mov	r3, r5
 80142c0:	f7ec f9ba 	bl	8000638 <__aeabi_dmul>
 80142c4:	a358      	add	r3, pc, #352	; (adr r3, 8014428 <__ieee754_pow+0xa08>)
 80142c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ca:	f7eb ffff 	bl	80002cc <__adddf3>
 80142ce:	4622      	mov	r2, r4
 80142d0:	462b      	mov	r3, r5
 80142d2:	f7ec f9b1 	bl	8000638 <__aeabi_dmul>
 80142d6:	a356      	add	r3, pc, #344	; (adr r3, 8014430 <__ieee754_pow+0xa10>)
 80142d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142dc:	f7eb fff4 	bl	80002c8 <__aeabi_dsub>
 80142e0:	4622      	mov	r2, r4
 80142e2:	462b      	mov	r3, r5
 80142e4:	f7ec f9a8 	bl	8000638 <__aeabi_dmul>
 80142e8:	a353      	add	r3, pc, #332	; (adr r3, 8014438 <__ieee754_pow+0xa18>)
 80142ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ee:	f7eb ffed 	bl	80002cc <__adddf3>
 80142f2:	4622      	mov	r2, r4
 80142f4:	462b      	mov	r3, r5
 80142f6:	f7ec f99f 	bl	8000638 <__aeabi_dmul>
 80142fa:	4602      	mov	r2, r0
 80142fc:	460b      	mov	r3, r1
 80142fe:	4640      	mov	r0, r8
 8014300:	4649      	mov	r1, r9
 8014302:	f7eb ffe1 	bl	80002c8 <__aeabi_dsub>
 8014306:	4604      	mov	r4, r0
 8014308:	460d      	mov	r5, r1
 801430a:	4602      	mov	r2, r0
 801430c:	460b      	mov	r3, r1
 801430e:	4640      	mov	r0, r8
 8014310:	4649      	mov	r1, r9
 8014312:	f7ec f991 	bl	8000638 <__aeabi_dmul>
 8014316:	2200      	movs	r2, #0
 8014318:	ec41 0b19 	vmov	d9, r0, r1
 801431c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014320:	4620      	mov	r0, r4
 8014322:	4629      	mov	r1, r5
 8014324:	f7eb ffd0 	bl	80002c8 <__aeabi_dsub>
 8014328:	4602      	mov	r2, r0
 801432a:	460b      	mov	r3, r1
 801432c:	ec51 0b19 	vmov	r0, r1, d9
 8014330:	f7ec faac 	bl	800088c <__aeabi_ddiv>
 8014334:	4632      	mov	r2, r6
 8014336:	4604      	mov	r4, r0
 8014338:	460d      	mov	r5, r1
 801433a:	463b      	mov	r3, r7
 801433c:	4640      	mov	r0, r8
 801433e:	4649      	mov	r1, r9
 8014340:	f7ec f97a 	bl	8000638 <__aeabi_dmul>
 8014344:	4632      	mov	r2, r6
 8014346:	463b      	mov	r3, r7
 8014348:	f7eb ffc0 	bl	80002cc <__adddf3>
 801434c:	4602      	mov	r2, r0
 801434e:	460b      	mov	r3, r1
 8014350:	4620      	mov	r0, r4
 8014352:	4629      	mov	r1, r5
 8014354:	f7eb ffb8 	bl	80002c8 <__aeabi_dsub>
 8014358:	4642      	mov	r2, r8
 801435a:	464b      	mov	r3, r9
 801435c:	f7eb ffb4 	bl	80002c8 <__aeabi_dsub>
 8014360:	460b      	mov	r3, r1
 8014362:	4602      	mov	r2, r0
 8014364:	493a      	ldr	r1, [pc, #232]	; (8014450 <__ieee754_pow+0xa30>)
 8014366:	2000      	movs	r0, #0
 8014368:	f7eb ffae 	bl	80002c8 <__aeabi_dsub>
 801436c:	e9cd 0100 	strd	r0, r1, [sp]
 8014370:	9b01      	ldr	r3, [sp, #4]
 8014372:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8014376:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801437a:	da2f      	bge.n	80143dc <__ieee754_pow+0x9bc>
 801437c:	4650      	mov	r0, sl
 801437e:	ed9d 0b00 	vldr	d0, [sp]
 8014382:	f000 f9c1 	bl	8014708 <scalbn>
 8014386:	ec51 0b10 	vmov	r0, r1, d0
 801438a:	ec53 2b18 	vmov	r2, r3, d8
 801438e:	f7ff bbe0 	b.w	8013b52 <__ieee754_pow+0x132>
 8014392:	4b30      	ldr	r3, [pc, #192]	; (8014454 <__ieee754_pow+0xa34>)
 8014394:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014398:	429e      	cmp	r6, r3
 801439a:	f77f af0b 	ble.w	80141b4 <__ieee754_pow+0x794>
 801439e:	4b2e      	ldr	r3, [pc, #184]	; (8014458 <__ieee754_pow+0xa38>)
 80143a0:	440b      	add	r3, r1
 80143a2:	4303      	orrs	r3, r0
 80143a4:	d00b      	beq.n	80143be <__ieee754_pow+0x99e>
 80143a6:	a326      	add	r3, pc, #152	; (adr r3, 8014440 <__ieee754_pow+0xa20>)
 80143a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ac:	ec51 0b18 	vmov	r0, r1, d8
 80143b0:	f7ec f942 	bl	8000638 <__aeabi_dmul>
 80143b4:	a322      	add	r3, pc, #136	; (adr r3, 8014440 <__ieee754_pow+0xa20>)
 80143b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ba:	f7ff bbca 	b.w	8013b52 <__ieee754_pow+0x132>
 80143be:	4622      	mov	r2, r4
 80143c0:	462b      	mov	r3, r5
 80143c2:	f7eb ff81 	bl	80002c8 <__aeabi_dsub>
 80143c6:	4642      	mov	r2, r8
 80143c8:	464b      	mov	r3, r9
 80143ca:	f7ec fbbb 	bl	8000b44 <__aeabi_dcmpge>
 80143ce:	2800      	cmp	r0, #0
 80143d0:	f43f aef0 	beq.w	80141b4 <__ieee754_pow+0x794>
 80143d4:	e7e7      	b.n	80143a6 <__ieee754_pow+0x986>
 80143d6:	f04f 0a00 	mov.w	sl, #0
 80143da:	e717      	b.n	801420c <__ieee754_pow+0x7ec>
 80143dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143e0:	4619      	mov	r1, r3
 80143e2:	e7d2      	b.n	801438a <__ieee754_pow+0x96a>
 80143e4:	491a      	ldr	r1, [pc, #104]	; (8014450 <__ieee754_pow+0xa30>)
 80143e6:	2000      	movs	r0, #0
 80143e8:	f7ff bb9e 	b.w	8013b28 <__ieee754_pow+0x108>
 80143ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143f0:	f7ff bb9a 	b.w	8013b28 <__ieee754_pow+0x108>
 80143f4:	9000      	str	r0, [sp, #0]
 80143f6:	f7ff bb76 	b.w	8013ae6 <__ieee754_pow+0xc6>
 80143fa:	2100      	movs	r1, #0
 80143fc:	f7ff bb60 	b.w	8013ac0 <__ieee754_pow+0xa0>
 8014400:	00000000 	.word	0x00000000
 8014404:	3fe62e43 	.word	0x3fe62e43
 8014408:	fefa39ef 	.word	0xfefa39ef
 801440c:	3fe62e42 	.word	0x3fe62e42
 8014410:	0ca86c39 	.word	0x0ca86c39
 8014414:	be205c61 	.word	0xbe205c61
 8014418:	72bea4d0 	.word	0x72bea4d0
 801441c:	3e663769 	.word	0x3e663769
 8014420:	c5d26bf1 	.word	0xc5d26bf1
 8014424:	3ebbbd41 	.word	0x3ebbbd41
 8014428:	af25de2c 	.word	0xaf25de2c
 801442c:	3f11566a 	.word	0x3f11566a
 8014430:	16bebd93 	.word	0x16bebd93
 8014434:	3f66c16c 	.word	0x3f66c16c
 8014438:	5555553e 	.word	0x5555553e
 801443c:	3fc55555 	.word	0x3fc55555
 8014440:	c2f8f359 	.word	0xc2f8f359
 8014444:	01a56e1f 	.word	0x01a56e1f
 8014448:	3fe00000 	.word	0x3fe00000
 801444c:	000fffff 	.word	0x000fffff
 8014450:	3ff00000 	.word	0x3ff00000
 8014454:	4090cbff 	.word	0x4090cbff
 8014458:	3f6f3400 	.word	0x3f6f3400
 801445c:	652b82fe 	.word	0x652b82fe
 8014460:	3c971547 	.word	0x3c971547

08014464 <__ieee754_sqrt>:
 8014464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014468:	ec55 4b10 	vmov	r4, r5, d0
 801446c:	4e56      	ldr	r6, [pc, #344]	; (80145c8 <__ieee754_sqrt+0x164>)
 801446e:	43ae      	bics	r6, r5
 8014470:	ee10 0a10 	vmov	r0, s0
 8014474:	ee10 3a10 	vmov	r3, s0
 8014478:	4629      	mov	r1, r5
 801447a:	462a      	mov	r2, r5
 801447c:	d110      	bne.n	80144a0 <__ieee754_sqrt+0x3c>
 801447e:	ee10 2a10 	vmov	r2, s0
 8014482:	462b      	mov	r3, r5
 8014484:	f7ec f8d8 	bl	8000638 <__aeabi_dmul>
 8014488:	4602      	mov	r2, r0
 801448a:	460b      	mov	r3, r1
 801448c:	4620      	mov	r0, r4
 801448e:	4629      	mov	r1, r5
 8014490:	f7eb ff1c 	bl	80002cc <__adddf3>
 8014494:	4604      	mov	r4, r0
 8014496:	460d      	mov	r5, r1
 8014498:	ec45 4b10 	vmov	d0, r4, r5
 801449c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144a0:	2d00      	cmp	r5, #0
 80144a2:	dc10      	bgt.n	80144c6 <__ieee754_sqrt+0x62>
 80144a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80144a8:	4330      	orrs	r0, r6
 80144aa:	d0f5      	beq.n	8014498 <__ieee754_sqrt+0x34>
 80144ac:	b15d      	cbz	r5, 80144c6 <__ieee754_sqrt+0x62>
 80144ae:	ee10 2a10 	vmov	r2, s0
 80144b2:	462b      	mov	r3, r5
 80144b4:	ee10 0a10 	vmov	r0, s0
 80144b8:	f7eb ff06 	bl	80002c8 <__aeabi_dsub>
 80144bc:	4602      	mov	r2, r0
 80144be:	460b      	mov	r3, r1
 80144c0:	f7ec f9e4 	bl	800088c <__aeabi_ddiv>
 80144c4:	e7e6      	b.n	8014494 <__ieee754_sqrt+0x30>
 80144c6:	1509      	asrs	r1, r1, #20
 80144c8:	d076      	beq.n	80145b8 <__ieee754_sqrt+0x154>
 80144ca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80144ce:	07ce      	lsls	r6, r1, #31
 80144d0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80144d4:	bf5e      	ittt	pl
 80144d6:	0fda      	lsrpl	r2, r3, #31
 80144d8:	005b      	lslpl	r3, r3, #1
 80144da:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80144de:	0fda      	lsrs	r2, r3, #31
 80144e0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80144e4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80144e8:	2000      	movs	r0, #0
 80144ea:	106d      	asrs	r5, r5, #1
 80144ec:	005b      	lsls	r3, r3, #1
 80144ee:	f04f 0e16 	mov.w	lr, #22
 80144f2:	4684      	mov	ip, r0
 80144f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80144f8:	eb0c 0401 	add.w	r4, ip, r1
 80144fc:	4294      	cmp	r4, r2
 80144fe:	bfde      	ittt	le
 8014500:	1b12      	suble	r2, r2, r4
 8014502:	eb04 0c01 	addle.w	ip, r4, r1
 8014506:	1840      	addle	r0, r0, r1
 8014508:	0052      	lsls	r2, r2, #1
 801450a:	f1be 0e01 	subs.w	lr, lr, #1
 801450e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014512:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014516:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801451a:	d1ed      	bne.n	80144f8 <__ieee754_sqrt+0x94>
 801451c:	4671      	mov	r1, lr
 801451e:	2720      	movs	r7, #32
 8014520:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014524:	4562      	cmp	r2, ip
 8014526:	eb04 060e 	add.w	r6, r4, lr
 801452a:	dc02      	bgt.n	8014532 <__ieee754_sqrt+0xce>
 801452c:	d113      	bne.n	8014556 <__ieee754_sqrt+0xf2>
 801452e:	429e      	cmp	r6, r3
 8014530:	d811      	bhi.n	8014556 <__ieee754_sqrt+0xf2>
 8014532:	2e00      	cmp	r6, #0
 8014534:	eb06 0e04 	add.w	lr, r6, r4
 8014538:	da43      	bge.n	80145c2 <__ieee754_sqrt+0x15e>
 801453a:	f1be 0f00 	cmp.w	lr, #0
 801453e:	db40      	blt.n	80145c2 <__ieee754_sqrt+0x15e>
 8014540:	f10c 0801 	add.w	r8, ip, #1
 8014544:	eba2 020c 	sub.w	r2, r2, ip
 8014548:	429e      	cmp	r6, r3
 801454a:	bf88      	it	hi
 801454c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014550:	1b9b      	subs	r3, r3, r6
 8014552:	4421      	add	r1, r4
 8014554:	46c4      	mov	ip, r8
 8014556:	0052      	lsls	r2, r2, #1
 8014558:	3f01      	subs	r7, #1
 801455a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801455e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8014562:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014566:	d1dd      	bne.n	8014524 <__ieee754_sqrt+0xc0>
 8014568:	4313      	orrs	r3, r2
 801456a:	d006      	beq.n	801457a <__ieee754_sqrt+0x116>
 801456c:	1c4c      	adds	r4, r1, #1
 801456e:	bf13      	iteet	ne
 8014570:	3101      	addne	r1, #1
 8014572:	3001      	addeq	r0, #1
 8014574:	4639      	moveq	r1, r7
 8014576:	f021 0101 	bicne.w	r1, r1, #1
 801457a:	1043      	asrs	r3, r0, #1
 801457c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8014580:	0849      	lsrs	r1, r1, #1
 8014582:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8014586:	07c2      	lsls	r2, r0, #31
 8014588:	bf48      	it	mi
 801458a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801458e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8014592:	460c      	mov	r4, r1
 8014594:	463d      	mov	r5, r7
 8014596:	e77f      	b.n	8014498 <__ieee754_sqrt+0x34>
 8014598:	0ada      	lsrs	r2, r3, #11
 801459a:	3815      	subs	r0, #21
 801459c:	055b      	lsls	r3, r3, #21
 801459e:	2a00      	cmp	r2, #0
 80145a0:	d0fa      	beq.n	8014598 <__ieee754_sqrt+0x134>
 80145a2:	02d7      	lsls	r7, r2, #11
 80145a4:	d50a      	bpl.n	80145bc <__ieee754_sqrt+0x158>
 80145a6:	f1c1 0420 	rsb	r4, r1, #32
 80145aa:	fa23 f404 	lsr.w	r4, r3, r4
 80145ae:	1e4d      	subs	r5, r1, #1
 80145b0:	408b      	lsls	r3, r1
 80145b2:	4322      	orrs	r2, r4
 80145b4:	1b41      	subs	r1, r0, r5
 80145b6:	e788      	b.n	80144ca <__ieee754_sqrt+0x66>
 80145b8:	4608      	mov	r0, r1
 80145ba:	e7f0      	b.n	801459e <__ieee754_sqrt+0x13a>
 80145bc:	0052      	lsls	r2, r2, #1
 80145be:	3101      	adds	r1, #1
 80145c0:	e7ef      	b.n	80145a2 <__ieee754_sqrt+0x13e>
 80145c2:	46e0      	mov	r8, ip
 80145c4:	e7be      	b.n	8014544 <__ieee754_sqrt+0xe0>
 80145c6:	bf00      	nop
 80145c8:	7ff00000 	.word	0x7ff00000

080145cc <fabs>:
 80145cc:	ec51 0b10 	vmov	r0, r1, d0
 80145d0:	ee10 2a10 	vmov	r2, s0
 80145d4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80145d8:	ec43 2b10 	vmov	d0, r2, r3
 80145dc:	4770      	bx	lr

080145de <finite>:
 80145de:	b082      	sub	sp, #8
 80145e0:	ed8d 0b00 	vstr	d0, [sp]
 80145e4:	9801      	ldr	r0, [sp, #4]
 80145e6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80145ea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80145ee:	0fc0      	lsrs	r0, r0, #31
 80145f0:	b002      	add	sp, #8
 80145f2:	4770      	bx	lr

080145f4 <rint>:
 80145f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80145f6:	ec51 0b10 	vmov	r0, r1, d0
 80145fa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80145fe:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014602:	2e13      	cmp	r6, #19
 8014604:	ee10 4a10 	vmov	r4, s0
 8014608:	460b      	mov	r3, r1
 801460a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801460e:	dc58      	bgt.n	80146c2 <rint+0xce>
 8014610:	2e00      	cmp	r6, #0
 8014612:	da2b      	bge.n	801466c <rint+0x78>
 8014614:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014618:	4302      	orrs	r2, r0
 801461a:	d023      	beq.n	8014664 <rint+0x70>
 801461c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014620:	4302      	orrs	r2, r0
 8014622:	4254      	negs	r4, r2
 8014624:	4314      	orrs	r4, r2
 8014626:	0c4b      	lsrs	r3, r1, #17
 8014628:	0b24      	lsrs	r4, r4, #12
 801462a:	045b      	lsls	r3, r3, #17
 801462c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014630:	ea44 0103 	orr.w	r1, r4, r3
 8014634:	4b32      	ldr	r3, [pc, #200]	; (8014700 <rint+0x10c>)
 8014636:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801463a:	e9d3 6700 	ldrd	r6, r7, [r3]
 801463e:	4602      	mov	r2, r0
 8014640:	460b      	mov	r3, r1
 8014642:	4630      	mov	r0, r6
 8014644:	4639      	mov	r1, r7
 8014646:	f7eb fe41 	bl	80002cc <__adddf3>
 801464a:	e9cd 0100 	strd	r0, r1, [sp]
 801464e:	463b      	mov	r3, r7
 8014650:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014654:	4632      	mov	r2, r6
 8014656:	f7eb fe37 	bl	80002c8 <__aeabi_dsub>
 801465a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801465e:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8014662:	4639      	mov	r1, r7
 8014664:	ec41 0b10 	vmov	d0, r0, r1
 8014668:	b003      	add	sp, #12
 801466a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801466c:	4a25      	ldr	r2, [pc, #148]	; (8014704 <rint+0x110>)
 801466e:	4132      	asrs	r2, r6
 8014670:	ea01 0702 	and.w	r7, r1, r2
 8014674:	4307      	orrs	r7, r0
 8014676:	d0f5      	beq.n	8014664 <rint+0x70>
 8014678:	0851      	lsrs	r1, r2, #1
 801467a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801467e:	4314      	orrs	r4, r2
 8014680:	d00c      	beq.n	801469c <rint+0xa8>
 8014682:	ea23 0201 	bic.w	r2, r3, r1
 8014686:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801468a:	2e13      	cmp	r6, #19
 801468c:	fa43 f606 	asr.w	r6, r3, r6
 8014690:	bf0c      	ite	eq
 8014692:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014696:	2400      	movne	r4, #0
 8014698:	ea42 0306 	orr.w	r3, r2, r6
 801469c:	4918      	ldr	r1, [pc, #96]	; (8014700 <rint+0x10c>)
 801469e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80146a2:	4622      	mov	r2, r4
 80146a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80146a8:	4620      	mov	r0, r4
 80146aa:	4629      	mov	r1, r5
 80146ac:	f7eb fe0e 	bl	80002cc <__adddf3>
 80146b0:	e9cd 0100 	strd	r0, r1, [sp]
 80146b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80146b8:	4622      	mov	r2, r4
 80146ba:	462b      	mov	r3, r5
 80146bc:	f7eb fe04 	bl	80002c8 <__aeabi_dsub>
 80146c0:	e7d0      	b.n	8014664 <rint+0x70>
 80146c2:	2e33      	cmp	r6, #51	; 0x33
 80146c4:	dd07      	ble.n	80146d6 <rint+0xe2>
 80146c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80146ca:	d1cb      	bne.n	8014664 <rint+0x70>
 80146cc:	ee10 2a10 	vmov	r2, s0
 80146d0:	f7eb fdfc 	bl	80002cc <__adddf3>
 80146d4:	e7c6      	b.n	8014664 <rint+0x70>
 80146d6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80146da:	f04f 36ff 	mov.w	r6, #4294967295
 80146de:	40d6      	lsrs	r6, r2
 80146e0:	4230      	tst	r0, r6
 80146e2:	d0bf      	beq.n	8014664 <rint+0x70>
 80146e4:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 80146e8:	ea4f 0156 	mov.w	r1, r6, lsr #1
 80146ec:	bf1f      	itttt	ne
 80146ee:	ea24 0101 	bicne.w	r1, r4, r1
 80146f2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80146f6:	fa44 f202 	asrne.w	r2, r4, r2
 80146fa:	ea41 0402 	orrne.w	r4, r1, r2
 80146fe:	e7cd      	b.n	801469c <rint+0xa8>
 8014700:	08015158 	.word	0x08015158
 8014704:	000fffff 	.word	0x000fffff

08014708 <scalbn>:
 8014708:	b570      	push	{r4, r5, r6, lr}
 801470a:	ec55 4b10 	vmov	r4, r5, d0
 801470e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014712:	4606      	mov	r6, r0
 8014714:	462b      	mov	r3, r5
 8014716:	b99a      	cbnz	r2, 8014740 <scalbn+0x38>
 8014718:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801471c:	4323      	orrs	r3, r4
 801471e:	d036      	beq.n	801478e <scalbn+0x86>
 8014720:	4b39      	ldr	r3, [pc, #228]	; (8014808 <scalbn+0x100>)
 8014722:	4629      	mov	r1, r5
 8014724:	ee10 0a10 	vmov	r0, s0
 8014728:	2200      	movs	r2, #0
 801472a:	f7eb ff85 	bl	8000638 <__aeabi_dmul>
 801472e:	4b37      	ldr	r3, [pc, #220]	; (801480c <scalbn+0x104>)
 8014730:	429e      	cmp	r6, r3
 8014732:	4604      	mov	r4, r0
 8014734:	460d      	mov	r5, r1
 8014736:	da10      	bge.n	801475a <scalbn+0x52>
 8014738:	a32b      	add	r3, pc, #172	; (adr r3, 80147e8 <scalbn+0xe0>)
 801473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473e:	e03a      	b.n	80147b6 <scalbn+0xae>
 8014740:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014744:	428a      	cmp	r2, r1
 8014746:	d10c      	bne.n	8014762 <scalbn+0x5a>
 8014748:	ee10 2a10 	vmov	r2, s0
 801474c:	4620      	mov	r0, r4
 801474e:	4629      	mov	r1, r5
 8014750:	f7eb fdbc 	bl	80002cc <__adddf3>
 8014754:	4604      	mov	r4, r0
 8014756:	460d      	mov	r5, r1
 8014758:	e019      	b.n	801478e <scalbn+0x86>
 801475a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801475e:	460b      	mov	r3, r1
 8014760:	3a36      	subs	r2, #54	; 0x36
 8014762:	4432      	add	r2, r6
 8014764:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014768:	428a      	cmp	r2, r1
 801476a:	dd08      	ble.n	801477e <scalbn+0x76>
 801476c:	2d00      	cmp	r5, #0
 801476e:	a120      	add	r1, pc, #128	; (adr r1, 80147f0 <scalbn+0xe8>)
 8014770:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014774:	da1c      	bge.n	80147b0 <scalbn+0xa8>
 8014776:	a120      	add	r1, pc, #128	; (adr r1, 80147f8 <scalbn+0xf0>)
 8014778:	e9d1 0100 	ldrd	r0, r1, [r1]
 801477c:	e018      	b.n	80147b0 <scalbn+0xa8>
 801477e:	2a00      	cmp	r2, #0
 8014780:	dd08      	ble.n	8014794 <scalbn+0x8c>
 8014782:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014786:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801478a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801478e:	ec45 4b10 	vmov	d0, r4, r5
 8014792:	bd70      	pop	{r4, r5, r6, pc}
 8014794:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014798:	da19      	bge.n	80147ce <scalbn+0xc6>
 801479a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801479e:	429e      	cmp	r6, r3
 80147a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80147a4:	dd0a      	ble.n	80147bc <scalbn+0xb4>
 80147a6:	a112      	add	r1, pc, #72	; (adr r1, 80147f0 <scalbn+0xe8>)
 80147a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d1e2      	bne.n	8014776 <scalbn+0x6e>
 80147b0:	a30f      	add	r3, pc, #60	; (adr r3, 80147f0 <scalbn+0xe8>)
 80147b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147b6:	f7eb ff3f 	bl	8000638 <__aeabi_dmul>
 80147ba:	e7cb      	b.n	8014754 <scalbn+0x4c>
 80147bc:	a10a      	add	r1, pc, #40	; (adr r1, 80147e8 <scalbn+0xe0>)
 80147be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d0b8      	beq.n	8014738 <scalbn+0x30>
 80147c6:	a10e      	add	r1, pc, #56	; (adr r1, 8014800 <scalbn+0xf8>)
 80147c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147cc:	e7b4      	b.n	8014738 <scalbn+0x30>
 80147ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80147d2:	3236      	adds	r2, #54	; 0x36
 80147d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80147d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80147dc:	4620      	mov	r0, r4
 80147de:	4b0c      	ldr	r3, [pc, #48]	; (8014810 <scalbn+0x108>)
 80147e0:	2200      	movs	r2, #0
 80147e2:	e7e8      	b.n	80147b6 <scalbn+0xae>
 80147e4:	f3af 8000 	nop.w
 80147e8:	c2f8f359 	.word	0xc2f8f359
 80147ec:	01a56e1f 	.word	0x01a56e1f
 80147f0:	8800759c 	.word	0x8800759c
 80147f4:	7e37e43c 	.word	0x7e37e43c
 80147f8:	8800759c 	.word	0x8800759c
 80147fc:	fe37e43c 	.word	0xfe37e43c
 8014800:	c2f8f359 	.word	0xc2f8f359
 8014804:	81a56e1f 	.word	0x81a56e1f
 8014808:	43500000 	.word	0x43500000
 801480c:	ffff3cb0 	.word	0xffff3cb0
 8014810:	3c900000 	.word	0x3c900000

08014814 <_init>:
 8014814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014816:	bf00      	nop
 8014818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801481a:	bc08      	pop	{r3}
 801481c:	469e      	mov	lr, r3
 801481e:	4770      	bx	lr

08014820 <_fini>:
 8014820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014822:	bf00      	nop
 8014824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014826:	bc08      	pop	{r3}
 8014828:	469e      	mov	lr, r3
 801482a:	4770      	bx	lr
