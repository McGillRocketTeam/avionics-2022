
f437_fc_v4.3_megaloop_no_ejection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000153dc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  08015590  08015590  00025590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016740  08016740  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08016740  08016740  00026740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016748  08016748  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016748  08016748  00026748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801674c  0801674c  0002674c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08016750  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00001870  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20001a70  20001a70  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d419  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f9a  00000000  00000000  0006d649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002580  00000000  00000000  000735e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002358  00000000  00000000  00075b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cb49  00000000  00000000  00077ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a7d0  00000000  00000000  000a4a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f515a  00000000  00000000  000cf1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c4333  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b764  00000000  00000000  001c4388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000200 	.word	0x20000200
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015574 	.word	0x08015574

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000204 	.word	0x20000204
 80001ec:	08015574 	.word	0x08015574

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <Max31855_Read_Temp>:
uint32_t sign=0;									  	// Sign bit
uint8_t DATARX[4];                                    	// Raw Data from MAX6675
//uint8_t DATATX = {0xFF, 0xFF, 0xFF, 0xFF};         	// Raw Data from MAX6675

// ------------------- Functions ----------------
float Max31855_Read_Temp(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_RESET); 	// Low State for SPI Communication
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001038:	482c      	ldr	r0, [pc, #176]	; (80010ec <Max31855_Read_Temp+0xc0>)
 800103a:	f006 f88b 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi4, DATARX, 4, 1000);         	// DATA Transfer
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	2204      	movs	r2, #4
 8001044:	492a      	ldr	r1, [pc, #168]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001046:	482b      	ldr	r0, [pc, #172]	; (80010f4 <Max31855_Read_Temp+0xc8>)
 8001048:	f008 fac8 	bl	80095dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SSPORT, SSPIN, GPIO_PIN_SET);   	// High State for SPI Communication
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001052:	4826      	ldr	r0, [pc, #152]	; (80010ec <Max31855_Read_Temp+0xc0>)
 8001054:	f006 f87e 	bl	8007154 <HAL_GPIO_WritePin>

	uint32_t v = DATARX[3] | (DATARX[2] << 8) | (DATARX[1] << 16) | (DATARX[0] << 24);
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 800105a:	78db      	ldrb	r3, [r3, #3]
 800105c:	461a      	mov	r2, r3
 800105e:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001060:	789b      	ldrb	r3, [r3, #2]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	431a      	orrs	r2, r3
 8001066:	4b22      	ldr	r3, [pc, #136]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	041b      	lsls	r3, r3, #16
 800106c:	431a      	orrs	r2, r3
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <Max31855_Read_Temp+0xc4>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	061b      	lsls	r3, r3, #24
 8001074:	4313      	orrs	r3, r2
 8001076:	60fb      	str	r3, [r7, #12]

	Error = v & 0x07;								  	// Error Detection
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <Max31855_Read_Temp+0xcc>)
 8001084:	701a      	strb	r2, [r3, #0]

	if (v & 0x7) {
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <Max31855_Read_Temp+0x68>
		// uh oh, a serious problem!
		return -99999;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <Max31855_Read_Temp+0xd0>)
 8001092:	e024      	b.n	80010de <Max31855_Read_Temp+0xb2>
	}

	if (v & 0x80000000) {
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	da07      	bge.n	80010aa <Max31855_Read_Temp+0x7e>
		// Negative value, drop the lower 18 bits and explicitly extend sign bits.
		v = 0xFFFFC000 | ((v >> 18) & 0x00003FFF);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	0c9b      	lsrs	r3, r3, #18
 800109e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80010a2:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e002      	b.n	80010b0 <Max31855_Read_Temp+0x84>
	} else {
		// Positive value, just drop the lower 18 bits.
		v >>= 18;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0c9b      	lsrs	r3, r3, #18
 80010ae:	60fb      	str	r3, [r7, #12]
	}

	double centigrade = v;
 80010b0:	68f8      	ldr	r0, [r7, #12]
 80010b2:	f7ff fa47 	bl	8000544 <__aeabi_ui2d>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	e9c7 2300 	strd	r2, r3, [r7]

	// LSB = 0.25 degrees C
	centigrade *= 0.25;
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <Max31855_Read_Temp+0xd4>)
 80010c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c8:	f7ff fab6 	bl	8000638 <__aeabi_dmul>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	e9c7 2300 	strd	r2, r3, [r7]
	return centigrade;
 80010d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010d8:	f7ff fda6 	bl	8000c28 <__aeabi_d2f>
 80010dc:	4603      	mov	r3, r0
 80010de:	ee07 3a90 	vmov	s15, r3
}
 80010e2:	eeb0 0a67 	vmov.f32	s0, s15
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40021000 	.word	0x40021000
 80010f0:	200004fc 	.word	0x200004fc
 80010f4:	20000500 	.word	0x20000500
 80010f8:	2000021c 	.word	0x2000021c
 80010fc:	c7c34f80 	.word	0xc7c34f80
 8001100:	3fd00000 	.word	0x3fd00000

08001104 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800110a:	463b      	mov	r3, r7
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_ADC1_Init+0x98>)
 8001118:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <MX_ADC1_Init+0x9c>)
 800111a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_ADC1_Init+0x98>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_ADC1_Init+0x98>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_ADC1_Init+0x98>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_ADC1_Init+0x98>)
 8001130:	2200      	movs	r2, #0
 8001132:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_ADC1_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_ADC1_Init+0x98>)
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_ADC1_Init+0x98>)
 8001144:	4a17      	ldr	r2, [pc, #92]	; (80011a4 <MX_ADC1_Init+0xa0>)
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_ADC1_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_ADC1_Init+0x98>)
 8001150:	2201      	movs	r2, #1
 8001152:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_ADC1_Init+0x98>)
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_ADC1_Init+0x98>)
 800115e:	2201      	movs	r2, #1
 8001160:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001162:	480e      	ldr	r0, [pc, #56]	; (800119c <MX_ADC1_Init+0x98>)
 8001164:	f004 fd92 	bl	8005c8c <HAL_ADC_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800116e:	f002 fcd1 	bl	8003b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001172:	2306      	movs	r3, #6
 8001174:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001176:	2301      	movs	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800117a:	2307      	movs	r3, #7
 800117c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_ADC1_Init+0x98>)
 8001184:	f004 ff50 	bl	8006028 <HAL_ADC_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800118e:	f002 fcc1 	bl	8003b14 <Error_Handler>
  }

}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000558 	.word	0x20000558
 80011a0:	40012000 	.word	0x40012000
 80011a4:	0f000001 	.word	0x0f000001

080011a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_ADC_MspInit+0x7c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d127      	bne.n	800121a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <HAL_ADC_MspInit+0x80>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ADC1_IN6_PropulsionPressureTransducer_Pin;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	2303      	movs	r3, #3
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_IN6_PropulsionPressureTransducer_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_ADC_MspInit+0x84>)
 8001216:	f005 fdd9 	bl	8006dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40012000 	.word	0x40012000
 8001228:	40023800 	.word	0x40023800
 800122c:	40020000 	.word	0x40020000

08001230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MX_DMA_Init+0x78>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a1a      	ldr	r2, [pc, #104]	; (80012a8 <MX_DMA_Init+0x78>)
 8001240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MX_DMA_Init+0x78>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_DMA_Init+0x78>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_DMA_Init+0x78>)
 800125c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <MX_DMA_Init+0x78>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 15, 0);
 800126e:	2200      	movs	r2, #0
 8001270:	210f      	movs	r1, #15
 8001272:	200c      	movs	r0, #12
 8001274:	f005 f9e1 	bl	800663a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001278:	200c      	movs	r0, #12
 800127a:	f005 f9fa 	bl	8006672 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	200e      	movs	r0, #14
 8001284:	f005 f9d9 	bl	800663a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001288:	200e      	movs	r0, #14
 800128a:	f005 f9f2 	bl	8006672 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2039      	movs	r0, #57	; 0x39
 8001294:	f005 f9d1 	bl	800663a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001298:	2039      	movs	r0, #57	; 0x39
 800129a:	f005 f9ea 	bl	8006672 <HAL_NVIC_EnableIRQ>

}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
 80012c6:	4bb4      	ldr	r3, [pc, #720]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4ab3      	ldr	r2, [pc, #716]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012cc:	f043 0310 	orr.w	r3, r3, #16
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4bb1      	ldr	r3, [pc, #708]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	623b      	str	r3, [r7, #32]
 80012dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]
 80012e2:	4bad      	ldr	r3, [pc, #692]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4aac      	ldr	r2, [pc, #688]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4baa      	ldr	r3, [pc, #680]	; (8001598 <MX_GPIO_Init+0x2ec>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0304 	and.w	r3, r3, #4
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	4ba6      	ldr	r3, [pc, #664]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4aa5      	ldr	r2, [pc, #660]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001304:	f043 0320 	orr.w	r3, r3, #32
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4ba3      	ldr	r3, [pc, #652]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0320 	and.w	r3, r3, #32
 8001312:	61bb      	str	r3, [r7, #24]
 8001314:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b9f      	ldr	r3, [pc, #636]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a9e      	ldr	r2, [pc, #632]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b9c      	ldr	r3, [pc, #624]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b98      	ldr	r3, [pc, #608]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a97      	ldr	r2, [pc, #604]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b95      	ldr	r3, [pc, #596]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b91      	ldr	r3, [pc, #580]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a90      	ldr	r2, [pc, #576]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b8e      	ldr	r3, [pc, #568]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b8a      	ldr	r3, [pc, #552]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a89      	ldr	r2, [pc, #548]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b87      	ldr	r3, [pc, #540]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	4b83      	ldr	r3, [pc, #524]	; (8001598 <MX_GPIO_Init+0x2ec>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a82      	ldr	r2, [pc, #520]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001390:	f043 0308 	orr.w	r3, r3, #8
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b80      	ldr	r3, [pc, #512]	; (8001598 <MX_GPIO_Init+0x2ec>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin, GPIO_PIN_RESET);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f248 4184 	movw	r1, #33924	; 0x8484
 80013a8:	487c      	ldr	r0, [pc, #496]	; (800159c <MX_GPIO_Init+0x2f0>)
 80013aa:	f005 fed3 	bl	8007154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013b4:	487a      	ldr	r0, [pc, #488]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 80013b6:	f005 fecd 	bl	8007154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin, GPIO_PIN_RESET);
 80013ba:	2200      	movs	r2, #0
 80013bc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80013c0:	4878      	ldr	r0, [pc, #480]	; (80015a4 <MX_GPIO_Init+0x2f8>)
 80013c2:	f005 fec7 	bl	8007154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	4877      	ldr	r0, [pc, #476]	; (80015a8 <MX_GPIO_Init+0x2fc>)
 80013cc:	f005 fec2 	bl	8007154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Prop_Gate_2_Pin|Prop_Gate_1_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80013d6:	4872      	ldr	r0, [pc, #456]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 80013d8:	f005 febc 	bl	8007154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 80013dc:	2200      	movs	r2, #0
 80013de:	f645 2126 	movw	r1, #23078	; 0x5a26
 80013e2:	4872      	ldr	r0, [pc, #456]	; (80015ac <MX_GPIO_Init+0x300>)
 80013e4:	f005 feb6 	bl	8007154 <HAL_GPIO_WritePin>
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SX_NSS_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80013ee:	4870      	ldr	r0, [pc, #448]	; (80015b0 <MX_GPIO_Init+0x304>)
 80013f0:	f005 feb0 	bl	8007154 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 41f9 	mov.w	r1, #31872	; 0x7c80
 80013fa:	486e      	ldr	r0, [pc, #440]	; (80015b4 <MX_GPIO_Init+0x308>)
 80013fc:	f005 feaa 	bl	8007154 <HAL_GPIO_WritePin>
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2170      	movs	r1, #112	; 0x70
 8001404:	486b      	ldr	r0, [pc, #428]	; (80015b4 <MX_GPIO_Init+0x308>)
 8001406:	f005 fea5 	bl	8007154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PM_12V_EN_Pin|Vent_Valve_EN_Pin|TH_CS_Pin|Iridium_RST_Pin;
 800140a:	f248 4384 	movw	r3, #33924	; 0x8484
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001418:	2300      	movs	r3, #0
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001420:	4619      	mov	r1, r3
 8001422:	485e      	ldr	r0, [pc, #376]	; (800159c <MX_GPIO_Init+0x2f0>)
 8001424:	f005 fcd2 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPIO_EXTI_SW4_Pin;
 8001428:	2310      	movs	r3, #16
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800142c:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <MX_GPIO_Init+0x30c>)
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIO_EXTI_SW4_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	4858      	ldr	r0, [pc, #352]	; (800159c <MX_GPIO_Init+0x2f0>)
 800143c:	f005 fcc6 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4851      	ldr	r0, [pc, #324]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 800145a:	f005 fcb7 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Button_Pin;
 800145e:	2301      	movs	r3, #1
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001462:	4b55      	ldr	r3, [pc, #340]	; (80015b8 <MX_GPIO_Init+0x30c>)
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Button_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	484c      	ldr	r0, [pc, #304]	; (80015a4 <MX_GPIO_Init+0x2f8>)
 8001472:	f005 fcab 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|SX_AMPLIFIER_Pin;
 8001476:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148c:	4619      	mov	r1, r3
 800148e:	4845      	ldr	r0, [pc, #276]	; (80015a4 <MX_GPIO_Init+0x2f8>)
 8001490:	f005 fc9c 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 8001494:	2308      	movs	r3, #8
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001498:	2301      	movs	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a8:	4619      	mov	r1, r3
 80014aa:	483f      	ldr	r0, [pc, #252]	; (80015a8 <MX_GPIO_Init+0x2fc>)
 80014ac:	f005 fc8e 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = IN_Prop_PyroTurboValve_LimitSwitch_Pin|IN_SD_CARD_DETECT_Pin;
 80014b0:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4837      	ldr	r0, [pc, #220]	; (80015a4 <MX_GPIO_Init+0x2f8>)
 80014c6:	f005 fc81 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IN_Prop_ActuatedVent_Feedback_Pin;
 80014ca:	2302      	movs	r3, #2
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ce:	2300      	movs	r3, #0
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(IN_Prop_ActuatedVent_Feedback_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4834      	ldr	r0, [pc, #208]	; (80015b0 <MX_GPIO_Init+0x304>)
 80014de:	f005 fc75 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Prop_Cont_2_Pin;
 80014e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Prop_Cont_2_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f4:	4619      	mov	r1, r3
 80014f6:	482a      	ldr	r0, [pc, #168]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 80014f8:	f005 fc68 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Prop_Gate_2_Pin|Prop_Gate_1_Pin;
 80014fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	4822      	ldr	r0, [pc, #136]	; (80015a0 <MX_GPIO_Init+0x2f4>)
 8001516:	f005 fc59 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = Prop_Cont_1_Pin|SX_BUSY_Pin|SX_DIO_Pin|Rcov_Cont_Main_Pin
 800151a:	f242 4319 	movw	r3, #9241	; 0x2419
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Cont_Drogue_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001520:	2300      	movs	r3, #0
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	481f      	ldr	r0, [pc, #124]	; (80015ac <MX_GPIO_Init+0x300>)
 8001530:	f005 fc4c 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = Prop_Pyro_Arming_Pin|SX_RST_Pin|SX_RF_SW_Pin|VR_CTRL_PWR_Pin
 8001534:	f645 2326 	movw	r3, #23078	; 0x5a26
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
                          |Rcov_Gate_Main_Pin|Rcov_Gate_Drogue_Pin|Rcov_Arm_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4817      	ldr	r0, [pc, #92]	; (80015ac <MX_GPIO_Init+0x300>)
 800154e:	f005 fc3d 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Payload_EN_Pin|IN_XTend_Continuity_Pin;
 8001552:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_GPIO_Init+0x2f0>)
 8001568:	f005 fc30 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_NSS_Pin;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001576:	2301      	movs	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SX_NSS_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	480a      	ldr	r0, [pc, #40]	; (80015b0 <MX_GPIO_Init+0x304>)
 8001586:	f005 fc21 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = XTend_CTS_Pin|XTend_RTS_Pin|XTend_SLEEP_Pin|XTend_RX_LED_Pin
 800158a:	f44f 43f9 	mov.w	r3, #31872	; 0x7c80
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
                          |XTend_TX_PWR_Pin|VR_CTRL_REC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	e011      	b.n	80015bc <MX_GPIO_Init+0x310>
 8001598:	40023800 	.word	0x40023800
 800159c:	40021000 	.word	0x40021000
 80015a0:	40021400 	.word	0x40021400
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40021800 	.word	0x40021800
 80015b0:	40020400 	.word	0x40020400
 80015b4:	40020c00 	.word	0x40020c00
 80015b8:	10110000 	.word	0x10110000
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4826      	ldr	r0, [pc, #152]	; (8001664 <MX_GPIO_Init+0x3b8>)
 80015ca:	f005 fbff 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SX_BANDPASS_FILTER_Pin;
 80015ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SX_BANDPASS_FILTER_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <MX_GPIO_Init+0x3b8>)
 80015e4:	f005 fbf2 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = EXTI_LPS22HH_DRDY_Pin|EXTI_ISM330DCL_INT2_Pin|EXTI_ISM330DLC_INT1_Pin;
 80015e8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <MX_GPIO_Init+0x3bc>)
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	481b      	ldr	r0, [pc, #108]	; (800166c <MX_GPIO_Init+0x3c0>)
 80015fe:	f005 fbe5 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FLASH_IO3_Pin|FLASH_WP_Pin|FLASH_CS_Pin;
 8001602:	2370      	movs	r3, #112	; 0x70
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160a:	2301      	movs	r3, #1
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160e:	2302      	movs	r3, #2
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_GPIO_Init+0x3b8>)
 800161a:	f005 fbd7 	bl	8006dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800161e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001634:	4619      	mov	r1, r3
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <MX_GPIO_Init+0x3c4>)
 8001638:	f005 fbc8 	bl	8006dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2006      	movs	r0, #6
 8001642:	f004 fffa 	bl	800663a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001646:	2006      	movs	r0, #6
 8001648:	f005 f813 	bl	8006672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	200a      	movs	r0, #10
 8001652:	f004 fff2 	bl	800663a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001656:	200a      	movs	r0, #10
 8001658:	f005 f80b 	bl	8006672 <HAL_NVIC_EnableIRQ>

}
 800165c:	bf00      	nop
 800165e:	3738      	adds	r7, #56	; 0x38
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40020c00 	.word	0x40020c00
 8001668:	10110000 	.word	0x10110000
 800166c:	40021800 	.word	0x40021800
 8001670:	40020400 	.word	0x40020400

08001674 <GPS_ParseBuffer>:
 * 		2. use memcpy to extract string between '$' and '\n' found
 * 		3. parse
 * 				a. if valid gps coordinates are found, stop
 * 				b. else repeat with rest of buffer
 */
char* GPS_ParseBuffer(double *latitude, double *longitude, float *time) {
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 800167a:	af00      	add	r7, sp, #0
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	6018      	str	r0, [r3, #0]
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	6019      	str	r1, [r3, #0]
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	601a      	str	r2, [r3, #0]
	// debugging: print full buffer first
	HAL_UART_Transmit(&huart8, rx_buf, strlen(rx_buf), HAL_MAX_DELAY);
	#endif

	// limits on the DMA buffer
	uint16_t buf_end = GPS_RX_DMA_BUF_LEN + 1; // +1 for null terminator
 800168c:	23b0      	movs	r3, #176	; 0xb0
 800168e:	f8a7 34ce 	strh.w	r3, [r7, #1230]	; 0x4ce
	uint8_t valid_string_found = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7

	// for extracting substrings to be parsed
	char current_substring[200]; // max size of valid NMEA string is 75 for the validate function
	memset(current_substring, 0, 200);
 8001698:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 800169c:	22c8      	movs	r2, #200	; 0xc8
 800169e:	2100      	movs	r1, #0
 80016a0:	4618      	mov	r0, r3
 80016a2:	f00d fe83 	bl	800f3ac <memset>
	char txbuasdf[1000] = {0};
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	3304      	adds	r3, #4
 80016b0:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00d fe78 	bl	800f3ac <memset>

	// need to know where we are in the buffer to be able to loop automatically
	char *head_of_parse_buffer = gps_rx_buf;
 80016bc:	4b48      	ldr	r3, [pc, #288]	; (80017e0 <GPS_ParseBuffer+0x16c>)
 80016be:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
	char *dollar;
	char *newline;
	uint8_t loopcount = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f887 34cd 	strb.w	r3, [r7, #1229]	; 0x4cd

	while (head_of_parse_buffer != NULL) {
 80016c8:	e05c      	b.n	8001784 <GPS_ParseBuffer+0x110>

		// get index of '$' and '\n'. note: gps_rx_buf MUST be null terminated!
		dollar = strchr(head_of_parse_buffer, '$');
 80016ca:	2124      	movs	r1, #36	; 0x24
 80016cc:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	; 0x4d0
 80016d0:	f00e fecd 	bl	801046e <strchr>
 80016d4:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
		newline = strchr(dollar, '\n'); // start after $ sign
 80016d8:	210a      	movs	r1, #10
 80016da:	f8d7 04c8 	ldr.w	r0, [r7, #1224]	; 0x4c8
 80016de:	f00e fec6 	bl	801046e <strchr>
 80016e2:	f8c7 04c4 	str.w	r0, [r7, #1220]	; 0x4c4

		if (dollar != NULL && newline != NULL) {
 80016e6:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d04e      	beq.n	800178c <GPS_ParseBuffer+0x118>
 80016ee:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d04a      	beq.n	800178c <GPS_ParseBuffer+0x118>
			// copy substring into string
			memcpy(current_substring, dollar, (newline - dollar));
 80016f6:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 80016fa:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	461a      	mov	r2, r3
 8001702:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8001706:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	; 0x4c8
 800170a:	4618      	mov	r0, r3
 800170c:	f00d fe40 	bl	800f390 <memcpy>
		else {
			break;
		}

		// parse
		if (GPS_validate((char*) current_substring)) {
 8001710:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8001714:	4618      	mov	r0, r3
 8001716:	f000 f86b 	bl	80017f0 <GPS_validate>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <GPS_ParseBuffer+0xee>
			if (GPS_parse((char*) current_substring)) {
 8001720:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8001724:	4618      	mov	r0, r3
 8001726:	f000 f8c5 	bl	80018b4 <GPS_parse>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d018      	beq.n	8001762 <GPS_ParseBuffer+0xee>
				*latitude = GPS.dec_latitude;
 8001730:	4b2c      	ldr	r3, [pc, #176]	; (80017e4 <GPS_ParseBuffer+0x170>)
 8001732:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001736:	f107 010c 	add.w	r1, r7, #12
 800173a:	6809      	ldr	r1, [r1, #0]
 800173c:	e9c1 2300 	strd	r2, r3, [r1]
				*longitude = GPS.dec_longitude;
 8001740:	4b28      	ldr	r3, [pc, #160]	; (80017e4 <GPS_ParseBuffer+0x170>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f107 0108 	add.w	r1, r7, #8
 800174a:	6809      	ldr	r1, [r1, #0]
 800174c:	e9c1 2300 	strd	r2, r3, [r1]
				*time = GPS.utc_time;
 8001750:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <GPS_ParseBuffer+0x170>)
 8001752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	601a      	str	r2, [r3, #0]
				valid_string_found = 1;
 800175a:	2301      	movs	r3, #1
 800175c:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7

				break; // got valid coordinates, stop parsing
 8001760:	e014      	b.n	800178c <GPS_ParseBuffer+0x118>
			}
		}

		memset(current_substring, 0, (newline - dollar) + 10);
 8001762:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	; 0x4c4
 8001766:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	; 0x4c8
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	330a      	adds	r3, #10
 800176e:	461a      	mov	r2, r3
 8001770:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8001774:	2100      	movs	r1, #0
 8001776:	4618      	mov	r0, r3
 8001778:	f00d fe18 	bl	800f3ac <memset>
		head_of_parse_buffer = newline; // move head of buffer to newline character found
 800177c:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
 8001780:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
	while (head_of_parse_buffer != NULL) {
 8001784:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d19e      	bne.n	80016ca <GPS_ParseBuffer+0x56>
	}


	memset(gps_rx_buf, 0, buf_end);
 800178c:	f8b7 34ce 	ldrh.w	r3, [r7, #1230]	; 0x4ce
 8001790:	461a      	mov	r2, r3
 8001792:	2100      	movs	r1, #0
 8001794:	4812      	ldr	r0, [pc, #72]	; (80017e0 <GPS_ParseBuffer+0x16c>)
 8001796:	f00d fe09 	bl	800f3ac <memset>

	// return so we can save the parsed string to sd card without including
	// sd card in this file
	if (valid_string_found) {
 800179a:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00a      	beq.n	80017b8 <GPS_ParseBuffer+0x144>
		valid_string_found = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
		strcpy(gps_parsed, current_substring);
 80017a8:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 80017ac:	4619      	mov	r1, r3
 80017ae:	480e      	ldr	r0, [pc, #56]	; (80017e8 <GPS_ParseBuffer+0x174>)
 80017b0:	f00e fe6a 	bl	8010488 <strcpy>
		return gps_parsed;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <GPS_ParseBuffer+0x174>)
 80017b6:	e00d      	b.n	80017d4 <GPS_ParseBuffer+0x160>
	}
	else {
		strcpy(gps_parsed, "\nno valid GPS parsed\n");
 80017b8:	4a0b      	ldr	r2, [pc, #44]	; (80017e8 <GPS_ParseBuffer+0x174>)
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <GPS_ParseBuffer+0x178>)
 80017bc:	4615      	mov	r5, r2
 80017be:	461c      	mov	r4, r3
 80017c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c2:	6028      	str	r0, [r5, #0]
 80017c4:	6069      	str	r1, [r5, #4]
 80017c6:	60aa      	str	r2, [r5, #8]
 80017c8:	60eb      	str	r3, [r5, #12]
 80017ca:	6820      	ldr	r0, [r4, #0]
 80017cc:	6128      	str	r0, [r5, #16]
 80017ce:	88a3      	ldrh	r3, [r4, #4]
 80017d0:	82ab      	strh	r3, [r5, #20]
		return ((char *)"\nno valid GPS parsed\n");
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <GPS_ParseBuffer+0x178>)
	}
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	f507 679b 	add.w	r7, r7, #1240	; 0x4d8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bdb0      	pop	{r4, r5, r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000a58 	.word	0x20000a58
 80017e4:	200005a0 	.word	0x200005a0
 80017e8:	200008f4 	.word	0x200008f4
 80017ec:	08015590 	.word	0x08015590

080017f0 <GPS_validate>:

int GPS_validate(char *nmeastr){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$'){
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b24      	cmp	r3, #36	; 0x24
 800180a:	d103      	bne.n	8001814 <GPS_validate+0x24>
        i++;
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	3301      	adds	r3, #1
 8001810:	617b      	str	r3, [r7, #20]
    } else {
        return 0;
    }

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001812:	e00c      	b.n	800182e <GPS_validate+0x3e>
        return 0;
 8001814:	2300      	movs	r3, #0
 8001816:	e047      	b.n	80018a8 <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	4053      	eors	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        i++;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	3301      	adds	r3, #1
 800182c:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d008      	beq.n	800184c <GPS_validate+0x5c>
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4413      	add	r3, r2
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b2a      	cmp	r3, #42	; 0x2a
 8001844:	d002      	beq.n	800184c <GPS_validate+0x5c>
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b4a      	cmp	r3, #74	; 0x4a
 800184a:	dde5      	ble.n	8001818 <GPS_validate+0x28>
    }

    if(i >= 75){
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b4a      	cmp	r3, #74	; 0x4a
 8001850:	dd01      	ble.n	8001856 <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 8001852:	2300      	movs	r3, #0
 8001854:	e028      	b.n	80018a8 <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b2a      	cmp	r3, #42	; 0x2a
 8001860:	d119      	bne.n	8001896 <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3302      	adds	r3, #2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	490a      	ldr	r1, [pc, #40]	; (80018b0 <GPS_validate+0xc0>)
 8001886:	4618      	mov	r0, r3
 8001888:	f00e fd60 	bl	801034c <siprintf>
    return((checkcalcstr[0] == check[0])
 800188c:	7a3a      	ldrb	r2, [r7, #8]
 800188e:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001890:	429a      	cmp	r2, r3
 8001892:	d108      	bne.n	80018a6 <GPS_validate+0xb6>
 8001894:	e001      	b.n	800189a <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 8001896:	2300      	movs	r3, #0
 8001898:	e006      	b.n	80018a8 <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800189a:	7a7a      	ldrb	r2, [r7, #9]
 800189c:	7b7b      	ldrb	r3, [r7, #13]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d101      	bne.n	80018a6 <GPS_validate+0xb6>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <GPS_validate+0xb8>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	080155a8 	.word	0x080155a8

080018b4 <GPS_parse>:

int GPS_parse(char *GPSstrParse){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af08      	add	r7, sp, #32
 80018ba:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GNGGA", 6)){
 80018bc:	2206      	movs	r2, #6
 80018be:	497d      	ldr	r1, [pc, #500]	; (8001ab4 <GPS_parse+0x200>)
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f00e fde9 	bl	8010498 <strncmp>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d143      	bne.n	8001954 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GNGGA,%f,%lf,%c,%lf,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 80018cc:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <GPS_parse+0x204>)
 80018ce:	9307      	str	r3, [sp, #28]
 80018d0:	4b7a      	ldr	r3, [pc, #488]	; (8001abc <GPS_parse+0x208>)
 80018d2:	9306      	str	r3, [sp, #24]
 80018d4:	4b7a      	ldr	r3, [pc, #488]	; (8001ac0 <GPS_parse+0x20c>)
 80018d6:	9305      	str	r3, [sp, #20]
 80018d8:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <GPS_parse+0x210>)
 80018da:	9304      	str	r3, [sp, #16]
 80018dc:	4b7a      	ldr	r3, [pc, #488]	; (8001ac8 <GPS_parse+0x214>)
 80018de:	9303      	str	r3, [sp, #12]
 80018e0:	4b7a      	ldr	r3, [pc, #488]	; (8001acc <GPS_parse+0x218>)
 80018e2:	9302      	str	r3, [sp, #8]
 80018e4:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <GPS_parse+0x21c>)
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	4b7a      	ldr	r3, [pc, #488]	; (8001ad4 <GPS_parse+0x220>)
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	4b7a      	ldr	r3, [pc, #488]	; (8001ad8 <GPS_parse+0x224>)
 80018ee:	4a7b      	ldr	r2, [pc, #492]	; (8001adc <GPS_parse+0x228>)
 80018f0:	497b      	ldr	r1, [pc, #492]	; (8001ae0 <GPS_parse+0x22c>)
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f00e fd4a 	bl	801038c <siscanf>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f340 80d4 	ble.w	8001aa8 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001900:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <GPS_parse+0x230>)
 8001902:	ed93 7b08 	vldr	d7, [r3, #32]
 8001906:	4b77      	ldr	r3, [pc, #476]	; (8001ae4 <GPS_parse+0x230>)
 8001908:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800190c:	4618      	mov	r0, r3
 800190e:	eeb0 0a47 	vmov.f32	s0, s14
 8001912:	eef0 0a67 	vmov.f32	s1, s15
 8001916:	f000 f909 	bl	8001b2c <GPS_nmea_to_dec>
 800191a:	eeb0 7a40 	vmov.f32	s14, s0
 800191e:	eef0 7a60 	vmov.f32	s15, s1
 8001922:	4b70      	ldr	r3, [pc, #448]	; (8001ae4 <GPS_parse+0x230>)
 8001924:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001928:	4b6e      	ldr	r3, [pc, #440]	; (8001ae4 <GPS_parse+0x230>)
 800192a:	ed93 7b06 	vldr	d7, [r3, #24]
 800192e:	4b6d      	ldr	r3, [pc, #436]	; (8001ae4 <GPS_parse+0x230>)
 8001930:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001934:	4618      	mov	r0, r3
 8001936:	eeb0 0a47 	vmov.f32	s0, s14
 800193a:	eef0 0a67 	vmov.f32	s1, s15
 800193e:	f000 f8f5 	bl	8001b2c <GPS_nmea_to_dec>
 8001942:	eeb0 7a40 	vmov.f32	s14, s0
 8001946:	eef0 7a60 	vmov.f32	s15, s1
 800194a:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <GPS_parse+0x230>)
 800194c:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 8001950:	2301      	movs	r3, #1
 8001952:	e0aa      	b.n	8001aaa <GPS_parse+0x1f6>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GNRMC", 6)){
 8001954:	2206      	movs	r2, #6
 8001956:	4964      	ldr	r1, [pc, #400]	; (8001ae8 <GPS_parse+0x234>)
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f00e fd9d 	bl	8010498 <strncmp>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d13f      	bne.n	80019e4 <GPS_parse+0x130>
    	if(sscanf(GPSstrParse, "$GNRMC,%f,%lf,%c,%lf,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1){
 8001964:	4b61      	ldr	r3, [pc, #388]	; (8001aec <GPS_parse+0x238>)
 8001966:	9305      	str	r3, [sp, #20]
 8001968:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <GPS_parse+0x23c>)
 800196a:	9304      	str	r3, [sp, #16]
 800196c:	4b61      	ldr	r3, [pc, #388]	; (8001af4 <GPS_parse+0x240>)
 800196e:	9303      	str	r3, [sp, #12]
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <GPS_parse+0x218>)
 8001972:	9302      	str	r3, [sp, #8]
 8001974:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <GPS_parse+0x21c>)
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	4b56      	ldr	r3, [pc, #344]	; (8001ad4 <GPS_parse+0x220>)
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <GPS_parse+0x224>)
 800197e:	4a57      	ldr	r2, [pc, #348]	; (8001adc <GPS_parse+0x228>)
 8001980:	495d      	ldr	r1, [pc, #372]	; (8001af8 <GPS_parse+0x244>)
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f00e fd02 	bl	801038c <siscanf>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	f340 808c 	ble.w	8001aa8 <GPS_parse+0x1f4>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001990:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <GPS_parse+0x230>)
 8001992:	ed93 7b08 	vldr	d7, [r3, #32]
 8001996:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <GPS_parse+0x230>)
 8001998:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800199c:	4618      	mov	r0, r3
 800199e:	eeb0 0a47 	vmov.f32	s0, s14
 80019a2:	eef0 0a67 	vmov.f32	s1, s15
 80019a6:	f000 f8c1 	bl	8001b2c <GPS_nmea_to_dec>
 80019aa:	eeb0 7a40 	vmov.f32	s14, s0
 80019ae:	eef0 7a60 	vmov.f32	s15, s1
 80019b2:	4b4c      	ldr	r3, [pc, #304]	; (8001ae4 <GPS_parse+0x230>)
 80019b4:	ed83 7b02 	vstr	d7, [r3, #8]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 80019b8:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <GPS_parse+0x230>)
 80019ba:	ed93 7b06 	vldr	d7, [r3, #24]
 80019be:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <GPS_parse+0x230>)
 80019c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80019c4:	4618      	mov	r0, r3
 80019c6:	eeb0 0a47 	vmov.f32	s0, s14
 80019ca:	eef0 0a67 	vmov.f32	s1, s15
 80019ce:	f000 f8ad 	bl	8001b2c <GPS_nmea_to_dec>
 80019d2:	eeb0 7a40 	vmov.f32	s14, s0
 80019d6:	eef0 7a60 	vmov.f32	s15, s1
 80019da:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <GPS_parse+0x230>)
 80019dc:	ed83 7b00 	vstr	d7, [r3]
    		return 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e062      	b.n	8001aaa <GPS_parse+0x1f6>
    	}


    }
    else if (!strncmp(GPSstrParse, "$GNGLL", 6)){
 80019e4:	2206      	movs	r2, #6
 80019e6:	4945      	ldr	r1, [pc, #276]	; (8001afc <GPS_parse+0x248>)
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f00e fd55 	bl	8010498 <strncmp>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13a      	bne.n	8001a6a <GPS_parse+0x1b6>
        if(sscanf(GPSstrParse, "$GNGLL,%lf,%c,%lf,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1){
 80019f4:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <GPS_parse+0x24c>)
 80019f6:	9303      	str	r3, [sp, #12]
 80019f8:	4b38      	ldr	r3, [pc, #224]	; (8001adc <GPS_parse+0x228>)
 80019fa:	9302      	str	r3, [sp, #8]
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <GPS_parse+0x218>)
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <GPS_parse+0x21c>)
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <GPS_parse+0x220>)
 8001a06:	4a34      	ldr	r2, [pc, #208]	; (8001ad8 <GPS_parse+0x224>)
 8001a08:	493e      	ldr	r1, [pc, #248]	; (8001b04 <GPS_parse+0x250>)
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f00e fcbe 	bl	801038c <siscanf>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	dd48      	ble.n	8001aa8 <GPS_parse+0x1f4>
        	GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <GPS_parse+0x230>)
 8001a18:	ed93 7b08 	vldr	d7, [r3, #32]
 8001a1c:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <GPS_parse+0x230>)
 8001a1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001a22:	4618      	mov	r0, r3
 8001a24:	eeb0 0a47 	vmov.f32	s0, s14
 8001a28:	eef0 0a67 	vmov.f32	s1, s15
 8001a2c:	f000 f87e 	bl	8001b2c <GPS_nmea_to_dec>
 8001a30:	eeb0 7a40 	vmov.f32	s14, s0
 8001a34:	eef0 7a60 	vmov.f32	s15, s1
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <GPS_parse+0x230>)
 8001a3a:	ed83 7b02 	vstr	d7, [r3, #8]
        	GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <GPS_parse+0x230>)
 8001a40:	ed93 7b06 	vldr	d7, [r3, #24]
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <GPS_parse+0x230>)
 8001a46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001a50:	eef0 0a67 	vmov.f32	s1, s15
 8001a54:	f000 f86a 	bl	8001b2c <GPS_nmea_to_dec>
 8001a58:	eeb0 7a40 	vmov.f32	s14, s0
 8001a5c:	eef0 7a60 	vmov.f32	s15, s1
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <GPS_parse+0x230>)
 8001a62:	ed83 7b00 	vstr	d7, [r3]
        	return 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e01f      	b.n	8001aaa <GPS_parse+0x1f6>
        }

    }
    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
 8001a6a:	2206      	movs	r2, #6
 8001a6c:	4926      	ldr	r1, [pc, #152]	; (8001b08 <GPS_parse+0x254>)
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f00e fd12 	bl	8010498 <strncmp>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d116      	bne.n	8001aa8 <GPS_parse+0x1f4>
        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <GPS_parse+0x258>)
 8001a7c:	9305      	str	r3, [sp, #20]
 8001a7e:	4b24      	ldr	r3, [pc, #144]	; (8001b10 <GPS_parse+0x25c>)
 8001a80:	9304      	str	r3, [sp, #16]
 8001a82:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <GPS_parse+0x260>)
 8001a84:	9303      	str	r3, [sp, #12]
 8001a86:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <GPS_parse+0x240>)
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <GPS_parse+0x264>)
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <GPS_parse+0x268>)
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <GPS_parse+0x26c>)
 8001a94:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <GPS_parse+0x270>)
 8001a96:	4924      	ldr	r1, [pc, #144]	; (8001b28 <GPS_parse+0x274>)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f00e fc77 	bl	801038c <siscanf>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	dd01      	ble.n	8001aa8 <GPS_parse+0x1f4>
            return 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <GPS_parse+0x1f6>
    }
    return 0;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	080155b0 	.word	0x080155b0
 8001ab8:	200005e0 	.word	0x200005e0
 8001abc:	200005dc 	.word	0x200005dc
 8001ac0:	200005d8 	.word	0x200005d8
 8001ac4:	200005d4 	.word	0x200005d4
 8001ac8:	200005d0 	.word	0x200005d0
 8001acc:	200005cd 	.word	0x200005cd
 8001ad0:	200005b8 	.word	0x200005b8
 8001ad4:	200005cc 	.word	0x200005cc
 8001ad8:	200005c0 	.word	0x200005c0
 8001adc:	200005c8 	.word	0x200005c8
 8001ae0:	080155b8 	.word	0x080155b8
 8001ae4:	200005a0 	.word	0x200005a0
 8001ae8:	080155e0 	.word	0x080155e0
 8001aec:	200005ec 	.word	0x200005ec
 8001af0:	200005e8 	.word	0x200005e8
 8001af4:	200005e4 	.word	0x200005e4
 8001af8:	080155e8 	.word	0x080155e8
 8001afc:	0801560c 	.word	0x0801560c
 8001b00:	200005f0 	.word	0x200005f0
 8001b04:	08015614 	.word	0x08015614
 8001b08:	08015630 	.word	0x08015630
 8001b0c:	20000608 	.word	0x20000608
 8001b10:	20000604 	.word	0x20000604
 8001b14:	20000601 	.word	0x20000601
 8001b18:	20000600 	.word	0x20000600
 8001b1c:	200005fc 	.word	0x200005fc
 8001b20:	200005f8 	.word	0x200005f8
 8001b24:	200005f4 	.word	0x200005f4
 8001b28:	08015638 	.word	0x08015638

08001b2c <GPS_nmea_to_dec>:

double GPS_nmea_to_dec(double deg_coord, char nsew) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
    int degree = (int)(deg_coord/100);
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <GPS_nmea_to_dec+0xac>)
 8001b40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b44:	f7fe fea2 	bl	800088c <__aeabi_ddiv>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff f822 	bl	8000b98 <__aeabi_d2iz>
 8001b54:	4603      	mov	r3, r0
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
    double minutes = deg_coord - degree*100;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	2264      	movs	r2, #100	; 0x64
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcff 	bl	8000564 <__aeabi_i2d>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b6e:	f7fe fbab 	bl	80002c8 <__aeabi_dsub>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double dec_deg = minutes / 60;
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <GPS_nmea_to_dec+0xb0>)
 8001b80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b84:	f7fe fe82 	bl	800088c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double decimal = degree + dec_deg;
 8001b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b92:	f7fe fce7 	bl	8000564 <__aeabi_i2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b9e:	f7fe fb95 	bl	80002cc <__adddf3>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b53      	cmp	r3, #83	; 0x53
 8001bae:	d002      	beq.n	8001bb6 <GPS_nmea_to_dec+0x8a>
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	2b57      	cmp	r3, #87	; 0x57
 8001bb4:	d105      	bne.n	8001bc2 <GPS_nmea_to_dec+0x96>
        decimal *= -1;
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    return decimal;
 8001bc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bc6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001bca:	eeb0 0a47 	vmov.f32	s0, s14
 8001bce:	eef0 0a67 	vmov.f32	s1, s15
 8001bd2:	3730      	adds	r7, #48	; 0x30
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40590000 	.word	0x40590000
 8001bdc:	404e0000 	.word	0x404e0000

08001be0 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001be6:	4a1c      	ldr	r2, [pc, #112]	; (8001c58 <MX_I2C2_Init+0x78>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001bea:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <MX_I2C2_Init+0x7c>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c1c:	480d      	ldr	r0, [pc, #52]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001c1e:	f005 fae5 	bl	80071ec <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c28:	f001 ff74 	bl	8003b14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4809      	ldr	r0, [pc, #36]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001c30:	f006 fa9b 	bl	800816a <HAL_I2CEx_ConfigAnalogFilter>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001c3a:	f001 ff6b 	bl	8003b14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4804      	ldr	r0, [pc, #16]	; (8001c54 <MX_I2C2_Init+0x74>)
 8001c42:	f006 face 	bl	80081e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001c4c:	f001 ff62 	bl	8003b14 <Error_Handler>
  }

}
 8001c50:	bf00      	nop
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000664 	.word	0x20000664
 8001c58:	40005800 	.word	0x40005800
 8001c5c:	000186a0 	.word	0x000186a0

08001c60 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c66:	4a1c      	ldr	r2, [pc, #112]	; (8001cd8 <MX_I2C3_Init+0x78>)
 8001c68:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <MX_I2C3_Init+0x7c>)
 8001c6e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c76:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c82:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c90:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001c9e:	f005 faa5 	bl	80071ec <HAL_I2C_Init>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001ca8:	f001 ff34 	bl	8003b14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cac:	2100      	movs	r1, #0
 8001cae:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001cb0:	f006 fa5b 	bl	800816a <HAL_I2CEx_ConfigAnalogFilter>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001cba:	f001 ff2b 	bl	8003b14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_I2C3_Init+0x74>)
 8001cc2:	f006 fa8e 	bl	80081e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001ccc:	f001 ff22 	bl	8003b14 <Error_Handler>
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000610 	.word	0x20000610
 8001cd8:	40005c00 	.word	0x40005c00
 8001cdc:	000186a0 	.word	0x000186a0

08001ce0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 031c 	add.w	r3, r7, #28
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a42      	ldr	r2, [pc, #264]	; (8001e08 <HAL_I2C_MspInit+0x128>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d12d      	bne.n	8001d5e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a40      	ldr	r2, [pc, #256]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	61bb      	str	r3, [r7, #24]
 8001d1c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d1e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d24:	2312      	movs	r3, #18
 8001d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d30:	2304      	movs	r3, #4
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4835      	ldr	r0, [pc, #212]	; (8001e10 <HAL_I2C_MspInit+0x130>)
 8001d3c:	f005 f846 	bl	8006dcc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d50:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001d5c:	e050      	b.n	8001e00 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a2c      	ldr	r2, [pc, #176]	; (8001e14 <HAL_I2C_MspInit+0x134>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d14b      	bne.n	8001e00 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	6313      	str	r3, [r2, #48]	; 0x30
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6313      	str	r3, [r2, #48]	; 0x30
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da6:	2312      	movs	r3, #18
 8001da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001db2:	2304      	movs	r3, #4
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db6:	f107 031c 	add.w	r3, r7, #28
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4816      	ldr	r0, [pc, #88]	; (8001e18 <HAL_I2C_MspInit+0x138>)
 8001dbe:	f005 f805 	bl	8006dcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dc8:	2312      	movs	r3, #18
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480f      	ldr	r0, [pc, #60]	; (8001e1c <HAL_I2C_MspInit+0x13c>)
 8001de0:	f004 fff4 	bl	8006dcc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001de4:	2300      	movs	r3, #0
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001dee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001df2:	6413      	str	r3, [r2, #64]	; 0x40
 8001df4:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_I2C_MspInit+0x12c>)
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
}
 8001e00:	bf00      	nop
 8001e02:	3730      	adds	r7, #48	; 0x30
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40005800 	.word	0x40005800
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40005c00 	.word	0x40005c00
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020000 	.word	0x40020000

08001e20 <lsm6dsl_init>:
                             uint16_t len);
static void platform_delay(uint32_t ms);

/* LSM6DSL Functions ---------------------------------------------------------*/

stmdev_ctx_t lsm6dsl_init(void){
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

	stmdev_ctx_t dev_ctx_lsm6dsl;

	/* Initialize mems driver interface */
	dev_ctx_lsm6dsl.write_reg = lsm6dsl_write;
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <lsm6dsl_init+0xc8>)
 8001e2a:	60fb      	str	r3, [r7, #12]
	dev_ctx_lsm6dsl.read_reg = lsm6dsl_read;
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <lsm6dsl_init+0xcc>)
 8001e2e:	613b      	str	r3, [r7, #16]
	dev_ctx_lsm6dsl.handle = &SENSOR_BUS;
 8001e30:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <lsm6dsl_init+0xd0>)
 8001e32:	617b      	str	r3, [r7, #20]

	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 8001e34:	200a      	movs	r0, #10
 8001e36:	f000 f9e5 	bl	8002204 <platform_delay>

	/* Check device ID */
	lsm6dsl_device_id_get(&dev_ctx_lsm6dsl, &whoamI_lsm6dsl);
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	492d      	ldr	r1, [pc, #180]	; (8001ef4 <lsm6dsl_init+0xd4>)
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fd07 	bl	8002854 <lsm6dsl_device_id_get>

	if (whoamI_lsm6dsl != LSM6DSL_ID){
 8001e46:	4b2b      	ldr	r3, [pc, #172]	; (8001ef4 <lsm6dsl_init+0xd4>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b6a      	cmp	r3, #106	; 0x6a
 8001e4c:	d005      	beq.n	8001e5a <lsm6dsl_init+0x3a>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2102      	movs	r1, #2
 8001e52:	4829      	ldr	r0, [pc, #164]	; (8001ef8 <lsm6dsl_init+0xd8>)
 8001e54:	f005 f97e 	bl	8007154 <HAL_GPIO_WritePin>
		__BKPT();
 8001e58:	be00      	bkpt	0x0000
//		Error_Handler();
	}

	/* Restore default configuration */
	lsm6dsl_reset_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e5a:	f107 030c 	add.w	r3, r7, #12
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fd08 	bl	8002876 <lsm6dsl_reset_set>

	do {
	lsm6dsl_reset_get(&dev_ctx_lsm6dsl, &rst_lsm6dsl);
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	4924      	ldr	r1, [pc, #144]	; (8001efc <lsm6dsl_init+0xdc>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fd28 	bl	80028c2 <lsm6dsl_reset_get>
	} while (rst_lsm6dsl);
 8001e72:	4b22      	ldr	r3, [pc, #136]	; (8001efc <lsm6dsl_init+0xdc>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f5      	bne.n	8001e66 <lsm6dsl_init+0x46>

	/* Enable Block Data Update */
	lsm6dsl_block_data_update_set(&dev_ctx_lsm6dsl, PROPERTY_ENABLE);
 8001e7a:	f107 030c 	add.w	r3, r7, #12
 8001e7e:	2101      	movs	r1, #1
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fbf9 	bl	8002678 <lsm6dsl_block_data_update_set>

	/* Set Output Data Rate */
	lsm6dsl_xl_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_ODR_104Hz);
 8001e86:	f107 030c 	add.w	r3, r7, #12
 8001e8a:	2104      	movs	r1, #4
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fb81 	bl	8002594 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&dev_ctx_lsm6dsl, LSM6DSL_GY_ODR_104Hz);
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	2104      	movs	r1, #4
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fbc7 	bl	800262c <lsm6dsl_gy_data_rate_set>

	/* Set full scale */
	lsm6dsl_xl_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_8g);
 8001e9e:	f107 030c 	add.w	r3, r7, #12
 8001ea2:	2103      	movs	r1, #3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 fb4f 	bl	8002548 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&dev_ctx_lsm6dsl, LSM6DSL_2000dps);
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2106      	movs	r1, #6
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f000 fb95 	bl	80025e0 <lsm6dsl_gy_full_scale_set>

	/* Configure filtering chain(No aux interface)
	* Accelerometer - LPF1 + LPF2 path
	*/
	lsm6dsl_xl_lp2_bandwidth_set(&dev_ctx_lsm6dsl, LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100);
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	2111      	movs	r1, #17
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fd19 	bl	80028f4 <lsm6dsl_xl_lp2_bandwidth_set>
	/* Accelerometer - High Pass / Slope path */
	//lsm6dsl_xl_reference_mode_set(&dev_ctx_lsm, PROPERTY_DISABLE);
	//lsm6dsl_xl_hp_bandwidth_set(&dev_ctx_lsm, LSM6DSL_XL_HP_ODR_DIV_100);
	/* Gyroscope - filtering chain */
	lsm6dsl_gy_band_pass_set(&dev_ctx_lsm6dsl, LSM6DSL_HP_260mHz_LP1_STRONG);
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	21a8      	movs	r1, #168	; 0xa8
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fd4a 	bl	8002962 <lsm6dsl_gy_band_pass_set>

	return dev_ctx_lsm6dsl;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	0800211d 	.word	0x0800211d
 8001eec:	08002157 	.word	0x08002157
 8001ef0:	20000610 	.word	0x20000610
 8001ef4:	2000022e 	.word	0x2000022e
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	2000022f 	.word	0x2000022f

08001f00 <get_acceleration>:

void get_acceleration(stmdev_ctx_t dev_ctx_lsm6dsl, float *acceleration_mg){
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	1d3c      	adds	r4, r7, #4
 8001f08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f0c:	603b      	str	r3, [r7, #0]

	uint8_t reg;

	/* Read output only if new xl value is available */
	lsm6dsl_xl_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001f0e:	f107 0217 	add.w	r2, r7, #23
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fbd4 	bl	80026c4 <lsm6dsl_xl_flag_data_ready_get>

	if (reg) {
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d02d      	beq.n	8001f7e <get_acceleration+0x7e>
	  /* Read acceleration field data */
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001f22:	2206      	movs	r2, #6
 8001f24:	2100      	movs	r1, #0
 8001f26:	4818      	ldr	r0, [pc, #96]	; (8001f88 <get_acceleration+0x88>)
 8001f28:	f00d fa40 	bl	800f3ac <memset>
	  lsm6dsl_acceleration_raw_get(&dev_ctx_lsm6dsl, data_raw_acceleration);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4916      	ldr	r1, [pc, #88]	; (8001f88 <get_acceleration+0x88>)
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fc44 	bl	80027be <lsm6dsl_acceleration_raw_get>
	  acceleration_mg[0] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[0]);
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <get_acceleration+0x88>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fad3 	bl	80024e8 <lsm6dsl_from_fs8g_to_mg>
 8001f42:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[0] =
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	edc3 7a00 	vstr	s15, [r3]
	  acceleration_mg[1] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <get_acceleration+0x88>)
 8001f4e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  acceleration_mg[1] =
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[1]);
 8001f56:	4610      	mov	r0, r2
 8001f58:	f000 fac6 	bl	80024e8 <lsm6dsl_from_fs8g_to_mg>
 8001f5c:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[1] =
 8001f60:	edc4 7a00 	vstr	s15, [r4]
	  acceleration_mg[2] =
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <get_acceleration+0x88>)
 8001f66:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  acceleration_mg[2] =
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs8g_to_mg(data_raw_acceleration[2]);
 8001f70:	4610      	mov	r0, r2
 8001f72:	f000 fab9 	bl	80024e8 <lsm6dsl_from_fs8g_to_mg>
 8001f76:	eef0 7a40 	vmov.f32	s15, s0
	  acceleration_mg[2] =
 8001f7a:	edc4 7a00 	vstr	s15, [r4]
	}

}
 8001f7e:	bf00      	nop
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000220 	.word	0x20000220

08001f8c <get_angvelocity>:

void get_angvelocity(stmdev_ctx_t dev_ctx_lsm6dsl, float *angular_rate_mdps){
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	1d3c      	adds	r4, r7, #4
 8001f94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001f98:	603b      	str	r3, [r7, #0]
	uint8_t reg;

	/* Read output only if new gyro value is available*/
	lsm6dsl_gy_flag_data_ready_get(&dev_ctx_lsm6dsl, &reg);
 8001f9a:	f107 0217 	add.w	r2, r7, #23
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 fba7 	bl	80026f6 <lsm6dsl_gy_flag_data_ready_get>

	if (reg) {
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d02d      	beq.n	800200a <get_angvelocity+0x7e>
	  /* Read angular rate field data */
	  memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8001fae:	2206      	movs	r2, #6
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4818      	ldr	r0, [pc, #96]	; (8002014 <get_angvelocity+0x88>)
 8001fb4:	f00d f9fa 	bl	800f3ac <memset>
	  lsm6dsl_angular_rate_raw_get(&dev_ctx_lsm6dsl, data_raw_angular_rate);
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	4916      	ldr	r1, [pc, #88]	; (8002014 <get_angvelocity+0x88>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fbb3 	bl	8002728 <lsm6dsl_angular_rate_raw_get>
	  angular_rate_mdps[0] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[0]);
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <get_angvelocity+0x88>)
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 faa5 	bl	8002518 <lsm6dsl_from_fs2000dps_to_mdps>
 8001fce:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[0] =
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	edc3 7a00 	vstr	s15, [r3]
	  angular_rate_mdps[1] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <get_angvelocity+0x88>)
 8001fda:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
	  angular_rate_mdps[1] =
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	1d1c      	adds	r4, r3, #4
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[1]);
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f000 fa98 	bl	8002518 <lsm6dsl_from_fs2000dps_to_mdps>
 8001fe8:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[1] =
 8001fec:	edc4 7a00 	vstr	s15, [r4]
	  angular_rate_mdps[2] =
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <get_angvelocity+0x88>)
 8001ff2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
	  angular_rate_mdps[2] =
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f103 0408 	add.w	r4, r3, #8
		lsm6dsl_from_fs2000dps_to_mdps(data_raw_angular_rate[2]);
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	f000 fa8b 	bl	8002518 <lsm6dsl_from_fs2000dps_to_mdps>
 8002002:	eef0 7a40 	vmov.f32	s15, s0
	  angular_rate_mdps[2] =
 8002006:	edc4 7a00 	vstr	s15, [r4]
	}
}
 800200a:	bf00      	nop
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	bf00      	nop
 8002014:	20000228 	.word	0x20000228

08002018 <lps22hh_init>:

/* LPS22HH Functions ---------------------------------------------------------*/
stmdev_ctx_t lps22hh_init(void){
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	stmdev_ctx_t dev_ctx_lps22hh;

	/* Initialize mems driver interface */
	dev_ctx_lps22hh.write_reg = lps22hh_write;
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <lps22hh_init+0x94>)
 8002022:	60fb      	str	r3, [r7, #12]
	dev_ctx_lps22hh.read_reg = lps22hh_read;
 8002024:	4b22      	ldr	r3, [pc, #136]	; (80020b0 <lps22hh_init+0x98>)
 8002026:	613b      	str	r3, [r7, #16]
	dev_ctx_lps22hh.handle = &SENSOR_BUS;
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <lps22hh_init+0x9c>)
 800202a:	617b      	str	r3, [r7, #20]


	/* Wait sensor boot time */
	platform_delay(BOOT_TIME);
 800202c:	200a      	movs	r0, #10
 800202e:	f000 f8e9 	bl	8002204 <platform_delay>

	/* Check device ID */
	whoamI_lps22hh = 0;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <lps22hh_init+0xa0>)
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
	lps22hh_device_id_get(&dev_ctx_lps22hh, &whoamI_lps22hh);
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	491e      	ldr	r1, [pc, #120]	; (80020b8 <lps22hh_init+0xa0>)
 800203e:	4618      	mov	r0, r3
 8002040:	f000 f9d1 	bl	80023e6 <lps22hh_device_id_get>

	if ( whoamI_lps22hh != LPS22HH_ID ){
 8002044:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <lps22hh_init+0xa0>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2bb3      	cmp	r3, #179	; 0xb3
 800204a:	d007      	beq.n	800205c <lps22hh_init+0x44>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	2104      	movs	r1, #4
 8002050:	481a      	ldr	r0, [pc, #104]	; (80020bc <lps22hh_init+0xa4>)
 8002052:	f005 f87f 	bl	8007154 <HAL_GPIO_WritePin>
		__BKPT();
 8002056:	be00      	bkpt	0x0000
		Error_Handler();
 8002058:	f001 fd5c 	bl	8003b14 <Error_Handler>
	}


	/* Restore default configuration */
	lps22hh_reset_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	2101      	movs	r1, #1
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f9d0 	bl	8002408 <lps22hh_reset_set>

	do {
		lps22hh_reset_get(&dev_ctx_lps22hh, &rst_lps22hh);
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	4914      	ldr	r1, [pc, #80]	; (80020c0 <lps22hh_init+0xa8>)
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f9f0 	bl	8002454 <lps22hh_reset_get>
	} while (rst_lps22hh);
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <lps22hh_init+0xa8>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f5      	bne.n	8002068 <lps22hh_init+0x50>

	/* Enable Block Data Update */
	lps22hh_block_data_update_set(&dev_ctx_lps22hh, PROPERTY_ENABLE);
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f912 	bl	80022ac <lps22hh_block_data_update_set>

	/* Set Output Data Rate */
	lps22hh_data_rate_set(&dev_ctx_lps22hh, LPS22HH_200_Hz);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	2107      	movs	r1, #7
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f932 	bl	80022f8 <lps22hh_data_rate_set>

	return dev_ctx_lps22hh;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	461c      	mov	r4, r3
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	08002191 	.word	0x08002191
 80020b0:	080021cb 	.word	0x080021cb
 80020b4:	20000610 	.word	0x20000610
 80020b8:	20000234 	.word	0x20000234
 80020bc:	40020800 	.word	0x40020800
 80020c0:	20000235 	.word	0x20000235

080020c4 <get_pressure>:

void get_pressure(stmdev_ctx_t dev_ctx_lps22hh, float *pressure){
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	1d3c      	adds	r4, r7, #4
 80020cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020d0:	603b      	str	r3, [r7, #0]
	/* Read output only if new value is available */
	lps22hh_reg_t reg;
	lps22hh_read_reg(&dev_ctx_lps22hh, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80020d2:	f107 0214 	add.w	r2, r7, #20
 80020d6:	1d38      	adds	r0, r7, #4
 80020d8:	2301      	movs	r3, #1
 80020da:	2127      	movs	r1, #39	; 0x27
 80020dc:	f000 f89d 	bl	800221a <lps22hh_read_reg>

	if (reg.status.p_da) {
 80020e0:	7d3b      	ldrb	r3, [r7, #20]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d011      	beq.n	8002110 <get_pressure+0x4c>
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <get_pressure+0x54>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
	  memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
	  lps22hh_pressure_raw_get(&dev_ctx_lps22hh, &data_raw_pressure);
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4908      	ldr	r1, [pc, #32]	; (8002118 <get_pressure+0x54>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f000 f94c 	bl	8002394 <lps22hh_pressure_raw_get>
	  *pressure = lps22hh_from_lsb_to_hpa( data_raw_pressure);
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <get_pressure+0x54>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f8bb 	bl	800227c <lps22hh_from_lsb_to_hpa>
 8002106:	eef0 7a40 	vmov.f32	s15, s0
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002110:	bf00      	nop
 8002112:	371c      	adds	r7, #28
 8002114:	46bd      	mov	sp, r7
 8002116:	bd90      	pop	{r4, r7, pc}
 8002118:	20000230 	.word	0x20000230

0800211c <lsm6dsl_write>:
 *
 */
static int32_t lsm6dsl_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af04      	add	r7, sp, #16
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	461a      	mov	r2, r3
 8002128:	460b      	mov	r3, r1
 800212a:	72fb      	strb	r3, [r7, #11]
 800212c:	4613      	mov	r3, r2
 800212e:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LSM6DSL_I2C_ADD_L, reg,
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	b29a      	uxth	r2, r3
 8002134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002138:	9302      	str	r3, [sp, #8]
 800213a:	893b      	ldrh	r3, [r7, #8]
 800213c:	9301      	str	r3, [sp, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2301      	movs	r3, #1
 8002144:	21d5      	movs	r1, #213	; 0xd5
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f005 f994 	bl	8007474 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <lsm6dsl_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lsm6dsl_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af04      	add	r7, sp, #16
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	461a      	mov	r2, r3
 8002162:	460b      	mov	r3, r1
 8002164:	72fb      	strb	r3, [r7, #11]
 8002166:	4613      	mov	r3, r2
 8002168:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Read(handle, LSM6DSL_I2C_ADD_L, reg,
 800216a:	7afb      	ldrb	r3, [r7, #11]
 800216c:	b29a      	uxth	r2, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002172:	9302      	str	r3, [sp, #8]
 8002174:	893b      	ldrh	r3, [r7, #8]
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	21d5      	movs	r1, #213	; 0xd5
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f005 fa71 	bl	8007668 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <lps22hh_write>:
 *
 */
static int32_t lps22hh_write(void *handle, uint8_t reg,
                              uint8_t *bufp,
                              uint16_t len)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b088      	sub	sp, #32
 8002194:	af04      	add	r7, sp, #16
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	461a      	mov	r2, r3
 800219c:	460b      	mov	r3, r1
 800219e:	72fb      	strb	r3, [r7, #11]
 80021a0:	4613      	mov	r3, r2
 80021a2:	813b      	strh	r3, [r7, #8]

  HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_L, reg,
 80021a4:	7afb      	ldrb	r3, [r7, #11]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ac:	9302      	str	r3, [sp, #8]
 80021ae:	893b      	ldrh	r3, [r7, #8]
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	2301      	movs	r3, #1
 80021b8:	21b9      	movs	r1, #185	; 0xb9
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f005 f95a 	bl	8007474 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <lps22hh_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t lps22hh_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b088      	sub	sp, #32
 80021ce:	af04      	add	r7, sp, #16
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	461a      	mov	r2, r3
 80021d6:	460b      	mov	r3, r1
 80021d8:	72fb      	strb	r3, [r7, #11]
 80021da:	4613      	mov	r3, r2
 80021dc:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_L, reg,
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	893b      	ldrh	r3, [r7, #8]
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	2301      	movs	r3, #1
 80021f2:	21b9      	movs	r1, #185	; 0xb9
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f005 fa37 	bl	8007668 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);

  return 0;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f003 fd19 	bl	8005c44 <HAL_Delay>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800221a:	b590      	push	{r4, r7, lr}
 800221c:	b087      	sub	sp, #28
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	607a      	str	r2, [r7, #4]
 8002224:	461a      	mov	r2, r3
 8002226:	460b      	mov	r3, r1
 8002228:	72fb      	strb	r3, [r7, #11]
 800222a:	4613      	mov	r3, r2
 800222c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	685c      	ldr	r4, [r3, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6898      	ldr	r0, [r3, #8]
 8002236:	893b      	ldrh	r3, [r7, #8]
 8002238:	7af9      	ldrb	r1, [r7, #11]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	47a0      	blx	r4
 800223e:	6178      	str	r0, [r7, #20]

  return ret;
 8002240:	697b      	ldr	r3, [r7, #20]
}
 8002242:	4618      	mov	r0, r3
 8002244:	371c      	adds	r7, #28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd90      	pop	{r4, r7, pc}

0800224a <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800224a:	b590      	push	{r4, r7, lr}
 800224c:	b087      	sub	sp, #28
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	461a      	mov	r2, r3
 8002256:	460b      	mov	r3, r1
 8002258:	72fb      	strb	r3, [r7, #11]
 800225a:	4613      	mov	r3, r2
 800225c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681c      	ldr	r4, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6898      	ldr	r0, [r3, #8]
 8002266:	893b      	ldrh	r3, [r7, #8]
 8002268:	7af9      	ldrb	r1, [r7, #11]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	47a0      	blx	r4
 800226e:	6178      	str	r0, [r7, #20]

  return ret;
 8002270:	697b      	ldr	r3, [r7, #20]
}
 8002272:	4618      	mov	r0, r3
 8002274:	371c      	adds	r7, #28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd90      	pop	{r4, r7, pc}
	...

0800227c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022a8 <lps22hh_from_lsb_to_hpa+0x2c>
 8002292:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002296:	eef0 7a66 	vmov.f32	s15, s13
}
 800229a:	eeb0 0a67 	vmov.f32	s0, s15
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	49800000 	.word	0x49800000

080022ac <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80022b8:	f107 0208 	add.w	r2, r7, #8
 80022bc:	2301      	movs	r3, #1
 80022be:	2110      	movs	r1, #16
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffaa 	bl	800221a <lps22hh_read_reg>
 80022c6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10f      	bne.n	80022ee <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80022ce:	78fb      	ldrb	r3, [r7, #3]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	7a3b      	ldrb	r3, [r7, #8]
 80022d8:	f362 0341 	bfi	r3, r2, #1, #1
 80022dc:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80022de:	f107 0208 	add.w	r2, r7, #8
 80022e2:	2301      	movs	r3, #1
 80022e4:	2110      	movs	r1, #16
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffaf 	bl	800224a <lps22hh_write_reg>
 80022ec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80022ee:	68fb      	ldr	r3, [r7, #12]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002304:	f107 0210 	add.w	r2, r7, #16
 8002308:	2301      	movs	r3, #1
 800230a:	2110      	movs	r1, #16
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff ff84 	bl	800221a <lps22hh_read_reg>
 8002312:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800231a:	f107 020c 	add.w	r2, r7, #12
 800231e:	2301      	movs	r3, #1
 8002320:	2111      	movs	r1, #17
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ff79 	bl	800221a <lps22hh_read_reg>
 8002328:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10f      	bne.n	8002350 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	b2da      	uxtb	r2, r3
 8002338:	7c3b      	ldrb	r3, [r7, #16]
 800233a:	f362 1306 	bfi	r3, r2, #4, #3
 800233e:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8002340:	f107 0210 	add.w	r2, r7, #16
 8002344:	2301      	movs	r3, #1
 8002346:	2110      	movs	r1, #16
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff7e 	bl	800224a <lps22hh_write_reg>
 800234e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	b2da      	uxtb	r2, r3
 8002360:	7b3b      	ldrb	r3, [r7, #12]
 8002362:	f362 0341 	bfi	r3, r2, #1, #1
 8002366:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	08db      	lsrs	r3, r3, #3
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	b2da      	uxtb	r2, r3
 8002372:	7b3b      	ldrb	r3, [r7, #12]
 8002374:	f362 0300 	bfi	r3, r2, #0, #1
 8002378:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800237a:	f107 020c 	add.w	r2, r7, #12
 800237e:	2301      	movs	r3, #1
 8002380:	2111      	movs	r1, #17
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff61 	bl	800224a <lps22hh_write_reg>
 8002388:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800238a:	697b      	ldr	r3, [r7, #20]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800239e:	f107 0208 	add.w	r2, r7, #8
 80023a2:	2303      	movs	r3, #3
 80023a4:	2128      	movs	r1, #40	; 0x28
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff37 	bl	800221a <lps22hh_read_reg>
 80023ac:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 80023ae:	7abb      	ldrb	r3, [r7, #10]
 80023b0:	461a      	mov	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	7a7a      	ldrb	r2, [r7, #9]
 80023be:	441a      	add	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	7a3a      	ldrb	r2, [r7, #8]
 80023cc:	441a      	add	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	021a      	lsls	r2, r3, #8
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	601a      	str	r2, [r3, #0]

  return ret;
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 80023f0:	2301      	movs	r3, #1
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	210f      	movs	r1, #15
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ff0f 	bl	800221a <lps22hh_read_reg>
 80023fc:	60f8      	str	r0, [r7, #12]

  return ret;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8002414:	f107 0208 	add.w	r2, r7, #8
 8002418:	2301      	movs	r3, #1
 800241a:	2111      	movs	r1, #17
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fefc 	bl	800221a <lps22hh_read_reg>
 8002422:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10f      	bne.n	800244a <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	7a3b      	ldrb	r3, [r7, #8]
 8002434:	f362 0382 	bfi	r3, r2, #2, #1
 8002438:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800243a:	f107 0208 	add.w	r2, r7, #8
 800243e:	2301      	movs	r3, #1
 8002440:	2111      	movs	r1, #17
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff01 	bl	800224a <lps22hh_write_reg>
 8002448:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800244a:	68fb      	ldr	r3, [r7, #12]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800245e:	f107 0208 	add.w	r2, r7, #8
 8002462:	2301      	movs	r3, #1
 8002464:	2111      	movs	r1, #17
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fed7 	bl	800221a <lps22hh_read_reg>
 800246c:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800246e:	7a3b      	ldrb	r3, [r7, #8]
 8002470:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	701a      	strb	r2, [r3, #0]

  return ret;
 800247c:	68fb      	ldr	r3, [r7, #12]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002486:	b590      	push	{r4, r7, lr}
 8002488:	b087      	sub	sp, #28
 800248a:	af00      	add	r7, sp, #0
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	461a      	mov	r2, r3
 8002492:	460b      	mov	r3, r1
 8002494:	72fb      	strb	r3, [r7, #11]
 8002496:	4613      	mov	r3, r2
 8002498:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685c      	ldr	r4, [r3, #4]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6898      	ldr	r0, [r3, #8]
 80024a2:	893b      	ldrh	r3, [r7, #8]
 80024a4:	7af9      	ldrb	r1, [r7, #11]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	47a0      	blx	r4
 80024aa:	6178      	str	r0, [r7, #20]

  return ret;
 80024ac:	697b      	ldr	r3, [r7, #20]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}

080024b6 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80024b6:	b590      	push	{r4, r7, lr}
 80024b8:	b087      	sub	sp, #28
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	461a      	mov	r2, r3
 80024c2:	460b      	mov	r3, r1
 80024c4:	72fb      	strb	r3, [r7, #11]
 80024c6:	4613      	mov	r3, r2
 80024c8:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681c      	ldr	r4, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6898      	ldr	r0, [r3, #8]
 80024d2:	893b      	ldrh	r3, [r7, #8]
 80024d4:	7af9      	ldrb	r1, [r7, #11]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	47a0      	blx	r4
 80024da:	6178      	str	r0, [r7, #20]

  return ret;
 80024dc:	697b      	ldr	r3, [r7, #20]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	371c      	adds	r7, #28
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd90      	pop	{r4, r7, pc}
	...

080024e8 <lsm6dsl_from_fs8g_to_mg>:
{
  return ((float_t)lsb * 0.122f);
}

float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.244f);
 80024f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002514 <lsm6dsl_from_fs8g_to_mg+0x2c>
 8002502:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002506:	eeb0 0a67 	vmov.f32	s0, s15
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	3e79db23 	.word	0x3e79db23

08002518 <lsm6dsl_from_fs2000dps_to_mdps>:
{
  return ((float_t)lsb * 35.0f);
}

float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 70.0f);
 8002522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002544 <lsm6dsl_from_fs2000dps_to_mdps+0x2c>
 8002532:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002536:	eeb0 0a67 	vmov.f32	s0, s15
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	428c0000 	.word	0x428c0000

08002548 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002554:	f107 0208 	add.w	r2, r7, #8
 8002558:	2301      	movs	r3, #1
 800255a:	2110      	movs	r1, #16
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff92 	bl	8002486 <lsm6dsl_read_reg>
 8002562:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	b2da      	uxtb	r2, r3
 8002572:	7a3b      	ldrb	r3, [r7, #8]
 8002574:	f362 0383 	bfi	r3, r2, #2, #2
 8002578:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800257a:	f107 0208 	add.w	r2, r7, #8
 800257e:	2301      	movs	r3, #1
 8002580:	2110      	movs	r1, #16
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff97 	bl	80024b6 <lsm6dsl_write_reg>
 8002588:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025a0:	f107 0208 	add.w	r2, r7, #8
 80025a4:	2301      	movs	r3, #1
 80025a6:	2110      	movs	r1, #16
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7ff ff6c 	bl	8002486 <lsm6dsl_read_reg>
 80025ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80025b6:	78fb      	ldrb	r3, [r7, #3]
 80025b8:	f003 030f 	and.w	r3, r3, #15
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	7a3b      	ldrb	r3, [r7, #8]
 80025c0:	f362 1307 	bfi	r3, r2, #4, #4
 80025c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80025c6:	f107 0208 	add.w	r2, r7, #8
 80025ca:	2301      	movs	r3, #1
 80025cc:	2110      	movs	r1, #16
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff ff71 	bl	80024b6 <lsm6dsl_write_reg>
 80025d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80025ec:	f107 0208 	add.w	r2, r7, #8
 80025f0:	2301      	movs	r3, #1
 80025f2:	2111      	movs	r1, #17
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff ff46 	bl	8002486 <lsm6dsl_read_reg>
 80025fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10f      	bne.n	8002622 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	b2da      	uxtb	r2, r3
 800260a:	7a3b      	ldrb	r3, [r7, #8]
 800260c:	f362 0343 	bfi	r3, r2, #1, #3
 8002610:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002612:	f107 0208 	add.w	r2, r7, #8
 8002616:	2301      	movs	r3, #1
 8002618:	2111      	movs	r1, #17
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff ff4b 	bl	80024b6 <lsm6dsl_write_reg>
 8002620:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002638:	f107 0208 	add.w	r2, r7, #8
 800263c:	2301      	movs	r3, #1
 800263e:	2111      	movs	r1, #17
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff20 	bl	8002486 <lsm6dsl_read_reg>
 8002646:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800264e:	78fb      	ldrb	r3, [r7, #3]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	7a3b      	ldrb	r3, [r7, #8]
 8002658:	f362 1307 	bfi	r3, r2, #4, #4
 800265c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800265e:	f107 0208 	add.w	r2, r7, #8
 8002662:	2301      	movs	r3, #1
 8002664:	2111      	movs	r1, #17
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ff25 	bl	80024b6 <lsm6dsl_write_reg>
 800266c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002684:	f107 0208 	add.w	r2, r7, #8
 8002688:	2301      	movs	r3, #1
 800268a:	2112      	movs	r1, #18
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fefa 	bl	8002486 <lsm6dsl_read_reg>
 8002692:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	7a3b      	ldrb	r3, [r7, #8]
 80026a4:	f362 1386 	bfi	r3, r2, #6, #1
 80026a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80026aa:	f107 0208 	add.w	r2, r7, #8
 80026ae:	2301      	movs	r3, #1
 80026b0:	2112      	movs	r1, #18
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7ff feff 	bl	80024b6 <lsm6dsl_write_reg>
 80026b8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <lsm6dsl_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 80026ce:	f107 0208 	add.w	r2, r7, #8
 80026d2:	2301      	movs	r3, #1
 80026d4:	211e      	movs	r1, #30
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff fed5 	bl	8002486 <lsm6dsl_read_reg>
 80026dc:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 80026de:	7a3b      	ldrb	r3, [r7, #8]
 80026e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	461a      	mov	r2, r3
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	701a      	strb	r2, [r3, #0]

  return ret;
 80026ec:	68fb      	ldr	r3, [r7, #12]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <lsm6dsl_gy_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
  lsm6dsl_status_reg_t status_reg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
 8002700:	f107 0208 	add.w	r2, r7, #8
 8002704:	2301      	movs	r3, #1
 8002706:	211e      	movs	r1, #30
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff febc 	bl	8002486 <lsm6dsl_read_reg>
 800270e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.gda;
 8002710:	7a3b      	ldrb	r3, [r7, #8]
 8002712:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	701a      	strb	r2, [r3, #0]

  return ret;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 8002732:	f107 020c 	add.w	r2, r7, #12
 8002736:	2306      	movs	r3, #6
 8002738:	2122      	movs	r1, #34	; 0x22
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fea3 	bl	8002486 <lsm6dsl_read_reg>
 8002740:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002742:	7b7b      	ldrb	r3, [r7, #13]
 8002744:	b21a      	sxth	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002750:	b29b      	uxth	r3, r3
 8002752:	021b      	lsls	r3, r3, #8
 8002754:	b29a      	uxth	r2, r3
 8002756:	7b3b      	ldrb	r3, [r7, #12]
 8002758:	b29b      	uxth	r3, r3
 800275a:	4413      	add	r3, r2
 800275c:	b29b      	uxth	r3, r3
 800275e:	b21a      	sxth	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002764:	7bfa      	ldrb	r2, [r7, #15]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	3302      	adds	r3, #2
 800276a:	b212      	sxth	r2, r2
 800276c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3302      	adds	r3, #2
 8002772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002776:	b29b      	uxth	r3, r3
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	b29a      	uxth	r2, r3
 800277c:	7bbb      	ldrb	r3, [r7, #14]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4413      	add	r3, r2
 8002782:	b29a      	uxth	r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	3302      	adds	r3, #2
 8002788:	b212      	sxth	r2, r2
 800278a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800278c:	7c7a      	ldrb	r2, [r7, #17]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	3304      	adds	r3, #4
 8002792:	b212      	sxth	r2, r2
 8002794:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3304      	adds	r3, #4
 800279a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279e:	b29b      	uxth	r3, r3
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	7c3b      	ldrb	r3, [r7, #16]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4413      	add	r3, r2
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	3304      	adds	r3, #4
 80027b0:	b212      	sxth	r2, r2
 80027b2:	801a      	strh	r2, [r3, #0]

  return ret;
 80027b4:	697b      	ldr	r3, [r7, #20]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 80027c8:	f107 020c 	add.w	r2, r7, #12
 80027cc:	2306      	movs	r3, #6
 80027ce:	2128      	movs	r1, #40	; 0x28
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fe58 	bl	8002486 <lsm6dsl_read_reg>
 80027d6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80027d8:	7b7b      	ldrb	r3, [r7, #13]
 80027da:	b21a      	sxth	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	7b3b      	ldrb	r3, [r7, #12]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	3302      	adds	r3, #2
 8002800:	b212      	sxth	r2, r2
 8002802:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3302      	adds	r3, #2
 8002808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800280c:	b29b      	uxth	r3, r3
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	b29a      	uxth	r2, r3
 8002812:	7bbb      	ldrb	r3, [r7, #14]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4413      	add	r3, r2
 8002818:	b29a      	uxth	r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	3302      	adds	r3, #2
 800281e:	b212      	sxth	r2, r2
 8002820:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002822:	7c7a      	ldrb	r2, [r7, #17]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	3304      	adds	r3, #4
 8002828:	b212      	sxth	r2, r2
 800282a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	3304      	adds	r3, #4
 8002830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002834:	b29b      	uxth	r3, r3
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	b29a      	uxth	r2, r3
 800283a:	7c3b      	ldrb	r3, [r7, #16]
 800283c:	b29b      	uxth	r3, r3
 800283e:	4413      	add	r3, r2
 8002840:	b29a      	uxth	r2, r3
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3304      	adds	r3, #4
 8002846:	b212      	sxth	r2, r2
 8002848:	801a      	strh	r2, [r3, #0]

  return ret;
 800284a:	697b      	ldr	r3, [r7, #20]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 800285e:	2301      	movs	r3, #1
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	210f      	movs	r1, #15
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff fe0e 	bl	8002486 <lsm6dsl_read_reg>
 800286a:	60f8      	str	r0, [r7, #12]

  return ret;
 800286c:	68fb      	ldr	r3, [r7, #12]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002882:	f107 0208 	add.w	r2, r7, #8
 8002886:	2301      	movs	r3, #1
 8002888:	2112      	movs	r1, #18
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff fdfb 	bl	8002486 <lsm6dsl_read_reg>
 8002890:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10f      	bne.n	80028b8 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8002898:	78fb      	ldrb	r3, [r7, #3]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	7a3b      	ldrb	r3, [r7, #8]
 80028a2:	f362 0300 	bfi	r3, r2, #0, #1
 80028a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028a8:	f107 0208 	add.w	r2, r7, #8
 80028ac:	2301      	movs	r3, #1
 80028ae:	2112      	movs	r1, #18
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff fe00 	bl	80024b6 <lsm6dsl_write_reg>
 80028b6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028b8:	68fb      	ldr	r3, [r7, #12]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80028cc:	f107 0208 	add.w	r2, r7, #8
 80028d0:	2301      	movs	r3, #1
 80028d2:	2112      	movs	r1, #18
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff fdd6 	bl	8002486 <lsm6dsl_read_reg>
 80028da:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80028dc:	7a3b      	ldrb	r3, [r7, #8]
 80028de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	461a      	mov	r2, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	701a      	strb	r2, [r3, #0]

  return ret;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <lsm6dsl_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                     lsm6dsl_input_composite_t val)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002900:	f107 0208 	add.w	r2, r7, #8
 8002904:	2301      	movs	r3, #1
 8002906:	2117      	movs	r1, #23
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fdbc 	bl	8002486 <lsm6dsl_read_reg>
 800290e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d120      	bne.n	8002958 <lsm6dsl_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	7a3b      	ldrb	r3, [r7, #8]
 8002922:	f362 03c3 	bfi	r3, r2, #3, #1
 8002926:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	7a3b      	ldrb	r3, [r7, #8]
 8002932:	f362 1346 	bfi	r3, r2, #5, #2
 8002936:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8002938:	7a3b      	ldrb	r3, [r7, #8]
 800293a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800293e:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8002940:	7a3b      	ldrb	r3, [r7, #8]
 8002942:	f36f 0382 	bfc	r3, #2, #1
 8002946:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8002948:	f107 0208 	add.w	r2, r7, #8
 800294c:	2301      	movs	r3, #1
 800294e:	2117      	movs	r1, #23
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fdb0 	bl	80024b6 <lsm6dsl_write_reg>
 8002956:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <lsm6dsl_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_band_pass_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_lpf1_sel_g_t val)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b086      	sub	sp, #24
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_ctrl6_c_t ctrl6_c;
  lsm6dsl_ctrl7_g_t ctrl7_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 800296e:	f107 0208 	add.w	r2, r7, #8
 8002972:	2301      	movs	r3, #1
 8002974:	2116      	movs	r1, #22
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fd85 	bl	8002486 <lsm6dsl_read_reg>
 800297c:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d157      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8002984:	78fb      	ldrb	r3, [r7, #3]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	b2da      	uxtb	r2, r3
 800298e:	7a3b      	ldrb	r3, [r7, #8]
 8002990:	f362 1305 	bfi	r3, r2, #4, #2
 8002994:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	09db      	lsrs	r3, r3, #7
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	7a3b      	ldrb	r3, [r7, #8]
 80029a4:	f362 1386 	bfi	r3, r2, #6, #1
 80029a8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80029aa:	f107 0208 	add.w	r2, r7, #8
 80029ae:	2301      	movs	r3, #1
 80029b0:	2116      	movs	r1, #22
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff fd7f 	bl	80024b6 <lsm6dsl_write_reg>
 80029b8:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d139      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
    {
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80029c0:	f107 020c 	add.w	r2, r7, #12
 80029c4:	2301      	movs	r3, #1
 80029c6:	2115      	movs	r1, #21
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff fd5c 	bl	8002486 <lsm6dsl_read_reg>
 80029ce:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d12e      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 0303 	and.w	r3, r3, #3
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	7b3b      	ldrb	r3, [r7, #12]
 80029e0:	f362 0301 	bfi	r3, r2, #0, #2
 80029e4:	733b      	strb	r3, [r7, #12]
        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80029e6:	f107 020c 	add.w	r2, r7, #12
 80029ea:	2301      	movs	r3, #1
 80029ec:	2115      	movs	r1, #21
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff fd61 	bl	80024b6 <lsm6dsl_write_reg>
 80029f4:	6178      	str	r0, [r7, #20]

        if (ret == 0)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d11b      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
        {
          ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
 80029fc:	f107 0210 	add.w	r2, r7, #16
 8002a00:	2301      	movs	r3, #1
 8002a02:	2113      	movs	r1, #19
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fd3e 	bl	8002486 <lsm6dsl_read_reg>
 8002a0a:	6178      	str	r0, [r7, #20]
                                 (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d110      	bne.n	8002a34 <lsm6dsl_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	08db      	lsrs	r3, r3, #3
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	7c3b      	ldrb	r3, [r7, #16]
 8002a1e:	f362 0341 	bfi	r3, r2, #1, #1
 8002a22:	743b      	strb	r3, [r7, #16]
            ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
 8002a24:	f107 0210 	add.w	r2, r7, #16
 8002a28:	2301      	movs	r3, #1
 8002a2a:	2113      	movs	r1, #19
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff fd42 	bl	80024b6 <lsm6dsl_write_reg>
 8002a32:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002a34:	697b      	ldr	r3, [r7, #20]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <radio_tx>:
/* USER CODE BEGIN 0 */

// radio transmission wrapper
// TODO: add reception
#ifdef USING_XTEND
void radio_tx(uint8_t *msg_buffer, uint16_t size) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	807b      	strh	r3, [r7, #2]
//	HAL_UART_Transmit(&huart3, msg_buffer, size, HAL_MAX_DELAY);
	HAL_UART_Transmit_DMA(&huart3, msg_buffer, size);
 8002a4c:	887b      	ldrh	r3, [r7, #2]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4803      	ldr	r0, [pc, #12]	; (8002a60 <radio_tx+0x20>)
 8002a54:	f008 f9d8 	bl	800ae08 <HAL_UART_Transmit_DMA>

	#ifdef DEBUG_DMA
	HAL_UART_Transmit(&huart8, msg_buffer, size, HAL_MAX_DELAY);
	#endif
}
 8002a58:	bf00      	nop
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200014a4 	.word	0x200014a4

08002a64 <tone>:
	#endif
}
#endif

// helper functions for buzzing
void tone(uint32_t duration, uint32_t repeats) {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < repeats; i++) {
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e013      	b.n	8002a9c <tone+0x38>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002a74:	2108      	movs	r1, #8
 8002a76:	480e      	ldr	r0, [pc, #56]	; (8002ab0 <tone+0x4c>)
 8002a78:	f007 f9f0 	bl	8009e5c <HAL_TIM_PWM_Start>
		HAL_Delay(duration);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f003 f8e1 	bl	8005c44 <HAL_Delay>
		HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 8002a82:	2108      	movs	r1, #8
 8002a84:	480a      	ldr	r0, [pc, #40]	; (8002ab0 <tone+0x4c>)
 8002a86:	f007 fa27 	bl	8009ed8 <HAL_TIM_PWM_Stop>
		if (repeats > 1)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d902      	bls.n	8002a96 <tone+0x32>
			HAL_Delay(duration);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f003 f8d7 	bl	8005c44 <HAL_Delay>
	for (uint32_t i = 0; i < repeats; i++) {
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3e7      	bcc.n	8002a74 <tone+0x10>
	}
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	200013a4 	.word	0x200013a4

08002ab4 <buzz_success>:
void buzz_success() { tone(BUZZ_SUCCESS_DURATION, BUZZ_SUCCESS_REPEATS); };
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	2101      	movs	r1, #1
 8002aba:	2032      	movs	r0, #50	; 0x32
 8002abc:	f7ff ffd2 	bl	8002a64 <tone>
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <buzz_failure>:
void buzz_failure() { tone(BUZZ_FAILURE_DURATION, BUZZ_FAILURE_REPEATS); };
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	2101      	movs	r1, #1
 8002aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ace:	f7ff ffc9 	bl	8002a64 <tone>
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002adc:	b0ab      	sub	sp, #172	; 0xac
 8002ade:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ae0:	f003 f83e 	bl	8005b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ae4:	f000 fd08 	bl	80034f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ae8:	f7fe fbe0 	bl	80012ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002aec:	f7fe fba0 	bl	8001230 <MX_DMA_Init>
  MX_ADC1_Init();
 8002af0:	f7fe fb08 	bl	8001104 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002af4:	f7ff f874 	bl	8001be0 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002af8:	f7ff f8b2 	bl	8001c60 <MX_I2C3_Init>
  MX_SPI2_Init();
 8002afc:	f001 fc9c 	bl	8004438 <MX_SPI2_Init>
  MX_SPI4_Init();
 8002b00:	f001 fcd0 	bl	80044a4 <MX_SPI4_Init>
  MX_SPI5_Init();
 8002b04:	f001 fd04 	bl	8004510 <MX_SPI5_Init>
  MX_TIM2_Init();
 8002b08:	f001 ff6a 	bl	80049e0 <MX_TIM2_Init>
  MX_UART8_Init();
 8002b0c:	f002 f904 	bl	8004d18 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8002b10:	f002 f92c 	bl	8004d6c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8002b14:	f002 f954 	bl	8004dc0 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8002b18:	f009 f960 	bl	800bddc <MX_FATFS_Init>
  MX_RTC_Init();
 8002b1c:	f001 f932 	bl	8003d84 <MX_RTC_Init>
  MX_TIM4_Init();
 8002b20:	f002 f822 	bl	8004b68 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002b24:	f001 ffd2 	bl	8004acc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // *** IMPORTANT: DMA Init function must be called before peripheral init! *** //

  // FLASH set CS, WP and IO3 pins high
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, SET);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2140      	movs	r1, #64	; 0x40
 8002b2c:	485b      	ldr	r0, [pc, #364]	; (8002c9c <main+0x1c4>)
 8002b2e:	f004 fb11 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_WP_GPIO_Port, FLASH_WP_Pin, SET);
 8002b32:	2201      	movs	r2, #1
 8002b34:	2120      	movs	r1, #32
 8002b36:	4859      	ldr	r0, [pc, #356]	; (8002c9c <main+0x1c4>)
 8002b38:	f004 fb0c 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FLASH_IO3_GPIO_Port, FLASH_IO3_Pin, SET);
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	2110      	movs	r1, #16
 8002b40:	4856      	ldr	r0, [pc, #344]	; (8002c9c <main+0x1c4>)
 8002b42:	f004 fb07 	bl	8007154 <HAL_GPIO_WritePin>

  // set CS for SD card high
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, SET);
 8002b46:	2201      	movs	r2, #1
 8002b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b4c:	4854      	ldr	r0, [pc, #336]	; (8002ca0 <main+0x1c8>)
 8002b4e:	f004 fb01 	bl	8007154 <HAL_GPIO_WritePin>

  // reset LEDs
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2102      	movs	r1, #2
 8002b56:	4853      	ldr	r0, [pc, #332]	; (8002ca4 <main+0x1cc>)
 8002b58:	f004 fafc 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2104      	movs	r1, #4
 8002b60:	4850      	ldr	r0, [pc, #320]	; (8002ca4 <main+0x1cc>)
 8002b62:	f004 faf7 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8002b66:	2200      	movs	r2, #0
 8002b68:	2108      	movs	r1, #8
 8002b6a:	484e      	ldr	r0, [pc, #312]	; (8002ca4 <main+0x1cc>)
 8002b6c:	f004 faf2 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2108      	movs	r1, #8
 8002b74:	484c      	ldr	r0, [pc, #304]	; (8002ca8 <main+0x1d0>)
 8002b76:	f004 faed 	bl	8007154 <HAL_GPIO_WritePin>

  // reset recovery pyro pins
  HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b80:	484a      	ldr	r0, [pc, #296]	; (8002cac <main+0x1d4>)
 8002b82:	f004 fae7 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b8c:	4847      	ldr	r0, [pc, #284]	; (8002cac <main+0x1d4>)
 8002b8e:	f004 fae1 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8002b92:	2200      	movs	r2, #0
 8002b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b98:	4844      	ldr	r0, [pc, #272]	; (8002cac <main+0x1d4>)
 8002b9a:	f004 fadb 	bl	8007154 <HAL_GPIO_WritePin>

  // reset prop pyro pins
  HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	4842      	ldr	r0, [pc, #264]	; (8002cac <main+0x1d4>)
 8002ba4:	f004 fad6 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bae:	483c      	ldr	r0, [pc, #240]	; (8002ca0 <main+0x1c8>)
 8002bb0:	f004 fad0 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bba:	4839      	ldr	r0, [pc, #228]	; (8002ca0 <main+0x1c8>)
 8002bbc:	f004 faca 	bl	8007154 <HAL_GPIO_WritePin>

  // reset 12 V buck converter enable pin (disable converter)
  HAL_GPIO_WritePin(PM_12V_EN_GPIO_Port, PM_12V_EN_Pin, RESET);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	483a      	ldr	r0, [pc, #232]	; (8002cb0 <main+0x1d8>)
 8002bc6:	f004 fac5 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vent_Valve_EN_GPIO_Port, Vent_Valve_EN_Pin, RESET);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	4838      	ldr	r0, [pc, #224]	; (8002cb0 <main+0x1d8>)
 8002bd0:	f004 fac0 	bl	8007154 <HAL_GPIO_WritePin>

  // reset payload EN signal
  HAL_GPIO_WritePin(Payload_EN_GPIO_Port, Payload_EN_Pin, RESET);
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bda:	4835      	ldr	r0, [pc, #212]	; (8002cb0 <main+0x1d8>)
 8002bdc:	f004 faba 	bl	8007154 <HAL_GPIO_WritePin>

  // set CS pin for thermocouple chip high (SPI idle CS is high)
  HAL_GPIO_WritePin(TH_CS_GPIO_Port, TH_CS_Pin, SET);
 8002be0:	2201      	movs	r2, #1
 8002be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002be6:	4832      	ldr	r0, [pc, #200]	; (8002cb0 <main+0x1d8>)
 8002be8:	f004 fab4 	bl	8007154 <HAL_GPIO_WritePin>

  // set power off for VR
  HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bf2:	482e      	ldr	r0, [pc, #184]	; (8002cac <main+0x1d4>)
 8002bf4:	f004 faae 	bl	8007154 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2180      	movs	r1, #128	; 0x80
 8002bfc:	4827      	ldr	r0, [pc, #156]	; (8002c9c <main+0x1c4>)
 8002bfe:	f004 faa9 	bl	8007154 <HAL_GPIO_WritePin>
  set_DIO1_pin(SX_DIO_GPIO_Port, SX_DIO_Pin);
  Tx_setup();
#endif

  // init i2c sensors and data storage
  dev_ctx_lsm = lsm6dsl_init();
 8002c02:	4c2c      	ldr	r4, [pc, #176]	; (8002cb4 <main+0x1dc>)
 8002c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff f909 	bl	8001e20 <lsm6dsl_init>
 8002c0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8002c1a:	f7ff ff4b 	bl	8002ab4 <buzz_success>
  HAL_Delay(500);
 8002c1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c22:	f003 f80f 	bl	8005c44 <HAL_Delay>

  dev_ctx_lps = lps22hh_init();
 8002c26:	4c24      	ldr	r4, [pc, #144]	; (8002cb8 <main+0x1e0>)
 8002c28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff f9f3 	bl	8002018 <lps22hh_init>
 8002c32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzz_success();
 8002c3e:	f7ff ff39 	bl	8002ab4 <buzz_success>
  HAL_Delay(500);
 8002c42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c46:	f002 fffd 	bl	8005c44 <HAL_Delay>

  // init FLASH
  if (!W25qxx_Init()) Error_Handler();
 8002c4a:	f002 fb9f 	bl	800538c <W25qxx_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f083 0301 	eor.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <main+0x186>
 8002c5a:	f000 ff5b 	bl	8003b14 <Error_Handler>
  buzz_success();
 8002c5e:	f7ff ff29 	bl	8002ab4 <buzz_success>

  // init sd card with dynamic filename
  fres = sd_init_dynamic_filename("FC", sd_file_header, filename);
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <main+0x1e4>)
 8002c64:	4916      	ldr	r1, [pc, #88]	; (8002cc0 <main+0x1e8>)
 8002c66:	4817      	ldr	r0, [pc, #92]	; (8002cc4 <main+0x1ec>)
 8002c68:	f001 f914 	bl	8003e94 <sd_init_dynamic_filename>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <main+0x1f0>)
 8002c72:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 8002c74:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <main+0x1f0>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <main+0x1a8>
  		Error_Handler();
 8002c7c:	f000 ff4a 	bl	8003b14 <Error_Handler>
  }

  // check if flash empty and write to sd card if not
  int save_flash = save_flash_to_sd();
 8002c80:	f001 fafe 	bl	8004280 <save_flash_to_sd>
 8002c84:	4603      	mov	r3, r0
 8002c86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (save_flash) {
 8002c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <main+0x1ba>
	  buzz_failure();
 8002c8e:	f7ff ff19 	bl	8002ac4 <buzz_failure>
  // send message with Iridium
//  MRT_Static_Iridium_sendMessage("message");
//  MRT_Static_Iridium_Shutdown();

  // get ground altitude
  for (uint8_t i = 0; i < 100; i++) {
 8002c92:	2300      	movs	r3, #0
 8002c94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002c98:	e029      	b.n	8002cee <main+0x216>
 8002c9a:	bf00      	nop
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	40021400 	.word	0x40021400
 8002ca4:	40020800 	.word	0x40020800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40021800 	.word	0x40021800
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	20000c20 	.word	0x20000c20
 8002cb8:	20000c2c 	.word	0x20000c2c
 8002cbc:	20000378 	.word	0x20000378
 8002cc0:	08016140 	.word	0x08016140
 8002cc4:	08015658 	.word	0x08015658
 8002cc8:	20000c38 	.word	0x20000c38
	  alt_ground += getAltitude();
 8002ccc:	f000 fe68 	bl	80039a0 <getAltitude>
 8002cd0:	eeb0 7a40 	vmov.f32	s14, s0
 8002cd4:	4ba8      	ldr	r3, [pc, #672]	; (8002f78 <main+0x4a0>)
 8002cd6:	edd3 7a00 	vldr	s15, [r3]
 8002cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cde:	4ba6      	ldr	r3, [pc, #664]	; (8002f78 <main+0x4a0>)
 8002ce0:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 100; i++) {
 8002ce4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002cee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002cf2:	2b63      	cmp	r3, #99	; 0x63
 8002cf4:	d9ea      	bls.n	8002ccc <main+0x1f4>
  }
  alt_ground /= 100.0;
 8002cf6:	4ba0      	ldr	r3, [pc, #640]	; (8002f78 <main+0x4a0>)
 8002cf8:	ed93 7a00 	vldr	s14, [r3]
 8002cfc:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8002f7c <main+0x4a4>
 8002d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d04:	4b9c      	ldr	r3, [pc, #624]	; (8002f78 <main+0x4a0>)
 8002d06:	edc3 7a00 	vstr	s15, [r3]
  alt_current = alt_ground;
 8002d0a:	4b9b      	ldr	r3, [pc, #620]	; (8002f78 <main+0x4a0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a9c      	ldr	r2, [pc, #624]	; (8002f80 <main+0x4a8>)
 8002d10:	6013      	str	r3, [r2, #0]

  // initial DMA request for GPS
//  HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN);

  // initial DMA request for XTend
  memset(xtend_rx_buf, 0, 10);
 8002d12:	220a      	movs	r2, #10
 8002d14:	2100      	movs	r1, #0
 8002d16:	489b      	ldr	r0, [pc, #620]	; (8002f84 <main+0x4ac>)
 8002d18:	f00c fb48 	bl	800f3ac <memset>
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)xtend_rx_buf, XTEND_RX_DMA_CMD_LEN);
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	4999      	ldr	r1, [pc, #612]	; (8002f84 <main+0x4ac>)
 8002d20:	4899      	ldr	r0, [pc, #612]	; (8002f88 <main+0x4b0>)
 8002d22:	f008 f8dd 	bl	800aee0 <HAL_UART_Receive_DMA>

  // initialize avionics and propulsion xtend buffers with *something* so DMA can happen without zero length error
  sprintf((char*) msg_buffer_av,
    				"S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
    				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002d26:	4b99      	ldr	r3, [pc, #612]	; (8002f8c <main+0x4b4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
  sprintf((char*) msg_buffer_av,
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fc2c 	bl	8000588 <__aeabi_f2d>
 8002d30:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002d34:	4b95      	ldr	r3, [pc, #596]	; (8002f8c <main+0x4b4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
  sprintf((char*) msg_buffer_av,
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fc25 	bl	8000588 <__aeabi_f2d>
 8002d3e:	e9c7 0108 	strd	r0, r1, [r7, #32]
    				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 8002d42:	4b92      	ldr	r3, [pc, #584]	; (8002f8c <main+0x4b4>)
 8002d44:	689b      	ldr	r3, [r3, #8]
  sprintf((char*) msg_buffer_av,
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fc1e 	bl	8000588 <__aeabi_f2d>
 8002d4c:	e9c7 0106 	strd	r0, r1, [r7, #24]
    				angular_rate_mdps[0], angular_rate_mdps[1],
 8002d50:	4b8f      	ldr	r3, [pc, #572]	; (8002f90 <main+0x4b8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
  sprintf((char*) msg_buffer_av,
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fc17 	bl	8000588 <__aeabi_f2d>
 8002d5a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    				angular_rate_mdps[0], angular_rate_mdps[1],
 8002d5e:	4b8c      	ldr	r3, [pc, #560]	; (8002f90 <main+0x4b8>)
 8002d60:	685b      	ldr	r3, [r3, #4]
  sprintf((char*) msg_buffer_av,
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fc10 	bl	8000588 <__aeabi_f2d>
 8002d68:	e9c7 0102 	strd	r0, r1, [r7, #8]
    				angular_rate_mdps[2], pressure_hPa, latitude, longitude,
 8002d6c:	4b88      	ldr	r3, [pc, #544]	; (8002f90 <main+0x4b8>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
  sprintf((char*) msg_buffer_av,
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fc09 	bl	8000588 <__aeabi_f2d>
 8002d76:	4605      	mov	r5, r0
 8002d78:	460e      	mov	r6, r1
 8002d7a:	4b86      	ldr	r3, [pc, #536]	; (8002f94 <main+0x4bc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fc02 	bl	8000588 <__aeabi_f2d>
 8002d84:	4682      	mov	sl, r0
 8002d86:	468b      	mov	fp, r1
 8002d88:	4b83      	ldr	r3, [pc, #524]	; (8002f98 <main+0x4c0>)
 8002d8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002d8e:	4b83      	ldr	r3, [pc, #524]	; (8002f9c <main+0x4c4>)
 8002d90:	e9d3 0100 	ldrd	r0, r1, [r3]
    				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002d94:	4b82      	ldr	r3, [pc, #520]	; (8002fa0 <main+0x4c8>)
 8002d96:	785b      	ldrb	r3, [r3, #1]
  sprintf((char*) msg_buffer_av,
 8002d98:	607b      	str	r3, [r7, #4]
    				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8002d9a:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <main+0x4c8>)
 8002d9c:	789b      	ldrb	r3, [r3, #2]
  sprintf((char*) msg_buffer_av,
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4b7f      	ldr	r3, [pc, #508]	; (8002fa0 <main+0x4c8>)
 8002da2:	685c      	ldr	r4, [r3, #4]
 8002da4:	4b7f      	ldr	r3, [pc, #508]	; (8002fa4 <main+0x4cc>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b7e      	ldr	r3, [pc, #504]	; (8002fa8 <main+0x4d0>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	9314      	str	r3, [sp, #80]	; 0x50
 8002db4:	9213      	str	r2, [sp, #76]	; 0x4c
 8002db6:	9412      	str	r4, [sp, #72]	; 0x48
 8002db8:	683c      	ldr	r4, [r7, #0]
 8002dba:	9411      	str	r4, [sp, #68]	; 0x44
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8002dc0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002dc4:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8002dc8:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8002dcc:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8002dd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8002dd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002dd8:	ed97 7b04 	vldr	d7, [r7, #16]
 8002ddc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002de0:	ed97 7b06 	vldr	d7, [r7, #24]
 8002de4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002de8:	ed97 7b08 	vldr	d7, [r7, #32]
 8002dec:	ed8d 7b00 	vstr	d7, [sp]
 8002df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002df4:	496d      	ldr	r1, [pc, #436]	; (8002fac <main+0x4d4>)
 8002df6:	486e      	ldr	r0, [pc, #440]	; (8002fb0 <main+0x4d8>)
 8002df8:	f00d faa8 	bl	801034c <siprintf>
    				continuity, state);
  sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002dfc:	4b6d      	ldr	r3, [pc, #436]	; (8002fb4 <main+0x4dc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fbc1 	bl	8000588 <__aeabi_f2d>
 8002e06:	4604      	mov	r4, r0
 8002e08:	460d      	mov	r5, r1
 8002e0a:	4b6b      	ldr	r3, [pc, #428]	; (8002fb8 <main+0x4e0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fbba 	bl	8000588 <__aeabi_f2d>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4968      	ldr	r1, [pc, #416]	; (8002fbc <main+0x4e4>)
 8002e1a:	7809      	ldrb	r1, [r1, #0]
 8002e1c:	4608      	mov	r0, r1
  					tank_pressure, tank_temperature, valve_state, stimeget.Minutes,
 8002e1e:	4960      	ldr	r1, [pc, #384]	; (8002fa0 <main+0x4c8>)
 8002e20:	7849      	ldrb	r1, [r1, #1]
  sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002e22:	460e      	mov	r6, r1
  					stimeget.Seconds, stimeget.SubSeconds);
 8002e24:	495e      	ldr	r1, [pc, #376]	; (8002fa0 <main+0x4c8>)
 8002e26:	7889      	ldrb	r1, [r1, #2]
  sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 8002e28:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e2a:	495d      	ldr	r1, [pc, #372]	; (8002fa0 <main+0x4c8>)
 8002e2c:	6849      	ldr	r1, [r1, #4]
 8002e2e:	9105      	str	r1, [sp, #20]
 8002e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e32:	9104      	str	r1, [sp, #16]
 8002e34:	9603      	str	r6, [sp, #12]
 8002e36:	9002      	str	r0, [sp, #8]
 8002e38:	e9cd 2300 	strd	r2, r3, [sp]
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	462b      	mov	r3, r5
 8002e40:	495f      	ldr	r1, [pc, #380]	; (8002fc0 <main+0x4e8>)
 8002e42:	4860      	ldr	r0, [pc, #384]	; (8002fc4 <main+0x4ec>)
 8002e44:	f00d fa82 	bl	801034c <siprintf>

  // start timer 3 for radio transmissions
  HAL_TIM_Base_Start_IT(&htim3);
 8002e48:	485f      	ldr	r0, [pc, #380]	; (8002fc8 <main+0x4f0>)
 8002e4a:	f006 ffae 	bl	8009daa <HAL_TIM_Base_Start_IT>

  // try do this here bc init function seems to be triggering it at higher rate
  TIM3->ARR = 1000;
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <main+0x4f4>)
 8002e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM3->EGR |= TIM_EGR_UG;
 8002e56:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <main+0x4f4>)
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	4a5c      	ldr	r2, [pc, #368]	; (8002fcc <main+0x4f4>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	6153      	str	r3, [r2, #20]
  HAL_UART_Transmit(&huart8, (uint8_t *)"10hz\r\n", 6, HAL_MAX_DELAY);
 8002e62:	f04f 33ff 	mov.w	r3, #4294967295
 8002e66:	2206      	movs	r2, #6
 8002e68:	4959      	ldr	r1, [pc, #356]	; (8002fd0 <main+0x4f8>)
 8002e6a:	485a      	ldr	r0, [pc, #360]	; (8002fd4 <main+0x4fc>)
 8002e6c:	f007 ff33 	bl	800acd6 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	    buzz_success();
	    HAL_Delay(10);
 8002e70:	200a      	movs	r0, #10
 8002e72:	f002 fee7 	bl	8005c44 <HAL_Delay>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8002e76:	2201      	movs	r2, #1
 8002e78:	2102      	movs	r1, #2
 8002e7a:	4857      	ldr	r0, [pc, #348]	; (8002fd8 <main+0x500>)
 8002e7c:	f004 f96a 	bl	8007154 <HAL_GPIO_WritePin>

		// check for launch command -- do not do this in the callback because...reasons?
		if (xtend_rx_dma_ready) {
 8002e80:	4b56      	ldr	r3, [pc, #344]	; (8002fdc <main+0x504>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d016      	beq.n	8002eb8 <main+0x3e0>
			// go check what the command is
			radio_command cmd = xtend_parse_dma_command();
 8002e8a:	f000 fe51 	bl	8003b30 <xtend_parse_dma_command>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

			// prep for next command to be sent
			memset(xtend_rx_buf, 0, 10);
 8002e94:	220a      	movs	r2, #10
 8002e96:	2100      	movs	r1, #0
 8002e98:	483a      	ldr	r0, [pc, #232]	; (8002f84 <main+0x4ac>)
 8002e9a:	f00c fa87 	bl	800f3ac <memset>
			HAL_UART_Receive_DMA(&huart3, xtend_rx_buf, XTEND_RX_DMA_CMD_LEN);
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4938      	ldr	r1, [pc, #224]	; (8002f84 <main+0x4ac>)
 8002ea2:	4839      	ldr	r0, [pc, #228]	; (8002f88 <main+0x4b0>)
 8002ea4:	f008 f81c 	bl	800aee0 <HAL_UART_Receive_DMA>
			xtend_rx_dma_ready = 0;
 8002ea8:	4b4c      	ldr	r3, [pc, #304]	; (8002fdc <main+0x504>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]

			execute_parsed_command(cmd);
 8002eae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fea6 	bl	8003c04 <execute_parsed_command>
		}

		// -----  GATHER AVIONICS TELEMETRY ----- //
		// lsm6dsl data
		get_acceleration(dev_ctx_lsm, acceleration_mg);
 8002eb8:	4a49      	ldr	r2, [pc, #292]	; (8002fe0 <main+0x508>)
 8002eba:	4b34      	ldr	r3, [pc, #208]	; (8002f8c <main+0x4b4>)
 8002ebc:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ebe:	f7ff f81f 	bl	8001f00 <get_acceleration>
		get_angvelocity(dev_ctx_lsm, angular_rate_mdps);
 8002ec2:	4a47      	ldr	r2, [pc, #284]	; (8002fe0 <main+0x508>)
 8002ec4:	4b32      	ldr	r3, [pc, #200]	; (8002f90 <main+0x4b8>)
 8002ec6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ec8:	f7ff f860 	bl	8001f8c <get_angvelocity>

		// lps22hh data
		alt_current = getAltitude(); // calls get_pressure();
 8002ecc:	f000 fd68 	bl	80039a0 <getAltitude>
 8002ed0:	eef0 7a40 	vmov.f32	s15, s0
 8002ed4:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <main+0x4a8>)
 8002ed6:	edc3 7a00 	vstr	s15, [r3]
//		get_temperature(dev_ctx_lps, &temperature_degC);

		// rtc data
		HAL_RTC_GetTime(&hrtc, &stimeget, RTC_FORMAT_BIN);
 8002eda:	2200      	movs	r2, #0
 8002edc:	4930      	ldr	r1, [pc, #192]	; (8002fa0 <main+0x4c8>)
 8002ede:	4841      	ldr	r0, [pc, #260]	; (8002fe4 <main+0x50c>)
 8002ee0:	f006 f934 	bl	800914c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sdateget, RTC_FORMAT_BIN); // have to call GetDate for the time to be correct
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4940      	ldr	r1, [pc, #256]	; (8002fe8 <main+0x510>)
 8002ee8:	483e      	ldr	r0, [pc, #248]	; (8002fe4 <main+0x50c>)
 8002eea:	f006 fa34 	bl	8009356 <HAL_RTC_GetDate>

		// continuity on pyro channels
		continuity = get_continuity();
 8002eee:	f000 fda7 	bl	8003a40 <get_continuity>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <main+0x4cc>)
 8002ef8:	701a      	strb	r2, [r3, #0]

		// gps
		if (gps_dma_ready) {
 8002efa:	4b3c      	ldr	r3, [pc, #240]	; (8002fec <main+0x514>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d026      	beq.n	8002f52 <main+0x47a>
			gps_dma_ready = 0;
 8002f04:	4b39      	ldr	r3, [pc, #228]	; (8002fec <main+0x514>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	701a      	strb	r2, [r3, #0]

			char *gps_parsed = GPS_ParseBuffer(&latitude, &longitude, &time);
 8002f0a:	4a39      	ldr	r2, [pc, #228]	; (8002ff0 <main+0x518>)
 8002f0c:	4923      	ldr	r1, [pc, #140]	; (8002f9c <main+0x4c4>)
 8002f0e:	4822      	ldr	r0, [pc, #136]	; (8002f98 <main+0x4c0>)
 8002f10:	f7fe fbb0 	bl	8001674 <GPS_ParseBuffer>
 8002f14:	6438      	str	r0, [r7, #64]	; 0x40
			fres = sd_open_file(filename);
 8002f16:	4837      	ldr	r0, [pc, #220]	; (8002ff4 <main+0x51c>)
 8002f18:	f001 f83a 	bl	8003f90 <sd_open_file>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <main+0x520>)
 8002f22:	701a      	strb	r2, [r3, #0]
			sd_write(&fil, "\nNew GPS\n");
 8002f24:	4935      	ldr	r1, [pc, #212]	; (8002ffc <main+0x524>)
 8002f26:	4836      	ldr	r0, [pc, #216]	; (8003000 <main+0x528>)
 8002f28:	f001 f84a 	bl	8003fc0 <sd_write>
			f_close(&fil);
 8002f2c:	4834      	ldr	r0, [pc, #208]	; (8003000 <main+0x528>)
 8002f2e:	f00b fe98 	bl	800ec62 <f_close>

			HAL_UART_Transmit(&huart8, gps_parsed, strlen(gps_parsed), HAL_MAX_DELAY);
 8002f32:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002f34:	f7fd f966 	bl	8000204 <strlen>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f42:	4824      	ldr	r0, [pc, #144]	; (8002fd4 <main+0x4fc>)
 8002f44:	f007 fec7 	bl	800acd6 <HAL_UART_Transmit>

			// start new DMA request
			HAL_UART_Receive_DMA(&huart6, gps_rx_buf, GPS_RX_DMA_BUF_LEN);
 8002f48:	22af      	movs	r2, #175	; 0xaf
 8002f4a:	492e      	ldr	r1, [pc, #184]	; (8003004 <main+0x52c>)
 8002f4c:	482e      	ldr	r0, [pc, #184]	; (8003008 <main+0x530>)
 8002f4e:	f007 ffc7 	bl	800aee0 <HAL_UART_Receive_DMA>
		}

		// debugging state of GPS coordinates during testing, remove later
		if (latitude != 0) {
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <main+0x4c0>)
 8002f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	f7fd fdd2 	bl	8000b08 <__aeabi_dcmpeq>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d150      	bne.n	800300c <main+0x534>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	2104      	movs	r1, #4
 8002f6e:	481a      	ldr	r0, [pc, #104]	; (8002fd8 <main+0x500>)
 8002f70:	f004 f8f0 	bl	8007154 <HAL_GPIO_WritePin>
 8002f74:	e04f      	b.n	8003016 <main+0x53e>
 8002f76:	bf00      	nop
 8002f78:	20000388 	.word	0x20000388
 8002f7c:	42c80000 	.word	0x42c80000
 8002f80:	2000038c 	.word	0x2000038c
 8002f84:	200006b8 	.word	0x200006b8
 8002f88:	200014a4 	.word	0x200014a4
 8002f8c:	20000238 	.word	0x20000238
 8002f90:	20000244 	.word	0x20000244
 8002f94:	20000250 	.word	0x20000250
 8002f98:	20000c18 	.word	0x20000c18
 8002f9c:	20000b08 	.word	0x20000b08
 8002fa0:	20000264 	.word	0x20000264
 8002fa4:	20000237 	.word	0x20000237
 8002fa8:	20000385 	.word	0x20000385
 8002fac:	0801565c 	.word	0x0801565c
 8002fb0:	2000027c 	.word	0x2000027c
 8002fb4:	2000025c 	.word	0x2000025c
 8002fb8:	20000258 	.word	0x20000258
 8002fbc:	20000260 	.word	0x20000260
 8002fc0:	080156b8 	.word	0x080156b8
 8002fc4:	20000344 	.word	0x20000344
 8002fc8:	20001364 	.word	0x20001364
 8002fcc:	40000400 	.word	0x40000400
 8002fd0:	080156e0 	.word	0x080156e0
 8002fd4:	20001544 	.word	0x20001544
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	2000039d 	.word	0x2000039d
 8002fe0:	20000c20 	.word	0x20000c20
 8002fe4:	20000e6c 	.word	0x20000e6c
 8002fe8:	20000278 	.word	0x20000278
 8002fec:	20000254 	.word	0x20000254
 8002ff0:	20000b10 	.word	0x20000b10
 8002ff4:	20000378 	.word	0x20000378
 8002ff8:	20000c38 	.word	0x20000c38
 8002ffc:	080156e8 	.word	0x080156e8
 8003000:	20000c3c 	.word	0x20000c3c
 8003004:	20000a58 	.word	0x20000a58
 8003008:	20001584 	.word	0x20001584
		} else {
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 800300c:	2200      	movs	r2, #0
 800300e:	2104      	movs	r1, #4
 8003010:	4898      	ldr	r0, [pc, #608]	; (8003274 <main+0x79c>)
 8003012:	f004 f89f 	bl	8007154 <HAL_GPIO_WritePin>
		}

		if (longitude != 0) {
 8003016:	4b98      	ldr	r3, [pc, #608]	; (8003278 <main+0x7a0>)
 8003018:	e9d3 0100 	ldrd	r0, r1, [r3]
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	f7fd fd70 	bl	8000b08 <__aeabi_dcmpeq>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d105      	bne.n	800303a <main+0x562>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 800302e:	2201      	movs	r2, #1
 8003030:	2108      	movs	r1, #8
 8003032:	4890      	ldr	r0, [pc, #576]	; (8003274 <main+0x79c>)
 8003034:	f004 f88e 	bl	8007154 <HAL_GPIO_WritePin>
 8003038:	e004      	b.n	8003044 <main+0x56c>
		} else {
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800303a:	2200      	movs	r2, #0
 800303c:	2108      	movs	r1, #8
 800303e:	488d      	ldr	r0, [pc, #564]	; (8003274 <main+0x79c>)
 8003040:	f004 f888 	bl	8007154 <HAL_GPIO_WritePin>
		}

		// propulsion data (not needed after apogee)
		if (state < FLIGHT_STATE_PRE_MAIN) {
 8003044:	4b8d      	ldr	r3, [pc, #564]	; (800327c <main+0x7a4>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d83b      	bhi.n	80030c6 <main+0x5ee>
			tank_temperature = Max31855_Read_Temp();
 800304e:	f7fd ffed 	bl	800102c <Max31855_Read_Temp>
 8003052:	eef0 7a40 	vmov.f32	s15, s0
 8003056:	4b8a      	ldr	r3, [pc, #552]	; (8003280 <main+0x7a8>)
 8003058:	edc3 7a00 	vstr	s15, [r3]
			tank_pressure = prop_poll_pressure_transducer();
 800305c:	f000 fd28 	bl	8003ab0 <prop_poll_pressure_transducer>
 8003060:	eef0 7a40 	vmov.f32	s15, s0
 8003064:	4b87      	ldr	r3, [pc, #540]	; (8003284 <main+0x7ac>)
 8003066:	edc3 7a00 	vstr	s15, [r3]
			valve_state = HAL_GPIO_ReadPin(IN_Prop_ActuatedVent_Feedback_GPIO_Port, IN_Prop_ActuatedVent_Feedback_Pin);
 800306a:	2102      	movs	r1, #2
 800306c:	4886      	ldr	r0, [pc, #536]	; (8003288 <main+0x7b0>)
 800306e:	f004 f859 	bl	8007124 <HAL_GPIO_ReadPin>
 8003072:	4603      	mov	r3, r0
 8003074:	461a      	mov	r2, r3
 8003076:	4b85      	ldr	r3, [pc, #532]	; (800328c <main+0x7b4>)
 8003078:	701a      	strb	r2, [r3, #0]

			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 800307a:	4b82      	ldr	r3, [pc, #520]	; (8003284 <main+0x7ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7fd fa82 	bl	8000588 <__aeabi_f2d>
 8003084:	4604      	mov	r4, r0
 8003086:	460d      	mov	r5, r1
 8003088:	4b7d      	ldr	r3, [pc, #500]	; (8003280 <main+0x7a8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fd fa7b 	bl	8000588 <__aeabi_f2d>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	497d      	ldr	r1, [pc, #500]	; (800328c <main+0x7b4>)
 8003098:	7809      	ldrb	r1, [r1, #0]
 800309a:	4608      	mov	r0, r1
					tank_pressure, tank_temperature, valve_state, stimeget.Minutes,
 800309c:	497c      	ldr	r1, [pc, #496]	; (8003290 <main+0x7b8>)
 800309e:	7849      	ldrb	r1, [r1, #1]
			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 80030a0:	460e      	mov	r6, r1
					stimeget.Seconds, stimeget.SubSeconds);
 80030a2:	497b      	ldr	r1, [pc, #492]	; (8003290 <main+0x7b8>)
 80030a4:	7889      	ldrb	r1, [r1, #2]
			sprintf((char*) msg_buffer_pr, "P,%03.2f,%03.2f,%d,%02d,%02d,%lu,E\r\n",
 80030a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80030a8:	4979      	ldr	r1, [pc, #484]	; (8003290 <main+0x7b8>)
 80030aa:	6849      	ldr	r1, [r1, #4]
 80030ac:	9105      	str	r1, [sp, #20]
 80030ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b0:	9104      	str	r1, [sp, #16]
 80030b2:	9603      	str	r6, [sp, #12]
 80030b4:	9002      	str	r0, [sp, #8]
 80030b6:	e9cd 2300 	strd	r2, r3, [sp]
 80030ba:	4622      	mov	r2, r4
 80030bc:	462b      	mov	r3, r5
 80030be:	4975      	ldr	r1, [pc, #468]	; (8003294 <main+0x7bc>)
 80030c0:	4875      	ldr	r0, [pc, #468]	; (8003298 <main+0x7c0>)
 80030c2:	f00d f943 	bl	801034c <siprintf>
		// -----  FORMATTING TELEMETRY ----- //

		// avionics message
		sprintf((char*) msg_buffer_av,
				"S,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.2f,%03.7f,%03.7f,%02d,%02d,%lu,%d,%d,E\r\n",
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80030c6:	4b75      	ldr	r3, [pc, #468]	; (800329c <main+0x7c4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) msg_buffer_av,
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fa5c 	bl	8000588 <__aeabi_f2d>
 80030d0:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80030d4:	4b71      	ldr	r3, [pc, #452]	; (800329c <main+0x7c4>)
 80030d6:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) msg_buffer_av,
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd fa55 	bl	8000588 <__aeabi_f2d>
 80030de:	e9c7 0108 	strd	r0, r1, [r7, #32]
				acceleration_mg[0], acceleration_mg[1], acceleration_mg[2],
 80030e2:	4b6e      	ldr	r3, [pc, #440]	; (800329c <main+0x7c4>)
 80030e4:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) msg_buffer_av,
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fa4e 	bl	8000588 <__aeabi_f2d>
 80030ec:	e9c7 0106 	strd	r0, r1, [r7, #24]
				angular_rate_mdps[0], angular_rate_mdps[1],
 80030f0:	4b6b      	ldr	r3, [pc, #428]	; (80032a0 <main+0x7c8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
		sprintf((char*) msg_buffer_av,
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7fd fa47 	bl	8000588 <__aeabi_f2d>
 80030fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
				angular_rate_mdps[0], angular_rate_mdps[1],
 80030fe:	4b68      	ldr	r3, [pc, #416]	; (80032a0 <main+0x7c8>)
 8003100:	685b      	ldr	r3, [r3, #4]
		sprintf((char*) msg_buffer_av,
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd fa40 	bl	8000588 <__aeabi_f2d>
 8003108:	e9c7 0102 	strd	r0, r1, [r7, #8]
				angular_rate_mdps[2], pressure_hPa, latitude, longitude,
 800310c:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <main+0x7c8>)
 800310e:	689b      	ldr	r3, [r3, #8]
		sprintf((char*) msg_buffer_av,
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd fa39 	bl	8000588 <__aeabi_f2d>
 8003116:	4605      	mov	r5, r0
 8003118:	460e      	mov	r6, r1
 800311a:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <main+0x7cc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd fa32 	bl	8000588 <__aeabi_f2d>
 8003124:	4682      	mov	sl, r0
 8003126:	468b      	mov	fp, r1
 8003128:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <main+0x7d0>)
 800312a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800312e:	4b52      	ldr	r3, [pc, #328]	; (8003278 <main+0x7a0>)
 8003130:	e9d3 0100 	ldrd	r0, r1, [r3]
				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 8003134:	4b56      	ldr	r3, [pc, #344]	; (8003290 <main+0x7b8>)
 8003136:	785b      	ldrb	r3, [r3, #1]
		sprintf((char*) msg_buffer_av,
 8003138:	607b      	str	r3, [r7, #4]
				stimeget.Minutes, stimeget.Seconds, stimeget.SubSeconds,
 800313a:	4b55      	ldr	r3, [pc, #340]	; (8003290 <main+0x7b8>)
 800313c:	789b      	ldrb	r3, [r3, #2]
		sprintf((char*) msg_buffer_av,
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <main+0x7b8>)
 8003142:	685c      	ldr	r4, [r3, #4]
 8003144:	4b59      	ldr	r3, [pc, #356]	; (80032ac <main+0x7d4>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	4b4b      	ldr	r3, [pc, #300]	; (800327c <main+0x7a4>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	9314      	str	r3, [sp, #80]	; 0x50
 8003154:	9213      	str	r2, [sp, #76]	; 0x4c
 8003156:	9412      	str	r4, [sp, #72]	; 0x48
 8003158:	683c      	ldr	r4, [r7, #0]
 800315a:	9411      	str	r4, [sp, #68]	; 0x44
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	9310      	str	r3, [sp, #64]	; 0x40
 8003160:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003164:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8003168:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800316c:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8003170:	ed97 7b02 	vldr	d7, [r7, #8]
 8003174:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003178:	ed97 7b04 	vldr	d7, [r7, #16]
 800317c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003180:	ed97 7b06 	vldr	d7, [r7, #24]
 8003184:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003188:	ed97 7b08 	vldr	d7, [r7, #32]
 800318c:	ed8d 7b00 	vstr	d7, [sp]
 8003190:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003194:	4946      	ldr	r1, [pc, #280]	; (80032b0 <main+0x7d8>)
 8003196:	4847      	ldr	r0, [pc, #284]	; (80032b4 <main+0x7dc>)
 8003198:	f00d f8d8 	bl	801034c <siprintf>
				continuity, state);

		// save to sd and flash
		fres = sd_open_file(filename);
 800319c:	4846      	ldr	r0, [pc, #280]	; (80032b8 <main+0x7e0>)
 800319e:	f000 fef7 	bl	8003f90 <sd_open_file>
 80031a2:	4603      	mov	r3, r0
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b45      	ldr	r3, [pc, #276]	; (80032bc <main+0x7e4>)
 80031a8:	701a      	strb	r2, [r3, #0]
		sd_write(&fil, msg_buffer_av);
 80031aa:	4942      	ldr	r1, [pc, #264]	; (80032b4 <main+0x7dc>)
 80031ac:	4844      	ldr	r0, [pc, #272]	; (80032c0 <main+0x7e8>)
 80031ae:	f000 ff07 	bl	8003fc0 <sd_write>
		if (state < FLIGHT_STATE_PRE_MAIN) {
 80031b2:	4b32      	ldr	r3, [pc, #200]	; (800327c <main+0x7a4>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d803      	bhi.n	80031c4 <main+0x6ec>
			sd_write(&fil, msg_buffer_pr);
 80031bc:	4936      	ldr	r1, [pc, #216]	; (8003298 <main+0x7c0>)
 80031be:	4840      	ldr	r0, [pc, #256]	; (80032c0 <main+0x7e8>)
 80031c0:	f000 fefe 	bl	8003fc0 <sd_write>
		}
		f_close(&fil);
 80031c4:	483e      	ldr	r0, [pc, #248]	; (80032c0 <main+0x7e8>)
 80031c6:	f00b fd4c 	bl	800ec62 <f_close>
//			debug_tx_uart(msg_buffer_av);
//			debug_tx_uart(msg_buffer_pr);
		#endif

		// logic to change states of flight
		switch (state) {
 80031ca:	4b2c      	ldr	r3, [pc, #176]	; (800327c <main+0x7a4>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	f200 8164 	bhi.w	800349e <main+0x9c6>
 80031d6:	a201      	add	r2, pc, #4	; (adr r2, 80031dc <main+0x704>)
 80031d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031dc:	080031f1 	.word	0x080031f1
 80031e0:	0800324d 	.word	0x0800324d
 80031e4:	0800333d 	.word	0x0800333d
 80031e8:	080033b9 	.word	0x080033b9
 80031ec:	08003469 	.word	0x08003469
		case FLIGHT_STATE_PAD: // launch pad, waiting. prioritize prop data

			// check current state
			if (alt_current - alt_ground > LAUNCH_ALT_CHANGE_THRESHOLD) { // launched
 80031f0:	4b34      	ldr	r3, [pc, #208]	; (80032c4 <main+0x7ec>)
 80031f2:	ed93 7a00 	vldr	s14, [r3]
 80031f6:	4b34      	ldr	r3, [pc, #208]	; (80032c8 <main+0x7f0>)
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003200:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80032cc <main+0x7f4>
 8003204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320c:	dc00      	bgt.n	8003210 <main+0x738>

				// generate software interrupt to change TIM3 update rate
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
			}

			break;
 800320e:	e14b      	b.n	80034a8 <main+0x9d0>
				state = FLIGHT_STATE_PRE_APOGEE;
 8003210:	4b1a      	ldr	r3, [pc, #104]	; (800327c <main+0x7a4>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
				fres = sd_open_file(filename);
 8003216:	4828      	ldr	r0, [pc, #160]	; (80032b8 <main+0x7e0>)
 8003218:	f000 feba 	bl	8003f90 <sd_open_file>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	4b26      	ldr	r3, [pc, #152]	; (80032bc <main+0x7e4>)
 8003222:	701a      	strb	r2, [r3, #0]
				sd_write(&fil, (uint8_t *)"launched\r\n");
 8003224:	492a      	ldr	r1, [pc, #168]	; (80032d0 <main+0x7f8>)
 8003226:	4826      	ldr	r0, [pc, #152]	; (80032c0 <main+0x7e8>)
 8003228:	f000 feca 	bl	8003fc0 <sd_write>
				f_close(&fil);
 800322c:	4824      	ldr	r0, [pc, #144]	; (80032c0 <main+0x7e8>)
 800322e:	f00b fd18 	bl	800ec62 <f_close>
				HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, SET);
 8003232:	2201      	movs	r2, #1
 8003234:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003238:	4826      	ldr	r0, [pc, #152]	; (80032d4 <main+0x7fc>)
 800323a:	f003 ff8b 	bl	8007154 <HAL_GPIO_WritePin>
				__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 800323e:	4b26      	ldr	r3, [pc, #152]	; (80032d8 <main+0x800>)
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <main+0x800>)
 8003244:	f043 0310 	orr.w	r3, r3, #16
 8003248:	6113      	str	r3, [r2, #16]
			break;
 800324a:	e12d      	b.n	80034a8 <main+0x9d0>

		case FLIGHT_STATE_PRE_APOGEE: // pre-apogee

			// check current state
			if (alt_current > alt_apogee) {
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <main+0x7ec>)
 800324e:	ed93 7a00 	vldr	s14, [r3]
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <main+0x804>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800325c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003260:	dd40      	ble.n	80032e4 <main+0x80c>
				alt_apogee = alt_current;
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <main+0x7ec>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a1d      	ldr	r2, [pc, #116]	; (80032dc <main+0x804>)
 8003268:	6013      	str	r3, [r2, #0]
				num_descending_samples = 0;
 800326a:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <main+0x808>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
					// generate software interrupt to change TIM3 update rate
					__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
				}
			}

			break;
 8003270:	e117      	b.n	80034a2 <main+0x9ca>
 8003272:	bf00      	nop
 8003274:	40020800 	.word	0x40020800
 8003278:	20000b08 	.word	0x20000b08
 800327c:	20000385 	.word	0x20000385
 8003280:	20000258 	.word	0x20000258
 8003284:	2000025c 	.word	0x2000025c
 8003288:	40020400 	.word	0x40020400
 800328c:	20000260 	.word	0x20000260
 8003290:	20000264 	.word	0x20000264
 8003294:	080156b8 	.word	0x080156b8
 8003298:	20000344 	.word	0x20000344
 800329c:	20000238 	.word	0x20000238
 80032a0:	20000244 	.word	0x20000244
 80032a4:	20000250 	.word	0x20000250
 80032a8:	20000c18 	.word	0x20000c18
 80032ac:	20000237 	.word	0x20000237
 80032b0:	0801565c 	.word	0x0801565c
 80032b4:	2000027c 	.word	0x2000027c
 80032b8:	20000378 	.word	0x20000378
 80032bc:	20000c38 	.word	0x20000c38
 80032c0:	20000c3c 	.word	0x20000c3c
 80032c4:	2000038c 	.word	0x2000038c
 80032c8:	20000388 	.word	0x20000388
 80032cc:	42960000 	.word	0x42960000
 80032d0:	080156f4 	.word	0x080156f4
 80032d4:	40021400 	.word	0x40021400
 80032d8:	40013c00 	.word	0x40013c00
 80032dc:	20000398 	.word	0x20000398
 80032e0:	2000039c 	.word	0x2000039c
				num_descending_samples++;
 80032e4:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <main+0x9dc>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	3301      	adds	r3, #1
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	4b71      	ldr	r3, [pc, #452]	; (80034b4 <main+0x9dc>)
 80032ee:	701a      	strb	r2, [r3, #0]
				if (num_descending_samples > APOGEE_NUM_DESCENDING_SAMPLES) {
 80032f0:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <main+0x9dc>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b1e      	cmp	r3, #30
 80032f6:	f240 80d4 	bls.w	80034a2 <main+0x9ca>
					state = FLIGHT_STATE_PRE_MAIN; // passed apogee
 80032fa:	4b6f      	ldr	r3, [pc, #444]	; (80034b8 <main+0x9e0>)
 80032fc:	2202      	movs	r2, #2
 80032fe:	701a      	strb	r2, [r3, #0]
					num_descending_samples = 0;
 8003300:	4b6c      	ldr	r3, [pc, #432]	; (80034b4 <main+0x9dc>)
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
					fres = sd_open_file(filename);
 8003306:	486d      	ldr	r0, [pc, #436]	; (80034bc <main+0x9e4>)
 8003308:	f000 fe42 	bl	8003f90 <sd_open_file>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	4b6b      	ldr	r3, [pc, #428]	; (80034c0 <main+0x9e8>)
 8003312:	701a      	strb	r2, [r3, #0]
					sd_write(&fil, (uint8_t *)"apogee\r\n");
 8003314:	496b      	ldr	r1, [pc, #428]	; (80034c4 <main+0x9ec>)
 8003316:	486c      	ldr	r0, [pc, #432]	; (80034c8 <main+0x9f0>)
 8003318:	f000 fe52 	bl	8003fc0 <sd_write>
					f_close(&fil);
 800331c:	486a      	ldr	r0, [pc, #424]	; (80034c8 <main+0x9f0>)
 800331e:	f00b fca0 	bl	800ec62 <f_close>
					HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, SET);
 8003322:	2201      	movs	r2, #1
 8003324:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003328:	4868      	ldr	r0, [pc, #416]	; (80034cc <main+0x9f4>)
 800332a:	f003 ff13 	bl	8007154 <HAL_GPIO_WritePin>
					__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 800332e:	4b68      	ldr	r3, [pc, #416]	; (80034d0 <main+0x9f8>)
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	4a67      	ldr	r2, [pc, #412]	; (80034d0 <main+0x9f8>)
 8003334:	f043 0310 	orr.w	r3, r3, #16
 8003338:	6113      	str	r3, [r2, #16]
			break;
 800333a:	e0b2      	b.n	80034a2 <main+0x9ca>

		case FLIGHT_STATE_PRE_MAIN: // post-apogee

			// check current state
			if (alt_current < MAIN_DEPLOY_ALTITUDE) {
 800333c:	4b65      	ldr	r3, [pc, #404]	; (80034d4 <main+0x9fc>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80034d8 <main+0xa00>
 8003346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	d52f      	bpl.n	80033b0 <main+0x8d8>
				num_descending_samples++;
 8003350:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <main+0x9dc>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b56      	ldr	r3, [pc, #344]	; (80034b4 <main+0x9dc>)
 800335a:	701a      	strb	r2, [r3, #0]

				if (num_descending_samples > MAIN_NUM_DESCENDING_SAMPLES) {
 800335c:	4b55      	ldr	r3, [pc, #340]	; (80034b4 <main+0x9dc>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b0a      	cmp	r3, #10
 8003362:	f240 80a0 	bls.w	80034a6 <main+0x9ce>
					state = FLIGHT_STATE_PRE_LANDED;
 8003366:	4b54      	ldr	r3, [pc, #336]	; (80034b8 <main+0x9e0>)
 8003368:	2203      	movs	r2, #3
 800336a:	701a      	strb	r2, [r3, #0]
					alt_prev = alt_current; // in next stage we need to know the previous altitude
 800336c:	4b59      	ldr	r3, [pc, #356]	; (80034d4 <main+0x9fc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a5a      	ldr	r2, [pc, #360]	; (80034dc <main+0xa04>)
 8003372:	6013      	str	r3, [r2, #0]
					num_descending_samples = 0;
 8003374:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <main+0x9dc>)
 8003376:	2200      	movs	r2, #0
 8003378:	701a      	strb	r2, [r3, #0]

					fres = sd_open_file(filename);
 800337a:	4850      	ldr	r0, [pc, #320]	; (80034bc <main+0x9e4>)
 800337c:	f000 fe08 	bl	8003f90 <sd_open_file>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <main+0x9e8>)
 8003386:	701a      	strb	r2, [r3, #0]
					sd_write(&fil, (uint8_t *)"main deployed\r\n");
 8003388:	4955      	ldr	r1, [pc, #340]	; (80034e0 <main+0xa08>)
 800338a:	484f      	ldr	r0, [pc, #316]	; (80034c8 <main+0x9f0>)
 800338c:	f000 fe18 	bl	8003fc0 <sd_write>
					f_close(&fil);
 8003390:	484d      	ldr	r0, [pc, #308]	; (80034c8 <main+0x9f0>)
 8003392:	f00b fc66 	bl	800ec62 <f_close>

					HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, SET);
 8003396:	2201      	movs	r2, #1
 8003398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800339c:	4851      	ldr	r0, [pc, #324]	; (80034e4 <main+0xa0c>)
 800339e:	f003 fed9 	bl	8007154 <HAL_GPIO_WritePin>

					// generate software interrupt to change TIM3 update rate
					__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 80033a2:	4b4b      	ldr	r3, [pc, #300]	; (80034d0 <main+0x9f8>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	4a4a      	ldr	r2, [pc, #296]	; (80034d0 <main+0x9f8>)
 80033a8:	f043 0310 	orr.w	r3, r3, #16
 80033ac:	6113      	str	r3, [r2, #16]
				}
			} else {
				num_descending_samples = 0;
			}

			break;
 80033ae:	e07a      	b.n	80034a6 <main+0x9ce>
				num_descending_samples = 0;
 80033b0:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <main+0x9dc>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
			break;
 80033b6:	e076      	b.n	80034a6 <main+0x9ce>

		case FLIGHT_STATE_PRE_LANDED:
			// post main deploy, want to transmit data fast to maximize possibility of getting good GPS coordinates

			// check current state
			alt_diff = alt_current - alt_prev;
 80033b8:	4b46      	ldr	r3, [pc, #280]	; (80034d4 <main+0x9fc>)
 80033ba:	ed93 7a00 	vldr	s14, [r3]
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <main+0xa04>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c8:	4b47      	ldr	r3, [pc, #284]	; (80034e8 <main+0xa10>)
 80033ca:	edc3 7a00 	vstr	s15, [r3]
			if (alt_diff < 0) {
 80033ce:	4b46      	ldr	r3, [pc, #280]	; (80034e8 <main+0xa10>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	d507      	bpl.n	80033ee <main+0x916>
				alt_diff *= -1; // absolute value
 80033de:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <main+0xa10>)
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	eef1 7a67 	vneg.f32	s15, s15
 80033e8:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <main+0xa10>)
 80033ea:	edc3 7a00 	vstr	s15, [r3]
			}

			if (alt_diff < LANDING_ALT_CHANGE_THRESHOLD) {
 80033ee:	4b3e      	ldr	r3, [pc, #248]	; (80034e8 <main+0xa10>)
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80033f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003400:	d52a      	bpl.n	8003458 <main+0x980>
				num_descending_samples++;
 8003402:	4b2c      	ldr	r3, [pc, #176]	; (80034b4 <main+0x9dc>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <main+0x9dc>)
 800340c:	701a      	strb	r2, [r3, #0]

				if (num_descending_samples > LANDING_NUM_DESCENDING_SAMPLES) {
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <main+0x9dc>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b14      	cmp	r3, #20
 8003414:	d923      	bls.n	800345e <main+0x986>
					state = FLIGHT_STATE_LANDED;
 8003416:	4b28      	ldr	r3, [pc, #160]	; (80034b8 <main+0x9e0>)
 8003418:	2204      	movs	r2, #4
 800341a:	701a      	strb	r2, [r3, #0]
					num_descending_samples = 0;
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <main+0x9dc>)
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]

					fres = sd_open_file(filename);
 8003422:	4826      	ldr	r0, [pc, #152]	; (80034bc <main+0x9e4>)
 8003424:	f000 fdb4 	bl	8003f90 <sd_open_file>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <main+0x9e8>)
 800342e:	701a      	strb	r2, [r3, #0]
					sd_write(&fil, (uint8_t *)"landed\r\n");
 8003430:	492e      	ldr	r1, [pc, #184]	; (80034ec <main+0xa14>)
 8003432:	4825      	ldr	r0, [pc, #148]	; (80034c8 <main+0x9f0>)
 8003434:	f000 fdc4 	bl	8003fc0 <sd_write>
					f_close(&fil);
 8003438:	4823      	ldr	r0, [pc, #140]	; (80034c8 <main+0x9f0>)
 800343a:	f00b fc12 	bl	800ec62 <f_close>

					HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, SET);
 800343e:	2201      	movs	r2, #1
 8003440:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003444:	4827      	ldr	r0, [pc, #156]	; (80034e4 <main+0xa0c>)
 8003446:	f003 fe85 	bl	8007154 <HAL_GPIO_WritePin>

					// generate software interrupt to change TIM3 update rate
					__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <main+0x9f8>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <main+0x9f8>)
 8003450:	f043 0310 	orr.w	r3, r3, #16
 8003454:	6113      	str	r3, [r2, #16]
 8003456:	e002      	b.n	800345e <main+0x986>
				}
			} else {
				num_descending_samples = 0;
 8003458:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <main+0x9dc>)
 800345a:	2200      	movs	r2, #0
 800345c:	701a      	strb	r2, [r3, #0]
			}

			alt_prev = alt_current;
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <main+0x9fc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <main+0xa04>)
 8003464:	6013      	str	r3, [r2, #0]
			break;
 8003466:	e01f      	b.n	80034a8 <main+0x9d0>

		case FLIGHT_STATE_LANDED: // landed
			__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <main+0x9f8>)
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <main+0x9f8>)
 800346e:	f043 0310 	orr.w	r3, r3, #16
 8003472:	6113      	str	r3, [r2, #16]

			while (1) {
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8003474:	2201      	movs	r2, #1
 8003476:	2102      	movs	r1, #2
 8003478:	481d      	ldr	r0, [pc, #116]	; (80034f0 <main+0xa18>)
 800347a:	f003 fe6b 	bl	8007154 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800347e:	2201      	movs	r2, #1
 8003480:	2104      	movs	r1, #4
 8003482:	481b      	ldr	r0, [pc, #108]	; (80034f0 <main+0xa18>)
 8003484:	f003 fe66 	bl	8007154 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8003488:	2201      	movs	r2, #1
 800348a:	2108      	movs	r1, #8
 800348c:	4818      	ldr	r0, [pc, #96]	; (80034f0 <main+0xa18>)
 800348e:	f003 fe61 	bl	8007154 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, SET);
 8003492:	2201      	movs	r2, #1
 8003494:	2108      	movs	r1, #8
 8003496:	4817      	ldr	r0, [pc, #92]	; (80034f4 <main+0xa1c>)
 8003498:	f003 fe5c 	bl	8007154 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 800349c:	e7ea      	b.n	8003474 <main+0x99c>

			break;

		default:

			break;
 800349e:	bf00      	nop
 80034a0:	e002      	b.n	80034a8 <main+0x9d0>
			break;
 80034a2:	bf00      	nop
 80034a4:	e000      	b.n	80034a8 <main+0x9d0>
			break;
 80034a6:	bf00      	nop
		}

		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80034a8:	2200      	movs	r2, #0
 80034aa:	2102      	movs	r1, #2
 80034ac:	4810      	ldr	r0, [pc, #64]	; (80034f0 <main+0xa18>)
 80034ae:	f003 fe51 	bl	8007154 <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80034b2:	e4dd      	b.n	8002e70 <main+0x398>
 80034b4:	2000039c 	.word	0x2000039c
 80034b8:	20000385 	.word	0x20000385
 80034bc:	20000378 	.word	0x20000378
 80034c0:	20000c38 	.word	0x20000c38
 80034c4:	08015700 	.word	0x08015700
 80034c8:	20000c3c 	.word	0x20000c3c
 80034cc:	40021400 	.word	0x40021400
 80034d0:	40013c00 	.word	0x40013c00
 80034d4:	2000038c 	.word	0x2000038c
 80034d8:	44bb8000 	.word	0x44bb8000
 80034dc:	20000390 	.word	0x20000390
 80034e0:	0801570c 	.word	0x0801570c
 80034e4:	40021800 	.word	0x40021800
 80034e8:	20000394 	.word	0x20000394
 80034ec:	0801571c 	.word	0x0801571c
 80034f0:	40020800 	.word	0x40020800
 80034f4:	40020000 	.word	0x40020000

080034f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b0a0      	sub	sp, #128	; 0x80
 80034fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003502:	2230      	movs	r2, #48	; 0x30
 8003504:	2100      	movs	r1, #0
 8003506:	4618      	mov	r0, r3
 8003508:	f00b ff50 	bl	800f3ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800350c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	605a      	str	r2, [r3, #4]
 8003516:	609a      	str	r2, [r3, #8]
 8003518:	60da      	str	r2, [r3, #12]
 800351a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	2230      	movs	r2, #48	; 0x30
 8003522:	2100      	movs	r1, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f00b ff41 	bl	800f3ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <SystemClock_Config+0xfc>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4a30      	ldr	r2, [pc, #192]	; (80035f4 <SystemClock_Config+0xfc>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	6413      	str	r3, [r2, #64]	; 0x40
 800353a:	4b2e      	ldr	r3, [pc, #184]	; (80035f4 <SystemClock_Config+0xfc>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <SystemClock_Config+0x100>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003552:	4a29      	ldr	r2, [pc, #164]	; (80035f8 <SystemClock_Config+0x100>)
 8003554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <SystemClock_Config+0x100>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003566:	2309      	movs	r3, #9
 8003568:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800356a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800356e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003570:	2301      	movs	r3, #1
 8003572:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003574:	2302      	movs	r3, #2
 8003576:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800357c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800357e:	2308      	movs	r3, #8
 8003580:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003582:	2348      	movs	r3, #72	; 0x48
 8003584:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003586:	2302      	movs	r3, #2
 8003588:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800358a:	2304      	movs	r3, #4
 800358c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800358e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fe64 	bl	8008260 <HAL_RCC_OscConfig>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800359e:	f000 fab9 	bl	8003b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035a2:	230f      	movs	r3, #15
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035a6:	2302      	movs	r3, #2
 80035a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035aa:	2300      	movs	r3, #0
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035b4:	2300      	movs	r3, #0
 80035b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035bc:	2102      	movs	r1, #2
 80035be:	4618      	mov	r0, r3
 80035c0:	f005 f8be 	bl	8008740 <HAL_RCC_ClockConfig>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80035ca:	f000 faa3 	bl	8003b14 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035ce:	2320      	movs	r3, #32
 80035d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80035d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035d8:	f107 030c 	add.w	r3, r7, #12
 80035dc:	4618      	mov	r0, r3
 80035de:	f005 faa9 	bl	8008b34 <HAL_RCCEx_PeriphCLKConfig>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80035e8:	f000 fa94 	bl	8003b14 <Error_Handler>
  }
}
 80035ec:	bf00      	nop
 80035ee:	3780      	adds	r7, #128	; 0x80
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40007000 	.word	0x40007000

080035fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	4603      	mov	r3, r0
 8003604:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == IN_Button_Pin) {
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d110      	bne.n	800362e <HAL_GPIO_EXTI_Callback+0x32>
		button_pressed = 1;
 800360c:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <HAL_GPIO_EXTI_Callback+0x148>)
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
		state++;
 8003612:	4b4d      	ldr	r3, [pc, #308]	; (8003748 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	b2db      	uxtb	r3, r3
 8003618:	3301      	adds	r3, #1
 800361a:	b2da      	uxtb	r2, r3
 800361c:	4b4a      	ldr	r3, [pc, #296]	; (8003748 <HAL_GPIO_EXTI_Callback+0x14c>)
 800361e:	701a      	strb	r2, [r3, #0]

		__HAL_GPIO_EXTI_GENERATE_SWIT(EXTI_SWIER_SWIER4);
 8003620:	4b4a      	ldr	r3, [pc, #296]	; (800374c <HAL_GPIO_EXTI_Callback+0x150>)
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	4a49      	ldr	r2, [pc, #292]	; (800374c <HAL_GPIO_EXTI_Callback+0x150>)
 8003626:	f043 0310 	orr.w	r3, r3, #16
 800362a:	6113      	str	r3, [r2, #16]
			HAL_UART_Transmit(&huart8, "10hz\r\n", 6, HAL_MAX_DELAY);
			state = 0;
			break;
		}
	}
}
 800362c:	e086      	b.n	800373c <HAL_GPIO_EXTI_Callback+0x140>
	else if (GPIO_Pin == EXTI_SWIER_SWIER4) { // software interrupt to change timer settings
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	2b10      	cmp	r3, #16
 8003632:	f040 8082 	bne.w	800373a <HAL_GPIO_EXTI_Callback+0x13e>
		switch (state) {
 8003636:	4b44      	ldr	r3, [pc, #272]	; (8003748 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b04      	cmp	r3, #4
 800363e:	d867      	bhi.n	8003710 <HAL_GPIO_EXTI_Callback+0x114>
 8003640:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003646:	bf00      	nop
 8003648:	0800365d 	.word	0x0800365d
 800364c:	08003681 	.word	0x08003681
 8003650:	080036a5 	.word	0x080036a5
 8003654:	080036c9 	.word	0x080036c9
 8003658:	080036ed 	.word	0x080036ed
			TIM3->ARR = 1000-1;
 800365c:	4b3c      	ldr	r3, [pc, #240]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 800365e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 8003664:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	4a39      	ldr	r2, [pc, #228]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6153      	str	r3, [r2, #20]
			HAL_UART_Transmit(&huart8, "10hz\r\n", 6, HAL_MAX_DELAY);
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
 8003674:	2206      	movs	r2, #6
 8003676:	4937      	ldr	r1, [pc, #220]	; (8003754 <HAL_GPIO_EXTI_Callback+0x158>)
 8003678:	4837      	ldr	r0, [pc, #220]	; (8003758 <HAL_GPIO_EXTI_Callback+0x15c>)
 800367a:	f007 fb2c 	bl	800acd6 <HAL_UART_Transmit>
			break;
 800367e:	e05d      	b.n	800373c <HAL_GPIO_EXTI_Callback+0x140>
			TIM3->ARR = 5000-1;
 8003680:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 8003682:	f241 3287 	movw	r2, #4999	; 0x1387
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 8003688:	4b31      	ldr	r3, [pc, #196]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	4a30      	ldr	r2, [pc, #192]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6153      	str	r3, [r2, #20]
			HAL_UART_Transmit(&huart8, "02hz\r\n", 6, HAL_MAX_DELAY);
 8003694:	f04f 33ff 	mov.w	r3, #4294967295
 8003698:	2206      	movs	r2, #6
 800369a:	4930      	ldr	r1, [pc, #192]	; (800375c <HAL_GPIO_EXTI_Callback+0x160>)
 800369c:	482e      	ldr	r0, [pc, #184]	; (8003758 <HAL_GPIO_EXTI_Callback+0x15c>)
 800369e:	f007 fb1a 	bl	800acd6 <HAL_UART_Transmit>
			break;
 80036a2:	e04b      	b.n	800373c <HAL_GPIO_EXTI_Callback+0x140>
			TIM3->ARR = 2000-1;
 80036a4:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 80036a6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 80036ac:	4b28      	ldr	r3, [pc, #160]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	4a27      	ldr	r2, [pc, #156]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6153      	str	r3, [r2, #20]
			HAL_UART_Transmit(&huart8, "05hz\r\n", 6, HAL_MAX_DELAY);
 80036b8:	f04f 33ff 	mov.w	r3, #4294967295
 80036bc:	2206      	movs	r2, #6
 80036be:	4928      	ldr	r1, [pc, #160]	; (8003760 <HAL_GPIO_EXTI_Callback+0x164>)
 80036c0:	4825      	ldr	r0, [pc, #148]	; (8003758 <HAL_GPIO_EXTI_Callback+0x15c>)
 80036c2:	f007 fb08 	bl	800acd6 <HAL_UART_Transmit>
			break;
 80036c6:	e039      	b.n	800373c <HAL_GPIO_EXTI_Callback+0x140>
			TIM3->ARR = 1000-1;
 80036c8:	4b21      	ldr	r3, [pc, #132]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 80036ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 80036d0:	4b1f      	ldr	r3, [pc, #124]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	4a1e      	ldr	r2, [pc, #120]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6153      	str	r3, [r2, #20]
			HAL_UART_Transmit(&huart8, "10hz\r\n", 6, HAL_MAX_DELAY);
 80036dc:	f04f 33ff 	mov.w	r3, #4294967295
 80036e0:	2206      	movs	r2, #6
 80036e2:	491c      	ldr	r1, [pc, #112]	; (8003754 <HAL_GPIO_EXTI_Callback+0x158>)
 80036e4:	481c      	ldr	r0, [pc, #112]	; (8003758 <HAL_GPIO_EXTI_Callback+0x15c>)
 80036e6:	f007 faf6 	bl	800acd6 <HAL_UART_Transmit>
			break;
 80036ea:	e027      	b.n	800373c <HAL_GPIO_EXTI_Callback+0x140>
			TIM3->ARR = 20000-1;
 80036ec:	4b18      	ldr	r3, [pc, #96]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 80036ee:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 80036f4:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	4a15      	ldr	r2, [pc, #84]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 80036fa:	f043 0301 	orr.w	r3, r3, #1
 80036fe:	6153      	str	r3, [r2, #20]
			HAL_UART_Transmit(&huart8, "01hz\r\n", 6, HAL_MAX_DELAY);
 8003700:	f04f 33ff 	mov.w	r3, #4294967295
 8003704:	2206      	movs	r2, #6
 8003706:	4917      	ldr	r1, [pc, #92]	; (8003764 <HAL_GPIO_EXTI_Callback+0x168>)
 8003708:	4813      	ldr	r0, [pc, #76]	; (8003758 <HAL_GPIO_EXTI_Callback+0x15c>)
 800370a:	f007 fae4 	bl	800acd6 <HAL_UART_Transmit>
			break;
 800370e:	e015      	b.n	800373c <HAL_GPIO_EXTI_Callback+0x140>
			TIM3->ARR = 1000-1;
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 8003712:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c
			TIM3->EGR |= TIM_EGR_UG;
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	4a0c      	ldr	r2, [pc, #48]	; (8003750 <HAL_GPIO_EXTI_Callback+0x154>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6153      	str	r3, [r2, #20]
			HAL_UART_Transmit(&huart8, "10hz\r\n", 6, HAL_MAX_DELAY);
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	2206      	movs	r2, #6
 800372a:	490a      	ldr	r1, [pc, #40]	; (8003754 <HAL_GPIO_EXTI_Callback+0x158>)
 800372c:	480a      	ldr	r0, [pc, #40]	; (8003758 <HAL_GPIO_EXTI_Callback+0x15c>)
 800372e:	f007 fad2 	bl	800acd6 <HAL_UART_Transmit>
			state = 0;
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_GPIO_EXTI_Callback+0x14c>)
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
			break;
 8003738:	e000      	b.n	800373c <HAL_GPIO_EXTI_Callback+0x140>
	}
 800373a:	bf00      	nop
}
 800373c:	bf00      	nop
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000236 	.word	0x20000236
 8003748:	20000385 	.word	0x20000385
 800374c:	40013c00 	.word	0x40013c00
 8003750:	40000400 	.word	0x40000400
 8003754:	080156e0 	.word	0x080156e0
 8003758:	20001544 	.word	0x20001544
 800375c:	08015728 	.word	0x08015728
 8003760:	08015730 	.word	0x08015730
 8003764:	08015738 	.word	0x08015738

08003768 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	if (huart == &huart6) { // gps
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <HAL_UART_RxCpltCallback+0x60>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d107      	bne.n	8003788 <HAL_UART_RxCpltCallback+0x20>

		// received data from GPS into buffer.
		// insert null termination and parse buffer (total buffer length is GPS_RX_DMA_BUF_LEN + 1)
		gps_rx_buf[GPS_RX_DMA_BUF_LEN] = '\0';
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_UART_RxCpltCallback+0x64>)
 800377a:	2200      	movs	r2, #0
 800377c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
		gps_dma_ready = 1;
 8003780:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_UART_RxCpltCallback+0x68>)
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
			arming_recovery();
		}

		// main loop will clear the buffer and start new DMA request
	}
}
 8003786:	e01b      	b.n	80037c0 <HAL_UART_RxCpltCallback+0x58>
	else if (huart == &huart3) { // xtend radio
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <HAL_UART_RxCpltCallback+0x6c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d117      	bne.n	80037c0 <HAL_UART_RxCpltCallback+0x58>
		xtend_rx_dma_ready = 1;
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <HAL_UART_RxCpltCallback+0x70>)
 8003792:	2201      	movs	r2, #1
 8003794:	701a      	strb	r2, [r3, #0]
		radio_command cmd = xtend_parse_dma_command();
 8003796:	f000 f9cb 	bl	8003b30 <xtend_parse_dma_command>
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
		if (cmd == LAUNCH) {
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d102      	bne.n	80037aa <HAL_UART_RxCpltCallback+0x42>
			rocket_launch();
 80037a4:	f000 fa8a 	bl	8003cbc <rocket_launch>
}
 80037a8:	e00a      	b.n	80037c0 <HAL_UART_RxCpltCallback+0x58>
		else if (cmd == ARM_PROP) {
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d102      	bne.n	80037b6 <HAL_UART_RxCpltCallback+0x4e>
			arming_propulsion();
 80037b0:	f000 fa9e 	bl	8003cf0 <arming_propulsion>
}
 80037b4:	e004      	b.n	80037c0 <HAL_UART_RxCpltCallback+0x58>
		else if (cmd == ARM_RCOV) {
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d101      	bne.n	80037c0 <HAL_UART_RxCpltCallback+0x58>
			arming_recovery();
 80037bc:	f000 faa4 	bl	8003d08 <arming_recovery>
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20001584 	.word	0x20001584
 80037cc:	20000a58 	.word	0x20000a58
 80037d0:	20000254 	.word	0x20000254
 80037d4:	200014a4 	.word	0x200014a4
 80037d8:	2000039d 	.word	0x2000039d

080037dc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
	if (huart == &huart3) {
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0f      	ldr	r2, [pc, #60]	; (8003824 <HAL_UART_TxCpltCallback+0x48>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d114      	bne.n	8003816 <HAL_UART_TxCpltCallback+0x3a>
		// don't care who started it, transmit is complete
		xtend_tx_start_av = 0;
 80037ec:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_UART_TxCpltCallback+0x4c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
		xtend_tx_start_pr = 0;
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <HAL_UART_TxCpltCallback+0x50>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]

		num_radio_transmissions++;
 80037f8:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <HAL_UART_TxCpltCallback+0x54>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_UART_TxCpltCallback+0x54>)
 8003804:	701a      	strb	r2, [r3, #0]
		if (num_radio_transmissions == 10) {
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_UART_TxCpltCallback+0x54>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b0a      	cmp	r3, #10
 800380e:	d102      	bne.n	8003816 <HAL_UART_TxCpltCallback+0x3a>
			num_radio_transmissions = 0;
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <HAL_UART_TxCpltCallback+0x54>)
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	200014a4 	.word	0x200014a4
 8003828:	2000039e 	.word	0x2000039e
 800382c:	2000039f 	.word	0x2000039f
 8003830:	20000386 	.word	0x20000386

08003834 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a4f      	ldr	r2, [pc, #316]	; (800397c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8003840:	4293      	cmp	r3, r2
 8003842:	f040 808f 	bne.w	8003964 <HAL_TIM_PeriodElapsedCallback+0x130>
		HAL_GPIO_TogglePin(LEDF_GPIO_Port, LEDF_Pin);
 8003846:	2108      	movs	r1, #8
 8003848:	484d      	ldr	r0, [pc, #308]	; (8003980 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800384a:	f003 fc9c 	bl	8007186 <HAL_GPIO_TogglePin>
//		HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, SET);

		switch (state) {
 800384e:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d002      	beq.n	800385e <HAL_TIM_PeriodElapsedCallback+0x2a>
 8003858:	2b01      	cmp	r3, #1
 800385a:	d03c      	beq.n	80038d6 <HAL_TIM_PeriodElapsedCallback+0xa2>
 800385c:	e073      	b.n	8003946 <HAL_TIM_PeriodElapsedCallback+0x112>
		case FLIGHT_STATE_PAD:

			// send av
			if (num_radio_transmissions % 5 == 0 && xtend_tx_start_pr == 0 && xtend_tx_start_av == 0) {
 800385e:	4b4a      	ldr	r3, [pc, #296]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b49      	ldr	r3, [pc, #292]	; (800398c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003866:	fba3 1302 	umull	r1, r3, r3, r2
 800386a:	0899      	lsrs	r1, r3, #2
 800386c:	460b      	mov	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d116      	bne.n	80038a8 <HAL_TIM_PeriodElapsedCallback+0x74>
 800387a:	4b45      	ldr	r3, [pc, #276]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <HAL_TIM_PeriodElapsedCallback+0x74>
 8003884:	4b43      	ldr	r3, [pc, #268]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10c      	bne.n	80038a8 <HAL_TIM_PeriodElapsedCallback+0x74>
				radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 800388e:	4842      	ldr	r0, [pc, #264]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003890:	f7fc fcb8 	bl	8000204 <strlen>
 8003894:	4603      	mov	r3, r0
 8003896:	b29b      	uxth	r3, r3
 8003898:	4619      	mov	r1, r3
 800389a:	483f      	ldr	r0, [pc, #252]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800389c:	f7ff f8d0 	bl	8002a40 <radio_tx>
				xtend_tx_start_av = 1;
 80038a0:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
			else if (xtend_tx_start_av == 0 && xtend_tx_start_pr == 0) {
				radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
				xtend_tx_start_pr = 1;
			}

			break;
 80038a6:	e05f      	b.n	8003968 <HAL_TIM_PeriodElapsedCallback+0x134>
			else if (xtend_tx_start_av == 0 && xtend_tx_start_pr == 0) {
 80038a8:	4b3a      	ldr	r3, [pc, #232]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d15a      	bne.n	8003968 <HAL_TIM_PeriodElapsedCallback+0x134>
 80038b2:	4b37      	ldr	r3, [pc, #220]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d155      	bne.n	8003968 <HAL_TIM_PeriodElapsedCallback+0x134>
				radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 80038bc:	4837      	ldr	r0, [pc, #220]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80038be:	f7fc fca1 	bl	8000204 <strlen>
 80038c2:	4603      	mov	r3, r0
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	4619      	mov	r1, r3
 80038c8:	4834      	ldr	r0, [pc, #208]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80038ca:	f7ff f8b9 	bl	8002a40 <radio_tx>
				xtend_tx_start_pr = 1;
 80038ce:	4b30      	ldr	r3, [pc, #192]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
			break;
 80038d4:	e048      	b.n	8003968 <HAL_TIM_PeriodElapsedCallback+0x134>

		case FLIGHT_STATE_PRE_APOGEE:
			// transmit avionics and prop at equal priority
			if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 0) {
 80038d6:	4b2e      	ldr	r3, [pc, #184]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d116      	bne.n	800390e <HAL_TIM_PeriodElapsedCallback+0xda>
 80038e0:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d111      	bne.n	800390e <HAL_TIM_PeriodElapsedCallback+0xda>
 80038ea:	4b27      	ldr	r3, [pc, #156]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d109      	bne.n	800390e <HAL_TIM_PeriodElapsedCallback+0xda>
				radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 80038fa:	4827      	ldr	r0, [pc, #156]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80038fc:	f7fc fc82 	bl	8000204 <strlen>
 8003900:	4603      	mov	r3, r0
 8003902:	b29b      	uxth	r3, r3
 8003904:	4619      	mov	r1, r3
 8003906:	4824      	ldr	r0, [pc, #144]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003908:	f7ff f89a 	bl	8002a40 <radio_tx>
			}
			else if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 1) {
				radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
			}
			break;
 800390c:	e02e      	b.n	800396c <HAL_TIM_PeriodElapsedCallback+0x138>
			else if (xtend_tx_start_pr == 0 && xtend_tx_start_av == 0 && num_radio_transmissions % 2 == 1) {
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d129      	bne.n	800396c <HAL_TIM_PeriodElapsedCallback+0x138>
 8003918:	4b1e      	ldr	r3, [pc, #120]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d124      	bne.n	800396c <HAL_TIM_PeriodElapsedCallback+0x138>
 8003922:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d11c      	bne.n	800396c <HAL_TIM_PeriodElapsedCallback+0x138>
				radio_tx(msg_buffer_pr, strlen((char *)msg_buffer_pr));
 8003932:	481a      	ldr	r0, [pc, #104]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003934:	f7fc fc66 	bl	8000204 <strlen>
 8003938:	4603      	mov	r3, r0
 800393a:	b29b      	uxth	r3, r3
 800393c:	4619      	mov	r1, r3
 800393e:	4817      	ldr	r0, [pc, #92]	; (800399c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003940:	f7ff f87e 	bl	8002a40 <radio_tx>
			break;
 8003944:	e012      	b.n	800396c <HAL_TIM_PeriodElapsedCallback+0x138>

		default:
//		case FLIGHT_STATE_PRE_MAIN:
			if (xtend_tx_start_av == 0) {
 8003946:	4b13      	ldr	r3, [pc, #76]	; (8003994 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10f      	bne.n	8003970 <HAL_TIM_PeriodElapsedCallback+0x13c>
				radio_tx(msg_buffer_av, strlen((char *)msg_buffer_av));
 8003950:	4811      	ldr	r0, [pc, #68]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003952:	f7fc fc57 	bl	8000204 <strlen>
 8003956:	4603      	mov	r3, r0
 8003958:	b29b      	uxth	r3, r3
 800395a:	4619      	mov	r1, r3
 800395c:	480e      	ldr	r0, [pc, #56]	; (8003998 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800395e:	f7ff f86f 	bl	8002a40 <radio_tx>
			}
			break;
 8003962:	e005      	b.n	8003970 <HAL_TIM_PeriodElapsedCallback+0x13c>
//			}
//			break;
		}

//		HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, RESET);
	}
 8003964:	bf00      	nop
 8003966:	e004      	b.n	8003972 <HAL_TIM_PeriodElapsedCallback+0x13e>
			break;
 8003968:	bf00      	nop
 800396a:	e002      	b.n	8003972 <HAL_TIM_PeriodElapsedCallback+0x13e>
			break;
 800396c:	bf00      	nop
 800396e:	e000      	b.n	8003972 <HAL_TIM_PeriodElapsedCallback+0x13e>
			break;
 8003970:	bf00      	nop
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20001364 	.word	0x20001364
 8003980:	40020000 	.word	0x40020000
 8003984:	20000385 	.word	0x20000385
 8003988:	20000386 	.word	0x20000386
 800398c:	cccccccd 	.word	0xcccccccd
 8003990:	2000039f 	.word	0x2000039f
 8003994:	2000039e 	.word	0x2000039e
 8003998:	2000027c 	.word	0x2000027c
 800399c:	20000344 	.word	0x20000344

080039a0 <getAltitude>:

float getAltitude(void) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
	get_pressure(dev_ctx_lps, &pressure_hPa);
 80039a6:	4a22      	ldr	r2, [pc, #136]	; (8003a30 <getAltitude+0x90>)
 80039a8:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <getAltitude+0x94>)
 80039aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80039ac:	f7fe fb8a 	bl	80020c4 <get_pressure>
	uint32_t altitude = 145442.1609 * (1.0 - pow(pressure_hPa/local_pressure, 0.190266436));
 80039b0:	4b20      	ldr	r3, [pc, #128]	; (8003a34 <getAltitude+0x94>)
 80039b2:	ed93 7a00 	vldr	s14, [r3]
 80039b6:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <getAltitude+0x98>)
 80039b8:	edd3 7a00 	vldr	s15, [r3]
 80039bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039c0:	ee16 0a90 	vmov	r0, s13
 80039c4:	f7fc fde0 	bl	8000588 <__aeabi_f2d>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8003a20 <getAltitude+0x80>
 80039d0:	ec43 2b10 	vmov	d0, r2, r3
 80039d4:	f010 fe26 	bl	8014624 <pow>
 80039d8:	ec53 2b10 	vmov	r2, r3, d0
 80039dc:	f04f 0000 	mov.w	r0, #0
 80039e0:	4916      	ldr	r1, [pc, #88]	; (8003a3c <getAltitude+0x9c>)
 80039e2:	f7fc fc71 	bl	80002c8 <__aeabi_dsub>
 80039e6:	4602      	mov	r2, r0
 80039e8:	460b      	mov	r3, r1
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	a30e      	add	r3, pc, #56	; (adr r3, 8003a28 <getAltitude+0x88>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f7fc fe20 	bl	8000638 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	f7fd f8f2 	bl	8000be8 <__aeabi_d2uiz>
 8003a04:	4603      	mov	r3, r0
 8003a06:	607b      	str	r3, [r7, #4]
	return altitude;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8003a12:	eeb0 0a67 	vmov.f32	s0, s15
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	f3af 8000 	nop.w
 8003a20:	8c12bfc3 	.word	0x8c12bfc3
 8003a24:	3fc85aa6 	.word	0x3fc85aa6
 8003a28:	4985f06f 	.word	0x4985f06f
 8003a2c:	4101c111 	.word	0x4101c111
 8003a30:	20000c2c 	.word	0x20000c2c
 8003a34:	20000250 	.word	0x20000250
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	3ff00000 	.word	0x3ff00000

08003a40 <get_continuity>:

	W25qxx_WriteBlock(msg_buffer, block_address, block_offset, strlen((const char *)msg_buffer));
	flash_write_address += strlen((const char *)msg_buffer);
}

uint8_t get_continuity(void) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
	// read pins
	GPIO_PinState drogue = HAL_GPIO_ReadPin(Rcov_Cont_Drogue_GPIO_Port, Rcov_Cont_Drogue_Pin);
 8003a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a4a:	4817      	ldr	r0, [pc, #92]	; (8003aa8 <get_continuity+0x68>)
 8003a4c:	f003 fb6a 	bl	8007124 <HAL_GPIO_ReadPin>
 8003a50:	4603      	mov	r3, r0
 8003a52:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState main = HAL_GPIO_ReadPin(Rcov_Cont_Main_GPIO_Port, Rcov_Cont_Main_Pin);
 8003a54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a58:	4813      	ldr	r0, [pc, #76]	; (8003aa8 <get_continuity+0x68>)
 8003a5a:	f003 fb63 	bl	8007124 <HAL_GPIO_ReadPin>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71bb      	strb	r3, [r7, #6]
	GPIO_PinState prop_1 = HAL_GPIO_ReadPin(Prop_Cont_1_GPIO_Port, Prop_Cont_1_Pin);
 8003a62:	2101      	movs	r1, #1
 8003a64:	4810      	ldr	r0, [pc, #64]	; (8003aa8 <get_continuity+0x68>)
 8003a66:	f003 fb5d 	bl	8007124 <HAL_GPIO_ReadPin>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	717b      	strb	r3, [r7, #5]
	GPIO_PinState prop_2 = HAL_GPIO_ReadPin(Prop_Cont_2_GPIO_Port, Prop_Cont_2_Pin);
 8003a6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a72:	480e      	ldr	r0, [pc, #56]	; (8003aac <get_continuity+0x6c>)
 8003a74:	f003 fb56 	bl	8007124 <HAL_GPIO_ReadPin>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	713b      	strb	r3, [r7, #4]

	// assign one-hot encoded result (apparently you can multiply enums?)
	uint8_t continuity = (drogue) + (main * 2) + (prop_1 * 4) + (prop_2 * 8);
 8003a7c:	793b      	ldrb	r3, [r7, #4]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	797b      	ldrb	r3, [r7, #5]
 8003a84:	4413      	add	r3, r2
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	79bb      	ldrb	r3, [r7, #6]
 8003a8e:	4413      	add	r3, r2
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	b2da      	uxtb	r2, r3
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	4413      	add	r3, r2
 8003a9a:	70fb      	strb	r3, [r7, #3]
	return continuity;
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40021800 	.word	0x40021800
 8003aac:	40021400 	.word	0x40021400

08003ab0 <prop_poll_pressure_transducer>:

float prop_poll_pressure_transducer(void) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
	// reading adc
	HAL_ADC_Start(&hadc1);
 8003ab6:	4816      	ldr	r0, [pc, #88]	; (8003b10 <prop_poll_pressure_transducer+0x60>)
 8003ab8:	f002 f92c 	bl	8005d14 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8003abc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ac0:	4813      	ldr	r0, [pc, #76]	; (8003b10 <prop_poll_pressure_transducer+0x60>)
 8003ac2:	f002 fa20 	bl	8005f06 <HAL_ADC_PollForConversion>
	uint32_t pressure_sensor_raw = HAL_ADC_GetValue(&hadc1);
 8003ac6:	4812      	ldr	r0, [pc, #72]	; (8003b10 <prop_poll_pressure_transducer+0x60>)
 8003ac8:	f002 faa1 	bl	800600e <HAL_ADC_GetValue>
 8003acc:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 8003ace:	4810      	ldr	r0, [pc, #64]	; (8003b10 <prop_poll_pressure_transducer+0x60>)
 8003ad0:	f002 f9e6 	bl	8005ea0 <HAL_ADC_Stop>

	float voltage = (float) (pressure_sensor_raw / 4095.0); // assuming 12 bits
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fc fd35 	bl	8000544 <__aeabi_ui2d>
 8003ada:	a30b      	add	r3, pc, #44	; (adr r3, 8003b08 <prop_poll_pressure_transducer+0x58>)
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	f7fc fed4 	bl	800088c <__aeabi_ddiv>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	f7fd f89c 	bl	8000c28 <__aeabi_d2f>
 8003af0:	4603      	mov	r3, r0
 8003af2:	603b      	str	r3, [r7, #0]

	// convert using transfer function
	// TODO

	return voltage;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	ee07 3a90 	vmov	s15, r3
}
 8003afa:	eeb0 0a67 	vmov.f32	s0, s15
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	f3af 8000 	nop.w
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	40affe00 	.word	0x40affe00
 8003b10:	20000558 	.word	0x20000558

08003b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LEDF_GPIO_Port, LEDF_Pin, GPIO_PIN_SET);
 8003b18:	2201      	movs	r2, #1
 8003b1a:	2108      	movs	r1, #8
 8003b1c:	4803      	ldr	r0, [pc, #12]	; (8003b2c <Error_Handler+0x18>)
 8003b1e:	f003 fb19 	bl	8007154 <HAL_GPIO_WritePin>
	buzz_failure();
 8003b22:	f7fe ffcf 	bl	8002ac4 <buzz_failure>
	__BKPT();
 8003b26:	be00      	bkpt	0x0000
  /* USER CODE END Error_Handler_Debug */
}
 8003b28:	bf00      	nop
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40020000 	.word	0x40020000

08003b30 <xtend_parse_dma_command>:

extern UART_HandleTypeDef huart8;

extern volatile char xtend_rx_buf[10]; // dma buffer

radio_command xtend_parse_dma_command(void) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0

	if (strcmp(xtend_rx_buf, "lnch") == 0) { // launch command
 8003b34:	4929      	ldr	r1, [pc, #164]	; (8003bdc <xtend_parse_dma_command+0xac>)
 8003b36:	482a      	ldr	r0, [pc, #168]	; (8003be0 <xtend_parse_dma_command+0xb0>)
 8003b38:	f7fc fb5a 	bl	80001f0 <strcmp>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <xtend_parse_dma_command+0x16>
		return LAUNCH;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e047      	b.n	8003bd6 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "arpr") == 0) { // arm propulsion
 8003b46:	4927      	ldr	r1, [pc, #156]	; (8003be4 <xtend_parse_dma_command+0xb4>)
 8003b48:	4825      	ldr	r0, [pc, #148]	; (8003be0 <xtend_parse_dma_command+0xb0>)
 8003b4a:	f7fc fb51 	bl	80001f0 <strcmp>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <xtend_parse_dma_command+0x28>
		return ARM_PROP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	e03e      	b.n	8003bd6 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "arrc") == 0) { // arm recovery
 8003b58:	4923      	ldr	r1, [pc, #140]	; (8003be8 <xtend_parse_dma_command+0xb8>)
 8003b5a:	4821      	ldr	r0, [pc, #132]	; (8003be0 <xtend_parse_dma_command+0xb0>)
 8003b5c:	f7fc fb48 	bl	80001f0 <strcmp>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <xtend_parse_dma_command+0x3a>
		return ARM_RCOV;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e035      	b.n	8003bd6 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "dapr") == 0) { // disarm propulsion
 8003b6a:	4920      	ldr	r1, [pc, #128]	; (8003bec <xtend_parse_dma_command+0xbc>)
 8003b6c:	481c      	ldr	r0, [pc, #112]	; (8003be0 <xtend_parse_dma_command+0xb0>)
 8003b6e:	f7fc fb3f 	bl	80001f0 <strcmp>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <xtend_parse_dma_command+0x4c>
		return DISARM_PROP;
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e02c      	b.n	8003bd6 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "darc") == 0) {
 8003b7c:	491c      	ldr	r1, [pc, #112]	; (8003bf0 <xtend_parse_dma_command+0xc0>)
 8003b7e:	4818      	ldr	r0, [pc, #96]	; (8003be0 <xtend_parse_dma_command+0xb0>)
 8003b80:	f7fc fb36 	bl	80001f0 <strcmp>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <xtend_parse_dma_command+0x5e>
		return DISARM_RCOV;
 8003b8a:	2305      	movs	r3, #5
 8003b8c:	e023      	b.n	8003bd6 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vron") == 0) { // vr power on
 8003b8e:	4919      	ldr	r1, [pc, #100]	; (8003bf4 <xtend_parse_dma_command+0xc4>)
 8003b90:	4813      	ldr	r0, [pc, #76]	; (8003be0 <xtend_parse_dma_command+0xb0>)
 8003b92:	f7fc fb2d 	bl	80001f0 <strcmp>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <xtend_parse_dma_command+0x70>
		return VR_POWER_ON;
 8003b9c:	2306      	movs	r3, #6
 8003b9e:	e01a      	b.n	8003bd6 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vrs1") == 0) { // s1 = start
 8003ba0:	4915      	ldr	r1, [pc, #84]	; (8003bf8 <xtend_parse_dma_command+0xc8>)
 8003ba2:	480f      	ldr	r0, [pc, #60]	; (8003be0 <xtend_parse_dma_command+0xb0>)
 8003ba4:	f7fc fb24 	bl	80001f0 <strcmp>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <xtend_parse_dma_command+0x82>
		return VR_REC_START;
 8003bae:	2307      	movs	r3, #7
 8003bb0:	e011      	b.n	8003bd6 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vrs2") == 0) { // s2 = stop
 8003bb2:	4912      	ldr	r1, [pc, #72]	; (8003bfc <xtend_parse_dma_command+0xcc>)
 8003bb4:	480a      	ldr	r0, [pc, #40]	; (8003be0 <xtend_parse_dma_command+0xb0>)
 8003bb6:	f7fc fb1b 	bl	80001f0 <strcmp>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <xtend_parse_dma_command+0x94>
		return VR_REC_STOP;
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	e008      	b.n	8003bd6 <xtend_parse_dma_command+0xa6>
	}
	else if (strcmp(xtend_rx_buf, "vrof") == 0) { // vr power off
 8003bc4:	490e      	ldr	r1, [pc, #56]	; (8003c00 <xtend_parse_dma_command+0xd0>)
 8003bc6:	4806      	ldr	r0, [pc, #24]	; (8003be0 <xtend_parse_dma_command+0xb0>)
 8003bc8:	f7fc fb12 	bl	80001f0 <strcmp>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <xtend_parse_dma_command+0xa6>
		return VR_POWER_OFF;
 8003bd2:	2309      	movs	r3, #9
 8003bd4:	e7ff      	b.n	8003bd6 <xtend_parse_dma_command+0xa6>
	}

	// all other commands are invalid, ignore.
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	08015740 	.word	0x08015740
 8003be0:	200006b8 	.word	0x200006b8
 8003be4:	08015748 	.word	0x08015748
 8003be8:	08015750 	.word	0x08015750
 8003bec:	08015758 	.word	0x08015758
 8003bf0:	08015760 	.word	0x08015760
 8003bf4:	08015768 	.word	0x08015768
 8003bf8:	08015770 	.word	0x08015770
 8003bfc:	08015778 	.word	0x08015778
 8003c00:	08015780 	.word	0x08015780

08003c04 <execute_parsed_command>:

void execute_parsed_command(radio_command cmd) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
	// TODO: decide whether we want to send an ack back to ground station, maybe as special event message
	switch (cmd) {
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d844      	bhi.n	8003ca0 <execute_parsed_command+0x9c>
 8003c16:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <execute_parsed_command+0x18>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003c41 	.word	0x08003c41
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c7d 	.word	0x08003c7d
 8003c2c:	08003c83 	.word	0x08003c83
 8003c30:	08003c89 	.word	0x08003c89
 8003c34:	08003c8f 	.word	0x08003c8f
 8003c38:	08003c95 	.word	0x08003c95
 8003c3c:	08003c9b 	.word	0x08003c9b
	case LAUNCH:
		rocket_launch();
 8003c40:	f000 f83c 	bl	8003cbc <rocket_launch>
		HAL_UART_Transmit(&huart8, "launch\r\n", 8, HAL_MAX_DELAY);
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	2208      	movs	r2, #8
 8003c4a:	4918      	ldr	r1, [pc, #96]	; (8003cac <execute_parsed_command+0xa8>)
 8003c4c:	4818      	ldr	r0, [pc, #96]	; (8003cb0 <execute_parsed_command+0xac>)
 8003c4e:	f007 f842 	bl	800acd6 <HAL_UART_Transmit>
		break;
 8003c52:	e026      	b.n	8003ca2 <execute_parsed_command+0x9e>

	case ARM_PROP:
		arming_propulsion();
 8003c54:	f000 f84c 	bl	8003cf0 <arming_propulsion>
		HAL_UART_Transmit(&huart8, "arm pr\r\n", 8, HAL_MAX_DELAY);
 8003c58:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	4915      	ldr	r1, [pc, #84]	; (8003cb4 <execute_parsed_command+0xb0>)
 8003c60:	4813      	ldr	r0, [pc, #76]	; (8003cb0 <execute_parsed_command+0xac>)
 8003c62:	f007 f838 	bl	800acd6 <HAL_UART_Transmit>
		break;
 8003c66:	e01c      	b.n	8003ca2 <execute_parsed_command+0x9e>

	case ARM_RCOV:
		arming_recovery();
 8003c68:	f000 f84e 	bl	8003d08 <arming_recovery>
		HAL_UART_Transmit(&huart8, "arm rc\r\n", 8, HAL_MAX_DELAY);
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c70:	2208      	movs	r2, #8
 8003c72:	4911      	ldr	r1, [pc, #68]	; (8003cb8 <execute_parsed_command+0xb4>)
 8003c74:	480e      	ldr	r0, [pc, #56]	; (8003cb0 <execute_parsed_command+0xac>)
 8003c76:	f007 f82e 	bl	800acd6 <HAL_UART_Transmit>
		break;
 8003c7a:	e012      	b.n	8003ca2 <execute_parsed_command+0x9e>

	case DISARM_PROP:
		disarm_propulsion();
 8003c7c:	f000 f850 	bl	8003d20 <disarm_propulsion>
		break;
 8003c80:	e00f      	b.n	8003ca2 <execute_parsed_command+0x9e>

	case DISARM_RCOV:
		disarm_recovery();
 8003c82:	f000 f867 	bl	8003d54 <disarm_recovery>
		break;
 8003c86:	e00c      	b.n	8003ca2 <execute_parsed_command+0x9e>

	case VR_POWER_ON:	// TODO: figure out how to make non-blocking
		VR_Power_On();
 8003c88:	f001 fa22 	bl	80050d0 <VR_Power_On>
		break;
 8003c8c:	e009      	b.n	8003ca2 <execute_parsed_command+0x9e>

	case VR_REC_START:	// TODO: figure out how to make non-blocking
		VR_Start_Rec();
 8003c8e:	f001 fa3b 	bl	8005108 <VR_Start_Rec>
		break;
 8003c92:	e006      	b.n	8003ca2 <execute_parsed_command+0x9e>

	case VR_REC_STOP:	// TODO: figure out how to make non-blocking
		VR_Stop_Rec();
 8003c94:	f001 fa5e 	bl	8005154 <VR_Stop_Rec>
		break;
 8003c98:	e003      	b.n	8003ca2 <execute_parsed_command+0x9e>

	case VR_POWER_OFF:
		VR_Power_Off();
 8003c9a:	f001 fa29 	bl	80050f0 <VR_Power_Off>
		break;
 8003c9e:	e000      	b.n	8003ca2 <execute_parsed_command+0x9e>

	default:
		break;
 8003ca0:	bf00      	nop
	}
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	08015788 	.word	0x08015788
 8003cb0:	20001544 	.word	0x20001544
 8003cb4:	08015794 	.word	0x08015794
 8003cb8:	080157a0 	.word	0x080157a0

08003cbc <rocket_launch>:

void rocket_launch(void) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
	// just to be safe, set arming pin high to ensure pyro channels are armed
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	4808      	ldr	r0, [pc, #32]	; (8003ce8 <rocket_launch+0x2c>)
 8003cc6:	f003 fa45 	bl	8007154 <HAL_GPIO_WritePin>

	// open valve by firing the prop pyro ejection channels
	HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, SET);
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cd0:	4806      	ldr	r0, [pc, #24]	; (8003cec <rocket_launch+0x30>)
 8003cd2:	f003 fa3f 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, SET);
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003cdc:	4803      	ldr	r0, [pc, #12]	; (8003cec <rocket_launch+0x30>)
 8003cde:	f003 fa39 	bl	8007154 <HAL_GPIO_WritePin>
}
 8003ce2:	bf00      	nop
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	40021800 	.word	0x40021800
 8003cec:	40021400 	.word	0x40021400

08003cf0 <arming_propulsion>:

void arming_propulsion(void) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, SET);
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2102      	movs	r1, #2
 8003cf8:	4802      	ldr	r0, [pc, #8]	; (8003d04 <arming_propulsion+0x14>)
 8003cfa:	f003 fa2b 	bl	8007154 <HAL_GPIO_WritePin>
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40021800 	.word	0x40021800

08003d08 <arming_recovery>:

void arming_recovery(void) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	// arm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, SET);
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d12:	4802      	ldr	r0, [pc, #8]	; (8003d1c <arming_recovery+0x14>)
 8003d14:	f003 fa1e 	bl	8007154 <HAL_GPIO_WritePin>
}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021800 	.word	0x40021800

08003d20 <disarm_propulsion>:

void disarm_propulsion(void) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Prop_Pyro_Arming_GPIO_Port, Prop_Pyro_Arming_Pin, RESET);
 8003d24:	2200      	movs	r2, #0
 8003d26:	2102      	movs	r1, #2
 8003d28:	4808      	ldr	r0, [pc, #32]	; (8003d4c <disarm_propulsion+0x2c>)
 8003d2a:	f003 fa13 	bl	8007154 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(Prop_Gate_1_GPIO_Port, Prop_Gate_1_Pin, RESET);
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d34:	4806      	ldr	r0, [pc, #24]	; (8003d50 <disarm_propulsion+0x30>)
 8003d36:	f003 fa0d 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Prop_Gate_2_GPIO_Port, Prop_Gate_2_Pin, RESET);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d40:	4803      	ldr	r0, [pc, #12]	; (8003d50 <disarm_propulsion+0x30>)
 8003d42:	f003 fa07 	bl	8007154 <HAL_GPIO_WritePin>
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40021800 	.word	0x40021800
 8003d50:	40021400 	.word	0x40021400

08003d54 <disarm_recovery>:

void disarm_recovery(void) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0
	// disarm, TODO: decide whether to add feedback/check on arming status
	HAL_GPIO_WritePin(Rcov_Arm_GPIO_Port, Rcov_Arm_Pin, RESET);
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d5e:	4808      	ldr	r0, [pc, #32]	; (8003d80 <disarm_recovery+0x2c>)
 8003d60:	f003 f9f8 	bl	8007154 <HAL_GPIO_WritePin>

	// also reset the gates in case they were high
	HAL_GPIO_WritePin(Rcov_Gate_Drogue_GPIO_Port, Rcov_Gate_Drogue_Pin, RESET);
 8003d64:	2200      	movs	r2, #0
 8003d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d6a:	4805      	ldr	r0, [pc, #20]	; (8003d80 <disarm_recovery+0x2c>)
 8003d6c:	f003 f9f2 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Rcov_Gate_Main_GPIO_Port, Rcov_Gate_Main_Pin, RESET);
 8003d70:	2200      	movs	r2, #0
 8003d72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d76:	4802      	ldr	r0, [pc, #8]	; (8003d80 <disarm_recovery+0x2c>)
 8003d78:	f003 f9ec 	bl	8007154 <HAL_GPIO_WritePin>
}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021800 	.word	0x40021800

08003d84 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003d98:	2300      	movs	r3, #0
 8003d9a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <MX_RTC_Init+0xac>)
 8003d9e:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <MX_RTC_Init+0xb0>)
 8003da0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <MX_RTC_Init+0xac>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003da8:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <MX_RTC_Init+0xac>)
 8003daa:	227f      	movs	r2, #127	; 0x7f
 8003dac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003dae:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <MX_RTC_Init+0xac>)
 8003db0:	22ff      	movs	r2, #255	; 0xff
 8003db2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <MX_RTC_Init+0xac>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <MX_RTC_Init+0xac>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <MX_RTC_Init+0xac>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003dc6:	481a      	ldr	r0, [pc, #104]	; (8003e30 <MX_RTC_Init+0xac>)
 8003dc8:	f005 f872 	bl	8008eb0 <HAL_RTC_Init>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003dd2:	f7ff fe9f 	bl	8003b14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 8003dd6:	2310      	movs	r3, #16
 8003dd8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8003dda:	2320      	movs	r3, #32
 8003ddc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x30;
 8003dde:	2330      	movs	r3, #48	; 0x30
 8003de0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	2201      	movs	r2, #1
 8003dee:	4619      	mov	r1, r3
 8003df0:	480f      	ldr	r0, [pc, #60]	; (8003e30 <MX_RTC_Init+0xac>)
 8003df2:	f005 f8ee 	bl	8008fd2 <HAL_RTC_SetTime>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003dfc:	f7ff fe8a 	bl	8003b14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003e00:	2301      	movs	r3, #1
 8003e02:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 8003e04:	2302      	movs	r3, #2
 8003e06:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x12;
 8003e08:	2312      	movs	r3, #18
 8003e0a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8003e0c:	2321      	movs	r3, #33	; 0x21
 8003e0e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003e10:	463b      	mov	r3, r7
 8003e12:	2201      	movs	r2, #1
 8003e14:	4619      	mov	r1, r3
 8003e16:	4806      	ldr	r0, [pc, #24]	; (8003e30 <MX_RTC_Init+0xac>)
 8003e18:	f005 f9f6 	bl	8009208 <HAL_RTC_SetDate>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003e22:	f7ff fe77 	bl	8003b14 <Error_Handler>
  }

}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000e6c 	.word	0x20000e6c
 8003e34:	40002800 	.word	0x40002800

08003e38 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <HAL_RTC_MspInit+0x24>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d102      	bne.n	8003e50 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <HAL_RTC_MspInit+0x28>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr
 8003e5c:	40002800 	.word	0x40002800
 8003e60:	42470e3c 	.word	0x42470e3c

08003e64 <myprintf>:
extern FRESULT fres;
uint8_t msg_buffer[1000];


// private functions
void myprintf(const char *fmt, ...) { // currently does nothing, was copied from a tutorial to make the code work
 8003e64:	b40f      	push	{r0, r1, r2, r3}
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b082      	sub	sp, #8
 8003e6a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8003e6c:	f107 0314 	add.w	r3, r7, #20
 8003e70:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e7a:	4805      	ldr	r0, [pc, #20]	; (8003e90 <myprintf+0x2c>)
 8003e7c:	f00d fa08 	bl	8011290 <vsniprintf>
  va_end(args);

//  int len = strlen(buffer);
//  HAL_UART_Transmit(&huart8, (uint8_t*)buffer, len, -1);

}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e8a:	b004      	add	sp, #16
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	200003a0 	.word	0x200003a0

08003e94 <sd_init_dynamic_filename>:
 * creates new file of form "[prefix][number].txt"
 * where the string composed of "[prefix][number]" is 8 characters long.
 *
 */
FRESULT sd_init_dynamic_filename(char *prefix, char *header_text, char* return_filename)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08a      	sub	sp, #40	; 0x28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
	FRESULT fres = f_mount(&FatFs, "", 1);
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	4932      	ldr	r1, [pc, #200]	; (8003f6c <sd_init_dynamic_filename+0xd8>)
 8003ea4:	4832      	ldr	r0, [pc, #200]	; (8003f70 <sd_init_dynamic_filename+0xdc>)
 8003ea6:	f00a fae5 	bl	800e474 <f_mount>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (fres != FR_OK) {
 8003eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <sd_init_dynamic_filename+0x36>
		myprintf("f_mount error (%i)\r\n", fres);
 8003eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	482d      	ldr	r0, [pc, #180]	; (8003f74 <sd_init_dynamic_filename+0xe0>)
 8003ec0:	f7ff ffd0 	bl	8003e64 <myprintf>
		return fres;
 8003ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ec8:	e04b      	b.n	8003f62 <sd_init_dynamic_filename+0xce>
	}

	// scan files on drive to figure out what suffix number is appropriate
	uint32_t max_used_value = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	623b      	str	r3, [r7, #32]
	fres = scan_files("", prefix, &max_used_value);
 8003ece:	f107 0320 	add.w	r3, r7, #32
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	68f9      	ldr	r1, [r7, #12]
 8003ed6:	4825      	ldr	r0, [pc, #148]	; (8003f6c <sd_init_dynamic_filename+0xd8>)
 8003ed8:	f000 f89c 	bl	8004014 <scan_files>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	// create filename (max filename length in char array is 13 without LFN)
	char filename[13];
	sprintf(filename, "fc%06lu.txt", max_used_value + 1);
 8003ee2:	6a3b      	ldr	r3, [r7, #32]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	f107 0310 	add.w	r3, r7, #16
 8003eea:	4923      	ldr	r1, [pc, #140]	; (8003f78 <sd_init_dynamic_filename+0xe4>)
 8003eec:	4618      	mov	r0, r3
 8003eee:	f00c fa2d 	bl	801034c <siprintf>
	return_filename = strcpy(return_filename, filename); // needed so that other functions can open the file!
 8003ef2:	f107 0310 	add.w	r3, r7, #16
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f00c fac5 	bl	8010488 <strcpy>
 8003efe:	6078      	str	r0, [r7, #4]

	// open file (create file) on SD card
	fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8003f00:	f107 0310 	add.w	r3, r7, #16
 8003f04:	221a      	movs	r2, #26
 8003f06:	4619      	mov	r1, r3
 8003f08:	481c      	ldr	r0, [pc, #112]	; (8003f7c <sd_init_dynamic_filename+0xe8>)
 8003f0a:	f00a faf9 	bl	800e500 <f_open>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (fres == FR_OK) {
 8003f14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d11a      	bne.n	8003f52 <sd_init_dynamic_filename+0xbe>
		myprintf("I was able to open filename.txt for writing\r\n");
 8003f1c:	4818      	ldr	r0, [pc, #96]	; (8003f80 <sd_init_dynamic_filename+0xec>)
 8003f1e:	f7ff ffa1 	bl	8003e64 <myprintf>
	} else {
		myprintf("f_open error (%i)\r\n", fres);
		return fres;
	}
	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003f22:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <sd_init_dynamic_filename+0xe8>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4814      	ldr	r0, [pc, #80]	; (8003f7c <sd_init_dynamic_filename+0xe8>)
 8003f2a:	f00a fec4 	bl	800ecb6 <f_lseek>

	// save indicate start of new log session
	sprintf((char *)msg_buffer, "--- new logging session! ---\r\n");
 8003f2e:	4915      	ldr	r1, [pc, #84]	; (8003f84 <sd_init_dynamic_filename+0xf0>)
 8003f30:	4815      	ldr	r0, [pc, #84]	; (8003f88 <sd_init_dynamic_filename+0xf4>)
 8003f32:	f00c fa0b 	bl	801034c <siprintf>
	sd_write(&fil, msg_buffer);
 8003f36:	4914      	ldr	r1, [pc, #80]	; (8003f88 <sd_init_dynamic_filename+0xf4>)
 8003f38:	4810      	ldr	r0, [pc, #64]	; (8003f7c <sd_init_dynamic_filename+0xe8>)
 8003f3a:	f000 f841 	bl	8003fc0 <sd_write>

	// save header row to indicate what the data is
	sd_write(&fil, (uint8_t *)header_text);
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	480e      	ldr	r0, [pc, #56]	; (8003f7c <sd_init_dynamic_filename+0xe8>)
 8003f42:	f000 f83d 	bl	8003fc0 <sd_write>
	f_close(&fil);
 8003f46:	480d      	ldr	r0, [pc, #52]	; (8003f7c <sd_init_dynamic_filename+0xe8>)
 8003f48:	f00a fe8b 	bl	800ec62 <f_close>

	return fres;
 8003f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f50:	e007      	b.n	8003f62 <sd_init_dynamic_filename+0xce>
		myprintf("f_open error (%i)\r\n", fres);
 8003f52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f56:	4619      	mov	r1, r3
 8003f58:	480c      	ldr	r0, [pc, #48]	; (8003f8c <sd_init_dynamic_filename+0xf8>)
 8003f5a:	f7ff ff83 	bl	8003e64 <myprintf>
		return fres;
 8003f5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3728      	adds	r7, #40	; 0x28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	080157ac 	.word	0x080157ac
 8003f70:	200006c4 	.word	0x200006c4
 8003f74:	080157b0 	.word	0x080157b0
 8003f78:	0801582c 	.word	0x0801582c
 8003f7c:	20000c3c 	.word	0x20000c3c
 8003f80:	080157c8 	.word	0x080157c8
 8003f84:	0801580c 	.word	0x0801580c
 8003f88:	20000e8c 	.word	0x20000e8c
 8003f8c:	080157f8 	.word	0x080157f8

08003f90 <sd_open_file>:

/*
 * always open in mode FA_WRITE | FA_OPEN_ALWAYS and then appends.
 */
FRESULT sd_open_file(char *filename)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
	// write start to SD card
	FRESULT fres = f_open(&fil, filename, FA_WRITE | FA_OPEN_ALWAYS);
 8003f98:	2212      	movs	r2, #18
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4807      	ldr	r0, [pc, #28]	; (8003fbc <sd_open_file+0x2c>)
 8003f9e:	f00a faaf 	bl	800e500 <f_open>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	73fb      	strb	r3, [r7, #15]

	// set pointer to end of file to append
	f_lseek(&fil, f_size(&fil));
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <sd_open_file+0x2c>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	4619      	mov	r1, r3
 8003fac:	4803      	ldr	r0, [pc, #12]	; (8003fbc <sd_open_file+0x2c>)
 8003fae:	f00a fe82 	bl	800ecb6 <f_lseek>

	return fres;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	20000c3c 	.word	0x20000c3c

08003fc0 <sd_write>:
 * @brief  write buffer to file on sd card.
 * @param  fp 		file to save to
 * @param  buffer	data to write to file
 */
int8_t sd_write(FIL* fp, uint8_t* buffer)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
	UINT bytesWrote;
	FRESULT fres = f_write(fp, buffer, strlen((char const *)buffer), &bytesWrote);
 8003fca:	6838      	ldr	r0, [r7, #0]
 8003fcc:	f7fc f91a 	bl	8000204 <strlen>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	f107 0308 	add.w	r3, r7, #8
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f00a fc4f 	bl	800e87c <f_write>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	73fb      	strb	r3, [r7, #15]
	if (fres == FR_OK) {
 8003fe2:	7bfb      	ldrb	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d107      	bne.n	8003ff8 <sd_write+0x38>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4619      	mov	r1, r3
 8003fec:	4807      	ldr	r0, [pc, #28]	; (800400c <sd_write+0x4c>)
 8003fee:	f7ff ff39 	bl	8003e64 <myprintf>
		return bytesWrote;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	e004      	b.n	8004002 <sd_write+0x42>
	} else {
		myprintf("f_write error (%i)\r\n");
 8003ff8:	4805      	ldr	r0, [pc, #20]	; (8004010 <sd_write+0x50>)
 8003ffa:	f7ff ff33 	bl	8003e64 <myprintf>
		return -1;
 8003ffe:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	08015838 	.word	0x08015838
 8004010:	0801585c 	.word	0x0801585c

08004014 <scan_files>:
FRESULT scan_files (
    char* path,        /* Start node to be scanned (***also used as work area***) */
	char* prefix,	   /* prefix in the filename for our datafiles */
	uint32_t* max_used_value
)
{
 8004014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004016:	b099      	sub	sp, #100	; 0x64
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	466b      	mov	r3, sp
 8004022:	461d      	mov	r5, r3
    DIR dir;
//    UINT i;
    static FILINFO fno;

    // does not change so make it static
    uint8_t len_prefix = strlen(prefix);
 8004024:	68b8      	ldr	r0, [r7, #8]
 8004026:	f7fc f8ed 	bl	8000204 <strlen>
 800402a:	4603      	mov	r3, r0
 800402c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    char prefix_upper[len_prefix];
 8004030:	f897 405e 	ldrb.w	r4, [r7, #94]	; 0x5e
 8004034:	4623      	mov	r3, r4
 8004036:	3b01      	subs	r3, #1
 8004038:	65bb      	str	r3, [r7, #88]	; 0x58
 800403a:	b2e0      	uxtb	r0, r4
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	00cb      	lsls	r3, r1, #3
 800404a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800404e:	00c2      	lsls	r2, r0, #3
 8004050:	b2e0      	uxtb	r0, r4
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	00cb      	lsls	r3, r1, #3
 8004060:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004064:	00c2      	lsls	r2, r0, #3
 8004066:	4623      	mov	r3, r4
 8004068:	3307      	adds	r3, #7
 800406a:	08db      	lsrs	r3, r3, #3
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	ebad 0d03 	sub.w	sp, sp, r3
 8004072:	466b      	mov	r3, sp
 8004074:	3300      	adds	r3, #0
 8004076:	657b      	str	r3, [r7, #84]	; 0x54
	str2upper(prefix, prefix_upper);
 8004078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800407a:	4619      	mov	r1, r3
 800407c:	68b8      	ldr	r0, [r7, #8]
 800407e:	f000 f9ab 	bl	80043d8 <str2upper>

	*max_used_value = 0; // initialize to known minimum value
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
	uint32_t num_files_fc = 0; // suffix on the files containing fc data already on sd card
 8004088:	2300      	movs	r3, #0
 800408a:	617b      	str	r3, [r7, #20]

    res = f_opendir(&dir, path);                       /* Open the directory */
 800408c:	f107 0318 	add.w	r3, r7, #24
 8004090:	68f9      	ldr	r1, [r7, #12]
 8004092:	4618      	mov	r0, r3
 8004094:	f00b f818 	bl	800f0c8 <f_opendir>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (res == FR_OK) {
 800409e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d16c      	bne.n	8004180 <scan_files+0x16c>
        for (;;) {
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80040a6:	f107 0318 	add.w	r3, r7, #24
 80040aa:	4939      	ldr	r1, [pc, #228]	; (8004190 <scan_files+0x17c>)
 80040ac:	4618      	mov	r0, r3
 80040ae:	f00b f8a4 	bl	800f1fa <f_readdir>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80040b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d15a      	bne.n	8004176 <scan_files+0x162>
 80040c0:	4b33      	ldr	r3, [pc, #204]	; (8004190 <scan_files+0x17c>)
 80040c2:	7a5b      	ldrb	r3, [r3, #9]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d056      	beq.n	8004176 <scan_files+0x162>
            if (fno.fattrib & AM_DIR) {                    /* It is a directory */
 80040c8:	4b31      	ldr	r3, [pc, #196]	; (8004190 <scan_files+0x17c>)
 80040ca:	7a1b      	ldrb	r3, [r3, #8]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d14e      	bne.n	8004172 <scan_files+0x15e>
//                i = strlen(path);
//                sprintf(&path[i], "/%s", fno.fname);
//                res = scan_files(path, prefix, max_used_value);    /* Enter the directory */
//                if (res != FR_OK) break;
//                path[i] = 0;
            } else {                                       /* It is a file. */
 80040d4:	466b      	mov	r3, sp
 80040d6:	461e      	mov	r6, r3
//                printf("%s/%s\n", path, fno.fname);

            	// check if filename contains parts of our standard prefix "FC000000.txt"
            	// but first convert to uppercase to make case insensitive

            	char fname_upper[strlen((char *)fno.fname)];
 80040d8:	482e      	ldr	r0, [pc, #184]	; (8004194 <scan_files+0x180>)
 80040da:	f7fc f893 	bl	8000204 <strlen>
 80040de:	4604      	mov	r4, r0
 80040e0:	4623      	mov	r3, r4
 80040e2:	3b01      	subs	r3, #1
 80040e4:	653b      	str	r3, [r7, #80]	; 0x50
 80040e6:	4620      	mov	r0, r4
 80040e8:	f04f 0100 	mov.w	r1, #0
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	00cb      	lsls	r3, r1, #3
 80040f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80040fa:	00c2      	lsls	r2, r0, #3
 80040fc:	4620      	mov	r0, r4
 80040fe:	f04f 0100 	mov.w	r1, #0
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	00cb      	lsls	r3, r1, #3
 800410c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8004110:	00c2      	lsls	r2, r0, #3
 8004112:	1de3      	adds	r3, r4, #7
 8004114:	08db      	lsrs	r3, r3, #3
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	ebad 0d03 	sub.w	sp, sp, r3
 800411c:	466b      	mov	r3, sp
 800411e:	3300      	adds	r3, #0
 8004120:	64fb      	str	r3, [r7, #76]	; 0x4c
            	str2upper((char *)fno.fname, fname_upper);
 8004122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004124:	4619      	mov	r1, r3
 8004126:	481b      	ldr	r0, [pc, #108]	; (8004194 <scan_files+0x180>)
 8004128:	f000 f956 	bl	80043d8 <str2upper>

            	int8_t contains_prefix = strncmp(fno.fname, prefix_upper, len_prefix);
 800412c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800412e:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8004132:	4619      	mov	r1, r3
 8004134:	4817      	ldr	r0, [pc, #92]	; (8004194 <scan_files+0x180>)
 8004136:	f00c f9af 	bl	8010498 <strncmp>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

            	if (contains_prefix == 0)
 8004140:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8004144:	2b00      	cmp	r3, #0
 8004146:	d112      	bne.n	800416e <scan_files+0x15a>
            	{
            		// can do error checking with status if desired
            		uint8_t status = extract_filename_suffix(fname_upper, len_prefix, &num_files_fc);
 8004148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800414a:	f107 0214 	add.w	r2, r7, #20
 800414e:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f820 	bl	8004198 <extract_filename_suffix>
 8004158:	4603      	mov	r3, r0
 800415a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

            		if (num_files_fc > *max_used_value)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	429a      	cmp	r2, r3
 8004166:	d202      	bcs.n	800416e <scan_files+0x15a>
            		{
            			*max_used_value = num_files_fc;
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	46b5      	mov	sp, r6
 8004170:	e799      	b.n	80040a6 <scan_files+0x92>
            	continue; // don't enter directory
 8004172:	bf00      	nop
            res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8004174:	e797      	b.n	80040a6 <scan_files+0x92>
            		}
            	}
            }
        }

        f_closedir(&dir);
 8004176:	f107 0318 	add.w	r3, r7, #24
 800417a:	4618      	mov	r0, r3
 800417c:	f00b f817 	bl	800f1ae <f_closedir>
    }

    return res;
 8004180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004184:	46ad      	mov	sp, r5
}
 8004186:	4618      	mov	r0, r3
 8004188:	3764      	adds	r7, #100	; 0x64
 800418a:	46bd      	mov	sp, r7
 800418c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800418e:	bf00      	nop
 8004190:	200004a0 	.word	0x200004a0
 8004194:	200004a9 	.word	0x200004a9

08004198 <extract_filename_suffix>:
 * which is assumed to be .txt. assumes that filename contains prefix.
 *
 * returns integer indicating success/fail: 0 = success, 1 = fail
 */
uint8_t extract_filename_suffix(char* filename, uint8_t len_prefix, uint32_t* num_value)
{
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	460b      	mov	r3, r1
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	72fb      	strb	r3, [r7, #11]
 80041a6:	466b      	mov	r3, sp
 80041a8:	461d      	mov	r5, r3
	uint8_t len_filename = strlen(filename);
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7fc f82a 	bl	8000204 <strlen>
 80041b0:	4603      	mov	r3, r0
 80041b2:	77bb      	strb	r3, [r7, #30]

	// add characters between prefix and filename extension to buffer
	uint8_t len_buf = 8;
 80041b4:	2308      	movs	r3, #8
 80041b6:	777b      	strb	r3, [r7, #29]
	char buf[len_buf]; // filenames can't be longer than 8 characters total
 80041b8:	7f7c      	ldrb	r4, [r7, #29]
 80041ba:	4623      	mov	r3, r4
 80041bc:	3b01      	subs	r3, #1
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	b2e0      	uxtb	r0, r4
 80041c2:	f04f 0100 	mov.w	r1, #0
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	00cb      	lsls	r3, r1, #3
 80041d0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80041d4:	00c2      	lsls	r2, r0, #3
 80041d6:	b2e0      	uxtb	r0, r4
 80041d8:	f04f 0100 	mov.w	r1, #0
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	00cb      	lsls	r3, r1, #3
 80041e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80041ea:	00c2      	lsls	r2, r0, #3
 80041ec:	4623      	mov	r3, r4
 80041ee:	3307      	adds	r3, #7
 80041f0:	08db      	lsrs	r3, r3, #3
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	ebad 0d03 	sub.w	sp, sp, r3
 80041f8:	466b      	mov	r3, sp
 80041fa:	3300      	adds	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < len_buf; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	77fb      	strb	r3, [r7, #31]
 8004202:	e014      	b.n	800422e <extract_filename_suffix+0x96>
	{
		if (len_prefix - 1 + i < len_filename - 1) // go to end of filename
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	1e5a      	subs	r2, r3, #1
 8004208:	7ffb      	ldrb	r3, [r7, #31]
 800420a:	441a      	add	r2, r3
 800420c:	7fbb      	ldrb	r3, [r7, #30]
 800420e:	3b01      	subs	r3, #1
 8004210:	429a      	cmp	r2, r3
 8004212:	da11      	bge.n	8004238 <extract_filename_suffix+0xa0>
		{
			buf[i] = filename[len_prefix + i];
 8004214:	7afa      	ldrb	r2, [r7, #11]
 8004216:	7ffb      	ldrb	r3, [r7, #31]
 8004218:	4413      	add	r3, r2
 800421a:	461a      	mov	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	441a      	add	r2, r3
 8004220:	7ffb      	ldrb	r3, [r7, #31]
 8004222:	7811      	ldrb	r1, [r2, #0]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < len_buf; i++)
 8004228:	7ffb      	ldrb	r3, [r7, #31]
 800422a:	3301      	adds	r3, #1
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	7ffa      	ldrb	r2, [r7, #31]
 8004230:	7f7b      	ldrb	r3, [r7, #29]
 8004232:	429a      	cmp	r2, r3
 8004234:	d3e6      	bcc.n	8004204 <extract_filename_suffix+0x6c>
 8004236:	e000      	b.n	800423a <extract_filename_suffix+0xa2>
		}
		else break;
 8004238:	bf00      	nop
	}

	// change chars to integer, strtol will strip out the .txt
	char *ptr;
	*num_value = strtol(buf, &ptr, 10);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f107 0110 	add.w	r1, r7, #16
 8004240:	220a      	movs	r2, #10
 8004242:	4618      	mov	r0, r3
 8004244:	f00c ffee 	bl	8011224 <strtol>
 8004248:	4603      	mov	r3, r0
 800424a:	461a      	mov	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	601a      	str	r2, [r3, #0]

	if (ptr == buf || *num_value == LONG_MIN || *num_value == LONG_MAX)
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	429a      	cmp	r2, r3
 8004256:	d00a      	beq.n	800426e <extract_filename_suffix+0xd6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004260:	d005      	beq.n	800426e <extract_filename_suffix+0xd6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800426a:	4293      	cmp	r3, r2
 800426c:	d101      	bne.n	8004272 <extract_filename_suffix+0xda>
	{
		return 1;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <extract_filename_suffix+0xdc>
	}

	return 0;
 8004272:	2300      	movs	r3, #0
 8004274:	46ad      	mov	sp, r5
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004280 <save_flash_to_sd>:
 *
 * assumes f_mount has already been run.
 * this function does not close the file system.
 * opens a file "datalog.txt" and closes it when finished.
 */
int8_t save_flash_to_sd(void) {
 8004280:	b5b0      	push	{r4, r5, r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	466b      	mov	r3, sp
 8004288:	461d      	mov	r5, r3
	// FLASH variables
	uint32_t page_num = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	61bb      	str	r3, [r7, #24]
	uint16_t page_bytes = w25qxx.PageSize; // 256 bytes saved per page
 800428e:	4b4b      	ldr	r3, [pc, #300]	; (80043bc <save_flash_to_sd+0x13c>)
 8004290:	895b      	ldrh	r3, [r3, #10]
 8004292:	82fb      	strh	r3, [r7, #22]
	uint8_t readBuf[page_bytes];
 8004294:	8afc      	ldrh	r4, [r7, #22]
 8004296:	4623      	mov	r3, r4
 8004298:	3b01      	subs	r3, #1
 800429a:	613b      	str	r3, [r7, #16]
 800429c:	b2a0      	uxth	r0, r4
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	00cb      	lsls	r3, r1, #3
 80042ac:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80042b0:	00c2      	lsls	r2, r0, #3
 80042b2:	b2a0      	uxth	r0, r4
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	00cb      	lsls	r3, r1, #3
 80042c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80042c6:	00c2      	lsls	r2, r0, #3
 80042c8:	4623      	mov	r3, r4
 80042ca:	3307      	adds	r3, #7
 80042cc:	08db      	lsrs	r3, r3, #3
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	ebad 0d03 	sub.w	sp, sp, r3
 80042d4:	466b      	mov	r3, sp
 80042d6:	3300      	adds	r3, #0
 80042d8:	60fb      	str	r3, [r7, #12]

	// write to file
	fres = f_open(&fil, "flashlog.txt", FA_WRITE | FA_OPEN_ALWAYS);
 80042da:	2212      	movs	r2, #18
 80042dc:	4938      	ldr	r1, [pc, #224]	; (80043c0 <save_flash_to_sd+0x140>)
 80042de:	4839      	ldr	r0, [pc, #228]	; (80043c4 <save_flash_to_sd+0x144>)
 80042e0:	f00a f90e 	bl	800e500 <f_open>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <save_flash_to_sd+0x148>)
 80042ea:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 80042ec:	4b36      	ldr	r3, [pc, #216]	; (80043c8 <save_flash_to_sd+0x148>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <save_flash_to_sd+0x86>
		myprintf("f_open error (%i)\r\n", fres);
 80042f4:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <save_flash_to_sd+0x148>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	4619      	mov	r1, r3
 80042fa:	4834      	ldr	r0, [pc, #208]	; (80043cc <save_flash_to_sd+0x14c>)
 80042fc:	f7ff fdb2 	bl	8003e64 <myprintf>
		return -1;
 8004300:	f04f 33ff 	mov.w	r3, #4294967295
 8004304:	e055      	b.n	80043b2 <save_flash_to_sd+0x132>
	}

	// set pointer to end of file
	f_lseek(&fil, f_size(&fil));
 8004306:	4b2f      	ldr	r3, [pc, #188]	; (80043c4 <save_flash_to_sd+0x144>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	4619      	mov	r1, r3
 800430c:	482d      	ldr	r0, [pc, #180]	; (80043c4 <save_flash_to_sd+0x144>)
 800430e:	f00a fcd2 	bl	800ecb6 <f_lseek>

	// print string to indicate new log session
	sprintf((char *)msg_buffer, "\n--- new logging session! ---\r\n");
 8004312:	492f      	ldr	r1, [pc, #188]	; (80043d0 <save_flash_to_sd+0x150>)
 8004314:	482f      	ldr	r0, [pc, #188]	; (80043d4 <save_flash_to_sd+0x154>)
 8004316:	f00c f819 	bl	801034c <siprintf>
	sd_write(&fil, msg_buffer);
 800431a:	492e      	ldr	r1, [pc, #184]	; (80043d4 <save_flash_to_sd+0x154>)
 800431c:	4829      	ldr	r0, [pc, #164]	; (80043c4 <save_flash_to_sd+0x144>)
 800431e:	f7ff fe4f 	bl	8003fc0 <sd_write>

	for (page_num = 0; page_num < w25qxx.PageCount; page_num++) {
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e022      	b.n	800436e <save_flash_to_sd+0xee>

		if (!W25qxx_IsEmptyPage(page_num, 0, page_bytes)) {
 8004328:	8afb      	ldrh	r3, [r7, #22]
 800432a:	461a      	mov	r2, r3
 800432c:	2100      	movs	r1, #0
 800432e:	69b8      	ldr	r0, [r7, #24]
 8004330:	f001 fa08 	bl	8005744 <W25qxx_IsEmptyPage>
 8004334:	4603      	mov	r3, r0
 8004336:	f083 0301 	eor.w	r3, r3, #1
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01c      	beq.n	800437a <save_flash_to_sd+0xfa>

			// page not empty, read page out of flash
			W25qxx_ReadPage(readBuf, page_num, 0, page_bytes);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	8afb      	ldrh	r3, [r7, #22]
 8004344:	2200      	movs	r2, #0
 8004346:	69b9      	ldr	r1, [r7, #24]
 8004348:	f001 fb1e 	bl	8005988 <W25qxx_ReadPage>

			// save to SD
			int8_t status = sd_write(&fil, readBuf);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4619      	mov	r1, r3
 8004350:	481c      	ldr	r0, [pc, #112]	; (80043c4 <save_flash_to_sd+0x144>)
 8004352:	f7ff fe35 	bl	8003fc0 <sd_write>
 8004356:	4603      	mov	r3, r0
 8004358:	72fb      	strb	r3, [r7, #11]
			if (status <= 0) {
 800435a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800435e:	2b00      	cmp	r3, #0
 8004360:	dc02      	bgt.n	8004368 <save_flash_to_sd+0xe8>
				return -1; // failed
 8004362:	f04f 33ff 	mov.w	r3, #4294967295
 8004366:	e024      	b.n	80043b2 <save_flash_to_sd+0x132>
	for (page_num = 0; page_num < w25qxx.PageCount; page_num++) {
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	3301      	adds	r3, #1
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	4b13      	ldr	r3, [pc, #76]	; (80043bc <save_flash_to_sd+0x13c>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	429a      	cmp	r2, r3
 8004376:	d3d7      	bcc.n	8004328 <save_flash_to_sd+0xa8>
 8004378:	e000      	b.n	800437c <save_flash_to_sd+0xfc>
			}
		}
		else break; // page empty, no need to continue
 800437a:	bf00      	nop
	}

	// close file
	f_close(&fil);
 800437c:	4811      	ldr	r0, [pc, #68]	; (80043c4 <save_flash_to_sd+0x144>)
 800437e:	f00a fc70 	bl	800ec62 <f_close>

	if (page_num == 0) { // nothing saved
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <save_flash_to_sd+0x10c>
		return 0;
 8004388:	2300      	movs	r3, #0
 800438a:	e012      	b.n	80043b2 <save_flash_to_sd+0x132>
	}
	else {
		// clear the blocks with data
		uint32_t blocks_to_clear = W25qxx_PageToBlock(page_num);
 800438c:	69b8      	ldr	r0, [r7, #24]
 800438e:	f001 f9c3 	bl	8005718 <W25qxx_PageToBlock>
 8004392:	6078      	str	r0, [r7, #4]
		for (uint32_t block = 0; block <= blocks_to_clear; block++) {
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	e005      	b.n	80043a6 <save_flash_to_sd+0x126>
			W25qxx_EraseBlock(block);
 800439a:	69f8      	ldr	r0, [r7, #28]
 800439c:	f001 f948 	bl	8005630 <W25qxx_EraseBlock>
		for (uint32_t block = 0; block <= blocks_to_clear; block++) {
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d9f5      	bls.n	800439a <save_flash_to_sd+0x11a>
		}
	}

	return page_num;
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	b25b      	sxtb	r3, r3
 80043b2:	46ad      	mov	sp, r5
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bdb0      	pop	{r4, r5, r7, pc}
 80043bc:	200015c4 	.word	0x200015c4
 80043c0:	08015874 	.word	0x08015874
 80043c4:	20000c3c 	.word	0x20000c3c
 80043c8:	20000c38 	.word	0x20000c38
 80043cc:	080157f8 	.word	0x080157f8
 80043d0:	08015884 	.word	0x08015884
 80043d4:	20000e8c 	.word	0x20000e8c

080043d8 <str2upper>:
/**
 * assumes that upper has enough characters in the array
 * to store the uppercase version.
 */
void str2upper(char* string, char* upper)
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
 80043e6:	e019      	b.n	800441c <str2upper+0x44>
	{
		upper[i] = toupper(string[i]);
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	4413      	add	r3, r2
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	73bb      	strb	r3, [r7, #14]
 80043f2:	7bbb      	ldrb	r3, [r7, #14]
 80043f4:	3301      	adds	r3, #1
 80043f6:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <str2upper+0x5c>)
 80043f8:	4413      	add	r3, r2
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d102      	bne.n	800440a <str2upper+0x32>
 8004404:	7bbb      	ldrb	r3, [r7, #14]
 8004406:	3b20      	subs	r3, #32
 8004408:	e000      	b.n	800440c <str2upper+0x34>
 800440a:	7bbb      	ldrb	r3, [r7, #14]
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	440a      	add	r2, r1
 8004412:	b2db      	uxtb	r3, r3
 8004414:	7013      	strb	r3, [r2, #0]
	for (uint8_t i = 0; i < strlen(string); i++)
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	3301      	adds	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
 800441c:	7bfc      	ldrb	r4, [r7, #15]
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fb fef0 	bl	8000204 <strlen>
 8004424:	4603      	mov	r3, r0
 8004426:	429c      	cmp	r4, r3
 8004428:	d3de      	bcc.n	80043e8 <str2upper+0x10>
	}
}
 800442a:	bf00      	nop
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	bd90      	pop	{r4, r7, pc}
 8004434:	08016230 	.word	0x08016230

08004438 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi4;
SPI_HandleTypeDef hspi5;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800443c:	4b17      	ldr	r3, [pc, #92]	; (800449c <MX_SPI2_Init+0x64>)
 800443e:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <MX_SPI2_Init+0x68>)
 8004440:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004442:	4b16      	ldr	r3, [pc, #88]	; (800449c <MX_SPI2_Init+0x64>)
 8004444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004448:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800444a:	4b14      	ldr	r3, [pc, #80]	; (800449c <MX_SPI2_Init+0x64>)
 800444c:	2200      	movs	r2, #0
 800444e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004450:	4b12      	ldr	r3, [pc, #72]	; (800449c <MX_SPI2_Init+0x64>)
 8004452:	2200      	movs	r2, #0
 8004454:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004456:	4b11      	ldr	r3, [pc, #68]	; (800449c <MX_SPI2_Init+0x64>)
 8004458:	2200      	movs	r2, #0
 800445a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800445c:	4b0f      	ldr	r3, [pc, #60]	; (800449c <MX_SPI2_Init+0x64>)
 800445e:	2200      	movs	r2, #0
 8004460:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004462:	4b0e      	ldr	r3, [pc, #56]	; (800449c <MX_SPI2_Init+0x64>)
 8004464:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004468:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800446a:	4b0c      	ldr	r3, [pc, #48]	; (800449c <MX_SPI2_Init+0x64>)
 800446c:	2200      	movs	r2, #0
 800446e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004470:	4b0a      	ldr	r3, [pc, #40]	; (800449c <MX_SPI2_Init+0x64>)
 8004472:	2200      	movs	r2, #0
 8004474:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004476:	4b09      	ldr	r3, [pc, #36]	; (800449c <MX_SPI2_Init+0x64>)
 8004478:	2200      	movs	r2, #0
 800447a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <MX_SPI2_Init+0x64>)
 800447e:	2200      	movs	r2, #0
 8004480:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004482:	4b06      	ldr	r3, [pc, #24]	; (800449c <MX_SPI2_Init+0x64>)
 8004484:	220a      	movs	r2, #10
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004488:	4804      	ldr	r0, [pc, #16]	; (800449c <MX_SPI2_Init+0x64>)
 800448a:	f005 f843 	bl	8009514 <HAL_SPI_Init>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004494:	f7ff fb3e 	bl	8003b14 <Error_Handler>
  }

}
 8004498:	bf00      	nop
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20001274 	.word	0x20001274
 80044a0:	40003800 	.word	0x40003800

080044a4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 80044a8:	4b17      	ldr	r3, [pc, #92]	; (8004508 <MX_SPI4_Init+0x64>)
 80044aa:	4a18      	ldr	r2, [pc, #96]	; (800450c <MX_SPI4_Init+0x68>)
 80044ac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <MX_SPI4_Init+0x64>)
 80044b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80044b4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <MX_SPI4_Init+0x64>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80044bc:	4b12      	ldr	r3, [pc, #72]	; (8004508 <MX_SPI4_Init+0x64>)
 80044be:	2200      	movs	r2, #0
 80044c0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <MX_SPI4_Init+0x64>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80044c8:	4b0f      	ldr	r3, [pc, #60]	; (8004508 <MX_SPI4_Init+0x64>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80044ce:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <MX_SPI4_Init+0x64>)
 80044d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <MX_SPI4_Init+0x64>)
 80044d8:	2228      	movs	r2, #40	; 0x28
 80044da:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <MX_SPI4_Init+0x64>)
 80044de:	2200      	movs	r2, #0
 80044e0:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80044e2:	4b09      	ldr	r3, [pc, #36]	; (8004508 <MX_SPI4_Init+0x64>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044e8:	4b07      	ldr	r3, [pc, #28]	; (8004508 <MX_SPI4_Init+0x64>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 10;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <MX_SPI4_Init+0x64>)
 80044f0:	220a      	movs	r2, #10
 80044f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80044f4:	4804      	ldr	r0, [pc, #16]	; (8004508 <MX_SPI4_Init+0x64>)
 80044f6:	f005 f80d 	bl	8009514 <HAL_SPI_Init>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 8004500:	f7ff fb08 	bl	8003b14 <Error_Handler>
  }

}
 8004504:	bf00      	nop
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000500 	.word	0x20000500
 800450c:	40013400 	.word	0x40013400

08004510 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8004514:	4b17      	ldr	r3, [pc, #92]	; (8004574 <MX_SPI5_Init+0x64>)
 8004516:	4a18      	ldr	r2, [pc, #96]	; (8004578 <MX_SPI5_Init+0x68>)
 8004518:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <MX_SPI5_Init+0x64>)
 800451c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004520:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004522:	4b14      	ldr	r3, [pc, #80]	; (8004574 <MX_SPI5_Init+0x64>)
 8004524:	2200      	movs	r2, #0
 8004526:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004528:	4b12      	ldr	r3, [pc, #72]	; (8004574 <MX_SPI5_Init+0x64>)
 800452a:	2200      	movs	r2, #0
 800452c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <MX_SPI5_Init+0x64>)
 8004530:	2200      	movs	r2, #0
 8004532:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <MX_SPI5_Init+0x64>)
 8004536:	2200      	movs	r2, #0
 8004538:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <MX_SPI5_Init+0x64>)
 800453c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004540:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004542:	4b0c      	ldr	r3, [pc, #48]	; (8004574 <MX_SPI5_Init+0x64>)
 8004544:	2200      	movs	r2, #0
 8004546:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <MX_SPI5_Init+0x64>)
 800454a:	2200      	movs	r2, #0
 800454c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <MX_SPI5_Init+0x64>)
 8004550:	2200      	movs	r2, #0
 8004552:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004554:	4b07      	ldr	r3, [pc, #28]	; (8004574 <MX_SPI5_Init+0x64>)
 8004556:	2200      	movs	r2, #0
 8004558:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <MX_SPI5_Init+0x64>)
 800455c:	220a      	movs	r2, #10
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004560:	4804      	ldr	r0, [pc, #16]	; (8004574 <MX_SPI5_Init+0x64>)
 8004562:	f004 ffd7 	bl	8009514 <HAL_SPI_Init>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800456c:	f7ff fad2 	bl	8003b14 <Error_Handler>
  }

}
 8004570:	bf00      	nop
 8004572:	bd80      	pop	{r7, pc}
 8004574:	200012cc 	.word	0x200012cc
 8004578:	40015000 	.word	0x40015000

0800457c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08e      	sub	sp, #56	; 0x38
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	605a      	str	r2, [r3, #4]
 800458e:	609a      	str	r2, [r3, #8]
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a4c      	ldr	r2, [pc, #304]	; (80046cc <HAL_SPI_MspInit+0x150>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d12d      	bne.n	80045fa <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800459e:	2300      	movs	r3, #0
 80045a0:	623b      	str	r3, [r7, #32]
 80045a2:	4b4b      	ldr	r3, [pc, #300]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	4a4a      	ldr	r2, [pc, #296]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 80045a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045ac:	6413      	str	r3, [r2, #64]	; 0x40
 80045ae:	4b48      	ldr	r3, [pc, #288]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b6:	623b      	str	r3, [r7, #32]
 80045b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	4a43      	ldr	r2, [pc, #268]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 80045c4:	f043 0302 	orr.w	r3, r3, #2
 80045c8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ca:	4b41      	ldr	r3, [pc, #260]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	69fb      	ldr	r3, [r7, #28]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80045d6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045dc:	2302      	movs	r3, #2
 80045de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045e0:	2301      	movs	r3, #1
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e4:	2303      	movs	r3, #3
 80045e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045e8:	2305      	movs	r3, #5
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045f0:	4619      	mov	r1, r3
 80045f2:	4838      	ldr	r0, [pc, #224]	; (80046d4 <HAL_SPI_MspInit+0x158>)
 80045f4:	f002 fbea 	bl	8006dcc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80045f8:	e064      	b.n	80046c4 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI4)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a36      	ldr	r2, [pc, #216]	; (80046d8 <HAL_SPI_MspInit+0x15c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d12d      	bne.n	8004660 <HAL_SPI_MspInit+0xe4>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004604:	2300      	movs	r3, #0
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 800460a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460c:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 800460e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004612:	6453      	str	r3, [r2, #68]	; 0x44
 8004614:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461c:	61bb      	str	r3, [r7, #24]
 800461e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	4b2a      	ldr	r3, [pc, #168]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	4a29      	ldr	r2, [pc, #164]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 800462a:	f043 0310 	orr.w	r3, r3, #16
 800462e:	6313      	str	r3, [r2, #48]	; 0x30
 8004630:	4b27      	ldr	r3, [pc, #156]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800463c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004642:	2302      	movs	r3, #2
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	2300      	movs	r3, #0
 8004648:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800464a:	2303      	movs	r3, #3
 800464c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800464e:	2305      	movs	r3, #5
 8004650:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004656:	4619      	mov	r1, r3
 8004658:	4820      	ldr	r0, [pc, #128]	; (80046dc <HAL_SPI_MspInit+0x160>)
 800465a:	f002 fbb7 	bl	8006dcc <HAL_GPIO_Init>
}
 800465e:	e031      	b.n	80046c4 <HAL_SPI_MspInit+0x148>
  else if(spiHandle->Instance==SPI5)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1e      	ldr	r2, [pc, #120]	; (80046e0 <HAL_SPI_MspInit+0x164>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d12c      	bne.n	80046c4 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 8004674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004678:	6453      	str	r3, [r2, #68]	; 0x44
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	4a10      	ldr	r2, [pc, #64]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 8004690:	f043 0320 	orr.w	r3, r3, #32
 8004694:	6313      	str	r3, [r2, #48]	; 0x30
 8004696:	4b0e      	ldr	r3, [pc, #56]	; (80046d0 <HAL_SPI_MspInit+0x154>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80046a2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a8:	2302      	movs	r3, #2
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046ac:	2301      	movs	r3, #1
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b0:	2303      	movs	r3, #3
 80046b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80046b4:	2305      	movs	r3, #5
 80046b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80046b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046bc:	4619      	mov	r1, r3
 80046be:	4809      	ldr	r0, [pc, #36]	; (80046e4 <HAL_SPI_MspInit+0x168>)
 80046c0:	f002 fb84 	bl	8006dcc <HAL_GPIO_Init>
}
 80046c4:	bf00      	nop
 80046c6:	3738      	adds	r7, #56	; 0x38
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40003800 	.word	0x40003800
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40020400 	.word	0x40020400
 80046d8:	40013400 	.word	0x40013400
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40015000 	.word	0x40015000
 80046e4:	40021400 	.word	0x40021400

080046e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ee:	2300      	movs	r3, #0
 80046f0:	607b      	str	r3, [r7, #4]
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_MspInit+0x4c>)
 80046f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f6:	4a0f      	ldr	r2, [pc, #60]	; (8004734 <HAL_MspInit+0x4c>)
 80046f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046fc:	6453      	str	r3, [r2, #68]	; 0x44
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <HAL_MspInit+0x4c>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_MspInit+0x4c>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	4a08      	ldr	r2, [pc, #32]	; (8004734 <HAL_MspInit+0x4c>)
 8004714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004718:	6413      	str	r3, [r2, #64]	; 0x40
 800471a:	4b06      	ldr	r3, [pc, #24]	; (8004734 <HAL_MspInit+0x4c>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800

08004738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800473c:	bf00      	nop
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004746:	b480      	push	{r7}
 8004748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800474a:	e7fe      	b.n	800474a <HardFault_Handler+0x4>

0800474c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004750:	e7fe      	b.n	8004750 <MemManage_Handler+0x4>

08004752 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004756:	e7fe      	b.n	8004756 <BusFault_Handler+0x4>

08004758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800475c:	e7fe      	b.n	800475c <UsageFault_Handler+0x4>

0800475e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004762:	bf00      	nop
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800478c:	f001 fa3a 	bl	8005c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}

08004794 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004798:	2001      	movs	r0, #1
 800479a:	f002 fd0f 	bl	80071bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80047a6:	2010      	movs	r0, #16
 80047a8:	f002 fd08 	bl	80071bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80047b4:	4802      	ldr	r0, [pc, #8]	; (80047c0 <DMA1_Stream1_IRQHandler+0x10>)
 80047b6:	f002 f89f 	bl	80068f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20001444 	.word	0x20001444

080047c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80047c8:	4802      	ldr	r0, [pc, #8]	; (80047d4 <DMA1_Stream3_IRQHandler+0x10>)
 80047ca:	f002 f895 	bl	80068f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80047ce:	bf00      	nop
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	200014e4 	.word	0x200014e4

080047d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80047dc:	4802      	ldr	r0, [pc, #8]	; (80047e8 <TIM3_IRQHandler+0x10>)
 80047de:	f005 fbd3 	bl	8009f88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	20001364 	.word	0x20001364

080047ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80047f0:	4802      	ldr	r0, [pc, #8]	; (80047fc <USART3_IRQHandler+0x10>)
 80047f2:	f006 fbf5 	bl	800afe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	200014a4 	.word	0x200014a4

08004800 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004804:	4802      	ldr	r0, [pc, #8]	; (8004810 <DMA2_Stream1_IRQHandler+0x10>)
 8004806:	f002 f877 	bl	80068f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	200013e4 	.word	0x200013e4

08004814 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004818:	4802      	ldr	r0, [pc, #8]	; (8004824 <USART6_IRQHandler+0x10>)
 800481a:	f006 fbe1 	bl	800afe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20001584 	.word	0x20001584

08004828 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
	return 1;
 800482c:	2301      	movs	r3, #1
}
 800482e:	4618      	mov	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <_kill>:

int _kill(int pid, int sig)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004842:	f00a fd73 	bl	800f32c <__errno>
 8004846:	4603      	mov	r3, r0
 8004848:	2216      	movs	r2, #22
 800484a:	601a      	str	r2, [r3, #0]
	return -1;
 800484c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <_exit>:

void _exit (int status)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004860:	f04f 31ff 	mov.w	r1, #4294967295
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff ffe7 	bl	8004838 <_kill>
	while (1) {}		/* Make sure we hang here */
 800486a:	e7fe      	b.n	800486a <_exit+0x12>

0800486c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	e00a      	b.n	8004894 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800487e:	f3af 8000 	nop.w
 8004882:	4601      	mov	r1, r0
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	60ba      	str	r2, [r7, #8]
 800488a:	b2ca      	uxtb	r2, r1
 800488c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	3301      	adds	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	429a      	cmp	r2, r3
 800489a:	dbf0      	blt.n	800487e <_read+0x12>
	}

return len;
 800489c:	687b      	ldr	r3, [r7, #4]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b086      	sub	sp, #24
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	e009      	b.n	80048cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	60ba      	str	r2, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	3301      	adds	r3, #1
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	dbf1      	blt.n	80048b8 <_write+0x12>
	}
	return len;
 80048d4:	687b      	ldr	r3, [r7, #4]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <_close>:

int _close(int file)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
	return -1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004906:	605a      	str	r2, [r3, #4]
	return 0;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <_isatty>:

int _isatty(int file)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
	return 1;
 800491e:	2301      	movs	r3, #1
}
 8004920:	4618      	mov	r0, r3
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
	return 0;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
	...

08004948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <_sbrk+0x5c>)
 8004952:	4b15      	ldr	r3, [pc, #84]	; (80049a8 <_sbrk+0x60>)
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800495c:	4b13      	ldr	r3, [pc, #76]	; (80049ac <_sbrk+0x64>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d102      	bne.n	800496a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <_sbrk+0x64>)
 8004966:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <_sbrk+0x68>)
 8004968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800496a:	4b10      	ldr	r3, [pc, #64]	; (80049ac <_sbrk+0x64>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	429a      	cmp	r2, r3
 8004976:	d207      	bcs.n	8004988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004978:	f00a fcd8 	bl	800f32c <__errno>
 800497c:	4603      	mov	r3, r0
 800497e:	220c      	movs	r2, #12
 8004980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004982:	f04f 33ff 	mov.w	r3, #4294967295
 8004986:	e009      	b.n	800499c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004988:	4b08      	ldr	r3, [pc, #32]	; (80049ac <_sbrk+0x64>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800498e:	4b07      	ldr	r3, [pc, #28]	; (80049ac <_sbrk+0x64>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	4a05      	ldr	r2, [pc, #20]	; (80049ac <_sbrk+0x64>)
 8004998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800499a:	68fb      	ldr	r3, [r7, #12]
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	20030000 	.word	0x20030000
 80049a8:	00000400 	.word	0x00000400
 80049ac:	200004b8 	.word	0x200004b8
 80049b0:	20001a70 	.word	0x20001a70

080049b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <SystemInit+0x28>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	4a07      	ldr	r2, [pc, #28]	; (80049dc <SystemInit+0x28>)
 80049c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <SystemInit+0x28>)
 80049ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80049ce:	609a      	str	r2, [r3, #8]
#endif
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	e000ed00 	.word	0xe000ed00

080049e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08e      	sub	sp, #56	; 0x38
 80049e4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
 80049ee:	605a      	str	r2, [r3, #4]
 80049f0:	609a      	str	r2, [r3, #8]
 80049f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049f4:	f107 0320 	add.w	r3, r7, #32
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049fe:	1d3b      	adds	r3, r7, #4
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	605a      	str	r2, [r3, #4]
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	60da      	str	r2, [r3, #12]
 8004a0a:	611a      	str	r2, [r3, #16]
 8004a0c:	615a      	str	r2, [r3, #20]
 8004a0e:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8004a10:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8004a18:	4b2b      	ldr	r3, [pc, #172]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a1a:	2259      	movs	r2, #89	; 0x59
 8004a1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 8004a24:	4b28      	ldr	r3, [pc, #160]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a26:	f240 128f 	movw	r2, #399	; 0x18f
 8004a2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a2c:	4b26      	ldr	r3, [pc, #152]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a32:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004a38:	4823      	ldr	r0, [pc, #140]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a3a:	f005 f98b 	bl	8009d54 <HAL_TIM_Base_Init>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8004a44:	f7ff f866 	bl	8003b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004a52:	4619      	mov	r1, r3
 8004a54:	481c      	ldr	r0, [pc, #112]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a56:	f005 fc65 	bl	800a324 <HAL_TIM_ConfigClockSource>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8004a60:	f7ff f858 	bl	8003b14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004a64:	4818      	ldr	r0, [pc, #96]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a66:	f005 f9c4 	bl	8009df2 <HAL_TIM_PWM_Init>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8004a70:	f7ff f850 	bl	8003b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004a74:	2320      	movs	r3, #32
 8004a76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004a7c:	f107 0320 	add.w	r3, r7, #32
 8004a80:	4619      	mov	r1, r3
 8004a82:	4811      	ldr	r0, [pc, #68]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004a84:	f006 f84a 	bl	800ab1c <HAL_TIMEx_MasterConfigSynchronization>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8004a8e:	f7ff f841 	bl	8003b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a92:	2360      	movs	r3, #96	; 0x60
 8004a94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8004a96:	2364      	movs	r3, #100	; 0x64
 8004a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004aa2:	1d3b      	adds	r3, r7, #4
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4807      	ldr	r0, [pc, #28]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004aaa:	f005 fb75 	bl	800a198 <HAL_TIM_PWM_ConfigChannel>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8004ab4:	f7ff f82e 	bl	8003b14 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8004ab8:	4803      	ldr	r0, [pc, #12]	; (8004ac8 <MX_TIM2_Init+0xe8>)
 8004aba:	f000 f8f5 	bl	8004ca8 <HAL_TIM_MspPostInit>

}
 8004abe:	bf00      	nop
 8004ac0:	3738      	adds	r7, #56	; 0x38
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200013a4 	.word	0x200013a4

08004acc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b086      	sub	sp, #24
 8004ad0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ad2:	f107 0308 	add.w	r3, r7, #8
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	605a      	str	r2, [r3, #4]
 8004adc:	609a      	str	r2, [r3, #8]
 8004ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <MX_TIM3_Init+0x94>)
 8004aea:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <MX_TIM3_Init+0x98>)
 8004aec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8004aee:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <MX_TIM3_Init+0x94>)
 8004af0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004af4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004af6:	4b1a      	ldr	r3, [pc, #104]	; (8004b60 <MX_TIM3_Init+0x94>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004afc:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <MX_TIM3_Init+0x94>)
 8004afe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b04:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <MX_TIM3_Init+0x94>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <MX_TIM3_Init+0x94>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004b10:	4813      	ldr	r0, [pc, #76]	; (8004b60 <MX_TIM3_Init+0x94>)
 8004b12:	f005 f91f 	bl	8009d54 <HAL_TIM_Base_Init>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004b1c:	f7fe fffa 	bl	8003b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004b26:	f107 0308 	add.w	r3, r7, #8
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	480c      	ldr	r0, [pc, #48]	; (8004b60 <MX_TIM3_Init+0x94>)
 8004b2e:	f005 fbf9 	bl	800a324 <HAL_TIM_ConfigClockSource>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d001      	beq.n	8004b3c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004b38:	f7fe ffec 	bl	8003b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b44:	463b      	mov	r3, r7
 8004b46:	4619      	mov	r1, r3
 8004b48:	4805      	ldr	r0, [pc, #20]	; (8004b60 <MX_TIM3_Init+0x94>)
 8004b4a:	f005 ffe7 	bl	800ab1c <HAL_TIMEx_MasterConfigSynchronization>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004b54:	f7fe ffde 	bl	8003b14 <Error_Handler>
  }

}
 8004b58:	bf00      	nop
 8004b5a:	3718      	adds	r7, #24
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	20001364 	.word	0x20001364
 8004b64:	40000400 	.word	0x40000400

08004b68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b6e:	f107 0308 	add.w	r3, r7, #8
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	605a      	str	r2, [r3, #4]
 8004b78:	609a      	str	r2, [r3, #8]
 8004b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b7c:	463b      	mov	r3, r7
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <MX_TIM4_Init+0x94>)
 8004b86:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <MX_TIM4_Init+0x98>)
 8004b88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9000-1;
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <MX_TIM4_Init+0x94>)
 8004b8c:	f242 3227 	movw	r2, #8999	; 0x2327
 8004b90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b92:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <MX_TIM4_Init+0x94>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8004b98:	4b18      	ldr	r3, [pc, #96]	; (8004bfc <MX_TIM4_Init+0x94>)
 8004b9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ba0:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <MX_TIM4_Init+0x94>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ba6:	4b15      	ldr	r3, [pc, #84]	; (8004bfc <MX_TIM4_Init+0x94>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004bac:	4813      	ldr	r0, [pc, #76]	; (8004bfc <MX_TIM4_Init+0x94>)
 8004bae:	f005 f8d1 	bl	8009d54 <HAL_TIM_Base_Init>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8004bb8:	f7fe ffac 	bl	8003b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004bc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	480c      	ldr	r0, [pc, #48]	; (8004bfc <MX_TIM4_Init+0x94>)
 8004bca:	f005 fbab 	bl	800a324 <HAL_TIM_ConfigClockSource>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004bd4:	f7fe ff9e 	bl	8003b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004bd8:	2320      	movs	r3, #32
 8004bda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004be0:	463b      	mov	r3, r7
 8004be2:	4619      	mov	r1, r3
 8004be4:	4805      	ldr	r0, [pc, #20]	; (8004bfc <MX_TIM4_Init+0x94>)
 8004be6:	f005 ff99 	bl	800ab1c <HAL_TIMEx_MasterConfigSynchronization>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8004bf0:	f7fe ff90 	bl	8003b14 <Error_Handler>
  }

}
 8004bf4:	bf00      	nop
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20001324 	.word	0x20001324
 8004c00:	40000800 	.word	0x40000800

08004c04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d10e      	bne.n	8004c34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <HAL_TIM_Base_MspInit+0x98>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <HAL_TIM_Base_MspInit+0x98>)
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	6413      	str	r3, [r2, #64]	; 0x40
 8004c26:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_TIM_Base_MspInit+0x98>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004c32:	e02e      	b.n	8004c92 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM3)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <HAL_TIM_Base_MspInit+0x9c>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d116      	bne.n	8004c6c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <HAL_TIM_Base_MspInit+0x98>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <HAL_TIM_Base_MspInit+0x98>)
 8004c48:	f043 0302 	orr.w	r3, r3, #2
 8004c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <HAL_TIM_Base_MspInit+0x98>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	201d      	movs	r0, #29
 8004c60:	f001 fceb 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004c64:	201d      	movs	r0, #29
 8004c66:	f001 fd04 	bl	8006672 <HAL_NVIC_EnableIRQ>
}
 8004c6a:	e012      	b.n	8004c92 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM4)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <HAL_TIM_Base_MspInit+0xa0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d10d      	bne.n	8004c92 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <HAL_TIM_Base_MspInit+0x98>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	4a07      	ldr	r2, [pc, #28]	; (8004c9c <HAL_TIM_Base_MspInit+0x98>)
 8004c80:	f043 0304 	orr.w	r3, r3, #4
 8004c84:	6413      	str	r3, [r2, #64]	; 0x40
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_TIM_Base_MspInit+0x98>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	bf00      	nop
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40000800 	.word	0x40000800

08004ca8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb0:	f107 030c 	add.w	r3, r7, #12
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc8:	d11d      	bne.n	8004d06 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	4b10      	ldr	r3, [pc, #64]	; (8004d10 <HAL_TIM_MspPostInit+0x68>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	4a0f      	ldr	r2, [pc, #60]	; (8004d10 <HAL_TIM_MspPostInit+0x68>)
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <HAL_TIM_MspPostInit+0x68>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cea:	2302      	movs	r3, #2
 8004cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8004cfa:	f107 030c 	add.w	r3, r7, #12
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4804      	ldr	r0, [pc, #16]	; (8004d14 <HAL_TIM_MspPostInit+0x6c>)
 8004d02:	f002 f863 	bl	8006dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004d06:	bf00      	nop
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023800 	.word	0x40023800
 8004d14:	40020000 	.word	0x40020000

08004d18 <MX_UART8_Init>:
DMA_HandleTypeDef hdma_usart3_tx;
DMA_HandleTypeDef hdma_usart6_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <MX_UART8_Init+0x4c>)
 8004d1e:	4a12      	ldr	r2, [pc, #72]	; (8004d68 <MX_UART8_Init+0x50>)
 8004d20:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <MX_UART8_Init+0x4c>)
 8004d24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004d28:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <MX_UART8_Init+0x4c>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <MX_UART8_Init+0x4c>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <MX_UART8_Init+0x4c>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <MX_UART8_Init+0x4c>)
 8004d3e:	220c      	movs	r2, #12
 8004d40:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d42:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <MX_UART8_Init+0x4c>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <MX_UART8_Init+0x4c>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8004d4e:	4805      	ldr	r0, [pc, #20]	; (8004d64 <MX_UART8_Init+0x4c>)
 8004d50:	f005 ff74 	bl	800ac3c <HAL_UART_Init>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8004d5a:	f7fe fedb 	bl	8003b14 <Error_Handler>
  }

}
 8004d5e:	bf00      	nop
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	20001544 	.word	0x20001544
 8004d68:	40007c00 	.word	0x40007c00

08004d6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <MX_USART3_UART_Init+0x4c>)
 8004d72:	4a12      	ldr	r2, [pc, #72]	; (8004dbc <MX_USART3_UART_Init+0x50>)
 8004d74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <MX_USART3_UART_Init+0x4c>)
 8004d78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004d7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <MX_USART3_UART_Init+0x4c>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <MX_USART3_UART_Init+0x4c>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <MX_USART3_UART_Init+0x4c>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004d90:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <MX_USART3_UART_Init+0x4c>)
 8004d92:	220c      	movs	r2, #12
 8004d94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d96:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <MX_USART3_UART_Init+0x4c>)
 8004d98:	2200      	movs	r2, #0
 8004d9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d9c:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <MX_USART3_UART_Init+0x4c>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004da2:	4805      	ldr	r0, [pc, #20]	; (8004db8 <MX_USART3_UART_Init+0x4c>)
 8004da4:	f005 ff4a 	bl	800ac3c <HAL_UART_Init>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004dae:	f7fe feb1 	bl	8003b14 <Error_Handler>
  }

}
 8004db2:	bf00      	nop
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	200014a4 	.word	0x200014a4
 8004dbc:	40004800 	.word	0x40004800

08004dc0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <MX_USART6_UART_Init+0x4c>)
 8004dc6:	4a12      	ldr	r2, [pc, #72]	; (8004e10 <MX_USART6_UART_Init+0x50>)
 8004dc8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004dca:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <MX_USART6_UART_Init+0x4c>)
 8004dcc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004dd0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004dd2:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <MX_USART6_UART_Init+0x4c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <MX_USART6_UART_Init+0x4c>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004dde:	4b0b      	ldr	r3, [pc, #44]	; (8004e0c <MX_USART6_UART_Init+0x4c>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <MX_USART6_UART_Init+0x4c>)
 8004de6:	220c      	movs	r2, #12
 8004de8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004dea:	4b08      	ldr	r3, [pc, #32]	; (8004e0c <MX_USART6_UART_Init+0x4c>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <MX_USART6_UART_Init+0x4c>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004df6:	4805      	ldr	r0, [pc, #20]	; (8004e0c <MX_USART6_UART_Init+0x4c>)
 8004df8:	f005 ff20 	bl	800ac3c <HAL_UART_Init>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004e02:	f7fe fe87 	bl	8003b14 <Error_Handler>
  }

}
 8004e06:	bf00      	nop
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	20001584 	.word	0x20001584
 8004e10:	40011400 	.word	0x40011400

08004e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08e      	sub	sp, #56	; 0x38
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
 8004e2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a9a      	ldr	r2, [pc, #616]	; (800509c <HAL_UART_MspInit+0x288>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d12c      	bne.n	8004e90 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	623b      	str	r3, [r7, #32]
 8004e3a:	4b99      	ldr	r3, [pc, #612]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	4a98      	ldr	r2, [pc, #608]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004e40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e44:	6413      	str	r3, [r2, #64]	; 0x40
 8004e46:	4b96      	ldr	r3, [pc, #600]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e4e:	623b      	str	r3, [r7, #32]
 8004e50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	4b92      	ldr	r3, [pc, #584]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	4a91      	ldr	r2, [pc, #580]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004e5c:	f043 0310 	orr.w	r3, r3, #16
 8004e60:	6313      	str	r3, [r2, #48]	; 0x30
 8004e62:	4b8f      	ldr	r3, [pc, #572]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	61fb      	str	r3, [r7, #28]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = UART8_RX_Debug_Pin|UART8_TX_Debug_Pin;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e72:	2302      	movs	r3, #2
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e76:	2301      	movs	r3, #1
 8004e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004e7e:	2308      	movs	r3, #8
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e86:	4619      	mov	r1, r3
 8004e88:	4886      	ldr	r0, [pc, #536]	; (80050a4 <HAL_UART_MspInit+0x290>)
 8004e8a:	f001 ff9f 	bl	8006dcc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004e8e:	e100      	b.n	8005092 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART3)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a84      	ldr	r2, [pc, #528]	; (80050a8 <HAL_UART_MspInit+0x294>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	f040 8093 	bne.w	8004fc2 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	61bb      	str	r3, [r7, #24]
 8004ea0:	4b7f      	ldr	r3, [pc, #508]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	4a7e      	ldr	r2, [pc, #504]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8004eac:	4b7c      	ldr	r3, [pc, #496]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb4:	61bb      	str	r3, [r7, #24]
 8004eb6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	4b78      	ldr	r3, [pc, #480]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec0:	4a77      	ldr	r2, [pc, #476]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004ec2:	f043 0308 	orr.w	r3, r3, #8
 8004ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec8:	4b75      	ldr	r3, [pc, #468]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART3_TX_XTend_Pin|USART3_RX_XTend_Pin;
 8004ed4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eda:	2302      	movs	r3, #2
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004ee6:	2307      	movs	r3, #7
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eee:	4619      	mov	r1, r3
 8004ef0:	486e      	ldr	r0, [pc, #440]	; (80050ac <HAL_UART_MspInit+0x298>)
 8004ef2:	f001 ff6b 	bl	8006dcc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004ef6:	4b6e      	ldr	r3, [pc, #440]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004ef8:	4a6e      	ldr	r2, [pc, #440]	; (80050b4 <HAL_UART_MspInit+0x2a0>)
 8004efa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004efc:	4b6c      	ldr	r3, [pc, #432]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004efe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f02:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f04:	4b6a      	ldr	r3, [pc, #424]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f0a:	4b69      	ldr	r3, [pc, #420]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f10:	4b67      	ldr	r3, [pc, #412]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f16:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f18:	4b65      	ldr	r3, [pc, #404]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f1e:	4b64      	ldr	r3, [pc, #400]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004f24:	4b62      	ldr	r3, [pc, #392]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004f2a:	4b61      	ldr	r3, [pc, #388]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004f30:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f32:	4b5f      	ldr	r3, [pc, #380]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004f38:	485d      	ldr	r0, [pc, #372]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f3a:	f001 fbb5 	bl	80066a8 <HAL_DMA_Init>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8004f44:	f7fe fde6 	bl	8003b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a59      	ldr	r2, [pc, #356]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8004f4e:	4a58      	ldr	r2, [pc, #352]	; (80050b0 <HAL_UART_MspInit+0x29c>)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004f54:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f56:	4a59      	ldr	r2, [pc, #356]	; (80050bc <HAL_UART_MspInit+0x2a8>)
 8004f58:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004f5a:	4b57      	ldr	r3, [pc, #348]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f60:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f62:	4b55      	ldr	r3, [pc, #340]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f64:	2240      	movs	r2, #64	; 0x40
 8004f66:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f68:	4b53      	ldr	r3, [pc, #332]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f6e:	4b52      	ldr	r3, [pc, #328]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f74:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f76:	4b50      	ldr	r3, [pc, #320]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f7c:	4b4e      	ldr	r3, [pc, #312]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004f82:	4b4d      	ldr	r3, [pc, #308]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f88:	4b4b      	ldr	r3, [pc, #300]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f8e:	4b4a      	ldr	r3, [pc, #296]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004f94:	4848      	ldr	r0, [pc, #288]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004f96:	f001 fb87 	bl	80066a8 <HAL_DMA_Init>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8004fa0:	f7fe fdb8 	bl	8003b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a44      	ldr	r2, [pc, #272]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8004faa:	4a43      	ldr	r2, [pc, #268]	; (80050b8 <HAL_UART_MspInit+0x2a4>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	2027      	movs	r0, #39	; 0x27
 8004fb6:	f001 fb40 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004fba:	2027      	movs	r0, #39	; 0x27
 8004fbc:	f001 fb59 	bl	8006672 <HAL_NVIC_EnableIRQ>
}
 8004fc0:	e067      	b.n	8005092 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART6)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a3e      	ldr	r2, [pc, #248]	; (80050c0 <HAL_UART_MspInit+0x2ac>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d162      	bne.n	8005092 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	4b33      	ldr	r3, [pc, #204]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	4a32      	ldr	r2, [pc, #200]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004fd6:	f043 0320 	orr.w	r3, r3, #32
 8004fda:	6453      	str	r3, [r2, #68]	; 0x44
 8004fdc:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	4b2c      	ldr	r3, [pc, #176]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff0:	4a2b      	ldr	r2, [pc, #172]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004ff2:	f043 0304 	orr.w	r3, r3, #4
 8004ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff8:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <HAL_UART_MspInit+0x28c>)
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART6_TX_GPS_Pin|USART6_RX_GPS_Pin;
 8005004:	23c0      	movs	r3, #192	; 0xc0
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005008:	2302      	movs	r3, #2
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005010:	2303      	movs	r3, #3
 8005012:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005014:	2308      	movs	r3, #8
 8005016:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800501c:	4619      	mov	r1, r3
 800501e:	4829      	ldr	r0, [pc, #164]	; (80050c4 <HAL_UART_MspInit+0x2b0>)
 8005020:	f001 fed4 	bl	8006dcc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005024:	4b28      	ldr	r3, [pc, #160]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 8005026:	4a29      	ldr	r2, [pc, #164]	; (80050cc <HAL_UART_MspInit+0x2b8>)
 8005028:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800502a:	4b27      	ldr	r3, [pc, #156]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 800502c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005030:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005032:	4b25      	ldr	r3, [pc, #148]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 8005034:	2200      	movs	r2, #0
 8005036:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005038:	4b23      	ldr	r3, [pc, #140]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 800503a:	2200      	movs	r2, #0
 800503c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800503e:	4b22      	ldr	r3, [pc, #136]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 8005040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005044:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005046:	4b20      	ldr	r3, [pc, #128]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 8005048:	2200      	movs	r2, #0
 800504a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800504c:	4b1e      	ldr	r3, [pc, #120]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 800504e:	2200      	movs	r2, #0
 8005050:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8005052:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 8005054:	2200      	movs	r2, #0
 8005056:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005058:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 800505a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800505e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005060:	4b19      	ldr	r3, [pc, #100]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 8005062:	2200      	movs	r2, #0
 8005064:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005066:	4818      	ldr	r0, [pc, #96]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 8005068:	f001 fb1e 	bl	80066a8 <HAL_DMA_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_UART_MspInit+0x262>
      Error_Handler();
 8005072:	f7fe fd4f 	bl	8003b14 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a13      	ldr	r2, [pc, #76]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 800507a:	635a      	str	r2, [r3, #52]	; 0x34
 800507c:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <HAL_UART_MspInit+0x2b4>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005082:	2200      	movs	r2, #0
 8005084:	2100      	movs	r1, #0
 8005086:	2047      	movs	r0, #71	; 0x47
 8005088:	f001 fad7 	bl	800663a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800508c:	2047      	movs	r0, #71	; 0x47
 800508e:	f001 faf0 	bl	8006672 <HAL_NVIC_EnableIRQ>
}
 8005092:	bf00      	nop
 8005094:	3738      	adds	r7, #56	; 0x38
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40007c00 	.word	0x40007c00
 80050a0:	40023800 	.word	0x40023800
 80050a4:	40021000 	.word	0x40021000
 80050a8:	40004800 	.word	0x40004800
 80050ac:	40020c00 	.word	0x40020c00
 80050b0:	20001444 	.word	0x20001444
 80050b4:	40026028 	.word	0x40026028
 80050b8:	200014e4 	.word	0x200014e4
 80050bc:	40026058 	.word	0x40026058
 80050c0:	40011400 	.word	0x40011400
 80050c4:	40020800 	.word	0x40020800
 80050c8:	200013e4 	.word	0x200013e4
 80050cc:	40026428 	.word	0x40026428

080050d0 <VR_Power_On>:


#include "main.h"


void VR_Power_On(void) {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, SET);
 80050d4:	2201      	movs	r2, #1
 80050d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050da:	4804      	ldr	r0, [pc, #16]	; (80050ec <VR_Power_On+0x1c>)
 80050dc:	f002 f83a 	bl	8007154 <HAL_GPIO_WritePin>
	// note that runcam needs around 3-5 seconds to fully power on
	HAL_Delay(5000);
 80050e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80050e4:	f000 fdae 	bl	8005c44 <HAL_Delay>
}
 80050e8:	bf00      	nop
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	40021800 	.word	0x40021800

080050f0 <VR_Power_Off>:

void VR_Power_Off(void) {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(VR_CTRL_PWR_GPIO_Port, VR_CTRL_PWR_Pin, RESET);
 80050f4:	2200      	movs	r2, #0
 80050f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050fa:	4802      	ldr	r0, [pc, #8]	; (8005104 <VR_Power_Off+0x14>)
 80050fc:	f002 f82a 	bl	8007154 <HAL_GPIO_WritePin>
}
 8005100:	bf00      	nop
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40021800 	.word	0x40021800

08005108 <VR_Start_Rec>:

void VR_Start_Rec(void) {
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0

	// specific sequence of SET/RESET to start recording
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 800510c:	2201      	movs	r2, #1
 800510e:	2180      	movs	r1, #128	; 0x80
 8005110:	480f      	ldr	r0, [pc, #60]	; (8005150 <VR_Start_Rec+0x48>)
 8005112:	f002 f81f 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8005116:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800511a:	f000 fd93 	bl	8005c44 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 800511e:	2200      	movs	r2, #0
 8005120:	2180      	movs	r1, #128	; 0x80
 8005122:	480b      	ldr	r0, [pc, #44]	; (8005150 <VR_Start_Rec+0x48>)
 8005124:	f002 f816 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 8005128:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800512c:	f000 fd8a 	bl	8005c44 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8005130:	2201      	movs	r2, #1
 8005132:	2180      	movs	r1, #128	; 0x80
 8005134:	4806      	ldr	r0, [pc, #24]	; (8005150 <VR_Start_Rec+0x48>)
 8005136:	f002 f80d 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_Delay(400);
 800513a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800513e:	f000 fd81 	bl	8005c44 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 8005142:	2200      	movs	r2, #0
 8005144:	2180      	movs	r1, #128	; 0x80
 8005146:	4802      	ldr	r0, [pc, #8]	; (8005150 <VR_Start_Rec+0x48>)
 8005148:	f002 f804 	bl	8007154 <HAL_GPIO_WritePin>

}
 800514c:	bf00      	nop
 800514e:	bd80      	pop	{r7, pc}
 8005150:	40020c00 	.word	0x40020c00

08005154 <VR_Stop_Rec>:

void VR_Stop_Rec(void) {
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, SET);
 8005158:	2201      	movs	r2, #1
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	4806      	ldr	r0, [pc, #24]	; (8005178 <VR_Stop_Rec+0x24>)
 800515e:	f001 fff9 	bl	8007154 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8005162:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005166:	f000 fd6d 	bl	8005c44 <HAL_Delay>
	HAL_GPIO_WritePin(VR_CTRL_REC_GPIO_Port, VR_CTRL_REC_Pin, RESET);
 800516a:	2200      	movs	r2, #0
 800516c:	2180      	movs	r1, #128	; 0x80
 800516e:	4802      	ldr	r0, [pc, #8]	; (8005178 <VR_Stop_Rec+0x24>)
 8005170:	f001 fff0 	bl	8007154 <HAL_GPIO_WritePin>
}
 8005174:	bf00      	nop
 8005176:	bd80      	pop	{r7, pc}
 8005178:	40020c00 	.word	0x40020c00

0800517c <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af02      	add	r7, sp, #8
 8005182:	4603      	mov	r3, r0
 8005184:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 8005186:	f107 020f 	add.w	r2, r7, #15
 800518a:	1df9      	adds	r1, r7, #7
 800518c:	2364      	movs	r3, #100	; 0x64
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	2301      	movs	r3, #1
 8005192:	4804      	ldr	r0, [pc, #16]	; (80051a4 <W25qxx_Spi+0x28>)
 8005194:	f004 fb2b 	bl	80097ee <HAL_SPI_TransmitReceive>
	return ret;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	200012cc 	.word	0x200012cc

080051a8 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	2300      	movs	r3, #0
 80051b8:	607b      	str	r3, [r7, #4]
 80051ba:	2300      	movs	r3, #0
 80051bc:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80051be:	2200      	movs	r2, #0
 80051c0:	2140      	movs	r1, #64	; 0x40
 80051c2:	4813      	ldr	r0, [pc, #76]	; (8005210 <W25qxx_ReadID+0x68>)
 80051c4:	f001 ffc6 	bl	8007154 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80051c8:	209f      	movs	r0, #159	; 0x9f
 80051ca:	f7ff ffd7 	bl	800517c <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80051ce:	20a5      	movs	r0, #165	; 0xa5
 80051d0:	f7ff ffd4 	bl	800517c <W25qxx_Spi>
 80051d4:	4603      	mov	r3, r0
 80051d6:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80051d8:	20a5      	movs	r0, #165	; 0xa5
 80051da:	f7ff ffcf 	bl	800517c <W25qxx_Spi>
 80051de:	4603      	mov	r3, r0
 80051e0:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80051e2:	20a5      	movs	r0, #165	; 0xa5
 80051e4:	f7ff ffca 	bl	800517c <W25qxx_Spi>
 80051e8:	4603      	mov	r3, r0
 80051ea:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80051ec:	2201      	movs	r2, #1
 80051ee:	2140      	movs	r1, #64	; 0x40
 80051f0:	4807      	ldr	r0, [pc, #28]	; (8005210 <W25qxx_ReadID+0x68>)
 80051f2:	f001 ffaf 	bl	8007154 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	041a      	lsls	r2, r3, #16
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	4313      	orrs	r3, r2
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
	return Temp;
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40020c00 	.word	0x40020c00

08005214 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8005214:	b590      	push	{r4, r7, lr}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800521a:	2200      	movs	r2, #0
 800521c:	2140      	movs	r1, #64	; 0x40
 800521e:	4816      	ldr	r0, [pc, #88]	; (8005278 <W25qxx_ReadUniqID+0x64>)
 8005220:	f001 ff98 	bl	8007154 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8005224:	204b      	movs	r0, #75	; 0x4b
 8005226:	f7ff ffa9 	bl	800517c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800522a:	2300      	movs	r3, #0
 800522c:	71fb      	strb	r3, [r7, #7]
 800522e:	e005      	b.n	800523c <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005230:	20a5      	movs	r0, #165	; 0xa5
 8005232:	f7ff ffa3 	bl	800517c <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8005236:	79fb      	ldrb	r3, [r7, #7]
 8005238:	3301      	adds	r3, #1
 800523a:	71fb      	strb	r3, [r7, #7]
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	2b03      	cmp	r3, #3
 8005240:	d9f6      	bls.n	8005230 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8005242:	2300      	movs	r3, #0
 8005244:	71bb      	strb	r3, [r7, #6]
 8005246:	e00b      	b.n	8005260 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005248:	79bc      	ldrb	r4, [r7, #6]
 800524a:	20a5      	movs	r0, #165	; 0xa5
 800524c:	f7ff ff96 	bl	800517c <W25qxx_Spi>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	4b09      	ldr	r3, [pc, #36]	; (800527c <W25qxx_ReadUniqID+0x68>)
 8005256:	4423      	add	r3, r4
 8005258:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800525a:	79bb      	ldrb	r3, [r7, #6]
 800525c:	3301      	adds	r3, #1
 800525e:	71bb      	strb	r3, [r7, #6]
 8005260:	79bb      	ldrb	r3, [r7, #6]
 8005262:	2b07      	cmp	r3, #7
 8005264:	d9f0      	bls.n	8005248 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005266:	2201      	movs	r2, #1
 8005268:	2140      	movs	r1, #64	; 0x40
 800526a:	4803      	ldr	r0, [pc, #12]	; (8005278 <W25qxx_ReadUniqID+0x64>)
 800526c:	f001 ff72 	bl	8007154 <HAL_GPIO_WritePin>
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	bd90      	pop	{r4, r7, pc}
 8005278:	40020c00 	.word	0x40020c00
 800527c:	200015c4 	.word	0x200015c4

08005280 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005284:	2200      	movs	r2, #0
 8005286:	2140      	movs	r1, #64	; 0x40
 8005288:	4807      	ldr	r0, [pc, #28]	; (80052a8 <W25qxx_WriteEnable+0x28>)
 800528a:	f001 ff63 	bl	8007154 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 800528e:	2006      	movs	r0, #6
 8005290:	f7ff ff74 	bl	800517c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005294:	2201      	movs	r2, #1
 8005296:	2140      	movs	r1, #64	; 0x40
 8005298:	4803      	ldr	r0, [pc, #12]	; (80052a8 <W25qxx_WriteEnable+0x28>)
 800529a:	f001 ff5b 	bl	8007154 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 800529e:	2001      	movs	r0, #1
 80052a0:	f000 fcd0 	bl	8005c44 <HAL_Delay>
}
 80052a4:	bf00      	nop
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40020c00 	.word	0x40020c00

080052ac <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2140      	movs	r1, #64	; 0x40
 80052be:	481c      	ldr	r0, [pc, #112]	; (8005330 <W25qxx_ReadStatusRegister+0x84>)
 80052c0:	f001 ff48 	bl	8007154 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d10c      	bne.n	80052e4 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 80052ca:	2005      	movs	r0, #5
 80052cc:	f7ff ff56 	bl	800517c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80052d0:	20a5      	movs	r0, #165	; 0xa5
 80052d2:	f7ff ff53 	bl	800517c <W25qxx_Spi>
 80052d6:	4603      	mov	r3, r0
 80052d8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80052da:	4a16      	ldr	r2, [pc, #88]	; (8005334 <W25qxx_ReadStatusRegister+0x88>)
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
 80052de:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80052e2:	e01b      	b.n	800531c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 80052e4:	79fb      	ldrb	r3, [r7, #7]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d10c      	bne.n	8005304 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 80052ea:	2035      	movs	r0, #53	; 0x35
 80052ec:	f7ff ff46 	bl	800517c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80052f0:	20a5      	movs	r0, #165	; 0xa5
 80052f2:	f7ff ff43 	bl	800517c <W25qxx_Spi>
 80052f6:	4603      	mov	r3, r0
 80052f8:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80052fa:	4a0e      	ldr	r2, [pc, #56]	; (8005334 <W25qxx_ReadStatusRegister+0x88>)
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8005302:	e00b      	b.n	800531c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8005304:	2015      	movs	r0, #21
 8005306:	f7ff ff39 	bl	800517c <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800530a:	20a5      	movs	r0, #165	; 0xa5
 800530c:	f7ff ff36 	bl	800517c <W25qxx_Spi>
 8005310:	4603      	mov	r3, r0
 8005312:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8005314:	4a07      	ldr	r2, [pc, #28]	; (8005334 <W25qxx_ReadStatusRegister+0x88>)
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800531c:	2201      	movs	r2, #1
 800531e:	2140      	movs	r1, #64	; 0x40
 8005320:	4803      	ldr	r0, [pc, #12]	; (8005330 <W25qxx_ReadStatusRegister+0x84>)
 8005322:	f001 ff17 	bl	8007154 <HAL_GPIO_WritePin>
	return status;
 8005326:	7bfb      	ldrb	r3, [r7, #15]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40020c00 	.word	0x40020c00
 8005334:	200015c4 	.word	0x200015c4

08005338 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 800533c:	2001      	movs	r0, #1
 800533e:	f000 fc81 	bl	8005c44 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005342:	2200      	movs	r2, #0
 8005344:	2140      	movs	r1, #64	; 0x40
 8005346:	480f      	ldr	r0, [pc, #60]	; (8005384 <W25qxx_WaitForWriteEnd+0x4c>)
 8005348:	f001 ff04 	bl	8007154 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 800534c:	2005      	movs	r0, #5
 800534e:	f7ff ff15 	bl	800517c <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8005352:	20a5      	movs	r0, #165	; 0xa5
 8005354:	f7ff ff12 	bl	800517c <W25qxx_Spi>
 8005358:	4603      	mov	r3, r0
 800535a:	461a      	mov	r2, r3
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <W25qxx_WaitForWriteEnd+0x50>)
 800535e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 8005362:	2001      	movs	r0, #1
 8005364:	f000 fc6e 	bl	8005c44 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8005368:	4b07      	ldr	r3, [pc, #28]	; (8005388 <W25qxx_WaitForWriteEnd+0x50>)
 800536a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1ed      	bne.n	8005352 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005376:	2201      	movs	r2, #1
 8005378:	2140      	movs	r1, #64	; 0x40
 800537a:	4802      	ldr	r0, [pc, #8]	; (8005384 <W25qxx_WaitForWriteEnd+0x4c>)
 800537c:	f001 feea 	bl	8007154 <HAL_GPIO_WritePin>
}
 8005380:	bf00      	nop
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40020c00 	.word	0x40020c00
 8005388:	200015c4 	.word	0x200015c4

0800538c <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8005392:	4b90      	ldr	r3, [pc, #576]	; (80055d4 <W25qxx_Init+0x248>)
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800539a:	e002      	b.n	80053a2 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 800539c:	2001      	movs	r0, #1
 800539e:	f000 fc51 	bl	8005c44 <HAL_Delay>
	while (HAL_GetTick() < 100)
 80053a2:	f000 fc43 	bl	8005c2c <HAL_GetTick>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b63      	cmp	r3, #99	; 0x63
 80053aa:	d9f7      	bls.n	800539c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80053ac:	2201      	movs	r2, #1
 80053ae:	2140      	movs	r1, #64	; 0x40
 80053b0:	4889      	ldr	r0, [pc, #548]	; (80055d8 <W25qxx_Init+0x24c>)
 80053b2:	f001 fecf 	bl	8007154 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 80053b6:	2064      	movs	r0, #100	; 0x64
 80053b8:	f000 fc44 	bl	8005c44 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
 80053bc:	4887      	ldr	r0, [pc, #540]	; (80055dc <W25qxx_Init+0x250>)
 80053be:	f00a ffa7 	bl	8010310 <puts>
#endif
	id = W25qxx_ReadID();
 80053c2:	f7ff fef1 	bl	80051a8 <W25qxx_ReadID>
 80053c6:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4885      	ldr	r0, [pc, #532]	; (80055e0 <W25qxx_Init+0x254>)
 80053cc:	f00a ff1a 	bl	8010204 <iprintf>
#endif
	switch (id & 0x000000FF)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	3b11      	subs	r3, #17
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	f200 808b 	bhi.w	80054f2 <W25qxx_Init+0x166>
 80053dc:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <W25qxx_Init+0x58>)
 80053de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e2:	bf00      	nop
 80053e4:	080054df 	.word	0x080054df
 80053e8:	080054cb 	.word	0x080054cb
 80053ec:	080054b7 	.word	0x080054b7
 80053f0:	080054a3 	.word	0x080054a3
 80053f4:	0800548f 	.word	0x0800548f
 80053f8:	0800547b 	.word	0x0800547b
 80053fc:	08005467 	.word	0x08005467
 8005400:	08005451 	.word	0x08005451
 8005404:	0800543b 	.word	0x0800543b
 8005408:	080054f3 	.word	0x080054f3
 800540c:	080054f3 	.word	0x080054f3
 8005410:	080054f3 	.word	0x080054f3
 8005414:	080054f3 	.word	0x080054f3
 8005418:	080054f3 	.word	0x080054f3
 800541c:	080054f3 	.word	0x080054f3
 8005420:	08005425 	.word	0x08005425
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8005424:	4b6b      	ldr	r3, [pc, #428]	; (80055d4 <W25qxx_Init+0x248>)
 8005426:	220a      	movs	r2, #10
 8005428:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800542a:	4b6a      	ldr	r3, [pc, #424]	; (80055d4 <W25qxx_Init+0x248>)
 800542c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005430:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
 8005432:	486c      	ldr	r0, [pc, #432]	; (80055e4 <W25qxx_Init+0x258>)
 8005434:	f00a ff6c 	bl	8010310 <puts>
#endif
		break;
 8005438:	e064      	b.n	8005504 <W25qxx_Init+0x178>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 800543a:	4b66      	ldr	r3, [pc, #408]	; (80055d4 <W25qxx_Init+0x248>)
 800543c:	2209      	movs	r2, #9
 800543e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8005440:	4b64      	ldr	r3, [pc, #400]	; (80055d4 <W25qxx_Init+0x248>)
 8005442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005446:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
 8005448:	4867      	ldr	r0, [pc, #412]	; (80055e8 <W25qxx_Init+0x25c>)
 800544a:	f00a ff61 	bl	8010310 <puts>
#endif
		break;
 800544e:	e059      	b.n	8005504 <W25qxx_Init+0x178>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8005450:	4b60      	ldr	r3, [pc, #384]	; (80055d4 <W25qxx_Init+0x248>)
 8005452:	2208      	movs	r2, #8
 8005454:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8005456:	4b5f      	ldr	r3, [pc, #380]	; (80055d4 <W25qxx_Init+0x248>)
 8005458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800545c:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
 800545e:	4863      	ldr	r0, [pc, #396]	; (80055ec <W25qxx_Init+0x260>)
 8005460:	f00a ff56 	bl	8010310 <puts>
#endif
		break;
 8005464:	e04e      	b.n	8005504 <W25qxx_Init+0x178>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8005466:	4b5b      	ldr	r3, [pc, #364]	; (80055d4 <W25qxx_Init+0x248>)
 8005468:	2207      	movs	r2, #7
 800546a:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 800546c:	4b59      	ldr	r3, [pc, #356]	; (80055d4 <W25qxx_Init+0x248>)
 800546e:	2280      	movs	r2, #128	; 0x80
 8005470:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
 8005472:	485f      	ldr	r0, [pc, #380]	; (80055f0 <W25qxx_Init+0x264>)
 8005474:	f00a ff4c 	bl	8010310 <puts>
#endif
		break;
 8005478:	e044      	b.n	8005504 <W25qxx_Init+0x178>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 800547a:	4b56      	ldr	r3, [pc, #344]	; (80055d4 <W25qxx_Init+0x248>)
 800547c:	2206      	movs	r2, #6
 800547e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8005480:	4b54      	ldr	r3, [pc, #336]	; (80055d4 <W25qxx_Init+0x248>)
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
 8005486:	485b      	ldr	r0, [pc, #364]	; (80055f4 <W25qxx_Init+0x268>)
 8005488:	f00a ff42 	bl	8010310 <puts>
#endif
		break;
 800548c:	e03a      	b.n	8005504 <W25qxx_Init+0x178>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 800548e:	4b51      	ldr	r3, [pc, #324]	; (80055d4 <W25qxx_Init+0x248>)
 8005490:	2205      	movs	r2, #5
 8005492:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8005494:	4b4f      	ldr	r3, [pc, #316]	; (80055d4 <W25qxx_Init+0x248>)
 8005496:	2220      	movs	r2, #32
 8005498:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
 800549a:	4857      	ldr	r0, [pc, #348]	; (80055f8 <W25qxx_Init+0x26c>)
 800549c:	f00a ff38 	bl	8010310 <puts>
#endif
		break;
 80054a0:	e030      	b.n	8005504 <W25qxx_Init+0x178>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80054a2:	4b4c      	ldr	r3, [pc, #304]	; (80055d4 <W25qxx_Init+0x248>)
 80054a4:	2204      	movs	r2, #4
 80054a6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80054a8:	4b4a      	ldr	r3, [pc, #296]	; (80055d4 <W25qxx_Init+0x248>)
 80054aa:	2210      	movs	r2, #16
 80054ac:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
 80054ae:	4853      	ldr	r0, [pc, #332]	; (80055fc <W25qxx_Init+0x270>)
 80054b0:	f00a ff2e 	bl	8010310 <puts>
#endif
		break;
 80054b4:	e026      	b.n	8005504 <W25qxx_Init+0x178>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80054b6:	4b47      	ldr	r3, [pc, #284]	; (80055d4 <W25qxx_Init+0x248>)
 80054b8:	2203      	movs	r2, #3
 80054ba:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80054bc:	4b45      	ldr	r3, [pc, #276]	; (80055d4 <W25qxx_Init+0x248>)
 80054be:	2208      	movs	r2, #8
 80054c0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
 80054c2:	484f      	ldr	r0, [pc, #316]	; (8005600 <W25qxx_Init+0x274>)
 80054c4:	f00a ff24 	bl	8010310 <puts>
#endif
		break;
 80054c8:	e01c      	b.n	8005504 <W25qxx_Init+0x178>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80054ca:	4b42      	ldr	r3, [pc, #264]	; (80055d4 <W25qxx_Init+0x248>)
 80054cc:	2202      	movs	r2, #2
 80054ce:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80054d0:	4b40      	ldr	r3, [pc, #256]	; (80055d4 <W25qxx_Init+0x248>)
 80054d2:	2204      	movs	r2, #4
 80054d4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
 80054d6:	484b      	ldr	r0, [pc, #300]	; (8005604 <W25qxx_Init+0x278>)
 80054d8:	f00a ff1a 	bl	8010310 <puts>
#endif
		break;
 80054dc:	e012      	b.n	8005504 <W25qxx_Init+0x178>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 80054de:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <W25qxx_Init+0x248>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 80054e4:	4b3b      	ldr	r3, [pc, #236]	; (80055d4 <W25qxx_Init+0x248>)
 80054e6:	2202      	movs	r2, #2
 80054e8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
 80054ea:	4847      	ldr	r0, [pc, #284]	; (8005608 <W25qxx_Init+0x27c>)
 80054ec:	f00a ff10 	bl	8010310 <puts>
#endif
		break;
 80054f0:	e008      	b.n	8005504 <W25qxx_Init+0x178>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
 80054f2:	4846      	ldr	r0, [pc, #280]	; (800560c <W25qxx_Init+0x280>)
 80054f4:	f00a ff0c 	bl	8010310 <puts>
#endif
		w25qxx.Lock = 0;
 80054f8:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <W25qxx_Init+0x248>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8005500:	2300      	movs	r3, #0
 8005502:	e063      	b.n	80055cc <W25qxx_Init+0x240>
	}
	w25qxx.PageSize = 256;
 8005504:	4b33      	ldr	r3, [pc, #204]	; (80055d4 <W25qxx_Init+0x248>)
 8005506:	f44f 7280 	mov.w	r2, #256	; 0x100
 800550a:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800550c:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <W25qxx_Init+0x248>)
 800550e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005512:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8005514:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <W25qxx_Init+0x248>)
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	4a2e      	ldr	r2, [pc, #184]	; (80055d4 <W25qxx_Init+0x248>)
 800551c:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 800551e:	4b2d      	ldr	r3, [pc, #180]	; (80055d4 <W25qxx_Init+0x248>)
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	4a2c      	ldr	r2, [pc, #176]	; (80055d4 <W25qxx_Init+0x248>)
 8005524:	6912      	ldr	r2, [r2, #16]
 8005526:	fb02 f303 	mul.w	r3, r2, r3
 800552a:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <W25qxx_Init+0x248>)
 800552c:	8952      	ldrh	r2, [r2, #10]
 800552e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005532:	4a28      	ldr	r2, [pc, #160]	; (80055d4 <W25qxx_Init+0x248>)
 8005534:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8005536:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <W25qxx_Init+0x248>)
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	4a25      	ldr	r2, [pc, #148]	; (80055d4 <W25qxx_Init+0x248>)
 800553e:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8005540:	4b24      	ldr	r3, [pc, #144]	; (80055d4 <W25qxx_Init+0x248>)
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	4a23      	ldr	r2, [pc, #140]	; (80055d4 <W25qxx_Init+0x248>)
 8005546:	6912      	ldr	r2, [r2, #16]
 8005548:	fb02 f303 	mul.w	r3, r2, r3
 800554c:	0a9b      	lsrs	r3, r3, #10
 800554e:	4a21      	ldr	r2, [pc, #132]	; (80055d4 <W25qxx_Init+0x248>)
 8005550:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8005552:	f7ff fe5f 	bl	8005214 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8005556:	2001      	movs	r0, #1
 8005558:	f7ff fea8 	bl	80052ac <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800555c:	2002      	movs	r0, #2
 800555e:	f7ff fea5 	bl	80052ac <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8005562:	2003      	movs	r0, #3
 8005564:	f7ff fea2 	bl	80052ac <W25qxx_ReadStatusRegister>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Page Size: %d Bytes\r\n", w25qxx.PageSize);
 8005568:	4b1a      	ldr	r3, [pc, #104]	; (80055d4 <W25qxx_Init+0x248>)
 800556a:	895b      	ldrh	r3, [r3, #10]
 800556c:	4619      	mov	r1, r3
 800556e:	4828      	ldr	r0, [pc, #160]	; (8005610 <W25qxx_Init+0x284>)
 8005570:	f00a fe48 	bl	8010204 <iprintf>
	printf("w25qxx Page Count: %d\r\n", w25qxx.PageCount);
 8005574:	4b17      	ldr	r3, [pc, #92]	; (80055d4 <W25qxx_Init+0x248>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	4619      	mov	r1, r3
 800557a:	4826      	ldr	r0, [pc, #152]	; (8005614 <W25qxx_Init+0x288>)
 800557c:	f00a fe42 	bl	8010204 <iprintf>
	printf("w25qxx Sector Size: %d Bytes\r\n", w25qxx.SectorSize);
 8005580:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <W25qxx_Init+0x248>)
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	4619      	mov	r1, r3
 8005586:	4824      	ldr	r0, [pc, #144]	; (8005618 <W25qxx_Init+0x28c>)
 8005588:	f00a fe3c 	bl	8010204 <iprintf>
	printf("w25qxx Sector Count: %d\r\n", w25qxx.SectorCount);
 800558c:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <W25qxx_Init+0x248>)
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	4619      	mov	r1, r3
 8005592:	4822      	ldr	r0, [pc, #136]	; (800561c <W25qxx_Init+0x290>)
 8005594:	f00a fe36 	bl	8010204 <iprintf>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
 8005598:	4b0e      	ldr	r3, [pc, #56]	; (80055d4 <W25qxx_Init+0x248>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	4619      	mov	r1, r3
 800559e:	4820      	ldr	r0, [pc, #128]	; (8005620 <W25qxx_Init+0x294>)
 80055a0:	f00a fe30 	bl	8010204 <iprintf>
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
 80055a4:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <W25qxx_Init+0x248>)
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	4619      	mov	r1, r3
 80055aa:	481e      	ldr	r0, [pc, #120]	; (8005624 <W25qxx_Init+0x298>)
 80055ac:	f00a fe2a 	bl	8010204 <iprintf>
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
 80055b0:	4b08      	ldr	r3, [pc, #32]	; (80055d4 <W25qxx_Init+0x248>)
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	4619      	mov	r1, r3
 80055b6:	481c      	ldr	r0, [pc, #112]	; (8005628 <W25qxx_Init+0x29c>)
 80055b8:	f00a fe24 	bl	8010204 <iprintf>
	printf("w25qxx Init Done\r\n");
 80055bc:	481b      	ldr	r0, [pc, #108]	; (800562c <W25qxx_Init+0x2a0>)
 80055be:	f00a fea7 	bl	8010310 <puts>
#endif
	w25qxx.Lock = 0;
 80055c2:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <W25qxx_Init+0x248>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 80055ca:	2301      	movs	r3, #1
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	200015c4 	.word	0x200015c4
 80055d8:	40020c00 	.word	0x40020c00
 80055dc:	080158a4 	.word	0x080158a4
 80055e0:	080158bc 	.word	0x080158bc
 80055e4:	080158d0 	.word	0x080158d0
 80055e8:	080158e8 	.word	0x080158e8
 80055ec:	08015900 	.word	0x08015900
 80055f0:	08015918 	.word	0x08015918
 80055f4:	08015930 	.word	0x08015930
 80055f8:	08015948 	.word	0x08015948
 80055fc:	08015960 	.word	0x08015960
 8005600:	08015978 	.word	0x08015978
 8005604:	08015990 	.word	0x08015990
 8005608:	080159a8 	.word	0x080159a8
 800560c:	080159c0 	.word	0x080159c0
 8005610:	080159d4 	.word	0x080159d4
 8005614:	080159f4 	.word	0x080159f4
 8005618:	08015a0c 	.word	0x08015a0c
 800561c:	08015a2c 	.word	0x08015a2c
 8005620:	08015a48 	.word	0x08015a48
 8005624:	08015a68 	.word	0x08015a68
 8005628:	08015a84 	.word	0x08015a84
 800562c:	08015aa4 	.word	0x08015aa4

08005630 <W25qxx_EraseBlock>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_EraseBlock(uint32_t BlockAddr)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8005638:	e002      	b.n	8005640 <W25qxx_EraseBlock+0x10>
		W25qxx_Delay(1);
 800563a:	2001      	movs	r0, #1
 800563c:	f000 fb02 	bl	8005c44 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8005640:	4b31      	ldr	r3, [pc, #196]	; (8005708 <W25qxx_EraseBlock+0xd8>)
 8005642:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005646:	2b01      	cmp	r3, #1
 8005648:	d0f7      	beq.n	800563a <W25qxx_EraseBlock+0xa>
	w25qxx.Lock = 1;
 800564a:	4b2f      	ldr	r3, [pc, #188]	; (8005708 <W25qxx_EraseBlock+0xd8>)
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock %d Begin...\r\n", BlockAddr);
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	482d      	ldr	r0, [pc, #180]	; (800570c <W25qxx_EraseBlock+0xdc>)
 8005656:	f00a fdd5 	bl	8010204 <iprintf>
	W25qxx_Delay(100);
 800565a:	2064      	movs	r0, #100	; 0x64
 800565c:	f000 faf2 	bl	8005c44 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 8005660:	f000 fae4 	bl	8005c2c <HAL_GetTick>
 8005664:	60f8      	str	r0, [r7, #12]
#endif
	W25qxx_WaitForWriteEnd();
 8005666:	f7ff fe67 	bl	8005338 <W25qxx_WaitForWriteEnd>
	BlockAddr = BlockAddr * w25qxx.SectorSize * 16;
 800566a:	4b27      	ldr	r3, [pc, #156]	; (8005708 <W25qxx_EraseBlock+0xd8>)
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	fb02 f303 	mul.w	r3, r2, r3
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8005678:	f7ff fe02 	bl	8005280 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800567c:	2200      	movs	r2, #0
 800567e:	2140      	movs	r1, #64	; 0x40
 8005680:	4823      	ldr	r0, [pc, #140]	; (8005710 <W25qxx_EraseBlock+0xe0>)
 8005682:	f001 fd67 	bl	8007154 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8005686:	4b20      	ldr	r3, [pc, #128]	; (8005708 <W25qxx_EraseBlock+0xd8>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b08      	cmp	r3, #8
 800568c:	d909      	bls.n	80056a2 <W25qxx_EraseBlock+0x72>
	{
		W25qxx_Spi(0xDC);
 800568e:	20dc      	movs	r0, #220	; 0xdc
 8005690:	f7ff fd74 	bl	800517c <W25qxx_Spi>
		W25qxx_Spi((BlockAddr & 0xFF000000) >> 24);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	0e1b      	lsrs	r3, r3, #24
 8005698:	b2db      	uxtb	r3, r3
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fd6e 	bl	800517c <W25qxx_Spi>
 80056a0:	e002      	b.n	80056a8 <W25qxx_EraseBlock+0x78>
	}
	else
	{
		W25qxx_Spi(0xD8);
 80056a2:	20d8      	movs	r0, #216	; 0xd8
 80056a4:	f7ff fd6a 	bl	800517c <W25qxx_Spi>
	}
	W25qxx_Spi((BlockAddr & 0xFF0000) >> 16);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	0c1b      	lsrs	r3, r3, #16
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	4618      	mov	r0, r3
 80056b0:	f7ff fd64 	bl	800517c <W25qxx_Spi>
	W25qxx_Spi((BlockAddr & 0xFF00) >> 8);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff fd5e 	bl	800517c <W25qxx_Spi>
	W25qxx_Spi(BlockAddr & 0xFF);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fd59 	bl	800517c <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80056ca:	2201      	movs	r2, #1
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	4810      	ldr	r0, [pc, #64]	; (8005710 <W25qxx_EraseBlock+0xe0>)
 80056d0:	f001 fd40 	bl	8007154 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 80056d4:	f7ff fe30 	bl	8005338 <W25qxx_WaitForWriteEnd>
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseBlock done after %d ms\r\n", HAL_GetTick() - StartTime);
 80056d8:	f000 faa8 	bl	8005c2c <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	4619      	mov	r1, r3
 80056e4:	480b      	ldr	r0, [pc, #44]	; (8005714 <W25qxx_EraseBlock+0xe4>)
 80056e6:	f00a fd8d 	bl	8010204 <iprintf>
	W25qxx_Delay(100);
 80056ea:	2064      	movs	r0, #100	; 0x64
 80056ec:	f000 faaa 	bl	8005c44 <HAL_Delay>
#endif
	W25qxx_Delay(1);
 80056f0:	2001      	movs	r0, #1
 80056f2:	f000 faa7 	bl	8005c44 <HAL_Delay>
	w25qxx.Lock = 0;
 80056f6:	4b04      	ldr	r3, [pc, #16]	; (8005708 <W25qxx_EraseBlock+0xd8>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80056fe:	bf00      	nop
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	200015c4 	.word	0x200015c4
 800570c:	08015b48 	.word	0x08015b48
 8005710:	40020c00 	.word	0x40020c00
 8005714:	08015b68 	.word	0x08015b68

08005718 <W25qxx_PageToBlock>:
{
	return ((PageAddress * w25qxx.PageSize) / w25qxx.SectorSize);
}
//###################################################################################################################
uint32_t W25qxx_PageToBlock(uint32_t PageAddress)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
	return ((PageAddress * w25qxx.PageSize) / w25qxx.BlockSize);
 8005720:	4b07      	ldr	r3, [pc, #28]	; (8005740 <W25qxx_PageToBlock+0x28>)
 8005722:	895b      	ldrh	r3, [r3, #10]
 8005724:	461a      	mov	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	fb03 f202 	mul.w	r2, r3, r2
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <W25qxx_PageToBlock+0x28>)
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005734:	4618      	mov	r0, r3
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	200015c4 	.word	0x200015c4

08005744 <W25qxx_IsEmptyPage>:
{
	return (BlockAddress * w25qxx.BlockSize) / w25qxx.PageSize;
}
//###################################################################################################################
bool W25qxx_IsEmptyPage(uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToCheck_up_to_PageSize)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b090      	sub	sp, #64	; 0x40
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
	while (w25qxx.Lock == 1)
 8005750:	e002      	b.n	8005758 <W25qxx_IsEmptyPage+0x14>
		W25qxx_Delay(1);
 8005752:	2001      	movs	r0, #1
 8005754:	f000 fa76 	bl	8005c44 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8005758:	4b85      	ldr	r3, [pc, #532]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 800575a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800575e:	2b01      	cmp	r3, #1
 8005760:	d0f7      	beq.n	8005752 <W25qxx_IsEmptyPage+0xe>
	w25qxx.Lock = 1;
 8005762:	4b83      	ldr	r3, [pc, #524]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToCheck_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToCheck_up_to_PageSize == 0))
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4413      	add	r3, r2
 8005770:	4a7f      	ldr	r2, [pc, #508]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 8005772:	8952      	ldrh	r2, [r2, #10]
 8005774:	4293      	cmp	r3, r2
 8005776:	d802      	bhi.n	800577e <W25qxx_IsEmptyPage+0x3a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d105      	bne.n	800578a <W25qxx_IsEmptyPage+0x46>
		NumByteToCheck_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 800577e:	4b7c      	ldr	r3, [pc, #496]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 8005780:	895b      	ldrh	r3, [r3, #10]
 8005782:	461a      	mov	r2, r3
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	607b      	str	r3, [r7, #4]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckPage:%d, Offset:%d, Bytes:%d begin...\r\n", Page_Address, OffsetInByte, NumByteToCheck_up_to_PageSize);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	4878      	ldr	r0, [pc, #480]	; (8005974 <W25qxx_IsEmptyPage+0x230>)
 8005792:	f00a fd37 	bl	8010204 <iprintf>
	W25qxx_Delay(100);
 8005796:	2064      	movs	r0, #100	; 0x64
 8005798:	f000 fa54 	bl	8005c44 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 800579c:	f000 fa46 	bl	8005c2c <HAL_GetTick>
 80057a0:	6378      	str	r0, [r7, #52]	; 0x34
#endif
	uint8_t pBuffer[32];
	uint32_t WorkAddress;
	uint32_t i;
	for (i = OffsetInByte; i < w25qxx.PageSize; i += sizeof(pBuffer))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057a6:	e057      	b.n	8005858 <W25qxx_IsEmptyPage+0x114>
	{
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80057a8:	2200      	movs	r2, #0
 80057aa:	2140      	movs	r1, #64	; 0x40
 80057ac:	4872      	ldr	r0, [pc, #456]	; (8005978 <W25qxx_IsEmptyPage+0x234>)
 80057ae:	f001 fcd1 	bl	8007154 <HAL_GPIO_WritePin>
		WorkAddress = (i + Page_Address * w25qxx.PageSize);
 80057b2:	4b6f      	ldr	r3, [pc, #444]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 80057b4:	895b      	ldrh	r3, [r3, #10]
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	fb03 f302 	mul.w	r3, r3, r2
 80057be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057c0:	4413      	add	r3, r2
 80057c2:	633b      	str	r3, [r7, #48]	; 0x30
		if (w25qxx.ID >= W25Q256)
 80057c4:	4b6a      	ldr	r3, [pc, #424]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d909      	bls.n	80057e0 <W25qxx_IsEmptyPage+0x9c>
		{
			W25qxx_Spi(0x0C);
 80057cc:	200c      	movs	r0, #12
 80057ce:	f7ff fcd5 	bl	800517c <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80057d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d4:	0e1b      	lsrs	r3, r3, #24
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fccf 	bl	800517c <W25qxx_Spi>
 80057de:	e002      	b.n	80057e6 <W25qxx_IsEmptyPage+0xa2>
		}
		else
		{
			W25qxx_Spi(0x0B);
 80057e0:	200b      	movs	r0, #11
 80057e2:	f7ff fccb 	bl	800517c <W25qxx_Spi>
		}
		W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	0c1b      	lsrs	r3, r3, #16
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff fcc5 	bl	800517c <W25qxx_Spi>
		W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	0a1b      	lsrs	r3, r3, #8
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fcbf 	bl	800517c <W25qxx_Spi>
		W25qxx_Spi(WorkAddress & 0xFF);
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	b2db      	uxtb	r3, r3
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff fcba 	bl	800517c <W25qxx_Spi>
		W25qxx_Spi(0);
 8005808:	2000      	movs	r0, #0
 800580a:	f7ff fcb7 	bl	800517c <W25qxx_Spi>
		HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, sizeof(pBuffer), 100);
 800580e:	f107 0110 	add.w	r1, r7, #16
 8005812:	2364      	movs	r3, #100	; 0x64
 8005814:	2220      	movs	r2, #32
 8005816:	4859      	ldr	r0, [pc, #356]	; (800597c <W25qxx_IsEmptyPage+0x238>)
 8005818:	f003 fee0 	bl	80095dc <HAL_SPI_Receive>
		HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800581c:	2201      	movs	r2, #1
 800581e:	2140      	movs	r1, #64	; 0x40
 8005820:	4855      	ldr	r0, [pc, #340]	; (8005978 <W25qxx_IsEmptyPage+0x234>)
 8005822:	f001 fc97 	bl	8007154 <HAL_GPIO_WritePin>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 8005826:	2300      	movs	r3, #0
 8005828:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800582c:	e00d      	b.n	800584a <W25qxx_IsEmptyPage+0x106>
		{
			if (pBuffer[x] != 0xFF)
 800582e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005832:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005836:	4413      	add	r3, r2
 8005838:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 800583c:	2bff      	cmp	r3, #255	; 0xff
 800583e:	d17e      	bne.n	800593e <W25qxx_IsEmptyPage+0x1fa>
		for (uint8_t x = 0; x < sizeof(pBuffer); x++)
 8005840:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005844:	3301      	adds	r3, #1
 8005846:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800584a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800584e:	2b1f      	cmp	r3, #31
 8005850:	d9ed      	bls.n	800582e <W25qxx_IsEmptyPage+0xea>
	for (i = OffsetInByte; i < w25qxx.PageSize; i += sizeof(pBuffer))
 8005852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005854:	3320      	adds	r3, #32
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005858:	4b45      	ldr	r3, [pc, #276]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 800585a:	895b      	ldrh	r3, [r3, #10]
 800585c:	461a      	mov	r2, r3
 800585e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005860:	4293      	cmp	r3, r2
 8005862:	d3a1      	bcc.n	80057a8 <W25qxx_IsEmptyPage+0x64>
				goto NOT_EMPTY;
		}
	}
	if ((w25qxx.PageSize + OffsetInByte) % sizeof(pBuffer) != 0)
 8005864:	4b42      	ldr	r3, [pc, #264]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 8005866:	895b      	ldrh	r3, [r3, #10]
 8005868:	461a      	mov	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4413      	add	r3, r2
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	2b00      	cmp	r3, #0
 8005874:	d051      	beq.n	800591a <W25qxx_IsEmptyPage+0x1d6>
	{
		i -= sizeof(pBuffer);
 8005876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005878:	3b20      	subs	r3, #32
 800587a:	63fb      	str	r3, [r7, #60]	; 0x3c
		for (; i < w25qxx.PageSize; i++)
 800587c:	e047      	b.n	800590e <W25qxx_IsEmptyPage+0x1ca>
		{
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800587e:	2200      	movs	r2, #0
 8005880:	2140      	movs	r1, #64	; 0x40
 8005882:	483d      	ldr	r0, [pc, #244]	; (8005978 <W25qxx_IsEmptyPage+0x234>)
 8005884:	f001 fc66 	bl	8007154 <HAL_GPIO_WritePin>
			WorkAddress = (i + Page_Address * w25qxx.PageSize);
 8005888:	4b39      	ldr	r3, [pc, #228]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 800588a:	895b      	ldrh	r3, [r3, #10]
 800588c:	461a      	mov	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	fb03 f302 	mul.w	r3, r3, r2
 8005894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005896:	4413      	add	r3, r2
 8005898:	633b      	str	r3, [r7, #48]	; 0x30
			W25qxx_Spi(0x0B);
 800589a:	200b      	movs	r0, #11
 800589c:	f7ff fc6e 	bl	800517c <W25qxx_Spi>
			if (w25qxx.ID >= W25Q256)
 80058a0:	4b33      	ldr	r3, [pc, #204]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b08      	cmp	r3, #8
 80058a6:	d909      	bls.n	80058bc <W25qxx_IsEmptyPage+0x178>
			{
				W25qxx_Spi(0x0C);
 80058a8:	200c      	movs	r0, #12
 80058aa:	f7ff fc67 	bl	800517c <W25qxx_Spi>
				W25qxx_Spi((WorkAddress & 0xFF000000) >> 24);
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	0e1b      	lsrs	r3, r3, #24
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff fc61 	bl	800517c <W25qxx_Spi>
 80058ba:	e002      	b.n	80058c2 <W25qxx_IsEmptyPage+0x17e>
			}
			else
			{
				W25qxx_Spi(0x0B);
 80058bc:	200b      	movs	r0, #11
 80058be:	f7ff fc5d 	bl	800517c <W25qxx_Spi>
			}
			W25qxx_Spi((WorkAddress & 0xFF0000) >> 16);
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff fc57 	bl	800517c <W25qxx_Spi>
			W25qxx_Spi((WorkAddress & 0xFF00) >> 8);
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	0a1b      	lsrs	r3, r3, #8
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fc51 	bl	800517c <W25qxx_Spi>
			W25qxx_Spi(WorkAddress & 0xFF);
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fc4c 	bl	800517c <W25qxx_Spi>
			W25qxx_Spi(0);
 80058e4:	2000      	movs	r0, #0
 80058e6:	f7ff fc49 	bl	800517c <W25qxx_Spi>
			HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, 1, 100);
 80058ea:	f107 0110 	add.w	r1, r7, #16
 80058ee:	2364      	movs	r3, #100	; 0x64
 80058f0:	2201      	movs	r2, #1
 80058f2:	4822      	ldr	r0, [pc, #136]	; (800597c <W25qxx_IsEmptyPage+0x238>)
 80058f4:	f003 fe72 	bl	80095dc <HAL_SPI_Receive>
			HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80058f8:	2201      	movs	r2, #1
 80058fa:	2140      	movs	r1, #64	; 0x40
 80058fc:	481e      	ldr	r0, [pc, #120]	; (8005978 <W25qxx_IsEmptyPage+0x234>)
 80058fe:	f001 fc29 	bl	8007154 <HAL_GPIO_WritePin>
			if (pBuffer[0] != 0xFF)
 8005902:	7c3b      	ldrb	r3, [r7, #16]
 8005904:	2bff      	cmp	r3, #255	; 0xff
 8005906:	d11c      	bne.n	8005942 <W25qxx_IsEmptyPage+0x1fe>
		for (; i < w25qxx.PageSize; i++)
 8005908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800590a:	3301      	adds	r3, #1
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590e:	4b18      	ldr	r3, [pc, #96]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 8005910:	895b      	ldrh	r3, [r3, #10]
 8005912:	461a      	mov	r2, r3
 8005914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005916:	4293      	cmp	r3, r2
 8005918:	d3b1      	bcc.n	800587e <W25qxx_IsEmptyPage+0x13a>
				goto NOT_EMPTY;
		}
	}
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckPage is Empty in %d ms\r\n", HAL_GetTick() - StartTime);
 800591a:	f000 f987 	bl	8005c2c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	4619      	mov	r1, r3
 8005926:	4816      	ldr	r0, [pc, #88]	; (8005980 <W25qxx_IsEmptyPage+0x23c>)
 8005928:	f00a fc6c 	bl	8010204 <iprintf>
	W25qxx_Delay(100);
 800592c:	2064      	movs	r0, #100	; 0x64
 800592e:	f000 f989 	bl	8005c44 <HAL_Delay>
#endif
	w25qxx.Lock = 0;
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 8005934:	2200      	movs	r2, #0
 8005936:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800593a:	2301      	movs	r3, #1
 800593c:	e013      	b.n	8005966 <W25qxx_IsEmptyPage+0x222>
				goto NOT_EMPTY;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <W25qxx_IsEmptyPage+0x200>
				goto NOT_EMPTY;
 8005942:	bf00      	nop
NOT_EMPTY:
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx CheckPage is Not Empty in %d ms\r\n", HAL_GetTick() - StartTime);
 8005944:	f000 f972 	bl	8005c2c <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	4619      	mov	r1, r3
 8005950:	480c      	ldr	r0, [pc, #48]	; (8005984 <W25qxx_IsEmptyPage+0x240>)
 8005952:	f00a fc57 	bl	8010204 <iprintf>
	W25qxx_Delay(100);
 8005956:	2064      	movs	r0, #100	; 0x64
 8005958:	f000 f974 	bl	8005c44 <HAL_Delay>
#endif
	w25qxx.Lock = 0;
 800595c:	4b04      	ldr	r3, [pc, #16]	; (8005970 <W25qxx_IsEmptyPage+0x22c>)
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return false;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3740      	adds	r7, #64	; 0x40
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	200015c4 	.word	0x200015c4
 8005974:	08015b90 	.word	0x08015b90
 8005978:	40020c00 	.word	0x40020c00
 800597c:	200012cc 	.word	0x200012cc
 8005980:	08015bc4 	.word	0x08015bc4
 8005984:	08015bec 	.word	0x08015bec

08005988 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8005996:	e002      	b.n	800599e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8005998:	2001      	movs	r0, #1
 800599a:	f000 f953 	bl	8005c44 <HAL_Delay>
	while (w25qxx.Lock == 1)
 800599e:	4b54      	ldr	r3, [pc, #336]	; (8005af0 <W25qxx_ReadPage+0x168>)
 80059a0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d0f7      	beq.n	8005998 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 80059a8:	4b51      	ldr	r3, [pc, #324]	; (8005af0 <W25qxx_ReadPage+0x168>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 80059b0:	4b4f      	ldr	r3, [pc, #316]	; (8005af0 <W25qxx_ReadPage+0x168>)
 80059b2:	895b      	ldrh	r3, [r3, #10]
 80059b4:	461a      	mov	r2, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d802      	bhi.n	80059c2 <W25qxx_ReadPage+0x3a>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d102      	bne.n	80059c8 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 80059c2:	4b4b      	ldr	r3, [pc, #300]	; (8005af0 <W25qxx_ReadPage+0x168>)
 80059c4:	895b      	ldrh	r3, [r3, #10]
 80059c6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	4413      	add	r3, r2
 80059ce:	4a48      	ldr	r2, [pc, #288]	; (8005af0 <W25qxx_ReadPage+0x168>)
 80059d0:	8952      	ldrh	r2, [r2, #10]
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d905      	bls.n	80059e2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 80059d6:	4b46      	ldr	r3, [pc, #280]	; (8005af0 <W25qxx_ReadPage+0x168>)
 80059d8:	895b      	ldrh	r3, [r3, #10]
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4842      	ldr	r0, [pc, #264]	; (8005af4 <W25qxx_ReadPage+0x16c>)
 80059ea:	f00a fc0b 	bl	8010204 <iprintf>
	W25qxx_Delay(100);
 80059ee:	2064      	movs	r0, #100	; 0x64
 80059f0:	f000 f928 	bl	8005c44 <HAL_Delay>
	uint32_t StartTime = HAL_GetTick();
 80059f4:	f000 f91a 	bl	8005c2c <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]
#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 80059fa:	4b3d      	ldr	r3, [pc, #244]	; (8005af0 <W25qxx_ReadPage+0x168>)
 80059fc:	895b      	ldrh	r3, [r3, #10]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	fb03 f302 	mul.w	r3, r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	4413      	add	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2140      	movs	r1, #64	; 0x40
 8005a10:	4839      	ldr	r0, [pc, #228]	; (8005af8 <W25qxx_ReadPage+0x170>)
 8005a12:	f001 fb9f 	bl	8007154 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8005a16:	4b36      	ldr	r3, [pc, #216]	; (8005af0 <W25qxx_ReadPage+0x168>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d909      	bls.n	8005a32 <W25qxx_ReadPage+0xaa>
	{
		W25qxx_Spi(0x0C);
 8005a1e:	200c      	movs	r0, #12
 8005a20:	f7ff fbac 	bl	800517c <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	0e1b      	lsrs	r3, r3, #24
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fba6 	bl	800517c <W25qxx_Spi>
 8005a30:	e002      	b.n	8005a38 <W25qxx_ReadPage+0xb0>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8005a32:	200b      	movs	r0, #11
 8005a34:	f7ff fba2 	bl	800517c <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	0c1b      	lsrs	r3, r3, #16
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fb9c 	bl	800517c <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fb96 	bl	800517c <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fb91 	bl	800517c <W25qxx_Spi>
	W25qxx_Spi(0);
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	f7ff fb8e 	bl	800517c <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	2364      	movs	r3, #100	; 0x64
 8005a66:	68f9      	ldr	r1, [r7, #12]
 8005a68:	4824      	ldr	r0, [pc, #144]	; (8005afc <W25qxx_ReadPage+0x174>)
 8005a6a:	f003 fdb7 	bl	80095dc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8005a6e:	2201      	movs	r2, #1
 8005a70:	2140      	movs	r1, #64	; 0x40
 8005a72:	4821      	ldr	r0, [pc, #132]	; (8005af8 <W25qxx_ReadPage+0x170>)
 8005a74:	f001 fb6e 	bl	8007154 <HAL_GPIO_WritePin>
#if (_W25QXX_DEBUG == 1)
	StartTime = HAL_GetTick() - StartTime;
 8005a78:	f000 f8d8 	bl	8005c2c <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	613b      	str	r3, [r7, #16]
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8005a84:	2300      	movs	r3, #0
 8005a86:	617b      	str	r3, [r7, #20]
 8005a88:	e018      	b.n	8005abc <W25qxx_ReadPage+0x134>
	{
		if ((i % 8 == 0) && (i > 2))
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d108      	bne.n	8005aa6 <W25qxx_ReadPage+0x11e>
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d905      	bls.n	8005aa6 <W25qxx_ReadPage+0x11e>
		{
			printf("\r\n");
 8005a9a:	4819      	ldr	r0, [pc, #100]	; (8005b00 <W25qxx_ReadPage+0x178>)
 8005a9c:	f00a fc38 	bl	8010310 <puts>
			W25qxx_Delay(10);
 8005aa0:	200a      	movs	r0, #10
 8005aa2:	f000 f8cf 	bl	8005c44 <HAL_Delay>
		}
		printf("0x%02X,", pBuffer[i]);
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	4413      	add	r3, r2
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4814      	ldr	r0, [pc, #80]	; (8005b04 <W25qxx_ReadPage+0x17c>)
 8005ab2:	f00a fba7 	bl	8010204 <iprintf>
	for (uint32_t i = 0; i < NumByteToRead_up_to_PageSize; i++)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d3e2      	bcc.n	8005a8a <W25qxx_ReadPage+0x102>
	}
	printf("\r\n");
 8005ac4:	480e      	ldr	r0, [pc, #56]	; (8005b00 <W25qxx_ReadPage+0x178>)
 8005ac6:	f00a fc23 	bl	8010310 <puts>
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
 8005aca:	6939      	ldr	r1, [r7, #16]
 8005acc:	480e      	ldr	r0, [pc, #56]	; (8005b08 <W25qxx_ReadPage+0x180>)
 8005ace:	f00a fb99 	bl	8010204 <iprintf>
	W25qxx_Delay(100);
 8005ad2:	2064      	movs	r0, #100	; 0x64
 8005ad4:	f000 f8b6 	bl	8005c44 <HAL_Delay>
#endif
	W25qxx_Delay(1);
 8005ad8:	2001      	movs	r0, #1
 8005ada:	f000 f8b3 	bl	8005c44 <HAL_Delay>
	w25qxx.Lock = 0;
 8005ade:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <W25qxx_ReadPage+0x168>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8005ae6:	bf00      	nop
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	200015c4 	.word	0x200015c4
 8005af4:	08015f9c 	.word	0x08015f9c
 8005af8:	40020c00 	.word	0x40020c00
 8005afc:	200012cc 	.word	0x200012cc
 8005b00:	08015dc0 	.word	0x08015dc0
 8005b04:	08015dc4 	.word	0x08015dc4
 8005b08:	08015fd8 	.word	0x08015fd8

08005b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005b12:	e003      	b.n	8005b1c <LoopCopyDataInit>

08005b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005b14:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005b1a:	3104      	adds	r1, #4

08005b1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005b1c:	480b      	ldr	r0, [pc, #44]	; (8005b4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005b24:	d3f6      	bcc.n	8005b14 <CopyDataInit>
  ldr  r2, =_sbss
 8005b26:	4a0b      	ldr	r2, [pc, #44]	; (8005b54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005b28:	e002      	b.n	8005b30 <LoopFillZerobss>

08005b2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005b2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005b2c:	f842 3b04 	str.w	r3, [r2], #4

08005b30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005b30:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b34:	d3f9      	bcc.n	8005b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005b36:	f7fe ff3d 	bl	80049b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b3a:	f009 fbfd 	bl	800f338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b3e:	f7fc ffcb 	bl	8002ad8 <main>
  bx  lr    
 8005b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005b44:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8005b48:	08016750 	.word	0x08016750
  ldr  r0, =_sdata
 8005b4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b50:	20000200 	.word	0x20000200
  ldr  r2, =_sbss
 8005b54:	20000200 	.word	0x20000200
  ldr  r3, = _ebss
 8005b58:	20001a70 	.word	0x20001a70

08005b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b5c:	e7fe      	b.n	8005b5c <ADC_IRQHandler>
	...

08005b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <HAL_Init+0x40>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a0d      	ldr	r2, [pc, #52]	; (8005ba0 <HAL_Init+0x40>)
 8005b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <HAL_Init+0x40>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <HAL_Init+0x40>)
 8005b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <HAL_Init+0x40>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a07      	ldr	r2, [pc, #28]	; (8005ba0 <HAL_Init+0x40>)
 8005b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b88:	2003      	movs	r0, #3
 8005b8a:	f000 fd4b 	bl	8006624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b8e:	2000      	movs	r0, #0
 8005b90:	f000 f808 	bl	8005ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b94:	f7fe fda8 	bl	80046e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40023c00 	.word	0x40023c00

08005ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bac:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <HAL_InitTick+0x54>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	4b12      	ldr	r3, [pc, #72]	; (8005bfc <HAL_InitTick+0x58>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8005bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fd63 	bl	800668e <HAL_SYSTICK_Config>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e00e      	b.n	8005bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b0f      	cmp	r3, #15
 8005bd6:	d80a      	bhi.n	8005bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005bd8:	2200      	movs	r2, #0
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005be0:	f000 fd2b 	bl	800663a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005be4:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <HAL_InitTick+0x5c>)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	e000      	b.n	8005bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20000004 	.word	0x20000004
 8005bfc:	2000000c 	.word	0x2000000c
 8005c00:	20000008 	.word	0x20000008

08005c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c08:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <HAL_IncTick+0x20>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <HAL_IncTick+0x24>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4413      	add	r3, r2
 8005c14:	4a04      	ldr	r2, [pc, #16]	; (8005c28 <HAL_IncTick+0x24>)
 8005c16:	6013      	str	r3, [r2, #0]
}
 8005c18:	bf00      	nop
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	2000000c 	.word	0x2000000c
 8005c28:	200015ec 	.word	0x200015ec

08005c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8005c30:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <HAL_GetTick+0x14>)
 8005c32:	681b      	ldr	r3, [r3, #0]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	200015ec 	.word	0x200015ec

08005c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c4c:	f7ff ffee 	bl	8005c2c <HAL_GetTick>
 8005c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5c:	d005      	beq.n	8005c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c5e:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <HAL_Delay+0x44>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4413      	add	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005c6a:	bf00      	nop
 8005c6c:	f7ff ffde 	bl	8005c2c <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d8f7      	bhi.n	8005c6c <HAL_Delay+0x28>
  {
  }
}
 8005c7c:	bf00      	nop
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	2000000c 	.word	0x2000000c

08005c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e033      	b.n	8005d0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d109      	bne.n	8005cbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fb fa7c 	bl	80011a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d118      	bne.n	8005cfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005cd2:	f023 0302 	bic.w	r3, r3, #2
 8005cd6:	f043 0202 	orr.w	r2, r3, #2
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fad4 	bl	800628c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	f043 0201 	orr.w	r2, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	641a      	str	r2, [r3, #64]	; 0x40
 8005cfa:	e001      	b.n	8005d00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <HAL_ADC_Start+0x1a>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e0a5      	b.n	8005e7a <HAL_ADC_Start+0x166>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d018      	beq.n	8005d76 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005d54:	4b4c      	ldr	r3, [pc, #304]	; (8005e88 <HAL_ADC_Start+0x174>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a4c      	ldr	r2, [pc, #304]	; (8005e8c <HAL_ADC_Start+0x178>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	0c9a      	lsrs	r2, r3, #18
 8005d60:	4613      	mov	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	4413      	add	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d68:	e002      	b.n	8005d70 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1f9      	bne.n	8005d6a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d179      	bne.n	8005e78 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d007      	beq.n	8005db6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005dae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc2:	d106      	bne.n	8005dd2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	f023 0206 	bic.w	r2, r3, #6
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
 8005dd0:	e002      	b.n	8005dd8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005de0:	4b2b      	ldr	r3, [pc, #172]	; (8005e90 <HAL_ADC_Start+0x17c>)
 8005de2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005dec:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d12a      	bne.n	8005e50 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <HAL_ADC_Start+0x180>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d015      	beq.n	8005e30 <HAL_ADC_Start+0x11c>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a23      	ldr	r2, [pc, #140]	; (8005e98 <HAL_ADC_Start+0x184>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d105      	bne.n	8005e1a <HAL_ADC_Start+0x106>
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <HAL_ADC_Start+0x17c>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <HAL_ADC_Start+0x188>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d129      	bne.n	8005e78 <HAL_ADC_Start+0x164>
 8005e24:	4b1a      	ldr	r3, [pc, #104]	; (8005e90 <HAL_ADC_Start+0x17c>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d123      	bne.n	8005e78 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d11c      	bne.n	8005e78 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689a      	ldr	r2, [r3, #8]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e4c:	609a      	str	r2, [r3, #8]
 8005e4e:	e013      	b.n	8005e78 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a0f      	ldr	r2, [pc, #60]	; (8005e94 <HAL_ADC_Start+0x180>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10e      	bne.n	8005e78 <HAL_ADC_Start+0x164>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d107      	bne.n	8005e78 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005e76:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20000004 	.word	0x20000004
 8005e8c:	431bde83 	.word	0x431bde83
 8005e90:	40012300 	.word	0x40012300
 8005e94:	40012000 	.word	0x40012000
 8005e98:	40012100 	.word	0x40012100
 8005e9c:	40012200 	.word	0x40012200

08005ea0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d101      	bne.n	8005eb6 <HAL_ADC_Stop+0x16>
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	e021      	b.n	8005efa <HAL_ADC_Stop+0x5a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f022 0201 	bic.w	r2, r2, #1
 8005ecc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005ee4:	f023 0301 	bic.w	r3, r3, #1
 8005ee8:	f043 0201 	orr.w	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f22:	d113      	bne.n	8005f4c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f32:	d10b      	bne.n	8005f4c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f38:	f043 0220 	orr.w	r2, r3, #32
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e05c      	b.n	8006006 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005f4c:	f7ff fe6e 	bl	8005c2c <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f52:	e01a      	b.n	8005f8a <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5a:	d016      	beq.n	8005f8a <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d007      	beq.n	8005f72 <HAL_ADC_PollForConversion+0x6c>
 8005f62:	f7ff fe63 	bl	8005c2c <HAL_GetTick>
 8005f66:	4602      	mov	r2, r0
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	1ad3      	subs	r3, r2, r3
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d20b      	bcs.n	8005f8a <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f043 0204 	orr.w	r2, r3, #4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e03d      	b.n	8006006 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d1dd      	bne.n	8005f54 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0212 	mvn.w	r2, #18
 8005fa0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d123      	bne.n	8006004 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11f      	bne.n	8006004 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d111      	bne.n	8006004 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d105      	bne.n	8006004 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	f043 0201 	orr.w	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x1c>
 8006040:	2302      	movs	r3, #2
 8006042:	e113      	b.n	800626c <HAL_ADC_ConfigChannel+0x244>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b09      	cmp	r3, #9
 8006052:	d925      	bls.n	80060a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68d9      	ldr	r1, [r3, #12]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	4613      	mov	r3, r2
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	4413      	add	r3, r2
 8006068:	3b1e      	subs	r3, #30
 800606a:	2207      	movs	r2, #7
 800606c:	fa02 f303 	lsl.w	r3, r2, r3
 8006070:	43da      	mvns	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	400a      	ands	r2, r1
 8006078:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68d9      	ldr	r1, [r3, #12]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	4618      	mov	r0, r3
 800608c:	4603      	mov	r3, r0
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	4403      	add	r3, r0
 8006092:	3b1e      	subs	r3, #30
 8006094:	409a      	lsls	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e022      	b.n	80060e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6919      	ldr	r1, [r3, #16]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	4613      	mov	r3, r2
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	4413      	add	r3, r2
 80060b4:	2207      	movs	r2, #7
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	43da      	mvns	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	400a      	ands	r2, r1
 80060c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6919      	ldr	r1, [r3, #16]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	4618      	mov	r0, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	4403      	add	r3, r0
 80060dc:	409a      	lsls	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b06      	cmp	r3, #6
 80060ec:	d824      	bhi.n	8006138 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	3b05      	subs	r3, #5
 8006100:	221f      	movs	r2, #31
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	43da      	mvns	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	400a      	ands	r2, r1
 800610e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	b29b      	uxth	r3, r3
 800611c:	4618      	mov	r0, r3
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	3b05      	subs	r3, #5
 800612a:	fa00 f203 	lsl.w	r2, r0, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	635a      	str	r2, [r3, #52]	; 0x34
 8006136:	e04c      	b.n	80061d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b0c      	cmp	r3, #12
 800613e:	d824      	bhi.n	800618a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	3b23      	subs	r3, #35	; 0x23
 8006152:	221f      	movs	r2, #31
 8006154:	fa02 f303 	lsl.w	r3, r2, r3
 8006158:	43da      	mvns	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	400a      	ands	r2, r1
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b29b      	uxth	r3, r3
 800616e:	4618      	mov	r0, r3
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	3b23      	subs	r3, #35	; 0x23
 800617c:	fa00 f203 	lsl.w	r2, r0, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
 8006188:	e023      	b.n	80061d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	3b41      	subs	r3, #65	; 0x41
 800619c:	221f      	movs	r2, #31
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43da      	mvns	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	400a      	ands	r2, r1
 80061aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	4618      	mov	r0, r3
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	3b41      	subs	r3, #65	; 0x41
 80061c6:	fa00 f203 	lsl.w	r2, r0, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80061d2:	4b29      	ldr	r3, [pc, #164]	; (8006278 <HAL_ADC_ConfigChannel+0x250>)
 80061d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a28      	ldr	r2, [pc, #160]	; (800627c <HAL_ADC_ConfigChannel+0x254>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d10f      	bne.n	8006200 <HAL_ADC_ConfigChannel+0x1d8>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b12      	cmp	r3, #18
 80061e6:	d10b      	bne.n	8006200 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <HAL_ADC_ConfigChannel+0x254>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d12b      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x23a>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_ADC_ConfigChannel+0x258>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <HAL_ADC_ConfigChannel+0x1f4>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b11      	cmp	r3, #17
 800621a:	d122      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a11      	ldr	r2, [pc, #68]	; (8006280 <HAL_ADC_ConfigChannel+0x258>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d111      	bne.n	8006262 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <HAL_ADC_ConfigChannel+0x25c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a11      	ldr	r2, [pc, #68]	; (8006288 <HAL_ADC_ConfigChannel+0x260>)
 8006244:	fba2 2303 	umull	r2, r3, r2, r3
 8006248:	0c9a      	lsrs	r2, r3, #18
 800624a:	4613      	mov	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4413      	add	r3, r2
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006254:	e002      	b.n	800625c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	3b01      	subs	r3, #1
 800625a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1f9      	bne.n	8006256 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	40012300 	.word	0x40012300
 800627c:	40012000 	.word	0x40012000
 8006280:	10000012 	.word	0x10000012
 8006284:	20000004 	.word	0x20000004
 8006288:	431bde83 	.word	0x431bde83

0800628c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006294:	4b79      	ldr	r3, [pc, #484]	; (800647c <ADC_Init+0x1f0>)
 8006296:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	431a      	orrs	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	021a      	lsls	r2, r3, #8
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80062e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6859      	ldr	r1, [r3, #4]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6899      	ldr	r1, [r3, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	4a58      	ldr	r2, [pc, #352]	; (8006480 <ADC_Init+0x1f4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d022      	beq.n	800636a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6899      	ldr	r1, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6899      	ldr	r1, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	609a      	str	r2, [r3, #8]
 8006368:	e00f      	b.n	800638a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	689a      	ldr	r2, [r3, #8]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006388:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0202 	bic.w	r2, r2, #2
 8006398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6899      	ldr	r1, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	7e1b      	ldrb	r3, [r3, #24]
 80063a4:	005a      	lsls	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d01b      	beq.n	80063f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685a      	ldr	r2, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80063d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6859      	ldr	r1, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e2:	3b01      	subs	r3, #1
 80063e4:	035a      	lsls	r2, r3, #13
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	430a      	orrs	r2, r1
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	e007      	b.n	8006400 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	3b01      	subs	r3, #1
 800641c:	051a      	lsls	r2, r3, #20
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6899      	ldr	r1, [r3, #8]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006442:	025a      	lsls	r2, r3, #9
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6899      	ldr	r1, [r3, #8]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	029a      	lsls	r2, r3, #10
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	609a      	str	r2, [r3, #8]
}
 8006470:	bf00      	nop
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	40012300 	.word	0x40012300
 8006480:	0f000001 	.word	0x0f000001

08006484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006494:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <__NVIC_SetPriorityGrouping+0x44>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064a0:	4013      	ands	r3, r2
 80064a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064b6:	4a04      	ldr	r2, [pc, #16]	; (80064c8 <__NVIC_SetPriorityGrouping+0x44>)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	60d3      	str	r3, [r2, #12]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	e000ed00 	.word	0xe000ed00

080064cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064d0:	4b04      	ldr	r3, [pc, #16]	; (80064e4 <__NVIC_GetPriorityGrouping+0x18>)
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	0a1b      	lsrs	r3, r3, #8
 80064d6:	f003 0307 	and.w	r3, r3, #7
}
 80064da:	4618      	mov	r0, r3
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	e000ed00 	.word	0xe000ed00

080064e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	db0b      	blt.n	8006512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	f003 021f 	and.w	r2, r3, #31
 8006500:	4907      	ldr	r1, [pc, #28]	; (8006520 <__NVIC_EnableIRQ+0x38>)
 8006502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	2001      	movs	r0, #1
 800650a:	fa00 f202 	lsl.w	r2, r0, r2
 800650e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	e000e100 	.word	0xe000e100

08006524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	6039      	str	r1, [r7, #0]
 800652e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006534:	2b00      	cmp	r3, #0
 8006536:	db0a      	blt.n	800654e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	490c      	ldr	r1, [pc, #48]	; (8006570 <__NVIC_SetPriority+0x4c>)
 800653e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006542:	0112      	lsls	r2, r2, #4
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	440b      	add	r3, r1
 8006548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800654c:	e00a      	b.n	8006564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	4908      	ldr	r1, [pc, #32]	; (8006574 <__NVIC_SetPriority+0x50>)
 8006554:	79fb      	ldrb	r3, [r7, #7]
 8006556:	f003 030f 	and.w	r3, r3, #15
 800655a:	3b04      	subs	r3, #4
 800655c:	0112      	lsls	r2, r2, #4
 800655e:	b2d2      	uxtb	r2, r2
 8006560:	440b      	add	r3, r1
 8006562:	761a      	strb	r2, [r3, #24]
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	e000e100 	.word	0xe000e100
 8006574:	e000ed00 	.word	0xe000ed00

08006578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006578:	b480      	push	{r7}
 800657a:	b089      	sub	sp, #36	; 0x24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f1c3 0307 	rsb	r3, r3, #7
 8006592:	2b04      	cmp	r3, #4
 8006594:	bf28      	it	cs
 8006596:	2304      	movcs	r3, #4
 8006598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	3304      	adds	r3, #4
 800659e:	2b06      	cmp	r3, #6
 80065a0:	d902      	bls.n	80065a8 <NVIC_EncodePriority+0x30>
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	3b03      	subs	r3, #3
 80065a6:	e000      	b.n	80065aa <NVIC_EncodePriority+0x32>
 80065a8:	2300      	movs	r3, #0
 80065aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065ac:	f04f 32ff 	mov.w	r2, #4294967295
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43da      	mvns	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	401a      	ands	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065c0:	f04f 31ff 	mov.w	r1, #4294967295
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ca:	43d9      	mvns	r1, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065d0:	4313      	orrs	r3, r2
         );
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3724      	adds	r7, #36	; 0x24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065f0:	d301      	bcc.n	80065f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065f2:	2301      	movs	r3, #1
 80065f4:	e00f      	b.n	8006616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065f6:	4a0a      	ldr	r2, [pc, #40]	; (8006620 <SysTick_Config+0x40>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065fe:	210f      	movs	r1, #15
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	f7ff ff8e 	bl	8006524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006608:	4b05      	ldr	r3, [pc, #20]	; (8006620 <SysTick_Config+0x40>)
 800660a:	2200      	movs	r2, #0
 800660c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800660e:	4b04      	ldr	r3, [pc, #16]	; (8006620 <SysTick_Config+0x40>)
 8006610:	2207      	movs	r2, #7
 8006612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	e000e010 	.word	0xe000e010

08006624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff29 	bl	8006484 <__NVIC_SetPriorityGrouping>
}
 8006632:	bf00      	nop
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	4603      	mov	r3, r0
 8006642:	60b9      	str	r1, [r7, #8]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800664c:	f7ff ff3e 	bl	80064cc <__NVIC_GetPriorityGrouping>
 8006650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	6978      	ldr	r0, [r7, #20]
 8006658:	f7ff ff8e 	bl	8006578 <NVIC_EncodePriority>
 800665c:	4602      	mov	r2, r0
 800665e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff ff5d 	bl	8006524 <__NVIC_SetPriority>
}
 800666a:	bf00      	nop
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	4603      	mov	r3, r0
 800667a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800667c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006680:	4618      	mov	r0, r3
 8006682:	f7ff ff31 	bl	80064e8 <__NVIC_EnableIRQ>
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b082      	sub	sp, #8
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff ffa2 	bl	80065e0 <SysTick_Config>
 800669c:	4603      	mov	r3, r0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066b4:	f7ff faba 	bl	8005c2c <HAL_GetTick>
 80066b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e099      	b.n	80067f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0201 	bic.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066e4:	e00f      	b.n	8006706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066e6:	f7ff faa1 	bl	8005c2c <HAL_GetTick>
 80066ea:	4602      	mov	r2, r0
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	d908      	bls.n	8006706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2203      	movs	r2, #3
 80066fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e078      	b.n	80067f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e8      	bne.n	80066e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4b38      	ldr	r3, [pc, #224]	; (8006800 <HAL_DMA_Init+0x158>)
 8006720:	4013      	ands	r3, r2
 8006722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800673e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800674a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	4313      	orrs	r3, r2
 8006756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	2b04      	cmp	r3, #4
 800675e:	d107      	bne.n	8006770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006768:	4313      	orrs	r3, r2
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006796:	2b04      	cmp	r3, #4
 8006798:	d117      	bne.n	80067ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00e      	beq.n	80067ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fa91 	bl	8006cd4 <DMA_CheckFifoParam>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d008      	beq.n	80067ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2240      	movs	r2, #64	; 0x40
 80067bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067c6:	2301      	movs	r3, #1
 80067c8:	e016      	b.n	80067f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa48 	bl	8006c68 <DMA_CalcBaseAndBitshift>
 80067d8:	4603      	mov	r3, r0
 80067da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	223f      	movs	r2, #63	; 0x3f
 80067e2:	409a      	lsls	r2, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2201      	movs	r2, #1
 80067f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	f010803f 	.word	0xf010803f

08006804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_DMA_Start_IT+0x26>
 8006826:	2302      	movs	r3, #2
 8006828:	e040      	b.n	80068ac <HAL_DMA_Start_IT+0xa8>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b01      	cmp	r3, #1
 800683c:	d12f      	bne.n	800689e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2202      	movs	r2, #2
 8006842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f9da 	bl	8006c0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685c:	223f      	movs	r2, #63	; 0x3f
 800685e:	409a      	lsls	r2, r3
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f042 0216 	orr.w	r2, r2, #22
 8006872:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d007      	beq.n	800688c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0208 	orr.w	r2, r2, #8
 800688a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0201 	orr.w	r2, r2, #1
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	e005      	b.n	80068aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80068a6:	2302      	movs	r3, #2
 80068a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80068aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3718      	adds	r7, #24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d004      	beq.n	80068d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2280      	movs	r2, #128	; 0x80
 80068cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e00c      	b.n	80068ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2205      	movs	r2, #5
 80068d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0201 	bic.w	r2, r2, #1
 80068e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006904:	4b92      	ldr	r3, [pc, #584]	; (8006b50 <HAL_DMA_IRQHandler+0x258>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a92      	ldr	r2, [pc, #584]	; (8006b54 <HAL_DMA_IRQHandler+0x25c>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	0a9b      	lsrs	r3, r3, #10
 8006910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006922:	2208      	movs	r2, #8
 8006924:	409a      	lsls	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4013      	ands	r3, r2
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01a      	beq.n	8006964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	2b00      	cmp	r3, #0
 800693a:	d013      	beq.n	8006964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0204 	bic.w	r2, r2, #4
 800694a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006950:	2208      	movs	r2, #8
 8006952:	409a      	lsls	r2, r3
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695c:	f043 0201 	orr.w	r2, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006968:	2201      	movs	r2, #1
 800696a:	409a      	lsls	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4013      	ands	r3, r2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d012      	beq.n	800699a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00b      	beq.n	800699a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006986:	2201      	movs	r2, #1
 8006988:	409a      	lsls	r2, r3
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006992:	f043 0202 	orr.w	r2, r3, #2
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699e:	2204      	movs	r2, #4
 80069a0:	409a      	lsls	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d012      	beq.n	80069d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069bc:	2204      	movs	r2, #4
 80069be:	409a      	lsls	r2, r3
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c8:	f043 0204 	orr.w	r2, r3, #4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d4:	2210      	movs	r2, #16
 80069d6:	409a      	lsls	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4013      	ands	r3, r2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d043      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d03c      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069f2:	2210      	movs	r2, #16
 80069f4:	409a      	lsls	r2, r3
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d018      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d108      	bne.n	8006a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d024      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
 8006a26:	e01f      	b.n	8006a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d01b      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
 8006a38:	e016      	b.n	8006a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d107      	bne.n	8006a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0208 	bic.w	r2, r2, #8
 8006a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	409a      	lsls	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4013      	ands	r3, r2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 808e 	beq.w	8006b96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0310 	and.w	r3, r3, #16
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8086 	beq.w	8006b96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a8e:	2220      	movs	r2, #32
 8006a90:	409a      	lsls	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b05      	cmp	r3, #5
 8006aa0:	d136      	bne.n	8006b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0216 	bic.w	r2, r2, #22
 8006ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695a      	ldr	r2, [r3, #20]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <HAL_DMA_IRQHandler+0x1da>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d007      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f022 0208 	bic.w	r2, r2, #8
 8006ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae6:	223f      	movs	r2, #63	; 0x3f
 8006ae8:	409a      	lsls	r2, r3
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d07d      	beq.n	8006c02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
        }
        return;
 8006b0e:	e078      	b.n	8006c02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01c      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d108      	bne.n	8006b3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d030      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
 8006b3c:	e02b      	b.n	8006b96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d027      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	4798      	blx	r3
 8006b4e:	e022      	b.n	8006b96 <HAL_DMA_IRQHandler+0x29e>
 8006b50:	20000004 	.word	0x20000004
 8006b54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10f      	bne.n	8006b86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0210 	bic.w	r2, r2, #16
 8006b74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d032      	beq.n	8006c04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d022      	beq.n	8006bf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2205      	movs	r2, #5
 8006bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60bb      	str	r3, [r7, #8]
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d307      	bcc.n	8006bde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1f2      	bne.n	8006bc2 <HAL_DMA_IRQHandler+0x2ca>
 8006bdc:	e000      	b.n	8006be0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006bde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4798      	blx	r3
 8006c00:	e000      	b.n	8006c04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006c02:	bf00      	nop
    }
  }
}
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop

08006c0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
 8006c18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d108      	bne.n	8006c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c4a:	e007      	b.n	8006c5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	60da      	str	r2, [r3, #12]
}
 8006c5c:	bf00      	nop
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	3b10      	subs	r3, #16
 8006c78:	4a14      	ldr	r2, [pc, #80]	; (8006ccc <DMA_CalcBaseAndBitshift+0x64>)
 8006c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c7e:	091b      	lsrs	r3, r3, #4
 8006c80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c82:	4a13      	ldr	r2, [pc, #76]	; (8006cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d909      	bls.n	8006caa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c9e:	f023 0303 	bic.w	r3, r3, #3
 8006ca2:	1d1a      	adds	r2, r3, #4
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8006ca8:	e007      	b.n	8006cba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cb2:	f023 0303 	bic.w	r3, r3, #3
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3714      	adds	r7, #20
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	aaaaaaab 	.word	0xaaaaaaab
 8006cd0:	080161a8 	.word	0x080161a8

08006cd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d11f      	bne.n	8006d2e <DMA_CheckFifoParam+0x5a>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2b03      	cmp	r3, #3
 8006cf2:	d856      	bhi.n	8006da2 <DMA_CheckFifoParam+0xce>
 8006cf4:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <DMA_CheckFifoParam+0x28>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d0d 	.word	0x08006d0d
 8006d00:	08006d1f 	.word	0x08006d1f
 8006d04:	08006d0d 	.word	0x08006d0d
 8006d08:	08006da3 	.word	0x08006da3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d046      	beq.n	8006da6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d1c:	e043      	b.n	8006da6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d26:	d140      	bne.n	8006daa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d2c:	e03d      	b.n	8006daa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d36:	d121      	bne.n	8006d7c <DMA_CheckFifoParam+0xa8>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d837      	bhi.n	8006dae <DMA_CheckFifoParam+0xda>
 8006d3e:	a201      	add	r2, pc, #4	; (adr r2, 8006d44 <DMA_CheckFifoParam+0x70>)
 8006d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d44:	08006d55 	.word	0x08006d55
 8006d48:	08006d5b 	.word	0x08006d5b
 8006d4c:	08006d55 	.word	0x08006d55
 8006d50:	08006d6d 	.word	0x08006d6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
      break;
 8006d58:	e030      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d025      	beq.n	8006db2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d6a:	e022      	b.n	8006db2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d74:	d11f      	bne.n	8006db6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d7a:	e01c      	b.n	8006db6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d903      	bls.n	8006d8a <DMA_CheckFifoParam+0xb6>
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d003      	beq.n	8006d90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d88:	e018      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8e:	e015      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00e      	beq.n	8006dba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006da0:	e00b      	b.n	8006dba <DMA_CheckFifoParam+0xe6>
      break;
 8006da2:	bf00      	nop
 8006da4:	e00a      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006da6:	bf00      	nop
 8006da8:	e008      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006daa:	bf00      	nop
 8006dac:	e006      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006dae:	bf00      	nop
 8006db0:	e004      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006db2:	bf00      	nop
 8006db4:	e002      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;   
 8006db6:	bf00      	nop
 8006db8:	e000      	b.n	8006dbc <DMA_CheckFifoParam+0xe8>
      break;
 8006dba:	bf00      	nop
    }
  } 
  
  return status; 
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop

08006dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b089      	sub	sp, #36	; 0x24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006de2:	2300      	movs	r3, #0
 8006de4:	61fb      	str	r3, [r7, #28]
 8006de6:	e177      	b.n	80070d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006de8:	2201      	movs	r2, #1
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4013      	ands	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006dfc:	693a      	ldr	r2, [r7, #16]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	f040 8166 	bne.w	80070d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d00b      	beq.n	8006e26 <HAL_GPIO_Init+0x5a>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d007      	beq.n	8006e26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e1a:	2b11      	cmp	r3, #17
 8006e1c:	d003      	beq.n	8006e26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2b12      	cmp	r3, #18
 8006e24:	d130      	bne.n	8006e88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	2203      	movs	r2, #3
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	43db      	mvns	r3, r3
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	43db      	mvns	r3, r3
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	091b      	lsrs	r3, r3, #4
 8006e72:	f003 0201 	and.w	r2, r3, #1
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	2203      	movs	r2, #3
 8006e94:	fa02 f303 	lsl.w	r3, r2, r3
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d003      	beq.n	8006ec8 <HAL_GPIO_Init+0xfc>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2b12      	cmp	r3, #18
 8006ec6:	d123      	bne.n	8006f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	08da      	lsrs	r2, r3, #3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3208      	adds	r2, #8
 8006ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	220f      	movs	r2, #15
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	691a      	ldr	r2, [r3, #16]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f003 0307 	and.w	r3, r3, #7
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	08da      	lsrs	r2, r3, #3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3208      	adds	r2, #8
 8006f0a:	69b9      	ldr	r1, [r7, #24]
 8006f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	2203      	movs	r2, #3
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	43db      	mvns	r3, r3
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	4013      	ands	r3, r2
 8006f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f003 0203 	and.w	r2, r3, #3
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	005b      	lsls	r3, r3, #1
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 80c0 	beq.w	80070d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f52:	2300      	movs	r3, #0
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <HAL_GPIO_Init+0x324>)
 8006f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f5a:	4a65      	ldr	r2, [pc, #404]	; (80070f0 <HAL_GPIO_Init+0x324>)
 8006f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f60:	6453      	str	r3, [r2, #68]	; 0x44
 8006f62:	4b63      	ldr	r3, [pc, #396]	; (80070f0 <HAL_GPIO_Init+0x324>)
 8006f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f6a:	60fb      	str	r3, [r7, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f6e:	4a61      	ldr	r2, [pc, #388]	; (80070f4 <HAL_GPIO_Init+0x328>)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	089b      	lsrs	r3, r3, #2
 8006f74:	3302      	adds	r3, #2
 8006f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	220f      	movs	r2, #15
 8006f86:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8a:	43db      	mvns	r3, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a58      	ldr	r2, [pc, #352]	; (80070f8 <HAL_GPIO_Init+0x32c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d037      	beq.n	800700a <HAL_GPIO_Init+0x23e>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a57      	ldr	r2, [pc, #348]	; (80070fc <HAL_GPIO_Init+0x330>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d031      	beq.n	8007006 <HAL_GPIO_Init+0x23a>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a56      	ldr	r2, [pc, #344]	; (8007100 <HAL_GPIO_Init+0x334>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d02b      	beq.n	8007002 <HAL_GPIO_Init+0x236>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a55      	ldr	r2, [pc, #340]	; (8007104 <HAL_GPIO_Init+0x338>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d025      	beq.n	8006ffe <HAL_GPIO_Init+0x232>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a54      	ldr	r2, [pc, #336]	; (8007108 <HAL_GPIO_Init+0x33c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d01f      	beq.n	8006ffa <HAL_GPIO_Init+0x22e>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a53      	ldr	r2, [pc, #332]	; (800710c <HAL_GPIO_Init+0x340>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d019      	beq.n	8006ff6 <HAL_GPIO_Init+0x22a>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a52      	ldr	r2, [pc, #328]	; (8007110 <HAL_GPIO_Init+0x344>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d013      	beq.n	8006ff2 <HAL_GPIO_Init+0x226>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a51      	ldr	r2, [pc, #324]	; (8007114 <HAL_GPIO_Init+0x348>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00d      	beq.n	8006fee <HAL_GPIO_Init+0x222>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a50      	ldr	r2, [pc, #320]	; (8007118 <HAL_GPIO_Init+0x34c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d007      	beq.n	8006fea <HAL_GPIO_Init+0x21e>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a4f      	ldr	r2, [pc, #316]	; (800711c <HAL_GPIO_Init+0x350>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d101      	bne.n	8006fe6 <HAL_GPIO_Init+0x21a>
 8006fe2:	2309      	movs	r3, #9
 8006fe4:	e012      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006fe6:	230a      	movs	r3, #10
 8006fe8:	e010      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006fea:	2308      	movs	r3, #8
 8006fec:	e00e      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006fee:	2307      	movs	r3, #7
 8006ff0:	e00c      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006ff2:	2306      	movs	r3, #6
 8006ff4:	e00a      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006ff6:	2305      	movs	r3, #5
 8006ff8:	e008      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	e006      	b.n	800700c <HAL_GPIO_Init+0x240>
 8006ffe:	2303      	movs	r3, #3
 8007000:	e004      	b.n	800700c <HAL_GPIO_Init+0x240>
 8007002:	2302      	movs	r3, #2
 8007004:	e002      	b.n	800700c <HAL_GPIO_Init+0x240>
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <HAL_GPIO_Init+0x240>
 800700a:	2300      	movs	r3, #0
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	f002 0203 	and.w	r2, r2, #3
 8007012:	0092      	lsls	r2, r2, #2
 8007014:	4093      	lsls	r3, r2
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	4313      	orrs	r3, r2
 800701a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800701c:	4935      	ldr	r1, [pc, #212]	; (80070f4 <HAL_GPIO_Init+0x328>)
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	3302      	adds	r3, #2
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800702a:	4b3d      	ldr	r3, [pc, #244]	; (8007120 <HAL_GPIO_Init+0x354>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	43db      	mvns	r3, r3
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	4013      	ands	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800704e:	4a34      	ldr	r2, [pc, #208]	; (8007120 <HAL_GPIO_Init+0x354>)
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007054:	4b32      	ldr	r3, [pc, #200]	; (8007120 <HAL_GPIO_Init+0x354>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	43db      	mvns	r3, r3
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	4013      	ands	r3, r2
 8007062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d003      	beq.n	8007078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007078:	4a29      	ldr	r2, [pc, #164]	; (8007120 <HAL_GPIO_Init+0x354>)
 800707a:	69bb      	ldr	r3, [r7, #24]
 800707c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800707e:	4b28      	ldr	r3, [pc, #160]	; (8007120 <HAL_GPIO_Init+0x354>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	43db      	mvns	r3, r3
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	4013      	ands	r3, r2
 800708c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d003      	beq.n	80070a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070a2:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <HAL_GPIO_Init+0x354>)
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070a8:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <HAL_GPIO_Init+0x354>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	43db      	mvns	r3, r3
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	4013      	ands	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d003      	beq.n	80070cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80070cc:	4a14      	ldr	r2, [pc, #80]	; (8007120 <HAL_GPIO_Init+0x354>)
 80070ce:	69bb      	ldr	r3, [r7, #24]
 80070d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	3301      	adds	r3, #1
 80070d6:	61fb      	str	r3, [r7, #28]
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	2b0f      	cmp	r3, #15
 80070dc:	f67f ae84 	bls.w	8006de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070e0:	bf00      	nop
 80070e2:	bf00      	nop
 80070e4:	3724      	adds	r7, #36	; 0x24
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40023800 	.word	0x40023800
 80070f4:	40013800 	.word	0x40013800
 80070f8:	40020000 	.word	0x40020000
 80070fc:	40020400 	.word	0x40020400
 8007100:	40020800 	.word	0x40020800
 8007104:	40020c00 	.word	0x40020c00
 8007108:	40021000 	.word	0x40021000
 800710c:	40021400 	.word	0x40021400
 8007110:	40021800 	.word	0x40021800
 8007114:	40021c00 	.word	0x40021c00
 8007118:	40022000 	.word	0x40022000
 800711c:	40022400 	.word	0x40022400
 8007120:	40013c00 	.word	0x40013c00

08007124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	887b      	ldrh	r3, [r7, #2]
 8007136:	4013      	ands	r3, r2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800713c:	2301      	movs	r3, #1
 800713e:	73fb      	strb	r3, [r7, #15]
 8007140:	e001      	b.n	8007146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007146:	7bfb      	ldrb	r3, [r7, #15]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	807b      	strh	r3, [r7, #2]
 8007160:	4613      	mov	r3, r2
 8007162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007164:	787b      	ldrb	r3, [r7, #1]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800716a:	887a      	ldrh	r2, [r7, #2]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007170:	e003      	b.n	800717a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007172:	887b      	ldrh	r3, [r7, #2]
 8007174:	041a      	lsls	r2, r3, #16
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	619a      	str	r2, [r3, #24]
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695a      	ldr	r2, [r3, #20]
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	401a      	ands	r2, r3
 800719a:	887b      	ldrh	r3, [r7, #2]
 800719c:	429a      	cmp	r2, r3
 800719e:	d104      	bne.n	80071aa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071a0:	887b      	ldrh	r3, [r7, #2]
 80071a2:	041a      	lsls	r2, r3, #16
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80071a8:	e002      	b.n	80071b0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80071aa:	887a      	ldrh	r2, [r7, #2]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	619a      	str	r2, [r3, #24]
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071c8:	695a      	ldr	r2, [r3, #20]
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	4013      	ands	r3, r2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d006      	beq.n	80071e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071d2:	4a05      	ldr	r2, [pc, #20]	; (80071e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071d8:	88fb      	ldrh	r3, [r7, #6]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7fc fa0e 	bl	80035fc <HAL_GPIO_EXTI_Callback>
  }
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40013c00 	.word	0x40013c00

080071ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e12b      	b.n	8007456 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d106      	bne.n	8007218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7fa fd64 	bl	8001ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2224      	movs	r2, #36	; 0x24
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 0201 	bic.w	r2, r2, #1
 800722e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800723e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800724e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007250:	f001 fc48 	bl	8008ae4 <HAL_RCC_GetPCLK1Freq>
 8007254:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4a81      	ldr	r2, [pc, #516]	; (8007460 <HAL_I2C_Init+0x274>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d807      	bhi.n	8007270 <HAL_I2C_Init+0x84>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4a80      	ldr	r2, [pc, #512]	; (8007464 <HAL_I2C_Init+0x278>)
 8007264:	4293      	cmp	r3, r2
 8007266:	bf94      	ite	ls
 8007268:	2301      	movls	r3, #1
 800726a:	2300      	movhi	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	e006      	b.n	800727e <HAL_I2C_Init+0x92>
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4a7d      	ldr	r2, [pc, #500]	; (8007468 <HAL_I2C_Init+0x27c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	bf94      	ite	ls
 8007278:	2301      	movls	r3, #1
 800727a:	2300      	movhi	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e0e7      	b.n	8007456 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4a78      	ldr	r2, [pc, #480]	; (800746c <HAL_I2C_Init+0x280>)
 800728a:	fba2 2303 	umull	r2, r3, r2, r3
 800728e:	0c9b      	lsrs	r3, r3, #18
 8007290:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	4a6a      	ldr	r2, [pc, #424]	; (8007460 <HAL_I2C_Init+0x274>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d802      	bhi.n	80072c0 <HAL_I2C_Init+0xd4>
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	3301      	adds	r3, #1
 80072be:	e009      	b.n	80072d4 <HAL_I2C_Init+0xe8>
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	4a69      	ldr	r2, [pc, #420]	; (8007470 <HAL_I2C_Init+0x284>)
 80072cc:	fba2 2303 	umull	r2, r3, r2, r3
 80072d0:	099b      	lsrs	r3, r3, #6
 80072d2:	3301      	adds	r3, #1
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	430b      	orrs	r3, r1
 80072da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80072e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	495c      	ldr	r1, [pc, #368]	; (8007460 <HAL_I2C_Init+0x274>)
 80072f0:	428b      	cmp	r3, r1
 80072f2:	d819      	bhi.n	8007328 <HAL_I2C_Init+0x13c>
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	1e59      	subs	r1, r3, #1
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007302:	1c59      	adds	r1, r3, #1
 8007304:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007308:	400b      	ands	r3, r1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <HAL_I2C_Init+0x138>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	1e59      	subs	r1, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	fbb1 f3f3 	udiv	r3, r1, r3
 800731c:	3301      	adds	r3, #1
 800731e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007322:	e051      	b.n	80073c8 <HAL_I2C_Init+0x1dc>
 8007324:	2304      	movs	r3, #4
 8007326:	e04f      	b.n	80073c8 <HAL_I2C_Init+0x1dc>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d111      	bne.n	8007354 <HAL_I2C_Init+0x168>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	1e58      	subs	r0, r3, #1
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6859      	ldr	r1, [r3, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	005b      	lsls	r3, r3, #1
 800733c:	440b      	add	r3, r1
 800733e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007342:	3301      	adds	r3, #1
 8007344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007348:	2b00      	cmp	r3, #0
 800734a:	bf0c      	ite	eq
 800734c:	2301      	moveq	r3, #1
 800734e:	2300      	movne	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	e012      	b.n	800737a <HAL_I2C_Init+0x18e>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	1e58      	subs	r0, r3, #1
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6859      	ldr	r1, [r3, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	0099      	lsls	r1, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	fbb0 f3f3 	udiv	r3, r0, r3
 800736a:	3301      	adds	r3, #1
 800736c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007370:	2b00      	cmp	r3, #0
 8007372:	bf0c      	ite	eq
 8007374:	2301      	moveq	r3, #1
 8007376:	2300      	movne	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <HAL_I2C_Init+0x196>
 800737e:	2301      	movs	r3, #1
 8007380:	e022      	b.n	80073c8 <HAL_I2C_Init+0x1dc>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10e      	bne.n	80073a8 <HAL_I2C_Init+0x1bc>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	1e58      	subs	r0, r3, #1
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6859      	ldr	r1, [r3, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	005b      	lsls	r3, r3, #1
 8007396:	440b      	add	r3, r1
 8007398:	fbb0 f3f3 	udiv	r3, r0, r3
 800739c:	3301      	adds	r3, #1
 800739e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a6:	e00f      	b.n	80073c8 <HAL_I2C_Init+0x1dc>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	1e58      	subs	r0, r3, #1
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6859      	ldr	r1, [r3, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	0099      	lsls	r1, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80073be:	3301      	adds	r3, #1
 80073c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	6809      	ldr	r1, [r1, #0]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69da      	ldr	r2, [r3, #28]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80073f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6911      	ldr	r1, [r2, #16]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	68d2      	ldr	r2, [r2, #12]
 8007402:	4311      	orrs	r1, r2
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	430b      	orrs	r3, r1
 800740a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	695a      	ldr	r2, [r3, #20]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	000186a0 	.word	0x000186a0
 8007464:	001e847f 	.word	0x001e847f
 8007468:	003d08ff 	.word	0x003d08ff
 800746c:	431bde83 	.word	0x431bde83
 8007470:	10624dd3 	.word	0x10624dd3

08007474 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b088      	sub	sp, #32
 8007478:	af02      	add	r7, sp, #8
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	4608      	mov	r0, r1
 800747e:	4611      	mov	r1, r2
 8007480:	461a      	mov	r2, r3
 8007482:	4603      	mov	r3, r0
 8007484:	817b      	strh	r3, [r7, #10]
 8007486:	460b      	mov	r3, r1
 8007488:	813b      	strh	r3, [r7, #8]
 800748a:	4613      	mov	r3, r2
 800748c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800748e:	f7fe fbcd 	bl	8005c2c <HAL_GetTick>
 8007492:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b20      	cmp	r3, #32
 800749e:	f040 80d9 	bne.w	8007654 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	2319      	movs	r3, #25
 80074a8:	2201      	movs	r2, #1
 80074aa:	496d      	ldr	r1, [pc, #436]	; (8007660 <HAL_I2C_Mem_Write+0x1ec>)
 80074ac:	68f8      	ldr	r0, [r7, #12]
 80074ae:	f000 fc7f 	bl	8007db0 <I2C_WaitOnFlagUntilTimeout>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80074b8:	2302      	movs	r3, #2
 80074ba:	e0cc      	b.n	8007656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_I2C_Mem_Write+0x56>
 80074c6:	2302      	movs	r3, #2
 80074c8:	e0c5      	b.n	8007656 <HAL_I2C_Mem_Write+0x1e2>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d007      	beq.n	80074f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2221      	movs	r2, #33	; 0x21
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2240      	movs	r2, #64	; 0x40
 800750c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6a3a      	ldr	r2, [r7, #32]
 800751a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007520:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4a4d      	ldr	r2, [pc, #308]	; (8007664 <HAL_I2C_Mem_Write+0x1f0>)
 8007530:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007532:	88f8      	ldrh	r0, [r7, #6]
 8007534:	893a      	ldrh	r2, [r7, #8]
 8007536:	8979      	ldrh	r1, [r7, #10]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	9301      	str	r3, [sp, #4]
 800753c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	4603      	mov	r3, r0
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fab6 	bl	8007ab4 <I2C_RequestMemoryWrite>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d052      	beq.n	80075f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800754e:	2301      	movs	r3, #1
 8007550:	e081      	b.n	8007656 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 fd00 	bl	8007f5c <I2C_WaitOnTXEFlagUntilTimeout>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00d      	beq.n	800757e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	2b04      	cmp	r3, #4
 8007568:	d107      	bne.n	800757a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007578:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	e06b      	b.n	8007656 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	781a      	ldrb	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007598:	3b01      	subs	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b04      	cmp	r3, #4
 80075ba:	d11b      	bne.n	80075f4 <HAL_I2C_Mem_Write+0x180>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d017      	beq.n	80075f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d4:	1c5a      	adds	r2, r3, #1
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1aa      	bne.n	8007552 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fcec 	bl	8007fde <I2C_WaitOnBTFFlagUntilTimeout>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00d      	beq.n	8007628 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	2b04      	cmp	r3, #4
 8007612:	d107      	bne.n	8007624 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007622:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e016      	b.n	8007656 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	e000      	b.n	8007656 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007654:	2302      	movs	r3, #2
  }
}
 8007656:	4618      	mov	r0, r3
 8007658:	3718      	adds	r7, #24
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	00100002 	.word	0x00100002
 8007664:	ffff0000 	.word	0xffff0000

08007668 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08c      	sub	sp, #48	; 0x30
 800766c:	af02      	add	r7, sp, #8
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	4608      	mov	r0, r1
 8007672:	4611      	mov	r1, r2
 8007674:	461a      	mov	r2, r3
 8007676:	4603      	mov	r3, r0
 8007678:	817b      	strh	r3, [r7, #10]
 800767a:	460b      	mov	r3, r1
 800767c:	813b      	strh	r3, [r7, #8]
 800767e:	4613      	mov	r3, r2
 8007680:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007682:	f7fe fad3 	bl	8005c2c <HAL_GetTick>
 8007686:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800768e:	b2db      	uxtb	r3, r3
 8007690:	2b20      	cmp	r3, #32
 8007692:	f040 8208 	bne.w	8007aa6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	2319      	movs	r3, #25
 800769c:	2201      	movs	r2, #1
 800769e:	497b      	ldr	r1, [pc, #492]	; (800788c <HAL_I2C_Mem_Read+0x224>)
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	f000 fb85 	bl	8007db0 <I2C_WaitOnFlagUntilTimeout>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d001      	beq.n	80076b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
 80076ae:	e1fb      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d101      	bne.n	80076be <HAL_I2C_Mem_Read+0x56>
 80076ba:	2302      	movs	r3, #2
 80076bc:	e1f4      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x440>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d007      	beq.n	80076e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2222      	movs	r2, #34	; 0x22
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2240      	movs	r2, #64	; 0x40
 8007700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800770e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4a5b      	ldr	r2, [pc, #364]	; (8007890 <HAL_I2C_Mem_Read+0x228>)
 8007724:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007726:	88f8      	ldrh	r0, [r7, #6]
 8007728:	893a      	ldrh	r2, [r7, #8]
 800772a:	8979      	ldrh	r1, [r7, #10]
 800772c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	4603      	mov	r3, r0
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fa52 	bl	8007be0 <I2C_RequestMemoryRead>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e1b0      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800774a:	2b00      	cmp	r3, #0
 800774c:	d113      	bne.n	8007776 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800774e:	2300      	movs	r3, #0
 8007750:	623b      	str	r3, [r7, #32]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	623b      	str	r3, [r7, #32]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	623b      	str	r3, [r7, #32]
 8007762:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007772:	601a      	str	r2, [r3, #0]
 8007774:	e184      	b.n	8007a80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777a:	2b01      	cmp	r3, #1
 800777c:	d11b      	bne.n	80077b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800778c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800778e:	2300      	movs	r3, #0
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695b      	ldr	r3, [r3, #20]
 8007798:	61fb      	str	r3, [r7, #28]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	61fb      	str	r3, [r7, #28]
 80077a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	e164      	b.n	8007a80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d11b      	bne.n	80077f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077de:	2300      	movs	r3, #0
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	61bb      	str	r3, [r7, #24]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	61bb      	str	r3, [r7, #24]
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	e144      	b.n	8007a80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	699b      	ldr	r3, [r3, #24]
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800780c:	e138      	b.n	8007a80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007812:	2b03      	cmp	r3, #3
 8007814:	f200 80f1 	bhi.w	80079fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800781c:	2b01      	cmp	r3, #1
 800781e:	d123      	bne.n	8007868 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007822:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fc1b 	bl	8008060 <I2C_WaitOnRXNEFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e139      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	691a      	ldr	r2, [r3, #16]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	1c5a      	adds	r2, r3, #1
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007850:	3b01      	subs	r3, #1
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007866:	e10b      	b.n	8007a80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800786c:	2b02      	cmp	r3, #2
 800786e:	d14e      	bne.n	800790e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	2200      	movs	r2, #0
 8007878:	4906      	ldr	r1, [pc, #24]	; (8007894 <HAL_I2C_Mem_Read+0x22c>)
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 fa98 	bl	8007db0 <I2C_WaitOnFlagUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d008      	beq.n	8007898 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e10e      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x440>
 800788a:	bf00      	nop
 800788c:	00100002 	.word	0x00100002
 8007890:	ffff0000 	.word	0xffff0000
 8007894:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	691a      	ldr	r2, [r3, #16]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c4:	3b01      	subs	r3, #1
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078d0:	b29b      	uxth	r3, r3
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	1c5a      	adds	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078f6:	3b01      	subs	r3, #1
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800790c:	e0b8      	b.n	8007a80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	2200      	movs	r2, #0
 8007916:	4966      	ldr	r1, [pc, #408]	; (8007ab0 <HAL_I2C_Mem_Read+0x448>)
 8007918:	68f8      	ldr	r0, [r7, #12]
 800791a:	f000 fa49 	bl	8007db0 <I2C_WaitOnFlagUntilTimeout>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e0bf      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	1c5a      	adds	r2, r3, #1
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007954:	3b01      	subs	r3, #1
 8007956:	b29a      	uxth	r2, r3
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007960:	b29b      	uxth	r3, r3
 8007962:	3b01      	subs	r3, #1
 8007964:	b29a      	uxth	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007970:	2200      	movs	r2, #0
 8007972:	494f      	ldr	r1, [pc, #316]	; (8007ab0 <HAL_I2C_Mem_Read+0x448>)
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 fa1b 	bl	8007db0 <I2C_WaitOnFlagUntilTimeout>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e091      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007992:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	b2d2      	uxtb	r2, r2
 80079a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	1c5a      	adds	r2, r3, #1
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079b0:	3b01      	subs	r3, #1
 80079b2:	b29a      	uxth	r2, r3
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	b2d2      	uxtb	r2, r2
 80079d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079f8:	e042      	b.n	8007a80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fb2e 	bl	8008060 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e04c      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	b2d2      	uxtb	r2, r2
 8007a1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	1c5a      	adds	r2, r3, #1
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	f003 0304 	and.w	r3, r3, #4
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d118      	bne.n	8007a80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f47f aec2 	bne.w	800780e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	e000      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007aa6:	2302      	movs	r3, #2
  }
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3728      	adds	r7, #40	; 0x28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	00010004 	.word	0x00010004

08007ab4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	4608      	mov	r0, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	817b      	strh	r3, [r7, #10]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	813b      	strh	r3, [r7, #8]
 8007aca:	4613      	mov	r3, r2
 8007acc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007adc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 f960 	bl	8007db0 <I2C_WaitOnFlagUntilTimeout>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00d      	beq.n	8007b12 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b04:	d103      	bne.n	8007b0e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e05f      	b.n	8007bd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007b12:	897b      	ldrh	r3, [r7, #10]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	461a      	mov	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	6a3a      	ldr	r2, [r7, #32]
 8007b26:	492d      	ldr	r1, [pc, #180]	; (8007bdc <I2C_RequestMemoryWrite+0x128>)
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f998 	bl	8007e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e04c      	b.n	8007bd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b38:	2300      	movs	r3, #0
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	617b      	str	r3, [r7, #20]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b50:	6a39      	ldr	r1, [r7, #32]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fa02 	bl	8007f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00d      	beq.n	8007b7a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	2b04      	cmp	r3, #4
 8007b64:	d107      	bne.n	8007b76 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e02b      	b.n	8007bd2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d105      	bne.n	8007b8c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007b80:	893b      	ldrh	r3, [r7, #8]
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	611a      	str	r2, [r3, #16]
 8007b8a:	e021      	b.n	8007bd0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007b8c:	893b      	ldrh	r3, [r7, #8]
 8007b8e:	0a1b      	lsrs	r3, r3, #8
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	b2da      	uxtb	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b9c:	6a39      	ldr	r1, [r7, #32]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 f9dc 	bl	8007f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00d      	beq.n	8007bc6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d107      	bne.n	8007bc2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e005      	b.n	8007bd2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007bc6:	893b      	ldrh	r3, [r7, #8]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	00010002 	.word	0x00010002

08007be0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	4608      	mov	r0, r1
 8007bea:	4611      	mov	r1, r2
 8007bec:	461a      	mov	r2, r3
 8007bee:	4603      	mov	r3, r0
 8007bf0:	817b      	strh	r3, [r7, #10]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	813b      	strh	r3, [r7, #8]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 f8c2 	bl	8007db0 <I2C_WaitOnFlagUntilTimeout>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00d      	beq.n	8007c4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c40:	d103      	bne.n	8007c4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c48:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e0aa      	b.n	8007da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007c4e:	897b      	ldrh	r3, [r7, #10]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	461a      	mov	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007c5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c60:	6a3a      	ldr	r2, [r7, #32]
 8007c62:	4952      	ldr	r1, [pc, #328]	; (8007dac <I2C_RequestMemoryRead+0x1cc>)
 8007c64:	68f8      	ldr	r0, [r7, #12]
 8007c66:	f000 f8fa 	bl	8007e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e097      	b.n	8007da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c74:	2300      	movs	r3, #0
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	617b      	str	r3, [r7, #20]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8c:	6a39      	ldr	r1, [r7, #32]
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f964 	bl	8007f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00d      	beq.n	8007cb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d107      	bne.n	8007cb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e076      	b.n	8007da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007cb6:	88fb      	ldrh	r3, [r7, #6]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d105      	bne.n	8007cc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007cbc:	893b      	ldrh	r3, [r7, #8]
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	611a      	str	r2, [r3, #16]
 8007cc6:	e021      	b.n	8007d0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007cc8:	893b      	ldrh	r3, [r7, #8]
 8007cca:	0a1b      	lsrs	r3, r3, #8
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd8:	6a39      	ldr	r1, [r7, #32]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f000 f93e 	bl	8007f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00d      	beq.n	8007d02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d107      	bne.n	8007cfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e050      	b.n	8007da4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d02:	893b      	ldrh	r3, [r7, #8]
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0e:	6a39      	ldr	r1, [r7, #32]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f923 	bl	8007f5c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d107      	bne.n	8007d34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e035      	b.n	8007da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f000 f82b 	bl	8007db0 <I2C_WaitOnFlagUntilTimeout>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00d      	beq.n	8007d7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6e:	d103      	bne.n	8007d78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e013      	b.n	8007da4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007d7c:	897b      	ldrh	r3, [r7, #10]
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f043 0301 	orr.w	r3, r3, #1
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8e:	6a3a      	ldr	r2, [r7, #32]
 8007d90:	4906      	ldr	r1, [pc, #24]	; (8007dac <I2C_RequestMemoryRead+0x1cc>)
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f863 	bl	8007e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	00010002 	.word	0x00010002

08007db0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007dc0:	e025      	b.n	8007e0e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc8:	d021      	beq.n	8007e0e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dca:	f7fd ff2f 	bl	8005c2c <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d302      	bcc.n	8007de0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d116      	bne.n	8007e0e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2220      	movs	r2, #32
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dfa:	f043 0220 	orr.w	r2, r3, #32
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e023      	b.n	8007e56 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	0c1b      	lsrs	r3, r3, #16
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d10d      	bne.n	8007e34 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	43da      	mvns	r2, r3
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	4013      	ands	r3, r2
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	bf0c      	ite	eq
 8007e2a:	2301      	moveq	r3, #1
 8007e2c:	2300      	movne	r3, #0
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	e00c      	b.n	8007e4e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	43da      	mvns	r2, r3
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	bf0c      	ite	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	2300      	movne	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	79fb      	ldrb	r3, [r7, #7]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d0b6      	beq.n	8007dc2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	60b9      	str	r1, [r7, #8]
 8007e68:	607a      	str	r2, [r7, #4]
 8007e6a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007e6c:	e051      	b.n	8007f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e7c:	d123      	bne.n	8007ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e8c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e96:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2220      	movs	r2, #32
 8007ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f043 0204 	orr.w	r2, r3, #4
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e046      	b.n	8007f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ecc:	d021      	beq.n	8007f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ece:	f7fd fead 	bl	8005c2c <HAL_GetTick>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d302      	bcc.n	8007ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d116      	bne.n	8007f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2220      	movs	r2, #32
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	f043 0220 	orr.w	r2, r3, #32
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e020      	b.n	8007f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	0c1b      	lsrs	r3, r3, #16
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d10c      	bne.n	8007f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	43da      	mvns	r2, r3
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4013      	ands	r3, r2
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bf14      	ite	ne
 8007f2e:	2301      	movne	r3, #1
 8007f30:	2300      	moveq	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	e00b      	b.n	8007f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	43da      	mvns	r2, r3
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	4013      	ands	r3, r2
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	bf14      	ite	ne
 8007f48:	2301      	movne	r3, #1
 8007f4a:	2300      	moveq	r3, #0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d18d      	bne.n	8007e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f68:	e02d      	b.n	8007fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 f8ce 	bl	800810c <I2C_IsAcknowledgeFailed>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e02d      	b.n	8007fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d021      	beq.n	8007fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f82:	f7fd fe53 	bl	8005c2c <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d116      	bne.n	8007fc6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	f043 0220 	orr.w	r2, r3, #32
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e007      	b.n	8007fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd0:	2b80      	cmp	r3, #128	; 0x80
 8007fd2:	d1ca      	bne.n	8007f6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	60f8      	str	r0, [r7, #12]
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007fea:	e02d      	b.n	8008048 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f88d 	bl	800810c <I2C_IsAcknowledgeFailed>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e02d      	b.n	8008058 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008002:	d021      	beq.n	8008048 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008004:	f7fd fe12 	bl	8005c2c <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	429a      	cmp	r2, r3
 8008012:	d302      	bcc.n	800801a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d116      	bne.n	8008048 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2220      	movs	r2, #32
 8008024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008034:	f043 0220 	orr.w	r2, r3, #32
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e007      	b.n	8008058 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	2b04      	cmp	r3, #4
 8008054:	d1ca      	bne.n	8007fec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800806c:	e042      	b.n	80080f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b10      	cmp	r3, #16
 800807a:	d119      	bne.n	80080b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0210 	mvn.w	r2, #16
 8008084:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2220      	movs	r2, #32
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e029      	b.n	8008104 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080b0:	f7fd fdbc 	bl	8005c2c <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d302      	bcc.n	80080c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d116      	bne.n	80080f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	f043 0220 	orr.w	r2, r3, #32
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e007      	b.n	8008104 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	d1b5      	bne.n	800806e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695b      	ldr	r3, [r3, #20]
 800811a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800811e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008122:	d11b      	bne.n	800815c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800812c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	f043 0204 	orr.w	r2, r3, #4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	e000      	b.n	800815e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800816a:	b480      	push	{r7}
 800816c:	b083      	sub	sp, #12
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b20      	cmp	r3, #32
 800817e:	d129      	bne.n	80081d4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2224      	movs	r2, #36	; 0x24
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 0201 	bic.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0210 	bic.w	r2, r2, #16
 80081a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80081d0:	2300      	movs	r3, #0
 80081d2:	e000      	b.n	80081d6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80081d4:	2302      	movs	r3, #2
  }
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b085      	sub	sp, #20
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
 80081ea:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80081ec:	2300      	movs	r3, #0
 80081ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	d12a      	bne.n	8008252 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2224      	movs	r2, #36	; 0x24
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0201 	bic.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800821c:	89fb      	ldrh	r3, [r7, #14]
 800821e:	f023 030f 	bic.w	r3, r3, #15
 8008222:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	b29a      	uxth	r2, r3
 8008228:	89fb      	ldrh	r3, [r7, #14]
 800822a:	4313      	orrs	r3, r2
 800822c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	89fa      	ldrh	r2, [r7, #14]
 8008234:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f042 0201 	orr.w	r2, r2, #1
 8008244:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2220      	movs	r2, #32
 800824a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800824e:	2300      	movs	r3, #0
 8008250:	e000      	b.n	8008254 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8008252:	2302      	movs	r3, #2
  }
}
 8008254:	4618      	mov	r0, r3
 8008256:	3714      	adds	r7, #20
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e25b      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	d075      	beq.n	800836a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800827e:	4ba3      	ldr	r3, [pc, #652]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 030c 	and.w	r3, r3, #12
 8008286:	2b04      	cmp	r3, #4
 8008288:	d00c      	beq.n	80082a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800828a:	4ba0      	ldr	r3, [pc, #640]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008292:	2b08      	cmp	r3, #8
 8008294:	d112      	bne.n	80082bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008296:	4b9d      	ldr	r3, [pc, #628]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800829e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082a2:	d10b      	bne.n	80082bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082a4:	4b99      	ldr	r3, [pc, #612]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d05b      	beq.n	8008368 <HAL_RCC_OscConfig+0x108>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d157      	bne.n	8008368 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e236      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c4:	d106      	bne.n	80082d4 <HAL_RCC_OscConfig+0x74>
 80082c6:	4b91      	ldr	r3, [pc, #580]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a90      	ldr	r2, [pc, #576]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80082cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d0:	6013      	str	r3, [r2, #0]
 80082d2:	e01d      	b.n	8008310 <HAL_RCC_OscConfig+0xb0>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80082dc:	d10c      	bne.n	80082f8 <HAL_RCC_OscConfig+0x98>
 80082de:	4b8b      	ldr	r3, [pc, #556]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a8a      	ldr	r2, [pc, #552]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80082e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	4b88      	ldr	r3, [pc, #544]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a87      	ldr	r2, [pc, #540]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80082f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	e00b      	b.n	8008310 <HAL_RCC_OscConfig+0xb0>
 80082f8:	4b84      	ldr	r3, [pc, #528]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a83      	ldr	r2, [pc, #524]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80082fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	4b81      	ldr	r3, [pc, #516]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a80      	ldr	r2, [pc, #512]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 800830a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800830e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d013      	beq.n	8008340 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008318:	f7fd fc88 	bl	8005c2c <HAL_GetTick>
 800831c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800831e:	e008      	b.n	8008332 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008320:	f7fd fc84 	bl	8005c2c <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b64      	cmp	r3, #100	; 0x64
 800832c:	d901      	bls.n	8008332 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e1fb      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008332:	4b76      	ldr	r3, [pc, #472]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0f0      	beq.n	8008320 <HAL_RCC_OscConfig+0xc0>
 800833e:	e014      	b.n	800836a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008340:	f7fd fc74 	bl	8005c2c <HAL_GetTick>
 8008344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008346:	e008      	b.n	800835a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008348:	f7fd fc70 	bl	8005c2c <HAL_GetTick>
 800834c:	4602      	mov	r2, r0
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	1ad3      	subs	r3, r2, r3
 8008352:	2b64      	cmp	r3, #100	; 0x64
 8008354:	d901      	bls.n	800835a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008356:	2303      	movs	r3, #3
 8008358:	e1e7      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800835a:	4b6c      	ldr	r3, [pc, #432]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1f0      	bne.n	8008348 <HAL_RCC_OscConfig+0xe8>
 8008366:	e000      	b.n	800836a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b00      	cmp	r3, #0
 8008374:	d063      	beq.n	800843e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008376:	4b65      	ldr	r3, [pc, #404]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f003 030c 	and.w	r3, r3, #12
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00b      	beq.n	800839a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008382:	4b62      	ldr	r3, [pc, #392]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800838a:	2b08      	cmp	r3, #8
 800838c:	d11c      	bne.n	80083c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800838e:	4b5f      	ldr	r3, [pc, #380]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008396:	2b00      	cmp	r3, #0
 8008398:	d116      	bne.n	80083c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800839a:	4b5c      	ldr	r3, [pc, #368]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d005      	beq.n	80083b2 <HAL_RCC_OscConfig+0x152>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d001      	beq.n	80083b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e1bb      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083b2:	4b56      	ldr	r3, [pc, #344]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	4952      	ldr	r1, [pc, #328]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083c6:	e03a      	b.n	800843e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d020      	beq.n	8008412 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80083d0:	4b4f      	ldr	r3, [pc, #316]	; (8008510 <HAL_RCC_OscConfig+0x2b0>)
 80083d2:	2201      	movs	r2, #1
 80083d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083d6:	f7fd fc29 	bl	8005c2c <HAL_GetTick>
 80083da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083dc:	e008      	b.n	80083f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80083de:	f7fd fc25 	bl	8005c2c <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d901      	bls.n	80083f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80083ec:	2303      	movs	r3, #3
 80083ee:	e19c      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80083f0:	4b46      	ldr	r3, [pc, #280]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d0f0      	beq.n	80083de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083fc:	4b43      	ldr	r3, [pc, #268]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	4940      	ldr	r1, [pc, #256]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 800840c:	4313      	orrs	r3, r2
 800840e:	600b      	str	r3, [r1, #0]
 8008410:	e015      	b.n	800843e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008412:	4b3f      	ldr	r3, [pc, #252]	; (8008510 <HAL_RCC_OscConfig+0x2b0>)
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008418:	f7fd fc08 	bl	8005c2c <HAL_GetTick>
 800841c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800841e:	e008      	b.n	8008432 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008420:	f7fd fc04 	bl	8005c2c <HAL_GetTick>
 8008424:	4602      	mov	r2, r0
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	2b02      	cmp	r3, #2
 800842c:	d901      	bls.n	8008432 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800842e:	2303      	movs	r3, #3
 8008430:	e17b      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008432:	4b36      	ldr	r3, [pc, #216]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1f0      	bne.n	8008420 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0308 	and.w	r3, r3, #8
 8008446:	2b00      	cmp	r3, #0
 8008448:	d030      	beq.n	80084ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d016      	beq.n	8008480 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008452:	4b30      	ldr	r3, [pc, #192]	; (8008514 <HAL_RCC_OscConfig+0x2b4>)
 8008454:	2201      	movs	r2, #1
 8008456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008458:	f7fd fbe8 	bl	8005c2c <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008460:	f7fd fbe4 	bl	8005c2c <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e15b      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008472:	4b26      	ldr	r3, [pc, #152]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 8008474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d0f0      	beq.n	8008460 <HAL_RCC_OscConfig+0x200>
 800847e:	e015      	b.n	80084ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008480:	4b24      	ldr	r3, [pc, #144]	; (8008514 <HAL_RCC_OscConfig+0x2b4>)
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008486:	f7fd fbd1 	bl	8005c2c <HAL_GetTick>
 800848a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800848c:	e008      	b.n	80084a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800848e:	f7fd fbcd 	bl	8005c2c <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	d901      	bls.n	80084a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e144      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084a0:	4b1a      	ldr	r3, [pc, #104]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80084a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a4:	f003 0302 	and.w	r3, r3, #2
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d1f0      	bne.n	800848e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 80a0 	beq.w	80085fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084be:	4b13      	ldr	r3, [pc, #76]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10f      	bne.n	80084ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084ca:	2300      	movs	r3, #0
 80084cc:	60bb      	str	r3, [r7, #8]
 80084ce:	4b0f      	ldr	r3, [pc, #60]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	4a0e      	ldr	r2, [pc, #56]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80084d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084d8:	6413      	str	r3, [r2, #64]	; 0x40
 80084da:	4b0c      	ldr	r3, [pc, #48]	; (800850c <HAL_RCC_OscConfig+0x2ac>)
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e2:	60bb      	str	r3, [r7, #8]
 80084e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80084e6:	2301      	movs	r3, #1
 80084e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ea:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <HAL_RCC_OscConfig+0x2b8>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d121      	bne.n	800853a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80084f6:	4b08      	ldr	r3, [pc, #32]	; (8008518 <HAL_RCC_OscConfig+0x2b8>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a07      	ldr	r2, [pc, #28]	; (8008518 <HAL_RCC_OscConfig+0x2b8>)
 80084fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008502:	f7fd fb93 	bl	8005c2c <HAL_GetTick>
 8008506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008508:	e011      	b.n	800852e <HAL_RCC_OscConfig+0x2ce>
 800850a:	bf00      	nop
 800850c:	40023800 	.word	0x40023800
 8008510:	42470000 	.word	0x42470000
 8008514:	42470e80 	.word	0x42470e80
 8008518:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800851c:	f7fd fb86 	bl	8005c2c <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	2b02      	cmp	r3, #2
 8008528:	d901      	bls.n	800852e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e0fd      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800852e:	4b81      	ldr	r3, [pc, #516]	; (8008734 <HAL_RCC_OscConfig+0x4d4>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0f0      	beq.n	800851c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d106      	bne.n	8008550 <HAL_RCC_OscConfig+0x2f0>
 8008542:	4b7d      	ldr	r3, [pc, #500]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 8008544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008546:	4a7c      	ldr	r2, [pc, #496]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 8008548:	f043 0301 	orr.w	r3, r3, #1
 800854c:	6713      	str	r3, [r2, #112]	; 0x70
 800854e:	e01c      	b.n	800858a <HAL_RCC_OscConfig+0x32a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2b05      	cmp	r3, #5
 8008556:	d10c      	bne.n	8008572 <HAL_RCC_OscConfig+0x312>
 8008558:	4b77      	ldr	r3, [pc, #476]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 800855a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855c:	4a76      	ldr	r2, [pc, #472]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 800855e:	f043 0304 	orr.w	r3, r3, #4
 8008562:	6713      	str	r3, [r2, #112]	; 0x70
 8008564:	4b74      	ldr	r3, [pc, #464]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 8008566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008568:	4a73      	ldr	r2, [pc, #460]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 800856a:	f043 0301 	orr.w	r3, r3, #1
 800856e:	6713      	str	r3, [r2, #112]	; 0x70
 8008570:	e00b      	b.n	800858a <HAL_RCC_OscConfig+0x32a>
 8008572:	4b71      	ldr	r3, [pc, #452]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 8008574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008576:	4a70      	ldr	r2, [pc, #448]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 8008578:	f023 0301 	bic.w	r3, r3, #1
 800857c:	6713      	str	r3, [r2, #112]	; 0x70
 800857e:	4b6e      	ldr	r3, [pc, #440]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 8008580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008582:	4a6d      	ldr	r2, [pc, #436]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 8008584:	f023 0304 	bic.w	r3, r3, #4
 8008588:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d015      	beq.n	80085be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008592:	f7fd fb4b 	bl	8005c2c <HAL_GetTick>
 8008596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008598:	e00a      	b.n	80085b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800859a:	f7fd fb47 	bl	8005c2c <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d901      	bls.n	80085b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e0bc      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085b0:	4b61      	ldr	r3, [pc, #388]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 80085b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b4:	f003 0302 	and.w	r3, r3, #2
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d0ee      	beq.n	800859a <HAL_RCC_OscConfig+0x33a>
 80085bc:	e014      	b.n	80085e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085be:	f7fd fb35 	bl	8005c2c <HAL_GetTick>
 80085c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085c4:	e00a      	b.n	80085dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085c6:	f7fd fb31 	bl	8005c2c <HAL_GetTick>
 80085ca:	4602      	mov	r2, r0
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	1ad3      	subs	r3, r2, r3
 80085d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d901      	bls.n	80085dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80085d8:	2303      	movs	r3, #3
 80085da:	e0a6      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085dc:	4b56      	ldr	r3, [pc, #344]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 80085de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e0:	f003 0302 	and.w	r3, r3, #2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1ee      	bne.n	80085c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80085e8:	7dfb      	ldrb	r3, [r7, #23]
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d105      	bne.n	80085fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085ee:	4b52      	ldr	r3, [pc, #328]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	4a51      	ldr	r2, [pc, #324]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 80085f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 8092 	beq.w	8008728 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008604:	4b4c      	ldr	r3, [pc, #304]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 030c 	and.w	r3, r3, #12
 800860c:	2b08      	cmp	r3, #8
 800860e:	d05c      	beq.n	80086ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
 8008614:	2b02      	cmp	r3, #2
 8008616:	d141      	bne.n	800869c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008618:	4b48      	ldr	r3, [pc, #288]	; (800873c <HAL_RCC_OscConfig+0x4dc>)
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800861e:	f7fd fb05 	bl	8005c2c <HAL_GetTick>
 8008622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008624:	e008      	b.n	8008638 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008626:	f7fd fb01 	bl	8005c2c <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d901      	bls.n	8008638 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e078      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008638:	4b3f      	ldr	r3, [pc, #252]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1f0      	bne.n	8008626 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	69da      	ldr	r2, [r3, #28]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	431a      	orrs	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	019b      	lsls	r3, r3, #6
 8008654:	431a      	orrs	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	085b      	lsrs	r3, r3, #1
 800865c:	3b01      	subs	r3, #1
 800865e:	041b      	lsls	r3, r3, #16
 8008660:	431a      	orrs	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008666:	061b      	lsls	r3, r3, #24
 8008668:	4933      	ldr	r1, [pc, #204]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 800866a:	4313      	orrs	r3, r2
 800866c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800866e:	4b33      	ldr	r3, [pc, #204]	; (800873c <HAL_RCC_OscConfig+0x4dc>)
 8008670:	2201      	movs	r2, #1
 8008672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008674:	f7fd fada 	bl	8005c2c <HAL_GetTick>
 8008678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800867a:	e008      	b.n	800868e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800867c:	f7fd fad6 	bl	8005c2c <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d901      	bls.n	800868e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e04d      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800868e:	4b2a      	ldr	r3, [pc, #168]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0f0      	beq.n	800867c <HAL_RCC_OscConfig+0x41c>
 800869a:	e045      	b.n	8008728 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800869c:	4b27      	ldr	r3, [pc, #156]	; (800873c <HAL_RCC_OscConfig+0x4dc>)
 800869e:	2200      	movs	r2, #0
 80086a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086a2:	f7fd fac3 	bl	8005c2c <HAL_GetTick>
 80086a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086a8:	e008      	b.n	80086bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086aa:	f7fd fabf 	bl	8005c2c <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d901      	bls.n	80086bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e036      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086bc:	4b1e      	ldr	r3, [pc, #120]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d1f0      	bne.n	80086aa <HAL_RCC_OscConfig+0x44a>
 80086c8:	e02e      	b.n	8008728 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	699b      	ldr	r3, [r3, #24]
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d101      	bne.n	80086d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80086d2:	2301      	movs	r3, #1
 80086d4:	e029      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80086d6:	4b18      	ldr	r3, [pc, #96]	; (8008738 <HAL_RCC_OscConfig+0x4d8>)
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d11c      	bne.n	8008724 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d115      	bne.n	8008724 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80086fe:	4013      	ands	r3, r2
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008704:	4293      	cmp	r3, r2
 8008706:	d10d      	bne.n	8008724 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008712:	429a      	cmp	r2, r3
 8008714:	d106      	bne.n	8008724 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008720:	429a      	cmp	r2, r3
 8008722:	d001      	beq.n	8008728 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	40007000 	.word	0x40007000
 8008738:	40023800 	.word	0x40023800
 800873c:	42470060 	.word	0x42470060

08008740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e0cc      	b.n	80088ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008754:	4b68      	ldr	r3, [pc, #416]	; (80088f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 030f 	and.w	r3, r3, #15
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	429a      	cmp	r2, r3
 8008760:	d90c      	bls.n	800877c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008762:	4b65      	ldr	r3, [pc, #404]	; (80088f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	b2d2      	uxtb	r2, r2
 8008768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800876a:	4b63      	ldr	r3, [pc, #396]	; (80088f8 <HAL_RCC_ClockConfig+0x1b8>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 030f 	and.w	r3, r3, #15
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d001      	beq.n	800877c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e0b8      	b.n	80088ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0302 	and.w	r3, r3, #2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d020      	beq.n	80087ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	d005      	beq.n	80087a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008794:	4b59      	ldr	r3, [pc, #356]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	4a58      	ldr	r2, [pc, #352]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 800879a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800879e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 0308 	and.w	r3, r3, #8
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d005      	beq.n	80087b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087ac:	4b53      	ldr	r3, [pc, #332]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	4a52      	ldr	r2, [pc, #328]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 80087b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80087b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087b8:	4b50      	ldr	r3, [pc, #320]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	494d      	ldr	r1, [pc, #308]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d044      	beq.n	8008860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d107      	bne.n	80087ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087de:	4b47      	ldr	r3, [pc, #284]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d119      	bne.n	800881e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e07f      	b.n	80088ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d003      	beq.n	80087fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d107      	bne.n	800880e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087fe:	4b3f      	ldr	r3, [pc, #252]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d109      	bne.n	800881e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	e06f      	b.n	80088ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800880e:	4b3b      	ldr	r3, [pc, #236]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e067      	b.n	80088ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800881e:	4b37      	ldr	r3, [pc, #220]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f023 0203 	bic.w	r2, r3, #3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	4934      	ldr	r1, [pc, #208]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 800882c:	4313      	orrs	r3, r2
 800882e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008830:	f7fd f9fc 	bl	8005c2c <HAL_GetTick>
 8008834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008836:	e00a      	b.n	800884e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008838:	f7fd f9f8 	bl	8005c2c <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	f241 3288 	movw	r2, #5000	; 0x1388
 8008846:	4293      	cmp	r3, r2
 8008848:	d901      	bls.n	800884e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e04f      	b.n	80088ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800884e:	4b2b      	ldr	r3, [pc, #172]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 020c 	and.w	r2, r3, #12
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	429a      	cmp	r2, r3
 800885e:	d1eb      	bne.n	8008838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008860:	4b25      	ldr	r3, [pc, #148]	; (80088f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 030f 	and.w	r3, r3, #15
 8008868:	683a      	ldr	r2, [r7, #0]
 800886a:	429a      	cmp	r2, r3
 800886c:	d20c      	bcs.n	8008888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800886e:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	b2d2      	uxtb	r2, r2
 8008874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008876:	4b20      	ldr	r3, [pc, #128]	; (80088f8 <HAL_RCC_ClockConfig+0x1b8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d001      	beq.n	8008888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	e032      	b.n	80088ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d008      	beq.n	80088a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008894:	4b19      	ldr	r3, [pc, #100]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	4916      	ldr	r1, [pc, #88]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0308 	and.w	r3, r3, #8
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80088b2:	4b12      	ldr	r3, [pc, #72]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	00db      	lsls	r3, r3, #3
 80088c0:	490e      	ldr	r1, [pc, #56]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80088c6:	f000 f821 	bl	800890c <HAL_RCC_GetSysClockFreq>
 80088ca:	4602      	mov	r2, r0
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <HAL_RCC_ClockConfig+0x1bc>)
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	091b      	lsrs	r3, r3, #4
 80088d2:	f003 030f 	and.w	r3, r3, #15
 80088d6:	490a      	ldr	r1, [pc, #40]	; (8008900 <HAL_RCC_ClockConfig+0x1c0>)
 80088d8:	5ccb      	ldrb	r3, [r1, r3]
 80088da:	fa22 f303 	lsr.w	r3, r2, r3
 80088de:	4a09      	ldr	r2, [pc, #36]	; (8008904 <HAL_RCC_ClockConfig+0x1c4>)
 80088e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80088e2:	4b09      	ldr	r3, [pc, #36]	; (8008908 <HAL_RCC_ClockConfig+0x1c8>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fd f95c 	bl	8005ba4 <HAL_InitTick>

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	40023c00 	.word	0x40023c00
 80088fc:	40023800 	.word	0x40023800
 8008900:	08016190 	.word	0x08016190
 8008904:	20000004 	.word	0x20000004
 8008908:	20000008 	.word	0x20000008

0800890c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800890c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	607b      	str	r3, [r7, #4]
 8008918:	2300      	movs	r3, #0
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	2300      	movs	r3, #0
 800891e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008924:	4b67      	ldr	r3, [pc, #412]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f003 030c 	and.w	r3, r3, #12
 800892c:	2b08      	cmp	r3, #8
 800892e:	d00d      	beq.n	800894c <HAL_RCC_GetSysClockFreq+0x40>
 8008930:	2b08      	cmp	r3, #8
 8008932:	f200 80bd 	bhi.w	8008ab0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d002      	beq.n	8008940 <HAL_RCC_GetSysClockFreq+0x34>
 800893a:	2b04      	cmp	r3, #4
 800893c:	d003      	beq.n	8008946 <HAL_RCC_GetSysClockFreq+0x3a>
 800893e:	e0b7      	b.n	8008ab0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008940:	4b61      	ldr	r3, [pc, #388]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008942:	60bb      	str	r3, [r7, #8]
       break;
 8008944:	e0b7      	b.n	8008ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008946:	4b60      	ldr	r3, [pc, #384]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008948:	60bb      	str	r3, [r7, #8]
      break;
 800894a:	e0b4      	b.n	8008ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800894c:	4b5d      	ldr	r3, [pc, #372]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008954:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008956:	4b5b      	ldr	r3, [pc, #364]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d04d      	beq.n	80089fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008962:	4b58      	ldr	r3, [pc, #352]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	099b      	lsrs	r3, r3, #6
 8008968:	461a      	mov	r2, r3
 800896a:	f04f 0300 	mov.w	r3, #0
 800896e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008972:	f04f 0100 	mov.w	r1, #0
 8008976:	ea02 0800 	and.w	r8, r2, r0
 800897a:	ea03 0901 	and.w	r9, r3, r1
 800897e:	4640      	mov	r0, r8
 8008980:	4649      	mov	r1, r9
 8008982:	f04f 0200 	mov.w	r2, #0
 8008986:	f04f 0300 	mov.w	r3, #0
 800898a:	014b      	lsls	r3, r1, #5
 800898c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008990:	0142      	lsls	r2, r0, #5
 8008992:	4610      	mov	r0, r2
 8008994:	4619      	mov	r1, r3
 8008996:	ebb0 0008 	subs.w	r0, r0, r8
 800899a:	eb61 0109 	sbc.w	r1, r1, r9
 800899e:	f04f 0200 	mov.w	r2, #0
 80089a2:	f04f 0300 	mov.w	r3, #0
 80089a6:	018b      	lsls	r3, r1, #6
 80089a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80089ac:	0182      	lsls	r2, r0, #6
 80089ae:	1a12      	subs	r2, r2, r0
 80089b0:	eb63 0301 	sbc.w	r3, r3, r1
 80089b4:	f04f 0000 	mov.w	r0, #0
 80089b8:	f04f 0100 	mov.w	r1, #0
 80089bc:	00d9      	lsls	r1, r3, #3
 80089be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089c2:	00d0      	lsls	r0, r2, #3
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	eb12 0208 	adds.w	r2, r2, r8
 80089cc:	eb43 0309 	adc.w	r3, r3, r9
 80089d0:	f04f 0000 	mov.w	r0, #0
 80089d4:	f04f 0100 	mov.w	r1, #0
 80089d8:	0299      	lsls	r1, r3, #10
 80089da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80089de:	0290      	lsls	r0, r2, #10
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4610      	mov	r0, r2
 80089e6:	4619      	mov	r1, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	461a      	mov	r2, r3
 80089ec:	f04f 0300 	mov.w	r3, #0
 80089f0:	f7f8 f96a 	bl	8000cc8 <__aeabi_uldivmod>
 80089f4:	4602      	mov	r2, r0
 80089f6:	460b      	mov	r3, r1
 80089f8:	4613      	mov	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	e04a      	b.n	8008a94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089fe:	4b31      	ldr	r3, [pc, #196]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	099b      	lsrs	r3, r3, #6
 8008a04:	461a      	mov	r2, r3
 8008a06:	f04f 0300 	mov.w	r3, #0
 8008a0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008a0e:	f04f 0100 	mov.w	r1, #0
 8008a12:	ea02 0400 	and.w	r4, r2, r0
 8008a16:	ea03 0501 	and.w	r5, r3, r1
 8008a1a:	4620      	mov	r0, r4
 8008a1c:	4629      	mov	r1, r5
 8008a1e:	f04f 0200 	mov.w	r2, #0
 8008a22:	f04f 0300 	mov.w	r3, #0
 8008a26:	014b      	lsls	r3, r1, #5
 8008a28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008a2c:	0142      	lsls	r2, r0, #5
 8008a2e:	4610      	mov	r0, r2
 8008a30:	4619      	mov	r1, r3
 8008a32:	1b00      	subs	r0, r0, r4
 8008a34:	eb61 0105 	sbc.w	r1, r1, r5
 8008a38:	f04f 0200 	mov.w	r2, #0
 8008a3c:	f04f 0300 	mov.w	r3, #0
 8008a40:	018b      	lsls	r3, r1, #6
 8008a42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008a46:	0182      	lsls	r2, r0, #6
 8008a48:	1a12      	subs	r2, r2, r0
 8008a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8008a4e:	f04f 0000 	mov.w	r0, #0
 8008a52:	f04f 0100 	mov.w	r1, #0
 8008a56:	00d9      	lsls	r1, r3, #3
 8008a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a5c:	00d0      	lsls	r0, r2, #3
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	1912      	adds	r2, r2, r4
 8008a64:	eb45 0303 	adc.w	r3, r5, r3
 8008a68:	f04f 0000 	mov.w	r0, #0
 8008a6c:	f04f 0100 	mov.w	r1, #0
 8008a70:	0299      	lsls	r1, r3, #10
 8008a72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008a76:	0290      	lsls	r0, r2, #10
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4619      	mov	r1, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	461a      	mov	r2, r3
 8008a84:	f04f 0300 	mov.w	r3, #0
 8008a88:	f7f8 f91e 	bl	8000cc8 <__aeabi_uldivmod>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4613      	mov	r3, r2
 8008a92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008a94:	4b0b      	ldr	r3, [pc, #44]	; (8008ac4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	0c1b      	lsrs	r3, r3, #16
 8008a9a:	f003 0303 	and.w	r3, r3, #3
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aac:	60bb      	str	r3, [r7, #8]
      break;
 8008aae:	e002      	b.n	8008ab6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ab0:	4b05      	ldr	r3, [pc, #20]	; (8008ac8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008ab2:	60bb      	str	r3, [r7, #8]
      break;
 8008ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ab6:	68bb      	ldr	r3, [r7, #8]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008ac2:	bf00      	nop
 8008ac4:	40023800 	.word	0x40023800
 8008ac8:	00f42400 	.word	0x00f42400

08008acc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ad0:	4b03      	ldr	r3, [pc, #12]	; (8008ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20000004 	.word	0x20000004

08008ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008ae8:	f7ff fff0 	bl	8008acc <HAL_RCC_GetHCLKFreq>
 8008aec:	4602      	mov	r2, r0
 8008aee:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	0a9b      	lsrs	r3, r3, #10
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	4903      	ldr	r1, [pc, #12]	; (8008b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008afa:	5ccb      	ldrb	r3, [r1, r3]
 8008afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	40023800 	.word	0x40023800
 8008b08:	080161a0 	.word	0x080161a0

08008b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b10:	f7ff ffdc 	bl	8008acc <HAL_RCC_GetHCLKFreq>
 8008b14:	4602      	mov	r2, r0
 8008b16:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	0b5b      	lsrs	r3, r3, #13
 8008b1c:	f003 0307 	and.w	r3, r3, #7
 8008b20:	4903      	ldr	r1, [pc, #12]	; (8008b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b22:	5ccb      	ldrb	r3, [r1, r3]
 8008b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	40023800 	.word	0x40023800
 8008b30:	080161a0 	.word	0x080161a0

08008b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 0301 	and.w	r3, r3, #1
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10b      	bne.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d105      	bne.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d075      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008b68:	4bad      	ldr	r3, [pc, #692]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008b6e:	f7fd f85d 	bl	8005c2c <HAL_GetTick>
 8008b72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b74:	e008      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008b76:	f7fd f859 	bl	8005c2c <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d901      	bls.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e18b      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008b88:	4ba6      	ldr	r3, [pc, #664]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1f0      	bne.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d009      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	019a      	lsls	r2, r3, #6
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	071b      	lsls	r3, r3, #28
 8008bac:	499d      	ldr	r1, [pc, #628]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d01f      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008bc0:	4b98      	ldr	r3, [pc, #608]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc6:	0f1b      	lsrs	r3, r3, #28
 8008bc8:	f003 0307 	and.w	r3, r3, #7
 8008bcc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	019a      	lsls	r2, r3, #6
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	061b      	lsls	r3, r3, #24
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	071b      	lsls	r3, r3, #28
 8008be0:	4990      	ldr	r1, [pc, #576]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008be8:	4b8e      	ldr	r3, [pc, #568]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bee:	f023 021f 	bic.w	r2, r3, #31
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	498a      	ldr	r1, [pc, #552]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00d      	beq.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	019a      	lsls	r2, r3, #6
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	061b      	lsls	r3, r3, #24
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	071b      	lsls	r3, r3, #28
 8008c20:	4980      	ldr	r1, [pc, #512]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008c22:	4313      	orrs	r3, r2
 8008c24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008c28:	4b7d      	ldr	r3, [pc, #500]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c2e:	f7fc fffd 	bl	8005c2c <HAL_GetTick>
 8008c32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008c34:	e008      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008c36:	f7fc fff9 	bl	8005c2c <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e12b      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008c48:	4b76      	ldr	r3, [pc, #472]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0f0      	beq.n	8008c36 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0304 	and.w	r3, r3, #4
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d105      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d079      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008c6c:	4b6e      	ldr	r3, [pc, #440]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c72:	f7fc ffdb 	bl	8005c2c <HAL_GetTick>
 8008c76:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c78:	e008      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008c7a:	f7fc ffd7 	bl	8005c2c <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d901      	bls.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e109      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c8c:	4b65      	ldr	r3, [pc, #404]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c98:	d0ef      	beq.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0304 	and.w	r3, r3, #4
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d020      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ca6:	4b5f      	ldr	r3, [pc, #380]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cac:	0f1b      	lsrs	r3, r3, #28
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	019a      	lsls	r2, r3, #6
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	061b      	lsls	r3, r3, #24
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	071b      	lsls	r3, r3, #28
 8008cc6:	4957      	ldr	r1, [pc, #348]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008cce:	4b55      	ldr	r3, [pc, #340]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	021b      	lsls	r3, r3, #8
 8008ce0:	4950      	ldr	r1, [pc, #320]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0308 	and.w	r3, r3, #8
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d01e      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008cf4:	4b4b      	ldr	r3, [pc, #300]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cfa:	0e1b      	lsrs	r3, r3, #24
 8008cfc:	f003 030f 	and.w	r3, r3, #15
 8008d00:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	019a      	lsls	r2, r3, #6
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	061b      	lsls	r3, r3, #24
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	071b      	lsls	r3, r3, #28
 8008d14:	4943      	ldr	r1, [pc, #268]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008d1c:	4b41      	ldr	r3, [pc, #260]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	493e      	ldr	r1, [pc, #248]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008d32:	4b3d      	ldr	r3, [pc, #244]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d34:	2201      	movs	r2, #1
 8008d36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d38:	f7fc ff78 	bl	8005c2c <HAL_GetTick>
 8008d3c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d3e:	e008      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008d40:	f7fc ff74 	bl	8005c2c <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e0a6      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d52:	4b34      	ldr	r3, [pc, #208]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d5e:	d1ef      	bne.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0320 	and.w	r3, r3, #32
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 808d 	beq.w	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	4b2c      	ldr	r3, [pc, #176]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	4a2b      	ldr	r2, [pc, #172]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8008d7e:	4b29      	ldr	r3, [pc, #164]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d86:	60fb      	str	r3, [r7, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008d8a:	4b28      	ldr	r3, [pc, #160]	; (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a27      	ldr	r2, [pc, #156]	; (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d96:	f7fc ff49 	bl	8005c2c <HAL_GetTick>
 8008d9a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008d9c:	e008      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008d9e:	f7fc ff45 	bl	8005c2c <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b02      	cmp	r3, #2
 8008daa:	d901      	bls.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	e077      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008db0:	4b1e      	ldr	r3, [pc, #120]	; (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d0f0      	beq.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008dbc:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d039      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d032      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008dda:	4b12      	ldr	r3, [pc, #72]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008de4:	4b12      	ldr	r3, [pc, #72]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008de6:	2201      	movs	r2, #1
 8008de8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008dea:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008df0:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008df6:	4b0b      	ldr	r3, [pc, #44]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d11e      	bne.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008e02:	f7fc ff13 	bl	8005c2c <HAL_GetTick>
 8008e06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e08:	e014      	b.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e0a:	f7fc ff0f 	bl	8005c2c <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d90b      	bls.n	8008e34 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e03f      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8008e20:	42470068 	.word	0x42470068
 8008e24:	40023800 	.word	0x40023800
 8008e28:	42470070 	.word	0x42470070
 8008e2c:	40007000 	.word	0x40007000
 8008e30:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e34:	4b1c      	ldr	r3, [pc, #112]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0e4      	beq.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e4c:	d10d      	bne.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008e4e:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e62:	4911      	ldr	r1, [pc, #68]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e64:	4313      	orrs	r3, r2
 8008e66:	608b      	str	r3, [r1, #8]
 8008e68:	e005      	b.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008e6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	4a0e      	ldr	r2, [pc, #56]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e70:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008e74:	6093      	str	r3, [r2, #8]
 8008e76:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e82:	4909      	ldr	r1, [pc, #36]	; (8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0310 	and.w	r3, r3, #16
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d004      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008e9a:	4b04      	ldr	r3, [pc, #16]	; (8008eac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8008e9c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3718      	adds	r7, #24
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	40023800 	.word	0x40023800
 8008eac:	424711e0 	.word	0x424711e0

08008eb0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d101      	bne.n	8008ec2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e083      	b.n	8008fca <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7f5b      	ldrb	r3, [r3, #29]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d105      	bne.n	8008ed8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f7fa ffb0 	bl	8003e38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	22ca      	movs	r2, #202	; 0xca
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2253      	movs	r2, #83	; 0x53
 8008eec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 faa8 	bl	8009444 <RTC_EnterInitMode>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d008      	beq.n	8008f0c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	22ff      	movs	r2, #255	; 0xff
 8008f00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2204      	movs	r2, #4
 8008f06:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e05e      	b.n	8008fca <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6812      	ldr	r2, [r2, #0]
 8008f16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6899      	ldr	r1, [r3, #8]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	68d2      	ldr	r2, [r2, #12]
 8008f46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6919      	ldr	r1, [r3, #16]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	041a      	lsls	r2, r3, #16
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68da      	ldr	r2, [r3, #12]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f6a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f003 0320 	and.w	r3, r3, #32
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10e      	bne.n	8008f98 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa3a 	bl	80093f4 <HAL_RTC_WaitForSynchro>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d008      	beq.n	8008f98 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	22ff      	movs	r2, #255	; 0xff
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2204      	movs	r2, #4
 8008f92:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e018      	b.n	8008fca <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008fa6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	699a      	ldr	r2, [r3, #24]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	22ff      	movs	r2, #255	; 0xff
 8008fc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008fc8:	2300      	movs	r3, #0
  }
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fd2:	b590      	push	{r4, r7, lr}
 8008fd4:	b087      	sub	sp, #28
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	7f1b      	ldrb	r3, [r3, #28]
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d101      	bne.n	8008fee <HAL_RTC_SetTime+0x1c>
 8008fea:	2302      	movs	r3, #2
 8008fec:	e0aa      	b.n	8009144 <HAL_RTC_SetTime+0x172>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d126      	bne.n	800904e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	d102      	bne.n	8009014 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2200      	movs	r2, #0
 8009012:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	4618      	mov	r0, r3
 800901a:	f000 fa3f 	bl	800949c <RTC_ByteToBcd2>
 800901e:	4603      	mov	r3, r0
 8009020:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fa38 	bl	800949c <RTC_ByteToBcd2>
 800902c:	4603      	mov	r3, r0
 800902e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009030:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	789b      	ldrb	r3, [r3, #2]
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fa30 	bl	800949c <RTC_ByteToBcd2>
 800903c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800903e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	78db      	ldrb	r3, [r3, #3]
 8009046:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009048:	4313      	orrs	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
 800904c:	e018      	b.n	8009080 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009058:	2b00      	cmp	r3, #0
 800905a:	d102      	bne.n	8009062 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2200      	movs	r2, #0
 8009060:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	785b      	ldrb	r3, [r3, #1]
 800906c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800906e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009074:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	78db      	ldrb	r3, [r3, #3]
 800907a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800907c:	4313      	orrs	r3, r2
 800907e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	22ca      	movs	r2, #202	; 0xca
 8009086:	625a      	str	r2, [r3, #36]	; 0x24
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2253      	movs	r2, #83	; 0x53
 800908e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f000 f9d7 	bl	8009444 <RTC_EnterInitMode>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d00b      	beq.n	80090b4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2204      	movs	r2, #4
 80090a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e047      	b.n	8009144 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80090be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80090c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6899      	ldr	r1, [r3, #8]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	430a      	orrs	r2, r1
 80090ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090fa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b00      	cmp	r3, #0
 8009108:	d111      	bne.n	800912e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f000 f972 	bl	80093f4 <HAL_RTC_WaitForSynchro>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00b      	beq.n	800912e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	22ff      	movs	r2, #255	; 0xff
 800911c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2204      	movs	r2, #4
 8009122:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e00a      	b.n	8009144 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	22ff      	movs	r2, #255	; 0xff
 8009134:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009142:	2300      	movs	r3, #0
  }
}
 8009144:	4618      	mov	r0, r3
 8009146:	371c      	adds	r7, #28
 8009148:	46bd      	mov	sp, r7
 800914a:	bd90      	pop	{r4, r7, pc}

0800914c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800917e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009182:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	0c1b      	lsrs	r3, r3, #16
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800918e:	b2da      	uxtb	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	0a1b      	lsrs	r3, r3, #8
 8009198:	b2db      	uxtb	r3, r3
 800919a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	0c1b      	lsrs	r3, r3, #16
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d11a      	bne.n	80091fe <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 f983 	bl	80094d8 <RTC_Bcd2ToByte>
 80091d2:	4603      	mov	r3, r0
 80091d4:	461a      	mov	r2, r3
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	785b      	ldrb	r3, [r3, #1]
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f97a 	bl	80094d8 <RTC_Bcd2ToByte>
 80091e4:	4603      	mov	r3, r0
 80091e6:	461a      	mov	r2, r3
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	789b      	ldrb	r3, [r3, #2]
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 f971 	bl	80094d8 <RTC_Bcd2ToByte>
 80091f6:	4603      	mov	r3, r0
 80091f8:	461a      	mov	r2, r3
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009208:	b590      	push	{r4, r7, lr}
 800920a:	b087      	sub	sp, #28
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	7f1b      	ldrb	r3, [r3, #28]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d101      	bne.n	8009224 <HAL_RTC_SetDate+0x1c>
 8009220:	2302      	movs	r3, #2
 8009222:	e094      	b.n	800934e <HAL_RTC_SetDate+0x146>
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2201      	movs	r2, #1
 8009228:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2202      	movs	r2, #2
 800922e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10e      	bne.n	8009254 <HAL_RTC_SetDate+0x4c>
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	f003 0310 	and.w	r3, r3, #16
 800923e:	2b00      	cmp	r3, #0
 8009240:	d008      	beq.n	8009254 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	785b      	ldrb	r3, [r3, #1]
 8009246:	f023 0310 	bic.w	r3, r3, #16
 800924a:	b2db      	uxtb	r3, r3
 800924c:	330a      	adds	r3, #10
 800924e:	b2da      	uxtb	r2, r3
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d11c      	bne.n	8009294 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	78db      	ldrb	r3, [r3, #3]
 800925e:	4618      	mov	r0, r3
 8009260:	f000 f91c 	bl	800949c <RTC_ByteToBcd2>
 8009264:	4603      	mov	r3, r0
 8009266:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	785b      	ldrb	r3, [r3, #1]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 f915 	bl	800949c <RTC_ByteToBcd2>
 8009272:	4603      	mov	r3, r0
 8009274:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009276:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	789b      	ldrb	r3, [r3, #2]
 800927c:	4618      	mov	r0, r3
 800927e:	f000 f90d 	bl	800949c <RTC_ByteToBcd2>
 8009282:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009284:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800928e:	4313      	orrs	r3, r2
 8009290:	617b      	str	r3, [r7, #20]
 8009292:	e00e      	b.n	80092b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	78db      	ldrb	r3, [r3, #3]
 8009298:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	785b      	ldrb	r3, [r3, #1]
 800929e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80092a0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80092a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80092ae:	4313      	orrs	r3, r2
 80092b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	22ca      	movs	r2, #202	; 0xca
 80092b8:	625a      	str	r2, [r3, #36]	; 0x24
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2253      	movs	r2, #83	; 0x53
 80092c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 f8be 	bl	8009444 <RTC_EnterInitMode>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00b      	beq.n	80092e6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	22ff      	movs	r2, #255	; 0xff
 80092d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2204      	movs	r2, #4
 80092da:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e033      	b.n	800934e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80092f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092f4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68da      	ldr	r2, [r3, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009304:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	d111      	bne.n	8009338 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 f86d 	bl	80093f4 <HAL_RTC_WaitForSynchro>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00b      	beq.n	8009338 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	22ff      	movs	r2, #255	; 0xff
 8009326:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2204      	movs	r2, #4
 800932c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e00a      	b.n	800934e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	22ff      	movs	r2, #255	; 0xff
 800933e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2201      	movs	r2, #1
 8009344:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2200      	movs	r2, #0
 800934a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800934c:	2300      	movs	r3, #0
  }
}
 800934e:	4618      	mov	r0, r3
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	bd90      	pop	{r4, r7, pc}

08009356 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b086      	sub	sp, #24
 800935a:	af00      	add	r7, sp, #0
 800935c:	60f8      	str	r0, [r7, #12]
 800935e:	60b9      	str	r1, [r7, #8]
 8009360:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009362:	2300      	movs	r3, #0
 8009364:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009370:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009374:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	0c1b      	lsrs	r3, r3, #16
 800937a:	b2da      	uxtb	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	0a1b      	lsrs	r3, r3, #8
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f003 031f 	and.w	r3, r3, #31
 800938a:	b2da      	uxtb	r2, r3
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009398:	b2da      	uxtb	r2, r3
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	0b5b      	lsrs	r3, r3, #13
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	f003 0307 	and.w	r3, r3, #7
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d11a      	bne.n	80093ea <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	78db      	ldrb	r3, [r3, #3]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 f88d 	bl	80094d8 <RTC_Bcd2ToByte>
 80093be:	4603      	mov	r3, r0
 80093c0:	461a      	mov	r2, r3
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	785b      	ldrb	r3, [r3, #1]
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 f884 	bl	80094d8 <RTC_Bcd2ToByte>
 80093d0:	4603      	mov	r3, r0
 80093d2:	461a      	mov	r2, r3
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	789b      	ldrb	r3, [r3, #2]
 80093dc:	4618      	mov	r0, r3
 80093de:	f000 f87b 	bl	80094d8 <RTC_Bcd2ToByte>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800940e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009410:	f7fc fc0c 	bl	8005c2c <HAL_GetTick>
 8009414:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009416:	e009      	b.n	800942c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009418:	f7fc fc08 	bl	8005c2c <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009426:	d901      	bls.n	800942c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	e007      	b.n	800943c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0ee      	beq.n	8009418 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945a:	2b00      	cmp	r3, #0
 800945c:	d119      	bne.n	8009492 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f04f 32ff 	mov.w	r2, #4294967295
 8009466:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009468:	f7fc fbe0 	bl	8005c2c <HAL_GetTick>
 800946c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800946e:	e009      	b.n	8009484 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009470:	f7fc fbdc 	bl	8005c2c <HAL_GetTick>
 8009474:	4602      	mov	r2, r0
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800947e:	d901      	bls.n	8009484 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e007      	b.n	8009494 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0ee      	beq.n	8009470 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80094aa:	e005      	b.n	80094b8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80094b2:	79fb      	ldrb	r3, [r7, #7]
 80094b4:	3b0a      	subs	r3, #10
 80094b6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80094b8:	79fb      	ldrb	r3, [r7, #7]
 80094ba:	2b09      	cmp	r3, #9
 80094bc:	d8f6      	bhi.n	80094ac <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	011b      	lsls	r3, r3, #4
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	79fb      	ldrb	r3, [r7, #7]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	b2db      	uxtb	r3, r3
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	4603      	mov	r3, r0
 80094e0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	091b      	lsrs	r3, r3, #4
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	461a      	mov	r2, r3
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	f003 030f 	and.w	r3, r3, #15
 80094fe:	b2da      	uxtb	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	4413      	add	r3, r2
 8009506:	b2db      	uxtb	r3, r3
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e056      	b.n	80095d4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7fb f81b 	bl	800457c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2202      	movs	r2, #2
 800954a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800955c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685a      	ldr	r2, [r3, #4]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	431a      	orrs	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	431a      	orrs	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	431a      	orrs	r2, r3
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	431a      	orrs	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	ea42 0103 	orr.w	r1, r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	0c1b      	lsrs	r3, r3, #16
 80095a4:	f003 0104 	and.w	r1, r3, #4
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	69da      	ldr	r2, [r3, #28]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b088      	sub	sp, #32
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	4613      	mov	r3, r2
 80095ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095f8:	d112      	bne.n	8009620 <HAL_SPI_Receive+0x44>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10e      	bne.n	8009620 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2204      	movs	r2, #4
 8009606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	4613      	mov	r3, r2
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	68b9      	ldr	r1, [r7, #8]
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 f8e9 	bl	80097ee <HAL_SPI_TransmitReceive>
 800961c:	4603      	mov	r3, r0
 800961e:	e0e2      	b.n	80097e6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009626:	2b01      	cmp	r3, #1
 8009628:	d101      	bne.n	800962e <HAL_SPI_Receive+0x52>
 800962a:	2302      	movs	r3, #2
 800962c:	e0db      	b.n	80097e6 <HAL_SPI_Receive+0x20a>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009636:	f7fc faf9 	bl	8005c2c <HAL_GetTick>
 800963a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009642:	b2db      	uxtb	r3, r3
 8009644:	2b01      	cmp	r3, #1
 8009646:	d002      	beq.n	800964e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009648:	2302      	movs	r3, #2
 800964a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800964c:	e0c2      	b.n	80097d4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d002      	beq.n	800965a <HAL_SPI_Receive+0x7e>
 8009654:	88fb      	ldrh	r3, [r7, #6]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d102      	bne.n	8009660 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800965e:	e0b9      	b.n	80097d4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2204      	movs	r2, #4
 8009664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	88fa      	ldrh	r2, [r7, #6]
 8009678:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	88fa      	ldrh	r2, [r7, #6]
 800967e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096a6:	d107      	bne.n	80096b8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80096b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c2:	2b40      	cmp	r3, #64	; 0x40
 80096c4:	d007      	beq.n	80096d6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d162      	bne.n	80097a4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80096de:	e02e      	b.n	800973e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d115      	bne.n	800971a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f103 020c 	add.w	r2, r3, #12
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fa:	7812      	ldrb	r2, [r2, #0]
 80096fc:	b2d2      	uxtb	r2, r2
 80096fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800970e:	b29b      	uxth	r3, r3
 8009710:	3b01      	subs	r3, #1
 8009712:	b29a      	uxth	r2, r3
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009718:	e011      	b.n	800973e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800971a:	f7fc fa87 	bl	8005c2c <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	683a      	ldr	r2, [r7, #0]
 8009726:	429a      	cmp	r2, r3
 8009728:	d803      	bhi.n	8009732 <HAL_SPI_Receive+0x156>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009730:	d102      	bne.n	8009738 <HAL_SPI_Receive+0x15c>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d102      	bne.n	800973e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800973c:	e04a      	b.n	80097d4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009742:	b29b      	uxth	r3, r3
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1cb      	bne.n	80096e0 <HAL_SPI_Receive+0x104>
 8009748:	e031      	b.n	80097ae <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b01      	cmp	r3, #1
 8009756:	d113      	bne.n	8009780 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009762:	b292      	uxth	r2, r2
 8009764:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976a:	1c9a      	adds	r2, r3, #2
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009774:	b29b      	uxth	r3, r3
 8009776:	3b01      	subs	r3, #1
 8009778:	b29a      	uxth	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800977e:	e011      	b.n	80097a4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009780:	f7fc fa54 	bl	8005c2c <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d803      	bhi.n	8009798 <HAL_SPI_Receive+0x1bc>
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009796:	d102      	bne.n	800979e <HAL_SPI_Receive+0x1c2>
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d102      	bne.n	80097a4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80097a2:	e017      	b.n	80097d4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1cd      	bne.n	800974a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fa27 	bl	8009c06 <SPI_EndRxTransaction>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d002      	beq.n	80097c4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2220      	movs	r2, #32
 80097c2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d002      	beq.n	80097d2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	75fb      	strb	r3, [r7, #23]
 80097d0:	e000      	b.n	80097d4 <HAL_SPI_Receive+0x1f8>
  }

error :
 80097d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80097e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b08c      	sub	sp, #48	; 0x30
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
 80097fa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097fc:	2301      	movs	r3, #1
 80097fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800980c:	2b01      	cmp	r3, #1
 800980e:	d101      	bne.n	8009814 <HAL_SPI_TransmitReceive+0x26>
 8009810:	2302      	movs	r3, #2
 8009812:	e18a      	b.n	8009b2a <HAL_SPI_TransmitReceive+0x33c>
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800981c:	f7fc fa06 	bl	8005c2c <HAL_GetTick>
 8009820:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009832:	887b      	ldrh	r3, [r7, #2]
 8009834:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800983a:	2b01      	cmp	r3, #1
 800983c:	d00f      	beq.n	800985e <HAL_SPI_TransmitReceive+0x70>
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009844:	d107      	bne.n	8009856 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d103      	bne.n	8009856 <HAL_SPI_TransmitReceive+0x68>
 800984e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009852:	2b04      	cmp	r3, #4
 8009854:	d003      	beq.n	800985e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009856:	2302      	movs	r3, #2
 8009858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800985c:	e15b      	b.n	8009b16 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d005      	beq.n	8009870 <HAL_SPI_TransmitReceive+0x82>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d002      	beq.n	8009870 <HAL_SPI_TransmitReceive+0x82>
 800986a:	887b      	ldrh	r3, [r7, #2]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d103      	bne.n	8009878 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009870:	2301      	movs	r3, #1
 8009872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009876:	e14e      	b.n	8009b16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b04      	cmp	r3, #4
 8009882:	d003      	beq.n	800988c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2205      	movs	r2, #5
 8009888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	887a      	ldrh	r2, [r7, #2]
 800989c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	887a      	ldrh	r2, [r7, #2]
 80098a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	887a      	ldrh	r2, [r7, #2]
 80098ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	887a      	ldrh	r2, [r7, #2]
 80098b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098cc:	2b40      	cmp	r3, #64	; 0x40
 80098ce:	d007      	beq.n	80098e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e8:	d178      	bne.n	80099dc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d002      	beq.n	80098f8 <HAL_SPI_TransmitReceive+0x10a>
 80098f2:	8b7b      	ldrh	r3, [r7, #26]
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d166      	bne.n	80099c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fc:	881a      	ldrh	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009908:	1c9a      	adds	r2, r3, #2
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009912:	b29b      	uxth	r3, r3
 8009914:	3b01      	subs	r3, #1
 8009916:	b29a      	uxth	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800991c:	e053      	b.n	80099c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f003 0302 	and.w	r3, r3, #2
 8009928:	2b02      	cmp	r3, #2
 800992a:	d11b      	bne.n	8009964 <HAL_SPI_TransmitReceive+0x176>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009930:	b29b      	uxth	r3, r3
 8009932:	2b00      	cmp	r3, #0
 8009934:	d016      	beq.n	8009964 <HAL_SPI_TransmitReceive+0x176>
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d113      	bne.n	8009964 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	881a      	ldrh	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	1c9a      	adds	r2, r3, #2
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009956:	b29b      	uxth	r3, r3
 8009958:	3b01      	subs	r3, #1
 800995a:	b29a      	uxth	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b01      	cmp	r3, #1
 8009970:	d119      	bne.n	80099a6 <HAL_SPI_TransmitReceive+0x1b8>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009976:	b29b      	uxth	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d014      	beq.n	80099a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68da      	ldr	r2, [r3, #12]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009986:	b292      	uxth	r2, r2
 8009988:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998e:	1c9a      	adds	r2, r3, #2
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	b29a      	uxth	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80099a2:	2301      	movs	r3, #1
 80099a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80099a6:	f7fc f941 	bl	8005c2c <HAL_GetTick>
 80099aa:	4602      	mov	r2, r0
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d807      	bhi.n	80099c6 <HAL_SPI_TransmitReceive+0x1d8>
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099bc:	d003      	beq.n	80099c6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099c4:	e0a7      	b.n	8009b16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d1a6      	bne.n	800991e <HAL_SPI_TransmitReceive+0x130>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1a1      	bne.n	800991e <HAL_SPI_TransmitReceive+0x130>
 80099da:	e07c      	b.n	8009ad6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <HAL_SPI_TransmitReceive+0x1fc>
 80099e4:	8b7b      	ldrh	r3, [r7, #26]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d16b      	bne.n	8009ac2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	330c      	adds	r3, #12
 80099f4:	7812      	ldrb	r2, [r2, #0]
 80099f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a10:	e057      	b.n	8009ac2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d11c      	bne.n	8009a5a <HAL_SPI_TransmitReceive+0x26c>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d017      	beq.n	8009a5a <HAL_SPI_TransmitReceive+0x26c>
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d114      	bne.n	8009a5a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	330c      	adds	r3, #12
 8009a3a:	7812      	ldrb	r2, [r2, #0]
 8009a3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a42:	1c5a      	adds	r2, r3, #1
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f003 0301 	and.w	r3, r3, #1
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d119      	bne.n	8009a9c <HAL_SPI_TransmitReceive+0x2ae>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d014      	beq.n	8009a9c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	68da      	ldr	r2, [r3, #12]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7c:	b2d2      	uxtb	r2, r2
 8009a7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	3b01      	subs	r3, #1
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009a9c:	f7fc f8c6 	bl	8005c2c <HAL_GetTick>
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa4:	1ad3      	subs	r3, r2, r3
 8009aa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d803      	bhi.n	8009ab4 <HAL_SPI_TransmitReceive+0x2c6>
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab2:	d102      	bne.n	8009aba <HAL_SPI_TransmitReceive+0x2cc>
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d103      	bne.n	8009ac2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ac0:	e029      	b.n	8009b16 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1a2      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x224>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d19d      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 f8f8 	bl	8009cd0 <SPI_EndRxTxTransaction>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d006      	beq.n	8009af4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2220      	movs	r2, #32
 8009af0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009af2:	e010      	b.n	8009b16 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10b      	bne.n	8009b14 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009afc:	2300      	movs	r3, #0
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	617b      	str	r3, [r7, #20]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	617b      	str	r3, [r7, #20]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	e000      	b.n	8009b16 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009b14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3730      	adds	r7, #48	; 0x30
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}

08009b32 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b084      	sub	sp, #16
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	603b      	str	r3, [r7, #0]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b42:	e04c      	b.n	8009bde <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4a:	d048      	beq.n	8009bde <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009b4c:	f7fc f86e 	bl	8005c2c <HAL_GetTick>
 8009b50:	4602      	mov	r2, r0
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	1ad3      	subs	r3, r2, r3
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d902      	bls.n	8009b62 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d13d      	bne.n	8009bde <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b7a:	d111      	bne.n	8009ba0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b84:	d004      	beq.n	8009b90 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b8e:	d107      	bne.n	8009ba0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ba8:	d10f      	bne.n	8009bca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e00f      	b.n	8009bfe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689a      	ldr	r2, [r3, #8]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	4013      	ands	r3, r2
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	bf0c      	ite	eq
 8009bee:	2301      	moveq	r3, #1
 8009bf0:	2300      	movne	r3, #0
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	79fb      	ldrb	r3, [r7, #7]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d1a3      	bne.n	8009b44 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b086      	sub	sp, #24
 8009c0a:	af02      	add	r7, sp, #8
 8009c0c:	60f8      	str	r0, [r7, #12]
 8009c0e:	60b9      	str	r1, [r7, #8]
 8009c10:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c1a:	d111      	bne.n	8009c40 <SPI_EndRxTransaction+0x3a>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	689b      	ldr	r3, [r3, #8]
 8009c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c24:	d004      	beq.n	8009c30 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c2e:	d107      	bne.n	8009c40 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681a      	ldr	r2, [r3, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c3e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c48:	d12a      	bne.n	8009ca0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c52:	d012      	beq.n	8009c7a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	9300      	str	r3, [sp, #0]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	2180      	movs	r1, #128	; 0x80
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f7ff ff67 	bl	8009b32 <SPI_WaitFlagStateUntilTimeout>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d02d      	beq.n	8009cc6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c6e:	f043 0220 	orr.w	r2, r3, #32
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e026      	b.n	8009cc8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	2200      	movs	r2, #0
 8009c82:	2101      	movs	r1, #1
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f7ff ff54 	bl	8009b32 <SPI_WaitFlagStateUntilTimeout>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01a      	beq.n	8009cc6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c94:	f043 0220 	orr.w	r2, r3, #32
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	e013      	b.n	8009cc8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2101      	movs	r1, #1
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f7ff ff41 	bl	8009b32 <SPI_WaitFlagStateUntilTimeout>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d007      	beq.n	8009cc6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cba:	f043 0220 	orr.w	r2, r3, #32
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009cc2:	2303      	movs	r3, #3
 8009cc4:	e000      	b.n	8009cc8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009cc6:	2300      	movs	r3, #0
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3710      	adds	r7, #16
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009cdc:	4b1b      	ldr	r3, [pc, #108]	; (8009d4c <SPI_EndRxTxTransaction+0x7c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a1b      	ldr	r2, [pc, #108]	; (8009d50 <SPI_EndRxTxTransaction+0x80>)
 8009ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce6:	0d5b      	lsrs	r3, r3, #21
 8009ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cec:	fb02 f303 	mul.w	r3, r2, r3
 8009cf0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009cfa:	d112      	bne.n	8009d22 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	2200      	movs	r2, #0
 8009d04:	2180      	movs	r1, #128	; 0x80
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f7ff ff13 	bl	8009b32 <SPI_WaitFlagStateUntilTimeout>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d016      	beq.n	8009d40 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d16:	f043 0220 	orr.w	r2, r3, #32
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	e00f      	b.n	8009d42 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00a      	beq.n	8009d3e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d38:	2b80      	cmp	r3, #128	; 0x80
 8009d3a:	d0f2      	beq.n	8009d22 <SPI_EndRxTxTransaction+0x52>
 8009d3c:	e000      	b.n	8009d40 <SPI_EndRxTxTransaction+0x70>
        break;
 8009d3e:	bf00      	nop
  }

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20000004 	.word	0x20000004
 8009d50:	165e9f81 	.word	0x165e9f81

08009d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e01d      	b.n	8009da2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d106      	bne.n	8009d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7fa ff42 	bl	8004c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3304      	adds	r3, #4
 8009d90:	4619      	mov	r1, r3
 8009d92:	4610      	mov	r0, r2
 8009d94:	f000 fbb2 	bl	800a4fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b085      	sub	sp, #20
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0201 	orr.w	r2, r2, #1
 8009dc0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f003 0307 	and.w	r3, r3, #7
 8009dcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b06      	cmp	r3, #6
 8009dd2:	d007      	beq.n	8009de4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b082      	sub	sp, #8
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d101      	bne.n	8009e04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e00:	2301      	movs	r3, #1
 8009e02:	e01d      	b.n	8009e40 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d106      	bne.n	8009e1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f815 	bl	8009e48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2202      	movs	r2, #2
 8009e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3304      	adds	r3, #4
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4610      	mov	r0, r2
 8009e32:	f000 fb63 	bl	800a4fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	6839      	ldr	r1, [r7, #0]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fe2e 	bl	800aad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a15      	ldr	r2, [pc, #84]	; (8009ed0 <HAL_TIM_PWM_Start+0x74>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d004      	beq.n	8009e88 <HAL_TIM_PWM_Start+0x2c>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a14      	ldr	r2, [pc, #80]	; (8009ed4 <HAL_TIM_PWM_Start+0x78>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d101      	bne.n	8009e8c <HAL_TIM_PWM_Start+0x30>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e000      	b.n	8009e8e <HAL_TIM_PWM_Start+0x32>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d007      	beq.n	8009ea2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ea0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689b      	ldr	r3, [r3, #8]
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2b06      	cmp	r3, #6
 8009eb2:	d007      	beq.n	8009ec4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0201 	orr.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	40010000 	.word	0x40010000
 8009ed4:	40010400 	.word	0x40010400

08009ed8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 fdf0 	bl	800aad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a22      	ldr	r2, [pc, #136]	; (8009f80 <HAL_TIM_PWM_Stop+0xa8>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d004      	beq.n	8009f04 <HAL_TIM_PWM_Stop+0x2c>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a21      	ldr	r2, [pc, #132]	; (8009f84 <HAL_TIM_PWM_Stop+0xac>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d101      	bne.n	8009f08 <HAL_TIM_PWM_Stop+0x30>
 8009f04:	2301      	movs	r3, #1
 8009f06:	e000      	b.n	8009f0a <HAL_TIM_PWM_Stop+0x32>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d017      	beq.n	8009f3e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6a1a      	ldr	r2, [r3, #32]
 8009f14:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f18:	4013      	ands	r3, r2
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10f      	bne.n	8009f3e <HAL_TIM_PWM_Stop+0x66>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6a1a      	ldr	r2, [r3, #32]
 8009f24:	f240 4344 	movw	r3, #1092	; 0x444
 8009f28:	4013      	ands	r3, r2
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d107      	bne.n	8009f3e <HAL_TIM_PWM_Stop+0x66>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	6a1a      	ldr	r2, [r3, #32]
 8009f44:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f48:	4013      	ands	r3, r2
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10f      	bne.n	8009f6e <HAL_TIM_PWM_Stop+0x96>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6a1a      	ldr	r2, [r3, #32]
 8009f54:	f240 4344 	movw	r3, #1092	; 0x444
 8009f58:	4013      	ands	r3, r2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d107      	bne.n	8009f6e <HAL_TIM_PWM_Stop+0x96>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f022 0201 	bic.w	r2, r2, #1
 8009f6c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009f76:	2300      	movs	r3, #0
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}
 8009f80:	40010000 	.word	0x40010000
 8009f84:	40010400 	.word	0x40010400

08009f88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	f003 0302 	and.w	r3, r3, #2
 8009f9a:	2b02      	cmp	r3, #2
 8009f9c:	d122      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f003 0302 	and.w	r3, r3, #2
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d11b      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f06f 0202 	mvn.w	r2, #2
 8009fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2201      	movs	r2, #1
 8009fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	f003 0303 	and.w	r3, r3, #3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d003      	beq.n	8009fd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fa78 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 8009fd0:	e005      	b.n	8009fde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fa6a 	bl	800a4ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f000 fa7b 	bl	800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0304 	and.w	r3, r3, #4
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d122      	bne.n	800a038 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0304 	and.w	r3, r3, #4
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	d11b      	bne.n	800a038 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0204 	mvn.w	r2, #4
 800a008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2202      	movs	r2, #2
 800a00e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fa4e 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 800a024:	e005      	b.n	800a032 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fa40 	bl	800a4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 fa51 	bl	800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	f003 0308 	and.w	r3, r3, #8
 800a042:	2b08      	cmp	r3, #8
 800a044:	d122      	bne.n	800a08c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f003 0308 	and.w	r3, r3, #8
 800a050:	2b08      	cmp	r3, #8
 800a052:	d11b      	bne.n	800a08c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f06f 0208 	mvn.w	r2, #8
 800a05c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2204      	movs	r2, #4
 800a062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	69db      	ldr	r3, [r3, #28]
 800a06a:	f003 0303 	and.w	r3, r3, #3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d003      	beq.n	800a07a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa24 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 800a078:	e005      	b.n	800a086 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fa16 	bl	800a4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fa27 	bl	800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	f003 0310 	and.w	r3, r3, #16
 800a096:	2b10      	cmp	r3, #16
 800a098:	d122      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	f003 0310 	and.w	r3, r3, #16
 800a0a4:	2b10      	cmp	r3, #16
 800a0a6:	d11b      	bne.n	800a0e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f06f 0210 	mvn.w	r2, #16
 800a0b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2208      	movs	r2, #8
 800a0b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d003      	beq.n	800a0ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f9fa 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 800a0cc:	e005      	b.n	800a0da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f9ec 	bl	800a4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f000 f9fd 	bl	800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d10e      	bne.n	800a10c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68db      	ldr	r3, [r3, #12]
 800a0f4:	f003 0301 	and.w	r3, r3, #1
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d107      	bne.n	800a10c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f06f 0201 	mvn.w	r2, #1
 800a104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7f9 fb94 	bl	8003834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a116:	2b80      	cmp	r3, #128	; 0x80
 800a118:	d10e      	bne.n	800a138 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a124:	2b80      	cmp	r3, #128	; 0x80
 800a126:	d107      	bne.n	800a138 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fd78 	bl	800ac28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a142:	2b40      	cmp	r3, #64	; 0x40
 800a144:	d10e      	bne.n	800a164 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a150:	2b40      	cmp	r3, #64	; 0x40
 800a152:	d107      	bne.n	800a164 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 f9c2 	bl	800a4e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	f003 0320 	and.w	r3, r3, #32
 800a16e:	2b20      	cmp	r3, #32
 800a170:	d10e      	bne.n	800a190 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	f003 0320 	and.w	r3, r3, #32
 800a17c:	2b20      	cmp	r3, #32
 800a17e:	d107      	bne.n	800a190 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f06f 0220 	mvn.w	r2, #32
 800a188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fd42 	bl	800ac14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d101      	bne.n	800a1b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	e0b4      	b.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x184>
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2202      	movs	r2, #2
 800a1be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b0c      	cmp	r3, #12
 800a1c6:	f200 809f 	bhi.w	800a308 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a1ca:	a201      	add	r2, pc, #4	; (adr r2, 800a1d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d0:	0800a205 	.word	0x0800a205
 800a1d4:	0800a309 	.word	0x0800a309
 800a1d8:	0800a309 	.word	0x0800a309
 800a1dc:	0800a309 	.word	0x0800a309
 800a1e0:	0800a245 	.word	0x0800a245
 800a1e4:	0800a309 	.word	0x0800a309
 800a1e8:	0800a309 	.word	0x0800a309
 800a1ec:	0800a309 	.word	0x0800a309
 800a1f0:	0800a287 	.word	0x0800a287
 800a1f4:	0800a309 	.word	0x0800a309
 800a1f8:	0800a309 	.word	0x0800a309
 800a1fc:	0800a309 	.word	0x0800a309
 800a200:	0800a2c7 	.word	0x0800a2c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68b9      	ldr	r1, [r7, #8]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f000 fa16 	bl	800a63c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699a      	ldr	r2, [r3, #24]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f042 0208 	orr.w	r2, r2, #8
 800a21e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	699a      	ldr	r2, [r3, #24]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f022 0204 	bic.w	r2, r2, #4
 800a22e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6999      	ldr	r1, [r3, #24]
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	691a      	ldr	r2, [r3, #16]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	430a      	orrs	r2, r1
 800a240:	619a      	str	r2, [r3, #24]
      break;
 800a242:	e062      	b.n	800a30a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f000 fa66 	bl	800a71c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	699a      	ldr	r2, [r3, #24]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a25e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	699a      	ldr	r2, [r3, #24]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a26e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6999      	ldr	r1, [r3, #24]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	021a      	lsls	r2, r3, #8
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	430a      	orrs	r2, r1
 800a282:	619a      	str	r2, [r3, #24]
      break;
 800a284:	e041      	b.n	800a30a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68b9      	ldr	r1, [r7, #8]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 fabb 	bl	800a808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	69da      	ldr	r2, [r3, #28]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f042 0208 	orr.w	r2, r2, #8
 800a2a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69da      	ldr	r2, [r3, #28]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 0204 	bic.w	r2, r2, #4
 800a2b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	69d9      	ldr	r1, [r3, #28]
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	691a      	ldr	r2, [r3, #16]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	430a      	orrs	r2, r1
 800a2c2:	61da      	str	r2, [r3, #28]
      break;
 800a2c4:	e021      	b.n	800a30a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	68b9      	ldr	r1, [r7, #8]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f000 fb0f 	bl	800a8f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69da      	ldr	r2, [r3, #28]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	69d9      	ldr	r1, [r3, #28]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	021a      	lsls	r2, r3, #8
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	430a      	orrs	r2, r1
 800a304:	61da      	str	r2, [r3, #28]
      break;
 800a306:	e000      	b.n	800a30a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a308:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	3710      	adds	r7, #16
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a334:	2b01      	cmp	r3, #1
 800a336:	d101      	bne.n	800a33c <HAL_TIM_ConfigClockSource+0x18>
 800a338:	2302      	movs	r3, #2
 800a33a:	e0b3      	b.n	800a4a4 <HAL_TIM_ConfigClockSource+0x180>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2202      	movs	r2, #2
 800a348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a35a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a362:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a374:	d03e      	beq.n	800a3f4 <HAL_TIM_ConfigClockSource+0xd0>
 800a376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a37a:	f200 8087 	bhi.w	800a48c <HAL_TIM_ConfigClockSource+0x168>
 800a37e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a382:	f000 8085 	beq.w	800a490 <HAL_TIM_ConfigClockSource+0x16c>
 800a386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38a:	d87f      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x168>
 800a38c:	2b70      	cmp	r3, #112	; 0x70
 800a38e:	d01a      	beq.n	800a3c6 <HAL_TIM_ConfigClockSource+0xa2>
 800a390:	2b70      	cmp	r3, #112	; 0x70
 800a392:	d87b      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x168>
 800a394:	2b60      	cmp	r3, #96	; 0x60
 800a396:	d050      	beq.n	800a43a <HAL_TIM_ConfigClockSource+0x116>
 800a398:	2b60      	cmp	r3, #96	; 0x60
 800a39a:	d877      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x168>
 800a39c:	2b50      	cmp	r3, #80	; 0x50
 800a39e:	d03c      	beq.n	800a41a <HAL_TIM_ConfigClockSource+0xf6>
 800a3a0:	2b50      	cmp	r3, #80	; 0x50
 800a3a2:	d873      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x168>
 800a3a4:	2b40      	cmp	r3, #64	; 0x40
 800a3a6:	d058      	beq.n	800a45a <HAL_TIM_ConfigClockSource+0x136>
 800a3a8:	2b40      	cmp	r3, #64	; 0x40
 800a3aa:	d86f      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x168>
 800a3ac:	2b30      	cmp	r3, #48	; 0x30
 800a3ae:	d064      	beq.n	800a47a <HAL_TIM_ConfigClockSource+0x156>
 800a3b0:	2b30      	cmp	r3, #48	; 0x30
 800a3b2:	d86b      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x168>
 800a3b4:	2b20      	cmp	r3, #32
 800a3b6:	d060      	beq.n	800a47a <HAL_TIM_ConfigClockSource+0x156>
 800a3b8:	2b20      	cmp	r3, #32
 800a3ba:	d867      	bhi.n	800a48c <HAL_TIM_ConfigClockSource+0x168>
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d05c      	beq.n	800a47a <HAL_TIM_ConfigClockSource+0x156>
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d05a      	beq.n	800a47a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a3c4:	e062      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6818      	ldr	r0, [r3, #0]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	6899      	ldr	r1, [r3, #8]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f000 fb5b 	bl	800aa90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	609a      	str	r2, [r3, #8]
      break;
 800a3f2:	e04e      	b.n	800a492 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	6899      	ldr	r1, [r3, #8]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	f000 fb44 	bl	800aa90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	689a      	ldr	r2, [r3, #8]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a416:	609a      	str	r2, [r3, #8]
      break;
 800a418:	e03b      	b.n	800a492 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6818      	ldr	r0, [r3, #0]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	6859      	ldr	r1, [r3, #4]
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	461a      	mov	r2, r3
 800a428:	f000 fab8 	bl	800a99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2150      	movs	r1, #80	; 0x50
 800a432:	4618      	mov	r0, r3
 800a434:	f000 fb11 	bl	800aa5a <TIM_ITRx_SetConfig>
      break;
 800a438:	e02b      	b.n	800a492 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6818      	ldr	r0, [r3, #0]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	6859      	ldr	r1, [r3, #4]
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	461a      	mov	r2, r3
 800a448:	f000 fad7 	bl	800a9fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2160      	movs	r1, #96	; 0x60
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fb01 	bl	800aa5a <TIM_ITRx_SetConfig>
      break;
 800a458:	e01b      	b.n	800a492 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6818      	ldr	r0, [r3, #0]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	6859      	ldr	r1, [r3, #4]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	461a      	mov	r2, r3
 800a468:	f000 fa98 	bl	800a99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2140      	movs	r1, #64	; 0x40
 800a472:	4618      	mov	r0, r3
 800a474:	f000 faf1 	bl	800aa5a <TIM_ITRx_SetConfig>
      break;
 800a478:	e00b      	b.n	800a492 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4619      	mov	r1, r3
 800a484:	4610      	mov	r0, r2
 800a486:	f000 fae8 	bl	800aa5a <TIM_ITRx_SetConfig>
      break;
 800a48a:	e002      	b.n	800a492 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a48c:	bf00      	nop
 800a48e:	e000      	b.n	800a492 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a490:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a40      	ldr	r2, [pc, #256]	; (800a610 <TIM_Base_SetConfig+0x114>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d013      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a51a:	d00f      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a3d      	ldr	r2, [pc, #244]	; (800a614 <TIM_Base_SetConfig+0x118>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d00b      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a3c      	ldr	r2, [pc, #240]	; (800a618 <TIM_Base_SetConfig+0x11c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d007      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a3b      	ldr	r2, [pc, #236]	; (800a61c <TIM_Base_SetConfig+0x120>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d003      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a3a      	ldr	r2, [pc, #232]	; (800a620 <TIM_Base_SetConfig+0x124>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d108      	bne.n	800a54e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a2f      	ldr	r2, [pc, #188]	; (800a610 <TIM_Base_SetConfig+0x114>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d02b      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a55c:	d027      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a2c      	ldr	r2, [pc, #176]	; (800a614 <TIM_Base_SetConfig+0x118>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d023      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a2b      	ldr	r2, [pc, #172]	; (800a618 <TIM_Base_SetConfig+0x11c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d01f      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a2a      	ldr	r2, [pc, #168]	; (800a61c <TIM_Base_SetConfig+0x120>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d01b      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a29      	ldr	r2, [pc, #164]	; (800a620 <TIM_Base_SetConfig+0x124>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d017      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a28      	ldr	r2, [pc, #160]	; (800a624 <TIM_Base_SetConfig+0x128>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d013      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a27      	ldr	r2, [pc, #156]	; (800a628 <TIM_Base_SetConfig+0x12c>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d00f      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a26      	ldr	r2, [pc, #152]	; (800a62c <TIM_Base_SetConfig+0x130>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d00b      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a25      	ldr	r2, [pc, #148]	; (800a630 <TIM_Base_SetConfig+0x134>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d007      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a24      	ldr	r2, [pc, #144]	; (800a634 <TIM_Base_SetConfig+0x138>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d003      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a23      	ldr	r2, [pc, #140]	; (800a638 <TIM_Base_SetConfig+0x13c>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d108      	bne.n	800a5c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a0a      	ldr	r2, [pc, #40]	; (800a610 <TIM_Base_SetConfig+0x114>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d003      	beq.n	800a5f4 <TIM_Base_SetConfig+0xf8>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a0c      	ldr	r2, [pc, #48]	; (800a620 <TIM_Base_SetConfig+0x124>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d103      	bne.n	800a5fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	615a      	str	r2, [r3, #20]
}
 800a602:	bf00      	nop
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	40010000 	.word	0x40010000
 800a614:	40000400 	.word	0x40000400
 800a618:	40000800 	.word	0x40000800
 800a61c:	40000c00 	.word	0x40000c00
 800a620:	40010400 	.word	0x40010400
 800a624:	40014000 	.word	0x40014000
 800a628:	40014400 	.word	0x40014400
 800a62c:	40014800 	.word	0x40014800
 800a630:	40001800 	.word	0x40001800
 800a634:	40001c00 	.word	0x40001c00
 800a638:	40002000 	.word	0x40002000

0800a63c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	f023 0201 	bic.w	r2, r3, #1
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a66a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f023 0303 	bic.w	r3, r3, #3
 800a672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f023 0302 	bic.w	r3, r3, #2
 800a684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a20      	ldr	r2, [pc, #128]	; (800a714 <TIM_OC1_SetConfig+0xd8>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d003      	beq.n	800a6a0 <TIM_OC1_SetConfig+0x64>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a1f      	ldr	r2, [pc, #124]	; (800a718 <TIM_OC1_SetConfig+0xdc>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d10c      	bne.n	800a6ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f023 0308 	bic.w	r3, r3, #8
 800a6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f023 0304 	bic.w	r3, r3, #4
 800a6b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a15      	ldr	r2, [pc, #84]	; (800a714 <TIM_OC1_SetConfig+0xd8>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d003      	beq.n	800a6ca <TIM_OC1_SetConfig+0x8e>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a14      	ldr	r2, [pc, #80]	; (800a718 <TIM_OC1_SetConfig+0xdc>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d111      	bne.n	800a6ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	621a      	str	r2, [r3, #32]
}
 800a708:	bf00      	nop
 800a70a:	371c      	adds	r7, #28
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	40010000 	.word	0x40010000
 800a718:	40010400 	.word	0x40010400

0800a71c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	f023 0210 	bic.w	r2, r3, #16
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a74a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	021b      	lsls	r3, r3, #8
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	4313      	orrs	r3, r2
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	f023 0320 	bic.w	r3, r3, #32
 800a766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	011b      	lsls	r3, r3, #4
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	4313      	orrs	r3, r2
 800a772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a22      	ldr	r2, [pc, #136]	; (800a800 <TIM_OC2_SetConfig+0xe4>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d003      	beq.n	800a784 <TIM_OC2_SetConfig+0x68>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a21      	ldr	r2, [pc, #132]	; (800a804 <TIM_OC2_SetConfig+0xe8>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d10d      	bne.n	800a7a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a78a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	68db      	ldr	r3, [r3, #12]
 800a790:	011b      	lsls	r3, r3, #4
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	4313      	orrs	r3, r2
 800a796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a79e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a17      	ldr	r2, [pc, #92]	; (800a800 <TIM_OC2_SetConfig+0xe4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d003      	beq.n	800a7b0 <TIM_OC2_SetConfig+0x94>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a16      	ldr	r2, [pc, #88]	; (800a804 <TIM_OC2_SetConfig+0xe8>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d113      	bne.n	800a7d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	695b      	ldr	r3, [r3, #20]
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	693a      	ldr	r2, [r7, #16]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	693a      	ldr	r2, [r7, #16]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	685a      	ldr	r2, [r3, #4]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	621a      	str	r2, [r3, #32]
}
 800a7f2:	bf00      	nop
 800a7f4:	371c      	adds	r7, #28
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	40010000 	.word	0x40010000
 800a804:	40010400 	.word	0x40010400

0800a808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a808:	b480      	push	{r7}
 800a80a:	b087      	sub	sp, #28
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a1b      	ldr	r3, [r3, #32]
 800a822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f023 0303 	bic.w	r3, r3, #3
 800a83e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	021b      	lsls	r3, r3, #8
 800a858:	697a      	ldr	r2, [r7, #20]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	4a21      	ldr	r2, [pc, #132]	; (800a8e8 <TIM_OC3_SetConfig+0xe0>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d003      	beq.n	800a86e <TIM_OC3_SetConfig+0x66>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a20      	ldr	r2, [pc, #128]	; (800a8ec <TIM_OC3_SetConfig+0xe4>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d10d      	bne.n	800a88a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	021b      	lsls	r3, r3, #8
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	4313      	orrs	r3, r2
 800a880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a16      	ldr	r2, [pc, #88]	; (800a8e8 <TIM_OC3_SetConfig+0xe0>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d003      	beq.n	800a89a <TIM_OC3_SetConfig+0x92>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a15      	ldr	r2, [pc, #84]	; (800a8ec <TIM_OC3_SetConfig+0xe4>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d113      	bne.n	800a8c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	011b      	lsls	r3, r3, #4
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	011b      	lsls	r3, r3, #4
 800a8bc:	693a      	ldr	r2, [r7, #16]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	685a      	ldr	r2, [r3, #4]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	621a      	str	r2, [r3, #32]
}
 800a8dc:	bf00      	nop
 800a8de:	371c      	adds	r7, #28
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	40010000 	.word	0x40010000
 800a8ec:	40010400 	.word	0x40010400

0800a8f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a91e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	021b      	lsls	r3, r3, #8
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	4313      	orrs	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a93a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	689b      	ldr	r3, [r3, #8]
 800a940:	031b      	lsls	r3, r3, #12
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	4313      	orrs	r3, r2
 800a946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a12      	ldr	r2, [pc, #72]	; (800a994 <TIM_OC4_SetConfig+0xa4>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d003      	beq.n	800a958 <TIM_OC4_SetConfig+0x68>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a11      	ldr	r2, [pc, #68]	; (800a998 <TIM_OC4_SetConfig+0xa8>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d109      	bne.n	800a96c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a95e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	019b      	lsls	r3, r3, #6
 800a966:	697a      	ldr	r2, [r7, #20]
 800a968:	4313      	orrs	r3, r2
 800a96a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	685a      	ldr	r2, [r3, #4]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	621a      	str	r2, [r3, #32]
}
 800a986:	bf00      	nop
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	40010000 	.word	0x40010000
 800a998:	40010400 	.word	0x40010400

0800a99c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	60f8      	str	r0, [r7, #12]
 800a9a4:	60b9      	str	r1, [r7, #8]
 800a9a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	6a1b      	ldr	r3, [r3, #32]
 800a9b2:	f023 0201 	bic.w	r2, r3, #1
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	011b      	lsls	r3, r3, #4
 800a9cc:	693a      	ldr	r2, [r7, #16]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f023 030a 	bic.w	r3, r3, #10
 800a9d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	693a      	ldr	r2, [r7, #16]
 800a9e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	621a      	str	r2, [r3, #32]
}
 800a9ee:	bf00      	nop
 800a9f0:	371c      	adds	r7, #28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f8:	4770      	bx	lr

0800a9fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9fa:	b480      	push	{r7}
 800a9fc:	b087      	sub	sp, #28
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	60f8      	str	r0, [r7, #12]
 800aa02:	60b9      	str	r1, [r7, #8]
 800aa04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6a1b      	ldr	r3, [r3, #32]
 800aa0a:	f023 0210 	bic.w	r2, r3, #16
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6a1b      	ldr	r3, [r3, #32]
 800aa1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	031b      	lsls	r3, r3, #12
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	011b      	lsls	r3, r3, #4
 800aa3c:	693a      	ldr	r2, [r7, #16]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	697a      	ldr	r2, [r7, #20]
 800aa46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	621a      	str	r2, [r3, #32]
}
 800aa4e:	bf00      	nop
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa72:	683a      	ldr	r2, [r7, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	f043 0307 	orr.w	r3, r3, #7
 800aa7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68fa      	ldr	r2, [r7, #12]
 800aa82:	609a      	str	r2, [r3, #8]
}
 800aa84:	bf00      	nop
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b087      	sub	sp, #28
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	021a      	lsls	r2, r3, #8
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	431a      	orrs	r2, r3
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	4313      	orrs	r3, r2
 800aab8:	697a      	ldr	r2, [r7, #20]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	609a      	str	r2, [r3, #8]
}
 800aac4:	bf00      	nop
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b087      	sub	sp, #28
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	60f8      	str	r0, [r7, #12]
 800aad8:	60b9      	str	r1, [r7, #8]
 800aada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	f003 031f 	and.w	r3, r3, #31
 800aae2:	2201      	movs	r2, #1
 800aae4:	fa02 f303 	lsl.w	r3, r2, r3
 800aae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6a1a      	ldr	r2, [r3, #32]
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	43db      	mvns	r3, r3
 800aaf2:	401a      	ands	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6a1a      	ldr	r2, [r3, #32]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f003 031f 	and.w	r3, r3, #31
 800ab02:	6879      	ldr	r1, [r7, #4]
 800ab04:	fa01 f303 	lsl.w	r3, r1, r3
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	621a      	str	r2, [r3, #32]
}
 800ab0e:	bf00      	nop
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
	...

0800ab1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d101      	bne.n	800ab34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab30:	2302      	movs	r3, #2
 800ab32:	e05a      	b.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a21      	ldr	r2, [pc, #132]	; (800abf8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d022      	beq.n	800abbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab80:	d01d      	beq.n	800abbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	4a1d      	ldr	r2, [pc, #116]	; (800abfc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d018      	beq.n	800abbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a1b      	ldr	r2, [pc, #108]	; (800ac00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d013      	beq.n	800abbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a1a      	ldr	r2, [pc, #104]	; (800ac04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d00e      	beq.n	800abbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a18      	ldr	r2, [pc, #96]	; (800ac08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d009      	beq.n	800abbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a17      	ldr	r2, [pc, #92]	; (800ac0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d004      	beq.n	800abbe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a15      	ldr	r2, [pc, #84]	; (800ac10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d10c      	bne.n	800abd8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4313      	orrs	r3, r2
 800abce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	40010000 	.word	0x40010000
 800abfc:	40000400 	.word	0x40000400
 800ac00:	40000800 	.word	0x40000800
 800ac04:	40000c00 	.word	0x40000c00
 800ac08:	40010400 	.word	0x40010400
 800ac0c:	40014000 	.word	0x40014000
 800ac10:	40001800 	.word	0x40001800

0800ac14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac1c:	bf00      	nop
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac30:	bf00      	nop
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e03f      	b.n	800acce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d106      	bne.n	800ac68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7fa f8d6 	bl	8004e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2224      	movs	r2, #36	; 0x24
 800ac6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68da      	ldr	r2, [r3, #12]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f000 fd0f 	bl	800b6a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	691a      	ldr	r2, [r3, #16]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	695a      	ldr	r2, [r3, #20]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2200      	movs	r2, #0
 800acba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2220      	movs	r2, #32
 800acc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2220      	movs	r2, #32
 800acc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}

0800acd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b088      	sub	sp, #32
 800acda:	af02      	add	r7, sp, #8
 800acdc:	60f8      	str	r0, [r7, #12]
 800acde:	60b9      	str	r1, [r7, #8]
 800ace0:	603b      	str	r3, [r7, #0]
 800ace2:	4613      	mov	r3, r2
 800ace4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800ace6:	2300      	movs	r3, #0
 800ace8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b20      	cmp	r3, #32
 800acf4:	f040 8083 	bne.w	800adfe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d002      	beq.n	800ad04 <HAL_UART_Transmit+0x2e>
 800acfe:	88fb      	ldrh	r3, [r7, #6]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d101      	bne.n	800ad08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800ad04:	2301      	movs	r3, #1
 800ad06:	e07b      	b.n	800ae00 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d101      	bne.n	800ad16 <HAL_UART_Transmit+0x40>
 800ad12:	2302      	movs	r3, #2
 800ad14:	e074      	b.n	800ae00 <HAL_UART_Transmit+0x12a>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2221      	movs	r2, #33	; 0x21
 800ad28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ad2c:	f7fa ff7e 	bl	8005c2c <HAL_GetTick>
 800ad30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	88fa      	ldrh	r2, [r7, #6]
 800ad36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	88fa      	ldrh	r2, [r7, #6]
 800ad3c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800ad46:	e042      	b.n	800adce <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad5e:	d122      	bne.n	800ada6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2200      	movs	r2, #0
 800ad68:	2180      	movs	r1, #128	; 0x80
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 fb19 	bl	800b3a2 <UART_WaitOnFlagUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800ad76:	2303      	movs	r3, #3
 800ad78:	e042      	b.n	800ae00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	881b      	ldrh	r3, [r3, #0]
 800ad82:	461a      	mov	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad8c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	3302      	adds	r3, #2
 800ad9a:	60bb      	str	r3, [r7, #8]
 800ad9c:	e017      	b.n	800adce <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	3301      	adds	r3, #1
 800ada2:	60bb      	str	r3, [r7, #8]
 800ada4:	e013      	b.n	800adce <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2200      	movs	r2, #0
 800adae:	2180      	movs	r1, #128	; 0x80
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 faf6 	bl	800b3a2 <UART_WaitOnFlagUntilTimeout>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800adbc:	2303      	movs	r3, #3
 800adbe:	e01f      	b.n	800ae00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	60ba      	str	r2, [r7, #8]
 800adc6:	781a      	ldrb	r2, [r3, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800add2:	b29b      	uxth	r3, r3
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1b7      	bne.n	800ad48 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	2200      	movs	r2, #0
 800ade0:	2140      	movs	r1, #64	; 0x40
 800ade2:	68f8      	ldr	r0, [r7, #12]
 800ade4:	f000 fadd 	bl	800b3a2 <UART_WaitOnFlagUntilTimeout>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	e006      	b.n	800ae00 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2220      	movs	r2, #32
 800adf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	e000      	b.n	800ae00 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800adfe:	2302      	movs	r3, #2
  }
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	3718      	adds	r7, #24
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b086      	sub	sp, #24
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	4613      	mov	r3, r2
 800ae14:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	2b20      	cmp	r3, #32
 800ae20:	d153      	bne.n	800aeca <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <HAL_UART_Transmit_DMA+0x26>
 800ae28:	88fb      	ldrh	r3, [r7, #6]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e04c      	b.n	800aecc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d101      	bne.n	800ae40 <HAL_UART_Transmit_DMA+0x38>
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	e045      	b.n	800aecc <HAL_UART_Transmit_DMA+0xc4>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	88fa      	ldrh	r2, [r7, #6]
 800ae52:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	88fa      	ldrh	r2, [r7, #6]
 800ae58:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2221      	movs	r2, #33	; 0x21
 800ae64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae6c:	4a19      	ldr	r2, [pc, #100]	; (800aed4 <HAL_UART_Transmit_DMA+0xcc>)
 800ae6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae74:	4a18      	ldr	r2, [pc, #96]	; (800aed8 <HAL_UART_Transmit_DMA+0xd0>)
 800ae76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae7c:	4a17      	ldr	r2, [pc, #92]	; (800aedc <HAL_UART_Transmit_DMA+0xd4>)
 800ae7e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae84:	2200      	movs	r2, #0
 800ae86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ae88:	f107 0308 	add.w	r3, r7, #8
 800ae8c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	6819      	ldr	r1, [r3, #0]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3304      	adds	r3, #4
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	88fb      	ldrh	r3, [r7, #6]
 800aea0:	f7fb fcb0 	bl	8006804 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aeac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	695a      	ldr	r2, [r3, #20]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aec4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800aec6:	2300      	movs	r3, #0
 800aec8:	e000      	b.n	800aecc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800aeca:	2302      	movs	r3, #2
  }
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	0800b21d 	.word	0x0800b21d
 800aed8:	0800b26f 	.word	0x0800b26f
 800aedc:	0800b30f 	.word	0x0800b30f

0800aee0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	4613      	mov	r3, r2
 800aeec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800aef4:	b2db      	uxtb	r3, r3
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	d166      	bne.n	800afc8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d002      	beq.n	800af06 <HAL_UART_Receive_DMA+0x26>
 800af00:	88fb      	ldrh	r3, [r7, #6]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	e05f      	b.n	800afca <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800af10:	2b01      	cmp	r3, #1
 800af12:	d101      	bne.n	800af18 <HAL_UART_Receive_DMA+0x38>
 800af14:	2302      	movs	r3, #2
 800af16:	e058      	b.n	800afca <HAL_UART_Receive_DMA+0xea>
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	88fa      	ldrh	r2, [r7, #6]
 800af2a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2222      	movs	r2, #34	; 0x22
 800af36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af3e:	4a25      	ldr	r2, [pc, #148]	; (800afd4 <HAL_UART_Receive_DMA+0xf4>)
 800af40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af46:	4a24      	ldr	r2, [pc, #144]	; (800afd8 <HAL_UART_Receive_DMA+0xf8>)
 800af48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4e:	4a23      	ldr	r2, [pc, #140]	; (800afdc <HAL_UART_Receive_DMA+0xfc>)
 800af50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af56:	2200      	movs	r2, #0
 800af58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800af5a:	f107 0308 	add.w	r3, r7, #8
 800af5e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3304      	adds	r3, #4
 800af6a:	4619      	mov	r1, r3
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	f7fb fc47 	bl	8006804 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800af76:	2300      	movs	r3, #0
 800af78:	613b      	str	r3, [r7, #16]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	613b      	str	r3, [r7, #16]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	68da      	ldr	r2, [r3, #12]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afa2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	695a      	ldr	r2, [r3, #20]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f042 0201 	orr.w	r2, r2, #1
 800afb2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	695a      	ldr	r2, [r3, #20]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afc2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	e000      	b.n	800afca <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800afc8:	2302      	movs	r3, #2
  }
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3718      	adds	r7, #24
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	0800b28b 	.word	0x0800b28b
 800afd8:	0800b2f3 	.word	0x0800b2f3
 800afdc:	0800b30f 	.word	0x0800b30f

0800afe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800b000:	2300      	movs	r3, #0
 800b002:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800b004:	2300      	movs	r3, #0
 800b006:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	f003 030f 	and.w	r3, r3, #15
 800b00e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10d      	bne.n	800b032 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	f003 0320 	and.w	r3, r3, #32
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d008      	beq.n	800b032 <HAL_UART_IRQHandler+0x52>
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	f003 0320 	and.w	r3, r3, #32
 800b026:	2b00      	cmp	r3, #0
 800b028:	d003      	beq.n	800b032 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 fab9 	bl	800b5a2 <UART_Receive_IT>
      return;
 800b030:	e0d0      	b.n	800b1d4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	f000 80b0 	beq.w	800b19a <HAL_UART_IRQHandler+0x1ba>
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f003 0301 	and.w	r3, r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	d105      	bne.n	800b050 <HAL_UART_IRQHandler+0x70>
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 80a5 	beq.w	800b19a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	f003 0301 	and.w	r3, r3, #1
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00a      	beq.n	800b070 <HAL_UART_IRQHandler+0x90>
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b060:	2b00      	cmp	r3, #0
 800b062:	d005      	beq.n	800b070 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b068:	f043 0201 	orr.w	r2, r3, #1
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	f003 0304 	and.w	r3, r3, #4
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00a      	beq.n	800b090 <HAL_UART_IRQHandler+0xb0>
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	f003 0301 	and.w	r3, r3, #1
 800b080:	2b00      	cmp	r3, #0
 800b082:	d005      	beq.n	800b090 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b088:	f043 0202 	orr.w	r2, r3, #2
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00a      	beq.n	800b0b0 <HAL_UART_IRQHandler+0xd0>
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d005      	beq.n	800b0b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0a8:	f043 0204 	orr.w	r2, r3, #4
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800b0b0:	69fb      	ldr	r3, [r7, #28]
 800b0b2:	f003 0308 	and.w	r3, r3, #8
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00f      	beq.n	800b0da <HAL_UART_IRQHandler+0xfa>
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	f003 0320 	and.w	r3, r3, #32
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d104      	bne.n	800b0ce <HAL_UART_IRQHandler+0xee>
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f003 0301 	and.w	r3, r3, #1
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d005      	beq.n	800b0da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d2:	f043 0208 	orr.w	r2, r3, #8
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d077      	beq.n	800b1d2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	f003 0320 	and.w	r3, r3, #32
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d007      	beq.n	800b0fc <HAL_UART_IRQHandler+0x11c>
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	f003 0320 	and.w	r3, r3, #32
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d002      	beq.n	800b0fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fa53 	bl	800b5a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	695b      	ldr	r3, [r3, #20]
 800b102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b106:	2b40      	cmp	r3, #64	; 0x40
 800b108:	bf0c      	ite	eq
 800b10a:	2301      	moveq	r3, #1
 800b10c:	2300      	movne	r3, #0
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b116:	f003 0308 	and.w	r3, r3, #8
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d102      	bne.n	800b124 <HAL_UART_IRQHandler+0x144>
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d031      	beq.n	800b188 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f99c 	bl	800b462 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	695b      	ldr	r3, [r3, #20]
 800b130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b134:	2b40      	cmp	r3, #64	; 0x40
 800b136:	d123      	bne.n	800b180 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	695a      	ldr	r2, [r3, #20]
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b146:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d013      	beq.n	800b178 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b154:	4a21      	ldr	r2, [pc, #132]	; (800b1dc <HAL_UART_IRQHandler+0x1fc>)
 800b156:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fb fba9 	bl	80068b4 <HAL_DMA_Abort_IT>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d016      	beq.n	800b196 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b172:	4610      	mov	r0, r2
 800b174:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b176:	e00e      	b.n	800b196 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f845 	bl	800b208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b17e:	e00a      	b.n	800b196 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 f841 	bl	800b208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b186:	e006      	b.n	800b196 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 f83d 	bl	800b208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800b194:	e01d      	b.n	800b1d2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b196:	bf00      	nop
    return;
 800b198:	e01b      	b.n	800b1d2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d008      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x1d6>
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d003      	beq.n	800b1b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f989 	bl	800b4c6 <UART_Transmit_IT>
    return;
 800b1b4:	e00e      	b.n	800b1d4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d009      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x1f4>
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d004      	beq.n	800b1d4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f9d1 	bl	800b572 <UART_EndTransmit_IT>
    return;
 800b1d0:	e000      	b.n	800b1d4 <HAL_UART_IRQHandler+0x1f4>
    return;
 800b1d2:	bf00      	nop
  }
}
 800b1d4:	3720      	adds	r7, #32
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	0800b49f 	.word	0x0800b49f

0800b1e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b234:	2b00      	cmp	r3, #0
 800b236:	d113      	bne.n	800b260 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2200      	movs	r2, #0
 800b23c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	695a      	ldr	r2, [r3, #20]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b24c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68da      	ldr	r2, [r3, #12]
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b25c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b25e:	e002      	b.n	800b266 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b260:	68f8      	ldr	r0, [r7, #12]
 800b262:	f7f8 fabb 	bl	80037dc <HAL_UART_TxCpltCallback>
}
 800b266:	bf00      	nop
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7ff ffaf 	bl	800b1e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b282:	bf00      	nop
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b084      	sub	sp, #16
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b296:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d11e      	bne.n	800b2e4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68da      	ldr	r2, [r3, #12]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b2ba:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	695a      	ldr	r2, [r3, #20]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f022 0201 	bic.w	r2, r2, #1
 800b2ca:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	695a      	ldr	r2, [r3, #20]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2da:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800b2e4:	68f8      	ldr	r0, [r7, #12]
 800b2e6:	f7f8 fa3f 	bl	8003768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2ea:	bf00      	nop
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f7ff ff77 	bl	800b1f4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b306:	bf00      	nop
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b084      	sub	sp, #16
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	695b      	ldr	r3, [r3, #20]
 800b326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b32a:	2b80      	cmp	r3, #128	; 0x80
 800b32c:	bf0c      	ite	eq
 800b32e:	2301      	moveq	r3, #1
 800b330:	2300      	movne	r3, #0
 800b332:	b2db      	uxtb	r3, r3
 800b334:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b21      	cmp	r3, #33	; 0x21
 800b340:	d108      	bne.n	800b354 <UART_DMAError+0x46>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d005      	beq.n	800b354 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	2200      	movs	r2, #0
 800b34c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b34e:	68b8      	ldr	r0, [r7, #8]
 800b350:	f000 f871 	bl	800b436 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	695b      	ldr	r3, [r3, #20]
 800b35a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b35e:	2b40      	cmp	r3, #64	; 0x40
 800b360:	bf0c      	ite	eq
 800b362:	2301      	moveq	r3, #1
 800b364:	2300      	movne	r3, #0
 800b366:	b2db      	uxtb	r3, r3
 800b368:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b22      	cmp	r3, #34	; 0x22
 800b374:	d108      	bne.n	800b388 <UART_DMAError+0x7a>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d005      	beq.n	800b388 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2200      	movs	r2, #0
 800b380:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b382:	68b8      	ldr	r0, [r7, #8]
 800b384:	f000 f86d 	bl	800b462 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38c:	f043 0210 	orr.w	r2, r3, #16
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b394:	68b8      	ldr	r0, [r7, #8]
 800b396:	f7ff ff37 	bl	800b208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b39a:	bf00      	nop
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b084      	sub	sp, #16
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	60b9      	str	r1, [r7, #8]
 800b3ac:	603b      	str	r3, [r7, #0]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3b2:	e02c      	b.n	800b40e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ba:	d028      	beq.n	800b40e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b3bc:	69bb      	ldr	r3, [r7, #24]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d007      	beq.n	800b3d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800b3c2:	f7fa fc33 	bl	8005c2c <HAL_GetTick>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	69ba      	ldr	r2, [r7, #24]
 800b3ce:	429a      	cmp	r2, r3
 800b3d0:	d21d      	bcs.n	800b40e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68da      	ldr	r2, [r3, #12]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b3e0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	695a      	ldr	r2, [r3, #20]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f022 0201 	bic.w	r2, r2, #1
 800b3f0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2220      	movs	r2, #32
 800b3f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e00f      	b.n	800b42e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	4013      	ands	r3, r2
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	bf0c      	ite	eq
 800b41e:	2301      	moveq	r3, #1
 800b420:	2300      	movne	r3, #0
 800b422:	b2db      	uxtb	r3, r3
 800b424:	461a      	mov	r2, r3
 800b426:	79fb      	ldrb	r3, [r7, #7]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d0c3      	beq.n	800b3b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b42c:	2300      	movs	r3, #0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3710      	adds	r7, #16
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}

0800b436 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b436:	b480      	push	{r7}
 800b438:	b083      	sub	sp, #12
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68da      	ldr	r2, [r3, #12]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b44c:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b456:	bf00      	nop
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b462:	b480      	push	{r7}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	68da      	ldr	r2, [r3, #12]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b478:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	695a      	ldr	r2, [r3, #20]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f022 0201 	bic.w	r2, r2, #1
 800b488:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2220      	movs	r2, #32
 800b48e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b492:	bf00      	nop
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b084      	sub	sp, #16
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f7ff fea5 	bl	800b208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4be:	bf00      	nop
 800b4c0:	3710      	adds	r7, #16
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}

0800b4c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b4c6:	b480      	push	{r7}
 800b4c8:	b085      	sub	sp, #20
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	2b21      	cmp	r3, #33	; 0x21
 800b4d8:	d144      	bne.n	800b564 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4e2:	d11a      	bne.n	800b51a <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	881b      	ldrh	r3, [r3, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4f8:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d105      	bne.n	800b50e <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	1c9a      	adds	r2, r3, #2
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	621a      	str	r2, [r3, #32]
 800b50c:	e00e      	b.n	800b52c <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a1b      	ldr	r3, [r3, #32]
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	621a      	str	r2, [r3, #32]
 800b518:	e008      	b.n	800b52c <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	1c59      	adds	r1, r3, #1
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	6211      	str	r1, [r2, #32]
 800b524:	781a      	ldrb	r2, [r3, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b530:	b29b      	uxth	r3, r3
 800b532:	3b01      	subs	r3, #1
 800b534:	b29b      	uxth	r3, r3
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	4619      	mov	r1, r3
 800b53a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d10f      	bne.n	800b560 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b54e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	68da      	ldr	r2, [r3, #12]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b55e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b560:	2300      	movs	r3, #0
 800b562:	e000      	b.n	800b566 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b564:	2302      	movs	r3, #2
  }
}
 800b566:	4618      	mov	r0, r3
 800b568:	3714      	adds	r7, #20
 800b56a:	46bd      	mov	sp, r7
 800b56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b570:	4770      	bx	lr

0800b572 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b572:	b580      	push	{r7, lr}
 800b574:	b082      	sub	sp, #8
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	68da      	ldr	r2, [r3, #12]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b588:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2220      	movs	r2, #32
 800b58e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f7f8 f922 	bl	80037dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b22      	cmp	r3, #34	; 0x22
 800b5b4:	d171      	bne.n	800b69a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5be:	d123      	bne.n	800b608 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10e      	bne.n	800b5ec <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5e4:	1c9a      	adds	r2, r3, #2
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	629a      	str	r2, [r3, #40]	; 0x28
 800b5ea:	e029      	b.n	800b640 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	629a      	str	r2, [r3, #40]	; 0x28
 800b606:	e01b      	b.n	800b640 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d10a      	bne.n	800b626 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6858      	ldr	r0, [r3, #4]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61a:	1c59      	adds	r1, r3, #1
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	6291      	str	r1, [r2, #40]	; 0x28
 800b620:	b2c2      	uxtb	r2, r0
 800b622:	701a      	strb	r2, [r3, #0]
 800b624:	e00c      	b.n	800b640 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b632:	1c58      	adds	r0, r3, #1
 800b634:	6879      	ldr	r1, [r7, #4]
 800b636:	6288      	str	r0, [r1, #40]	; 0x28
 800b638:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b63c:	b2d2      	uxtb	r2, r2
 800b63e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b644:	b29b      	uxth	r3, r3
 800b646:	3b01      	subs	r3, #1
 800b648:	b29b      	uxth	r3, r3
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	4619      	mov	r1, r3
 800b64e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b650:	2b00      	cmp	r3, #0
 800b652:	d120      	bne.n	800b696 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	68da      	ldr	r2, [r3, #12]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f022 0220 	bic.w	r2, r2, #32
 800b662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68da      	ldr	r2, [r3, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b672:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	695a      	ldr	r2, [r3, #20]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f022 0201 	bic.w	r2, r2, #1
 800b682:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2220      	movs	r2, #32
 800b688:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7f8 f86b 	bl	8003768 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	e002      	b.n	800b69c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	e000      	b.n	800b69c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800b69a:	2302      	movs	r3, #2
  }
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	b0bd      	sub	sp, #244	; 0xf4
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c0:	68d9      	ldr	r1, [r3, #12]
 800b6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	ea40 0301 	orr.w	r3, r0, r1
 800b6cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b6ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d2:	689a      	ldr	r2, [r3, #8]
 800b6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	431a      	orrs	r2, r3
 800b6dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e0:	695b      	ldr	r3, [r3, #20]
 800b6e2:	431a      	orrs	r2, r3
 800b6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 800b6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b6fc:	f021 010c 	bic.w	r1, r1, #12
 800b700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b70a:	430b      	orrs	r3, r1
 800b70c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b71e:	6999      	ldr	r1, [r3, #24]
 800b720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	ea40 0301 	orr.w	r3, r0, r1
 800b72a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b730:	69db      	ldr	r3, [r3, #28]
 800b732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b736:	f040 81a5 	bne.w	800ba84 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b73a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	4bcd      	ldr	r3, [pc, #820]	; (800ba78 <UART_SetConfig+0x3d4>)
 800b742:	429a      	cmp	r2, r3
 800b744:	d006      	beq.n	800b754 <UART_SetConfig+0xb0>
 800b746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	4bcb      	ldr	r3, [pc, #812]	; (800ba7c <UART_SetConfig+0x3d8>)
 800b74e:	429a      	cmp	r2, r3
 800b750:	f040 80cb 	bne.w	800b8ea <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b754:	f7fd f9da 	bl	8008b0c <HAL_RCC_GetPCLK2Freq>
 800b758:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b75c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b760:	461c      	mov	r4, r3
 800b762:	f04f 0500 	mov.w	r5, #0
 800b766:	4622      	mov	r2, r4
 800b768:	462b      	mov	r3, r5
 800b76a:	1891      	adds	r1, r2, r2
 800b76c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800b770:	415b      	adcs	r3, r3
 800b772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b776:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800b77a:	1912      	adds	r2, r2, r4
 800b77c:	eb45 0303 	adc.w	r3, r5, r3
 800b780:	f04f 0000 	mov.w	r0, #0
 800b784:	f04f 0100 	mov.w	r1, #0
 800b788:	00d9      	lsls	r1, r3, #3
 800b78a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b78e:	00d0      	lsls	r0, r2, #3
 800b790:	4602      	mov	r2, r0
 800b792:	460b      	mov	r3, r1
 800b794:	1911      	adds	r1, r2, r4
 800b796:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800b79a:	416b      	adcs	r3, r5
 800b79c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	f04f 0300 	mov.w	r3, #0
 800b7ac:	1891      	adds	r1, r2, r2
 800b7ae:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800b7b2:	415b      	adcs	r3, r3
 800b7b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b7b8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800b7bc:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800b7c0:	f7f5 fa82 	bl	8000cc8 <__aeabi_uldivmod>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4bad      	ldr	r3, [pc, #692]	; (800ba80 <UART_SetConfig+0x3dc>)
 800b7ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b7ce:	095b      	lsrs	r3, r3, #5
 800b7d0:	011e      	lsls	r6, r3, #4
 800b7d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7d6:	461c      	mov	r4, r3
 800b7d8:	f04f 0500 	mov.w	r5, #0
 800b7dc:	4622      	mov	r2, r4
 800b7de:	462b      	mov	r3, r5
 800b7e0:	1891      	adds	r1, r2, r2
 800b7e2:	67b9      	str	r1, [r7, #120]	; 0x78
 800b7e4:	415b      	adcs	r3, r3
 800b7e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7e8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800b7ec:	1912      	adds	r2, r2, r4
 800b7ee:	eb45 0303 	adc.w	r3, r5, r3
 800b7f2:	f04f 0000 	mov.w	r0, #0
 800b7f6:	f04f 0100 	mov.w	r1, #0
 800b7fa:	00d9      	lsls	r1, r3, #3
 800b7fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b800:	00d0      	lsls	r0, r2, #3
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	1911      	adds	r1, r2, r4
 800b808:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800b80c:	416b      	adcs	r3, r5
 800b80e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	461a      	mov	r2, r3
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	1891      	adds	r1, r2, r2
 800b820:	6739      	str	r1, [r7, #112]	; 0x70
 800b822:	415b      	adcs	r3, r3
 800b824:	677b      	str	r3, [r7, #116]	; 0x74
 800b826:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800b82a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800b82e:	f7f5 fa4b 	bl	8000cc8 <__aeabi_uldivmod>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4b92      	ldr	r3, [pc, #584]	; (800ba80 <UART_SetConfig+0x3dc>)
 800b838:	fba3 1302 	umull	r1, r3, r3, r2
 800b83c:	095b      	lsrs	r3, r3, #5
 800b83e:	2164      	movs	r1, #100	; 0x64
 800b840:	fb01 f303 	mul.w	r3, r1, r3
 800b844:	1ad3      	subs	r3, r2, r3
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	3332      	adds	r3, #50	; 0x32
 800b84a:	4a8d      	ldr	r2, [pc, #564]	; (800ba80 <UART_SetConfig+0x3dc>)
 800b84c:	fba2 2303 	umull	r2, r3, r2, r3
 800b850:	095b      	lsrs	r3, r3, #5
 800b852:	005b      	lsls	r3, r3, #1
 800b854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b858:	441e      	add	r6, r3
 800b85a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b85e:	4618      	mov	r0, r3
 800b860:	f04f 0100 	mov.w	r1, #0
 800b864:	4602      	mov	r2, r0
 800b866:	460b      	mov	r3, r1
 800b868:	1894      	adds	r4, r2, r2
 800b86a:	66bc      	str	r4, [r7, #104]	; 0x68
 800b86c:	415b      	adcs	r3, r3
 800b86e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b870:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800b874:	1812      	adds	r2, r2, r0
 800b876:	eb41 0303 	adc.w	r3, r1, r3
 800b87a:	f04f 0400 	mov.w	r4, #0
 800b87e:	f04f 0500 	mov.w	r5, #0
 800b882:	00dd      	lsls	r5, r3, #3
 800b884:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b888:	00d4      	lsls	r4, r2, #3
 800b88a:	4622      	mov	r2, r4
 800b88c:	462b      	mov	r3, r5
 800b88e:	1814      	adds	r4, r2, r0
 800b890:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800b894:	414b      	adcs	r3, r1
 800b896:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b89a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	f04f 0300 	mov.w	r3, #0
 800b8a6:	1891      	adds	r1, r2, r2
 800b8a8:	6639      	str	r1, [r7, #96]	; 0x60
 800b8aa:	415b      	adcs	r3, r3
 800b8ac:	667b      	str	r3, [r7, #100]	; 0x64
 800b8ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800b8b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b8b6:	f7f5 fa07 	bl	8000cc8 <__aeabi_uldivmod>
 800b8ba:	4602      	mov	r2, r0
 800b8bc:	460b      	mov	r3, r1
 800b8be:	4b70      	ldr	r3, [pc, #448]	; (800ba80 <UART_SetConfig+0x3dc>)
 800b8c0:	fba3 1302 	umull	r1, r3, r3, r2
 800b8c4:	095b      	lsrs	r3, r3, #5
 800b8c6:	2164      	movs	r1, #100	; 0x64
 800b8c8:	fb01 f303 	mul.w	r3, r1, r3
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	00db      	lsls	r3, r3, #3
 800b8d0:	3332      	adds	r3, #50	; 0x32
 800b8d2:	4a6b      	ldr	r2, [pc, #428]	; (800ba80 <UART_SetConfig+0x3dc>)
 800b8d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b8d8:	095b      	lsrs	r3, r3, #5
 800b8da:	f003 0207 	and.w	r2, r3, #7
 800b8de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4432      	add	r2, r6
 800b8e6:	609a      	str	r2, [r3, #8]
 800b8e8:	e26d      	b.n	800bdc6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b8ea:	f7fd f8fb 	bl	8008ae4 <HAL_RCC_GetPCLK1Freq>
 800b8ee:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b8f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b8f6:	461c      	mov	r4, r3
 800b8f8:	f04f 0500 	mov.w	r5, #0
 800b8fc:	4622      	mov	r2, r4
 800b8fe:	462b      	mov	r3, r5
 800b900:	1891      	adds	r1, r2, r2
 800b902:	65b9      	str	r1, [r7, #88]	; 0x58
 800b904:	415b      	adcs	r3, r3
 800b906:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b908:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b90c:	1912      	adds	r2, r2, r4
 800b90e:	eb45 0303 	adc.w	r3, r5, r3
 800b912:	f04f 0000 	mov.w	r0, #0
 800b916:	f04f 0100 	mov.w	r1, #0
 800b91a:	00d9      	lsls	r1, r3, #3
 800b91c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b920:	00d0      	lsls	r0, r2, #3
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	1911      	adds	r1, r2, r4
 800b928:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800b92c:	416b      	adcs	r3, r5
 800b92e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	461a      	mov	r2, r3
 800b93a:	f04f 0300 	mov.w	r3, #0
 800b93e:	1891      	adds	r1, r2, r2
 800b940:	6539      	str	r1, [r7, #80]	; 0x50
 800b942:	415b      	adcs	r3, r3
 800b944:	657b      	str	r3, [r7, #84]	; 0x54
 800b946:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b94a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800b94e:	f7f5 f9bb 	bl	8000cc8 <__aeabi_uldivmod>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4b4a      	ldr	r3, [pc, #296]	; (800ba80 <UART_SetConfig+0x3dc>)
 800b958:	fba3 2302 	umull	r2, r3, r3, r2
 800b95c:	095b      	lsrs	r3, r3, #5
 800b95e:	011e      	lsls	r6, r3, #4
 800b960:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b964:	461c      	mov	r4, r3
 800b966:	f04f 0500 	mov.w	r5, #0
 800b96a:	4622      	mov	r2, r4
 800b96c:	462b      	mov	r3, r5
 800b96e:	1891      	adds	r1, r2, r2
 800b970:	64b9      	str	r1, [r7, #72]	; 0x48
 800b972:	415b      	adcs	r3, r3
 800b974:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b976:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b97a:	1912      	adds	r2, r2, r4
 800b97c:	eb45 0303 	adc.w	r3, r5, r3
 800b980:	f04f 0000 	mov.w	r0, #0
 800b984:	f04f 0100 	mov.w	r1, #0
 800b988:	00d9      	lsls	r1, r3, #3
 800b98a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b98e:	00d0      	lsls	r0, r2, #3
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	1911      	adds	r1, r2, r4
 800b996:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800b99a:	416b      	adcs	r3, r5
 800b99c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	f04f 0300 	mov.w	r3, #0
 800b9ac:	1891      	adds	r1, r2, r2
 800b9ae:	6439      	str	r1, [r7, #64]	; 0x40
 800b9b0:	415b      	adcs	r3, r3
 800b9b2:	647b      	str	r3, [r7, #68]	; 0x44
 800b9b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9b8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800b9bc:	f7f5 f984 	bl	8000cc8 <__aeabi_uldivmod>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4b2e      	ldr	r3, [pc, #184]	; (800ba80 <UART_SetConfig+0x3dc>)
 800b9c6:	fba3 1302 	umull	r1, r3, r3, r2
 800b9ca:	095b      	lsrs	r3, r3, #5
 800b9cc:	2164      	movs	r1, #100	; 0x64
 800b9ce:	fb01 f303 	mul.w	r3, r1, r3
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	00db      	lsls	r3, r3, #3
 800b9d6:	3332      	adds	r3, #50	; 0x32
 800b9d8:	4a29      	ldr	r2, [pc, #164]	; (800ba80 <UART_SetConfig+0x3dc>)
 800b9da:	fba2 2303 	umull	r2, r3, r2, r3
 800b9de:	095b      	lsrs	r3, r3, #5
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b9e6:	441e      	add	r6, r3
 800b9e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f04f 0100 	mov.w	r1, #0
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	1894      	adds	r4, r2, r2
 800b9f8:	63bc      	str	r4, [r7, #56]	; 0x38
 800b9fa:	415b      	adcs	r3, r3
 800b9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba02:	1812      	adds	r2, r2, r0
 800ba04:	eb41 0303 	adc.w	r3, r1, r3
 800ba08:	f04f 0400 	mov.w	r4, #0
 800ba0c:	f04f 0500 	mov.w	r5, #0
 800ba10:	00dd      	lsls	r5, r3, #3
 800ba12:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800ba16:	00d4      	lsls	r4, r2, #3
 800ba18:	4622      	mov	r2, r4
 800ba1a:	462b      	mov	r3, r5
 800ba1c:	1814      	adds	r4, r2, r0
 800ba1e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 800ba22:	414b      	adcs	r3, r1
 800ba24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	f04f 0300 	mov.w	r3, #0
 800ba34:	1891      	adds	r1, r2, r2
 800ba36:	6339      	str	r1, [r7, #48]	; 0x30
 800ba38:	415b      	adcs	r3, r3
 800ba3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba3c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ba40:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba44:	f7f5 f940 	bl	8000cc8 <__aeabi_uldivmod>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	4b0c      	ldr	r3, [pc, #48]	; (800ba80 <UART_SetConfig+0x3dc>)
 800ba4e:	fba3 1302 	umull	r1, r3, r3, r2
 800ba52:	095b      	lsrs	r3, r3, #5
 800ba54:	2164      	movs	r1, #100	; 0x64
 800ba56:	fb01 f303 	mul.w	r3, r1, r3
 800ba5a:	1ad3      	subs	r3, r2, r3
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	3332      	adds	r3, #50	; 0x32
 800ba60:	4a07      	ldr	r2, [pc, #28]	; (800ba80 <UART_SetConfig+0x3dc>)
 800ba62:	fba2 2303 	umull	r2, r3, r2, r3
 800ba66:	095b      	lsrs	r3, r3, #5
 800ba68:	f003 0207 	and.w	r2, r3, #7
 800ba6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4432      	add	r2, r6
 800ba74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ba76:	e1a6      	b.n	800bdc6 <UART_SetConfig+0x722>
 800ba78:	40011000 	.word	0x40011000
 800ba7c:	40011400 	.word	0x40011400
 800ba80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ba84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	4bd1      	ldr	r3, [pc, #836]	; (800bdd0 <UART_SetConfig+0x72c>)
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d006      	beq.n	800ba9e <UART_SetConfig+0x3fa>
 800ba90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	4bcf      	ldr	r3, [pc, #828]	; (800bdd4 <UART_SetConfig+0x730>)
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	f040 80ca 	bne.w	800bc32 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ba9e:	f7fd f835 	bl	8008b0c <HAL_RCC_GetPCLK2Freq>
 800baa2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800baa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800baaa:	461c      	mov	r4, r3
 800baac:	f04f 0500 	mov.w	r5, #0
 800bab0:	4622      	mov	r2, r4
 800bab2:	462b      	mov	r3, r5
 800bab4:	1891      	adds	r1, r2, r2
 800bab6:	62b9      	str	r1, [r7, #40]	; 0x28
 800bab8:	415b      	adcs	r3, r3
 800baba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800babc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bac0:	1912      	adds	r2, r2, r4
 800bac2:	eb45 0303 	adc.w	r3, r5, r3
 800bac6:	f04f 0000 	mov.w	r0, #0
 800baca:	f04f 0100 	mov.w	r1, #0
 800bace:	00d9      	lsls	r1, r3, #3
 800bad0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bad4:	00d0      	lsls	r0, r2, #3
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	eb12 0a04 	adds.w	sl, r2, r4
 800bade:	eb43 0b05 	adc.w	fp, r3, r5
 800bae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bae6:	685b      	ldr	r3, [r3, #4]
 800bae8:	4618      	mov	r0, r3
 800baea:	f04f 0100 	mov.w	r1, #0
 800baee:	f04f 0200 	mov.w	r2, #0
 800baf2:	f04f 0300 	mov.w	r3, #0
 800baf6:	008b      	lsls	r3, r1, #2
 800baf8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bafc:	0082      	lsls	r2, r0, #2
 800bafe:	4650      	mov	r0, sl
 800bb00:	4659      	mov	r1, fp
 800bb02:	f7f5 f8e1 	bl	8000cc8 <__aeabi_uldivmod>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4bb3      	ldr	r3, [pc, #716]	; (800bdd8 <UART_SetConfig+0x734>)
 800bb0c:	fba3 2302 	umull	r2, r3, r3, r2
 800bb10:	095b      	lsrs	r3, r3, #5
 800bb12:	011e      	lsls	r6, r3, #4
 800bb14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f04f 0100 	mov.w	r1, #0
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	1894      	adds	r4, r2, r2
 800bb24:	623c      	str	r4, [r7, #32]
 800bb26:	415b      	adcs	r3, r3
 800bb28:	627b      	str	r3, [r7, #36]	; 0x24
 800bb2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb2e:	1812      	adds	r2, r2, r0
 800bb30:	eb41 0303 	adc.w	r3, r1, r3
 800bb34:	f04f 0400 	mov.w	r4, #0
 800bb38:	f04f 0500 	mov.w	r5, #0
 800bb3c:	00dd      	lsls	r5, r3, #3
 800bb3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bb42:	00d4      	lsls	r4, r2, #3
 800bb44:	4622      	mov	r2, r4
 800bb46:	462b      	mov	r3, r5
 800bb48:	1814      	adds	r4, r2, r0
 800bb4a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800bb4e:	414b      	adcs	r3, r1
 800bb50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f04f 0100 	mov.w	r1, #0
 800bb60:	f04f 0200 	mov.w	r2, #0
 800bb64:	f04f 0300 	mov.w	r3, #0
 800bb68:	008b      	lsls	r3, r1, #2
 800bb6a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bb6e:	0082      	lsls	r2, r0, #2
 800bb70:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800bb74:	f7f5 f8a8 	bl	8000cc8 <__aeabi_uldivmod>
 800bb78:	4602      	mov	r2, r0
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	4b96      	ldr	r3, [pc, #600]	; (800bdd8 <UART_SetConfig+0x734>)
 800bb7e:	fba3 1302 	umull	r1, r3, r3, r2
 800bb82:	095b      	lsrs	r3, r3, #5
 800bb84:	2164      	movs	r1, #100	; 0x64
 800bb86:	fb01 f303 	mul.w	r3, r1, r3
 800bb8a:	1ad3      	subs	r3, r2, r3
 800bb8c:	011b      	lsls	r3, r3, #4
 800bb8e:	3332      	adds	r3, #50	; 0x32
 800bb90:	4a91      	ldr	r2, [pc, #580]	; (800bdd8 <UART_SetConfig+0x734>)
 800bb92:	fba2 2303 	umull	r2, r3, r2, r3
 800bb96:	095b      	lsrs	r3, r3, #5
 800bb98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb9c:	441e      	add	r6, r3
 800bb9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bba2:	4618      	mov	r0, r3
 800bba4:	f04f 0100 	mov.w	r1, #0
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	1894      	adds	r4, r2, r2
 800bbae:	61bc      	str	r4, [r7, #24]
 800bbb0:	415b      	adcs	r3, r3
 800bbb2:	61fb      	str	r3, [r7, #28]
 800bbb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbb8:	1812      	adds	r2, r2, r0
 800bbba:	eb41 0303 	adc.w	r3, r1, r3
 800bbbe:	f04f 0400 	mov.w	r4, #0
 800bbc2:	f04f 0500 	mov.w	r5, #0
 800bbc6:	00dd      	lsls	r5, r3, #3
 800bbc8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bbcc:	00d4      	lsls	r4, r2, #3
 800bbce:	4622      	mov	r2, r4
 800bbd0:	462b      	mov	r3, r5
 800bbd2:	1814      	adds	r4, r2, r0
 800bbd4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800bbd8:	414b      	adcs	r3, r1
 800bbda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bbde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f04f 0100 	mov.w	r1, #0
 800bbea:	f04f 0200 	mov.w	r2, #0
 800bbee:	f04f 0300 	mov.w	r3, #0
 800bbf2:	008b      	lsls	r3, r1, #2
 800bbf4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bbf8:	0082      	lsls	r2, r0, #2
 800bbfa:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800bbfe:	f7f5 f863 	bl	8000cc8 <__aeabi_uldivmod>
 800bc02:	4602      	mov	r2, r0
 800bc04:	460b      	mov	r3, r1
 800bc06:	4b74      	ldr	r3, [pc, #464]	; (800bdd8 <UART_SetConfig+0x734>)
 800bc08:	fba3 1302 	umull	r1, r3, r3, r2
 800bc0c:	095b      	lsrs	r3, r3, #5
 800bc0e:	2164      	movs	r1, #100	; 0x64
 800bc10:	fb01 f303 	mul.w	r3, r1, r3
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	011b      	lsls	r3, r3, #4
 800bc18:	3332      	adds	r3, #50	; 0x32
 800bc1a:	4a6f      	ldr	r2, [pc, #444]	; (800bdd8 <UART_SetConfig+0x734>)
 800bc1c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc20:	095b      	lsrs	r3, r3, #5
 800bc22:	f003 020f 	and.w	r2, r3, #15
 800bc26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4432      	add	r2, r6
 800bc2e:	609a      	str	r2, [r3, #8]
 800bc30:	e0c9      	b.n	800bdc6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800bc32:	f7fc ff57 	bl	8008ae4 <HAL_RCC_GetPCLK1Freq>
 800bc36:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc3e:	461c      	mov	r4, r3
 800bc40:	f04f 0500 	mov.w	r5, #0
 800bc44:	4622      	mov	r2, r4
 800bc46:	462b      	mov	r3, r5
 800bc48:	1891      	adds	r1, r2, r2
 800bc4a:	6139      	str	r1, [r7, #16]
 800bc4c:	415b      	adcs	r3, r3
 800bc4e:	617b      	str	r3, [r7, #20]
 800bc50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc54:	1912      	adds	r2, r2, r4
 800bc56:	eb45 0303 	adc.w	r3, r5, r3
 800bc5a:	f04f 0000 	mov.w	r0, #0
 800bc5e:	f04f 0100 	mov.w	r1, #0
 800bc62:	00d9      	lsls	r1, r3, #3
 800bc64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bc68:	00d0      	lsls	r0, r2, #3
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	eb12 0804 	adds.w	r8, r2, r4
 800bc72:	eb43 0905 	adc.w	r9, r3, r5
 800bc76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f04f 0100 	mov.w	r1, #0
 800bc82:	f04f 0200 	mov.w	r2, #0
 800bc86:	f04f 0300 	mov.w	r3, #0
 800bc8a:	008b      	lsls	r3, r1, #2
 800bc8c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bc90:	0082      	lsls	r2, r0, #2
 800bc92:	4640      	mov	r0, r8
 800bc94:	4649      	mov	r1, r9
 800bc96:	f7f5 f817 	bl	8000cc8 <__aeabi_uldivmod>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	4b4e      	ldr	r3, [pc, #312]	; (800bdd8 <UART_SetConfig+0x734>)
 800bca0:	fba3 2302 	umull	r2, r3, r3, r2
 800bca4:	095b      	lsrs	r3, r3, #5
 800bca6:	011e      	lsls	r6, r3, #4
 800bca8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bcac:	4618      	mov	r0, r3
 800bcae:	f04f 0100 	mov.w	r1, #0
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	1894      	adds	r4, r2, r2
 800bcb8:	60bc      	str	r4, [r7, #8]
 800bcba:	415b      	adcs	r3, r3
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bcc2:	1812      	adds	r2, r2, r0
 800bcc4:	eb41 0303 	adc.w	r3, r1, r3
 800bcc8:	f04f 0400 	mov.w	r4, #0
 800bccc:	f04f 0500 	mov.w	r5, #0
 800bcd0:	00dd      	lsls	r5, r3, #3
 800bcd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bcd6:	00d4      	lsls	r4, r2, #3
 800bcd8:	4622      	mov	r2, r4
 800bcda:	462b      	mov	r3, r5
 800bcdc:	1814      	adds	r4, r2, r0
 800bcde:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800bce2:	414b      	adcs	r3, r1
 800bce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcec:	685b      	ldr	r3, [r3, #4]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f04f 0100 	mov.w	r1, #0
 800bcf4:	f04f 0200 	mov.w	r2, #0
 800bcf8:	f04f 0300 	mov.w	r3, #0
 800bcfc:	008b      	lsls	r3, r1, #2
 800bcfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bd02:	0082      	lsls	r2, r0, #2
 800bd04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bd08:	f7f4 ffde 	bl	8000cc8 <__aeabi_uldivmod>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4b31      	ldr	r3, [pc, #196]	; (800bdd8 <UART_SetConfig+0x734>)
 800bd12:	fba3 1302 	umull	r1, r3, r3, r2
 800bd16:	095b      	lsrs	r3, r3, #5
 800bd18:	2164      	movs	r1, #100	; 0x64
 800bd1a:	fb01 f303 	mul.w	r3, r1, r3
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	011b      	lsls	r3, r3, #4
 800bd22:	3332      	adds	r3, #50	; 0x32
 800bd24:	4a2c      	ldr	r2, [pc, #176]	; (800bdd8 <UART_SetConfig+0x734>)
 800bd26:	fba2 2303 	umull	r2, r3, r2, r3
 800bd2a:	095b      	lsrs	r3, r3, #5
 800bd2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd30:	441e      	add	r6, r3
 800bd32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd36:	4618      	mov	r0, r3
 800bd38:	f04f 0100 	mov.w	r1, #0
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	1894      	adds	r4, r2, r2
 800bd42:	603c      	str	r4, [r7, #0]
 800bd44:	415b      	adcs	r3, r3
 800bd46:	607b      	str	r3, [r7, #4]
 800bd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd4c:	1812      	adds	r2, r2, r0
 800bd4e:	eb41 0303 	adc.w	r3, r1, r3
 800bd52:	f04f 0400 	mov.w	r4, #0
 800bd56:	f04f 0500 	mov.w	r5, #0
 800bd5a:	00dd      	lsls	r5, r3, #3
 800bd5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800bd60:	00d4      	lsls	r4, r2, #3
 800bd62:	4622      	mov	r2, r4
 800bd64:	462b      	mov	r3, r5
 800bd66:	1814      	adds	r4, r2, r0
 800bd68:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800bd6c:	414b      	adcs	r3, r1
 800bd6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f04f 0100 	mov.w	r1, #0
 800bd7e:	f04f 0200 	mov.w	r2, #0
 800bd82:	f04f 0300 	mov.w	r3, #0
 800bd86:	008b      	lsls	r3, r1, #2
 800bd88:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800bd8c:	0082      	lsls	r2, r0, #2
 800bd8e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800bd92:	f7f4 ff99 	bl	8000cc8 <__aeabi_uldivmod>
 800bd96:	4602      	mov	r2, r0
 800bd98:	460b      	mov	r3, r1
 800bd9a:	4b0f      	ldr	r3, [pc, #60]	; (800bdd8 <UART_SetConfig+0x734>)
 800bd9c:	fba3 1302 	umull	r1, r3, r3, r2
 800bda0:	095b      	lsrs	r3, r3, #5
 800bda2:	2164      	movs	r1, #100	; 0x64
 800bda4:	fb01 f303 	mul.w	r3, r1, r3
 800bda8:	1ad3      	subs	r3, r2, r3
 800bdaa:	011b      	lsls	r3, r3, #4
 800bdac:	3332      	adds	r3, #50	; 0x32
 800bdae:	4a0a      	ldr	r2, [pc, #40]	; (800bdd8 <UART_SetConfig+0x734>)
 800bdb0:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb4:	095b      	lsrs	r3, r3, #5
 800bdb6:	f003 020f 	and.w	r2, r3, #15
 800bdba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4432      	add	r2, r6
 800bdc2:	609a      	str	r2, [r3, #8]
}
 800bdc4:	e7ff      	b.n	800bdc6 <UART_SetConfig+0x722>
 800bdc6:	bf00      	nop
 800bdc8:	37f4      	adds	r7, #244	; 0xf4
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd0:	40011000 	.word	0x40011000
 800bdd4:	40011400 	.word	0x40011400
 800bdd8:	51eb851f 	.word	0x51eb851f

0800bddc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800bde0:	4904      	ldr	r1, [pc, #16]	; (800bdf4 <MX_FATFS_Init+0x18>)
 800bde2:	4805      	ldr	r0, [pc, #20]	; (800bdf8 <MX_FATFS_Init+0x1c>)
 800bde4:	f003 fa92 	bl	800f30c <FATFS_LinkDriver>
 800bde8:	4603      	mov	r3, r0
 800bdea:	461a      	mov	r2, r3
 800bdec:	4b03      	ldr	r3, [pc, #12]	; (800bdfc <MX_FATFS_Init+0x20>)
 800bdee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bdf0:	bf00      	nop
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	200015f0 	.word	0x200015f0
 800bdf8:	20000010 	.word	0x20000010
 800bdfc:	200015f4 	.word	0x200015f4

0800be00 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800be00:	b480      	push	{r7}
 800be02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800be04:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800be06:	4618      	mov	r0, r3
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	4603      	mov	r3, r0
 800be18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800be1a:	79fb      	ldrb	r3, [r7, #7]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 f9dd 	bl	800c1dc <USER_SPI_initialize>
 800be22:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	4603      	mov	r3, r0
 800be34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800be36:	79fb      	ldrb	r3, [r7, #7]
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 fab9 	bl	800c3b0 <USER_SPI_status>
 800be3e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800be40:	4618      	mov	r0, r3
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60b9      	str	r1, [r7, #8]
 800be50:	607a      	str	r2, [r7, #4]
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800be58:	7bf8      	ldrb	r0, [r7, #15]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	f000 fabc 	bl	800c3dc <USER_SPI_read>
 800be64:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
 800be78:	603b      	str	r3, [r7, #0]
 800be7a:	4603      	mov	r3, r0
 800be7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800be7e:	7bf8      	ldrb	r0, [r7, #15]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	68b9      	ldr	r1, [r7, #8]
 800be86:	f000 fb0f 	bl	800c4a8 <USER_SPI_write>
 800be8a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	603a      	str	r2, [r7, #0]
 800be9e:	71fb      	strb	r3, [r7, #7]
 800bea0:	460b      	mov	r3, r1
 800bea2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800bea4:	79b9      	ldrb	r1, [r7, #6]
 800bea6:	79fb      	ldrb	r3, [r7, #7]
 800bea8:	683a      	ldr	r2, [r7, #0]
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 fb78 	bl	800c5a0 <USER_SPI_ioctl>
 800beb0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800bec4:	f7f9 feb2 	bl	8005c2c <HAL_GetTick>
 800bec8:	4603      	mov	r3, r0
 800beca:	4a04      	ldr	r2, [pc, #16]	; (800bedc <SPI_Timer_On+0x20>)
 800becc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800bece:	4a04      	ldr	r2, [pc, #16]	; (800bee0 <SPI_Timer_On+0x24>)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6013      	str	r3, [r2, #0]
}
 800bed4:	bf00      	nop
 800bed6:	3708      	adds	r7, #8
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}
 800bedc:	20001a58 	.word	0x20001a58
 800bee0:	20001a5c 	.word	0x20001a5c

0800bee4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800bee4:	b580      	push	{r7, lr}
 800bee6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800bee8:	f7f9 fea0 	bl	8005c2c <HAL_GetTick>
 800beec:	4602      	mov	r2, r0
 800beee:	4b06      	ldr	r3, [pc, #24]	; (800bf08 <SPI_Timer_Status+0x24>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	1ad2      	subs	r2, r2, r3
 800bef4:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <SPI_Timer_Status+0x28>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	429a      	cmp	r2, r3
 800befa:	bf34      	ite	cc
 800befc:	2301      	movcc	r3, #1
 800befe:	2300      	movcs	r3, #0
 800bf00:	b2db      	uxtb	r3, r3
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	20001a58 	.word	0x20001a58
 800bf0c:	20001a5c 	.word	0x20001a5c

0800bf10 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af02      	add	r7, sp, #8
 800bf16:	4603      	mov	r3, r0
 800bf18:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800bf1a:	f107 020f 	add.w	r2, r7, #15
 800bf1e:	1df9      	adds	r1, r7, #7
 800bf20:	2332      	movs	r3, #50	; 0x32
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	2301      	movs	r3, #1
 800bf26:	4804      	ldr	r0, [pc, #16]	; (800bf38 <xchg_spi+0x28>)
 800bf28:	f7fd fc61 	bl	80097ee <HAL_SPI_TransmitReceive>
    return rxDat;
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	200012cc 	.word	0x200012cc

0800bf3c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800bf3c:	b590      	push	{r4, r7, lr}
 800bf3e:	b085      	sub	sp, #20
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800bf46:	2300      	movs	r3, #0
 800bf48:	60fb      	str	r3, [r7, #12]
 800bf4a:	e00a      	b.n	800bf62 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	18d4      	adds	r4, r2, r3
 800bf52:	20ff      	movs	r0, #255	; 0xff
 800bf54:	f7ff ffdc 	bl	800bf10 <xchg_spi>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	3301      	adds	r3, #1
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d3f0      	bcc.n	800bf4c <rcvr_spi_multi+0x10>
	}
}
 800bf6a:	bf00      	nop
 800bf6c:	bf00      	nop
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd90      	pop	{r4, r7, pc}

0800bf74 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800bf7e:	2300      	movs	r3, #0
 800bf80:	60fb      	str	r3, [r7, #12]
 800bf82:	e009      	b.n	800bf98 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	4413      	add	r3, r2
 800bf8a:	781b      	ldrb	r3, [r3, #0]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7ff ffbf 	bl	800bf10 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3301      	adds	r3, #1
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d3f1      	bcc.n	800bf84 <xmit_spi_multi+0x10>
	}
}
 800bfa0:	bf00      	nop
 800bfa2:	bf00      	nop
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b086      	sub	sp, #24
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800bfb2:	f7f9 fe3b 	bl	8005c2c <HAL_GetTick>
 800bfb6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800bfbc:	20ff      	movs	r0, #255	; 0xff
 800bfbe:	f7ff ffa7 	bl	800bf10 <xchg_spi>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
 800bfc8:	2bff      	cmp	r3, #255	; 0xff
 800bfca:	d007      	beq.n	800bfdc <wait_ready+0x32>
 800bfcc:	f7f9 fe2e 	bl	8005c2c <HAL_GetTick>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d8ef      	bhi.n	800bfbc <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800bfdc:	7bfb      	ldrb	r3, [r7, #15]
 800bfde:	2bff      	cmp	r3, #255	; 0xff
 800bfe0:	bf0c      	ite	eq
 800bfe2:	2301      	moveq	r3, #1
 800bfe4:	2300      	movne	r3, #0
 800bfe6:	b2db      	uxtb	r3, r3
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3718      	adds	r7, #24
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800bff4:	2201      	movs	r2, #1
 800bff6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bffa:	4804      	ldr	r0, [pc, #16]	; (800c00c <despiselect+0x1c>)
 800bffc:	f7fb f8aa 	bl	8007154 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c000:	20ff      	movs	r0, #255	; 0xff
 800c002:	f7ff ff85 	bl	800bf10 <xchg_spi>

}
 800c006:	bf00      	nop
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	40021400 	.word	0x40021400

0800c010 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800c010:	b580      	push	{r7, lr}
 800c012:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800c014:	2200      	movs	r2, #0
 800c016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c01a:	480a      	ldr	r0, [pc, #40]	; (800c044 <spiselect+0x34>)
 800c01c:	f7fb f89a 	bl	8007154 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800c020:	20ff      	movs	r0, #255	; 0xff
 800c022:	f7ff ff75 	bl	800bf10 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800c026:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c02a:	f7ff ffbe 	bl	800bfaa <wait_ready>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d001      	beq.n	800c038 <spiselect+0x28>
 800c034:	2301      	movs	r3, #1
 800c036:	e002      	b.n	800c03e <spiselect+0x2e>

	despiselect();
 800c038:	f7ff ffda 	bl	800bff0 <despiselect>
	return 0;	/* Timeout */
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	40021400 	.word	0x40021400

0800c048 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800c052:	20c8      	movs	r0, #200	; 0xc8
 800c054:	f7ff ff32 	bl	800bebc <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800c058:	20ff      	movs	r0, #255	; 0xff
 800c05a:	f7ff ff59 	bl	800bf10 <xchg_spi>
 800c05e:	4603      	mov	r3, r0
 800c060:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	2bff      	cmp	r3, #255	; 0xff
 800c066:	d104      	bne.n	800c072 <rcvr_datablock+0x2a>
 800c068:	f7ff ff3c 	bl	800bee4 <SPI_Timer_Status>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1f2      	bne.n	800c058 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800c072:	7bfb      	ldrb	r3, [r7, #15]
 800c074:	2bfe      	cmp	r3, #254	; 0xfe
 800c076:	d001      	beq.n	800c07c <rcvr_datablock+0x34>
 800c078:	2300      	movs	r3, #0
 800c07a:	e00a      	b.n	800c092 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800c07c:	6839      	ldr	r1, [r7, #0]
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f7ff ff5c 	bl	800bf3c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800c084:	20ff      	movs	r0, #255	; 0xff
 800c086:	f7ff ff43 	bl	800bf10 <xchg_spi>
 800c08a:	20ff      	movs	r0, #255	; 0xff
 800c08c:	f7ff ff40 	bl	800bf10 <xchg_spi>

	return 1;						/* Function succeeded */
 800c090:	2301      	movs	r3, #1
}
 800c092:	4618      	mov	r0, r3
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b084      	sub	sp, #16
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800c0a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c0aa:	f7ff ff7e 	bl	800bfaa <wait_ready>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <xmit_datablock+0x1e>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	e01e      	b.n	800c0f6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800c0b8:	78fb      	ldrb	r3, [r7, #3]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7ff ff28 	bl	800bf10 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800c0c0:	78fb      	ldrb	r3, [r7, #3]
 800c0c2:	2bfd      	cmp	r3, #253	; 0xfd
 800c0c4:	d016      	beq.n	800c0f4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800c0c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f7ff ff52 	bl	800bf74 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800c0d0:	20ff      	movs	r0, #255	; 0xff
 800c0d2:	f7ff ff1d 	bl	800bf10 <xchg_spi>
 800c0d6:	20ff      	movs	r0, #255	; 0xff
 800c0d8:	f7ff ff1a 	bl	800bf10 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800c0dc:	20ff      	movs	r0, #255	; 0xff
 800c0de:	f7ff ff17 	bl	800bf10 <xchg_spi>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
 800c0e8:	f003 031f 	and.w	r3, r3, #31
 800c0ec:	2b05      	cmp	r3, #5
 800c0ee:	d001      	beq.n	800c0f4 <xmit_datablock+0x5a>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	e000      	b.n	800c0f6 <xmit_datablock+0x5c>
	}
	return 1;
 800c0f4:	2301      	movs	r3, #1
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
 800c104:	4603      	mov	r3, r0
 800c106:	6039      	str	r1, [r7, #0]
 800c108:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800c10a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	da0e      	bge.n	800c130 <send_cmd+0x32>
		cmd &= 0x7F;
 800c112:	79fb      	ldrb	r3, [r7, #7]
 800c114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c118:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800c11a:	2100      	movs	r1, #0
 800c11c:	2037      	movs	r0, #55	; 0x37
 800c11e:	f7ff ffee 	bl	800c0fe <send_cmd>
 800c122:	4603      	mov	r3, r0
 800c124:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c126:	7bbb      	ldrb	r3, [r7, #14]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d901      	bls.n	800c130 <send_cmd+0x32>
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	e051      	b.n	800c1d4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c130:	79fb      	ldrb	r3, [r7, #7]
 800c132:	2b0c      	cmp	r3, #12
 800c134:	d008      	beq.n	800c148 <send_cmd+0x4a>
		despiselect();
 800c136:	f7ff ff5b 	bl	800bff0 <despiselect>
		if (!spiselect()) return 0xFF;
 800c13a:	f7ff ff69 	bl	800c010 <spiselect>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d101      	bne.n	800c148 <send_cmd+0x4a>
 800c144:	23ff      	movs	r3, #255	; 0xff
 800c146:	e045      	b.n	800c1d4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	4618      	mov	r0, r3
 800c152:	f7ff fedd 	bl	800bf10 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	0e1b      	lsrs	r3, r3, #24
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7ff fed7 	bl	800bf10 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	0c1b      	lsrs	r3, r3, #16
 800c166:	b2db      	uxtb	r3, r3
 800c168:	4618      	mov	r0, r3
 800c16a:	f7ff fed1 	bl	800bf10 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	0a1b      	lsrs	r3, r3, #8
 800c172:	b2db      	uxtb	r3, r3
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff fecb 	bl	800bf10 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	4618      	mov	r0, r3
 800c180:	f7ff fec6 	bl	800bf10 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800c184:	2301      	movs	r3, #1
 800c186:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800c188:	79fb      	ldrb	r3, [r7, #7]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <send_cmd+0x94>
 800c18e:	2395      	movs	r3, #149	; 0x95
 800c190:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800c192:	79fb      	ldrb	r3, [r7, #7]
 800c194:	2b08      	cmp	r3, #8
 800c196:	d101      	bne.n	800c19c <send_cmd+0x9e>
 800c198:	2387      	movs	r3, #135	; 0x87
 800c19a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7ff feb6 	bl	800bf10 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800c1a4:	79fb      	ldrb	r3, [r7, #7]
 800c1a6:	2b0c      	cmp	r3, #12
 800c1a8:	d102      	bne.n	800c1b0 <send_cmd+0xb2>
 800c1aa:	20ff      	movs	r0, #255	; 0xff
 800c1ac:	f7ff feb0 	bl	800bf10 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800c1b0:	230a      	movs	r3, #10
 800c1b2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800c1b4:	20ff      	movs	r0, #255	; 0xff
 800c1b6:	f7ff feab 	bl	800bf10 <xchg_spi>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800c1be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	da05      	bge.n	800c1d2 <send_cmd+0xd4>
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	73fb      	strb	r3, [r7, #15]
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1f0      	bne.n	800c1b4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800c1d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c1dc:	b590      	push	{r4, r7, lr}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800c1e6:	79fb      	ldrb	r3, [r7, #7]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <USER_SPI_initialize+0x14>
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e0d4      	b.n	800c39a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800c1f0:	4b6c      	ldr	r3, [pc, #432]	; (800c3a4 <USER_SPI_initialize+0x1c8>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	b2db      	uxtb	r3, r3
 800c1f6:	f003 0302 	and.w	r3, r3, #2
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d003      	beq.n	800c206 <USER_SPI_initialize+0x2a>
 800c1fe:	4b69      	ldr	r3, [pc, #420]	; (800c3a4 <USER_SPI_initialize+0x1c8>)
 800c200:	781b      	ldrb	r3, [r3, #0]
 800c202:	b2db      	uxtb	r3, r3
 800c204:	e0c9      	b.n	800c39a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800c206:	4b68      	ldr	r3, [pc, #416]	; (800c3a8 <USER_SPI_initialize+0x1cc>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	681a      	ldr	r2, [r3, #0]
 800c20c:	4b66      	ldr	r3, [pc, #408]	; (800c3a8 <USER_SPI_initialize+0x1cc>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800c214:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800c216:	230a      	movs	r3, #10
 800c218:	73fb      	strb	r3, [r7, #15]
 800c21a:	e005      	b.n	800c228 <USER_SPI_initialize+0x4c>
 800c21c:	20ff      	movs	r0, #255	; 0xff
 800c21e:	f7ff fe77 	bl	800bf10 <xchg_spi>
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	3b01      	subs	r3, #1
 800c226:	73fb      	strb	r3, [r7, #15]
 800c228:	7bfb      	ldrb	r3, [r7, #15]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1f6      	bne.n	800c21c <USER_SPI_initialize+0x40>

	ty = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800c232:	2100      	movs	r1, #0
 800c234:	2000      	movs	r0, #0
 800c236:	f7ff ff62 	bl	800c0fe <send_cmd>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b01      	cmp	r3, #1
 800c23e:	f040 808b 	bne.w	800c358 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800c242:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c246:	f7ff fe39 	bl	800bebc <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800c24a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c24e:	2008      	movs	r0, #8
 800c250:	f7ff ff55 	bl	800c0fe <send_cmd>
 800c254:	4603      	mov	r3, r0
 800c256:	2b01      	cmp	r3, #1
 800c258:	d151      	bne.n	800c2fe <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800c25a:	2300      	movs	r3, #0
 800c25c:	73fb      	strb	r3, [r7, #15]
 800c25e:	e00d      	b.n	800c27c <USER_SPI_initialize+0xa0>
 800c260:	7bfc      	ldrb	r4, [r7, #15]
 800c262:	20ff      	movs	r0, #255	; 0xff
 800c264:	f7ff fe54 	bl	800bf10 <xchg_spi>
 800c268:	4603      	mov	r3, r0
 800c26a:	461a      	mov	r2, r3
 800c26c:	f107 0310 	add.w	r3, r7, #16
 800c270:	4423      	add	r3, r4
 800c272:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	3301      	adds	r3, #1
 800c27a:	73fb      	strb	r3, [r7, #15]
 800c27c:	7bfb      	ldrb	r3, [r7, #15]
 800c27e:	2b03      	cmp	r3, #3
 800c280:	d9ee      	bls.n	800c260 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800c282:	7abb      	ldrb	r3, [r7, #10]
 800c284:	2b01      	cmp	r3, #1
 800c286:	d167      	bne.n	800c358 <USER_SPI_initialize+0x17c>
 800c288:	7afb      	ldrb	r3, [r7, #11]
 800c28a:	2baa      	cmp	r3, #170	; 0xaa
 800c28c:	d164      	bne.n	800c358 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800c28e:	bf00      	nop
 800c290:	f7ff fe28 	bl	800bee4 <SPI_Timer_Status>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	d007      	beq.n	800c2aa <USER_SPI_initialize+0xce>
 800c29a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c29e:	20a9      	movs	r0, #169	; 0xa9
 800c2a0:	f7ff ff2d 	bl	800c0fe <send_cmd>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d1f2      	bne.n	800c290 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800c2aa:	f7ff fe1b 	bl	800bee4 <SPI_Timer_Status>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d051      	beq.n	800c358 <USER_SPI_initialize+0x17c>
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	203a      	movs	r0, #58	; 0x3a
 800c2b8:	f7ff ff21 	bl	800c0fe <send_cmd>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d14a      	bne.n	800c358 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]
 800c2c6:	e00d      	b.n	800c2e4 <USER_SPI_initialize+0x108>
 800c2c8:	7bfc      	ldrb	r4, [r7, #15]
 800c2ca:	20ff      	movs	r0, #255	; 0xff
 800c2cc:	f7ff fe20 	bl	800bf10 <xchg_spi>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	f107 0310 	add.w	r3, r7, #16
 800c2d8:	4423      	add	r3, r4
 800c2da:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	73fb      	strb	r3, [r7, #15]
 800c2e4:	7bfb      	ldrb	r3, [r7, #15]
 800c2e6:	2b03      	cmp	r3, #3
 800c2e8:	d9ee      	bls.n	800c2c8 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800c2ea:	7a3b      	ldrb	r3, [r7, #8]
 800c2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d001      	beq.n	800c2f8 <USER_SPI_initialize+0x11c>
 800c2f4:	230c      	movs	r3, #12
 800c2f6:	e000      	b.n	800c2fa <USER_SPI_initialize+0x11e>
 800c2f8:	2304      	movs	r3, #4
 800c2fa:	737b      	strb	r3, [r7, #13]
 800c2fc:	e02c      	b.n	800c358 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800c2fe:	2100      	movs	r1, #0
 800c300:	20a9      	movs	r0, #169	; 0xa9
 800c302:	f7ff fefc 	bl	800c0fe <send_cmd>
 800c306:	4603      	mov	r3, r0
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d804      	bhi.n	800c316 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c30c:	2302      	movs	r3, #2
 800c30e:	737b      	strb	r3, [r7, #13]
 800c310:	23a9      	movs	r3, #169	; 0xa9
 800c312:	73bb      	strb	r3, [r7, #14]
 800c314:	e003      	b.n	800c31e <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c316:	2301      	movs	r3, #1
 800c318:	737b      	strb	r3, [r7, #13]
 800c31a:	2301      	movs	r3, #1
 800c31c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c31e:	bf00      	nop
 800c320:	f7ff fde0 	bl	800bee4 <SPI_Timer_Status>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d007      	beq.n	800c33a <USER_SPI_initialize+0x15e>
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
 800c32c:	2100      	movs	r1, #0
 800c32e:	4618      	mov	r0, r3
 800c330:	f7ff fee5 	bl	800c0fe <send_cmd>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1f2      	bne.n	800c320 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c33a:	f7ff fdd3 	bl	800bee4 <SPI_Timer_Status>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d007      	beq.n	800c354 <USER_SPI_initialize+0x178>
 800c344:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c348:	2010      	movs	r0, #16
 800c34a:	f7ff fed8 	bl	800c0fe <send_cmd>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d001      	beq.n	800c358 <USER_SPI_initialize+0x17c>
				ty = 0;
 800c354:	2300      	movs	r3, #0
 800c356:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800c358:	4a14      	ldr	r2, [pc, #80]	; (800c3ac <USER_SPI_initialize+0x1d0>)
 800c35a:	7b7b      	ldrb	r3, [r7, #13]
 800c35c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c35e:	f7ff fe47 	bl	800bff0 <despiselect>

	if (ty) {			/* OK */
 800c362:	7b7b      	ldrb	r3, [r7, #13]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d012      	beq.n	800c38e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800c368:	4b0f      	ldr	r3, [pc, #60]	; (800c3a8 <USER_SPI_initialize+0x1cc>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c372:	4b0d      	ldr	r3, [pc, #52]	; (800c3a8 <USER_SPI_initialize+0x1cc>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f042 0220 	orr.w	r2, r2, #32
 800c37a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c37c:	4b09      	ldr	r3, [pc, #36]	; (800c3a4 <USER_SPI_initialize+0x1c8>)
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	b2db      	uxtb	r3, r3
 800c382:	f023 0301 	bic.w	r3, r3, #1
 800c386:	b2da      	uxtb	r2, r3
 800c388:	4b06      	ldr	r3, [pc, #24]	; (800c3a4 <USER_SPI_initialize+0x1c8>)
 800c38a:	701a      	strb	r2, [r3, #0]
 800c38c:	e002      	b.n	800c394 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c38e:	4b05      	ldr	r3, [pc, #20]	; (800c3a4 <USER_SPI_initialize+0x1c8>)
 800c390:	2201      	movs	r2, #1
 800c392:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c394:	4b03      	ldr	r3, [pc, #12]	; (800c3a4 <USER_SPI_initialize+0x1c8>)
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	b2db      	uxtb	r3, r3
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd90      	pop	{r4, r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	20000024 	.word	0x20000024
 800c3a8:	200012cc 	.word	0x200012cc
 800c3ac:	200004bc 	.word	0x200004bc

0800c3b0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b083      	sub	sp, #12
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c3ba:	79fb      	ldrb	r3, [r7, #7]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d001      	beq.n	800c3c4 <USER_SPI_status+0x14>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e002      	b.n	800c3ca <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c3c4:	4b04      	ldr	r3, [pc, #16]	; (800c3d8 <USER_SPI_status+0x28>)
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	b2db      	uxtb	r3, r3
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	370c      	adds	r7, #12
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	20000024 	.word	0x20000024

0800c3dc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60b9      	str	r1, [r7, #8]
 800c3e4:	607a      	str	r2, [r7, #4]
 800c3e6:	603b      	str	r3, [r7, #0]
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c3ec:	7bfb      	ldrb	r3, [r7, #15]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d102      	bne.n	800c3f8 <USER_SPI_read+0x1c>
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <USER_SPI_read+0x20>
 800c3f8:	2304      	movs	r3, #4
 800c3fa:	e04d      	b.n	800c498 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c3fc:	4b28      	ldr	r3, [pc, #160]	; (800c4a0 <USER_SPI_read+0xc4>)
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	b2db      	uxtb	r3, r3
 800c402:	f003 0301 	and.w	r3, r3, #1
 800c406:	2b00      	cmp	r3, #0
 800c408:	d001      	beq.n	800c40e <USER_SPI_read+0x32>
 800c40a:	2303      	movs	r3, #3
 800c40c:	e044      	b.n	800c498 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800c40e:	4b25      	ldr	r3, [pc, #148]	; (800c4a4 <USER_SPI_read+0xc8>)
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	f003 0308 	and.w	r3, r3, #8
 800c416:	2b00      	cmp	r3, #0
 800c418:	d102      	bne.n	800c420 <USER_SPI_read+0x44>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	025b      	lsls	r3, r3, #9
 800c41e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b01      	cmp	r3, #1
 800c424:	d111      	bne.n	800c44a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800c426:	6879      	ldr	r1, [r7, #4]
 800c428:	2011      	movs	r0, #17
 800c42a:	f7ff fe68 	bl	800c0fe <send_cmd>
 800c42e:	4603      	mov	r3, r0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d129      	bne.n	800c488 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800c434:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c438:	68b8      	ldr	r0, [r7, #8]
 800c43a:	f7ff fe05 	bl	800c048 <rcvr_datablock>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d021      	beq.n	800c488 <USER_SPI_read+0xac>
			count = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	603b      	str	r3, [r7, #0]
 800c448:	e01e      	b.n	800c488 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800c44a:	6879      	ldr	r1, [r7, #4]
 800c44c:	2012      	movs	r0, #18
 800c44e:	f7ff fe56 	bl	800c0fe <send_cmd>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d117      	bne.n	800c488 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800c458:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c45c:	68b8      	ldr	r0, [r7, #8]
 800c45e:	f7ff fdf3 	bl	800c048 <rcvr_datablock>
 800c462:	4603      	mov	r3, r0
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00a      	beq.n	800c47e <USER_SPI_read+0xa2>
				buff += 512;
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c46e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	3b01      	subs	r3, #1
 800c474:	603b      	str	r3, [r7, #0]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1ed      	bne.n	800c458 <USER_SPI_read+0x7c>
 800c47c:	e000      	b.n	800c480 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800c47e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800c480:	2100      	movs	r1, #0
 800c482:	200c      	movs	r0, #12
 800c484:	f7ff fe3b 	bl	800c0fe <send_cmd>
		}
	}
	despiselect();
 800c488:	f7ff fdb2 	bl	800bff0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	bf14      	ite	ne
 800c492:	2301      	movne	r3, #1
 800c494:	2300      	moveq	r3, #0
 800c496:	b2db      	uxtb	r3, r3
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	20000024 	.word	0x20000024
 800c4a4:	200004bc 	.word	0x200004bc

0800c4a8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60b9      	str	r1, [r7, #8]
 800c4b0:	607a      	str	r2, [r7, #4]
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d102      	bne.n	800c4c4 <USER_SPI_write+0x1c>
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <USER_SPI_write+0x20>
 800c4c4:	2304      	movs	r3, #4
 800c4c6:	e063      	b.n	800c590 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800c4c8:	4b33      	ldr	r3, [pc, #204]	; (800c598 <USER_SPI_write+0xf0>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <USER_SPI_write+0x32>
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e05a      	b.n	800c590 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800c4da:	4b2f      	ldr	r3, [pc, #188]	; (800c598 <USER_SPI_write+0xf0>)
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	f003 0304 	and.w	r3, r3, #4
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d001      	beq.n	800c4ec <USER_SPI_write+0x44>
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	e051      	b.n	800c590 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c4ec:	4b2b      	ldr	r3, [pc, #172]	; (800c59c <USER_SPI_write+0xf4>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	f003 0308 	and.w	r3, r3, #8
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d102      	bne.n	800c4fe <USER_SPI_write+0x56>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	025b      	lsls	r3, r3, #9
 800c4fc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d110      	bne.n	800c526 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c504:	6879      	ldr	r1, [r7, #4]
 800c506:	2018      	movs	r0, #24
 800c508:	f7ff fdf9 	bl	800c0fe <send_cmd>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d136      	bne.n	800c580 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c512:	21fe      	movs	r1, #254	; 0xfe
 800c514:	68b8      	ldr	r0, [r7, #8]
 800c516:	f7ff fdc0 	bl	800c09a <xmit_datablock>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d02f      	beq.n	800c580 <USER_SPI_write+0xd8>
			count = 0;
 800c520:	2300      	movs	r3, #0
 800c522:	603b      	str	r3, [r7, #0]
 800c524:	e02c      	b.n	800c580 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c526:	4b1d      	ldr	r3, [pc, #116]	; (800c59c <USER_SPI_write+0xf4>)
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	f003 0306 	and.w	r3, r3, #6
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d003      	beq.n	800c53a <USER_SPI_write+0x92>
 800c532:	6839      	ldr	r1, [r7, #0]
 800c534:	2097      	movs	r0, #151	; 0x97
 800c536:	f7ff fde2 	bl	800c0fe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c53a:	6879      	ldr	r1, [r7, #4]
 800c53c:	2019      	movs	r0, #25
 800c53e:	f7ff fdde 	bl	800c0fe <send_cmd>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d11b      	bne.n	800c580 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c548:	21fc      	movs	r1, #252	; 0xfc
 800c54a:	68b8      	ldr	r0, [r7, #8]
 800c54c:	f7ff fda5 	bl	800c09a <xmit_datablock>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00a      	beq.n	800c56c <USER_SPI_write+0xc4>
				buff += 512;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c55c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	3b01      	subs	r3, #1
 800c562:	603b      	str	r3, [r7, #0]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d1ee      	bne.n	800c548 <USER_SPI_write+0xa0>
 800c56a:	e000      	b.n	800c56e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c56c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c56e:	21fd      	movs	r1, #253	; 0xfd
 800c570:	2000      	movs	r0, #0
 800c572:	f7ff fd92 	bl	800c09a <xmit_datablock>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d101      	bne.n	800c580 <USER_SPI_write+0xd8>
 800c57c:	2301      	movs	r3, #1
 800c57e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c580:	f7ff fd36 	bl	800bff0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	bf14      	ite	ne
 800c58a:	2301      	movne	r3, #1
 800c58c:	2300      	moveq	r3, #0
 800c58e:	b2db      	uxtb	r3, r3
}
 800c590:	4618      	mov	r0, r3
 800c592:	3710      	adds	r7, #16
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	20000024 	.word	0x20000024
 800c59c:	200004bc 	.word	0x200004bc

0800c5a0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b08c      	sub	sp, #48	; 0x30
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	603a      	str	r2, [r7, #0]
 800c5aa:	71fb      	strb	r3, [r7, #7]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c5b0:	79fb      	ldrb	r3, [r7, #7]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <USER_SPI_ioctl+0x1a>
 800c5b6:	2304      	movs	r3, #4
 800c5b8:	e15a      	b.n	800c870 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c5ba:	4baf      	ldr	r3, [pc, #700]	; (800c878 <USER_SPI_ioctl+0x2d8>)
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	f003 0301 	and.w	r3, r3, #1
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d001      	beq.n	800c5cc <USER_SPI_ioctl+0x2c>
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e151      	b.n	800c870 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800c5d2:	79bb      	ldrb	r3, [r7, #6]
 800c5d4:	2b04      	cmp	r3, #4
 800c5d6:	f200 8136 	bhi.w	800c846 <USER_SPI_ioctl+0x2a6>
 800c5da:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <USER_SPI_ioctl+0x40>)
 800c5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e0:	0800c5f5 	.word	0x0800c5f5
 800c5e4:	0800c609 	.word	0x0800c609
 800c5e8:	0800c847 	.word	0x0800c847
 800c5ec:	0800c6b5 	.word	0x0800c6b5
 800c5f0:	0800c7ab 	.word	0x0800c7ab
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c5f4:	f7ff fd0c 	bl	800c010 <spiselect>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 8127 	beq.w	800c84e <USER_SPI_ioctl+0x2ae>
 800c600:	2300      	movs	r3, #0
 800c602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c606:	e122      	b.n	800c84e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c608:	2100      	movs	r1, #0
 800c60a:	2009      	movs	r0, #9
 800c60c:	f7ff fd77 	bl	800c0fe <send_cmd>
 800c610:	4603      	mov	r3, r0
 800c612:	2b00      	cmp	r3, #0
 800c614:	f040 811d 	bne.w	800c852 <USER_SPI_ioctl+0x2b2>
 800c618:	f107 030c 	add.w	r3, r7, #12
 800c61c:	2110      	movs	r1, #16
 800c61e:	4618      	mov	r0, r3
 800c620:	f7ff fd12 	bl	800c048 <rcvr_datablock>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 8113 	beq.w	800c852 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800c62c:	7b3b      	ldrb	r3, [r7, #12]
 800c62e:	099b      	lsrs	r3, r3, #6
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b01      	cmp	r3, #1
 800c634:	d111      	bne.n	800c65a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800c636:	7d7b      	ldrb	r3, [r7, #21]
 800c638:	461a      	mov	r2, r3
 800c63a:	7d3b      	ldrb	r3, [r7, #20]
 800c63c:	021b      	lsls	r3, r3, #8
 800c63e:	4413      	add	r3, r2
 800c640:	461a      	mov	r2, r3
 800c642:	7cfb      	ldrb	r3, [r7, #19]
 800c644:	041b      	lsls	r3, r3, #16
 800c646:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800c64a:	4413      	add	r3, r2
 800c64c:	3301      	adds	r3, #1
 800c64e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	029a      	lsls	r2, r3, #10
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	601a      	str	r2, [r3, #0]
 800c658:	e028      	b.n	800c6ac <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800c65a:	7c7b      	ldrb	r3, [r7, #17]
 800c65c:	f003 030f 	and.w	r3, r3, #15
 800c660:	b2da      	uxtb	r2, r3
 800c662:	7dbb      	ldrb	r3, [r7, #22]
 800c664:	09db      	lsrs	r3, r3, #7
 800c666:	b2db      	uxtb	r3, r3
 800c668:	4413      	add	r3, r2
 800c66a:	b2da      	uxtb	r2, r3
 800c66c:	7d7b      	ldrb	r3, [r7, #21]
 800c66e:	005b      	lsls	r3, r3, #1
 800c670:	b2db      	uxtb	r3, r3
 800c672:	f003 0306 	and.w	r3, r3, #6
 800c676:	b2db      	uxtb	r3, r3
 800c678:	4413      	add	r3, r2
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	3302      	adds	r3, #2
 800c67e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800c682:	7d3b      	ldrb	r3, [r7, #20]
 800c684:	099b      	lsrs	r3, r3, #6
 800c686:	b2db      	uxtb	r3, r3
 800c688:	461a      	mov	r2, r3
 800c68a:	7cfb      	ldrb	r3, [r7, #19]
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	441a      	add	r2, r3
 800c690:	7cbb      	ldrb	r3, [r7, #18]
 800c692:	029b      	lsls	r3, r3, #10
 800c694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c698:	4413      	add	r3, r2
 800c69a:	3301      	adds	r3, #1
 800c69c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800c69e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6a2:	3b09      	subs	r3, #9
 800c6a4:	69fa      	ldr	r2, [r7, #28]
 800c6a6:	409a      	lsls	r2, r3
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800c6b2:	e0ce      	b.n	800c852 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800c6b4:	4b71      	ldr	r3, [pc, #452]	; (800c87c <USER_SPI_ioctl+0x2dc>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	f003 0304 	and.w	r3, r3, #4
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d031      	beq.n	800c724 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	208d      	movs	r0, #141	; 0x8d
 800c6c4:	f7ff fd1b 	bl	800c0fe <send_cmd>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f040 80c3 	bne.w	800c856 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800c6d0:	20ff      	movs	r0, #255	; 0xff
 800c6d2:	f7ff fc1d 	bl	800bf10 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800c6d6:	f107 030c 	add.w	r3, r7, #12
 800c6da:	2110      	movs	r1, #16
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff fcb3 	bl	800c048 <rcvr_datablock>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 80b6 	beq.w	800c856 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800c6ea:	2330      	movs	r3, #48	; 0x30
 800c6ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c6f0:	e007      	b.n	800c702 <USER_SPI_ioctl+0x162>
 800c6f2:	20ff      	movs	r0, #255	; 0xff
 800c6f4:	f7ff fc0c 	bl	800bf10 <xchg_spi>
 800c6f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c702:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1f3      	bne.n	800c6f2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800c70a:	7dbb      	ldrb	r3, [r7, #22]
 800c70c:	091b      	lsrs	r3, r3, #4
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	461a      	mov	r2, r3
 800c712:	2310      	movs	r3, #16
 800c714:	fa03 f202 	lsl.w	r2, r3, r2
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c722:	e098      	b.n	800c856 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c724:	2100      	movs	r1, #0
 800c726:	2009      	movs	r0, #9
 800c728:	f7ff fce9 	bl	800c0fe <send_cmd>
 800c72c:	4603      	mov	r3, r0
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f040 8091 	bne.w	800c856 <USER_SPI_ioctl+0x2b6>
 800c734:	f107 030c 	add.w	r3, r7, #12
 800c738:	2110      	movs	r1, #16
 800c73a:	4618      	mov	r0, r3
 800c73c:	f7ff fc84 	bl	800c048 <rcvr_datablock>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	f000 8087 	beq.w	800c856 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c748:	4b4c      	ldr	r3, [pc, #304]	; (800c87c <USER_SPI_ioctl+0x2dc>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	f003 0302 	and.w	r3, r3, #2
 800c750:	2b00      	cmp	r3, #0
 800c752:	d012      	beq.n	800c77a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c754:	7dbb      	ldrb	r3, [r7, #22]
 800c756:	005b      	lsls	r3, r3, #1
 800c758:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800c75c:	7dfa      	ldrb	r2, [r7, #23]
 800c75e:	09d2      	lsrs	r2, r2, #7
 800c760:	b2d2      	uxtb	r2, r2
 800c762:	4413      	add	r3, r2
 800c764:	1c5a      	adds	r2, r3, #1
 800c766:	7e7b      	ldrb	r3, [r7, #25]
 800c768:	099b      	lsrs	r3, r3, #6
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	3b01      	subs	r3, #1
 800c76e:	fa02 f303 	lsl.w	r3, r2, r3
 800c772:	461a      	mov	r2, r3
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	601a      	str	r2, [r3, #0]
 800c778:	e013      	b.n	800c7a2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c77a:	7dbb      	ldrb	r3, [r7, #22]
 800c77c:	109b      	asrs	r3, r3, #2
 800c77e:	b29b      	uxth	r3, r3
 800c780:	f003 031f 	and.w	r3, r3, #31
 800c784:	3301      	adds	r3, #1
 800c786:	7dfa      	ldrb	r2, [r7, #23]
 800c788:	00d2      	lsls	r2, r2, #3
 800c78a:	f002 0218 	and.w	r2, r2, #24
 800c78e:	7df9      	ldrb	r1, [r7, #23]
 800c790:	0949      	lsrs	r1, r1, #5
 800c792:	b2c9      	uxtb	r1, r1
 800c794:	440a      	add	r2, r1
 800c796:	3201      	adds	r2, #1
 800c798:	fb02 f303 	mul.w	r3, r2, r3
 800c79c:	461a      	mov	r2, r3
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c7a8:	e055      	b.n	800c856 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c7aa:	4b34      	ldr	r3, [pc, #208]	; (800c87c <USER_SPI_ioctl+0x2dc>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	f003 0306 	and.w	r3, r3, #6
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d051      	beq.n	800c85a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c7b6:	f107 020c 	add.w	r2, r7, #12
 800c7ba:	79fb      	ldrb	r3, [r7, #7]
 800c7bc:	210b      	movs	r1, #11
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7ff feee 	bl	800c5a0 <USER_SPI_ioctl>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d149      	bne.n	800c85e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c7ca:	7b3b      	ldrb	r3, [r7, #12]
 800c7cc:	099b      	lsrs	r3, r3, #6
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d104      	bne.n	800c7de <USER_SPI_ioctl+0x23e>
 800c7d4:	7dbb      	ldrb	r3, [r7, #22]
 800c7d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d041      	beq.n	800c862 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	623b      	str	r3, [r7, #32]
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800c7ee:	4b23      	ldr	r3, [pc, #140]	; (800c87c <USER_SPI_ioctl+0x2dc>)
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	f003 0308 	and.w	r3, r3, #8
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d105      	bne.n	800c806 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fc:	025b      	lsls	r3, r3, #9
 800c7fe:	62bb      	str	r3, [r7, #40]	; 0x28
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	025b      	lsls	r3, r3, #9
 800c804:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c808:	2020      	movs	r0, #32
 800c80a:	f7ff fc78 	bl	800c0fe <send_cmd>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d128      	bne.n	800c866 <USER_SPI_ioctl+0x2c6>
 800c814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c816:	2021      	movs	r0, #33	; 0x21
 800c818:	f7ff fc71 	bl	800c0fe <send_cmd>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d121      	bne.n	800c866 <USER_SPI_ioctl+0x2c6>
 800c822:	2100      	movs	r1, #0
 800c824:	2026      	movs	r0, #38	; 0x26
 800c826:	f7ff fc6a 	bl	800c0fe <send_cmd>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d11a      	bne.n	800c866 <USER_SPI_ioctl+0x2c6>
 800c830:	f247 5030 	movw	r0, #30000	; 0x7530
 800c834:	f7ff fbb9 	bl	800bfaa <wait_ready>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d013      	beq.n	800c866 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c83e:	2300      	movs	r3, #0
 800c840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800c844:	e00f      	b.n	800c866 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c846:	2304      	movs	r3, #4
 800c848:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c84c:	e00c      	b.n	800c868 <USER_SPI_ioctl+0x2c8>
		break;
 800c84e:	bf00      	nop
 800c850:	e00a      	b.n	800c868 <USER_SPI_ioctl+0x2c8>
		break;
 800c852:	bf00      	nop
 800c854:	e008      	b.n	800c868 <USER_SPI_ioctl+0x2c8>
		break;
 800c856:	bf00      	nop
 800c858:	e006      	b.n	800c868 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c85a:	bf00      	nop
 800c85c:	e004      	b.n	800c868 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c85e:	bf00      	nop
 800c860:	e002      	b.n	800c868 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c862:	bf00      	nop
 800c864:	e000      	b.n	800c868 <USER_SPI_ioctl+0x2c8>
		break;
 800c866:	bf00      	nop
	}

	despiselect();
 800c868:	f7ff fbc2 	bl	800bff0 <despiselect>

	return res;
 800c86c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c870:	4618      	mov	r0, r3
 800c872:	3730      	adds	r7, #48	; 0x30
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	20000024 	.word	0x20000024
 800c87c:	200004bc 	.word	0x200004bc

0800c880 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c88a:	79fb      	ldrb	r3, [r7, #7]
 800c88c:	4a08      	ldr	r2, [pc, #32]	; (800c8b0 <disk_status+0x30>)
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	79fa      	ldrb	r2, [r7, #7]
 800c898:	4905      	ldr	r1, [pc, #20]	; (800c8b0 <disk_status+0x30>)
 800c89a:	440a      	add	r2, r1
 800c89c:	7a12      	ldrb	r2, [r2, #8]
 800c89e:	4610      	mov	r0, r2
 800c8a0:	4798      	blx	r3
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	200004e8 	.word	0x200004e8

0800c8b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b084      	sub	sp, #16
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c8c2:	79fb      	ldrb	r3, [r7, #7]
 800c8c4:	4a0d      	ldr	r2, [pc, #52]	; (800c8fc <disk_initialize+0x48>)
 800c8c6:	5cd3      	ldrb	r3, [r2, r3]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d111      	bne.n	800c8f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c8cc:	79fb      	ldrb	r3, [r7, #7]
 800c8ce:	4a0b      	ldr	r2, [pc, #44]	; (800c8fc <disk_initialize+0x48>)
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <disk_initialize+0x48>)
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	79fa      	ldrb	r2, [r7, #7]
 800c8e2:	4906      	ldr	r1, [pc, #24]	; (800c8fc <disk_initialize+0x48>)
 800c8e4:	440a      	add	r2, r1
 800c8e6:	7a12      	ldrb	r2, [r2, #8]
 800c8e8:	4610      	mov	r0, r2
 800c8ea:	4798      	blx	r3
 800c8ec:	4603      	mov	r3, r0
 800c8ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	200004e8 	.word	0x200004e8

0800c900 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c900:	b590      	push	{r4, r7, lr}
 800c902:	b087      	sub	sp, #28
 800c904:	af00      	add	r7, sp, #0
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	607a      	str	r2, [r7, #4]
 800c90a:	603b      	str	r3, [r7, #0]
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c910:	7bfb      	ldrb	r3, [r7, #15]
 800c912:	4a0a      	ldr	r2, [pc, #40]	; (800c93c <disk_read+0x3c>)
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	4413      	add	r3, r2
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	689c      	ldr	r4, [r3, #8]
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
 800c91e:	4a07      	ldr	r2, [pc, #28]	; (800c93c <disk_read+0x3c>)
 800c920:	4413      	add	r3, r2
 800c922:	7a18      	ldrb	r0, [r3, #8]
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	687a      	ldr	r2, [r7, #4]
 800c928:	68b9      	ldr	r1, [r7, #8]
 800c92a:	47a0      	blx	r4
 800c92c:	4603      	mov	r3, r0
 800c92e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c930:	7dfb      	ldrb	r3, [r7, #23]
}
 800c932:	4618      	mov	r0, r3
 800c934:	371c      	adds	r7, #28
 800c936:	46bd      	mov	sp, r7
 800c938:	bd90      	pop	{r4, r7, pc}
 800c93a:	bf00      	nop
 800c93c:	200004e8 	.word	0x200004e8

0800c940 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c940:	b590      	push	{r4, r7, lr}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	607a      	str	r2, [r7, #4]
 800c94a:	603b      	str	r3, [r7, #0]
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	4a0a      	ldr	r2, [pc, #40]	; (800c97c <disk_write+0x3c>)
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	68dc      	ldr	r4, [r3, #12]
 800c95c:	7bfb      	ldrb	r3, [r7, #15]
 800c95e:	4a07      	ldr	r2, [pc, #28]	; (800c97c <disk_write+0x3c>)
 800c960:	4413      	add	r3, r2
 800c962:	7a18      	ldrb	r0, [r3, #8]
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	68b9      	ldr	r1, [r7, #8]
 800c96a:	47a0      	blx	r4
 800c96c:	4603      	mov	r3, r0
 800c96e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c970:	7dfb      	ldrb	r3, [r7, #23]
}
 800c972:	4618      	mov	r0, r3
 800c974:	371c      	adds	r7, #28
 800c976:	46bd      	mov	sp, r7
 800c978:	bd90      	pop	{r4, r7, pc}
 800c97a:	bf00      	nop
 800c97c:	200004e8 	.word	0x200004e8

0800c980 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	603a      	str	r2, [r7, #0]
 800c98a:	71fb      	strb	r3, [r7, #7]
 800c98c:	460b      	mov	r3, r1
 800c98e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	4a09      	ldr	r2, [pc, #36]	; (800c9b8 <disk_ioctl+0x38>)
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	79fa      	ldrb	r2, [r7, #7]
 800c99e:	4906      	ldr	r1, [pc, #24]	; (800c9b8 <disk_ioctl+0x38>)
 800c9a0:	440a      	add	r2, r1
 800c9a2:	7a10      	ldrb	r0, [r2, #8]
 800c9a4:	79b9      	ldrb	r1, [r7, #6]
 800c9a6:	683a      	ldr	r2, [r7, #0]
 800c9a8:	4798      	blx	r3
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	73fb      	strb	r3, [r7, #15]
  return res;
 800c9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	200004e8 	.word	0x200004e8

0800c9bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c9cc:	89fb      	ldrh	r3, [r7, #14]
 800c9ce:	021b      	lsls	r3, r3, #8
 800c9d0:	b21a      	sxth	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	b21b      	sxth	r3, r3
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	b21b      	sxth	r3, r3
 800c9dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c9de:	89fb      	ldrh	r3, [r7, #14]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	3303      	adds	r3, #3
 800c9f8:	781b      	ldrb	r3, [r3, #0]
 800c9fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	021b      	lsls	r3, r3, #8
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	3202      	adds	r2, #2
 800ca04:	7812      	ldrb	r2, [r2, #0]
 800ca06:	4313      	orrs	r3, r2
 800ca08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	021b      	lsls	r3, r3, #8
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	3201      	adds	r2, #1
 800ca12:	7812      	ldrb	r2, [r2, #0]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	021b      	lsls	r3, r3, #8
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	7812      	ldrb	r2, [r2, #0]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	60fb      	str	r3, [r7, #12]
	return rv;
 800ca24:	68fb      	ldr	r3, [r7, #12]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3714      	adds	r7, #20
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr

0800ca32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ca32:	b480      	push	{r7}
 800ca34:	b083      	sub	sp, #12
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	1c5a      	adds	r2, r3, #1
 800ca42:	607a      	str	r2, [r7, #4]
 800ca44:	887a      	ldrh	r2, [r7, #2]
 800ca46:	b2d2      	uxtb	r2, r2
 800ca48:	701a      	strb	r2, [r3, #0]
 800ca4a:	887b      	ldrh	r3, [r7, #2]
 800ca4c:	0a1b      	lsrs	r3, r3, #8
 800ca4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	607a      	str	r2, [r7, #4]
 800ca56:	887a      	ldrh	r2, [r7, #2]
 800ca58:	b2d2      	uxtb	r2, r2
 800ca5a:	701a      	strb	r2, [r3, #0]
}
 800ca5c:	bf00      	nop
 800ca5e:	370c      	adds	r7, #12
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr

0800ca68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	1c5a      	adds	r2, r3, #1
 800ca76:	607a      	str	r2, [r7, #4]
 800ca78:	683a      	ldr	r2, [r7, #0]
 800ca7a:	b2d2      	uxtb	r2, r2
 800ca7c:	701a      	strb	r2, [r3, #0]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	0a1b      	lsrs	r3, r3, #8
 800ca82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	1c5a      	adds	r2, r3, #1
 800ca88:	607a      	str	r2, [r7, #4]
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	b2d2      	uxtb	r2, r2
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	0a1b      	lsrs	r3, r3, #8
 800ca94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	1c5a      	adds	r2, r3, #1
 800ca9a:	607a      	str	r2, [r7, #4]
 800ca9c:	683a      	ldr	r2, [r7, #0]
 800ca9e:	b2d2      	uxtb	r2, r2
 800caa0:	701a      	strb	r2, [r3, #0]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	0a1b      	lsrs	r3, r3, #8
 800caa6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	1c5a      	adds	r2, r3, #1
 800caac:	607a      	str	r2, [r7, #4]
 800caae:	683a      	ldr	r2, [r7, #0]
 800cab0:	b2d2      	uxtb	r2, r2
 800cab2:	701a      	strb	r2, [r3, #0]
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cac0:	b480      	push	{r7}
 800cac2:	b087      	sub	sp, #28
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d00d      	beq.n	800caf6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	1c53      	adds	r3, r2, #1
 800cade:	613b      	str	r3, [r7, #16]
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	1c59      	adds	r1, r3, #1
 800cae4:	6179      	str	r1, [r7, #20]
 800cae6:	7812      	ldrb	r2, [r2, #0]
 800cae8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3b01      	subs	r3, #1
 800caee:	607b      	str	r3, [r7, #4]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d1f1      	bne.n	800cada <mem_cpy+0x1a>
	}
}
 800caf6:	bf00      	nop
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cb02:	b480      	push	{r7}
 800cb04:	b087      	sub	sp, #28
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	617a      	str	r2, [r7, #20]
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	b2d2      	uxtb	r2, r2
 800cb1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	3b01      	subs	r3, #1
 800cb22:	607b      	str	r3, [r7, #4]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1f3      	bne.n	800cb12 <mem_set+0x10>
}
 800cb2a:	bf00      	nop
 800cb2c:	bf00      	nop
 800cb2e:	371c      	adds	r7, #28
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cb38:	b480      	push	{r7}
 800cb3a:	b089      	sub	sp, #36	; 0x24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	60b9      	str	r1, [r7, #8]
 800cb42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	61fb      	str	r3, [r7, #28]
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	1c5a      	adds	r2, r3, #1
 800cb54:	61fa      	str	r2, [r7, #28]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	69bb      	ldr	r3, [r7, #24]
 800cb5c:	1c5a      	adds	r2, r3, #1
 800cb5e:	61ba      	str	r2, [r7, #24]
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	1acb      	subs	r3, r1, r3
 800cb64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	607b      	str	r3, [r7, #4]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d002      	beq.n	800cb78 <mem_cmp+0x40>
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d0eb      	beq.n	800cb50 <mem_cmp+0x18>

	return r;
 800cb78:	697b      	ldr	r3, [r7, #20]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3724      	adds	r7, #36	; 0x24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr

0800cb86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800cb86:	b480      	push	{r7}
 800cb88:	b083      	sub	sp, #12
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cb90:	e002      	b.n	800cb98 <chk_chr+0x12>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	3301      	adds	r3, #1
 800cb96:	607b      	str	r3, [r7, #4]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d005      	beq.n	800cbac <chk_chr+0x26>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	781b      	ldrb	r3, [r3, #0]
 800cba4:	461a      	mov	r2, r3
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d1f2      	bne.n	800cb92 <chk_chr+0xc>
	return *str;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	781b      	ldrb	r3, [r3, #0]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60bb      	str	r3, [r7, #8]
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	60fb      	str	r3, [r7, #12]
 800cbce:	e029      	b.n	800cc24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cbd0:	4a27      	ldr	r2, [pc, #156]	; (800cc70 <chk_lock+0xb4>)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	011b      	lsls	r3, r3, #4
 800cbd6:	4413      	add	r3, r2
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d01d      	beq.n	800cc1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cbde:	4a24      	ldr	r2, [pc, #144]	; (800cc70 <chk_lock+0xb4>)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	011b      	lsls	r3, r3, #4
 800cbe4:	4413      	add	r3, r2
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d116      	bne.n	800cc1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cbf0:	4a1f      	ldr	r2, [pc, #124]	; (800cc70 <chk_lock+0xb4>)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	011b      	lsls	r3, r3, #4
 800cbf6:	4413      	add	r3, r2
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d10c      	bne.n	800cc1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cc04:	4a1a      	ldr	r2, [pc, #104]	; (800cc70 <chk_lock+0xb4>)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	011b      	lsls	r3, r3, #4
 800cc0a:	4413      	add	r3, r2
 800cc0c:	3308      	adds	r3, #8
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d102      	bne.n	800cc1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cc18:	e007      	b.n	800cc2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	3301      	adds	r3, #1
 800cc22:	60fb      	str	r3, [r7, #12]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d9d2      	bls.n	800cbd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d109      	bne.n	800cc44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d102      	bne.n	800cc3c <chk_lock+0x80>
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	2b02      	cmp	r3, #2
 800cc3a:	d101      	bne.n	800cc40 <chk_lock+0x84>
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	e010      	b.n	800cc62 <chk_lock+0xa6>
 800cc40:	2312      	movs	r3, #18
 800cc42:	e00e      	b.n	800cc62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d108      	bne.n	800cc5c <chk_lock+0xa0>
 800cc4a:	4a09      	ldr	r2, [pc, #36]	; (800cc70 <chk_lock+0xb4>)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	011b      	lsls	r3, r3, #4
 800cc50:	4413      	add	r3, r2
 800cc52:	330c      	adds	r3, #12
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc5a:	d101      	bne.n	800cc60 <chk_lock+0xa4>
 800cc5c:	2310      	movs	r3, #16
 800cc5e:	e000      	b.n	800cc62 <chk_lock+0xa6>
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr
 800cc6e:	bf00      	nop
 800cc70:	200004c8 	.word	0x200004c8

0800cc74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cc74:	b480      	push	{r7}
 800cc76:	b083      	sub	sp, #12
 800cc78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	607b      	str	r3, [r7, #4]
 800cc7e:	e002      	b.n	800cc86 <enq_lock+0x12>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3301      	adds	r3, #1
 800cc84:	607b      	str	r3, [r7, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d806      	bhi.n	800cc9a <enq_lock+0x26>
 800cc8c:	4a09      	ldr	r2, [pc, #36]	; (800ccb4 <enq_lock+0x40>)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	011b      	lsls	r3, r3, #4
 800cc92:	4413      	add	r3, r2
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1f2      	bne.n	800cc80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	bf14      	ite	ne
 800cca0:	2301      	movne	r3, #1
 800cca2:	2300      	moveq	r3, #0
 800cca4:	b2db      	uxtb	r3, r3
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	200004c8 	.word	0x200004c8

0800ccb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b085      	sub	sp, #20
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60fb      	str	r3, [r7, #12]
 800ccc6:	e01f      	b.n	800cd08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ccc8:	4a41      	ldr	r2, [pc, #260]	; (800cdd0 <inc_lock+0x118>)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	011b      	lsls	r3, r3, #4
 800ccce:	4413      	add	r3, r2
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d113      	bne.n	800cd02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ccda:	4a3d      	ldr	r2, [pc, #244]	; (800cdd0 <inc_lock+0x118>)
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	011b      	lsls	r3, r3, #4
 800cce0:	4413      	add	r3, r2
 800cce2:	3304      	adds	r3, #4
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d109      	bne.n	800cd02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ccee:	4a38      	ldr	r2, [pc, #224]	; (800cdd0 <inc_lock+0x118>)
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	011b      	lsls	r3, r3, #4
 800ccf4:	4413      	add	r3, r2
 800ccf6:	3308      	adds	r3, #8
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d006      	beq.n	800cd10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	3301      	adds	r3, #1
 800cd06:	60fb      	str	r3, [r7, #12]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	d9dc      	bls.n	800ccc8 <inc_lock+0x10>
 800cd0e:	e000      	b.n	800cd12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cd10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d132      	bne.n	800cd7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	e002      	b.n	800cd24 <inc_lock+0x6c>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	3301      	adds	r3, #1
 800cd22:	60fb      	str	r3, [r7, #12]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d806      	bhi.n	800cd38 <inc_lock+0x80>
 800cd2a:	4a29      	ldr	r2, [pc, #164]	; (800cdd0 <inc_lock+0x118>)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	011b      	lsls	r3, r3, #4
 800cd30:	4413      	add	r3, r2
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d1f2      	bne.n	800cd1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d101      	bne.n	800cd42 <inc_lock+0x8a>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e040      	b.n	800cdc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681a      	ldr	r2, [r3, #0]
 800cd46:	4922      	ldr	r1, [pc, #136]	; (800cdd0 <inc_lock+0x118>)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	011b      	lsls	r3, r3, #4
 800cd4c:	440b      	add	r3, r1
 800cd4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	689a      	ldr	r2, [r3, #8]
 800cd54:	491e      	ldr	r1, [pc, #120]	; (800cdd0 <inc_lock+0x118>)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	011b      	lsls	r3, r3, #4
 800cd5a:	440b      	add	r3, r1
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	695a      	ldr	r2, [r3, #20]
 800cd64:	491a      	ldr	r1, [pc, #104]	; (800cdd0 <inc_lock+0x118>)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	011b      	lsls	r3, r3, #4
 800cd6a:	440b      	add	r3, r1
 800cd6c:	3308      	adds	r3, #8
 800cd6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cd70:	4a17      	ldr	r2, [pc, #92]	; (800cdd0 <inc_lock+0x118>)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	011b      	lsls	r3, r3, #4
 800cd76:	4413      	add	r3, r2
 800cd78:	330c      	adds	r3, #12
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d009      	beq.n	800cd98 <inc_lock+0xe0>
 800cd84:	4a12      	ldr	r2, [pc, #72]	; (800cdd0 <inc_lock+0x118>)
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	011b      	lsls	r3, r3, #4
 800cd8a:	4413      	add	r3, r2
 800cd8c:	330c      	adds	r3, #12
 800cd8e:	881b      	ldrh	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d001      	beq.n	800cd98 <inc_lock+0xe0>
 800cd94:	2300      	movs	r3, #0
 800cd96:	e015      	b.n	800cdc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d108      	bne.n	800cdb0 <inc_lock+0xf8>
 800cd9e:	4a0c      	ldr	r2, [pc, #48]	; (800cdd0 <inc_lock+0x118>)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	011b      	lsls	r3, r3, #4
 800cda4:	4413      	add	r3, r2
 800cda6:	330c      	adds	r3, #12
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	e001      	b.n	800cdb4 <inc_lock+0xfc>
 800cdb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cdb4:	4906      	ldr	r1, [pc, #24]	; (800cdd0 <inc_lock+0x118>)
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	011b      	lsls	r3, r3, #4
 800cdba:	440b      	add	r3, r1
 800cdbc:	330c      	adds	r3, #12
 800cdbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	3301      	adds	r3, #1
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr
 800cdd0:	200004c8 	.word	0x200004c8

0800cdd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	607b      	str	r3, [r7, #4]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d825      	bhi.n	800ce34 <dec_lock+0x60>
		n = Files[i].ctr;
 800cde8:	4a17      	ldr	r2, [pc, #92]	; (800ce48 <dec_lock+0x74>)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	011b      	lsls	r3, r3, #4
 800cdee:	4413      	add	r3, r2
 800cdf0:	330c      	adds	r3, #12
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cdf6:	89fb      	ldrh	r3, [r7, #14]
 800cdf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdfc:	d101      	bne.n	800ce02 <dec_lock+0x2e>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ce02:	89fb      	ldrh	r3, [r7, #14]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <dec_lock+0x3a>
 800ce08:	89fb      	ldrh	r3, [r7, #14]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ce0e:	4a0e      	ldr	r2, [pc, #56]	; (800ce48 <dec_lock+0x74>)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	011b      	lsls	r3, r3, #4
 800ce14:	4413      	add	r3, r2
 800ce16:	330c      	adds	r3, #12
 800ce18:	89fa      	ldrh	r2, [r7, #14]
 800ce1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ce1c:	89fb      	ldrh	r3, [r7, #14]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d105      	bne.n	800ce2e <dec_lock+0x5a>
 800ce22:	4a09      	ldr	r2, [pc, #36]	; (800ce48 <dec_lock+0x74>)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	011b      	lsls	r3, r3, #4
 800ce28:	4413      	add	r3, r2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	737b      	strb	r3, [r7, #13]
 800ce32:	e001      	b.n	800ce38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ce34:	2302      	movs	r3, #2
 800ce36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ce38:	7b7b      	ldrb	r3, [r7, #13]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	200004c8 	.word	0x200004c8

0800ce4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b085      	sub	sp, #20
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ce54:	2300      	movs	r3, #0
 800ce56:	60fb      	str	r3, [r7, #12]
 800ce58:	e010      	b.n	800ce7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce5a:	4a0d      	ldr	r2, [pc, #52]	; (800ce90 <clear_lock+0x44>)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	011b      	lsls	r3, r3, #4
 800ce60:	4413      	add	r3, r2
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	429a      	cmp	r2, r3
 800ce68:	d105      	bne.n	800ce76 <clear_lock+0x2a>
 800ce6a:	4a09      	ldr	r2, [pc, #36]	; (800ce90 <clear_lock+0x44>)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	011b      	lsls	r3, r3, #4
 800ce70:	4413      	add	r3, r2
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	60fb      	str	r3, [r7, #12]
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d9eb      	bls.n	800ce5a <clear_lock+0xe>
	}
}
 800ce82:	bf00      	nop
 800ce84:	bf00      	nop
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr
 800ce90:	200004c8 	.word	0x200004c8

0800ce94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	78db      	ldrb	r3, [r3, #3]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d034      	beq.n	800cf12 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	7858      	ldrb	r0, [r3, #1]
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ceb8:	2301      	movs	r3, #1
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	f7ff fd40 	bl	800c940 <disk_write>
 800cec0:	4603      	mov	r3, r0
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <sync_window+0x38>
			res = FR_DISK_ERR;
 800cec6:	2301      	movs	r3, #1
 800cec8:	73fb      	strb	r3, [r7, #15]
 800ceca:	e022      	b.n	800cf12 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6a1b      	ldr	r3, [r3, #32]
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	1ad2      	subs	r2, r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	429a      	cmp	r2, r3
 800cee0:	d217      	bcs.n	800cf12 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	789b      	ldrb	r3, [r3, #2]
 800cee6:	613b      	str	r3, [r7, #16]
 800cee8:	e010      	b.n	800cf0c <sync_window+0x78>
					wsect += fs->fsize;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	699b      	ldr	r3, [r3, #24]
 800ceee:	697a      	ldr	r2, [r7, #20]
 800cef0:	4413      	add	r3, r2
 800cef2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	7858      	ldrb	r0, [r3, #1]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cefe:	2301      	movs	r3, #1
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	f7ff fd1d 	bl	800c940 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	3b01      	subs	r3, #1
 800cf0a:	613b      	str	r3, [r7, #16]
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d8eb      	bhi.n	800ceea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2e:	683a      	ldr	r2, [r7, #0]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d01b      	beq.n	800cf6c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7ff ffad 	bl	800ce94 <sync_window>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d113      	bne.n	800cf6c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	7858      	ldrb	r0, [r3, #1]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cf4e:	2301      	movs	r3, #1
 800cf50:	683a      	ldr	r2, [r7, #0]
 800cf52:	f7ff fcd5 	bl	800c900 <disk_read>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cf5c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf60:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cf62:	2301      	movs	r3, #1
 800cf64:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800cf6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
	...

0800cf78 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f7ff ff87 	bl	800ce94 <sync_window>
 800cf86:	4603      	mov	r3, r0
 800cf88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cf8a:	7bfb      	ldrb	r3, [r7, #15]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d158      	bne.n	800d042 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	2b03      	cmp	r3, #3
 800cf96:	d148      	bne.n	800d02a <sync_fs+0xb2>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	791b      	ldrb	r3, [r3, #4]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d144      	bne.n	800d02a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	3330      	adds	r3, #48	; 0x30
 800cfa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7ff fda9 	bl	800cb02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	3330      	adds	r3, #48	; 0x30
 800cfb4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cfb8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7ff fd38 	bl	800ca32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	3330      	adds	r3, #48	; 0x30
 800cfc6:	4921      	ldr	r1, [pc, #132]	; (800d04c <sync_fs+0xd4>)
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7ff fd4d 	bl	800ca68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	3330      	adds	r3, #48	; 0x30
 800cfd2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cfd6:	491e      	ldr	r1, [pc, #120]	; (800d050 <sync_fs+0xd8>)
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7ff fd45 	bl	800ca68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	3330      	adds	r3, #48	; 0x30
 800cfe2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	4619      	mov	r1, r3
 800cfec:	4610      	mov	r0, r2
 800cfee:	f7ff fd3b 	bl	800ca68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	3330      	adds	r3, #48	; 0x30
 800cff6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	4619      	mov	r1, r3
 800d000:	4610      	mov	r0, r2
 800d002:	f7ff fd31 	bl	800ca68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	69db      	ldr	r3, [r3, #28]
 800d00a:	1c5a      	adds	r2, r3, #1
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	7858      	ldrb	r0, [r3, #1]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d01e:	2301      	movs	r3, #1
 800d020:	f7ff fc8e 	bl	800c940 <disk_write>
			fs->fsi_flag = 0;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	785b      	ldrb	r3, [r3, #1]
 800d02e:	2200      	movs	r2, #0
 800d030:	2100      	movs	r1, #0
 800d032:	4618      	mov	r0, r3
 800d034:	f7ff fca4 	bl	800c980 <disk_ioctl>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <sync_fs+0xca>
 800d03e:	2301      	movs	r3, #1
 800d040:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d042:	7bfb      	ldrb	r3, [r7, #15]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3710      	adds	r7, #16
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}
 800d04c:	41615252 	.word	0x41615252
 800d050:	61417272 	.word	0x61417272

0800d054 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	3b02      	subs	r3, #2
 800d062:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	695b      	ldr	r3, [r3, #20]
 800d068:	3b02      	subs	r3, #2
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d301      	bcc.n	800d074 <clust2sect+0x20>
 800d070:	2300      	movs	r3, #0
 800d072:	e008      	b.n	800d086 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	895b      	ldrh	r3, [r3, #10]
 800d078:	461a      	mov	r2, r3
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	fb03 f202 	mul.w	r2, r3, r2
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d084:	4413      	add	r3, r2
}
 800d086:	4618      	mov	r0, r3
 800d088:	370c      	adds	r7, #12
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b086      	sub	sp, #24
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d904      	bls.n	800d0b2 <get_fat+0x20>
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	695b      	ldr	r3, [r3, #20]
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d302      	bcc.n	800d0b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	617b      	str	r3, [r7, #20]
 800d0b6:	e08f      	b.n	800d1d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	2b03      	cmp	r3, #3
 800d0c4:	d062      	beq.n	800d18c <get_fat+0xfa>
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	dc7c      	bgt.n	800d1c4 <get_fat+0x132>
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d002      	beq.n	800d0d4 <get_fat+0x42>
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d042      	beq.n	800d158 <get_fat+0xc6>
 800d0d2:	e077      	b.n	800d1c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	60fb      	str	r3, [r7, #12]
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	085b      	lsrs	r3, r3, #1
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	4413      	add	r3, r2
 800d0e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	6a1a      	ldr	r2, [r3, #32]
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	0a5b      	lsrs	r3, r3, #9
 800d0ea:	4413      	add	r3, r2
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	6938      	ldr	r0, [r7, #16]
 800d0f0:	f7ff ff14 	bl	800cf1c <move_window>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d167      	bne.n	800d1ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	1c5a      	adds	r2, r3, #1
 800d0fe:	60fa      	str	r2, [r7, #12]
 800d100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d104:	693a      	ldr	r2, [r7, #16]
 800d106:	4413      	add	r3, r2
 800d108:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d10c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	6a1a      	ldr	r2, [r3, #32]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	0a5b      	lsrs	r3, r3, #9
 800d116:	4413      	add	r3, r2
 800d118:	4619      	mov	r1, r3
 800d11a:	6938      	ldr	r0, [r7, #16]
 800d11c:	f7ff fefe 	bl	800cf1c <move_window>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d153      	bne.n	800d1ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d12c:	693a      	ldr	r2, [r7, #16]
 800d12e:	4413      	add	r3, r2
 800d130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d134:	021b      	lsls	r3, r3, #8
 800d136:	461a      	mov	r2, r3
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	4313      	orrs	r3, r2
 800d13c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b00      	cmp	r3, #0
 800d146:	d002      	beq.n	800d14e <get_fat+0xbc>
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	091b      	lsrs	r3, r3, #4
 800d14c:	e002      	b.n	800d154 <get_fat+0xc2>
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d154:	617b      	str	r3, [r7, #20]
			break;
 800d156:	e03f      	b.n	800d1d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	6a1a      	ldr	r2, [r3, #32]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	0a1b      	lsrs	r3, r3, #8
 800d160:	4413      	add	r3, r2
 800d162:	4619      	mov	r1, r3
 800d164:	6938      	ldr	r0, [r7, #16]
 800d166:	f7ff fed9 	bl	800cf1c <move_window>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d130      	bne.n	800d1d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	005b      	lsls	r3, r3, #1
 800d17a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d17e:	4413      	add	r3, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff fc1b 	bl	800c9bc <ld_word>
 800d186:	4603      	mov	r3, r0
 800d188:	617b      	str	r3, [r7, #20]
			break;
 800d18a:	e025      	b.n	800d1d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	6a1a      	ldr	r2, [r3, #32]
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	09db      	lsrs	r3, r3, #7
 800d194:	4413      	add	r3, r2
 800d196:	4619      	mov	r1, r3
 800d198:	6938      	ldr	r0, [r7, #16]
 800d19a:	f7ff febf 	bl	800cf1c <move_window>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d118      	bne.n	800d1d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d1b2:	4413      	add	r3, r2
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7ff fc19 	bl	800c9ec <ld_dword>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d1c0:	617b      	str	r3, [r7, #20]
			break;
 800d1c2:	e009      	b.n	800d1d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	617b      	str	r3, [r7, #20]
 800d1c8:	e006      	b.n	800d1d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1ca:	bf00      	nop
 800d1cc:	e004      	b.n	800d1d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1ce:	bf00      	nop
 800d1d0:	e002      	b.n	800d1d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d1d2:	bf00      	nop
 800d1d4:	e000      	b.n	800d1d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d1d6:	bf00      	nop
		}
	}

	return val;
 800d1d8:	697b      	ldr	r3, [r7, #20]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3718      	adds	r7, #24
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d1e2:	b590      	push	{r4, r7, lr}
 800d1e4:	b089      	sub	sp, #36	; 0x24
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	60f8      	str	r0, [r7, #12]
 800d1ea:	60b9      	str	r1, [r7, #8]
 800d1ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	2b01      	cmp	r3, #1
 800d1f6:	f240 80d2 	bls.w	800d39e <put_fat+0x1bc>
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	695b      	ldr	r3, [r3, #20]
 800d1fe:	68ba      	ldr	r2, [r7, #8]
 800d200:	429a      	cmp	r2, r3
 800d202:	f080 80cc 	bcs.w	800d39e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	2b03      	cmp	r3, #3
 800d20c:	f000 8096 	beq.w	800d33c <put_fat+0x15a>
 800d210:	2b03      	cmp	r3, #3
 800d212:	f300 80cd 	bgt.w	800d3b0 <put_fat+0x1ce>
 800d216:	2b01      	cmp	r3, #1
 800d218:	d002      	beq.n	800d220 <put_fat+0x3e>
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d06e      	beq.n	800d2fc <put_fat+0x11a>
 800d21e:	e0c7      	b.n	800d3b0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	61bb      	str	r3, [r7, #24]
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	085b      	lsrs	r3, r3, #1
 800d228:	69ba      	ldr	r2, [r7, #24]
 800d22a:	4413      	add	r3, r2
 800d22c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6a1a      	ldr	r2, [r3, #32]
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	0a5b      	lsrs	r3, r3, #9
 800d236:	4413      	add	r3, r2
 800d238:	4619      	mov	r1, r3
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f7ff fe6e 	bl	800cf1c <move_window>
 800d240:	4603      	mov	r3, r0
 800d242:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d244:	7ffb      	ldrb	r3, [r7, #31]
 800d246:	2b00      	cmp	r3, #0
 800d248:	f040 80ab 	bne.w	800d3a2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	1c59      	adds	r1, r3, #1
 800d256:	61b9      	str	r1, [r7, #24]
 800d258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d25c:	4413      	add	r3, r2
 800d25e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00d      	beq.n	800d286 <put_fat+0xa4>
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	b25b      	sxtb	r3, r3
 800d270:	f003 030f 	and.w	r3, r3, #15
 800d274:	b25a      	sxtb	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	011b      	lsls	r3, r3, #4
 800d27c:	b25b      	sxtb	r3, r3
 800d27e:	4313      	orrs	r3, r2
 800d280:	b25b      	sxtb	r3, r3
 800d282:	b2db      	uxtb	r3, r3
 800d284:	e001      	b.n	800d28a <put_fat+0xa8>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	697a      	ldr	r2, [r7, #20]
 800d28c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2201      	movs	r2, #1
 800d292:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6a1a      	ldr	r2, [r3, #32]
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	0a5b      	lsrs	r3, r3, #9
 800d29c:	4413      	add	r3, r2
 800d29e:	4619      	mov	r1, r3
 800d2a0:	68f8      	ldr	r0, [r7, #12]
 800d2a2:	f7ff fe3b 	bl	800cf1c <move_window>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d2aa:	7ffb      	ldrb	r3, [r7, #31]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d17a      	bne.n	800d3a6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2bc:	4413      	add	r3, r2
 800d2be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	f003 0301 	and.w	r3, r3, #1
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d003      	beq.n	800d2d2 <put_fat+0xf0>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	091b      	lsrs	r3, r3, #4
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	e00e      	b.n	800d2f0 <put_fat+0x10e>
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	b25b      	sxtb	r3, r3
 800d2d8:	f023 030f 	bic.w	r3, r3, #15
 800d2dc:	b25a      	sxtb	r2, r3
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	0a1b      	lsrs	r3, r3, #8
 800d2e2:	b25b      	sxtb	r3, r3
 800d2e4:	f003 030f 	and.w	r3, r3, #15
 800d2e8:	b25b      	sxtb	r3, r3
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	b25b      	sxtb	r3, r3
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	697a      	ldr	r2, [r7, #20]
 800d2f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	70da      	strb	r2, [r3, #3]
			break;
 800d2fa:	e059      	b.n	800d3b0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	6a1a      	ldr	r2, [r3, #32]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	0a1b      	lsrs	r3, r3, #8
 800d304:	4413      	add	r3, r2
 800d306:	4619      	mov	r1, r3
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f7ff fe07 	bl	800cf1c <move_window>
 800d30e:	4603      	mov	r3, r0
 800d310:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d312:	7ffb      	ldrb	r3, [r7, #31]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d148      	bne.n	800d3aa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	005b      	lsls	r3, r3, #1
 800d322:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d326:	4413      	add	r3, r2
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	b292      	uxth	r2, r2
 800d32c:	4611      	mov	r1, r2
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff fb7f 	bl	800ca32 <st_word>
			fs->wflag = 1;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2201      	movs	r2, #1
 800d338:	70da      	strb	r2, [r3, #3]
			break;
 800d33a:	e039      	b.n	800d3b0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6a1a      	ldr	r2, [r3, #32]
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	09db      	lsrs	r3, r3, #7
 800d344:	4413      	add	r3, r2
 800d346:	4619      	mov	r1, r3
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f7ff fde7 	bl	800cf1c <move_window>
 800d34e:	4603      	mov	r3, r0
 800d350:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d352:	7ffb      	ldrb	r3, [r7, #31]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d12a      	bne.n	800d3ae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	009b      	lsls	r3, r3, #2
 800d368:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d36c:	4413      	add	r3, r2
 800d36e:	4618      	mov	r0, r3
 800d370:	f7ff fb3c 	bl	800c9ec <ld_dword>
 800d374:	4603      	mov	r3, r0
 800d376:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d37a:	4323      	orrs	r3, r4
 800d37c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d38c:	4413      	add	r3, r2
 800d38e:	6879      	ldr	r1, [r7, #4]
 800d390:	4618      	mov	r0, r3
 800d392:	f7ff fb69 	bl	800ca68 <st_dword>
			fs->wflag = 1;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2201      	movs	r2, #1
 800d39a:	70da      	strb	r2, [r3, #3]
			break;
 800d39c:	e008      	b.n	800d3b0 <put_fat+0x1ce>
		}
	}
 800d39e:	bf00      	nop
 800d3a0:	e006      	b.n	800d3b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d3a2:	bf00      	nop
 800d3a4:	e004      	b.n	800d3b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d3a6:	bf00      	nop
 800d3a8:	e002      	b.n	800d3b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d3aa:	bf00      	nop
 800d3ac:	e000      	b.n	800d3b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800d3ae:	bf00      	nop
	return res;
 800d3b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3724      	adds	r7, #36	; 0x24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd90      	pop	{r4, r7, pc}

0800d3ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b088      	sub	sp, #32
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	60f8      	str	r0, [r7, #12]
 800d3c2:	60b9      	str	r1, [r7, #8]
 800d3c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	2b01      	cmp	r3, #1
 800d3d4:	d904      	bls.n	800d3e0 <remove_chain+0x26>
 800d3d6:	69bb      	ldr	r3, [r7, #24]
 800d3d8:	695b      	ldr	r3, [r3, #20]
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d301      	bcc.n	800d3e4 <remove_chain+0x2a>
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	e04b      	b.n	800d47c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d00c      	beq.n	800d404 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d3ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ee:	6879      	ldr	r1, [r7, #4]
 800d3f0:	69b8      	ldr	r0, [r7, #24]
 800d3f2:	f7ff fef6 	bl	800d1e2 <put_fat>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d3fa:	7ffb      	ldrb	r3, [r7, #31]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <remove_chain+0x4a>
 800d400:	7ffb      	ldrb	r3, [r7, #31]
 800d402:	e03b      	b.n	800d47c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d404:	68b9      	ldr	r1, [r7, #8]
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f7ff fe43 	bl	800d092 <get_fat>
 800d40c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d031      	beq.n	800d478 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2b01      	cmp	r3, #1
 800d418:	d101      	bne.n	800d41e <remove_chain+0x64>
 800d41a:	2302      	movs	r3, #2
 800d41c:	e02e      	b.n	800d47c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d424:	d101      	bne.n	800d42a <remove_chain+0x70>
 800d426:	2301      	movs	r3, #1
 800d428:	e028      	b.n	800d47c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d42a:	2200      	movs	r2, #0
 800d42c:	68b9      	ldr	r1, [r7, #8]
 800d42e:	69b8      	ldr	r0, [r7, #24]
 800d430:	f7ff fed7 	bl	800d1e2 <put_fat>
 800d434:	4603      	mov	r3, r0
 800d436:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d438:	7ffb      	ldrb	r3, [r7, #31]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <remove_chain+0x88>
 800d43e:	7ffb      	ldrb	r3, [r7, #31]
 800d440:	e01c      	b.n	800d47c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	691a      	ldr	r2, [r3, #16]
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	3b02      	subs	r3, #2
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d20b      	bcs.n	800d468 <remove_chain+0xae>
			fs->free_clst++;
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	1c5a      	adds	r2, r3, #1
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d45a:	69bb      	ldr	r3, [r7, #24]
 800d45c:	791b      	ldrb	r3, [r3, #4]
 800d45e:	f043 0301 	orr.w	r3, r3, #1
 800d462:	b2da      	uxtb	r2, r3
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	695b      	ldr	r3, [r3, #20]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	429a      	cmp	r2, r3
 800d474:	d3c6      	bcc.n	800d404 <remove_chain+0x4a>
 800d476:	e000      	b.n	800d47a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d478:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d47a:	2300      	movs	r3, #0
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3720      	adds	r7, #32
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b088      	sub	sp, #32
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d10d      	bne.n	800d4b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d004      	beq.n	800d4b0 <create_chain+0x2c>
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	69ba      	ldr	r2, [r7, #24]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d31b      	bcc.n	800d4e8 <create_chain+0x64>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	61bb      	str	r3, [r7, #24]
 800d4b4:	e018      	b.n	800d4e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f7ff fdea 	bl	800d092 <get_fat>
 800d4be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d801      	bhi.n	800d4ca <create_chain+0x46>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e070      	b.n	800d5ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d0:	d101      	bne.n	800d4d6 <create_chain+0x52>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	e06a      	b.n	800d5ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	695b      	ldr	r3, [r3, #20]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d201      	bcs.n	800d4e4 <create_chain+0x60>
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	e063      	b.n	800d5ac <create_chain+0x128>
		scl = clst;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d4ec:	69fb      	ldr	r3, [r7, #28]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	69fa      	ldr	r2, [r7, #28]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d307      	bcc.n	800d50c <create_chain+0x88>
				ncl = 2;
 800d4fc:	2302      	movs	r3, #2
 800d4fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d500:	69fa      	ldr	r2, [r7, #28]
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	429a      	cmp	r2, r3
 800d506:	d901      	bls.n	800d50c <create_chain+0x88>
 800d508:	2300      	movs	r3, #0
 800d50a:	e04f      	b.n	800d5ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d50c:	69f9      	ldr	r1, [r7, #28]
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7ff fdbf 	bl	800d092 <get_fat>
 800d514:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d00e      	beq.n	800d53a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d003      	beq.n	800d52a <create_chain+0xa6>
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d528:	d101      	bne.n	800d52e <create_chain+0xaa>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	e03e      	b.n	800d5ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d52e:	69fa      	ldr	r2, [r7, #28]
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	429a      	cmp	r2, r3
 800d534:	d1da      	bne.n	800d4ec <create_chain+0x68>
 800d536:	2300      	movs	r3, #0
 800d538:	e038      	b.n	800d5ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d53a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d53c:	f04f 32ff 	mov.w	r2, #4294967295
 800d540:	69f9      	ldr	r1, [r7, #28]
 800d542:	6938      	ldr	r0, [r7, #16]
 800d544:	f7ff fe4d 	bl	800d1e2 <put_fat>
 800d548:	4603      	mov	r3, r0
 800d54a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d109      	bne.n	800d566 <create_chain+0xe2>
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d006      	beq.n	800d566 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d558:	69fa      	ldr	r2, [r7, #28]
 800d55a:	6839      	ldr	r1, [r7, #0]
 800d55c:	6938      	ldr	r0, [r7, #16]
 800d55e:	f7ff fe40 	bl	800d1e2 <put_fat>
 800d562:	4603      	mov	r3, r0
 800d564:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d116      	bne.n	800d59a <create_chain+0x116>
		fs->last_clst = ncl;
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	69fa      	ldr	r2, [r7, #28]
 800d570:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	691a      	ldr	r2, [r3, #16]
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	3b02      	subs	r3, #2
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d804      	bhi.n	800d58a <create_chain+0x106>
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	691b      	ldr	r3, [r3, #16]
 800d584:	1e5a      	subs	r2, r3, #1
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	791b      	ldrb	r3, [r3, #4]
 800d58e:	f043 0301 	orr.w	r3, r3, #1
 800d592:	b2da      	uxtb	r2, r3
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	711a      	strb	r2, [r3, #4]
 800d598:	e007      	b.n	800d5aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d59a:	7dfb      	ldrb	r3, [r7, #23]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d102      	bne.n	800d5a6 <create_chain+0x122>
 800d5a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5a4:	e000      	b.n	800d5a8 <create_chain+0x124>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d5aa:	69fb      	ldr	r3, [r7, #28]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3720      	adds	r7, #32
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b087      	sub	sp, #28
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	0a5b      	lsrs	r3, r3, #9
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	8952      	ldrh	r2, [r2, #10]
 800d5d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	1d1a      	adds	r2, r3, #4
 800d5de:	613a      	str	r2, [r7, #16]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <clmt_clust+0x3a>
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	e010      	b.n	800d610 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d5ee:	697a      	ldr	r2, [r7, #20]
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d307      	bcc.n	800d606 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	1ad3      	subs	r3, r2, r3
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	3304      	adds	r3, #4
 800d602:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d604:	e7e9      	b.n	800d5da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d606:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	4413      	add	r3, r2
}
 800d610:	4618      	mov	r0, r3
 800d612:	371c      	adds	r7, #28
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d632:	d204      	bcs.n	800d63e <dir_sdi+0x22>
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	f003 031f 	and.w	r3, r3, #31
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d63e:	2302      	movs	r3, #2
 800d640:	e063      	b.n	800d70a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	683a      	ldr	r2, [r7, #0]
 800d646:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d106      	bne.n	800d662 <dir_sdi+0x46>
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d902      	bls.n	800d662 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d660:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10c      	bne.n	800d682 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	095b      	lsrs	r3, r3, #5
 800d66c:	693a      	ldr	r2, [r7, #16]
 800d66e:	8912      	ldrh	r2, [r2, #8]
 800d670:	4293      	cmp	r3, r2
 800d672:	d301      	bcc.n	800d678 <dir_sdi+0x5c>
 800d674:	2302      	movs	r3, #2
 800d676:	e048      	b.n	800d70a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	61da      	str	r2, [r3, #28]
 800d680:	e029      	b.n	800d6d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	895b      	ldrh	r3, [r3, #10]
 800d686:	025b      	lsls	r3, r3, #9
 800d688:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d68a:	e019      	b.n	800d6c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6979      	ldr	r1, [r7, #20]
 800d690:	4618      	mov	r0, r3
 800d692:	f7ff fcfe 	bl	800d092 <get_fat>
 800d696:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69e:	d101      	bne.n	800d6a4 <dir_sdi+0x88>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e032      	b.n	800d70a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d904      	bls.n	800d6b4 <dir_sdi+0x98>
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	697a      	ldr	r2, [r7, #20]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d301      	bcc.n	800d6b8 <dir_sdi+0x9c>
 800d6b4:	2302      	movs	r3, #2
 800d6b6:	e028      	b.n	800d70a <dir_sdi+0xee>
			ofs -= csz;
 800d6b8:	683a      	ldr	r2, [r7, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	1ad3      	subs	r3, r2, r3
 800d6be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d6c0:	683a      	ldr	r2, [r7, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d2e1      	bcs.n	800d68c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d6c8:	6979      	ldr	r1, [r7, #20]
 800d6ca:	6938      	ldr	r0, [r7, #16]
 800d6cc:	f7ff fcc2 	bl	800d054 <clust2sect>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	69db      	ldr	r3, [r3, #28]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d101      	bne.n	800d6e8 <dir_sdi+0xcc>
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	e010      	b.n	800d70a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	69da      	ldr	r2, [r3, #28]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	0a5b      	lsrs	r3, r3, #9
 800d6f0:	441a      	add	r2, r3
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d702:	441a      	add	r2, r3
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d708:	2300      	movs	r3, #0
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3718      	adds	r7, #24
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b086      	sub	sp, #24
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
 800d71a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	695b      	ldr	r3, [r3, #20]
 800d726:	3320      	adds	r3, #32
 800d728:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	69db      	ldr	r3, [r3, #28]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d003      	beq.n	800d73a <dir_next+0x28>
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d738:	d301      	bcc.n	800d73e <dir_next+0x2c>
 800d73a:	2304      	movs	r3, #4
 800d73c:	e0aa      	b.n	800d894 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d744:	2b00      	cmp	r3, #0
 800d746:	f040 8098 	bne.w	800d87a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	69db      	ldr	r3, [r3, #28]
 800d74e:	1c5a      	adds	r2, r3, #1
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	699b      	ldr	r3, [r3, #24]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d10b      	bne.n	800d774 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	095b      	lsrs	r3, r3, #5
 800d760:	68fa      	ldr	r2, [r7, #12]
 800d762:	8912      	ldrh	r2, [r2, #8]
 800d764:	4293      	cmp	r3, r2
 800d766:	f0c0 8088 	bcc.w	800d87a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	61da      	str	r2, [r3, #28]
 800d770:	2304      	movs	r3, #4
 800d772:	e08f      	b.n	800d894 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	0a5b      	lsrs	r3, r3, #9
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	8952      	ldrh	r2, [r2, #10]
 800d77c:	3a01      	subs	r2, #1
 800d77e:	4013      	ands	r3, r2
 800d780:	2b00      	cmp	r3, #0
 800d782:	d17a      	bne.n	800d87a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	699b      	ldr	r3, [r3, #24]
 800d78a:	4619      	mov	r1, r3
 800d78c:	4610      	mov	r0, r2
 800d78e:	f7ff fc80 	bl	800d092 <get_fat>
 800d792:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	2b01      	cmp	r3, #1
 800d798:	d801      	bhi.n	800d79e <dir_next+0x8c>
 800d79a:	2302      	movs	r3, #2
 800d79c:	e07a      	b.n	800d894 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a4:	d101      	bne.n	800d7aa <dir_next+0x98>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e074      	b.n	800d894 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	695b      	ldr	r3, [r3, #20]
 800d7ae:	697a      	ldr	r2, [r7, #20]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d358      	bcc.n	800d866 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d104      	bne.n	800d7c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	61da      	str	r2, [r3, #28]
 800d7c0:	2304      	movs	r3, #4
 800d7c2:	e067      	b.n	800d894 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	699b      	ldr	r3, [r3, #24]
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4610      	mov	r0, r2
 800d7ce:	f7ff fe59 	bl	800d484 <create_chain>
 800d7d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d101      	bne.n	800d7de <dir_next+0xcc>
 800d7da:	2307      	movs	r3, #7
 800d7dc:	e05a      	b.n	800d894 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d101      	bne.n	800d7e8 <dir_next+0xd6>
 800d7e4:	2302      	movs	r3, #2
 800d7e6:	e055      	b.n	800d894 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ee:	d101      	bne.n	800d7f4 <dir_next+0xe2>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	e04f      	b.n	800d894 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7ff fb4d 	bl	800ce94 <sync_window>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <dir_next+0xf2>
 800d800:	2301      	movs	r3, #1
 800d802:	e047      	b.n	800d894 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	3330      	adds	r3, #48	; 0x30
 800d808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d80c:	2100      	movs	r1, #0
 800d80e:	4618      	mov	r0, r3
 800d810:	f7ff f977 	bl	800cb02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d814:	2300      	movs	r3, #0
 800d816:	613b      	str	r3, [r7, #16]
 800d818:	6979      	ldr	r1, [r7, #20]
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7ff fc1a 	bl	800d054 <clust2sect>
 800d820:	4602      	mov	r2, r0
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	62da      	str	r2, [r3, #44]	; 0x2c
 800d826:	e012      	b.n	800d84e <dir_next+0x13c>
						fs->wflag = 1;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2201      	movs	r2, #1
 800d82c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f7ff fb30 	bl	800ce94 <sync_window>
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <dir_next+0x12c>
 800d83a:	2301      	movs	r3, #1
 800d83c:	e02a      	b.n	800d894 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	3301      	adds	r3, #1
 800d842:	613b      	str	r3, [r7, #16]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d848:	1c5a      	adds	r2, r3, #1
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	62da      	str	r2, [r3, #44]	; 0x2c
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	895b      	ldrh	r3, [r3, #10]
 800d852:	461a      	mov	r2, r3
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	4293      	cmp	r3, r2
 800d858:	d3e6      	bcc.n	800d828 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	1ad2      	subs	r2, r2, r3
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	697a      	ldr	r2, [r7, #20]
 800d86a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d86c:	6979      	ldr	r1, [r7, #20]
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f7ff fbf0 	bl	800d054 <clust2sect>
 800d874:	4602      	mov	r2, r0
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d88c:	441a      	add	r2, r3
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d892:	2300      	movs	r3, #0
}
 800d894:	4618      	mov	r0, r3
 800d896:	3718      	adds	r7, #24
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7ff feb4 	bl	800d61c <dir_sdi>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d8b8:	7dfb      	ldrb	r3, [r7, #23]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d12b      	bne.n	800d916 <dir_alloc+0x7a>
		n = 0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	69db      	ldr	r3, [r3, #28]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f7ff fb27 	bl	800cf1c <move_window>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d11d      	bne.n	800d914 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a1b      	ldr	r3, [r3, #32]
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	2be5      	cmp	r3, #229	; 0xe5
 800d8e0:	d004      	beq.n	800d8ec <dir_alloc+0x50>
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a1b      	ldr	r3, [r3, #32]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d107      	bne.n	800d8fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	3301      	adds	r3, #1
 800d8f0:	613b      	str	r3, [r7, #16]
 800d8f2:	693a      	ldr	r2, [r7, #16]
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d102      	bne.n	800d900 <dir_alloc+0x64>
 800d8fa:	e00c      	b.n	800d916 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d900:	2101      	movs	r1, #1
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7ff ff05 	bl	800d712 <dir_next>
 800d908:	4603      	mov	r3, r0
 800d90a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d90c:	7dfb      	ldrb	r3, [r7, #23]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d0d7      	beq.n	800d8c2 <dir_alloc+0x26>
 800d912:	e000      	b.n	800d916 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d914:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d916:	7dfb      	ldrb	r3, [r7, #23]
 800d918:	2b04      	cmp	r3, #4
 800d91a:	d101      	bne.n	800d920 <dir_alloc+0x84>
 800d91c:	2307      	movs	r3, #7
 800d91e:	75fb      	strb	r3, [r7, #23]
	return res;
 800d920:	7dfb      	ldrb	r3, [r7, #23]
}
 800d922:	4618      	mov	r0, r3
 800d924:	3718      	adds	r7, #24
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b084      	sub	sp, #16
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	331a      	adds	r3, #26
 800d938:	4618      	mov	r0, r3
 800d93a:	f7ff f83f 	bl	800c9bc <ld_word>
 800d93e:	4603      	mov	r3, r0
 800d940:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b03      	cmp	r3, #3
 800d948:	d109      	bne.n	800d95e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	3314      	adds	r3, #20
 800d94e:	4618      	mov	r0, r3
 800d950:	f7ff f834 	bl	800c9bc <ld_word>
 800d954:	4603      	mov	r3, r0
 800d956:	041b      	lsls	r3, r3, #16
 800d958:	68fa      	ldr	r2, [r7, #12]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d95e:	68fb      	ldr	r3, [r7, #12]
}
 800d960:	4618      	mov	r0, r3
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	331a      	adds	r3, #26
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	b292      	uxth	r2, r2
 800d97c:	4611      	mov	r1, r2
 800d97e:	4618      	mov	r0, r3
 800d980:	f7ff f857 	bl	800ca32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b03      	cmp	r3, #3
 800d98a:	d109      	bne.n	800d9a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f103 0214 	add.w	r2, r3, #20
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	0c1b      	lsrs	r3, r3, #16
 800d996:	b29b      	uxth	r3, r3
 800d998:	4619      	mov	r1, r3
 800d99a:	4610      	mov	r0, r2
 800d99c:	f7ff f849 	bl	800ca32 <st_word>
	}
}
 800d9a0:	bf00      	nop
 800d9a2:	3710      	adds	r7, #16
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b086      	sub	sp, #24
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d9b2:	2304      	movs	r3, #4
 800d9b4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800d9bc:	e03c      	b.n	800da38 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	69db      	ldr	r3, [r3, #28]
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6938      	ldr	r0, [r7, #16]
 800d9c6:	f7ff faa9 	bl	800cf1c <move_window>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d136      	bne.n	800da42 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6a1b      	ldr	r3, [r3, #32]
 800d9d8:	781b      	ldrb	r3, [r3, #0]
 800d9da:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d102      	bne.n	800d9e8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d9e2:	2304      	movs	r3, #4
 800d9e4:	75fb      	strb	r3, [r7, #23]
 800d9e6:	e031      	b.n	800da4c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6a1b      	ldr	r3, [r3, #32]
 800d9ec:	330b      	adds	r3, #11
 800d9ee:	781b      	ldrb	r3, [r3, #0]
 800d9f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9f4:	73bb      	strb	r3, [r7, #14]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	7bba      	ldrb	r2, [r7, #14]
 800d9fa:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800d9fc:	7bfb      	ldrb	r3, [r7, #15]
 800d9fe:	2be5      	cmp	r3, #229	; 0xe5
 800da00:	d011      	beq.n	800da26 <dir_read+0x7e>
 800da02:	7bfb      	ldrb	r3, [r7, #15]
 800da04:	2b2e      	cmp	r3, #46	; 0x2e
 800da06:	d00e      	beq.n	800da26 <dir_read+0x7e>
 800da08:	7bbb      	ldrb	r3, [r7, #14]
 800da0a:	2b0f      	cmp	r3, #15
 800da0c:	d00b      	beq.n	800da26 <dir_read+0x7e>
 800da0e:	7bbb      	ldrb	r3, [r7, #14]
 800da10:	f023 0320 	bic.w	r3, r3, #32
 800da14:	2b08      	cmp	r3, #8
 800da16:	bf0c      	ite	eq
 800da18:	2301      	moveq	r3, #1
 800da1a:	2300      	movne	r3, #0
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	461a      	mov	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	4293      	cmp	r3, r2
 800da24:	d00f      	beq.n	800da46 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800da26:	2100      	movs	r1, #0
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f7ff fe72 	bl	800d712 <dir_next>
 800da2e:	4603      	mov	r3, r0
 800da30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800da32:	7dfb      	ldrb	r3, [r7, #23]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d108      	bne.n	800da4a <dir_read+0xa2>
	while (dp->sect) {
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	69db      	ldr	r3, [r3, #28]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1be      	bne.n	800d9be <dir_read+0x16>
 800da40:	e004      	b.n	800da4c <dir_read+0xa4>
		if (res != FR_OK) break;
 800da42:	bf00      	nop
 800da44:	e002      	b.n	800da4c <dir_read+0xa4>
				break;
 800da46:	bf00      	nop
 800da48:	e000      	b.n	800da4c <dir_read+0xa4>
		if (res != FR_OK) break;
 800da4a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800da4c:	7dfb      	ldrb	r3, [r7, #23]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <dir_read+0xb0>
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	61da      	str	r2, [r3, #28]
	return res;
 800da58:	7dfb      	ldrb	r3, [r7, #23]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3718      	adds	r7, #24
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}

0800da62 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800da62:	b580      	push	{r7, lr}
 800da64:	b086      	sub	sp, #24
 800da66:	af00      	add	r7, sp, #0
 800da68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800da70:	2100      	movs	r1, #0
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff fdd2 	bl	800d61c <dir_sdi>
 800da78:	4603      	mov	r3, r0
 800da7a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800da7c:	7dfb      	ldrb	r3, [r7, #23]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <dir_find+0x24>
 800da82:	7dfb      	ldrb	r3, [r7, #23]
 800da84:	e03e      	b.n	800db04 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	69db      	ldr	r3, [r3, #28]
 800da8a:	4619      	mov	r1, r3
 800da8c:	6938      	ldr	r0, [r7, #16]
 800da8e:	f7ff fa45 	bl	800cf1c <move_window>
 800da92:	4603      	mov	r3, r0
 800da94:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d12f      	bne.n	800dafc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6a1b      	ldr	r3, [r3, #32]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800daa4:	7bfb      	ldrb	r3, [r7, #15]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d102      	bne.n	800dab0 <dir_find+0x4e>
 800daaa:	2304      	movs	r3, #4
 800daac:	75fb      	strb	r3, [r7, #23]
 800daae:	e028      	b.n	800db02 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6a1b      	ldr	r3, [r3, #32]
 800dab4:	330b      	adds	r3, #11
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dabc:	b2da      	uxtb	r2, r3
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6a1b      	ldr	r3, [r3, #32]
 800dac6:	330b      	adds	r3, #11
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	f003 0308 	and.w	r3, r3, #8
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d10a      	bne.n	800dae8 <dir_find+0x86>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6a18      	ldr	r0, [r3, #32]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	3324      	adds	r3, #36	; 0x24
 800dada:	220b      	movs	r2, #11
 800dadc:	4619      	mov	r1, r3
 800dade:	f7ff f82b 	bl	800cb38 <mem_cmp>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d00b      	beq.n	800db00 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dae8:	2100      	movs	r1, #0
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7ff fe11 	bl	800d712 <dir_next>
 800daf0:	4603      	mov	r3, r0
 800daf2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800daf4:	7dfb      	ldrb	r3, [r7, #23]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d0c5      	beq.n	800da86 <dir_find+0x24>
 800dafa:	e002      	b.n	800db02 <dir_find+0xa0>
		if (res != FR_OK) break;
 800dafc:	bf00      	nop
 800dafe:	e000      	b.n	800db02 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800db00:	bf00      	nop

	return res;
 800db02:	7dfb      	ldrb	r3, [r7, #23]
}
 800db04:	4618      	mov	r0, r3
 800db06:	3718      	adds	r7, #24
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800db1a:	2101      	movs	r1, #1
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7ff febd 	bl	800d89c <dir_alloc>
 800db22:	4603      	mov	r3, r0
 800db24:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800db26:	7bfb      	ldrb	r3, [r7, #15]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d11c      	bne.n	800db66 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	69db      	ldr	r3, [r3, #28]
 800db30:	4619      	mov	r1, r3
 800db32:	68b8      	ldr	r0, [r7, #8]
 800db34:	f7ff f9f2 	bl	800cf1c <move_window>
 800db38:	4603      	mov	r3, r0
 800db3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800db3c:	7bfb      	ldrb	r3, [r7, #15]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d111      	bne.n	800db66 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6a1b      	ldr	r3, [r3, #32]
 800db46:	2220      	movs	r2, #32
 800db48:	2100      	movs	r1, #0
 800db4a:	4618      	mov	r0, r3
 800db4c:	f7fe ffd9 	bl	800cb02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6a18      	ldr	r0, [r3, #32]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	3324      	adds	r3, #36	; 0x24
 800db58:	220b      	movs	r2, #11
 800db5a:	4619      	mov	r1, r3
 800db5c:	f7fe ffb0 	bl	800cac0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	2201      	movs	r2, #1
 800db64:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800db66:	7bfb      	ldrb	r3, [r7, #15]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	2200      	movs	r2, #0
 800db7e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	69db      	ldr	r3, [r3, #28]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d04e      	beq.n	800dc26 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800db88:	2300      	movs	r3, #0
 800db8a:	613b      	str	r3, [r7, #16]
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800db90:	e021      	b.n	800dbd6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a1a      	ldr	r2, [r3, #32]
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	1c59      	adds	r1, r3, #1
 800db9a:	6179      	str	r1, [r7, #20]
 800db9c:	4413      	add	r3, r2
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800dba2:	7bfb      	ldrb	r3, [r7, #15]
 800dba4:	2b20      	cmp	r3, #32
 800dba6:	d100      	bne.n	800dbaa <get_fileinfo+0x3a>
 800dba8:	e015      	b.n	800dbd6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	2b05      	cmp	r3, #5
 800dbae:	d101      	bne.n	800dbb4 <get_fileinfo+0x44>
 800dbb0:	23e5      	movs	r3, #229	; 0xe5
 800dbb2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	2b09      	cmp	r3, #9
 800dbb8:	d106      	bne.n	800dbc8 <get_fileinfo+0x58>
 800dbba:	693b      	ldr	r3, [r7, #16]
 800dbbc:	1c5a      	adds	r2, r3, #1
 800dbbe:	613a      	str	r2, [r7, #16]
 800dbc0:	683a      	ldr	r2, [r7, #0]
 800dbc2:	4413      	add	r3, r2
 800dbc4:	222e      	movs	r2, #46	; 0x2e
 800dbc6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	1c5a      	adds	r2, r3, #1
 800dbcc:	613a      	str	r2, [r7, #16]
 800dbce:	683a      	ldr	r2, [r7, #0]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	7bfa      	ldrb	r2, [r7, #15]
 800dbd4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2b0a      	cmp	r3, #10
 800dbda:	d9da      	bls.n	800db92 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	3309      	adds	r3, #9
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a1b      	ldr	r3, [r3, #32]
 800dbec:	7ada      	ldrb	r2, [r3, #11]
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a1b      	ldr	r3, [r3, #32]
 800dbf6:	331c      	adds	r3, #28
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f7fe fef7 	bl	800c9ec <ld_dword>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6a1b      	ldr	r3, [r3, #32]
 800dc08:	3316      	adds	r3, #22
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe feee 	bl	800c9ec <ld_dword>
 800dc10:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	80da      	strh	r2, [r3, #6]
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	0c1b      	lsrs	r3, r3, #16
 800dc1e:	b29a      	uxth	r2, r3
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	809a      	strh	r2, [r3, #4]
 800dc24:	e000      	b.n	800dc28 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800dc26:	bf00      	nop
}
 800dc28:	3718      	adds	r7, #24
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}
	...

0800dc30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b088      	sub	sp, #32
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	60fb      	str	r3, [r7, #12]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	3324      	adds	r3, #36	; 0x24
 800dc44:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dc46:	220b      	movs	r2, #11
 800dc48:	2120      	movs	r1, #32
 800dc4a:	68b8      	ldr	r0, [r7, #8]
 800dc4c:	f7fe ff59 	bl	800cb02 <mem_set>
	si = i = 0; ni = 8;
 800dc50:	2300      	movs	r3, #0
 800dc52:	613b      	str	r3, [r7, #16]
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	61fb      	str	r3, [r7, #28]
 800dc58:	2308      	movs	r3, #8
 800dc5a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	1c5a      	adds	r2, r3, #1
 800dc60:	61fa      	str	r2, [r7, #28]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	4413      	add	r3, r2
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dc6a:	7efb      	ldrb	r3, [r7, #27]
 800dc6c:	2b20      	cmp	r3, #32
 800dc6e:	d94e      	bls.n	800dd0e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dc70:	7efb      	ldrb	r3, [r7, #27]
 800dc72:	2b2f      	cmp	r3, #47	; 0x2f
 800dc74:	d006      	beq.n	800dc84 <create_name+0x54>
 800dc76:	7efb      	ldrb	r3, [r7, #27]
 800dc78:	2b5c      	cmp	r3, #92	; 0x5c
 800dc7a:	d110      	bne.n	800dc9e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dc7c:	e002      	b.n	800dc84 <create_name+0x54>
 800dc7e:	69fb      	ldr	r3, [r7, #28]
 800dc80:	3301      	adds	r3, #1
 800dc82:	61fb      	str	r3, [r7, #28]
 800dc84:	68fa      	ldr	r2, [r7, #12]
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	4413      	add	r3, r2
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2b2f      	cmp	r3, #47	; 0x2f
 800dc8e:	d0f6      	beq.n	800dc7e <create_name+0x4e>
 800dc90:	68fa      	ldr	r2, [r7, #12]
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	4413      	add	r3, r2
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2b5c      	cmp	r3, #92	; 0x5c
 800dc9a:	d0f0      	beq.n	800dc7e <create_name+0x4e>
			break;
 800dc9c:	e038      	b.n	800dd10 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dc9e:	7efb      	ldrb	r3, [r7, #27]
 800dca0:	2b2e      	cmp	r3, #46	; 0x2e
 800dca2:	d003      	beq.n	800dcac <create_name+0x7c>
 800dca4:	693a      	ldr	r2, [r7, #16]
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d30c      	bcc.n	800dcc6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	2b0b      	cmp	r3, #11
 800dcb0:	d002      	beq.n	800dcb8 <create_name+0x88>
 800dcb2:	7efb      	ldrb	r3, [r7, #27]
 800dcb4:	2b2e      	cmp	r3, #46	; 0x2e
 800dcb6:	d001      	beq.n	800dcbc <create_name+0x8c>
 800dcb8:	2306      	movs	r3, #6
 800dcba:	e044      	b.n	800dd46 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dcbc:	2308      	movs	r3, #8
 800dcbe:	613b      	str	r3, [r7, #16]
 800dcc0:	230b      	movs	r3, #11
 800dcc2:	617b      	str	r3, [r7, #20]
			continue;
 800dcc4:	e022      	b.n	800dd0c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dcc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	da04      	bge.n	800dcd8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dcce:	7efb      	ldrb	r3, [r7, #27]
 800dcd0:	3b80      	subs	r3, #128	; 0x80
 800dcd2:	4a1f      	ldr	r2, [pc, #124]	; (800dd50 <create_name+0x120>)
 800dcd4:	5cd3      	ldrb	r3, [r2, r3]
 800dcd6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dcd8:	7efb      	ldrb	r3, [r7, #27]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	481d      	ldr	r0, [pc, #116]	; (800dd54 <create_name+0x124>)
 800dcde:	f7fe ff52 	bl	800cb86 <chk_chr>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d001      	beq.n	800dcec <create_name+0xbc>
 800dce8:	2306      	movs	r3, #6
 800dcea:	e02c      	b.n	800dd46 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dcec:	7efb      	ldrb	r3, [r7, #27]
 800dcee:	2b60      	cmp	r3, #96	; 0x60
 800dcf0:	d905      	bls.n	800dcfe <create_name+0xce>
 800dcf2:	7efb      	ldrb	r3, [r7, #27]
 800dcf4:	2b7a      	cmp	r3, #122	; 0x7a
 800dcf6:	d802      	bhi.n	800dcfe <create_name+0xce>
 800dcf8:	7efb      	ldrb	r3, [r7, #27]
 800dcfa:	3b20      	subs	r3, #32
 800dcfc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	1c5a      	adds	r2, r3, #1
 800dd02:	613a      	str	r2, [r7, #16]
 800dd04:	68ba      	ldr	r2, [r7, #8]
 800dd06:	4413      	add	r3, r2
 800dd08:	7efa      	ldrb	r2, [r7, #27]
 800dd0a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dd0c:	e7a6      	b.n	800dc5c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dd0e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	441a      	add	r2, r3
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <create_name+0xf4>
 800dd20:	2306      	movs	r3, #6
 800dd22:	e010      	b.n	800dd46 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2be5      	cmp	r3, #229	; 0xe5
 800dd2a:	d102      	bne.n	800dd32 <create_name+0x102>
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	2205      	movs	r2, #5
 800dd30:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dd32:	7efb      	ldrb	r3, [r7, #27]
 800dd34:	2b20      	cmp	r3, #32
 800dd36:	d801      	bhi.n	800dd3c <create_name+0x10c>
 800dd38:	2204      	movs	r2, #4
 800dd3a:	e000      	b.n	800dd3e <create_name+0x10e>
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	330b      	adds	r3, #11
 800dd42:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dd44:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3720      	adds	r7, #32
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	080161b0 	.word	0x080161b0
 800dd54:	080160f0 	.word	0x080160f0

0800dd58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd6c:	e002      	b.n	800dd74 <follow_path+0x1c>
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	3301      	adds	r3, #1
 800dd72:	603b      	str	r3, [r7, #0]
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	2b2f      	cmp	r3, #47	; 0x2f
 800dd7a:	d0f8      	beq.n	800dd6e <follow_path+0x16>
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	2b5c      	cmp	r3, #92	; 0x5c
 800dd82:	d0f4      	beq.n	800dd6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd84:	693b      	ldr	r3, [r7, #16]
 800dd86:	2200      	movs	r2, #0
 800dd88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	2b1f      	cmp	r3, #31
 800dd90:	d80a      	bhi.n	800dda8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2280      	movs	r2, #128	; 0x80
 800dd96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f7ff fc3d 	bl	800d61c <dir_sdi>
 800dda2:	4603      	mov	r3, r0
 800dda4:	75fb      	strb	r3, [r7, #23]
 800dda6:	e043      	b.n	800de30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dda8:	463b      	mov	r3, r7
 800ddaa:	4619      	mov	r1, r3
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7ff ff3f 	bl	800dc30 <create_name>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d134      	bne.n	800de26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fe50 	bl	800da62 <dir_find>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ddcc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d00a      	beq.n	800ddea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
 800ddd6:	2b04      	cmp	r3, #4
 800ddd8:	d127      	bne.n	800de2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ddda:	7afb      	ldrb	r3, [r7, #11]
 800dddc:	f003 0304 	and.w	r3, r3, #4
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d122      	bne.n	800de2a <follow_path+0xd2>
 800dde4:	2305      	movs	r3, #5
 800dde6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dde8:	e01f      	b.n	800de2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ddea:	7afb      	ldrb	r3, [r7, #11]
 800ddec:	f003 0304 	and.w	r3, r3, #4
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d11c      	bne.n	800de2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	799b      	ldrb	r3, [r3, #6]
 800ddf8:	f003 0310 	and.w	r3, r3, #16
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d102      	bne.n	800de06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800de00:	2305      	movs	r3, #5
 800de02:	75fb      	strb	r3, [r7, #23]
 800de04:	e014      	b.n	800de30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	695b      	ldr	r3, [r3, #20]
 800de10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de14:	4413      	add	r3, r2
 800de16:	4619      	mov	r1, r3
 800de18:	68f8      	ldr	r0, [r7, #12]
 800de1a:	f7ff fd86 	bl	800d92a <ld_clust>
 800de1e:	4602      	mov	r2, r0
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800de24:	e7c0      	b.n	800dda8 <follow_path+0x50>
			if (res != FR_OK) break;
 800de26:	bf00      	nop
 800de28:	e002      	b.n	800de30 <follow_path+0xd8>
				break;
 800de2a:	bf00      	nop
 800de2c:	e000      	b.n	800de30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de2e:	bf00      	nop
			}
		}
	}

	return res;
 800de30:	7dfb      	ldrb	r3, [r7, #23]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3718      	adds	r7, #24
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b087      	sub	sp, #28
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de42:	f04f 33ff 	mov.w	r3, #4294967295
 800de46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d031      	beq.n	800deb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	617b      	str	r3, [r7, #20]
 800de56:	e002      	b.n	800de5e <get_ldnumber+0x24>
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	3301      	adds	r3, #1
 800de5c:	617b      	str	r3, [r7, #20]
 800de5e:	697b      	ldr	r3, [r7, #20]
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2b20      	cmp	r3, #32
 800de64:	d903      	bls.n	800de6e <get_ldnumber+0x34>
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	2b3a      	cmp	r3, #58	; 0x3a
 800de6c:	d1f4      	bne.n	800de58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	2b3a      	cmp	r3, #58	; 0x3a
 800de74:	d11c      	bne.n	800deb0 <get_ldnumber+0x76>
			tp = *path;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	1c5a      	adds	r2, r3, #1
 800de80:	60fa      	str	r2, [r7, #12]
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	3b30      	subs	r3, #48	; 0x30
 800de86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	2b09      	cmp	r3, #9
 800de8c:	d80e      	bhi.n	800deac <get_ldnumber+0x72>
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	429a      	cmp	r2, r3
 800de94:	d10a      	bne.n	800deac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d107      	bne.n	800deac <get_ldnumber+0x72>
					vol = (int)i;
 800de9c:	68bb      	ldr	r3, [r7, #8]
 800de9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	3301      	adds	r3, #1
 800dea4:	617b      	str	r3, [r7, #20]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	697a      	ldr	r2, [r7, #20]
 800deaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	e002      	b.n	800deb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800deb0:	2300      	movs	r3, #0
 800deb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800deb4:	693b      	ldr	r3, [r7, #16]
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	371c      	adds	r7, #28
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
	...

0800dec4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	b082      	sub	sp, #8
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	2200      	movs	r2, #0
 800ded2:	70da      	strb	r2, [r3, #3]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f04f 32ff 	mov.w	r2, #4294967295
 800deda:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dedc:	6839      	ldr	r1, [r7, #0]
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7ff f81c 	bl	800cf1c <move_window>
 800dee4:	4603      	mov	r3, r0
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d001      	beq.n	800deee <check_fs+0x2a>
 800deea:	2304      	movs	r3, #4
 800deec:	e038      	b.n	800df60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	3330      	adds	r3, #48	; 0x30
 800def2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800def6:	4618      	mov	r0, r3
 800def8:	f7fe fd60 	bl	800c9bc <ld_word>
 800defc:	4603      	mov	r3, r0
 800defe:	461a      	mov	r2, r3
 800df00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800df04:	429a      	cmp	r2, r3
 800df06:	d001      	beq.n	800df0c <check_fs+0x48>
 800df08:	2303      	movs	r3, #3
 800df0a:	e029      	b.n	800df60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df12:	2be9      	cmp	r3, #233	; 0xe9
 800df14:	d009      	beq.n	800df2a <check_fs+0x66>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df1c:	2beb      	cmp	r3, #235	; 0xeb
 800df1e:	d11e      	bne.n	800df5e <check_fs+0x9a>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800df26:	2b90      	cmp	r3, #144	; 0x90
 800df28:	d119      	bne.n	800df5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	3330      	adds	r3, #48	; 0x30
 800df2e:	3336      	adds	r3, #54	; 0x36
 800df30:	4618      	mov	r0, r3
 800df32:	f7fe fd5b 	bl	800c9ec <ld_dword>
 800df36:	4603      	mov	r3, r0
 800df38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800df3c:	4a0a      	ldr	r2, [pc, #40]	; (800df68 <check_fs+0xa4>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d101      	bne.n	800df46 <check_fs+0x82>
 800df42:	2300      	movs	r3, #0
 800df44:	e00c      	b.n	800df60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	3330      	adds	r3, #48	; 0x30
 800df4a:	3352      	adds	r3, #82	; 0x52
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7fe fd4d 	bl	800c9ec <ld_dword>
 800df52:	4603      	mov	r3, r0
 800df54:	4a05      	ldr	r2, [pc, #20]	; (800df6c <check_fs+0xa8>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d101      	bne.n	800df5e <check_fs+0x9a>
 800df5a:	2300      	movs	r3, #0
 800df5c:	e000      	b.n	800df60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df5e:	2302      	movs	r3, #2
}
 800df60:	4618      	mov	r0, r3
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	00544146 	.word	0x00544146
 800df6c:	33544146 	.word	0x33544146

0800df70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b096      	sub	sp, #88	; 0x58
 800df74:	af00      	add	r7, sp, #0
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	4613      	mov	r3, r2
 800df7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f7ff ff58 	bl	800de3a <get_ldnumber>
 800df8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df8e:	2b00      	cmp	r3, #0
 800df90:	da01      	bge.n	800df96 <find_volume+0x26>
 800df92:	230b      	movs	r3, #11
 800df94:	e22e      	b.n	800e3f4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df96:	4aa8      	ldr	r2, [pc, #672]	; (800e238 <find_volume+0x2c8>)
 800df98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <find_volume+0x3a>
 800dfa6:	230c      	movs	r3, #12
 800dfa8:	e224      	b.n	800e3f4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dfaa:	68bb      	ldr	r3, [r7, #8]
 800dfac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dfb0:	79fb      	ldrb	r3, [r7, #7]
 800dfb2:	f023 0301 	bic.w	r3, r3, #1
 800dfb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d01a      	beq.n	800dff6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	785b      	ldrb	r3, [r3, #1]
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fe fc5b 	bl	800c880 <disk_status>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dfd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfd4:	f003 0301 	and.w	r3, r3, #1
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d10c      	bne.n	800dff6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dfdc:	79fb      	ldrb	r3, [r7, #7]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d007      	beq.n	800dff2 <find_volume+0x82>
 800dfe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dfe6:	f003 0304 	and.w	r3, r3, #4
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dfee:	230a      	movs	r3, #10
 800dff0:	e200      	b.n	800e3f4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800dff2:	2300      	movs	r3, #0
 800dff4:	e1fe      	b.n	800e3f4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff8:	2200      	movs	r2, #0
 800dffa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dffe:	b2da      	uxtb	r2, r3
 800e000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e002:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e006:	785b      	ldrb	r3, [r3, #1]
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fe fc53 	bl	800c8b4 <disk_initialize>
 800e00e:	4603      	mov	r3, r0
 800e010:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e014:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e018:	f003 0301 	and.w	r3, r3, #1
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e020:	2303      	movs	r3, #3
 800e022:	e1e7      	b.n	800e3f4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e024:	79fb      	ldrb	r3, [r7, #7]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d007      	beq.n	800e03a <find_volume+0xca>
 800e02a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e02e:	f003 0304 	and.w	r3, r3, #4
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e036:	230a      	movs	r3, #10
 800e038:	e1dc      	b.n	800e3f4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e03a:	2300      	movs	r3, #0
 800e03c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e03e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e040:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e042:	f7ff ff3f 	bl	800dec4 <check_fs>
 800e046:	4603      	mov	r3, r0
 800e048:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e04c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e050:	2b02      	cmp	r3, #2
 800e052:	d14b      	bne.n	800e0ec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e054:	2300      	movs	r3, #0
 800e056:	643b      	str	r3, [r7, #64]	; 0x40
 800e058:	e01f      	b.n	800e09a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e062:	011b      	lsls	r3, r3, #4
 800e064:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800e068:	4413      	add	r3, r2
 800e06a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	3304      	adds	r3, #4
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d006      	beq.n	800e084 <find_volume+0x114>
 800e076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e078:	3308      	adds	r3, #8
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fcb6 	bl	800c9ec <ld_dword>
 800e080:	4602      	mov	r2, r0
 800e082:	e000      	b.n	800e086 <find_volume+0x116>
 800e084:	2200      	movs	r2, #0
 800e086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800e08e:	440b      	add	r3, r1
 800e090:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e096:	3301      	adds	r3, #1
 800e098:	643b      	str	r3, [r7, #64]	; 0x40
 800e09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e09c:	2b03      	cmp	r3, #3
 800e09e:	d9dc      	bls.n	800e05a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800e0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <find_volume+0x140>
 800e0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ac:	3b01      	subs	r3, #1
 800e0ae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e0be:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d005      	beq.n	800e0d2 <find_volume+0x162>
 800e0c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e0c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e0ca:	f7ff fefb 	bl	800dec4 <check_fs>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	e000      	b.n	800e0d4 <find_volume+0x164>
 800e0d2:	2303      	movs	r3, #3
 800e0d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e0d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d905      	bls.n	800e0ec <find_volume+0x17c>
 800e0e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	643b      	str	r3, [r7, #64]	; 0x40
 800e0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0e8:	2b03      	cmp	r3, #3
 800e0ea:	d9e1      	bls.n	800e0b0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e0ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0f0:	2b04      	cmp	r3, #4
 800e0f2:	d101      	bne.n	800e0f8 <find_volume+0x188>
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e17d      	b.n	800e3f4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d901      	bls.n	800e104 <find_volume+0x194>
 800e100:	230d      	movs	r3, #13
 800e102:	e177      	b.n	800e3f4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	3330      	adds	r3, #48	; 0x30
 800e108:	330b      	adds	r3, #11
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe fc56 	bl	800c9bc <ld_word>
 800e110:	4603      	mov	r3, r0
 800e112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e116:	d001      	beq.n	800e11c <find_volume+0x1ac>
 800e118:	230d      	movs	r3, #13
 800e11a:	e16b      	b.n	800e3f4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11e:	3330      	adds	r3, #48	; 0x30
 800e120:	3316      	adds	r3, #22
 800e122:	4618      	mov	r0, r3
 800e124:	f7fe fc4a 	bl	800c9bc <ld_word>
 800e128:	4603      	mov	r3, r0
 800e12a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e12c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d106      	bne.n	800e140 <find_volume+0x1d0>
 800e132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e134:	3330      	adds	r3, #48	; 0x30
 800e136:	3324      	adds	r3, #36	; 0x24
 800e138:	4618      	mov	r0, r3
 800e13a:	f7fe fc57 	bl	800c9ec <ld_dword>
 800e13e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800e140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e142:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e144:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e148:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800e14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e152:	789b      	ldrb	r3, [r3, #2]
 800e154:	2b01      	cmp	r3, #1
 800e156:	d005      	beq.n	800e164 <find_volume+0x1f4>
 800e158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15a:	789b      	ldrb	r3, [r3, #2]
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d001      	beq.n	800e164 <find_volume+0x1f4>
 800e160:	230d      	movs	r3, #13
 800e162:	e147      	b.n	800e3f4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e166:	789b      	ldrb	r3, [r3, #2]
 800e168:	461a      	mov	r2, r3
 800e16a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e16c:	fb02 f303 	mul.w	r3, r2, r3
 800e170:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e178:	b29a      	uxth	r2, r3
 800e17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e180:	895b      	ldrh	r3, [r3, #10]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d008      	beq.n	800e198 <find_volume+0x228>
 800e186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e188:	895b      	ldrh	r3, [r3, #10]
 800e18a:	461a      	mov	r2, r3
 800e18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18e:	895b      	ldrh	r3, [r3, #10]
 800e190:	3b01      	subs	r3, #1
 800e192:	4013      	ands	r3, r2
 800e194:	2b00      	cmp	r3, #0
 800e196:	d001      	beq.n	800e19c <find_volume+0x22c>
 800e198:	230d      	movs	r3, #13
 800e19a:	e12b      	b.n	800e3f4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	3330      	adds	r3, #48	; 0x30
 800e1a0:	3311      	adds	r3, #17
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe fc0a 	bl	800c9bc <ld_word>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	891b      	ldrh	r3, [r3, #8]
 800e1b4:	f003 030f 	and.w	r3, r3, #15
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d001      	beq.n	800e1c2 <find_volume+0x252>
 800e1be:	230d      	movs	r3, #13
 800e1c0:	e118      	b.n	800e3f4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c4:	3330      	adds	r3, #48	; 0x30
 800e1c6:	3313      	adds	r3, #19
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7fe fbf7 	bl	800c9bc <ld_word>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d106      	bne.n	800e1e6 <find_volume+0x276>
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1da:	3330      	adds	r3, #48	; 0x30
 800e1dc:	3320      	adds	r3, #32
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fc04 	bl	800c9ec <ld_dword>
 800e1e4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e8:	3330      	adds	r3, #48	; 0x30
 800e1ea:	330e      	adds	r3, #14
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fe fbe5 	bl	800c9bc <ld_word>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d101      	bne.n	800e200 <find_volume+0x290>
 800e1fc:	230d      	movs	r3, #13
 800e1fe:	e0f9      	b.n	800e3f4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e200:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e204:	4413      	add	r3, r2
 800e206:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e208:	8912      	ldrh	r2, [r2, #8]
 800e20a:	0912      	lsrs	r2, r2, #4
 800e20c:	b292      	uxth	r2, r2
 800e20e:	4413      	add	r3, r2
 800e210:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e216:	429a      	cmp	r2, r3
 800e218:	d201      	bcs.n	800e21e <find_volume+0x2ae>
 800e21a:	230d      	movs	r3, #13
 800e21c:	e0ea      	b.n	800e3f4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e21e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	1ad3      	subs	r3, r2, r3
 800e224:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e226:	8952      	ldrh	r2, [r2, #10]
 800e228:	fbb3 f3f2 	udiv	r3, r3, r2
 800e22c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e230:	2b00      	cmp	r3, #0
 800e232:	d103      	bne.n	800e23c <find_volume+0x2cc>
 800e234:	230d      	movs	r3, #13
 800e236:	e0dd      	b.n	800e3f4 <find_volume+0x484>
 800e238:	200004c0 	.word	0x200004c0
		fmt = FS_FAT32;
 800e23c:	2303      	movs	r3, #3
 800e23e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e244:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e248:	4293      	cmp	r3, r2
 800e24a:	d802      	bhi.n	800e252 <find_volume+0x2e2>
 800e24c:	2302      	movs	r3, #2
 800e24e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e254:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e258:	4293      	cmp	r3, r2
 800e25a:	d802      	bhi.n	800e262 <find_volume+0x2f2>
 800e25c:	2301      	movs	r3, #1
 800e25e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	1c9a      	adds	r2, r3, #2
 800e266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e268:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e26e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e270:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e274:	441a      	add	r2, r3
 800e276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e278:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e27a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27e:	441a      	add	r2, r3
 800e280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e282:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800e284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e288:	2b03      	cmp	r3, #3
 800e28a:	d11e      	bne.n	800e2ca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e28e:	3330      	adds	r3, #48	; 0x30
 800e290:	332a      	adds	r3, #42	; 0x2a
 800e292:	4618      	mov	r0, r3
 800e294:	f7fe fb92 	bl	800c9bc <ld_word>
 800e298:	4603      	mov	r3, r0
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <find_volume+0x332>
 800e29e:	230d      	movs	r3, #13
 800e2a0:	e0a8      	b.n	800e3f4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2a4:	891b      	ldrh	r3, [r3, #8]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d001      	beq.n	800e2ae <find_volume+0x33e>
 800e2aa:	230d      	movs	r3, #13
 800e2ac:	e0a2      	b.n	800e3f4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e2ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b0:	3330      	adds	r3, #48	; 0x30
 800e2b2:	332c      	adds	r3, #44	; 0x2c
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fe fb99 	bl	800c9ec <ld_dword>
 800e2ba:	4602      	mov	r2, r0
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2be:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c2:	695b      	ldr	r3, [r3, #20]
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e2c8:	e01f      	b.n	800e30a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	891b      	ldrh	r3, [r3, #8]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d101      	bne.n	800e2d6 <find_volume+0x366>
 800e2d2:	230d      	movs	r3, #13
 800e2d4:	e08e      	b.n	800e3f4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d8:	6a1a      	ldr	r2, [r3, #32]
 800e2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2dc:	441a      	add	r2, r3
 800e2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d103      	bne.n	800e2f2 <find_volume+0x382>
 800e2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ec:	695b      	ldr	r3, [r3, #20]
 800e2ee:	005b      	lsls	r3, r3, #1
 800e2f0:	e00a      	b.n	800e308 <find_volume+0x398>
 800e2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f4:	695a      	ldr	r2, [r3, #20]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	4413      	add	r3, r2
 800e2fc:	085a      	lsrs	r2, r3, #1
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e300:	695b      	ldr	r3, [r3, #20]
 800e302:	f003 0301 	and.w	r3, r3, #1
 800e306:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e308:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30c:	699a      	ldr	r2, [r3, #24]
 800e30e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e310:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e314:	0a5b      	lsrs	r3, r3, #9
 800e316:	429a      	cmp	r2, r3
 800e318:	d201      	bcs.n	800e31e <find_volume+0x3ae>
 800e31a:	230d      	movs	r3, #13
 800e31c:	e06a      	b.n	800e3f4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e320:	f04f 32ff 	mov.w	r2, #4294967295
 800e324:	611a      	str	r2, [r3, #16]
 800e326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e328:	691a      	ldr	r2, [r3, #16]
 800e32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e32c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e330:	2280      	movs	r2, #128	; 0x80
 800e332:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e334:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e338:	2b03      	cmp	r3, #3
 800e33a:	d149      	bne.n	800e3d0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e33e:	3330      	adds	r3, #48	; 0x30
 800e340:	3330      	adds	r3, #48	; 0x30
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe fb3a 	bl	800c9bc <ld_word>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d140      	bne.n	800e3d0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e34e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e350:	3301      	adds	r3, #1
 800e352:	4619      	mov	r1, r3
 800e354:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e356:	f7fe fde1 	bl	800cf1c <move_window>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d137      	bne.n	800e3d0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e362:	2200      	movs	r2, #0
 800e364:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e368:	3330      	adds	r3, #48	; 0x30
 800e36a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e36e:	4618      	mov	r0, r3
 800e370:	f7fe fb24 	bl	800c9bc <ld_word>
 800e374:	4603      	mov	r3, r0
 800e376:	461a      	mov	r2, r3
 800e378:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d127      	bne.n	800e3d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e382:	3330      	adds	r3, #48	; 0x30
 800e384:	4618      	mov	r0, r3
 800e386:	f7fe fb31 	bl	800c9ec <ld_dword>
 800e38a:	4603      	mov	r3, r0
 800e38c:	4a1b      	ldr	r2, [pc, #108]	; (800e3fc <find_volume+0x48c>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d11e      	bne.n	800e3d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e394:	3330      	adds	r3, #48	; 0x30
 800e396:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e39a:	4618      	mov	r0, r3
 800e39c:	f7fe fb26 	bl	800c9ec <ld_dword>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	4a17      	ldr	r2, [pc, #92]	; (800e400 <find_volume+0x490>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d113      	bne.n	800e3d0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3aa:	3330      	adds	r3, #48	; 0x30
 800e3ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7fe fb1b 	bl	800c9ec <ld_dword>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ba:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3be:	3330      	adds	r3, #48	; 0x30
 800e3c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fe fb11 	bl	800c9ec <ld_dword>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ce:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e3d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3d8:	4b0a      	ldr	r3, [pc, #40]	; (800e404 <find_volume+0x494>)
 800e3da:	881b      	ldrh	r3, [r3, #0]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	4b08      	ldr	r3, [pc, #32]	; (800e404 <find_volume+0x494>)
 800e3e2:	801a      	strh	r2, [r3, #0]
 800e3e4:	4b07      	ldr	r3, [pc, #28]	; (800e404 <find_volume+0x494>)
 800e3e6:	881a      	ldrh	r2, [r3, #0]
 800e3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e3ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e3ee:	f7fe fd2d 	bl	800ce4c <clear_lock>
#endif
	return FR_OK;
 800e3f2:	2300      	movs	r3, #0
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3758      	adds	r7, #88	; 0x58
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	41615252 	.word	0x41615252
 800e400:	61417272 	.word	0x61417272
 800e404:	200004c4 	.word	0x200004c4

0800e408 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e412:	2309      	movs	r3, #9
 800e414:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d01c      	beq.n	800e456 <validate+0x4e>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d018      	beq.n	800e456 <validate+0x4e>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d013      	beq.n	800e456 <validate+0x4e>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	889a      	ldrh	r2, [r3, #4]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	88db      	ldrh	r3, [r3, #6]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d10c      	bne.n	800e456 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	785b      	ldrb	r3, [r3, #1]
 800e442:	4618      	mov	r0, r3
 800e444:	f7fe fa1c 	bl	800c880 <disk_status>
 800e448:	4603      	mov	r3, r0
 800e44a:	f003 0301 	and.w	r3, r3, #1
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d101      	bne.n	800e456 <validate+0x4e>
			res = FR_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e456:	7bfb      	ldrb	r3, [r7, #15]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d102      	bne.n	800e462 <validate+0x5a>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	e000      	b.n	800e464 <validate+0x5c>
 800e462:	2300      	movs	r3, #0
 800e464:	683a      	ldr	r2, [r7, #0]
 800e466:	6013      	str	r3, [r2, #0]
	return res;
 800e468:	7bfb      	ldrb	r3, [r7, #15]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3710      	adds	r7, #16
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
	...

0800e474 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b088      	sub	sp, #32
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	4613      	mov	r3, r2
 800e480:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e486:	f107 0310 	add.w	r3, r7, #16
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7ff fcd5 	bl	800de3a <get_ldnumber>
 800e490:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	2b00      	cmp	r3, #0
 800e496:	da01      	bge.n	800e49c <f_mount+0x28>
 800e498:	230b      	movs	r3, #11
 800e49a:	e02b      	b.n	800e4f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e49c:	4a17      	ldr	r2, [pc, #92]	; (800e4fc <f_mount+0x88>)
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d005      	beq.n	800e4b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e4ac:	69b8      	ldr	r0, [r7, #24]
 800e4ae:	f7fe fccd 	bl	800ce4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d002      	beq.n	800e4c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	490d      	ldr	r1, [pc, #52]	; (800e4fc <f_mount+0x88>)
 800e4c8:	69fb      	ldr	r3, [r7, #28]
 800e4ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d002      	beq.n	800e4da <f_mount+0x66>
 800e4d4:	79fb      	ldrb	r3, [r7, #7]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d001      	beq.n	800e4de <f_mount+0x6a>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e00a      	b.n	800e4f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e4de:	f107 010c 	add.w	r1, r7, #12
 800e4e2:	f107 0308 	add.w	r3, r7, #8
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7ff fd41 	bl	800df70 <find_volume>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3720      	adds	r7, #32
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	200004c0 	.word	0x200004c0

0800e500 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b098      	sub	sp, #96	; 0x60
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	4613      	mov	r3, r2
 800e50c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d101      	bne.n	800e518 <f_open+0x18>
 800e514:	2309      	movs	r3, #9
 800e516:	e1ad      	b.n	800e874 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e518:	79fb      	ldrb	r3, [r7, #7]
 800e51a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e51e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e520:	79fa      	ldrb	r2, [r7, #7]
 800e522:	f107 0110 	add.w	r1, r7, #16
 800e526:	f107 0308 	add.w	r3, r7, #8
 800e52a:	4618      	mov	r0, r3
 800e52c:	f7ff fd20 	bl	800df70 <find_volume>
 800e530:	4603      	mov	r3, r0
 800e532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 8191 	bne.w	800e862 <f_open+0x362>
		dj.obj.fs = fs;
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e544:	68ba      	ldr	r2, [r7, #8]
 800e546:	f107 0314 	add.w	r3, r7, #20
 800e54a:	4611      	mov	r1, r2
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7ff fc03 	bl	800dd58 <follow_path>
 800e552:	4603      	mov	r3, r0
 800e554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d11a      	bne.n	800e596 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e560:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e564:	b25b      	sxtb	r3, r3
 800e566:	2b00      	cmp	r3, #0
 800e568:	da03      	bge.n	800e572 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e56a:	2306      	movs	r3, #6
 800e56c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e570:	e011      	b.n	800e596 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e572:	79fb      	ldrb	r3, [r7, #7]
 800e574:	f023 0301 	bic.w	r3, r3, #1
 800e578:	2b00      	cmp	r3, #0
 800e57a:	bf14      	ite	ne
 800e57c:	2301      	movne	r3, #1
 800e57e:	2300      	moveq	r3, #0
 800e580:	b2db      	uxtb	r3, r3
 800e582:	461a      	mov	r2, r3
 800e584:	f107 0314 	add.w	r3, r7, #20
 800e588:	4611      	mov	r1, r2
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fe fb16 	bl	800cbbc <chk_lock>
 800e590:	4603      	mov	r3, r0
 800e592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e596:	79fb      	ldrb	r3, [r7, #7]
 800e598:	f003 031c 	and.w	r3, r3, #28
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d07f      	beq.n	800e6a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e5a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d017      	beq.n	800e5d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e5a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5ac:	2b04      	cmp	r3, #4
 800e5ae:	d10e      	bne.n	800e5ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e5b0:	f7fe fb60 	bl	800cc74 <enq_lock>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d006      	beq.n	800e5c8 <f_open+0xc8>
 800e5ba:	f107 0314 	add.w	r3, r7, #20
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7ff faa4 	bl	800db0c <dir_register>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	e000      	b.n	800e5ca <f_open+0xca>
 800e5c8:	2312      	movs	r3, #18
 800e5ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e5ce:	79fb      	ldrb	r3, [r7, #7]
 800e5d0:	f043 0308 	orr.w	r3, r3, #8
 800e5d4:	71fb      	strb	r3, [r7, #7]
 800e5d6:	e010      	b.n	800e5fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5d8:	7ebb      	ldrb	r3, [r7, #26]
 800e5da:	f003 0311 	and.w	r3, r3, #17
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d003      	beq.n	800e5ea <f_open+0xea>
					res = FR_DENIED;
 800e5e2:	2307      	movs	r3, #7
 800e5e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e5e8:	e007      	b.n	800e5fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e5ea:	79fb      	ldrb	r3, [r7, #7]
 800e5ec:	f003 0304 	and.w	r3, r3, #4
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <f_open+0xfa>
 800e5f4:	2308      	movs	r3, #8
 800e5f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e5fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d168      	bne.n	800e6d4 <f_open+0x1d4>
 800e602:	79fb      	ldrb	r3, [r7, #7]
 800e604:	f003 0308 	and.w	r3, r3, #8
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d063      	beq.n	800e6d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e60c:	f7fd fbf8 	bl	800be00 <get_fattime>
 800e610:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e614:	330e      	adds	r3, #14
 800e616:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fe fa25 	bl	800ca68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e620:	3316      	adds	r3, #22
 800e622:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e624:	4618      	mov	r0, r3
 800e626:	f7fe fa1f 	bl	800ca68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e62c:	330b      	adds	r3, #11
 800e62e:	2220      	movs	r2, #32
 800e630:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e636:	4611      	mov	r1, r2
 800e638:	4618      	mov	r0, r3
 800e63a:	f7ff f976 	bl	800d92a <ld_clust>
 800e63e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e644:	2200      	movs	r2, #0
 800e646:	4618      	mov	r0, r3
 800e648:	f7ff f98e 	bl	800d968 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e64e:	331c      	adds	r3, #28
 800e650:	2100      	movs	r1, #0
 800e652:	4618      	mov	r0, r3
 800e654:	f7fe fa08 	bl	800ca68 <st_dword>
					fs->wflag = 1;
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	2201      	movs	r2, #1
 800e65c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e65e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e660:	2b00      	cmp	r3, #0
 800e662:	d037      	beq.n	800e6d4 <f_open+0x1d4>
						dw = fs->winsect;
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e668:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e66a:	f107 0314 	add.w	r3, r7, #20
 800e66e:	2200      	movs	r2, #0
 800e670:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e672:	4618      	mov	r0, r3
 800e674:	f7fe fea1 	bl	800d3ba <remove_chain>
 800e678:	4603      	mov	r3, r0
 800e67a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e67e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e682:	2b00      	cmp	r3, #0
 800e684:	d126      	bne.n	800e6d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fe fc46 	bl	800cf1c <move_window>
 800e690:	4603      	mov	r3, r0
 800e692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e69a:	3a01      	subs	r2, #1
 800e69c:	60da      	str	r2, [r3, #12]
 800e69e:	e019      	b.n	800e6d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e6a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d115      	bne.n	800e6d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e6a8:	7ebb      	ldrb	r3, [r7, #26]
 800e6aa:	f003 0310 	and.w	r3, r3, #16
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d003      	beq.n	800e6ba <f_open+0x1ba>
					res = FR_NO_FILE;
 800e6b2:	2304      	movs	r3, #4
 800e6b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e6b8:	e00c      	b.n	800e6d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e6ba:	79fb      	ldrb	r3, [r7, #7]
 800e6bc:	f003 0302 	and.w	r3, r3, #2
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d007      	beq.n	800e6d4 <f_open+0x1d4>
 800e6c4:	7ebb      	ldrb	r3, [r7, #26]
 800e6c6:	f003 0301 	and.w	r3, r3, #1
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d002      	beq.n	800e6d4 <f_open+0x1d4>
						res = FR_DENIED;
 800e6ce:	2307      	movs	r3, #7
 800e6d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e6d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d128      	bne.n	800e72e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e6dc:	79fb      	ldrb	r3, [r7, #7]
 800e6de:	f003 0308 	and.w	r3, r3, #8
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d003      	beq.n	800e6ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e6f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6fc:	79fb      	ldrb	r3, [r7, #7]
 800e6fe:	f023 0301 	bic.w	r3, r3, #1
 800e702:	2b00      	cmp	r3, #0
 800e704:	bf14      	ite	ne
 800e706:	2301      	movne	r3, #1
 800e708:	2300      	moveq	r3, #0
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	461a      	mov	r2, r3
 800e70e:	f107 0314 	add.w	r3, r7, #20
 800e712:	4611      	mov	r1, r2
 800e714:	4618      	mov	r0, r3
 800e716:	f7fe facf 	bl	800ccb8 <inc_lock>
 800e71a:	4602      	mov	r2, r0
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d102      	bne.n	800e72e <f_open+0x22e>
 800e728:	2302      	movs	r3, #2
 800e72a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e72e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e732:	2b00      	cmp	r3, #0
 800e734:	f040 8095 	bne.w	800e862 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e73c:	4611      	mov	r1, r2
 800e73e:	4618      	mov	r0, r3
 800e740:	f7ff f8f3 	bl	800d92a <ld_clust>
 800e744:	4602      	mov	r2, r0
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e74c:	331c      	adds	r3, #28
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fe f94c 	bl	800c9ec <ld_dword>
 800e754:	4602      	mov	r2, r0
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2200      	movs	r2, #0
 800e75e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e760:	693a      	ldr	r2, [r7, #16]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	88da      	ldrh	r2, [r3, #6]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	79fa      	ldrb	r2, [r7, #7]
 800e772:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	2200      	movs	r2, #0
 800e77e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2200      	movs	r2, #0
 800e784:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	3330      	adds	r3, #48	; 0x30
 800e78a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e78e:	2100      	movs	r1, #0
 800e790:	4618      	mov	r0, r3
 800e792:	f7fe f9b6 	bl	800cb02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	f003 0320 	and.w	r3, r3, #32
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d060      	beq.n	800e862 <f_open+0x362>
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d05c      	beq.n	800e862 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	68da      	ldr	r2, [r3, #12]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	895b      	ldrh	r3, [r3, #10]
 800e7b4:	025b      	lsls	r3, r3, #9
 800e7b6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	68db      	ldr	r3, [r3, #12]
 800e7c2:	657b      	str	r3, [r7, #84]	; 0x54
 800e7c4:	e016      	b.n	800e7f4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe fc61 	bl	800d092 <get_fat>
 800e7d0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e7d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d802      	bhi.n	800e7de <f_open+0x2de>
 800e7d8:	2302      	movs	r3, #2
 800e7da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e7de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7e4:	d102      	bne.n	800e7ec <f_open+0x2ec>
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e7ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7f0:	1ad3      	subs	r3, r2, r3
 800e7f2:	657b      	str	r3, [r7, #84]	; 0x54
 800e7f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d103      	bne.n	800e804 <f_open+0x304>
 800e7fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e800:	429a      	cmp	r2, r3
 800e802:	d8e0      	bhi.n	800e7c6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e808:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e80a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d127      	bne.n	800e862 <f_open+0x362>
 800e812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d022      	beq.n	800e862 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e820:	4618      	mov	r0, r3
 800e822:	f7fe fc17 	bl	800d054 <clust2sect>
 800e826:	6478      	str	r0, [r7, #68]	; 0x44
 800e828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d103      	bne.n	800e836 <f_open+0x336>
						res = FR_INT_ERR;
 800e82e:	2302      	movs	r3, #2
 800e830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e834:	e015      	b.n	800e862 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e838:	0a5a      	lsrs	r2, r3, #9
 800e83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e83c:	441a      	add	r2, r3
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	7858      	ldrb	r0, [r3, #1]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	6a1a      	ldr	r2, [r3, #32]
 800e850:	2301      	movs	r3, #1
 800e852:	f7fe f855 	bl	800c900 <disk_read>
 800e856:	4603      	mov	r3, r0
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d002      	beq.n	800e862 <f_open+0x362>
 800e85c:	2301      	movs	r3, #1
 800e85e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e862:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <f_open+0x370>
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e870:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e874:	4618      	mov	r0, r3
 800e876:	3760      	adds	r7, #96	; 0x60
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08c      	sub	sp, #48	; 0x30
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
 800e888:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	2200      	movs	r2, #0
 800e892:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f107 0210 	add.w	r2, r7, #16
 800e89a:	4611      	mov	r1, r2
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7ff fdb3 	bl	800e408 <validate>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e8a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d107      	bne.n	800e8c0 <f_write+0x44>
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	7d5b      	ldrb	r3, [r3, #21]
 800e8b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e8b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d002      	beq.n	800e8c6 <f_write+0x4a>
 800e8c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8c4:	e14b      	b.n	800eb5e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ca:	f003 0302 	and.w	r3, r3, #2
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d101      	bne.n	800e8d6 <f_write+0x5a>
 800e8d2:	2307      	movs	r3, #7
 800e8d4:	e143      	b.n	800eb5e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	699a      	ldr	r2, [r3, #24]
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	441a      	add	r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	f080 812d 	bcs.w	800eb42 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	699b      	ldr	r3, [r3, #24]
 800e8ec:	43db      	mvns	r3, r3
 800e8ee:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e8f0:	e127      	b.n	800eb42 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	699b      	ldr	r3, [r3, #24]
 800e8f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	f040 80e3 	bne.w	800eac6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	0a5b      	lsrs	r3, r3, #9
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	8952      	ldrh	r2, [r2, #10]
 800e90a:	3a01      	subs	r2, #1
 800e90c:	4013      	ands	r3, r2
 800e90e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d143      	bne.n	800e99e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	699b      	ldr	r3, [r3, #24]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d10c      	bne.n	800e938 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e926:	2b00      	cmp	r3, #0
 800e928:	d11a      	bne.n	800e960 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2100      	movs	r1, #0
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fe fda8 	bl	800d484 <create_chain>
 800e934:	62b8      	str	r0, [r7, #40]	; 0x28
 800e936:	e013      	b.n	800e960 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d007      	beq.n	800e950 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	699b      	ldr	r3, [r3, #24]
 800e944:	4619      	mov	r1, r3
 800e946:	68f8      	ldr	r0, [r7, #12]
 800e948:	f7fe fe34 	bl	800d5b4 <clmt_clust>
 800e94c:	62b8      	str	r0, [r7, #40]	; 0x28
 800e94e:	e007      	b.n	800e960 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e950:	68fa      	ldr	r2, [r7, #12]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	69db      	ldr	r3, [r3, #28]
 800e956:	4619      	mov	r1, r3
 800e958:	4610      	mov	r0, r2
 800e95a:	f7fe fd93 	bl	800d484 <create_chain>
 800e95e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	2b00      	cmp	r3, #0
 800e964:	f000 80f2 	beq.w	800eb4c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	d104      	bne.n	800e978 <f_write+0xfc>
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2202      	movs	r2, #2
 800e972:	755a      	strb	r2, [r3, #21]
 800e974:	2302      	movs	r3, #2
 800e976:	e0f2      	b.n	800eb5e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e97e:	d104      	bne.n	800e98a <f_write+0x10e>
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2201      	movs	r2, #1
 800e984:	755a      	strb	r2, [r3, #21]
 800e986:	2301      	movs	r3, #1
 800e988:	e0e9      	b.n	800eb5e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e98e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	689b      	ldr	r3, [r3, #8]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d102      	bne.n	800e99e <f_write+0x122>
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e99c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	7d1b      	ldrb	r3, [r3, #20]
 800e9a2:	b25b      	sxtb	r3, r3
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	da18      	bge.n	800e9da <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	7858      	ldrb	r0, [r3, #1]
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	6a1a      	ldr	r2, [r3, #32]
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	f7fd ffc2 	bl	800c940 <disk_write>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d004      	beq.n	800e9cc <f_write+0x150>
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	755a      	strb	r2, [r3, #21]
 800e9c8:	2301      	movs	r3, #1
 800e9ca:	e0c8      	b.n	800eb5e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	7d1b      	ldrb	r3, [r3, #20]
 800e9d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9d4:	b2da      	uxtb	r2, r3
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e9da:	693a      	ldr	r2, [r7, #16]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	69db      	ldr	r3, [r3, #28]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4610      	mov	r0, r2
 800e9e4:	f7fe fb36 	bl	800d054 <clust2sect>
 800e9e8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d104      	bne.n	800e9fa <f_write+0x17e>
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2202      	movs	r2, #2
 800e9f4:	755a      	strb	r2, [r3, #21]
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	e0b1      	b.n	800eb5e <f_write+0x2e2>
			sect += csect;
 800e9fa:	697a      	ldr	r2, [r7, #20]
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	4413      	add	r3, r2
 800ea00:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	0a5b      	lsrs	r3, r3, #9
 800ea06:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ea08:	6a3b      	ldr	r3, [r7, #32]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d03c      	beq.n	800ea88 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ea0e:	69ba      	ldr	r2, [r7, #24]
 800ea10:	6a3b      	ldr	r3, [r7, #32]
 800ea12:	4413      	add	r3, r2
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	8952      	ldrh	r2, [r2, #10]
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d905      	bls.n	800ea28 <f_write+0x1ac>
					cc = fs->csize - csect;
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	895b      	ldrh	r3, [r3, #10]
 800ea20:	461a      	mov	r2, r3
 800ea22:	69bb      	ldr	r3, [r7, #24]
 800ea24:	1ad3      	subs	r3, r2, r3
 800ea26:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	7858      	ldrb	r0, [r3, #1]
 800ea2c:	6a3b      	ldr	r3, [r7, #32]
 800ea2e:	697a      	ldr	r2, [r7, #20]
 800ea30:	69f9      	ldr	r1, [r7, #28]
 800ea32:	f7fd ff85 	bl	800c940 <disk_write>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d004      	beq.n	800ea46 <f_write+0x1ca>
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	755a      	strb	r2, [r3, #21]
 800ea42:	2301      	movs	r3, #1
 800ea44:	e08b      	b.n	800eb5e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6a1a      	ldr	r2, [r3, #32]
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	6a3a      	ldr	r2, [r7, #32]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d915      	bls.n	800ea80 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	6a1a      	ldr	r2, [r3, #32]
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	025b      	lsls	r3, r3, #9
 800ea64:	69fa      	ldr	r2, [r7, #28]
 800ea66:	4413      	add	r3, r2
 800ea68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	f7fe f827 	bl	800cac0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	7d1b      	ldrb	r3, [r3, #20]
 800ea76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ea80:	6a3b      	ldr	r3, [r7, #32]
 800ea82:	025b      	lsls	r3, r3, #9
 800ea84:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ea86:	e03f      	b.n	800eb08 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6a1b      	ldr	r3, [r3, #32]
 800ea8c:	697a      	ldr	r2, [r7, #20]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d016      	beq.n	800eac0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	699a      	ldr	r2, [r3, #24]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d210      	bcs.n	800eac0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	7858      	ldrb	r0, [r3, #1]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	697a      	ldr	r2, [r7, #20]
 800eaac:	f7fd ff28 	bl	800c900 <disk_read>
 800eab0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d004      	beq.n	800eac0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2201      	movs	r2, #1
 800eaba:	755a      	strb	r2, [r3, #21]
 800eabc:	2301      	movs	r3, #1
 800eabe:	e04e      	b.n	800eb5e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	697a      	ldr	r2, [r7, #20]
 800eac4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	699b      	ldr	r3, [r3, #24]
 800eaca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eace:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ead2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ead4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	429a      	cmp	r2, r3
 800eada:	d901      	bls.n	800eae0 <f_write+0x264>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	699b      	ldr	r3, [r3, #24]
 800eaea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaee:	4413      	add	r3, r2
 800eaf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaf2:	69f9      	ldr	r1, [r7, #28]
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	f7fd ffe3 	bl	800cac0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	7d1b      	ldrb	r3, [r3, #20]
 800eafe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb02:	b2da      	uxtb	r2, r3
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800eb08:	69fa      	ldr	r2, [r7, #28]
 800eb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0c:	4413      	add	r3, r2
 800eb0e:	61fb      	str	r3, [r7, #28]
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	699a      	ldr	r2, [r3, #24]
 800eb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb16:	441a      	add	r2, r3
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	619a      	str	r2, [r3, #24]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	68da      	ldr	r2, [r3, #12]
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	699b      	ldr	r3, [r3, #24]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	bf38      	it	cc
 800eb28:	461a      	movcc	r2, r3
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	60da      	str	r2, [r3, #12]
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb34:	441a      	add	r2, r3
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	601a      	str	r2, [r3, #0]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	1ad3      	subs	r3, r2, r3
 800eb40:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f47f aed4 	bne.w	800e8f2 <f_write+0x76>
 800eb4a:	e000      	b.n	800eb4e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eb4c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	7d1b      	ldrb	r3, [r3, #20]
 800eb52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800eb5c:	2300      	movs	r3, #0
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3730      	adds	r7, #48	; 0x30
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}

0800eb66 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eb66:	b580      	push	{r7, lr}
 800eb68:	b086      	sub	sp, #24
 800eb6a:	af00      	add	r7, sp, #0
 800eb6c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f107 0208 	add.w	r2, r7, #8
 800eb74:	4611      	mov	r1, r2
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7ff fc46 	bl	800e408 <validate>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eb80:	7dfb      	ldrb	r3, [r7, #23]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d168      	bne.n	800ec58 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	7d1b      	ldrb	r3, [r3, #20]
 800eb8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d062      	beq.n	800ec58 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	7d1b      	ldrb	r3, [r3, #20]
 800eb96:	b25b      	sxtb	r3, r3
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	da15      	bge.n	800ebc8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	7858      	ldrb	r0, [r3, #1]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6a1a      	ldr	r2, [r3, #32]
 800ebaa:	2301      	movs	r3, #1
 800ebac:	f7fd fec8 	bl	800c940 <disk_write>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d001      	beq.n	800ebba <f_sync+0x54>
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e04f      	b.n	800ec5a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	7d1b      	ldrb	r3, [r3, #20]
 800ebbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebc2:	b2da      	uxtb	r2, r3
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ebc8:	f7fd f91a 	bl	800be00 <get_fattime>
 800ebcc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4610      	mov	r0, r2
 800ebd8:	f7fe f9a0 	bl	800cf1c <move_window>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ebe0:	7dfb      	ldrb	r3, [r7, #23]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d138      	bne.n	800ec58 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	330b      	adds	r3, #11
 800ebf0:	781a      	ldrb	r2, [r3, #0]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	330b      	adds	r3, #11
 800ebf6:	f042 0220 	orr.w	r2, r2, #32
 800ebfa:	b2d2      	uxtb	r2, r2
 800ebfc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6818      	ldr	r0, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	689b      	ldr	r3, [r3, #8]
 800ec06:	461a      	mov	r2, r3
 800ec08:	68f9      	ldr	r1, [r7, #12]
 800ec0a:	f7fe fead 	bl	800d968 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	f103 021c 	add.w	r2, r3, #28
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	4619      	mov	r1, r3
 800ec1a:	4610      	mov	r0, r2
 800ec1c:	f7fd ff24 	bl	800ca68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	3316      	adds	r3, #22
 800ec24:	6939      	ldr	r1, [r7, #16]
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fd ff1e 	bl	800ca68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	3312      	adds	r3, #18
 800ec30:	2100      	movs	r1, #0
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7fd fefd 	bl	800ca32 <st_word>
					fs->wflag = 1;
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe f999 	bl	800cf78 <sync_fs>
 800ec46:	4603      	mov	r3, r0
 800ec48:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	7d1b      	ldrb	r3, [r3, #20]
 800ec4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec52:	b2da      	uxtb	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ec58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3718      	adds	r7, #24
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b084      	sub	sp, #16
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f7ff ff7b 	bl	800eb66 <f_sync>
 800ec70:	4603      	mov	r3, r0
 800ec72:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ec74:	7bfb      	ldrb	r3, [r7, #15]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d118      	bne.n	800ecac <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f107 0208 	add.w	r2, r7, #8
 800ec80:	4611      	mov	r1, r2
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7ff fbc0 	bl	800e408 <validate>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d10c      	bne.n	800ecac <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	691b      	ldr	r3, [r3, #16]
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fe f89c 	bl	800cdd4 <dec_lock>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eca0:	7bfb      	ldrb	r3, [r7, #15]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d102      	bne.n	800ecac <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2200      	movs	r2, #0
 800ecaa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ecac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3710      	adds	r7, #16
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b090      	sub	sp, #64	; 0x40
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
 800ecbe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f107 0208 	add.w	r2, r7, #8
 800ecc6:	4611      	mov	r1, r2
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f7ff fb9d 	bl	800e408 <validate>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ecd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d103      	bne.n	800ece4 <f_lseek+0x2e>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	7d5b      	ldrb	r3, [r3, #21]
 800ece0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ece4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d002      	beq.n	800ecf2 <f_lseek+0x3c>
 800ecec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ecf0:	e1e6      	b.n	800f0c0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f000 80d1 	beq.w	800ee9e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed02:	d15a      	bne.n	800edba <f_lseek+0x104>
			tbl = fp->cltbl;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed08:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ed0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0c:	1d1a      	adds	r2, r3, #4
 800ed0e:	627a      	str	r2, [r7, #36]	; 0x24
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	617b      	str	r3, [r7, #20]
 800ed14:	2302      	movs	r3, #2
 800ed16:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d03a      	beq.n	800ed9a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ed24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed26:	613b      	str	r3, [r7, #16]
 800ed28:	2300      	movs	r3, #0
 800ed2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed2e:	3302      	adds	r3, #2
 800ed30:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed34:	60fb      	str	r3, [r7, #12]
 800ed36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed38:	3301      	adds	r3, #1
 800ed3a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fe f9a6 	bl	800d092 <get_fat>
 800ed46:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ed48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d804      	bhi.n	800ed58 <f_lseek+0xa2>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2202      	movs	r2, #2
 800ed52:	755a      	strb	r2, [r3, #21]
 800ed54:	2302      	movs	r3, #2
 800ed56:	e1b3      	b.n	800f0c0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed5e:	d104      	bne.n	800ed6a <f_lseek+0xb4>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2201      	movs	r2, #1
 800ed64:	755a      	strb	r2, [r3, #21]
 800ed66:	2301      	movs	r3, #1
 800ed68:	e1aa      	b.n	800f0c0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d0de      	beq.n	800ed32 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ed74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d809      	bhi.n	800ed90 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7e:	1d1a      	adds	r2, r3, #4
 800ed80:	627a      	str	r2, [r7, #36]	; 0x24
 800ed82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed84:	601a      	str	r2, [r3, #0]
 800ed86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed88:	1d1a      	adds	r2, r3, #4
 800ed8a:	627a      	str	r2, [r7, #36]	; 0x24
 800ed8c:	693a      	ldr	r2, [r7, #16]
 800ed8e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	695b      	ldr	r3, [r3, #20]
 800ed94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d3c4      	bcc.n	800ed24 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eda0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800eda2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d803      	bhi.n	800edb2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edac:	2200      	movs	r2, #0
 800edae:	601a      	str	r2, [r3, #0]
 800edb0:	e184      	b.n	800f0bc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800edb2:	2311      	movs	r3, #17
 800edb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800edb8:	e180      	b.n	800f0bc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	683a      	ldr	r2, [r7, #0]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d902      	bls.n	800edca <f_lseek+0x114>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	f000 8172 	beq.w	800f0bc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	3b01      	subs	r3, #1
 800eddc:	4619      	mov	r1, r3
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f7fe fbe8 	bl	800d5b4 <clmt_clust>
 800ede4:	4602      	mov	r2, r0
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800edea:	68ba      	ldr	r2, [r7, #8]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	69db      	ldr	r3, [r3, #28]
 800edf0:	4619      	mov	r1, r3
 800edf2:	4610      	mov	r0, r2
 800edf4:	f7fe f92e 	bl	800d054 <clust2sect>
 800edf8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d104      	bne.n	800ee0a <f_lseek+0x154>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2202      	movs	r2, #2
 800ee04:	755a      	strb	r2, [r3, #21]
 800ee06:	2302      	movs	r3, #2
 800ee08:	e15a      	b.n	800f0c0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	0a5b      	lsrs	r3, r3, #9
 800ee10:	68ba      	ldr	r2, [r7, #8]
 800ee12:	8952      	ldrh	r2, [r2, #10]
 800ee14:	3a01      	subs	r2, #1
 800ee16:	4013      	ands	r3, r2
 800ee18:	69ba      	ldr	r2, [r7, #24]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	699b      	ldr	r3, [r3, #24]
 800ee22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f000 8148 	beq.w	800f0bc <f_lseek+0x406>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6a1b      	ldr	r3, [r3, #32]
 800ee30:	69ba      	ldr	r2, [r7, #24]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	f000 8142 	beq.w	800f0bc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	7d1b      	ldrb	r3, [r3, #20]
 800ee3c:	b25b      	sxtb	r3, r3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	da18      	bge.n	800ee74 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	7858      	ldrb	r0, [r3, #1]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6a1a      	ldr	r2, [r3, #32]
 800ee50:	2301      	movs	r3, #1
 800ee52:	f7fd fd75 	bl	800c940 <disk_write>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d004      	beq.n	800ee66 <f_lseek+0x1b0>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2201      	movs	r2, #1
 800ee60:	755a      	strb	r2, [r3, #21]
 800ee62:	2301      	movs	r3, #1
 800ee64:	e12c      	b.n	800f0c0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	7d1b      	ldrb	r3, [r3, #20]
 800ee6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	7858      	ldrb	r0, [r3, #1]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ee7e:	2301      	movs	r3, #1
 800ee80:	69ba      	ldr	r2, [r7, #24]
 800ee82:	f7fd fd3d 	bl	800c900 <disk_read>
 800ee86:	4603      	mov	r3, r0
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d004      	beq.n	800ee96 <f_lseek+0x1e0>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	755a      	strb	r2, [r3, #21]
 800ee92:	2301      	movs	r3, #1
 800ee94:	e114      	b.n	800f0c0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	69ba      	ldr	r2, [r7, #24]
 800ee9a:	621a      	str	r2, [r3, #32]
 800ee9c:	e10e      	b.n	800f0bc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	683a      	ldr	r2, [r7, #0]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d908      	bls.n	800eeba <f_lseek+0x204>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	7d1b      	ldrb	r3, [r3, #20]
 800eeac:	f003 0302 	and.w	r3, r3, #2
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d102      	bne.n	800eeba <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68db      	ldr	r3, [r3, #12]
 800eeb8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	699b      	ldr	r3, [r3, #24]
 800eebe:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800eec0:	2300      	movs	r3, #0
 800eec2:	637b      	str	r3, [r7, #52]	; 0x34
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eec8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	f000 80a7 	beq.w	800f020 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800eed2:	68bb      	ldr	r3, [r7, #8]
 800eed4:	895b      	ldrh	r3, [r3, #10]
 800eed6:	025b      	lsls	r3, r3, #9
 800eed8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d01b      	beq.n	800ef18 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	1e5a      	subs	r2, r3, #1
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	fbb2 f2f3 	udiv	r2, r2, r3
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	1e59      	subs	r1, r3, #1
 800eeee:	69fb      	ldr	r3, [r7, #28]
 800eef0:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d30f      	bcc.n	800ef18 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800eef8:	6a3b      	ldr	r3, [r7, #32]
 800eefa:	1e5a      	subs	r2, r3, #1
 800eefc:	69fb      	ldr	r3, [r7, #28]
 800eefe:	425b      	negs	r3, r3
 800ef00:	401a      	ands	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	699b      	ldr	r3, [r3, #24]
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	1ad3      	subs	r3, r2, r3
 800ef0e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	69db      	ldr	r3, [r3, #28]
 800ef14:	63bb      	str	r3, [r7, #56]	; 0x38
 800ef16:	e022      	b.n	800ef5e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	689b      	ldr	r3, [r3, #8]
 800ef1c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ef1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d119      	bne.n	800ef58 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2100      	movs	r1, #0
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fe faab 	bl	800d484 <create_chain>
 800ef2e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ef30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef32:	2b01      	cmp	r3, #1
 800ef34:	d104      	bne.n	800ef40 <f_lseek+0x28a>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2202      	movs	r2, #2
 800ef3a:	755a      	strb	r2, [r3, #21]
 800ef3c:	2302      	movs	r3, #2
 800ef3e:	e0bf      	b.n	800f0c0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ef40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef46:	d104      	bne.n	800ef52 <f_lseek+0x29c>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	755a      	strb	r2, [r3, #21]
 800ef4e:	2301      	movs	r3, #1
 800ef50:	e0b6      	b.n	800f0c0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef56:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ef5c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ef5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d05d      	beq.n	800f020 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ef64:	e03a      	b.n	800efdc <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ef66:	683a      	ldr	r2, [r7, #0]
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	1ad3      	subs	r3, r2, r3
 800ef6c:	603b      	str	r3, [r7, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	699a      	ldr	r2, [r3, #24]
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	441a      	add	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	7d1b      	ldrb	r3, [r3, #20]
 800ef7e:	f003 0302 	and.w	r3, r3, #2
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d00b      	beq.n	800ef9e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe fa7a 	bl	800d484 <create_chain>
 800ef90:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ef92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d108      	bne.n	800efaa <f_lseek+0x2f4>
							ofs = 0; break;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	603b      	str	r3, [r7, #0]
 800ef9c:	e022      	b.n	800efe4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fe f875 	bl	800d092 <get_fat>
 800efa8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800efaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb0:	d104      	bne.n	800efbc <f_lseek+0x306>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2201      	movs	r2, #1
 800efb6:	755a      	strb	r2, [r3, #21]
 800efb8:	2301      	movs	r3, #1
 800efba:	e081      	b.n	800f0c0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800efbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d904      	bls.n	800efcc <f_lseek+0x316>
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	695b      	ldr	r3, [r3, #20]
 800efc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efc8:	429a      	cmp	r2, r3
 800efca:	d304      	bcc.n	800efd6 <f_lseek+0x320>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2202      	movs	r2, #2
 800efd0:	755a      	strb	r2, [r3, #21]
 800efd2:	2302      	movs	r3, #2
 800efd4:	e074      	b.n	800f0c0 <f_lseek+0x40a>
					fp->clust = clst;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800efda:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800efdc:	683a      	ldr	r2, [r7, #0]
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d8c0      	bhi.n	800ef66 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	699a      	ldr	r2, [r3, #24]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	441a      	add	r2, r3
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d012      	beq.n	800f020 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800effe:	4618      	mov	r0, r3
 800f000:	f7fe f828 	bl	800d054 <clust2sect>
 800f004:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800f006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d104      	bne.n	800f016 <f_lseek+0x360>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2202      	movs	r2, #2
 800f010:	755a      	strb	r2, [r3, #21]
 800f012:	2302      	movs	r3, #2
 800f014:	e054      	b.n	800f0c0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	0a5b      	lsrs	r3, r3, #9
 800f01a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f01c:	4413      	add	r3, r2
 800f01e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	699a      	ldr	r2, [r3, #24]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d90a      	bls.n	800f042 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	699a      	ldr	r2, [r3, #24]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	7d1b      	ldrb	r3, [r3, #20]
 800f038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	699b      	ldr	r3, [r3, #24]
 800f046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d036      	beq.n	800f0bc <f_lseek+0x406>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6a1b      	ldr	r3, [r3, #32]
 800f052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f054:	429a      	cmp	r2, r3
 800f056:	d031      	beq.n	800f0bc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	7d1b      	ldrb	r3, [r3, #20]
 800f05c:	b25b      	sxtb	r3, r3
 800f05e:	2b00      	cmp	r3, #0
 800f060:	da18      	bge.n	800f094 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	7858      	ldrb	r0, [r3, #1]
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6a1a      	ldr	r2, [r3, #32]
 800f070:	2301      	movs	r3, #1
 800f072:	f7fd fc65 	bl	800c940 <disk_write>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d004      	beq.n	800f086 <f_lseek+0x3d0>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	755a      	strb	r2, [r3, #21]
 800f082:	2301      	movs	r3, #1
 800f084:	e01c      	b.n	800f0c0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	7d1b      	ldrb	r3, [r3, #20]
 800f08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f08e:	b2da      	uxtb	r2, r3
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	7858      	ldrb	r0, [r3, #1]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f09e:	2301      	movs	r3, #1
 800f0a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0a2:	f7fd fc2d 	bl	800c900 <disk_read>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d004      	beq.n	800f0b6 <f_lseek+0x400>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	755a      	strb	r2, [r3, #21]
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e004      	b.n	800f0c0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0ba:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800f0bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3740      	adds	r7, #64	; 0x40
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b086      	sub	sp, #24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <f_opendir+0x14>
 800f0d8:	2309      	movs	r3, #9
 800f0da:	e064      	b.n	800f1a6 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800f0e0:	f107 010c 	add.w	r1, r7, #12
 800f0e4:	463b      	mov	r3, r7
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7fe ff41 	bl	800df70 <find_volume>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f0f2:	7dfb      	ldrb	r3, [r7, #23]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d14f      	bne.n	800f198 <f_opendir+0xd0>
		obj->fs = fs;
 800f0f8:	68fa      	ldr	r2, [r7, #12]
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	4619      	mov	r1, r3
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7fe fe28 	bl	800dd58 <follow_path>
 800f108:	4603      	mov	r3, r0
 800f10a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800f10c:	7dfb      	ldrb	r3, [r7, #23]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d13d      	bne.n	800f18e <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f118:	b25b      	sxtb	r3, r3
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	db12      	blt.n	800f144 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	799b      	ldrb	r3, [r3, #6]
 800f122:	f003 0310 	and.w	r3, r3, #16
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00a      	beq.n	800f140 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6a1b      	ldr	r3, [r3, #32]
 800f130:	4619      	mov	r1, r3
 800f132:	4610      	mov	r0, r2
 800f134:	f7fe fbf9 	bl	800d92a <ld_clust>
 800f138:	4602      	mov	r2, r0
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	609a      	str	r2, [r3, #8]
 800f13e:	e001      	b.n	800f144 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f140:	2305      	movs	r3, #5
 800f142:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800f144:	7dfb      	ldrb	r3, [r7, #23]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d121      	bne.n	800f18e <f_opendir+0xc6>
				obj->id = fs->id;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	88da      	ldrh	r2, [r3, #6]
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f152:	2100      	movs	r1, #0
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f7fe fa61 	bl	800d61c <dir_sdi>
 800f15a:	4603      	mov	r3, r0
 800f15c:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f15e:	7dfb      	ldrb	r3, [r7, #23]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d114      	bne.n	800f18e <f_opendir+0xc6>
					if (obj->sclust) {
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00d      	beq.n	800f188 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f16c:	2100      	movs	r1, #0
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f7fd fda2 	bl	800ccb8 <inc_lock>
 800f174:	4602      	mov	r2, r0
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	691b      	ldr	r3, [r3, #16]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d105      	bne.n	800f18e <f_opendir+0xc6>
 800f182:	2312      	movs	r3, #18
 800f184:	75fb      	strb	r3, [r7, #23]
 800f186:	e002      	b.n	800f18e <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	2200      	movs	r2, #0
 800f18c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f18e:	7dfb      	ldrb	r3, [r7, #23]
 800f190:	2b04      	cmp	r3, #4
 800f192:	d101      	bne.n	800f198 <f_opendir+0xd0>
 800f194:	2305      	movs	r3, #5
 800f196:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f198:	7dfb      	ldrb	r3, [r7, #23]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d002      	beq.n	800f1a4 <f_opendir+0xdc>
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	3718      	adds	r7, #24
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}

0800f1ae <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f1ae:	b580      	push	{r7, lr}
 800f1b0:	b084      	sub	sp, #16
 800f1b2:	af00      	add	r7, sp, #0
 800f1b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	f107 0208 	add.w	r2, r7, #8
 800f1bc:	4611      	mov	r1, r2
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7ff f922 	bl	800e408 <validate>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f1c8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d110      	bne.n	800f1f0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	691b      	ldr	r3, [r3, #16]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d006      	beq.n	800f1e4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	691b      	ldr	r3, [r3, #16]
 800f1da:	4618      	mov	r0, r3
 800f1dc:	f7fd fdfa 	bl	800cdd4 <dec_lock>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f1e4:	7bfb      	ldrb	r3, [r7, #15]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d102      	bne.n	800f1f0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800f1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	3710      	adds	r7, #16
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b084      	sub	sp, #16
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	6078      	str	r0, [r7, #4]
 800f202:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f107 0208 	add.w	r2, r7, #8
 800f20a:	4611      	mov	r1, r2
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff f8fb 	bl	800e408 <validate>
 800f212:	4603      	mov	r3, r0
 800f214:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f216:	7bfb      	ldrb	r3, [r7, #15]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d126      	bne.n	800f26a <f_readdir+0x70>
		if (!fno) {
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d106      	bne.n	800f230 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f222:	2100      	movs	r1, #0
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7fe f9f9 	bl	800d61c <dir_sdi>
 800f22a:	4603      	mov	r3, r0
 800f22c:	73fb      	strb	r3, [r7, #15]
 800f22e:	e01c      	b.n	800f26a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800f230:	2100      	movs	r1, #0
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7fe fbb8 	bl	800d9a8 <dir_read>
 800f238:	4603      	mov	r3, r0
 800f23a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f23c:	7bfb      	ldrb	r3, [r7, #15]
 800f23e:	2b04      	cmp	r3, #4
 800f240:	d101      	bne.n	800f246 <f_readdir+0x4c>
 800f242:	2300      	movs	r3, #0
 800f244:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800f246:	7bfb      	ldrb	r3, [r7, #15]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d10e      	bne.n	800f26a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f24c:	6839      	ldr	r1, [r7, #0]
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7fe fc8e 	bl	800db70 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f254:	2100      	movs	r1, #0
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7fe fa5b 	bl	800d712 <dir_next>
 800f25c:	4603      	mov	r3, r0
 800f25e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f260:	7bfb      	ldrb	r3, [r7, #15]
 800f262:	2b04      	cmp	r3, #4
 800f264:	d101      	bne.n	800f26a <f_readdir+0x70>
 800f266:	2300      	movs	r3, #0
 800f268:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}

0800f274 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f274:	b480      	push	{r7}
 800f276:	b087      	sub	sp, #28
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	4613      	mov	r3, r2
 800f280:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f282:	2301      	movs	r3, #1
 800f284:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f286:	2300      	movs	r3, #0
 800f288:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f28a:	4b1f      	ldr	r3, [pc, #124]	; (800f308 <FATFS_LinkDriverEx+0x94>)
 800f28c:	7a5b      	ldrb	r3, [r3, #9]
 800f28e:	b2db      	uxtb	r3, r3
 800f290:	2b00      	cmp	r3, #0
 800f292:	d131      	bne.n	800f2f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f294:	4b1c      	ldr	r3, [pc, #112]	; (800f308 <FATFS_LinkDriverEx+0x94>)
 800f296:	7a5b      	ldrb	r3, [r3, #9]
 800f298:	b2db      	uxtb	r3, r3
 800f29a:	461a      	mov	r2, r3
 800f29c:	4b1a      	ldr	r3, [pc, #104]	; (800f308 <FATFS_LinkDriverEx+0x94>)
 800f29e:	2100      	movs	r1, #0
 800f2a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f2a2:	4b19      	ldr	r3, [pc, #100]	; (800f308 <FATFS_LinkDriverEx+0x94>)
 800f2a4:	7a5b      	ldrb	r3, [r3, #9]
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	4a17      	ldr	r2, [pc, #92]	; (800f308 <FATFS_LinkDriverEx+0x94>)
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	4413      	add	r3, r2
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f2b2:	4b15      	ldr	r3, [pc, #84]	; (800f308 <FATFS_LinkDriverEx+0x94>)
 800f2b4:	7a5b      	ldrb	r3, [r3, #9]
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	4b13      	ldr	r3, [pc, #76]	; (800f308 <FATFS_LinkDriverEx+0x94>)
 800f2bc:	4413      	add	r3, r2
 800f2be:	79fa      	ldrb	r2, [r7, #7]
 800f2c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f2c2:	4b11      	ldr	r3, [pc, #68]	; (800f308 <FATFS_LinkDriverEx+0x94>)
 800f2c4:	7a5b      	ldrb	r3, [r3, #9]
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	b2d1      	uxtb	r1, r2
 800f2cc:	4a0e      	ldr	r2, [pc, #56]	; (800f308 <FATFS_LinkDriverEx+0x94>)
 800f2ce:	7251      	strb	r1, [r2, #9]
 800f2d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f2d2:	7dbb      	ldrb	r3, [r7, #22]
 800f2d4:	3330      	adds	r3, #48	; 0x30
 800f2d6:	b2da      	uxtb	r2, r3
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	223a      	movs	r2, #58	; 0x3a
 800f2e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	3302      	adds	r3, #2
 800f2e8:	222f      	movs	r2, #47	; 0x2f
 800f2ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	3303      	adds	r3, #3
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	371c      	adds	r7, #28
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	200004e8 	.word	0x200004e8

0800f30c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f316:	2200      	movs	r2, #0
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7ff ffaa 	bl	800f274 <FATFS_LinkDriverEx>
 800f320:	4603      	mov	r3, r0
}
 800f322:	4618      	mov	r0, r3
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}
	...

0800f32c <__errno>:
 800f32c:	4b01      	ldr	r3, [pc, #4]	; (800f334 <__errno+0x8>)
 800f32e:	6818      	ldr	r0, [r3, #0]
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop
 800f334:	20000028 	.word	0x20000028

0800f338 <__libc_init_array>:
 800f338:	b570      	push	{r4, r5, r6, lr}
 800f33a:	4d0d      	ldr	r5, [pc, #52]	; (800f370 <__libc_init_array+0x38>)
 800f33c:	4c0d      	ldr	r4, [pc, #52]	; (800f374 <__libc_init_array+0x3c>)
 800f33e:	1b64      	subs	r4, r4, r5
 800f340:	10a4      	asrs	r4, r4, #2
 800f342:	2600      	movs	r6, #0
 800f344:	42a6      	cmp	r6, r4
 800f346:	d109      	bne.n	800f35c <__libc_init_array+0x24>
 800f348:	4d0b      	ldr	r5, [pc, #44]	; (800f378 <__libc_init_array+0x40>)
 800f34a:	4c0c      	ldr	r4, [pc, #48]	; (800f37c <__libc_init_array+0x44>)
 800f34c:	f006 f912 	bl	8015574 <_init>
 800f350:	1b64      	subs	r4, r4, r5
 800f352:	10a4      	asrs	r4, r4, #2
 800f354:	2600      	movs	r6, #0
 800f356:	42a6      	cmp	r6, r4
 800f358:	d105      	bne.n	800f366 <__libc_init_array+0x2e>
 800f35a:	bd70      	pop	{r4, r5, r6, pc}
 800f35c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f360:	4798      	blx	r3
 800f362:	3601      	adds	r6, #1
 800f364:	e7ee      	b.n	800f344 <__libc_init_array+0xc>
 800f366:	f855 3b04 	ldr.w	r3, [r5], #4
 800f36a:	4798      	blx	r3
 800f36c:	3601      	adds	r6, #1
 800f36e:	e7f2      	b.n	800f356 <__libc_init_array+0x1e>
 800f370:	08016748 	.word	0x08016748
 800f374:	08016748 	.word	0x08016748
 800f378:	08016748 	.word	0x08016748
 800f37c:	0801674c 	.word	0x0801674c

0800f380 <malloc>:
 800f380:	4b02      	ldr	r3, [pc, #8]	; (800f38c <malloc+0xc>)
 800f382:	4601      	mov	r1, r0
 800f384:	6818      	ldr	r0, [r3, #0]
 800f386:	f000 b869 	b.w	800f45c <_malloc_r>
 800f38a:	bf00      	nop
 800f38c:	20000028 	.word	0x20000028

0800f390 <memcpy>:
 800f390:	440a      	add	r2, r1
 800f392:	4291      	cmp	r1, r2
 800f394:	f100 33ff 	add.w	r3, r0, #4294967295
 800f398:	d100      	bne.n	800f39c <memcpy+0xc>
 800f39a:	4770      	bx	lr
 800f39c:	b510      	push	{r4, lr}
 800f39e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3a6:	4291      	cmp	r1, r2
 800f3a8:	d1f9      	bne.n	800f39e <memcpy+0xe>
 800f3aa:	bd10      	pop	{r4, pc}

0800f3ac <memset>:
 800f3ac:	4402      	add	r2, r0
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	4293      	cmp	r3, r2
 800f3b2:	d100      	bne.n	800f3b6 <memset+0xa>
 800f3b4:	4770      	bx	lr
 800f3b6:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ba:	e7f9      	b.n	800f3b0 <memset+0x4>

0800f3bc <_free_r>:
 800f3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3be:	2900      	cmp	r1, #0
 800f3c0:	d048      	beq.n	800f454 <_free_r+0x98>
 800f3c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3c6:	9001      	str	r0, [sp, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	f1a1 0404 	sub.w	r4, r1, #4
 800f3ce:	bfb8      	it	lt
 800f3d0:	18e4      	addlt	r4, r4, r3
 800f3d2:	f003 fc7b 	bl	8012ccc <__malloc_lock>
 800f3d6:	4a20      	ldr	r2, [pc, #128]	; (800f458 <_free_r+0x9c>)
 800f3d8:	9801      	ldr	r0, [sp, #4]
 800f3da:	6813      	ldr	r3, [r2, #0]
 800f3dc:	4615      	mov	r5, r2
 800f3de:	b933      	cbnz	r3, 800f3ee <_free_r+0x32>
 800f3e0:	6063      	str	r3, [r4, #4]
 800f3e2:	6014      	str	r4, [r2, #0]
 800f3e4:	b003      	add	sp, #12
 800f3e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3ea:	f003 bc75 	b.w	8012cd8 <__malloc_unlock>
 800f3ee:	42a3      	cmp	r3, r4
 800f3f0:	d90b      	bls.n	800f40a <_free_r+0x4e>
 800f3f2:	6821      	ldr	r1, [r4, #0]
 800f3f4:	1862      	adds	r2, r4, r1
 800f3f6:	4293      	cmp	r3, r2
 800f3f8:	bf04      	itt	eq
 800f3fa:	681a      	ldreq	r2, [r3, #0]
 800f3fc:	685b      	ldreq	r3, [r3, #4]
 800f3fe:	6063      	str	r3, [r4, #4]
 800f400:	bf04      	itt	eq
 800f402:	1852      	addeq	r2, r2, r1
 800f404:	6022      	streq	r2, [r4, #0]
 800f406:	602c      	str	r4, [r5, #0]
 800f408:	e7ec      	b.n	800f3e4 <_free_r+0x28>
 800f40a:	461a      	mov	r2, r3
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	b10b      	cbz	r3, 800f414 <_free_r+0x58>
 800f410:	42a3      	cmp	r3, r4
 800f412:	d9fa      	bls.n	800f40a <_free_r+0x4e>
 800f414:	6811      	ldr	r1, [r2, #0]
 800f416:	1855      	adds	r5, r2, r1
 800f418:	42a5      	cmp	r5, r4
 800f41a:	d10b      	bne.n	800f434 <_free_r+0x78>
 800f41c:	6824      	ldr	r4, [r4, #0]
 800f41e:	4421      	add	r1, r4
 800f420:	1854      	adds	r4, r2, r1
 800f422:	42a3      	cmp	r3, r4
 800f424:	6011      	str	r1, [r2, #0]
 800f426:	d1dd      	bne.n	800f3e4 <_free_r+0x28>
 800f428:	681c      	ldr	r4, [r3, #0]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	6053      	str	r3, [r2, #4]
 800f42e:	4421      	add	r1, r4
 800f430:	6011      	str	r1, [r2, #0]
 800f432:	e7d7      	b.n	800f3e4 <_free_r+0x28>
 800f434:	d902      	bls.n	800f43c <_free_r+0x80>
 800f436:	230c      	movs	r3, #12
 800f438:	6003      	str	r3, [r0, #0]
 800f43a:	e7d3      	b.n	800f3e4 <_free_r+0x28>
 800f43c:	6825      	ldr	r5, [r4, #0]
 800f43e:	1961      	adds	r1, r4, r5
 800f440:	428b      	cmp	r3, r1
 800f442:	bf04      	itt	eq
 800f444:	6819      	ldreq	r1, [r3, #0]
 800f446:	685b      	ldreq	r3, [r3, #4]
 800f448:	6063      	str	r3, [r4, #4]
 800f44a:	bf04      	itt	eq
 800f44c:	1949      	addeq	r1, r1, r5
 800f44e:	6021      	streq	r1, [r4, #0]
 800f450:	6054      	str	r4, [r2, #4]
 800f452:	e7c7      	b.n	800f3e4 <_free_r+0x28>
 800f454:	b003      	add	sp, #12
 800f456:	bd30      	pop	{r4, r5, pc}
 800f458:	200004f4 	.word	0x200004f4

0800f45c <_malloc_r>:
 800f45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45e:	1ccd      	adds	r5, r1, #3
 800f460:	f025 0503 	bic.w	r5, r5, #3
 800f464:	3508      	adds	r5, #8
 800f466:	2d0c      	cmp	r5, #12
 800f468:	bf38      	it	cc
 800f46a:	250c      	movcc	r5, #12
 800f46c:	2d00      	cmp	r5, #0
 800f46e:	4606      	mov	r6, r0
 800f470:	db01      	blt.n	800f476 <_malloc_r+0x1a>
 800f472:	42a9      	cmp	r1, r5
 800f474:	d903      	bls.n	800f47e <_malloc_r+0x22>
 800f476:	230c      	movs	r3, #12
 800f478:	6033      	str	r3, [r6, #0]
 800f47a:	2000      	movs	r0, #0
 800f47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f47e:	f003 fc25 	bl	8012ccc <__malloc_lock>
 800f482:	4921      	ldr	r1, [pc, #132]	; (800f508 <_malloc_r+0xac>)
 800f484:	680a      	ldr	r2, [r1, #0]
 800f486:	4614      	mov	r4, r2
 800f488:	b99c      	cbnz	r4, 800f4b2 <_malloc_r+0x56>
 800f48a:	4f20      	ldr	r7, [pc, #128]	; (800f50c <_malloc_r+0xb0>)
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	b923      	cbnz	r3, 800f49a <_malloc_r+0x3e>
 800f490:	4621      	mov	r1, r4
 800f492:	4630      	mov	r0, r6
 800f494:	f000 ff44 	bl	8010320 <_sbrk_r>
 800f498:	6038      	str	r0, [r7, #0]
 800f49a:	4629      	mov	r1, r5
 800f49c:	4630      	mov	r0, r6
 800f49e:	f000 ff3f 	bl	8010320 <_sbrk_r>
 800f4a2:	1c43      	adds	r3, r0, #1
 800f4a4:	d123      	bne.n	800f4ee <_malloc_r+0x92>
 800f4a6:	230c      	movs	r3, #12
 800f4a8:	6033      	str	r3, [r6, #0]
 800f4aa:	4630      	mov	r0, r6
 800f4ac:	f003 fc14 	bl	8012cd8 <__malloc_unlock>
 800f4b0:	e7e3      	b.n	800f47a <_malloc_r+0x1e>
 800f4b2:	6823      	ldr	r3, [r4, #0]
 800f4b4:	1b5b      	subs	r3, r3, r5
 800f4b6:	d417      	bmi.n	800f4e8 <_malloc_r+0x8c>
 800f4b8:	2b0b      	cmp	r3, #11
 800f4ba:	d903      	bls.n	800f4c4 <_malloc_r+0x68>
 800f4bc:	6023      	str	r3, [r4, #0]
 800f4be:	441c      	add	r4, r3
 800f4c0:	6025      	str	r5, [r4, #0]
 800f4c2:	e004      	b.n	800f4ce <_malloc_r+0x72>
 800f4c4:	6863      	ldr	r3, [r4, #4]
 800f4c6:	42a2      	cmp	r2, r4
 800f4c8:	bf0c      	ite	eq
 800f4ca:	600b      	streq	r3, [r1, #0]
 800f4cc:	6053      	strne	r3, [r2, #4]
 800f4ce:	4630      	mov	r0, r6
 800f4d0:	f003 fc02 	bl	8012cd8 <__malloc_unlock>
 800f4d4:	f104 000b 	add.w	r0, r4, #11
 800f4d8:	1d23      	adds	r3, r4, #4
 800f4da:	f020 0007 	bic.w	r0, r0, #7
 800f4de:	1ac2      	subs	r2, r0, r3
 800f4e0:	d0cc      	beq.n	800f47c <_malloc_r+0x20>
 800f4e2:	1a1b      	subs	r3, r3, r0
 800f4e4:	50a3      	str	r3, [r4, r2]
 800f4e6:	e7c9      	b.n	800f47c <_malloc_r+0x20>
 800f4e8:	4622      	mov	r2, r4
 800f4ea:	6864      	ldr	r4, [r4, #4]
 800f4ec:	e7cc      	b.n	800f488 <_malloc_r+0x2c>
 800f4ee:	1cc4      	adds	r4, r0, #3
 800f4f0:	f024 0403 	bic.w	r4, r4, #3
 800f4f4:	42a0      	cmp	r0, r4
 800f4f6:	d0e3      	beq.n	800f4c0 <_malloc_r+0x64>
 800f4f8:	1a21      	subs	r1, r4, r0
 800f4fa:	4630      	mov	r0, r6
 800f4fc:	f000 ff10 	bl	8010320 <_sbrk_r>
 800f500:	3001      	adds	r0, #1
 800f502:	d1dd      	bne.n	800f4c0 <_malloc_r+0x64>
 800f504:	e7cf      	b.n	800f4a6 <_malloc_r+0x4a>
 800f506:	bf00      	nop
 800f508:	200004f4 	.word	0x200004f4
 800f50c:	200004f8 	.word	0x200004f8

0800f510 <__cvt>:
 800f510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f514:	ec55 4b10 	vmov	r4, r5, d0
 800f518:	2d00      	cmp	r5, #0
 800f51a:	460e      	mov	r6, r1
 800f51c:	4619      	mov	r1, r3
 800f51e:	462b      	mov	r3, r5
 800f520:	bfbb      	ittet	lt
 800f522:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f526:	461d      	movlt	r5, r3
 800f528:	2300      	movge	r3, #0
 800f52a:	232d      	movlt	r3, #45	; 0x2d
 800f52c:	700b      	strb	r3, [r1, #0]
 800f52e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f530:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f534:	4691      	mov	r9, r2
 800f536:	f023 0820 	bic.w	r8, r3, #32
 800f53a:	bfbc      	itt	lt
 800f53c:	4622      	movlt	r2, r4
 800f53e:	4614      	movlt	r4, r2
 800f540:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f544:	d005      	beq.n	800f552 <__cvt+0x42>
 800f546:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f54a:	d100      	bne.n	800f54e <__cvt+0x3e>
 800f54c:	3601      	adds	r6, #1
 800f54e:	2102      	movs	r1, #2
 800f550:	e000      	b.n	800f554 <__cvt+0x44>
 800f552:	2103      	movs	r1, #3
 800f554:	ab03      	add	r3, sp, #12
 800f556:	9301      	str	r3, [sp, #4]
 800f558:	ab02      	add	r3, sp, #8
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	ec45 4b10 	vmov	d0, r4, r5
 800f560:	4653      	mov	r3, sl
 800f562:	4632      	mov	r2, r6
 800f564:	f002 f810 	bl	8011588 <_dtoa_r>
 800f568:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f56c:	4607      	mov	r7, r0
 800f56e:	d102      	bne.n	800f576 <__cvt+0x66>
 800f570:	f019 0f01 	tst.w	r9, #1
 800f574:	d022      	beq.n	800f5bc <__cvt+0xac>
 800f576:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f57a:	eb07 0906 	add.w	r9, r7, r6
 800f57e:	d110      	bne.n	800f5a2 <__cvt+0x92>
 800f580:	783b      	ldrb	r3, [r7, #0]
 800f582:	2b30      	cmp	r3, #48	; 0x30
 800f584:	d10a      	bne.n	800f59c <__cvt+0x8c>
 800f586:	2200      	movs	r2, #0
 800f588:	2300      	movs	r3, #0
 800f58a:	4620      	mov	r0, r4
 800f58c:	4629      	mov	r1, r5
 800f58e:	f7f1 fabb 	bl	8000b08 <__aeabi_dcmpeq>
 800f592:	b918      	cbnz	r0, 800f59c <__cvt+0x8c>
 800f594:	f1c6 0601 	rsb	r6, r6, #1
 800f598:	f8ca 6000 	str.w	r6, [sl]
 800f59c:	f8da 3000 	ldr.w	r3, [sl]
 800f5a0:	4499      	add	r9, r3
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	4629      	mov	r1, r5
 800f5aa:	f7f1 faad 	bl	8000b08 <__aeabi_dcmpeq>
 800f5ae:	b108      	cbz	r0, 800f5b4 <__cvt+0xa4>
 800f5b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5b4:	2230      	movs	r2, #48	; 0x30
 800f5b6:	9b03      	ldr	r3, [sp, #12]
 800f5b8:	454b      	cmp	r3, r9
 800f5ba:	d307      	bcc.n	800f5cc <__cvt+0xbc>
 800f5bc:	9b03      	ldr	r3, [sp, #12]
 800f5be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f5c0:	1bdb      	subs	r3, r3, r7
 800f5c2:	4638      	mov	r0, r7
 800f5c4:	6013      	str	r3, [r2, #0]
 800f5c6:	b004      	add	sp, #16
 800f5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5cc:	1c59      	adds	r1, r3, #1
 800f5ce:	9103      	str	r1, [sp, #12]
 800f5d0:	701a      	strb	r2, [r3, #0]
 800f5d2:	e7f0      	b.n	800f5b6 <__cvt+0xa6>

0800f5d4 <__exponent>:
 800f5d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2900      	cmp	r1, #0
 800f5da:	bfb8      	it	lt
 800f5dc:	4249      	neglt	r1, r1
 800f5de:	f803 2b02 	strb.w	r2, [r3], #2
 800f5e2:	bfb4      	ite	lt
 800f5e4:	222d      	movlt	r2, #45	; 0x2d
 800f5e6:	222b      	movge	r2, #43	; 0x2b
 800f5e8:	2909      	cmp	r1, #9
 800f5ea:	7042      	strb	r2, [r0, #1]
 800f5ec:	dd2a      	ble.n	800f644 <__exponent+0x70>
 800f5ee:	f10d 0407 	add.w	r4, sp, #7
 800f5f2:	46a4      	mov	ip, r4
 800f5f4:	270a      	movs	r7, #10
 800f5f6:	46a6      	mov	lr, r4
 800f5f8:	460a      	mov	r2, r1
 800f5fa:	fb91 f6f7 	sdiv	r6, r1, r7
 800f5fe:	fb07 1516 	mls	r5, r7, r6, r1
 800f602:	3530      	adds	r5, #48	; 0x30
 800f604:	2a63      	cmp	r2, #99	; 0x63
 800f606:	f104 34ff 	add.w	r4, r4, #4294967295
 800f60a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f60e:	4631      	mov	r1, r6
 800f610:	dcf1      	bgt.n	800f5f6 <__exponent+0x22>
 800f612:	3130      	adds	r1, #48	; 0x30
 800f614:	f1ae 0502 	sub.w	r5, lr, #2
 800f618:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f61c:	1c44      	adds	r4, r0, #1
 800f61e:	4629      	mov	r1, r5
 800f620:	4561      	cmp	r1, ip
 800f622:	d30a      	bcc.n	800f63a <__exponent+0x66>
 800f624:	f10d 0209 	add.w	r2, sp, #9
 800f628:	eba2 020e 	sub.w	r2, r2, lr
 800f62c:	4565      	cmp	r5, ip
 800f62e:	bf88      	it	hi
 800f630:	2200      	movhi	r2, #0
 800f632:	4413      	add	r3, r2
 800f634:	1a18      	subs	r0, r3, r0
 800f636:	b003      	add	sp, #12
 800f638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f63a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f63e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f642:	e7ed      	b.n	800f620 <__exponent+0x4c>
 800f644:	2330      	movs	r3, #48	; 0x30
 800f646:	3130      	adds	r1, #48	; 0x30
 800f648:	7083      	strb	r3, [r0, #2]
 800f64a:	70c1      	strb	r1, [r0, #3]
 800f64c:	1d03      	adds	r3, r0, #4
 800f64e:	e7f1      	b.n	800f634 <__exponent+0x60>

0800f650 <_printf_float>:
 800f650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f654:	ed2d 8b02 	vpush	{d8}
 800f658:	b08d      	sub	sp, #52	; 0x34
 800f65a:	460c      	mov	r4, r1
 800f65c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f660:	4616      	mov	r6, r2
 800f662:	461f      	mov	r7, r3
 800f664:	4605      	mov	r5, r0
 800f666:	f003 faa1 	bl	8012bac <_localeconv_r>
 800f66a:	f8d0 a000 	ldr.w	sl, [r0]
 800f66e:	4650      	mov	r0, sl
 800f670:	f7f0 fdc8 	bl	8000204 <strlen>
 800f674:	2300      	movs	r3, #0
 800f676:	930a      	str	r3, [sp, #40]	; 0x28
 800f678:	6823      	ldr	r3, [r4, #0]
 800f67a:	9305      	str	r3, [sp, #20]
 800f67c:	f8d8 3000 	ldr.w	r3, [r8]
 800f680:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f684:	3307      	adds	r3, #7
 800f686:	f023 0307 	bic.w	r3, r3, #7
 800f68a:	f103 0208 	add.w	r2, r3, #8
 800f68e:	f8c8 2000 	str.w	r2, [r8]
 800f692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f696:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f69a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f69e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f6a2:	9307      	str	r3, [sp, #28]
 800f6a4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f6a8:	ee08 0a10 	vmov	s16, r0
 800f6ac:	4b9f      	ldr	r3, [pc, #636]	; (800f92c <_printf_float+0x2dc>)
 800f6ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6b6:	f7f1 fa59 	bl	8000b6c <__aeabi_dcmpun>
 800f6ba:	bb88      	cbnz	r0, 800f720 <_printf_float+0xd0>
 800f6bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6c0:	4b9a      	ldr	r3, [pc, #616]	; (800f92c <_printf_float+0x2dc>)
 800f6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6c6:	f7f1 fa33 	bl	8000b30 <__aeabi_dcmple>
 800f6ca:	bb48      	cbnz	r0, 800f720 <_printf_float+0xd0>
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	4640      	mov	r0, r8
 800f6d2:	4649      	mov	r1, r9
 800f6d4:	f7f1 fa22 	bl	8000b1c <__aeabi_dcmplt>
 800f6d8:	b110      	cbz	r0, 800f6e0 <_printf_float+0x90>
 800f6da:	232d      	movs	r3, #45	; 0x2d
 800f6dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6e0:	4b93      	ldr	r3, [pc, #588]	; (800f930 <_printf_float+0x2e0>)
 800f6e2:	4894      	ldr	r0, [pc, #592]	; (800f934 <_printf_float+0x2e4>)
 800f6e4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f6e8:	bf94      	ite	ls
 800f6ea:	4698      	movls	r8, r3
 800f6ec:	4680      	movhi	r8, r0
 800f6ee:	2303      	movs	r3, #3
 800f6f0:	6123      	str	r3, [r4, #16]
 800f6f2:	9b05      	ldr	r3, [sp, #20]
 800f6f4:	f023 0204 	bic.w	r2, r3, #4
 800f6f8:	6022      	str	r2, [r4, #0]
 800f6fa:	f04f 0900 	mov.w	r9, #0
 800f6fe:	9700      	str	r7, [sp, #0]
 800f700:	4633      	mov	r3, r6
 800f702:	aa0b      	add	r2, sp, #44	; 0x2c
 800f704:	4621      	mov	r1, r4
 800f706:	4628      	mov	r0, r5
 800f708:	f000 f9d8 	bl	800fabc <_printf_common>
 800f70c:	3001      	adds	r0, #1
 800f70e:	f040 8090 	bne.w	800f832 <_printf_float+0x1e2>
 800f712:	f04f 30ff 	mov.w	r0, #4294967295
 800f716:	b00d      	add	sp, #52	; 0x34
 800f718:	ecbd 8b02 	vpop	{d8}
 800f71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f720:	4642      	mov	r2, r8
 800f722:	464b      	mov	r3, r9
 800f724:	4640      	mov	r0, r8
 800f726:	4649      	mov	r1, r9
 800f728:	f7f1 fa20 	bl	8000b6c <__aeabi_dcmpun>
 800f72c:	b140      	cbz	r0, 800f740 <_printf_float+0xf0>
 800f72e:	464b      	mov	r3, r9
 800f730:	2b00      	cmp	r3, #0
 800f732:	bfbc      	itt	lt
 800f734:	232d      	movlt	r3, #45	; 0x2d
 800f736:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f73a:	487f      	ldr	r0, [pc, #508]	; (800f938 <_printf_float+0x2e8>)
 800f73c:	4b7f      	ldr	r3, [pc, #508]	; (800f93c <_printf_float+0x2ec>)
 800f73e:	e7d1      	b.n	800f6e4 <_printf_float+0x94>
 800f740:	6863      	ldr	r3, [r4, #4]
 800f742:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f746:	9206      	str	r2, [sp, #24]
 800f748:	1c5a      	adds	r2, r3, #1
 800f74a:	d13f      	bne.n	800f7cc <_printf_float+0x17c>
 800f74c:	2306      	movs	r3, #6
 800f74e:	6063      	str	r3, [r4, #4]
 800f750:	9b05      	ldr	r3, [sp, #20]
 800f752:	6861      	ldr	r1, [r4, #4]
 800f754:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f758:	2300      	movs	r3, #0
 800f75a:	9303      	str	r3, [sp, #12]
 800f75c:	ab0a      	add	r3, sp, #40	; 0x28
 800f75e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f762:	ab09      	add	r3, sp, #36	; 0x24
 800f764:	ec49 8b10 	vmov	d0, r8, r9
 800f768:	9300      	str	r3, [sp, #0]
 800f76a:	6022      	str	r2, [r4, #0]
 800f76c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f770:	4628      	mov	r0, r5
 800f772:	f7ff fecd 	bl	800f510 <__cvt>
 800f776:	9b06      	ldr	r3, [sp, #24]
 800f778:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f77a:	2b47      	cmp	r3, #71	; 0x47
 800f77c:	4680      	mov	r8, r0
 800f77e:	d108      	bne.n	800f792 <_printf_float+0x142>
 800f780:	1cc8      	adds	r0, r1, #3
 800f782:	db02      	blt.n	800f78a <_printf_float+0x13a>
 800f784:	6863      	ldr	r3, [r4, #4]
 800f786:	4299      	cmp	r1, r3
 800f788:	dd41      	ble.n	800f80e <_printf_float+0x1be>
 800f78a:	f1ab 0b02 	sub.w	fp, fp, #2
 800f78e:	fa5f fb8b 	uxtb.w	fp, fp
 800f792:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f796:	d820      	bhi.n	800f7da <_printf_float+0x18a>
 800f798:	3901      	subs	r1, #1
 800f79a:	465a      	mov	r2, fp
 800f79c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f7a0:	9109      	str	r1, [sp, #36]	; 0x24
 800f7a2:	f7ff ff17 	bl	800f5d4 <__exponent>
 800f7a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7a8:	1813      	adds	r3, r2, r0
 800f7aa:	2a01      	cmp	r2, #1
 800f7ac:	4681      	mov	r9, r0
 800f7ae:	6123      	str	r3, [r4, #16]
 800f7b0:	dc02      	bgt.n	800f7b8 <_printf_float+0x168>
 800f7b2:	6822      	ldr	r2, [r4, #0]
 800f7b4:	07d2      	lsls	r2, r2, #31
 800f7b6:	d501      	bpl.n	800f7bc <_printf_float+0x16c>
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	6123      	str	r3, [r4, #16]
 800f7bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d09c      	beq.n	800f6fe <_printf_float+0xae>
 800f7c4:	232d      	movs	r3, #45	; 0x2d
 800f7c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7ca:	e798      	b.n	800f6fe <_printf_float+0xae>
 800f7cc:	9a06      	ldr	r2, [sp, #24]
 800f7ce:	2a47      	cmp	r2, #71	; 0x47
 800f7d0:	d1be      	bne.n	800f750 <_printf_float+0x100>
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d1bc      	bne.n	800f750 <_printf_float+0x100>
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	e7b9      	b.n	800f74e <_printf_float+0xfe>
 800f7da:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f7de:	d118      	bne.n	800f812 <_printf_float+0x1c2>
 800f7e0:	2900      	cmp	r1, #0
 800f7e2:	6863      	ldr	r3, [r4, #4]
 800f7e4:	dd0b      	ble.n	800f7fe <_printf_float+0x1ae>
 800f7e6:	6121      	str	r1, [r4, #16]
 800f7e8:	b913      	cbnz	r3, 800f7f0 <_printf_float+0x1a0>
 800f7ea:	6822      	ldr	r2, [r4, #0]
 800f7ec:	07d0      	lsls	r0, r2, #31
 800f7ee:	d502      	bpl.n	800f7f6 <_printf_float+0x1a6>
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	440b      	add	r3, r1
 800f7f4:	6123      	str	r3, [r4, #16]
 800f7f6:	65a1      	str	r1, [r4, #88]	; 0x58
 800f7f8:	f04f 0900 	mov.w	r9, #0
 800f7fc:	e7de      	b.n	800f7bc <_printf_float+0x16c>
 800f7fe:	b913      	cbnz	r3, 800f806 <_printf_float+0x1b6>
 800f800:	6822      	ldr	r2, [r4, #0]
 800f802:	07d2      	lsls	r2, r2, #31
 800f804:	d501      	bpl.n	800f80a <_printf_float+0x1ba>
 800f806:	3302      	adds	r3, #2
 800f808:	e7f4      	b.n	800f7f4 <_printf_float+0x1a4>
 800f80a:	2301      	movs	r3, #1
 800f80c:	e7f2      	b.n	800f7f4 <_printf_float+0x1a4>
 800f80e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f814:	4299      	cmp	r1, r3
 800f816:	db05      	blt.n	800f824 <_printf_float+0x1d4>
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	6121      	str	r1, [r4, #16]
 800f81c:	07d8      	lsls	r0, r3, #31
 800f81e:	d5ea      	bpl.n	800f7f6 <_printf_float+0x1a6>
 800f820:	1c4b      	adds	r3, r1, #1
 800f822:	e7e7      	b.n	800f7f4 <_printf_float+0x1a4>
 800f824:	2900      	cmp	r1, #0
 800f826:	bfd4      	ite	le
 800f828:	f1c1 0202 	rsble	r2, r1, #2
 800f82c:	2201      	movgt	r2, #1
 800f82e:	4413      	add	r3, r2
 800f830:	e7e0      	b.n	800f7f4 <_printf_float+0x1a4>
 800f832:	6823      	ldr	r3, [r4, #0]
 800f834:	055a      	lsls	r2, r3, #21
 800f836:	d407      	bmi.n	800f848 <_printf_float+0x1f8>
 800f838:	6923      	ldr	r3, [r4, #16]
 800f83a:	4642      	mov	r2, r8
 800f83c:	4631      	mov	r1, r6
 800f83e:	4628      	mov	r0, r5
 800f840:	47b8      	blx	r7
 800f842:	3001      	adds	r0, #1
 800f844:	d12c      	bne.n	800f8a0 <_printf_float+0x250>
 800f846:	e764      	b.n	800f712 <_printf_float+0xc2>
 800f848:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f84c:	f240 80e0 	bls.w	800fa10 <_printf_float+0x3c0>
 800f850:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f854:	2200      	movs	r2, #0
 800f856:	2300      	movs	r3, #0
 800f858:	f7f1 f956 	bl	8000b08 <__aeabi_dcmpeq>
 800f85c:	2800      	cmp	r0, #0
 800f85e:	d034      	beq.n	800f8ca <_printf_float+0x27a>
 800f860:	4a37      	ldr	r2, [pc, #220]	; (800f940 <_printf_float+0x2f0>)
 800f862:	2301      	movs	r3, #1
 800f864:	4631      	mov	r1, r6
 800f866:	4628      	mov	r0, r5
 800f868:	47b8      	blx	r7
 800f86a:	3001      	adds	r0, #1
 800f86c:	f43f af51 	beq.w	800f712 <_printf_float+0xc2>
 800f870:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f874:	429a      	cmp	r2, r3
 800f876:	db02      	blt.n	800f87e <_printf_float+0x22e>
 800f878:	6823      	ldr	r3, [r4, #0]
 800f87a:	07d8      	lsls	r0, r3, #31
 800f87c:	d510      	bpl.n	800f8a0 <_printf_float+0x250>
 800f87e:	ee18 3a10 	vmov	r3, s16
 800f882:	4652      	mov	r2, sl
 800f884:	4631      	mov	r1, r6
 800f886:	4628      	mov	r0, r5
 800f888:	47b8      	blx	r7
 800f88a:	3001      	adds	r0, #1
 800f88c:	f43f af41 	beq.w	800f712 <_printf_float+0xc2>
 800f890:	f04f 0800 	mov.w	r8, #0
 800f894:	f104 091a 	add.w	r9, r4, #26
 800f898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f89a:	3b01      	subs	r3, #1
 800f89c:	4543      	cmp	r3, r8
 800f89e:	dc09      	bgt.n	800f8b4 <_printf_float+0x264>
 800f8a0:	6823      	ldr	r3, [r4, #0]
 800f8a2:	079b      	lsls	r3, r3, #30
 800f8a4:	f100 8105 	bmi.w	800fab2 <_printf_float+0x462>
 800f8a8:	68e0      	ldr	r0, [r4, #12]
 800f8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8ac:	4298      	cmp	r0, r3
 800f8ae:	bfb8      	it	lt
 800f8b0:	4618      	movlt	r0, r3
 800f8b2:	e730      	b.n	800f716 <_printf_float+0xc6>
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	464a      	mov	r2, r9
 800f8b8:	4631      	mov	r1, r6
 800f8ba:	4628      	mov	r0, r5
 800f8bc:	47b8      	blx	r7
 800f8be:	3001      	adds	r0, #1
 800f8c0:	f43f af27 	beq.w	800f712 <_printf_float+0xc2>
 800f8c4:	f108 0801 	add.w	r8, r8, #1
 800f8c8:	e7e6      	b.n	800f898 <_printf_float+0x248>
 800f8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	dc39      	bgt.n	800f944 <_printf_float+0x2f4>
 800f8d0:	4a1b      	ldr	r2, [pc, #108]	; (800f940 <_printf_float+0x2f0>)
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	4631      	mov	r1, r6
 800f8d6:	4628      	mov	r0, r5
 800f8d8:	47b8      	blx	r7
 800f8da:	3001      	adds	r0, #1
 800f8dc:	f43f af19 	beq.w	800f712 <_printf_float+0xc2>
 800f8e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	d102      	bne.n	800f8ee <_printf_float+0x29e>
 800f8e8:	6823      	ldr	r3, [r4, #0]
 800f8ea:	07d9      	lsls	r1, r3, #31
 800f8ec:	d5d8      	bpl.n	800f8a0 <_printf_float+0x250>
 800f8ee:	ee18 3a10 	vmov	r3, s16
 800f8f2:	4652      	mov	r2, sl
 800f8f4:	4631      	mov	r1, r6
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	47b8      	blx	r7
 800f8fa:	3001      	adds	r0, #1
 800f8fc:	f43f af09 	beq.w	800f712 <_printf_float+0xc2>
 800f900:	f04f 0900 	mov.w	r9, #0
 800f904:	f104 0a1a 	add.w	sl, r4, #26
 800f908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f90a:	425b      	negs	r3, r3
 800f90c:	454b      	cmp	r3, r9
 800f90e:	dc01      	bgt.n	800f914 <_printf_float+0x2c4>
 800f910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f912:	e792      	b.n	800f83a <_printf_float+0x1ea>
 800f914:	2301      	movs	r3, #1
 800f916:	4652      	mov	r2, sl
 800f918:	4631      	mov	r1, r6
 800f91a:	4628      	mov	r0, r5
 800f91c:	47b8      	blx	r7
 800f91e:	3001      	adds	r0, #1
 800f920:	f43f aef7 	beq.w	800f712 <_printf_float+0xc2>
 800f924:	f109 0901 	add.w	r9, r9, #1
 800f928:	e7ee      	b.n	800f908 <_printf_float+0x2b8>
 800f92a:	bf00      	nop
 800f92c:	7fefffff 	.word	0x7fefffff
 800f930:	08016338 	.word	0x08016338
 800f934:	0801633c 	.word	0x0801633c
 800f938:	08016344 	.word	0x08016344
 800f93c:	08016340 	.word	0x08016340
 800f940:	080166a9 	.word	0x080166a9
 800f944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f948:	429a      	cmp	r2, r3
 800f94a:	bfa8      	it	ge
 800f94c:	461a      	movge	r2, r3
 800f94e:	2a00      	cmp	r2, #0
 800f950:	4691      	mov	r9, r2
 800f952:	dc37      	bgt.n	800f9c4 <_printf_float+0x374>
 800f954:	f04f 0b00 	mov.w	fp, #0
 800f958:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f95c:	f104 021a 	add.w	r2, r4, #26
 800f960:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f962:	9305      	str	r3, [sp, #20]
 800f964:	eba3 0309 	sub.w	r3, r3, r9
 800f968:	455b      	cmp	r3, fp
 800f96a:	dc33      	bgt.n	800f9d4 <_printf_float+0x384>
 800f96c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f970:	429a      	cmp	r2, r3
 800f972:	db3b      	blt.n	800f9ec <_printf_float+0x39c>
 800f974:	6823      	ldr	r3, [r4, #0]
 800f976:	07da      	lsls	r2, r3, #31
 800f978:	d438      	bmi.n	800f9ec <_printf_float+0x39c>
 800f97a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f97c:	9b05      	ldr	r3, [sp, #20]
 800f97e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f980:	1ad3      	subs	r3, r2, r3
 800f982:	eba2 0901 	sub.w	r9, r2, r1
 800f986:	4599      	cmp	r9, r3
 800f988:	bfa8      	it	ge
 800f98a:	4699      	movge	r9, r3
 800f98c:	f1b9 0f00 	cmp.w	r9, #0
 800f990:	dc35      	bgt.n	800f9fe <_printf_float+0x3ae>
 800f992:	f04f 0800 	mov.w	r8, #0
 800f996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f99a:	f104 0a1a 	add.w	sl, r4, #26
 800f99e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9a2:	1a9b      	subs	r3, r3, r2
 800f9a4:	eba3 0309 	sub.w	r3, r3, r9
 800f9a8:	4543      	cmp	r3, r8
 800f9aa:	f77f af79 	ble.w	800f8a0 <_printf_float+0x250>
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	4652      	mov	r2, sl
 800f9b2:	4631      	mov	r1, r6
 800f9b4:	4628      	mov	r0, r5
 800f9b6:	47b8      	blx	r7
 800f9b8:	3001      	adds	r0, #1
 800f9ba:	f43f aeaa 	beq.w	800f712 <_printf_float+0xc2>
 800f9be:	f108 0801 	add.w	r8, r8, #1
 800f9c2:	e7ec      	b.n	800f99e <_printf_float+0x34e>
 800f9c4:	4613      	mov	r3, r2
 800f9c6:	4631      	mov	r1, r6
 800f9c8:	4642      	mov	r2, r8
 800f9ca:	4628      	mov	r0, r5
 800f9cc:	47b8      	blx	r7
 800f9ce:	3001      	adds	r0, #1
 800f9d0:	d1c0      	bne.n	800f954 <_printf_float+0x304>
 800f9d2:	e69e      	b.n	800f712 <_printf_float+0xc2>
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	4628      	mov	r0, r5
 800f9da:	9205      	str	r2, [sp, #20]
 800f9dc:	47b8      	blx	r7
 800f9de:	3001      	adds	r0, #1
 800f9e0:	f43f ae97 	beq.w	800f712 <_printf_float+0xc2>
 800f9e4:	9a05      	ldr	r2, [sp, #20]
 800f9e6:	f10b 0b01 	add.w	fp, fp, #1
 800f9ea:	e7b9      	b.n	800f960 <_printf_float+0x310>
 800f9ec:	ee18 3a10 	vmov	r3, s16
 800f9f0:	4652      	mov	r2, sl
 800f9f2:	4631      	mov	r1, r6
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	47b8      	blx	r7
 800f9f8:	3001      	adds	r0, #1
 800f9fa:	d1be      	bne.n	800f97a <_printf_float+0x32a>
 800f9fc:	e689      	b.n	800f712 <_printf_float+0xc2>
 800f9fe:	9a05      	ldr	r2, [sp, #20]
 800fa00:	464b      	mov	r3, r9
 800fa02:	4442      	add	r2, r8
 800fa04:	4631      	mov	r1, r6
 800fa06:	4628      	mov	r0, r5
 800fa08:	47b8      	blx	r7
 800fa0a:	3001      	adds	r0, #1
 800fa0c:	d1c1      	bne.n	800f992 <_printf_float+0x342>
 800fa0e:	e680      	b.n	800f712 <_printf_float+0xc2>
 800fa10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa12:	2a01      	cmp	r2, #1
 800fa14:	dc01      	bgt.n	800fa1a <_printf_float+0x3ca>
 800fa16:	07db      	lsls	r3, r3, #31
 800fa18:	d538      	bpl.n	800fa8c <_printf_float+0x43c>
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	4642      	mov	r2, r8
 800fa1e:	4631      	mov	r1, r6
 800fa20:	4628      	mov	r0, r5
 800fa22:	47b8      	blx	r7
 800fa24:	3001      	adds	r0, #1
 800fa26:	f43f ae74 	beq.w	800f712 <_printf_float+0xc2>
 800fa2a:	ee18 3a10 	vmov	r3, s16
 800fa2e:	4652      	mov	r2, sl
 800fa30:	4631      	mov	r1, r6
 800fa32:	4628      	mov	r0, r5
 800fa34:	47b8      	blx	r7
 800fa36:	3001      	adds	r0, #1
 800fa38:	f43f ae6b 	beq.w	800f712 <_printf_float+0xc2>
 800fa3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa40:	2200      	movs	r2, #0
 800fa42:	2300      	movs	r3, #0
 800fa44:	f7f1 f860 	bl	8000b08 <__aeabi_dcmpeq>
 800fa48:	b9d8      	cbnz	r0, 800fa82 <_printf_float+0x432>
 800fa4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa4c:	f108 0201 	add.w	r2, r8, #1
 800fa50:	3b01      	subs	r3, #1
 800fa52:	4631      	mov	r1, r6
 800fa54:	4628      	mov	r0, r5
 800fa56:	47b8      	blx	r7
 800fa58:	3001      	adds	r0, #1
 800fa5a:	d10e      	bne.n	800fa7a <_printf_float+0x42a>
 800fa5c:	e659      	b.n	800f712 <_printf_float+0xc2>
 800fa5e:	2301      	movs	r3, #1
 800fa60:	4652      	mov	r2, sl
 800fa62:	4631      	mov	r1, r6
 800fa64:	4628      	mov	r0, r5
 800fa66:	47b8      	blx	r7
 800fa68:	3001      	adds	r0, #1
 800fa6a:	f43f ae52 	beq.w	800f712 <_printf_float+0xc2>
 800fa6e:	f108 0801 	add.w	r8, r8, #1
 800fa72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa74:	3b01      	subs	r3, #1
 800fa76:	4543      	cmp	r3, r8
 800fa78:	dcf1      	bgt.n	800fa5e <_printf_float+0x40e>
 800fa7a:	464b      	mov	r3, r9
 800fa7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fa80:	e6dc      	b.n	800f83c <_printf_float+0x1ec>
 800fa82:	f04f 0800 	mov.w	r8, #0
 800fa86:	f104 0a1a 	add.w	sl, r4, #26
 800fa8a:	e7f2      	b.n	800fa72 <_printf_float+0x422>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	4642      	mov	r2, r8
 800fa90:	e7df      	b.n	800fa52 <_printf_float+0x402>
 800fa92:	2301      	movs	r3, #1
 800fa94:	464a      	mov	r2, r9
 800fa96:	4631      	mov	r1, r6
 800fa98:	4628      	mov	r0, r5
 800fa9a:	47b8      	blx	r7
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	f43f ae38 	beq.w	800f712 <_printf_float+0xc2>
 800faa2:	f108 0801 	add.w	r8, r8, #1
 800faa6:	68e3      	ldr	r3, [r4, #12]
 800faa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800faaa:	1a5b      	subs	r3, r3, r1
 800faac:	4543      	cmp	r3, r8
 800faae:	dcf0      	bgt.n	800fa92 <_printf_float+0x442>
 800fab0:	e6fa      	b.n	800f8a8 <_printf_float+0x258>
 800fab2:	f04f 0800 	mov.w	r8, #0
 800fab6:	f104 0919 	add.w	r9, r4, #25
 800faba:	e7f4      	b.n	800faa6 <_printf_float+0x456>

0800fabc <_printf_common>:
 800fabc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fac0:	4616      	mov	r6, r2
 800fac2:	4699      	mov	r9, r3
 800fac4:	688a      	ldr	r2, [r1, #8]
 800fac6:	690b      	ldr	r3, [r1, #16]
 800fac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800facc:	4293      	cmp	r3, r2
 800face:	bfb8      	it	lt
 800fad0:	4613      	movlt	r3, r2
 800fad2:	6033      	str	r3, [r6, #0]
 800fad4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fad8:	4607      	mov	r7, r0
 800fada:	460c      	mov	r4, r1
 800fadc:	b10a      	cbz	r2, 800fae2 <_printf_common+0x26>
 800fade:	3301      	adds	r3, #1
 800fae0:	6033      	str	r3, [r6, #0]
 800fae2:	6823      	ldr	r3, [r4, #0]
 800fae4:	0699      	lsls	r1, r3, #26
 800fae6:	bf42      	ittt	mi
 800fae8:	6833      	ldrmi	r3, [r6, #0]
 800faea:	3302      	addmi	r3, #2
 800faec:	6033      	strmi	r3, [r6, #0]
 800faee:	6825      	ldr	r5, [r4, #0]
 800faf0:	f015 0506 	ands.w	r5, r5, #6
 800faf4:	d106      	bne.n	800fb04 <_printf_common+0x48>
 800faf6:	f104 0a19 	add.w	sl, r4, #25
 800fafa:	68e3      	ldr	r3, [r4, #12]
 800fafc:	6832      	ldr	r2, [r6, #0]
 800fafe:	1a9b      	subs	r3, r3, r2
 800fb00:	42ab      	cmp	r3, r5
 800fb02:	dc26      	bgt.n	800fb52 <_printf_common+0x96>
 800fb04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb08:	1e13      	subs	r3, r2, #0
 800fb0a:	6822      	ldr	r2, [r4, #0]
 800fb0c:	bf18      	it	ne
 800fb0e:	2301      	movne	r3, #1
 800fb10:	0692      	lsls	r2, r2, #26
 800fb12:	d42b      	bmi.n	800fb6c <_printf_common+0xb0>
 800fb14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb18:	4649      	mov	r1, r9
 800fb1a:	4638      	mov	r0, r7
 800fb1c:	47c0      	blx	r8
 800fb1e:	3001      	adds	r0, #1
 800fb20:	d01e      	beq.n	800fb60 <_printf_common+0xa4>
 800fb22:	6823      	ldr	r3, [r4, #0]
 800fb24:	68e5      	ldr	r5, [r4, #12]
 800fb26:	6832      	ldr	r2, [r6, #0]
 800fb28:	f003 0306 	and.w	r3, r3, #6
 800fb2c:	2b04      	cmp	r3, #4
 800fb2e:	bf08      	it	eq
 800fb30:	1aad      	subeq	r5, r5, r2
 800fb32:	68a3      	ldr	r3, [r4, #8]
 800fb34:	6922      	ldr	r2, [r4, #16]
 800fb36:	bf0c      	ite	eq
 800fb38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb3c:	2500      	movne	r5, #0
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	bfc4      	itt	gt
 800fb42:	1a9b      	subgt	r3, r3, r2
 800fb44:	18ed      	addgt	r5, r5, r3
 800fb46:	2600      	movs	r6, #0
 800fb48:	341a      	adds	r4, #26
 800fb4a:	42b5      	cmp	r5, r6
 800fb4c:	d11a      	bne.n	800fb84 <_printf_common+0xc8>
 800fb4e:	2000      	movs	r0, #0
 800fb50:	e008      	b.n	800fb64 <_printf_common+0xa8>
 800fb52:	2301      	movs	r3, #1
 800fb54:	4652      	mov	r2, sl
 800fb56:	4649      	mov	r1, r9
 800fb58:	4638      	mov	r0, r7
 800fb5a:	47c0      	blx	r8
 800fb5c:	3001      	adds	r0, #1
 800fb5e:	d103      	bne.n	800fb68 <_printf_common+0xac>
 800fb60:	f04f 30ff 	mov.w	r0, #4294967295
 800fb64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb68:	3501      	adds	r5, #1
 800fb6a:	e7c6      	b.n	800fafa <_printf_common+0x3e>
 800fb6c:	18e1      	adds	r1, r4, r3
 800fb6e:	1c5a      	adds	r2, r3, #1
 800fb70:	2030      	movs	r0, #48	; 0x30
 800fb72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb76:	4422      	add	r2, r4
 800fb78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb80:	3302      	adds	r3, #2
 800fb82:	e7c7      	b.n	800fb14 <_printf_common+0x58>
 800fb84:	2301      	movs	r3, #1
 800fb86:	4622      	mov	r2, r4
 800fb88:	4649      	mov	r1, r9
 800fb8a:	4638      	mov	r0, r7
 800fb8c:	47c0      	blx	r8
 800fb8e:	3001      	adds	r0, #1
 800fb90:	d0e6      	beq.n	800fb60 <_printf_common+0xa4>
 800fb92:	3601      	adds	r6, #1
 800fb94:	e7d9      	b.n	800fb4a <_printf_common+0x8e>
	...

0800fb98 <_printf_i>:
 800fb98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	4691      	mov	r9, r2
 800fba0:	7e27      	ldrb	r7, [r4, #24]
 800fba2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fba4:	2f78      	cmp	r7, #120	; 0x78
 800fba6:	4680      	mov	r8, r0
 800fba8:	469a      	mov	sl, r3
 800fbaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fbae:	d807      	bhi.n	800fbc0 <_printf_i+0x28>
 800fbb0:	2f62      	cmp	r7, #98	; 0x62
 800fbb2:	d80a      	bhi.n	800fbca <_printf_i+0x32>
 800fbb4:	2f00      	cmp	r7, #0
 800fbb6:	f000 80d8 	beq.w	800fd6a <_printf_i+0x1d2>
 800fbba:	2f58      	cmp	r7, #88	; 0x58
 800fbbc:	f000 80a3 	beq.w	800fd06 <_printf_i+0x16e>
 800fbc0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fbc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fbc8:	e03a      	b.n	800fc40 <_printf_i+0xa8>
 800fbca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fbce:	2b15      	cmp	r3, #21
 800fbd0:	d8f6      	bhi.n	800fbc0 <_printf_i+0x28>
 800fbd2:	a001      	add	r0, pc, #4	; (adr r0, 800fbd8 <_printf_i+0x40>)
 800fbd4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800fbd8:	0800fc31 	.word	0x0800fc31
 800fbdc:	0800fc45 	.word	0x0800fc45
 800fbe0:	0800fbc1 	.word	0x0800fbc1
 800fbe4:	0800fbc1 	.word	0x0800fbc1
 800fbe8:	0800fbc1 	.word	0x0800fbc1
 800fbec:	0800fbc1 	.word	0x0800fbc1
 800fbf0:	0800fc45 	.word	0x0800fc45
 800fbf4:	0800fbc1 	.word	0x0800fbc1
 800fbf8:	0800fbc1 	.word	0x0800fbc1
 800fbfc:	0800fbc1 	.word	0x0800fbc1
 800fc00:	0800fbc1 	.word	0x0800fbc1
 800fc04:	0800fd51 	.word	0x0800fd51
 800fc08:	0800fc75 	.word	0x0800fc75
 800fc0c:	0800fd33 	.word	0x0800fd33
 800fc10:	0800fbc1 	.word	0x0800fbc1
 800fc14:	0800fbc1 	.word	0x0800fbc1
 800fc18:	0800fd73 	.word	0x0800fd73
 800fc1c:	0800fbc1 	.word	0x0800fbc1
 800fc20:	0800fc75 	.word	0x0800fc75
 800fc24:	0800fbc1 	.word	0x0800fbc1
 800fc28:	0800fbc1 	.word	0x0800fbc1
 800fc2c:	0800fd3b 	.word	0x0800fd3b
 800fc30:	680b      	ldr	r3, [r1, #0]
 800fc32:	1d1a      	adds	r2, r3, #4
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	600a      	str	r2, [r1, #0]
 800fc38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800fc3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc40:	2301      	movs	r3, #1
 800fc42:	e0a3      	b.n	800fd8c <_printf_i+0x1f4>
 800fc44:	6825      	ldr	r5, [r4, #0]
 800fc46:	6808      	ldr	r0, [r1, #0]
 800fc48:	062e      	lsls	r6, r5, #24
 800fc4a:	f100 0304 	add.w	r3, r0, #4
 800fc4e:	d50a      	bpl.n	800fc66 <_printf_i+0xce>
 800fc50:	6805      	ldr	r5, [r0, #0]
 800fc52:	600b      	str	r3, [r1, #0]
 800fc54:	2d00      	cmp	r5, #0
 800fc56:	da03      	bge.n	800fc60 <_printf_i+0xc8>
 800fc58:	232d      	movs	r3, #45	; 0x2d
 800fc5a:	426d      	negs	r5, r5
 800fc5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc60:	485e      	ldr	r0, [pc, #376]	; (800fddc <_printf_i+0x244>)
 800fc62:	230a      	movs	r3, #10
 800fc64:	e019      	b.n	800fc9a <_printf_i+0x102>
 800fc66:	f015 0f40 	tst.w	r5, #64	; 0x40
 800fc6a:	6805      	ldr	r5, [r0, #0]
 800fc6c:	600b      	str	r3, [r1, #0]
 800fc6e:	bf18      	it	ne
 800fc70:	b22d      	sxthne	r5, r5
 800fc72:	e7ef      	b.n	800fc54 <_printf_i+0xbc>
 800fc74:	680b      	ldr	r3, [r1, #0]
 800fc76:	6825      	ldr	r5, [r4, #0]
 800fc78:	1d18      	adds	r0, r3, #4
 800fc7a:	6008      	str	r0, [r1, #0]
 800fc7c:	0628      	lsls	r0, r5, #24
 800fc7e:	d501      	bpl.n	800fc84 <_printf_i+0xec>
 800fc80:	681d      	ldr	r5, [r3, #0]
 800fc82:	e002      	b.n	800fc8a <_printf_i+0xf2>
 800fc84:	0669      	lsls	r1, r5, #25
 800fc86:	d5fb      	bpl.n	800fc80 <_printf_i+0xe8>
 800fc88:	881d      	ldrh	r5, [r3, #0]
 800fc8a:	4854      	ldr	r0, [pc, #336]	; (800fddc <_printf_i+0x244>)
 800fc8c:	2f6f      	cmp	r7, #111	; 0x6f
 800fc8e:	bf0c      	ite	eq
 800fc90:	2308      	moveq	r3, #8
 800fc92:	230a      	movne	r3, #10
 800fc94:	2100      	movs	r1, #0
 800fc96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc9a:	6866      	ldr	r6, [r4, #4]
 800fc9c:	60a6      	str	r6, [r4, #8]
 800fc9e:	2e00      	cmp	r6, #0
 800fca0:	bfa2      	ittt	ge
 800fca2:	6821      	ldrge	r1, [r4, #0]
 800fca4:	f021 0104 	bicge.w	r1, r1, #4
 800fca8:	6021      	strge	r1, [r4, #0]
 800fcaa:	b90d      	cbnz	r5, 800fcb0 <_printf_i+0x118>
 800fcac:	2e00      	cmp	r6, #0
 800fcae:	d04d      	beq.n	800fd4c <_printf_i+0x1b4>
 800fcb0:	4616      	mov	r6, r2
 800fcb2:	fbb5 f1f3 	udiv	r1, r5, r3
 800fcb6:	fb03 5711 	mls	r7, r3, r1, r5
 800fcba:	5dc7      	ldrb	r7, [r0, r7]
 800fcbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fcc0:	462f      	mov	r7, r5
 800fcc2:	42bb      	cmp	r3, r7
 800fcc4:	460d      	mov	r5, r1
 800fcc6:	d9f4      	bls.n	800fcb2 <_printf_i+0x11a>
 800fcc8:	2b08      	cmp	r3, #8
 800fcca:	d10b      	bne.n	800fce4 <_printf_i+0x14c>
 800fccc:	6823      	ldr	r3, [r4, #0]
 800fcce:	07df      	lsls	r7, r3, #31
 800fcd0:	d508      	bpl.n	800fce4 <_printf_i+0x14c>
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	6861      	ldr	r1, [r4, #4]
 800fcd6:	4299      	cmp	r1, r3
 800fcd8:	bfde      	ittt	le
 800fcda:	2330      	movle	r3, #48	; 0x30
 800fcdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fce4:	1b92      	subs	r2, r2, r6
 800fce6:	6122      	str	r2, [r4, #16]
 800fce8:	f8cd a000 	str.w	sl, [sp]
 800fcec:	464b      	mov	r3, r9
 800fcee:	aa03      	add	r2, sp, #12
 800fcf0:	4621      	mov	r1, r4
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	f7ff fee2 	bl	800fabc <_printf_common>
 800fcf8:	3001      	adds	r0, #1
 800fcfa:	d14c      	bne.n	800fd96 <_printf_i+0x1fe>
 800fcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800fd00:	b004      	add	sp, #16
 800fd02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd06:	4835      	ldr	r0, [pc, #212]	; (800fddc <_printf_i+0x244>)
 800fd08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fd0c:	6823      	ldr	r3, [r4, #0]
 800fd0e:	680e      	ldr	r6, [r1, #0]
 800fd10:	061f      	lsls	r7, r3, #24
 800fd12:	f856 5b04 	ldr.w	r5, [r6], #4
 800fd16:	600e      	str	r6, [r1, #0]
 800fd18:	d514      	bpl.n	800fd44 <_printf_i+0x1ac>
 800fd1a:	07d9      	lsls	r1, r3, #31
 800fd1c:	bf44      	itt	mi
 800fd1e:	f043 0320 	orrmi.w	r3, r3, #32
 800fd22:	6023      	strmi	r3, [r4, #0]
 800fd24:	b91d      	cbnz	r5, 800fd2e <_printf_i+0x196>
 800fd26:	6823      	ldr	r3, [r4, #0]
 800fd28:	f023 0320 	bic.w	r3, r3, #32
 800fd2c:	6023      	str	r3, [r4, #0]
 800fd2e:	2310      	movs	r3, #16
 800fd30:	e7b0      	b.n	800fc94 <_printf_i+0xfc>
 800fd32:	6823      	ldr	r3, [r4, #0]
 800fd34:	f043 0320 	orr.w	r3, r3, #32
 800fd38:	6023      	str	r3, [r4, #0]
 800fd3a:	2378      	movs	r3, #120	; 0x78
 800fd3c:	4828      	ldr	r0, [pc, #160]	; (800fde0 <_printf_i+0x248>)
 800fd3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd42:	e7e3      	b.n	800fd0c <_printf_i+0x174>
 800fd44:	065e      	lsls	r6, r3, #25
 800fd46:	bf48      	it	mi
 800fd48:	b2ad      	uxthmi	r5, r5
 800fd4a:	e7e6      	b.n	800fd1a <_printf_i+0x182>
 800fd4c:	4616      	mov	r6, r2
 800fd4e:	e7bb      	b.n	800fcc8 <_printf_i+0x130>
 800fd50:	680b      	ldr	r3, [r1, #0]
 800fd52:	6826      	ldr	r6, [r4, #0]
 800fd54:	6960      	ldr	r0, [r4, #20]
 800fd56:	1d1d      	adds	r5, r3, #4
 800fd58:	600d      	str	r5, [r1, #0]
 800fd5a:	0635      	lsls	r5, r6, #24
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	d501      	bpl.n	800fd64 <_printf_i+0x1cc>
 800fd60:	6018      	str	r0, [r3, #0]
 800fd62:	e002      	b.n	800fd6a <_printf_i+0x1d2>
 800fd64:	0671      	lsls	r1, r6, #25
 800fd66:	d5fb      	bpl.n	800fd60 <_printf_i+0x1c8>
 800fd68:	8018      	strh	r0, [r3, #0]
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	6123      	str	r3, [r4, #16]
 800fd6e:	4616      	mov	r6, r2
 800fd70:	e7ba      	b.n	800fce8 <_printf_i+0x150>
 800fd72:	680b      	ldr	r3, [r1, #0]
 800fd74:	1d1a      	adds	r2, r3, #4
 800fd76:	600a      	str	r2, [r1, #0]
 800fd78:	681e      	ldr	r6, [r3, #0]
 800fd7a:	6862      	ldr	r2, [r4, #4]
 800fd7c:	2100      	movs	r1, #0
 800fd7e:	4630      	mov	r0, r6
 800fd80:	f7f0 fa4e 	bl	8000220 <memchr>
 800fd84:	b108      	cbz	r0, 800fd8a <_printf_i+0x1f2>
 800fd86:	1b80      	subs	r0, r0, r6
 800fd88:	6060      	str	r0, [r4, #4]
 800fd8a:	6863      	ldr	r3, [r4, #4]
 800fd8c:	6123      	str	r3, [r4, #16]
 800fd8e:	2300      	movs	r3, #0
 800fd90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd94:	e7a8      	b.n	800fce8 <_printf_i+0x150>
 800fd96:	6923      	ldr	r3, [r4, #16]
 800fd98:	4632      	mov	r2, r6
 800fd9a:	4649      	mov	r1, r9
 800fd9c:	4640      	mov	r0, r8
 800fd9e:	47d0      	blx	sl
 800fda0:	3001      	adds	r0, #1
 800fda2:	d0ab      	beq.n	800fcfc <_printf_i+0x164>
 800fda4:	6823      	ldr	r3, [r4, #0]
 800fda6:	079b      	lsls	r3, r3, #30
 800fda8:	d413      	bmi.n	800fdd2 <_printf_i+0x23a>
 800fdaa:	68e0      	ldr	r0, [r4, #12]
 800fdac:	9b03      	ldr	r3, [sp, #12]
 800fdae:	4298      	cmp	r0, r3
 800fdb0:	bfb8      	it	lt
 800fdb2:	4618      	movlt	r0, r3
 800fdb4:	e7a4      	b.n	800fd00 <_printf_i+0x168>
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	4632      	mov	r2, r6
 800fdba:	4649      	mov	r1, r9
 800fdbc:	4640      	mov	r0, r8
 800fdbe:	47d0      	blx	sl
 800fdc0:	3001      	adds	r0, #1
 800fdc2:	d09b      	beq.n	800fcfc <_printf_i+0x164>
 800fdc4:	3501      	adds	r5, #1
 800fdc6:	68e3      	ldr	r3, [r4, #12]
 800fdc8:	9903      	ldr	r1, [sp, #12]
 800fdca:	1a5b      	subs	r3, r3, r1
 800fdcc:	42ab      	cmp	r3, r5
 800fdce:	dcf2      	bgt.n	800fdb6 <_printf_i+0x21e>
 800fdd0:	e7eb      	b.n	800fdaa <_printf_i+0x212>
 800fdd2:	2500      	movs	r5, #0
 800fdd4:	f104 0619 	add.w	r6, r4, #25
 800fdd8:	e7f5      	b.n	800fdc6 <_printf_i+0x22e>
 800fdda:	bf00      	nop
 800fddc:	08016348 	.word	0x08016348
 800fde0:	08016359 	.word	0x08016359

0800fde4 <_scanf_float>:
 800fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fde8:	b087      	sub	sp, #28
 800fdea:	4617      	mov	r7, r2
 800fdec:	9303      	str	r3, [sp, #12]
 800fdee:	688b      	ldr	r3, [r1, #8]
 800fdf0:	1e5a      	subs	r2, r3, #1
 800fdf2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fdf6:	bf83      	ittte	hi
 800fdf8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fdfc:	195b      	addhi	r3, r3, r5
 800fdfe:	9302      	strhi	r3, [sp, #8]
 800fe00:	2300      	movls	r3, #0
 800fe02:	bf86      	itte	hi
 800fe04:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fe08:	608b      	strhi	r3, [r1, #8]
 800fe0a:	9302      	strls	r3, [sp, #8]
 800fe0c:	680b      	ldr	r3, [r1, #0]
 800fe0e:	468b      	mov	fp, r1
 800fe10:	2500      	movs	r5, #0
 800fe12:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fe16:	f84b 3b1c 	str.w	r3, [fp], #28
 800fe1a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fe1e:	4680      	mov	r8, r0
 800fe20:	460c      	mov	r4, r1
 800fe22:	465e      	mov	r6, fp
 800fe24:	46aa      	mov	sl, r5
 800fe26:	46a9      	mov	r9, r5
 800fe28:	9501      	str	r5, [sp, #4]
 800fe2a:	68a2      	ldr	r2, [r4, #8]
 800fe2c:	b152      	cbz	r2, 800fe44 <_scanf_float+0x60>
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	2b4e      	cmp	r3, #78	; 0x4e
 800fe34:	d864      	bhi.n	800ff00 <_scanf_float+0x11c>
 800fe36:	2b40      	cmp	r3, #64	; 0x40
 800fe38:	d83c      	bhi.n	800feb4 <_scanf_float+0xd0>
 800fe3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fe3e:	b2c8      	uxtb	r0, r1
 800fe40:	280e      	cmp	r0, #14
 800fe42:	d93a      	bls.n	800feba <_scanf_float+0xd6>
 800fe44:	f1b9 0f00 	cmp.w	r9, #0
 800fe48:	d003      	beq.n	800fe52 <_scanf_float+0x6e>
 800fe4a:	6823      	ldr	r3, [r4, #0]
 800fe4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe50:	6023      	str	r3, [r4, #0]
 800fe52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe56:	f1ba 0f01 	cmp.w	sl, #1
 800fe5a:	f200 8113 	bhi.w	8010084 <_scanf_float+0x2a0>
 800fe5e:	455e      	cmp	r6, fp
 800fe60:	f200 8105 	bhi.w	801006e <_scanf_float+0x28a>
 800fe64:	2501      	movs	r5, #1
 800fe66:	4628      	mov	r0, r5
 800fe68:	b007      	add	sp, #28
 800fe6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fe72:	2a0d      	cmp	r2, #13
 800fe74:	d8e6      	bhi.n	800fe44 <_scanf_float+0x60>
 800fe76:	a101      	add	r1, pc, #4	; (adr r1, 800fe7c <_scanf_float+0x98>)
 800fe78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fe7c:	0800ffbb 	.word	0x0800ffbb
 800fe80:	0800fe45 	.word	0x0800fe45
 800fe84:	0800fe45 	.word	0x0800fe45
 800fe88:	0800fe45 	.word	0x0800fe45
 800fe8c:	0801001b 	.word	0x0801001b
 800fe90:	0800fff3 	.word	0x0800fff3
 800fe94:	0800fe45 	.word	0x0800fe45
 800fe98:	0800fe45 	.word	0x0800fe45
 800fe9c:	0800ffc9 	.word	0x0800ffc9
 800fea0:	0800fe45 	.word	0x0800fe45
 800fea4:	0800fe45 	.word	0x0800fe45
 800fea8:	0800fe45 	.word	0x0800fe45
 800feac:	0800fe45 	.word	0x0800fe45
 800feb0:	0800ff81 	.word	0x0800ff81
 800feb4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800feb8:	e7db      	b.n	800fe72 <_scanf_float+0x8e>
 800feba:	290e      	cmp	r1, #14
 800febc:	d8c2      	bhi.n	800fe44 <_scanf_float+0x60>
 800febe:	a001      	add	r0, pc, #4	; (adr r0, 800fec4 <_scanf_float+0xe0>)
 800fec0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fec4:	0800ff73 	.word	0x0800ff73
 800fec8:	0800fe45 	.word	0x0800fe45
 800fecc:	0800ff73 	.word	0x0800ff73
 800fed0:	08010007 	.word	0x08010007
 800fed4:	0800fe45 	.word	0x0800fe45
 800fed8:	0800ff21 	.word	0x0800ff21
 800fedc:	0800ff5d 	.word	0x0800ff5d
 800fee0:	0800ff5d 	.word	0x0800ff5d
 800fee4:	0800ff5d 	.word	0x0800ff5d
 800fee8:	0800ff5d 	.word	0x0800ff5d
 800feec:	0800ff5d 	.word	0x0800ff5d
 800fef0:	0800ff5d 	.word	0x0800ff5d
 800fef4:	0800ff5d 	.word	0x0800ff5d
 800fef8:	0800ff5d 	.word	0x0800ff5d
 800fefc:	0800ff5d 	.word	0x0800ff5d
 800ff00:	2b6e      	cmp	r3, #110	; 0x6e
 800ff02:	d809      	bhi.n	800ff18 <_scanf_float+0x134>
 800ff04:	2b60      	cmp	r3, #96	; 0x60
 800ff06:	d8b2      	bhi.n	800fe6e <_scanf_float+0x8a>
 800ff08:	2b54      	cmp	r3, #84	; 0x54
 800ff0a:	d077      	beq.n	800fffc <_scanf_float+0x218>
 800ff0c:	2b59      	cmp	r3, #89	; 0x59
 800ff0e:	d199      	bne.n	800fe44 <_scanf_float+0x60>
 800ff10:	2d07      	cmp	r5, #7
 800ff12:	d197      	bne.n	800fe44 <_scanf_float+0x60>
 800ff14:	2508      	movs	r5, #8
 800ff16:	e029      	b.n	800ff6c <_scanf_float+0x188>
 800ff18:	2b74      	cmp	r3, #116	; 0x74
 800ff1a:	d06f      	beq.n	800fffc <_scanf_float+0x218>
 800ff1c:	2b79      	cmp	r3, #121	; 0x79
 800ff1e:	e7f6      	b.n	800ff0e <_scanf_float+0x12a>
 800ff20:	6821      	ldr	r1, [r4, #0]
 800ff22:	05c8      	lsls	r0, r1, #23
 800ff24:	d51a      	bpl.n	800ff5c <_scanf_float+0x178>
 800ff26:	9b02      	ldr	r3, [sp, #8]
 800ff28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ff2c:	6021      	str	r1, [r4, #0]
 800ff2e:	f109 0901 	add.w	r9, r9, #1
 800ff32:	b11b      	cbz	r3, 800ff3c <_scanf_float+0x158>
 800ff34:	3b01      	subs	r3, #1
 800ff36:	3201      	adds	r2, #1
 800ff38:	9302      	str	r3, [sp, #8]
 800ff3a:	60a2      	str	r2, [r4, #8]
 800ff3c:	68a3      	ldr	r3, [r4, #8]
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	60a3      	str	r3, [r4, #8]
 800ff42:	6923      	ldr	r3, [r4, #16]
 800ff44:	3301      	adds	r3, #1
 800ff46:	6123      	str	r3, [r4, #16]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	3b01      	subs	r3, #1
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	607b      	str	r3, [r7, #4]
 800ff50:	f340 8084 	ble.w	801005c <_scanf_float+0x278>
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	3301      	adds	r3, #1
 800ff58:	603b      	str	r3, [r7, #0]
 800ff5a:	e766      	b.n	800fe2a <_scanf_float+0x46>
 800ff5c:	eb1a 0f05 	cmn.w	sl, r5
 800ff60:	f47f af70 	bne.w	800fe44 <_scanf_float+0x60>
 800ff64:	6822      	ldr	r2, [r4, #0]
 800ff66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ff6a:	6022      	str	r2, [r4, #0]
 800ff6c:	f806 3b01 	strb.w	r3, [r6], #1
 800ff70:	e7e4      	b.n	800ff3c <_scanf_float+0x158>
 800ff72:	6822      	ldr	r2, [r4, #0]
 800ff74:	0610      	lsls	r0, r2, #24
 800ff76:	f57f af65 	bpl.w	800fe44 <_scanf_float+0x60>
 800ff7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ff7e:	e7f4      	b.n	800ff6a <_scanf_float+0x186>
 800ff80:	f1ba 0f00 	cmp.w	sl, #0
 800ff84:	d10e      	bne.n	800ffa4 <_scanf_float+0x1c0>
 800ff86:	f1b9 0f00 	cmp.w	r9, #0
 800ff8a:	d10e      	bne.n	800ffaa <_scanf_float+0x1c6>
 800ff8c:	6822      	ldr	r2, [r4, #0]
 800ff8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ff92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ff96:	d108      	bne.n	800ffaa <_scanf_float+0x1c6>
 800ff98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ff9c:	6022      	str	r2, [r4, #0]
 800ff9e:	f04f 0a01 	mov.w	sl, #1
 800ffa2:	e7e3      	b.n	800ff6c <_scanf_float+0x188>
 800ffa4:	f1ba 0f02 	cmp.w	sl, #2
 800ffa8:	d055      	beq.n	8010056 <_scanf_float+0x272>
 800ffaa:	2d01      	cmp	r5, #1
 800ffac:	d002      	beq.n	800ffb4 <_scanf_float+0x1d0>
 800ffae:	2d04      	cmp	r5, #4
 800ffb0:	f47f af48 	bne.w	800fe44 <_scanf_float+0x60>
 800ffb4:	3501      	adds	r5, #1
 800ffb6:	b2ed      	uxtb	r5, r5
 800ffb8:	e7d8      	b.n	800ff6c <_scanf_float+0x188>
 800ffba:	f1ba 0f01 	cmp.w	sl, #1
 800ffbe:	f47f af41 	bne.w	800fe44 <_scanf_float+0x60>
 800ffc2:	f04f 0a02 	mov.w	sl, #2
 800ffc6:	e7d1      	b.n	800ff6c <_scanf_float+0x188>
 800ffc8:	b97d      	cbnz	r5, 800ffea <_scanf_float+0x206>
 800ffca:	f1b9 0f00 	cmp.w	r9, #0
 800ffce:	f47f af3c 	bne.w	800fe4a <_scanf_float+0x66>
 800ffd2:	6822      	ldr	r2, [r4, #0]
 800ffd4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ffd8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ffdc:	f47f af39 	bne.w	800fe52 <_scanf_float+0x6e>
 800ffe0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ffe4:	6022      	str	r2, [r4, #0]
 800ffe6:	2501      	movs	r5, #1
 800ffe8:	e7c0      	b.n	800ff6c <_scanf_float+0x188>
 800ffea:	2d03      	cmp	r5, #3
 800ffec:	d0e2      	beq.n	800ffb4 <_scanf_float+0x1d0>
 800ffee:	2d05      	cmp	r5, #5
 800fff0:	e7de      	b.n	800ffb0 <_scanf_float+0x1cc>
 800fff2:	2d02      	cmp	r5, #2
 800fff4:	f47f af26 	bne.w	800fe44 <_scanf_float+0x60>
 800fff8:	2503      	movs	r5, #3
 800fffa:	e7b7      	b.n	800ff6c <_scanf_float+0x188>
 800fffc:	2d06      	cmp	r5, #6
 800fffe:	f47f af21 	bne.w	800fe44 <_scanf_float+0x60>
 8010002:	2507      	movs	r5, #7
 8010004:	e7b2      	b.n	800ff6c <_scanf_float+0x188>
 8010006:	6822      	ldr	r2, [r4, #0]
 8010008:	0591      	lsls	r1, r2, #22
 801000a:	f57f af1b 	bpl.w	800fe44 <_scanf_float+0x60>
 801000e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010012:	6022      	str	r2, [r4, #0]
 8010014:	f8cd 9004 	str.w	r9, [sp, #4]
 8010018:	e7a8      	b.n	800ff6c <_scanf_float+0x188>
 801001a:	6822      	ldr	r2, [r4, #0]
 801001c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010020:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010024:	d006      	beq.n	8010034 <_scanf_float+0x250>
 8010026:	0550      	lsls	r0, r2, #21
 8010028:	f57f af0c 	bpl.w	800fe44 <_scanf_float+0x60>
 801002c:	f1b9 0f00 	cmp.w	r9, #0
 8010030:	f43f af0f 	beq.w	800fe52 <_scanf_float+0x6e>
 8010034:	0591      	lsls	r1, r2, #22
 8010036:	bf58      	it	pl
 8010038:	9901      	ldrpl	r1, [sp, #4]
 801003a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801003e:	bf58      	it	pl
 8010040:	eba9 0101 	subpl.w	r1, r9, r1
 8010044:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010048:	bf58      	it	pl
 801004a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801004e:	6022      	str	r2, [r4, #0]
 8010050:	f04f 0900 	mov.w	r9, #0
 8010054:	e78a      	b.n	800ff6c <_scanf_float+0x188>
 8010056:	f04f 0a03 	mov.w	sl, #3
 801005a:	e787      	b.n	800ff6c <_scanf_float+0x188>
 801005c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010060:	4639      	mov	r1, r7
 8010062:	4640      	mov	r0, r8
 8010064:	4798      	blx	r3
 8010066:	2800      	cmp	r0, #0
 8010068:	f43f aedf 	beq.w	800fe2a <_scanf_float+0x46>
 801006c:	e6ea      	b.n	800fe44 <_scanf_float+0x60>
 801006e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010072:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010076:	463a      	mov	r2, r7
 8010078:	4640      	mov	r0, r8
 801007a:	4798      	blx	r3
 801007c:	6923      	ldr	r3, [r4, #16]
 801007e:	3b01      	subs	r3, #1
 8010080:	6123      	str	r3, [r4, #16]
 8010082:	e6ec      	b.n	800fe5e <_scanf_float+0x7a>
 8010084:	1e6b      	subs	r3, r5, #1
 8010086:	2b06      	cmp	r3, #6
 8010088:	d825      	bhi.n	80100d6 <_scanf_float+0x2f2>
 801008a:	2d02      	cmp	r5, #2
 801008c:	d836      	bhi.n	80100fc <_scanf_float+0x318>
 801008e:	455e      	cmp	r6, fp
 8010090:	f67f aee8 	bls.w	800fe64 <_scanf_float+0x80>
 8010094:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010098:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801009c:	463a      	mov	r2, r7
 801009e:	4640      	mov	r0, r8
 80100a0:	4798      	blx	r3
 80100a2:	6923      	ldr	r3, [r4, #16]
 80100a4:	3b01      	subs	r3, #1
 80100a6:	6123      	str	r3, [r4, #16]
 80100a8:	e7f1      	b.n	801008e <_scanf_float+0x2aa>
 80100aa:	9802      	ldr	r0, [sp, #8]
 80100ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80100b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80100b4:	9002      	str	r0, [sp, #8]
 80100b6:	463a      	mov	r2, r7
 80100b8:	4640      	mov	r0, r8
 80100ba:	4798      	blx	r3
 80100bc:	6923      	ldr	r3, [r4, #16]
 80100be:	3b01      	subs	r3, #1
 80100c0:	6123      	str	r3, [r4, #16]
 80100c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80100c6:	fa5f fa8a 	uxtb.w	sl, sl
 80100ca:	f1ba 0f02 	cmp.w	sl, #2
 80100ce:	d1ec      	bne.n	80100aa <_scanf_float+0x2c6>
 80100d0:	3d03      	subs	r5, #3
 80100d2:	b2ed      	uxtb	r5, r5
 80100d4:	1b76      	subs	r6, r6, r5
 80100d6:	6823      	ldr	r3, [r4, #0]
 80100d8:	05da      	lsls	r2, r3, #23
 80100da:	d52f      	bpl.n	801013c <_scanf_float+0x358>
 80100dc:	055b      	lsls	r3, r3, #21
 80100de:	d510      	bpl.n	8010102 <_scanf_float+0x31e>
 80100e0:	455e      	cmp	r6, fp
 80100e2:	f67f aebf 	bls.w	800fe64 <_scanf_float+0x80>
 80100e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80100ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80100ee:	463a      	mov	r2, r7
 80100f0:	4640      	mov	r0, r8
 80100f2:	4798      	blx	r3
 80100f4:	6923      	ldr	r3, [r4, #16]
 80100f6:	3b01      	subs	r3, #1
 80100f8:	6123      	str	r3, [r4, #16]
 80100fa:	e7f1      	b.n	80100e0 <_scanf_float+0x2fc>
 80100fc:	46aa      	mov	sl, r5
 80100fe:	9602      	str	r6, [sp, #8]
 8010100:	e7df      	b.n	80100c2 <_scanf_float+0x2de>
 8010102:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010106:	6923      	ldr	r3, [r4, #16]
 8010108:	2965      	cmp	r1, #101	; 0x65
 801010a:	f103 33ff 	add.w	r3, r3, #4294967295
 801010e:	f106 35ff 	add.w	r5, r6, #4294967295
 8010112:	6123      	str	r3, [r4, #16]
 8010114:	d00c      	beq.n	8010130 <_scanf_float+0x34c>
 8010116:	2945      	cmp	r1, #69	; 0x45
 8010118:	d00a      	beq.n	8010130 <_scanf_float+0x34c>
 801011a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801011e:	463a      	mov	r2, r7
 8010120:	4640      	mov	r0, r8
 8010122:	4798      	blx	r3
 8010124:	6923      	ldr	r3, [r4, #16]
 8010126:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801012a:	3b01      	subs	r3, #1
 801012c:	1eb5      	subs	r5, r6, #2
 801012e:	6123      	str	r3, [r4, #16]
 8010130:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010134:	463a      	mov	r2, r7
 8010136:	4640      	mov	r0, r8
 8010138:	4798      	blx	r3
 801013a:	462e      	mov	r6, r5
 801013c:	6825      	ldr	r5, [r4, #0]
 801013e:	f015 0510 	ands.w	r5, r5, #16
 8010142:	d158      	bne.n	80101f6 <_scanf_float+0x412>
 8010144:	7035      	strb	r5, [r6, #0]
 8010146:	6823      	ldr	r3, [r4, #0]
 8010148:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801014c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010150:	d11c      	bne.n	801018c <_scanf_float+0x3a8>
 8010152:	9b01      	ldr	r3, [sp, #4]
 8010154:	454b      	cmp	r3, r9
 8010156:	eba3 0209 	sub.w	r2, r3, r9
 801015a:	d124      	bne.n	80101a6 <_scanf_float+0x3c2>
 801015c:	2200      	movs	r2, #0
 801015e:	4659      	mov	r1, fp
 8010160:	4640      	mov	r0, r8
 8010162:	f000 ffd3 	bl	801110c <_strtod_r>
 8010166:	9b03      	ldr	r3, [sp, #12]
 8010168:	6821      	ldr	r1, [r4, #0]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f011 0f02 	tst.w	r1, #2
 8010170:	ec57 6b10 	vmov	r6, r7, d0
 8010174:	f103 0204 	add.w	r2, r3, #4
 8010178:	d020      	beq.n	80101bc <_scanf_float+0x3d8>
 801017a:	9903      	ldr	r1, [sp, #12]
 801017c:	600a      	str	r2, [r1, #0]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	e9c3 6700 	strd	r6, r7, [r3]
 8010184:	68e3      	ldr	r3, [r4, #12]
 8010186:	3301      	adds	r3, #1
 8010188:	60e3      	str	r3, [r4, #12]
 801018a:	e66c      	b.n	800fe66 <_scanf_float+0x82>
 801018c:	9b04      	ldr	r3, [sp, #16]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d0e4      	beq.n	801015c <_scanf_float+0x378>
 8010192:	9905      	ldr	r1, [sp, #20]
 8010194:	230a      	movs	r3, #10
 8010196:	462a      	mov	r2, r5
 8010198:	3101      	adds	r1, #1
 801019a:	4640      	mov	r0, r8
 801019c:	f001 f840 	bl	8011220 <_strtol_r>
 80101a0:	9b04      	ldr	r3, [sp, #16]
 80101a2:	9e05      	ldr	r6, [sp, #20]
 80101a4:	1ac2      	subs	r2, r0, r3
 80101a6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80101aa:	429e      	cmp	r6, r3
 80101ac:	bf28      	it	cs
 80101ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80101b2:	4912      	ldr	r1, [pc, #72]	; (80101fc <_scanf_float+0x418>)
 80101b4:	4630      	mov	r0, r6
 80101b6:	f000 f8c9 	bl	801034c <siprintf>
 80101ba:	e7cf      	b.n	801015c <_scanf_float+0x378>
 80101bc:	f011 0f04 	tst.w	r1, #4
 80101c0:	9903      	ldr	r1, [sp, #12]
 80101c2:	600a      	str	r2, [r1, #0]
 80101c4:	d1db      	bne.n	801017e <_scanf_float+0x39a>
 80101c6:	f8d3 8000 	ldr.w	r8, [r3]
 80101ca:	ee10 2a10 	vmov	r2, s0
 80101ce:	ee10 0a10 	vmov	r0, s0
 80101d2:	463b      	mov	r3, r7
 80101d4:	4639      	mov	r1, r7
 80101d6:	f7f0 fcc9 	bl	8000b6c <__aeabi_dcmpun>
 80101da:	b128      	cbz	r0, 80101e8 <_scanf_float+0x404>
 80101dc:	4808      	ldr	r0, [pc, #32]	; (8010200 <_scanf_float+0x41c>)
 80101de:	f000 f8af 	bl	8010340 <nanf>
 80101e2:	ed88 0a00 	vstr	s0, [r8]
 80101e6:	e7cd      	b.n	8010184 <_scanf_float+0x3a0>
 80101e8:	4630      	mov	r0, r6
 80101ea:	4639      	mov	r1, r7
 80101ec:	f7f0 fd1c 	bl	8000c28 <__aeabi_d2f>
 80101f0:	f8c8 0000 	str.w	r0, [r8]
 80101f4:	e7c6      	b.n	8010184 <_scanf_float+0x3a0>
 80101f6:	2500      	movs	r5, #0
 80101f8:	e635      	b.n	800fe66 <_scanf_float+0x82>
 80101fa:	bf00      	nop
 80101fc:	0801636a 	.word	0x0801636a
 8010200:	080166fb 	.word	0x080166fb

08010204 <iprintf>:
 8010204:	b40f      	push	{r0, r1, r2, r3}
 8010206:	4b0a      	ldr	r3, [pc, #40]	; (8010230 <iprintf+0x2c>)
 8010208:	b513      	push	{r0, r1, r4, lr}
 801020a:	681c      	ldr	r4, [r3, #0]
 801020c:	b124      	cbz	r4, 8010218 <iprintf+0x14>
 801020e:	69a3      	ldr	r3, [r4, #24]
 8010210:	b913      	cbnz	r3, 8010218 <iprintf+0x14>
 8010212:	4620      	mov	r0, r4
 8010214:	f002 f8be 	bl	8012394 <__sinit>
 8010218:	ab05      	add	r3, sp, #20
 801021a:	9a04      	ldr	r2, [sp, #16]
 801021c:	68a1      	ldr	r1, [r4, #8]
 801021e:	9301      	str	r3, [sp, #4]
 8010220:	4620      	mov	r0, r4
 8010222:	f003 fd81 	bl	8013d28 <_vfiprintf_r>
 8010226:	b002      	add	sp, #8
 8010228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801022c:	b004      	add	sp, #16
 801022e:	4770      	bx	lr
 8010230:	20000028 	.word	0x20000028

08010234 <_puts_r>:
 8010234:	b570      	push	{r4, r5, r6, lr}
 8010236:	460e      	mov	r6, r1
 8010238:	4605      	mov	r5, r0
 801023a:	b118      	cbz	r0, 8010244 <_puts_r+0x10>
 801023c:	6983      	ldr	r3, [r0, #24]
 801023e:	b90b      	cbnz	r3, 8010244 <_puts_r+0x10>
 8010240:	f002 f8a8 	bl	8012394 <__sinit>
 8010244:	69ab      	ldr	r3, [r5, #24]
 8010246:	68ac      	ldr	r4, [r5, #8]
 8010248:	b913      	cbnz	r3, 8010250 <_puts_r+0x1c>
 801024a:	4628      	mov	r0, r5
 801024c:	f002 f8a2 	bl	8012394 <__sinit>
 8010250:	4b2c      	ldr	r3, [pc, #176]	; (8010304 <_puts_r+0xd0>)
 8010252:	429c      	cmp	r4, r3
 8010254:	d120      	bne.n	8010298 <_puts_r+0x64>
 8010256:	686c      	ldr	r4, [r5, #4]
 8010258:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801025a:	07db      	lsls	r3, r3, #31
 801025c:	d405      	bmi.n	801026a <_puts_r+0x36>
 801025e:	89a3      	ldrh	r3, [r4, #12]
 8010260:	0598      	lsls	r0, r3, #22
 8010262:	d402      	bmi.n	801026a <_puts_r+0x36>
 8010264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010266:	f002 fca6 	bl	8012bb6 <__retarget_lock_acquire_recursive>
 801026a:	89a3      	ldrh	r3, [r4, #12]
 801026c:	0719      	lsls	r1, r3, #28
 801026e:	d51d      	bpl.n	80102ac <_puts_r+0x78>
 8010270:	6923      	ldr	r3, [r4, #16]
 8010272:	b1db      	cbz	r3, 80102ac <_puts_r+0x78>
 8010274:	3e01      	subs	r6, #1
 8010276:	68a3      	ldr	r3, [r4, #8]
 8010278:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801027c:	3b01      	subs	r3, #1
 801027e:	60a3      	str	r3, [r4, #8]
 8010280:	bb39      	cbnz	r1, 80102d2 <_puts_r+0x9e>
 8010282:	2b00      	cmp	r3, #0
 8010284:	da38      	bge.n	80102f8 <_puts_r+0xc4>
 8010286:	4622      	mov	r2, r4
 8010288:	210a      	movs	r1, #10
 801028a:	4628      	mov	r0, r5
 801028c:	f001 f80e 	bl	80112ac <__swbuf_r>
 8010290:	3001      	adds	r0, #1
 8010292:	d011      	beq.n	80102b8 <_puts_r+0x84>
 8010294:	250a      	movs	r5, #10
 8010296:	e011      	b.n	80102bc <_puts_r+0x88>
 8010298:	4b1b      	ldr	r3, [pc, #108]	; (8010308 <_puts_r+0xd4>)
 801029a:	429c      	cmp	r4, r3
 801029c:	d101      	bne.n	80102a2 <_puts_r+0x6e>
 801029e:	68ac      	ldr	r4, [r5, #8]
 80102a0:	e7da      	b.n	8010258 <_puts_r+0x24>
 80102a2:	4b1a      	ldr	r3, [pc, #104]	; (801030c <_puts_r+0xd8>)
 80102a4:	429c      	cmp	r4, r3
 80102a6:	bf08      	it	eq
 80102a8:	68ec      	ldreq	r4, [r5, #12]
 80102aa:	e7d5      	b.n	8010258 <_puts_r+0x24>
 80102ac:	4621      	mov	r1, r4
 80102ae:	4628      	mov	r0, r5
 80102b0:	f001 f860 	bl	8011374 <__swsetup_r>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d0dd      	beq.n	8010274 <_puts_r+0x40>
 80102b8:	f04f 35ff 	mov.w	r5, #4294967295
 80102bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80102be:	07da      	lsls	r2, r3, #31
 80102c0:	d405      	bmi.n	80102ce <_puts_r+0x9a>
 80102c2:	89a3      	ldrh	r3, [r4, #12]
 80102c4:	059b      	lsls	r3, r3, #22
 80102c6:	d402      	bmi.n	80102ce <_puts_r+0x9a>
 80102c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102ca:	f002 fc75 	bl	8012bb8 <__retarget_lock_release_recursive>
 80102ce:	4628      	mov	r0, r5
 80102d0:	bd70      	pop	{r4, r5, r6, pc}
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	da04      	bge.n	80102e0 <_puts_r+0xac>
 80102d6:	69a2      	ldr	r2, [r4, #24]
 80102d8:	429a      	cmp	r2, r3
 80102da:	dc06      	bgt.n	80102ea <_puts_r+0xb6>
 80102dc:	290a      	cmp	r1, #10
 80102de:	d004      	beq.n	80102ea <_puts_r+0xb6>
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	1c5a      	adds	r2, r3, #1
 80102e4:	6022      	str	r2, [r4, #0]
 80102e6:	7019      	strb	r1, [r3, #0]
 80102e8:	e7c5      	b.n	8010276 <_puts_r+0x42>
 80102ea:	4622      	mov	r2, r4
 80102ec:	4628      	mov	r0, r5
 80102ee:	f000 ffdd 	bl	80112ac <__swbuf_r>
 80102f2:	3001      	adds	r0, #1
 80102f4:	d1bf      	bne.n	8010276 <_puts_r+0x42>
 80102f6:	e7df      	b.n	80102b8 <_puts_r+0x84>
 80102f8:	6823      	ldr	r3, [r4, #0]
 80102fa:	250a      	movs	r5, #10
 80102fc:	1c5a      	adds	r2, r3, #1
 80102fe:	6022      	str	r2, [r4, #0]
 8010300:	701d      	strb	r5, [r3, #0]
 8010302:	e7db      	b.n	80102bc <_puts_r+0x88>
 8010304:	08016474 	.word	0x08016474
 8010308:	08016494 	.word	0x08016494
 801030c:	08016454 	.word	0x08016454

08010310 <puts>:
 8010310:	4b02      	ldr	r3, [pc, #8]	; (801031c <puts+0xc>)
 8010312:	4601      	mov	r1, r0
 8010314:	6818      	ldr	r0, [r3, #0]
 8010316:	f7ff bf8d 	b.w	8010234 <_puts_r>
 801031a:	bf00      	nop
 801031c:	20000028 	.word	0x20000028

08010320 <_sbrk_r>:
 8010320:	b538      	push	{r3, r4, r5, lr}
 8010322:	4d06      	ldr	r5, [pc, #24]	; (801033c <_sbrk_r+0x1c>)
 8010324:	2300      	movs	r3, #0
 8010326:	4604      	mov	r4, r0
 8010328:	4608      	mov	r0, r1
 801032a:	602b      	str	r3, [r5, #0]
 801032c:	f7f4 fb0c 	bl	8004948 <_sbrk>
 8010330:	1c43      	adds	r3, r0, #1
 8010332:	d102      	bne.n	801033a <_sbrk_r+0x1a>
 8010334:	682b      	ldr	r3, [r5, #0]
 8010336:	b103      	cbz	r3, 801033a <_sbrk_r+0x1a>
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	bd38      	pop	{r3, r4, r5, pc}
 801033c:	20001a6c 	.word	0x20001a6c

08010340 <nanf>:
 8010340:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010348 <nanf+0x8>
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop
 8010348:	7fc00000 	.word	0x7fc00000

0801034c <siprintf>:
 801034c:	b40e      	push	{r1, r2, r3}
 801034e:	b500      	push	{lr}
 8010350:	b09c      	sub	sp, #112	; 0x70
 8010352:	ab1d      	add	r3, sp, #116	; 0x74
 8010354:	9002      	str	r0, [sp, #8]
 8010356:	9006      	str	r0, [sp, #24]
 8010358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801035c:	4809      	ldr	r0, [pc, #36]	; (8010384 <siprintf+0x38>)
 801035e:	9107      	str	r1, [sp, #28]
 8010360:	9104      	str	r1, [sp, #16]
 8010362:	4909      	ldr	r1, [pc, #36]	; (8010388 <siprintf+0x3c>)
 8010364:	f853 2b04 	ldr.w	r2, [r3], #4
 8010368:	9105      	str	r1, [sp, #20]
 801036a:	6800      	ldr	r0, [r0, #0]
 801036c:	9301      	str	r3, [sp, #4]
 801036e:	a902      	add	r1, sp, #8
 8010370:	f003 f9de 	bl	8013730 <_svfiprintf_r>
 8010374:	9b02      	ldr	r3, [sp, #8]
 8010376:	2200      	movs	r2, #0
 8010378:	701a      	strb	r2, [r3, #0]
 801037a:	b01c      	add	sp, #112	; 0x70
 801037c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010380:	b003      	add	sp, #12
 8010382:	4770      	bx	lr
 8010384:	20000028 	.word	0x20000028
 8010388:	ffff0208 	.word	0xffff0208

0801038c <siscanf>:
 801038c:	b40e      	push	{r1, r2, r3}
 801038e:	b510      	push	{r4, lr}
 8010390:	b09f      	sub	sp, #124	; 0x7c
 8010392:	ac21      	add	r4, sp, #132	; 0x84
 8010394:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010398:	f854 2b04 	ldr.w	r2, [r4], #4
 801039c:	9201      	str	r2, [sp, #4]
 801039e:	f8ad 101c 	strh.w	r1, [sp, #28]
 80103a2:	9004      	str	r0, [sp, #16]
 80103a4:	9008      	str	r0, [sp, #32]
 80103a6:	f7ef ff2d 	bl	8000204 <strlen>
 80103aa:	4b0c      	ldr	r3, [pc, #48]	; (80103dc <siscanf+0x50>)
 80103ac:	9005      	str	r0, [sp, #20]
 80103ae:	9009      	str	r0, [sp, #36]	; 0x24
 80103b0:	930d      	str	r3, [sp, #52]	; 0x34
 80103b2:	480b      	ldr	r0, [pc, #44]	; (80103e0 <siscanf+0x54>)
 80103b4:	9a01      	ldr	r2, [sp, #4]
 80103b6:	6800      	ldr	r0, [r0, #0]
 80103b8:	9403      	str	r4, [sp, #12]
 80103ba:	2300      	movs	r3, #0
 80103bc:	9311      	str	r3, [sp, #68]	; 0x44
 80103be:	9316      	str	r3, [sp, #88]	; 0x58
 80103c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80103c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80103c8:	a904      	add	r1, sp, #16
 80103ca:	4623      	mov	r3, r4
 80103cc:	f003 fb0a 	bl	80139e4 <__ssvfiscanf_r>
 80103d0:	b01f      	add	sp, #124	; 0x7c
 80103d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103d6:	b003      	add	sp, #12
 80103d8:	4770      	bx	lr
 80103da:	bf00      	nop
 80103dc:	08010407 	.word	0x08010407
 80103e0:	20000028 	.word	0x20000028

080103e4 <__sread>:
 80103e4:	b510      	push	{r4, lr}
 80103e6:	460c      	mov	r4, r1
 80103e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103ec:	f003 ff18 	bl	8014220 <_read_r>
 80103f0:	2800      	cmp	r0, #0
 80103f2:	bfab      	itete	ge
 80103f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103f6:	89a3      	ldrhlt	r3, [r4, #12]
 80103f8:	181b      	addge	r3, r3, r0
 80103fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80103fe:	bfac      	ite	ge
 8010400:	6563      	strge	r3, [r4, #84]	; 0x54
 8010402:	81a3      	strhlt	r3, [r4, #12]
 8010404:	bd10      	pop	{r4, pc}

08010406 <__seofread>:
 8010406:	2000      	movs	r0, #0
 8010408:	4770      	bx	lr

0801040a <__swrite>:
 801040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801040e:	461f      	mov	r7, r3
 8010410:	898b      	ldrh	r3, [r1, #12]
 8010412:	05db      	lsls	r3, r3, #23
 8010414:	4605      	mov	r5, r0
 8010416:	460c      	mov	r4, r1
 8010418:	4616      	mov	r6, r2
 801041a:	d505      	bpl.n	8010428 <__swrite+0x1e>
 801041c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010420:	2302      	movs	r3, #2
 8010422:	2200      	movs	r2, #0
 8010424:	f002 fbca 	bl	8012bbc <_lseek_r>
 8010428:	89a3      	ldrh	r3, [r4, #12]
 801042a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801042e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010432:	81a3      	strh	r3, [r4, #12]
 8010434:	4632      	mov	r2, r6
 8010436:	463b      	mov	r3, r7
 8010438:	4628      	mov	r0, r5
 801043a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801043e:	f000 bf87 	b.w	8011350 <_write_r>

08010442 <__sseek>:
 8010442:	b510      	push	{r4, lr}
 8010444:	460c      	mov	r4, r1
 8010446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801044a:	f002 fbb7 	bl	8012bbc <_lseek_r>
 801044e:	1c43      	adds	r3, r0, #1
 8010450:	89a3      	ldrh	r3, [r4, #12]
 8010452:	bf15      	itete	ne
 8010454:	6560      	strne	r0, [r4, #84]	; 0x54
 8010456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801045a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801045e:	81a3      	strheq	r3, [r4, #12]
 8010460:	bf18      	it	ne
 8010462:	81a3      	strhne	r3, [r4, #12]
 8010464:	bd10      	pop	{r4, pc}

08010466 <__sclose>:
 8010466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801046a:	f000 bff1 	b.w	8011450 <_close_r>

0801046e <strchr>:
 801046e:	b2c9      	uxtb	r1, r1
 8010470:	4603      	mov	r3, r0
 8010472:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010476:	b11a      	cbz	r2, 8010480 <strchr+0x12>
 8010478:	428a      	cmp	r2, r1
 801047a:	d1f9      	bne.n	8010470 <strchr+0x2>
 801047c:	4618      	mov	r0, r3
 801047e:	4770      	bx	lr
 8010480:	2900      	cmp	r1, #0
 8010482:	bf18      	it	ne
 8010484:	2300      	movne	r3, #0
 8010486:	e7f9      	b.n	801047c <strchr+0xe>

08010488 <strcpy>:
 8010488:	4603      	mov	r3, r0
 801048a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801048e:	f803 2b01 	strb.w	r2, [r3], #1
 8010492:	2a00      	cmp	r2, #0
 8010494:	d1f9      	bne.n	801048a <strcpy+0x2>
 8010496:	4770      	bx	lr

08010498 <strncmp>:
 8010498:	b510      	push	{r4, lr}
 801049a:	b16a      	cbz	r2, 80104b8 <strncmp+0x20>
 801049c:	3901      	subs	r1, #1
 801049e:	1884      	adds	r4, r0, r2
 80104a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80104a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d103      	bne.n	80104b4 <strncmp+0x1c>
 80104ac:	42a0      	cmp	r0, r4
 80104ae:	d001      	beq.n	80104b4 <strncmp+0x1c>
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d1f5      	bne.n	80104a0 <strncmp+0x8>
 80104b4:	1a98      	subs	r0, r3, r2
 80104b6:	bd10      	pop	{r4, pc}
 80104b8:	4610      	mov	r0, r2
 80104ba:	e7fc      	b.n	80104b6 <strncmp+0x1e>

080104bc <sulp>:
 80104bc:	b570      	push	{r4, r5, r6, lr}
 80104be:	4604      	mov	r4, r0
 80104c0:	460d      	mov	r5, r1
 80104c2:	ec45 4b10 	vmov	d0, r4, r5
 80104c6:	4616      	mov	r6, r2
 80104c8:	f002 ff78 	bl	80133bc <__ulp>
 80104cc:	ec51 0b10 	vmov	r0, r1, d0
 80104d0:	b17e      	cbz	r6, 80104f2 <sulp+0x36>
 80104d2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80104d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80104da:	2b00      	cmp	r3, #0
 80104dc:	dd09      	ble.n	80104f2 <sulp+0x36>
 80104de:	051b      	lsls	r3, r3, #20
 80104e0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80104e4:	2400      	movs	r4, #0
 80104e6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80104ea:	4622      	mov	r2, r4
 80104ec:	462b      	mov	r3, r5
 80104ee:	f7f0 f8a3 	bl	8000638 <__aeabi_dmul>
 80104f2:	bd70      	pop	{r4, r5, r6, pc}
 80104f4:	0000      	movs	r0, r0
	...

080104f8 <_strtod_l>:
 80104f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104fc:	b0a3      	sub	sp, #140	; 0x8c
 80104fe:	461f      	mov	r7, r3
 8010500:	2300      	movs	r3, #0
 8010502:	931e      	str	r3, [sp, #120]	; 0x78
 8010504:	4ba4      	ldr	r3, [pc, #656]	; (8010798 <_strtod_l+0x2a0>)
 8010506:	9219      	str	r2, [sp, #100]	; 0x64
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	9307      	str	r3, [sp, #28]
 801050c:	4604      	mov	r4, r0
 801050e:	4618      	mov	r0, r3
 8010510:	4688      	mov	r8, r1
 8010512:	f7ef fe77 	bl	8000204 <strlen>
 8010516:	f04f 0a00 	mov.w	sl, #0
 801051a:	4605      	mov	r5, r0
 801051c:	f04f 0b00 	mov.w	fp, #0
 8010520:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8010524:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010526:	781a      	ldrb	r2, [r3, #0]
 8010528:	2a2b      	cmp	r2, #43	; 0x2b
 801052a:	d04c      	beq.n	80105c6 <_strtod_l+0xce>
 801052c:	d839      	bhi.n	80105a2 <_strtod_l+0xaa>
 801052e:	2a0d      	cmp	r2, #13
 8010530:	d832      	bhi.n	8010598 <_strtod_l+0xa0>
 8010532:	2a08      	cmp	r2, #8
 8010534:	d832      	bhi.n	801059c <_strtod_l+0xa4>
 8010536:	2a00      	cmp	r2, #0
 8010538:	d03c      	beq.n	80105b4 <_strtod_l+0xbc>
 801053a:	2300      	movs	r3, #0
 801053c:	930e      	str	r3, [sp, #56]	; 0x38
 801053e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8010540:	7833      	ldrb	r3, [r6, #0]
 8010542:	2b30      	cmp	r3, #48	; 0x30
 8010544:	f040 80b4 	bne.w	80106b0 <_strtod_l+0x1b8>
 8010548:	7873      	ldrb	r3, [r6, #1]
 801054a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801054e:	2b58      	cmp	r3, #88	; 0x58
 8010550:	d16c      	bne.n	801062c <_strtod_l+0x134>
 8010552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010554:	9301      	str	r3, [sp, #4]
 8010556:	ab1e      	add	r3, sp, #120	; 0x78
 8010558:	9702      	str	r7, [sp, #8]
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	4a8f      	ldr	r2, [pc, #572]	; (801079c <_strtod_l+0x2a4>)
 801055e:	ab1f      	add	r3, sp, #124	; 0x7c
 8010560:	a91d      	add	r1, sp, #116	; 0x74
 8010562:	4620      	mov	r0, r4
 8010564:	f002 f81a 	bl	801259c <__gethex>
 8010568:	f010 0707 	ands.w	r7, r0, #7
 801056c:	4605      	mov	r5, r0
 801056e:	d005      	beq.n	801057c <_strtod_l+0x84>
 8010570:	2f06      	cmp	r7, #6
 8010572:	d12a      	bne.n	80105ca <_strtod_l+0xd2>
 8010574:	3601      	adds	r6, #1
 8010576:	2300      	movs	r3, #0
 8010578:	961d      	str	r6, [sp, #116]	; 0x74
 801057a:	930e      	str	r3, [sp, #56]	; 0x38
 801057c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801057e:	2b00      	cmp	r3, #0
 8010580:	f040 8596 	bne.w	80110b0 <_strtod_l+0xbb8>
 8010584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010586:	b1db      	cbz	r3, 80105c0 <_strtod_l+0xc8>
 8010588:	4652      	mov	r2, sl
 801058a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801058e:	ec43 2b10 	vmov	d0, r2, r3
 8010592:	b023      	add	sp, #140	; 0x8c
 8010594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010598:	2a20      	cmp	r2, #32
 801059a:	d1ce      	bne.n	801053a <_strtod_l+0x42>
 801059c:	3301      	adds	r3, #1
 801059e:	931d      	str	r3, [sp, #116]	; 0x74
 80105a0:	e7c0      	b.n	8010524 <_strtod_l+0x2c>
 80105a2:	2a2d      	cmp	r2, #45	; 0x2d
 80105a4:	d1c9      	bne.n	801053a <_strtod_l+0x42>
 80105a6:	2201      	movs	r2, #1
 80105a8:	920e      	str	r2, [sp, #56]	; 0x38
 80105aa:	1c5a      	adds	r2, r3, #1
 80105ac:	921d      	str	r2, [sp, #116]	; 0x74
 80105ae:	785b      	ldrb	r3, [r3, #1]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d1c4      	bne.n	801053e <_strtod_l+0x46>
 80105b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80105b6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f040 8576 	bne.w	80110ac <_strtod_l+0xbb4>
 80105c0:	4652      	mov	r2, sl
 80105c2:	465b      	mov	r3, fp
 80105c4:	e7e3      	b.n	801058e <_strtod_l+0x96>
 80105c6:	2200      	movs	r2, #0
 80105c8:	e7ee      	b.n	80105a8 <_strtod_l+0xb0>
 80105ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80105cc:	b13a      	cbz	r2, 80105de <_strtod_l+0xe6>
 80105ce:	2135      	movs	r1, #53	; 0x35
 80105d0:	a820      	add	r0, sp, #128	; 0x80
 80105d2:	f002 fffe 	bl	80135d2 <__copybits>
 80105d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80105d8:	4620      	mov	r0, r4
 80105da:	f002 fbc3 	bl	8012d64 <_Bfree>
 80105de:	3f01      	subs	r7, #1
 80105e0:	2f05      	cmp	r7, #5
 80105e2:	d807      	bhi.n	80105f4 <_strtod_l+0xfc>
 80105e4:	e8df f007 	tbb	[pc, r7]
 80105e8:	1d180b0e 	.word	0x1d180b0e
 80105ec:	030e      	.short	0x030e
 80105ee:	f04f 0b00 	mov.w	fp, #0
 80105f2:	46da      	mov	sl, fp
 80105f4:	0728      	lsls	r0, r5, #28
 80105f6:	d5c1      	bpl.n	801057c <_strtod_l+0x84>
 80105f8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80105fc:	e7be      	b.n	801057c <_strtod_l+0x84>
 80105fe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8010602:	e7f7      	b.n	80105f4 <_strtod_l+0xfc>
 8010604:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8010608:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801060a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801060e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010612:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010616:	e7ed      	b.n	80105f4 <_strtod_l+0xfc>
 8010618:	f8df b184 	ldr.w	fp, [pc, #388]	; 80107a0 <_strtod_l+0x2a8>
 801061c:	f04f 0a00 	mov.w	sl, #0
 8010620:	e7e8      	b.n	80105f4 <_strtod_l+0xfc>
 8010622:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010626:	f04f 3aff 	mov.w	sl, #4294967295
 801062a:	e7e3      	b.n	80105f4 <_strtod_l+0xfc>
 801062c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801062e:	1c5a      	adds	r2, r3, #1
 8010630:	921d      	str	r2, [sp, #116]	; 0x74
 8010632:	785b      	ldrb	r3, [r3, #1]
 8010634:	2b30      	cmp	r3, #48	; 0x30
 8010636:	d0f9      	beq.n	801062c <_strtod_l+0x134>
 8010638:	2b00      	cmp	r3, #0
 801063a:	d09f      	beq.n	801057c <_strtod_l+0x84>
 801063c:	2301      	movs	r3, #1
 801063e:	f04f 0900 	mov.w	r9, #0
 8010642:	9304      	str	r3, [sp, #16]
 8010644:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010646:	930a      	str	r3, [sp, #40]	; 0x28
 8010648:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801064c:	464f      	mov	r7, r9
 801064e:	220a      	movs	r2, #10
 8010650:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010652:	7806      	ldrb	r6, [r0, #0]
 8010654:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010658:	b2d9      	uxtb	r1, r3
 801065a:	2909      	cmp	r1, #9
 801065c:	d92a      	bls.n	80106b4 <_strtod_l+0x1bc>
 801065e:	9907      	ldr	r1, [sp, #28]
 8010660:	462a      	mov	r2, r5
 8010662:	f7ff ff19 	bl	8010498 <strncmp>
 8010666:	b398      	cbz	r0, 80106d0 <_strtod_l+0x1d8>
 8010668:	2000      	movs	r0, #0
 801066a:	4633      	mov	r3, r6
 801066c:	463d      	mov	r5, r7
 801066e:	9007      	str	r0, [sp, #28]
 8010670:	4602      	mov	r2, r0
 8010672:	2b65      	cmp	r3, #101	; 0x65
 8010674:	d001      	beq.n	801067a <_strtod_l+0x182>
 8010676:	2b45      	cmp	r3, #69	; 0x45
 8010678:	d118      	bne.n	80106ac <_strtod_l+0x1b4>
 801067a:	b91d      	cbnz	r5, 8010684 <_strtod_l+0x18c>
 801067c:	9b04      	ldr	r3, [sp, #16]
 801067e:	4303      	orrs	r3, r0
 8010680:	d098      	beq.n	80105b4 <_strtod_l+0xbc>
 8010682:	2500      	movs	r5, #0
 8010684:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8010688:	f108 0301 	add.w	r3, r8, #1
 801068c:	931d      	str	r3, [sp, #116]	; 0x74
 801068e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010692:	2b2b      	cmp	r3, #43	; 0x2b
 8010694:	d075      	beq.n	8010782 <_strtod_l+0x28a>
 8010696:	2b2d      	cmp	r3, #45	; 0x2d
 8010698:	d07b      	beq.n	8010792 <_strtod_l+0x29a>
 801069a:	f04f 0c00 	mov.w	ip, #0
 801069e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80106a2:	2909      	cmp	r1, #9
 80106a4:	f240 8082 	bls.w	80107ac <_strtod_l+0x2b4>
 80106a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80106ac:	2600      	movs	r6, #0
 80106ae:	e09d      	b.n	80107ec <_strtod_l+0x2f4>
 80106b0:	2300      	movs	r3, #0
 80106b2:	e7c4      	b.n	801063e <_strtod_l+0x146>
 80106b4:	2f08      	cmp	r7, #8
 80106b6:	bfd8      	it	le
 80106b8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80106ba:	f100 0001 	add.w	r0, r0, #1
 80106be:	bfda      	itte	le
 80106c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80106c4:	9309      	strle	r3, [sp, #36]	; 0x24
 80106c6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80106ca:	3701      	adds	r7, #1
 80106cc:	901d      	str	r0, [sp, #116]	; 0x74
 80106ce:	e7bf      	b.n	8010650 <_strtod_l+0x158>
 80106d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80106d2:	195a      	adds	r2, r3, r5
 80106d4:	921d      	str	r2, [sp, #116]	; 0x74
 80106d6:	5d5b      	ldrb	r3, [r3, r5]
 80106d8:	2f00      	cmp	r7, #0
 80106da:	d037      	beq.n	801074c <_strtod_l+0x254>
 80106dc:	9007      	str	r0, [sp, #28]
 80106de:	463d      	mov	r5, r7
 80106e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80106e4:	2a09      	cmp	r2, #9
 80106e6:	d912      	bls.n	801070e <_strtod_l+0x216>
 80106e8:	2201      	movs	r2, #1
 80106ea:	e7c2      	b.n	8010672 <_strtod_l+0x17a>
 80106ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80106ee:	1c5a      	adds	r2, r3, #1
 80106f0:	921d      	str	r2, [sp, #116]	; 0x74
 80106f2:	785b      	ldrb	r3, [r3, #1]
 80106f4:	3001      	adds	r0, #1
 80106f6:	2b30      	cmp	r3, #48	; 0x30
 80106f8:	d0f8      	beq.n	80106ec <_strtod_l+0x1f4>
 80106fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80106fe:	2a08      	cmp	r2, #8
 8010700:	f200 84db 	bhi.w	80110ba <_strtod_l+0xbc2>
 8010704:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010706:	9007      	str	r0, [sp, #28]
 8010708:	2000      	movs	r0, #0
 801070a:	920a      	str	r2, [sp, #40]	; 0x28
 801070c:	4605      	mov	r5, r0
 801070e:	3b30      	subs	r3, #48	; 0x30
 8010710:	f100 0201 	add.w	r2, r0, #1
 8010714:	d014      	beq.n	8010740 <_strtod_l+0x248>
 8010716:	9907      	ldr	r1, [sp, #28]
 8010718:	4411      	add	r1, r2
 801071a:	9107      	str	r1, [sp, #28]
 801071c:	462a      	mov	r2, r5
 801071e:	eb00 0e05 	add.w	lr, r0, r5
 8010722:	210a      	movs	r1, #10
 8010724:	4572      	cmp	r2, lr
 8010726:	d113      	bne.n	8010750 <_strtod_l+0x258>
 8010728:	182a      	adds	r2, r5, r0
 801072a:	2a08      	cmp	r2, #8
 801072c:	f105 0501 	add.w	r5, r5, #1
 8010730:	4405      	add	r5, r0
 8010732:	dc1c      	bgt.n	801076e <_strtod_l+0x276>
 8010734:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010736:	220a      	movs	r2, #10
 8010738:	fb02 3301 	mla	r3, r2, r1, r3
 801073c:	9309      	str	r3, [sp, #36]	; 0x24
 801073e:	2200      	movs	r2, #0
 8010740:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010742:	1c59      	adds	r1, r3, #1
 8010744:	911d      	str	r1, [sp, #116]	; 0x74
 8010746:	785b      	ldrb	r3, [r3, #1]
 8010748:	4610      	mov	r0, r2
 801074a:	e7c9      	b.n	80106e0 <_strtod_l+0x1e8>
 801074c:	4638      	mov	r0, r7
 801074e:	e7d2      	b.n	80106f6 <_strtod_l+0x1fe>
 8010750:	2a08      	cmp	r2, #8
 8010752:	dc04      	bgt.n	801075e <_strtod_l+0x266>
 8010754:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010756:	434e      	muls	r6, r1
 8010758:	9609      	str	r6, [sp, #36]	; 0x24
 801075a:	3201      	adds	r2, #1
 801075c:	e7e2      	b.n	8010724 <_strtod_l+0x22c>
 801075e:	f102 0c01 	add.w	ip, r2, #1
 8010762:	f1bc 0f10 	cmp.w	ip, #16
 8010766:	bfd8      	it	le
 8010768:	fb01 f909 	mulle.w	r9, r1, r9
 801076c:	e7f5      	b.n	801075a <_strtod_l+0x262>
 801076e:	2d10      	cmp	r5, #16
 8010770:	bfdc      	itt	le
 8010772:	220a      	movle	r2, #10
 8010774:	fb02 3909 	mlale	r9, r2, r9, r3
 8010778:	e7e1      	b.n	801073e <_strtod_l+0x246>
 801077a:	2300      	movs	r3, #0
 801077c:	9307      	str	r3, [sp, #28]
 801077e:	2201      	movs	r2, #1
 8010780:	e77c      	b.n	801067c <_strtod_l+0x184>
 8010782:	f04f 0c00 	mov.w	ip, #0
 8010786:	f108 0302 	add.w	r3, r8, #2
 801078a:	931d      	str	r3, [sp, #116]	; 0x74
 801078c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8010790:	e785      	b.n	801069e <_strtod_l+0x1a6>
 8010792:	f04f 0c01 	mov.w	ip, #1
 8010796:	e7f6      	b.n	8010786 <_strtod_l+0x28e>
 8010798:	08016520 	.word	0x08016520
 801079c:	08016370 	.word	0x08016370
 80107a0:	7ff00000 	.word	0x7ff00000
 80107a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107a6:	1c59      	adds	r1, r3, #1
 80107a8:	911d      	str	r1, [sp, #116]	; 0x74
 80107aa:	785b      	ldrb	r3, [r3, #1]
 80107ac:	2b30      	cmp	r3, #48	; 0x30
 80107ae:	d0f9      	beq.n	80107a4 <_strtod_l+0x2ac>
 80107b0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80107b4:	2908      	cmp	r1, #8
 80107b6:	f63f af79 	bhi.w	80106ac <_strtod_l+0x1b4>
 80107ba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80107be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107c0:	9308      	str	r3, [sp, #32]
 80107c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80107c4:	1c59      	adds	r1, r3, #1
 80107c6:	911d      	str	r1, [sp, #116]	; 0x74
 80107c8:	785b      	ldrb	r3, [r3, #1]
 80107ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80107ce:	2e09      	cmp	r6, #9
 80107d0:	d937      	bls.n	8010842 <_strtod_l+0x34a>
 80107d2:	9e08      	ldr	r6, [sp, #32]
 80107d4:	1b89      	subs	r1, r1, r6
 80107d6:	2908      	cmp	r1, #8
 80107d8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80107dc:	dc02      	bgt.n	80107e4 <_strtod_l+0x2ec>
 80107de:	4576      	cmp	r6, lr
 80107e0:	bfa8      	it	ge
 80107e2:	4676      	movge	r6, lr
 80107e4:	f1bc 0f00 	cmp.w	ip, #0
 80107e8:	d000      	beq.n	80107ec <_strtod_l+0x2f4>
 80107ea:	4276      	negs	r6, r6
 80107ec:	2d00      	cmp	r5, #0
 80107ee:	d14f      	bne.n	8010890 <_strtod_l+0x398>
 80107f0:	9904      	ldr	r1, [sp, #16]
 80107f2:	4301      	orrs	r1, r0
 80107f4:	f47f aec2 	bne.w	801057c <_strtod_l+0x84>
 80107f8:	2a00      	cmp	r2, #0
 80107fa:	f47f aedb 	bne.w	80105b4 <_strtod_l+0xbc>
 80107fe:	2b69      	cmp	r3, #105	; 0x69
 8010800:	d027      	beq.n	8010852 <_strtod_l+0x35a>
 8010802:	dc24      	bgt.n	801084e <_strtod_l+0x356>
 8010804:	2b49      	cmp	r3, #73	; 0x49
 8010806:	d024      	beq.n	8010852 <_strtod_l+0x35a>
 8010808:	2b4e      	cmp	r3, #78	; 0x4e
 801080a:	f47f aed3 	bne.w	80105b4 <_strtod_l+0xbc>
 801080e:	499e      	ldr	r1, [pc, #632]	; (8010a88 <_strtod_l+0x590>)
 8010810:	a81d      	add	r0, sp, #116	; 0x74
 8010812:	f002 f91b 	bl	8012a4c <__match>
 8010816:	2800      	cmp	r0, #0
 8010818:	f43f aecc 	beq.w	80105b4 <_strtod_l+0xbc>
 801081c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	2b28      	cmp	r3, #40	; 0x28
 8010822:	d12d      	bne.n	8010880 <_strtod_l+0x388>
 8010824:	4999      	ldr	r1, [pc, #612]	; (8010a8c <_strtod_l+0x594>)
 8010826:	aa20      	add	r2, sp, #128	; 0x80
 8010828:	a81d      	add	r0, sp, #116	; 0x74
 801082a:	f002 f923 	bl	8012a74 <__hexnan>
 801082e:	2805      	cmp	r0, #5
 8010830:	d126      	bne.n	8010880 <_strtod_l+0x388>
 8010832:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010834:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8010838:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801083c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010840:	e69c      	b.n	801057c <_strtod_l+0x84>
 8010842:	210a      	movs	r1, #10
 8010844:	fb01 3e0e 	mla	lr, r1, lr, r3
 8010848:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801084c:	e7b9      	b.n	80107c2 <_strtod_l+0x2ca>
 801084e:	2b6e      	cmp	r3, #110	; 0x6e
 8010850:	e7db      	b.n	801080a <_strtod_l+0x312>
 8010852:	498f      	ldr	r1, [pc, #572]	; (8010a90 <_strtod_l+0x598>)
 8010854:	a81d      	add	r0, sp, #116	; 0x74
 8010856:	f002 f8f9 	bl	8012a4c <__match>
 801085a:	2800      	cmp	r0, #0
 801085c:	f43f aeaa 	beq.w	80105b4 <_strtod_l+0xbc>
 8010860:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010862:	498c      	ldr	r1, [pc, #560]	; (8010a94 <_strtod_l+0x59c>)
 8010864:	3b01      	subs	r3, #1
 8010866:	a81d      	add	r0, sp, #116	; 0x74
 8010868:	931d      	str	r3, [sp, #116]	; 0x74
 801086a:	f002 f8ef 	bl	8012a4c <__match>
 801086e:	b910      	cbnz	r0, 8010876 <_strtod_l+0x37e>
 8010870:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010872:	3301      	adds	r3, #1
 8010874:	931d      	str	r3, [sp, #116]	; 0x74
 8010876:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8010aa4 <_strtod_l+0x5ac>
 801087a:	f04f 0a00 	mov.w	sl, #0
 801087e:	e67d      	b.n	801057c <_strtod_l+0x84>
 8010880:	4885      	ldr	r0, [pc, #532]	; (8010a98 <_strtod_l+0x5a0>)
 8010882:	f003 fce1 	bl	8014248 <nan>
 8010886:	ed8d 0b04 	vstr	d0, [sp, #16]
 801088a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801088e:	e675      	b.n	801057c <_strtod_l+0x84>
 8010890:	9b07      	ldr	r3, [sp, #28]
 8010892:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010894:	1af3      	subs	r3, r6, r3
 8010896:	2f00      	cmp	r7, #0
 8010898:	bf08      	it	eq
 801089a:	462f      	moveq	r7, r5
 801089c:	2d10      	cmp	r5, #16
 801089e:	9308      	str	r3, [sp, #32]
 80108a0:	46a8      	mov	r8, r5
 80108a2:	bfa8      	it	ge
 80108a4:	f04f 0810 	movge.w	r8, #16
 80108a8:	f7ef fe4c 	bl	8000544 <__aeabi_ui2d>
 80108ac:	2d09      	cmp	r5, #9
 80108ae:	4682      	mov	sl, r0
 80108b0:	468b      	mov	fp, r1
 80108b2:	dd13      	ble.n	80108dc <_strtod_l+0x3e4>
 80108b4:	4b79      	ldr	r3, [pc, #484]	; (8010a9c <_strtod_l+0x5a4>)
 80108b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80108ba:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80108be:	f7ef febb 	bl	8000638 <__aeabi_dmul>
 80108c2:	4682      	mov	sl, r0
 80108c4:	4648      	mov	r0, r9
 80108c6:	468b      	mov	fp, r1
 80108c8:	f7ef fe3c 	bl	8000544 <__aeabi_ui2d>
 80108cc:	4602      	mov	r2, r0
 80108ce:	460b      	mov	r3, r1
 80108d0:	4650      	mov	r0, sl
 80108d2:	4659      	mov	r1, fp
 80108d4:	f7ef fcfa 	bl	80002cc <__adddf3>
 80108d8:	4682      	mov	sl, r0
 80108da:	468b      	mov	fp, r1
 80108dc:	2d0f      	cmp	r5, #15
 80108de:	dc38      	bgt.n	8010952 <_strtod_l+0x45a>
 80108e0:	9b08      	ldr	r3, [sp, #32]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	f43f ae4a 	beq.w	801057c <_strtod_l+0x84>
 80108e8:	dd24      	ble.n	8010934 <_strtod_l+0x43c>
 80108ea:	2b16      	cmp	r3, #22
 80108ec:	dc0b      	bgt.n	8010906 <_strtod_l+0x40e>
 80108ee:	4d6b      	ldr	r5, [pc, #428]	; (8010a9c <_strtod_l+0x5a4>)
 80108f0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80108f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80108f8:	4652      	mov	r2, sl
 80108fa:	465b      	mov	r3, fp
 80108fc:	f7ef fe9c 	bl	8000638 <__aeabi_dmul>
 8010900:	4682      	mov	sl, r0
 8010902:	468b      	mov	fp, r1
 8010904:	e63a      	b.n	801057c <_strtod_l+0x84>
 8010906:	9a08      	ldr	r2, [sp, #32]
 8010908:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801090c:	4293      	cmp	r3, r2
 801090e:	db20      	blt.n	8010952 <_strtod_l+0x45a>
 8010910:	4c62      	ldr	r4, [pc, #392]	; (8010a9c <_strtod_l+0x5a4>)
 8010912:	f1c5 050f 	rsb	r5, r5, #15
 8010916:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801091a:	4652      	mov	r2, sl
 801091c:	465b      	mov	r3, fp
 801091e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010922:	f7ef fe89 	bl	8000638 <__aeabi_dmul>
 8010926:	9b08      	ldr	r3, [sp, #32]
 8010928:	1b5d      	subs	r5, r3, r5
 801092a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801092e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010932:	e7e3      	b.n	80108fc <_strtod_l+0x404>
 8010934:	9b08      	ldr	r3, [sp, #32]
 8010936:	3316      	adds	r3, #22
 8010938:	db0b      	blt.n	8010952 <_strtod_l+0x45a>
 801093a:	9b07      	ldr	r3, [sp, #28]
 801093c:	4a57      	ldr	r2, [pc, #348]	; (8010a9c <_strtod_l+0x5a4>)
 801093e:	1b9e      	subs	r6, r3, r6
 8010940:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8010944:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010948:	4650      	mov	r0, sl
 801094a:	4659      	mov	r1, fp
 801094c:	f7ef ff9e 	bl	800088c <__aeabi_ddiv>
 8010950:	e7d6      	b.n	8010900 <_strtod_l+0x408>
 8010952:	9b08      	ldr	r3, [sp, #32]
 8010954:	eba5 0808 	sub.w	r8, r5, r8
 8010958:	4498      	add	r8, r3
 801095a:	f1b8 0f00 	cmp.w	r8, #0
 801095e:	dd71      	ble.n	8010a44 <_strtod_l+0x54c>
 8010960:	f018 030f 	ands.w	r3, r8, #15
 8010964:	d00a      	beq.n	801097c <_strtod_l+0x484>
 8010966:	494d      	ldr	r1, [pc, #308]	; (8010a9c <_strtod_l+0x5a4>)
 8010968:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801096c:	4652      	mov	r2, sl
 801096e:	465b      	mov	r3, fp
 8010970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010974:	f7ef fe60 	bl	8000638 <__aeabi_dmul>
 8010978:	4682      	mov	sl, r0
 801097a:	468b      	mov	fp, r1
 801097c:	f038 080f 	bics.w	r8, r8, #15
 8010980:	d04d      	beq.n	8010a1e <_strtod_l+0x526>
 8010982:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010986:	dd22      	ble.n	80109ce <_strtod_l+0x4d6>
 8010988:	2500      	movs	r5, #0
 801098a:	462e      	mov	r6, r5
 801098c:	9509      	str	r5, [sp, #36]	; 0x24
 801098e:	9507      	str	r5, [sp, #28]
 8010990:	2322      	movs	r3, #34	; 0x22
 8010992:	f8df b110 	ldr.w	fp, [pc, #272]	; 8010aa4 <_strtod_l+0x5ac>
 8010996:	6023      	str	r3, [r4, #0]
 8010998:	f04f 0a00 	mov.w	sl, #0
 801099c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099e:	2b00      	cmp	r3, #0
 80109a0:	f43f adec 	beq.w	801057c <_strtod_l+0x84>
 80109a4:	991e      	ldr	r1, [sp, #120]	; 0x78
 80109a6:	4620      	mov	r0, r4
 80109a8:	f002 f9dc 	bl	8012d64 <_Bfree>
 80109ac:	9907      	ldr	r1, [sp, #28]
 80109ae:	4620      	mov	r0, r4
 80109b0:	f002 f9d8 	bl	8012d64 <_Bfree>
 80109b4:	4631      	mov	r1, r6
 80109b6:	4620      	mov	r0, r4
 80109b8:	f002 f9d4 	bl	8012d64 <_Bfree>
 80109bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109be:	4620      	mov	r0, r4
 80109c0:	f002 f9d0 	bl	8012d64 <_Bfree>
 80109c4:	4629      	mov	r1, r5
 80109c6:	4620      	mov	r0, r4
 80109c8:	f002 f9cc 	bl	8012d64 <_Bfree>
 80109cc:	e5d6      	b.n	801057c <_strtod_l+0x84>
 80109ce:	2300      	movs	r3, #0
 80109d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80109d4:	4650      	mov	r0, sl
 80109d6:	4659      	mov	r1, fp
 80109d8:	4699      	mov	r9, r3
 80109da:	f1b8 0f01 	cmp.w	r8, #1
 80109de:	dc21      	bgt.n	8010a24 <_strtod_l+0x52c>
 80109e0:	b10b      	cbz	r3, 80109e6 <_strtod_l+0x4ee>
 80109e2:	4682      	mov	sl, r0
 80109e4:	468b      	mov	fp, r1
 80109e6:	4b2e      	ldr	r3, [pc, #184]	; (8010aa0 <_strtod_l+0x5a8>)
 80109e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80109ec:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80109f0:	4652      	mov	r2, sl
 80109f2:	465b      	mov	r3, fp
 80109f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80109f8:	f7ef fe1e 	bl	8000638 <__aeabi_dmul>
 80109fc:	4b29      	ldr	r3, [pc, #164]	; (8010aa4 <_strtod_l+0x5ac>)
 80109fe:	460a      	mov	r2, r1
 8010a00:	400b      	ands	r3, r1
 8010a02:	4929      	ldr	r1, [pc, #164]	; (8010aa8 <_strtod_l+0x5b0>)
 8010a04:	428b      	cmp	r3, r1
 8010a06:	4682      	mov	sl, r0
 8010a08:	d8be      	bhi.n	8010988 <_strtod_l+0x490>
 8010a0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010a0e:	428b      	cmp	r3, r1
 8010a10:	bf86      	itte	hi
 8010a12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8010aac <_strtod_l+0x5b4>
 8010a16:	f04f 3aff 	movhi.w	sl, #4294967295
 8010a1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010a1e:	2300      	movs	r3, #0
 8010a20:	9304      	str	r3, [sp, #16]
 8010a22:	e081      	b.n	8010b28 <_strtod_l+0x630>
 8010a24:	f018 0f01 	tst.w	r8, #1
 8010a28:	d007      	beq.n	8010a3a <_strtod_l+0x542>
 8010a2a:	4b1d      	ldr	r3, [pc, #116]	; (8010aa0 <_strtod_l+0x5a8>)
 8010a2c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8010a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a34:	f7ef fe00 	bl	8000638 <__aeabi_dmul>
 8010a38:	2301      	movs	r3, #1
 8010a3a:	f109 0901 	add.w	r9, r9, #1
 8010a3e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010a42:	e7ca      	b.n	80109da <_strtod_l+0x4e2>
 8010a44:	d0eb      	beq.n	8010a1e <_strtod_l+0x526>
 8010a46:	f1c8 0800 	rsb	r8, r8, #0
 8010a4a:	f018 020f 	ands.w	r2, r8, #15
 8010a4e:	d00a      	beq.n	8010a66 <_strtod_l+0x56e>
 8010a50:	4b12      	ldr	r3, [pc, #72]	; (8010a9c <_strtod_l+0x5a4>)
 8010a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a56:	4650      	mov	r0, sl
 8010a58:	4659      	mov	r1, fp
 8010a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5e:	f7ef ff15 	bl	800088c <__aeabi_ddiv>
 8010a62:	4682      	mov	sl, r0
 8010a64:	468b      	mov	fp, r1
 8010a66:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010a6a:	d0d8      	beq.n	8010a1e <_strtod_l+0x526>
 8010a6c:	f1b8 0f1f 	cmp.w	r8, #31
 8010a70:	dd1e      	ble.n	8010ab0 <_strtod_l+0x5b8>
 8010a72:	2500      	movs	r5, #0
 8010a74:	462e      	mov	r6, r5
 8010a76:	9509      	str	r5, [sp, #36]	; 0x24
 8010a78:	9507      	str	r5, [sp, #28]
 8010a7a:	2322      	movs	r3, #34	; 0x22
 8010a7c:	f04f 0a00 	mov.w	sl, #0
 8010a80:	f04f 0b00 	mov.w	fp, #0
 8010a84:	6023      	str	r3, [r4, #0]
 8010a86:	e789      	b.n	801099c <_strtod_l+0x4a4>
 8010a88:	08016345 	.word	0x08016345
 8010a8c:	08016384 	.word	0x08016384
 8010a90:	0801633d 	.word	0x0801633d
 8010a94:	080163c3 	.word	0x080163c3
 8010a98:	080166fb 	.word	0x080166fb
 8010a9c:	080165c0 	.word	0x080165c0
 8010aa0:	08016598 	.word	0x08016598
 8010aa4:	7ff00000 	.word	0x7ff00000
 8010aa8:	7ca00000 	.word	0x7ca00000
 8010aac:	7fefffff 	.word	0x7fefffff
 8010ab0:	f018 0310 	ands.w	r3, r8, #16
 8010ab4:	bf18      	it	ne
 8010ab6:	236a      	movne	r3, #106	; 0x6a
 8010ab8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010e70 <_strtod_l+0x978>
 8010abc:	9304      	str	r3, [sp, #16]
 8010abe:	4650      	mov	r0, sl
 8010ac0:	4659      	mov	r1, fp
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f018 0f01 	tst.w	r8, #1
 8010ac8:	d004      	beq.n	8010ad4 <_strtod_l+0x5dc>
 8010aca:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010ace:	f7ef fdb3 	bl	8000638 <__aeabi_dmul>
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010ad8:	f109 0908 	add.w	r9, r9, #8
 8010adc:	d1f2      	bne.n	8010ac4 <_strtod_l+0x5cc>
 8010ade:	b10b      	cbz	r3, 8010ae4 <_strtod_l+0x5ec>
 8010ae0:	4682      	mov	sl, r0
 8010ae2:	468b      	mov	fp, r1
 8010ae4:	9b04      	ldr	r3, [sp, #16]
 8010ae6:	b1bb      	cbz	r3, 8010b18 <_strtod_l+0x620>
 8010ae8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8010aec:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	4659      	mov	r1, fp
 8010af4:	dd10      	ble.n	8010b18 <_strtod_l+0x620>
 8010af6:	2b1f      	cmp	r3, #31
 8010af8:	f340 8128 	ble.w	8010d4c <_strtod_l+0x854>
 8010afc:	2b34      	cmp	r3, #52	; 0x34
 8010afe:	bfde      	ittt	le
 8010b00:	3b20      	suble	r3, #32
 8010b02:	f04f 32ff 	movle.w	r2, #4294967295
 8010b06:	fa02 f303 	lslle.w	r3, r2, r3
 8010b0a:	f04f 0a00 	mov.w	sl, #0
 8010b0e:	bfcc      	ite	gt
 8010b10:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010b14:	ea03 0b01 	andle.w	fp, r3, r1
 8010b18:	2200      	movs	r2, #0
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	4650      	mov	r0, sl
 8010b1e:	4659      	mov	r1, fp
 8010b20:	f7ef fff2 	bl	8000b08 <__aeabi_dcmpeq>
 8010b24:	2800      	cmp	r0, #0
 8010b26:	d1a4      	bne.n	8010a72 <_strtod_l+0x57a>
 8010b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010b2e:	462b      	mov	r3, r5
 8010b30:	463a      	mov	r2, r7
 8010b32:	4620      	mov	r0, r4
 8010b34:	f002 f982 	bl	8012e3c <__s2b>
 8010b38:	9009      	str	r0, [sp, #36]	; 0x24
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	f43f af24 	beq.w	8010988 <_strtod_l+0x490>
 8010b40:	9b07      	ldr	r3, [sp, #28]
 8010b42:	1b9e      	subs	r6, r3, r6
 8010b44:	9b08      	ldr	r3, [sp, #32]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	bfb4      	ite	lt
 8010b4a:	4633      	movlt	r3, r6
 8010b4c:	2300      	movge	r3, #0
 8010b4e:	9310      	str	r3, [sp, #64]	; 0x40
 8010b50:	9b08      	ldr	r3, [sp, #32]
 8010b52:	2500      	movs	r5, #0
 8010b54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010b58:	9318      	str	r3, [sp, #96]	; 0x60
 8010b5a:	462e      	mov	r6, r5
 8010b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b5e:	4620      	mov	r0, r4
 8010b60:	6859      	ldr	r1, [r3, #4]
 8010b62:	f002 f8bf 	bl	8012ce4 <_Balloc>
 8010b66:	9007      	str	r0, [sp, #28]
 8010b68:	2800      	cmp	r0, #0
 8010b6a:	f43f af11 	beq.w	8010990 <_strtod_l+0x498>
 8010b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b70:	691a      	ldr	r2, [r3, #16]
 8010b72:	3202      	adds	r2, #2
 8010b74:	f103 010c 	add.w	r1, r3, #12
 8010b78:	0092      	lsls	r2, r2, #2
 8010b7a:	300c      	adds	r0, #12
 8010b7c:	f7fe fc08 	bl	800f390 <memcpy>
 8010b80:	ec4b ab10 	vmov	d0, sl, fp
 8010b84:	aa20      	add	r2, sp, #128	; 0x80
 8010b86:	a91f      	add	r1, sp, #124	; 0x7c
 8010b88:	4620      	mov	r0, r4
 8010b8a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8010b8e:	f002 fc91 	bl	80134b4 <__d2b>
 8010b92:	901e      	str	r0, [sp, #120]	; 0x78
 8010b94:	2800      	cmp	r0, #0
 8010b96:	f43f aefb 	beq.w	8010990 <_strtod_l+0x498>
 8010b9a:	2101      	movs	r1, #1
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	f002 f9e7 	bl	8012f70 <__i2b>
 8010ba2:	4606      	mov	r6, r0
 8010ba4:	2800      	cmp	r0, #0
 8010ba6:	f43f aef3 	beq.w	8010990 <_strtod_l+0x498>
 8010baa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010bac:	9904      	ldr	r1, [sp, #16]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	bfab      	itete	ge
 8010bb2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010bb4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010bb6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010bb8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8010bbc:	bfac      	ite	ge
 8010bbe:	eb03 0902 	addge.w	r9, r3, r2
 8010bc2:	1ad7      	sublt	r7, r2, r3
 8010bc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010bc6:	eba3 0801 	sub.w	r8, r3, r1
 8010bca:	4490      	add	r8, r2
 8010bcc:	4ba3      	ldr	r3, [pc, #652]	; (8010e5c <_strtod_l+0x964>)
 8010bce:	f108 38ff 	add.w	r8, r8, #4294967295
 8010bd2:	4598      	cmp	r8, r3
 8010bd4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010bd8:	f280 80cc 	bge.w	8010d74 <_strtod_l+0x87c>
 8010bdc:	eba3 0308 	sub.w	r3, r3, r8
 8010be0:	2b1f      	cmp	r3, #31
 8010be2:	eba2 0203 	sub.w	r2, r2, r3
 8010be6:	f04f 0101 	mov.w	r1, #1
 8010bea:	f300 80b6 	bgt.w	8010d5a <_strtod_l+0x862>
 8010bee:	fa01 f303 	lsl.w	r3, r1, r3
 8010bf2:	9311      	str	r3, [sp, #68]	; 0x44
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	930c      	str	r3, [sp, #48]	; 0x30
 8010bf8:	eb09 0802 	add.w	r8, r9, r2
 8010bfc:	9b04      	ldr	r3, [sp, #16]
 8010bfe:	45c1      	cmp	r9, r8
 8010c00:	4417      	add	r7, r2
 8010c02:	441f      	add	r7, r3
 8010c04:	464b      	mov	r3, r9
 8010c06:	bfa8      	it	ge
 8010c08:	4643      	movge	r3, r8
 8010c0a:	42bb      	cmp	r3, r7
 8010c0c:	bfa8      	it	ge
 8010c0e:	463b      	movge	r3, r7
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	bfc2      	ittt	gt
 8010c14:	eba8 0803 	subgt.w	r8, r8, r3
 8010c18:	1aff      	subgt	r7, r7, r3
 8010c1a:	eba9 0903 	subgt.w	r9, r9, r3
 8010c1e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	dd17      	ble.n	8010c54 <_strtod_l+0x75c>
 8010c24:	4631      	mov	r1, r6
 8010c26:	461a      	mov	r2, r3
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f002 fa5d 	bl	80130e8 <__pow5mult>
 8010c2e:	4606      	mov	r6, r0
 8010c30:	2800      	cmp	r0, #0
 8010c32:	f43f aead 	beq.w	8010990 <_strtod_l+0x498>
 8010c36:	4601      	mov	r1, r0
 8010c38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f002 f9ae 	bl	8012f9c <__multiply>
 8010c40:	900f      	str	r0, [sp, #60]	; 0x3c
 8010c42:	2800      	cmp	r0, #0
 8010c44:	f43f aea4 	beq.w	8010990 <_strtod_l+0x498>
 8010c48:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010c4a:	4620      	mov	r0, r4
 8010c4c:	f002 f88a 	bl	8012d64 <_Bfree>
 8010c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010c52:	931e      	str	r3, [sp, #120]	; 0x78
 8010c54:	f1b8 0f00 	cmp.w	r8, #0
 8010c58:	f300 8091 	bgt.w	8010d7e <_strtod_l+0x886>
 8010c5c:	9b08      	ldr	r3, [sp, #32]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	dd08      	ble.n	8010c74 <_strtod_l+0x77c>
 8010c62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010c64:	9907      	ldr	r1, [sp, #28]
 8010c66:	4620      	mov	r0, r4
 8010c68:	f002 fa3e 	bl	80130e8 <__pow5mult>
 8010c6c:	9007      	str	r0, [sp, #28]
 8010c6e:	2800      	cmp	r0, #0
 8010c70:	f43f ae8e 	beq.w	8010990 <_strtod_l+0x498>
 8010c74:	2f00      	cmp	r7, #0
 8010c76:	dd08      	ble.n	8010c8a <_strtod_l+0x792>
 8010c78:	9907      	ldr	r1, [sp, #28]
 8010c7a:	463a      	mov	r2, r7
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f002 fa8d 	bl	801319c <__lshift>
 8010c82:	9007      	str	r0, [sp, #28]
 8010c84:	2800      	cmp	r0, #0
 8010c86:	f43f ae83 	beq.w	8010990 <_strtod_l+0x498>
 8010c8a:	f1b9 0f00 	cmp.w	r9, #0
 8010c8e:	dd08      	ble.n	8010ca2 <_strtod_l+0x7aa>
 8010c90:	4631      	mov	r1, r6
 8010c92:	464a      	mov	r2, r9
 8010c94:	4620      	mov	r0, r4
 8010c96:	f002 fa81 	bl	801319c <__lshift>
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	2800      	cmp	r0, #0
 8010c9e:	f43f ae77 	beq.w	8010990 <_strtod_l+0x498>
 8010ca2:	9a07      	ldr	r2, [sp, #28]
 8010ca4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	f002 fb00 	bl	80132ac <__mdiff>
 8010cac:	4605      	mov	r5, r0
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	f43f ae6e 	beq.w	8010990 <_strtod_l+0x498>
 8010cb4:	68c3      	ldr	r3, [r0, #12]
 8010cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010cb8:	2300      	movs	r3, #0
 8010cba:	60c3      	str	r3, [r0, #12]
 8010cbc:	4631      	mov	r1, r6
 8010cbe:	f002 fad9 	bl	8013274 <__mcmp>
 8010cc2:	2800      	cmp	r0, #0
 8010cc4:	da65      	bge.n	8010d92 <_strtod_l+0x89a>
 8010cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010cc8:	ea53 030a 	orrs.w	r3, r3, sl
 8010ccc:	f040 8087 	bne.w	8010dde <_strtod_l+0x8e6>
 8010cd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	f040 8082 	bne.w	8010dde <_strtod_l+0x8e6>
 8010cda:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010cde:	0d1b      	lsrs	r3, r3, #20
 8010ce0:	051b      	lsls	r3, r3, #20
 8010ce2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010ce6:	d97a      	bls.n	8010dde <_strtod_l+0x8e6>
 8010ce8:	696b      	ldr	r3, [r5, #20]
 8010cea:	b913      	cbnz	r3, 8010cf2 <_strtod_l+0x7fa>
 8010cec:	692b      	ldr	r3, [r5, #16]
 8010cee:	2b01      	cmp	r3, #1
 8010cf0:	dd75      	ble.n	8010dde <_strtod_l+0x8e6>
 8010cf2:	4629      	mov	r1, r5
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f002 fa50 	bl	801319c <__lshift>
 8010cfc:	4631      	mov	r1, r6
 8010cfe:	4605      	mov	r5, r0
 8010d00:	f002 fab8 	bl	8013274 <__mcmp>
 8010d04:	2800      	cmp	r0, #0
 8010d06:	dd6a      	ble.n	8010dde <_strtod_l+0x8e6>
 8010d08:	9904      	ldr	r1, [sp, #16]
 8010d0a:	4a55      	ldr	r2, [pc, #340]	; (8010e60 <_strtod_l+0x968>)
 8010d0c:	465b      	mov	r3, fp
 8010d0e:	2900      	cmp	r1, #0
 8010d10:	f000 8085 	beq.w	8010e1e <_strtod_l+0x926>
 8010d14:	ea02 010b 	and.w	r1, r2, fp
 8010d18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010d1c:	dc7f      	bgt.n	8010e1e <_strtod_l+0x926>
 8010d1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010d22:	f77f aeaa 	ble.w	8010a7a <_strtod_l+0x582>
 8010d26:	4a4f      	ldr	r2, [pc, #316]	; (8010e64 <_strtod_l+0x96c>)
 8010d28:	2300      	movs	r3, #0
 8010d2a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8010d2e:	4650      	mov	r0, sl
 8010d30:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8010d34:	4659      	mov	r1, fp
 8010d36:	f7ef fc7f 	bl	8000638 <__aeabi_dmul>
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	4303      	orrs	r3, r0
 8010d3e:	bf08      	it	eq
 8010d40:	2322      	moveq	r3, #34	; 0x22
 8010d42:	4682      	mov	sl, r0
 8010d44:	468b      	mov	fp, r1
 8010d46:	bf08      	it	eq
 8010d48:	6023      	streq	r3, [r4, #0]
 8010d4a:	e62b      	b.n	80109a4 <_strtod_l+0x4ac>
 8010d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d50:	fa02 f303 	lsl.w	r3, r2, r3
 8010d54:	ea03 0a0a 	and.w	sl, r3, sl
 8010d58:	e6de      	b.n	8010b18 <_strtod_l+0x620>
 8010d5a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010d5e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010d62:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010d66:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010d6a:	fa01 f308 	lsl.w	r3, r1, r8
 8010d6e:	930c      	str	r3, [sp, #48]	; 0x30
 8010d70:	9111      	str	r1, [sp, #68]	; 0x44
 8010d72:	e741      	b.n	8010bf8 <_strtod_l+0x700>
 8010d74:	2300      	movs	r3, #0
 8010d76:	930c      	str	r3, [sp, #48]	; 0x30
 8010d78:	2301      	movs	r3, #1
 8010d7a:	9311      	str	r3, [sp, #68]	; 0x44
 8010d7c:	e73c      	b.n	8010bf8 <_strtod_l+0x700>
 8010d7e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010d80:	4642      	mov	r2, r8
 8010d82:	4620      	mov	r0, r4
 8010d84:	f002 fa0a 	bl	801319c <__lshift>
 8010d88:	901e      	str	r0, [sp, #120]	; 0x78
 8010d8a:	2800      	cmp	r0, #0
 8010d8c:	f47f af66 	bne.w	8010c5c <_strtod_l+0x764>
 8010d90:	e5fe      	b.n	8010990 <_strtod_l+0x498>
 8010d92:	465f      	mov	r7, fp
 8010d94:	d16e      	bne.n	8010e74 <_strtod_l+0x97c>
 8010d96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010d98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010d9c:	b342      	cbz	r2, 8010df0 <_strtod_l+0x8f8>
 8010d9e:	4a32      	ldr	r2, [pc, #200]	; (8010e68 <_strtod_l+0x970>)
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d128      	bne.n	8010df6 <_strtod_l+0x8fe>
 8010da4:	9b04      	ldr	r3, [sp, #16]
 8010da6:	4650      	mov	r0, sl
 8010da8:	b1eb      	cbz	r3, 8010de6 <_strtod_l+0x8ee>
 8010daa:	4a2d      	ldr	r2, [pc, #180]	; (8010e60 <_strtod_l+0x968>)
 8010dac:	403a      	ands	r2, r7
 8010dae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010db2:	f04f 31ff 	mov.w	r1, #4294967295
 8010db6:	d819      	bhi.n	8010dec <_strtod_l+0x8f4>
 8010db8:	0d12      	lsrs	r2, r2, #20
 8010dba:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8010dc2:	4298      	cmp	r0, r3
 8010dc4:	d117      	bne.n	8010df6 <_strtod_l+0x8fe>
 8010dc6:	4b29      	ldr	r3, [pc, #164]	; (8010e6c <_strtod_l+0x974>)
 8010dc8:	429f      	cmp	r7, r3
 8010dca:	d102      	bne.n	8010dd2 <_strtod_l+0x8da>
 8010dcc:	3001      	adds	r0, #1
 8010dce:	f43f addf 	beq.w	8010990 <_strtod_l+0x498>
 8010dd2:	4b23      	ldr	r3, [pc, #140]	; (8010e60 <_strtod_l+0x968>)
 8010dd4:	403b      	ands	r3, r7
 8010dd6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010dda:	f04f 0a00 	mov.w	sl, #0
 8010dde:	9b04      	ldr	r3, [sp, #16]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1a0      	bne.n	8010d26 <_strtod_l+0x82e>
 8010de4:	e5de      	b.n	80109a4 <_strtod_l+0x4ac>
 8010de6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dea:	e7ea      	b.n	8010dc2 <_strtod_l+0x8ca>
 8010dec:	460b      	mov	r3, r1
 8010dee:	e7e8      	b.n	8010dc2 <_strtod_l+0x8ca>
 8010df0:	ea53 030a 	orrs.w	r3, r3, sl
 8010df4:	d088      	beq.n	8010d08 <_strtod_l+0x810>
 8010df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010df8:	b1db      	cbz	r3, 8010e32 <_strtod_l+0x93a>
 8010dfa:	423b      	tst	r3, r7
 8010dfc:	d0ef      	beq.n	8010dde <_strtod_l+0x8e6>
 8010dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e00:	9a04      	ldr	r2, [sp, #16]
 8010e02:	4650      	mov	r0, sl
 8010e04:	4659      	mov	r1, fp
 8010e06:	b1c3      	cbz	r3, 8010e3a <_strtod_l+0x942>
 8010e08:	f7ff fb58 	bl	80104bc <sulp>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	460b      	mov	r3, r1
 8010e10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010e14:	f7ef fa5a 	bl	80002cc <__adddf3>
 8010e18:	4682      	mov	sl, r0
 8010e1a:	468b      	mov	fp, r1
 8010e1c:	e7df      	b.n	8010dde <_strtod_l+0x8e6>
 8010e1e:	4013      	ands	r3, r2
 8010e20:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010e24:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010e28:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010e2c:	f04f 3aff 	mov.w	sl, #4294967295
 8010e30:	e7d5      	b.n	8010dde <_strtod_l+0x8e6>
 8010e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e34:	ea13 0f0a 	tst.w	r3, sl
 8010e38:	e7e0      	b.n	8010dfc <_strtod_l+0x904>
 8010e3a:	f7ff fb3f 	bl	80104bc <sulp>
 8010e3e:	4602      	mov	r2, r0
 8010e40:	460b      	mov	r3, r1
 8010e42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010e46:	f7ef fa3f 	bl	80002c8 <__aeabi_dsub>
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	4682      	mov	sl, r0
 8010e50:	468b      	mov	fp, r1
 8010e52:	f7ef fe59 	bl	8000b08 <__aeabi_dcmpeq>
 8010e56:	2800      	cmp	r0, #0
 8010e58:	d0c1      	beq.n	8010dde <_strtod_l+0x8e6>
 8010e5a:	e60e      	b.n	8010a7a <_strtod_l+0x582>
 8010e5c:	fffffc02 	.word	0xfffffc02
 8010e60:	7ff00000 	.word	0x7ff00000
 8010e64:	39500000 	.word	0x39500000
 8010e68:	000fffff 	.word	0x000fffff
 8010e6c:	7fefffff 	.word	0x7fefffff
 8010e70:	08016398 	.word	0x08016398
 8010e74:	4631      	mov	r1, r6
 8010e76:	4628      	mov	r0, r5
 8010e78:	f002 fb78 	bl	801356c <__ratio>
 8010e7c:	ec59 8b10 	vmov	r8, r9, d0
 8010e80:	ee10 0a10 	vmov	r0, s0
 8010e84:	2200      	movs	r2, #0
 8010e86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010e8a:	4649      	mov	r1, r9
 8010e8c:	f7ef fe50 	bl	8000b30 <__aeabi_dcmple>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	d07c      	beq.n	8010f8e <_strtod_l+0xa96>
 8010e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d04c      	beq.n	8010f34 <_strtod_l+0xa3c>
 8010e9a:	4b95      	ldr	r3, [pc, #596]	; (80110f0 <_strtod_l+0xbf8>)
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010ea2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80110f0 <_strtod_l+0xbf8>
 8010ea6:	f04f 0800 	mov.w	r8, #0
 8010eaa:	4b92      	ldr	r3, [pc, #584]	; (80110f4 <_strtod_l+0xbfc>)
 8010eac:	403b      	ands	r3, r7
 8010eae:	9311      	str	r3, [sp, #68]	; 0x44
 8010eb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010eb2:	4b91      	ldr	r3, [pc, #580]	; (80110f8 <_strtod_l+0xc00>)
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	f040 80b2 	bne.w	801101e <_strtod_l+0xb26>
 8010eba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010ec2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010ec6:	ec4b ab10 	vmov	d0, sl, fp
 8010eca:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8010ece:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010ed2:	f002 fa73 	bl	80133bc <__ulp>
 8010ed6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010eda:	ec53 2b10 	vmov	r2, r3, d0
 8010ede:	f7ef fbab 	bl	8000638 <__aeabi_dmul>
 8010ee2:	4652      	mov	r2, sl
 8010ee4:	465b      	mov	r3, fp
 8010ee6:	f7ef f9f1 	bl	80002cc <__adddf3>
 8010eea:	460b      	mov	r3, r1
 8010eec:	4981      	ldr	r1, [pc, #516]	; (80110f4 <_strtod_l+0xbfc>)
 8010eee:	4a83      	ldr	r2, [pc, #524]	; (80110fc <_strtod_l+0xc04>)
 8010ef0:	4019      	ands	r1, r3
 8010ef2:	4291      	cmp	r1, r2
 8010ef4:	4682      	mov	sl, r0
 8010ef6:	d95e      	bls.n	8010fb6 <_strtod_l+0xabe>
 8010ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010efa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010efe:	4293      	cmp	r3, r2
 8010f00:	d103      	bne.n	8010f0a <_strtod_l+0xa12>
 8010f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f04:	3301      	adds	r3, #1
 8010f06:	f43f ad43 	beq.w	8010990 <_strtod_l+0x498>
 8010f0a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8011108 <_strtod_l+0xc10>
 8010f0e:	f04f 3aff 	mov.w	sl, #4294967295
 8010f12:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010f14:	4620      	mov	r0, r4
 8010f16:	f001 ff25 	bl	8012d64 <_Bfree>
 8010f1a:	9907      	ldr	r1, [sp, #28]
 8010f1c:	4620      	mov	r0, r4
 8010f1e:	f001 ff21 	bl	8012d64 <_Bfree>
 8010f22:	4631      	mov	r1, r6
 8010f24:	4620      	mov	r0, r4
 8010f26:	f001 ff1d 	bl	8012d64 <_Bfree>
 8010f2a:	4629      	mov	r1, r5
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	f001 ff19 	bl	8012d64 <_Bfree>
 8010f32:	e613      	b.n	8010b5c <_strtod_l+0x664>
 8010f34:	f1ba 0f00 	cmp.w	sl, #0
 8010f38:	d11b      	bne.n	8010f72 <_strtod_l+0xa7a>
 8010f3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f3e:	b9f3      	cbnz	r3, 8010f7e <_strtod_l+0xa86>
 8010f40:	4b6b      	ldr	r3, [pc, #428]	; (80110f0 <_strtod_l+0xbf8>)
 8010f42:	2200      	movs	r2, #0
 8010f44:	4640      	mov	r0, r8
 8010f46:	4649      	mov	r1, r9
 8010f48:	f7ef fde8 	bl	8000b1c <__aeabi_dcmplt>
 8010f4c:	b9d0      	cbnz	r0, 8010f84 <_strtod_l+0xa8c>
 8010f4e:	4640      	mov	r0, r8
 8010f50:	4649      	mov	r1, r9
 8010f52:	4b6b      	ldr	r3, [pc, #428]	; (8011100 <_strtod_l+0xc08>)
 8010f54:	2200      	movs	r2, #0
 8010f56:	f7ef fb6f 	bl	8000638 <__aeabi_dmul>
 8010f5a:	4680      	mov	r8, r0
 8010f5c:	4689      	mov	r9, r1
 8010f5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010f62:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010f66:	931b      	str	r3, [sp, #108]	; 0x6c
 8010f68:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010f6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010f70:	e79b      	b.n	8010eaa <_strtod_l+0x9b2>
 8010f72:	f1ba 0f01 	cmp.w	sl, #1
 8010f76:	d102      	bne.n	8010f7e <_strtod_l+0xa86>
 8010f78:	2f00      	cmp	r7, #0
 8010f7a:	f43f ad7e 	beq.w	8010a7a <_strtod_l+0x582>
 8010f7e:	4b61      	ldr	r3, [pc, #388]	; (8011104 <_strtod_l+0xc0c>)
 8010f80:	2200      	movs	r2, #0
 8010f82:	e78c      	b.n	8010e9e <_strtod_l+0x9a6>
 8010f84:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8011100 <_strtod_l+0xc08>
 8010f88:	f04f 0800 	mov.w	r8, #0
 8010f8c:	e7e7      	b.n	8010f5e <_strtod_l+0xa66>
 8010f8e:	4b5c      	ldr	r3, [pc, #368]	; (8011100 <_strtod_l+0xc08>)
 8010f90:	4640      	mov	r0, r8
 8010f92:	4649      	mov	r1, r9
 8010f94:	2200      	movs	r2, #0
 8010f96:	f7ef fb4f 	bl	8000638 <__aeabi_dmul>
 8010f9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010f9c:	4680      	mov	r8, r0
 8010f9e:	4689      	mov	r9, r1
 8010fa0:	b933      	cbnz	r3, 8010fb0 <_strtod_l+0xab8>
 8010fa2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010fa6:	9012      	str	r0, [sp, #72]	; 0x48
 8010fa8:	9313      	str	r3, [sp, #76]	; 0x4c
 8010faa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8010fae:	e7dd      	b.n	8010f6c <_strtod_l+0xa74>
 8010fb0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010fb4:	e7f9      	b.n	8010faa <_strtod_l+0xab2>
 8010fb6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010fba:	9b04      	ldr	r3, [sp, #16]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d1a8      	bne.n	8010f12 <_strtod_l+0xa1a>
 8010fc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010fc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010fc6:	0d1b      	lsrs	r3, r3, #20
 8010fc8:	051b      	lsls	r3, r3, #20
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d1a1      	bne.n	8010f12 <_strtod_l+0xa1a>
 8010fce:	4640      	mov	r0, r8
 8010fd0:	4649      	mov	r1, r9
 8010fd2:	f7ef fe91 	bl	8000cf8 <__aeabi_d2lz>
 8010fd6:	f7ef fb01 	bl	80005dc <__aeabi_l2d>
 8010fda:	4602      	mov	r2, r0
 8010fdc:	460b      	mov	r3, r1
 8010fde:	4640      	mov	r0, r8
 8010fe0:	4649      	mov	r1, r9
 8010fe2:	f7ef f971 	bl	80002c8 <__aeabi_dsub>
 8010fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010fe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010fec:	ea43 030a 	orr.w	r3, r3, sl
 8010ff0:	4313      	orrs	r3, r2
 8010ff2:	4680      	mov	r8, r0
 8010ff4:	4689      	mov	r9, r1
 8010ff6:	d053      	beq.n	80110a0 <_strtod_l+0xba8>
 8010ff8:	a335      	add	r3, pc, #212	; (adr r3, 80110d0 <_strtod_l+0xbd8>)
 8010ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffe:	f7ef fd8d 	bl	8000b1c <__aeabi_dcmplt>
 8011002:	2800      	cmp	r0, #0
 8011004:	f47f acce 	bne.w	80109a4 <_strtod_l+0x4ac>
 8011008:	a333      	add	r3, pc, #204	; (adr r3, 80110d8 <_strtod_l+0xbe0>)
 801100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100e:	4640      	mov	r0, r8
 8011010:	4649      	mov	r1, r9
 8011012:	f7ef fda1 	bl	8000b58 <__aeabi_dcmpgt>
 8011016:	2800      	cmp	r0, #0
 8011018:	f43f af7b 	beq.w	8010f12 <_strtod_l+0xa1a>
 801101c:	e4c2      	b.n	80109a4 <_strtod_l+0x4ac>
 801101e:	9b04      	ldr	r3, [sp, #16]
 8011020:	b333      	cbz	r3, 8011070 <_strtod_l+0xb78>
 8011022:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011024:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011028:	d822      	bhi.n	8011070 <_strtod_l+0xb78>
 801102a:	a32d      	add	r3, pc, #180	; (adr r3, 80110e0 <_strtod_l+0xbe8>)
 801102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011030:	4640      	mov	r0, r8
 8011032:	4649      	mov	r1, r9
 8011034:	f7ef fd7c 	bl	8000b30 <__aeabi_dcmple>
 8011038:	b1a0      	cbz	r0, 8011064 <_strtod_l+0xb6c>
 801103a:	4649      	mov	r1, r9
 801103c:	4640      	mov	r0, r8
 801103e:	f7ef fdd3 	bl	8000be8 <__aeabi_d2uiz>
 8011042:	2801      	cmp	r0, #1
 8011044:	bf38      	it	cc
 8011046:	2001      	movcc	r0, #1
 8011048:	f7ef fa7c 	bl	8000544 <__aeabi_ui2d>
 801104c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801104e:	4680      	mov	r8, r0
 8011050:	4689      	mov	r9, r1
 8011052:	bb13      	cbnz	r3, 801109a <_strtod_l+0xba2>
 8011054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011058:	9014      	str	r0, [sp, #80]	; 0x50
 801105a:	9315      	str	r3, [sp, #84]	; 0x54
 801105c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011060:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011066:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011068:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801106c:	1a9b      	subs	r3, r3, r2
 801106e:	930d      	str	r3, [sp, #52]	; 0x34
 8011070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011074:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011078:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801107c:	f002 f99e 	bl	80133bc <__ulp>
 8011080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011084:	ec53 2b10 	vmov	r2, r3, d0
 8011088:	f7ef fad6 	bl	8000638 <__aeabi_dmul>
 801108c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011090:	f7ef f91c 	bl	80002cc <__adddf3>
 8011094:	4682      	mov	sl, r0
 8011096:	468b      	mov	fp, r1
 8011098:	e78f      	b.n	8010fba <_strtod_l+0xac2>
 801109a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801109e:	e7dd      	b.n	801105c <_strtod_l+0xb64>
 80110a0:	a311      	add	r3, pc, #68	; (adr r3, 80110e8 <_strtod_l+0xbf0>)
 80110a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a6:	f7ef fd39 	bl	8000b1c <__aeabi_dcmplt>
 80110aa:	e7b4      	b.n	8011016 <_strtod_l+0xb1e>
 80110ac:	2300      	movs	r3, #0
 80110ae:	930e      	str	r3, [sp, #56]	; 0x38
 80110b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80110b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80110b4:	6013      	str	r3, [r2, #0]
 80110b6:	f7ff ba65 	b.w	8010584 <_strtod_l+0x8c>
 80110ba:	2b65      	cmp	r3, #101	; 0x65
 80110bc:	f43f ab5d 	beq.w	801077a <_strtod_l+0x282>
 80110c0:	2b45      	cmp	r3, #69	; 0x45
 80110c2:	f43f ab5a 	beq.w	801077a <_strtod_l+0x282>
 80110c6:	2201      	movs	r2, #1
 80110c8:	f7ff bb92 	b.w	80107f0 <_strtod_l+0x2f8>
 80110cc:	f3af 8000 	nop.w
 80110d0:	94a03595 	.word	0x94a03595
 80110d4:	3fdfffff 	.word	0x3fdfffff
 80110d8:	35afe535 	.word	0x35afe535
 80110dc:	3fe00000 	.word	0x3fe00000
 80110e0:	ffc00000 	.word	0xffc00000
 80110e4:	41dfffff 	.word	0x41dfffff
 80110e8:	94a03595 	.word	0x94a03595
 80110ec:	3fcfffff 	.word	0x3fcfffff
 80110f0:	3ff00000 	.word	0x3ff00000
 80110f4:	7ff00000 	.word	0x7ff00000
 80110f8:	7fe00000 	.word	0x7fe00000
 80110fc:	7c9fffff 	.word	0x7c9fffff
 8011100:	3fe00000 	.word	0x3fe00000
 8011104:	bff00000 	.word	0xbff00000
 8011108:	7fefffff 	.word	0x7fefffff

0801110c <_strtod_r>:
 801110c:	4b01      	ldr	r3, [pc, #4]	; (8011114 <_strtod_r+0x8>)
 801110e:	f7ff b9f3 	b.w	80104f8 <_strtod_l>
 8011112:	bf00      	nop
 8011114:	20000090 	.word	0x20000090

08011118 <_strtol_l.isra.0>:
 8011118:	2b01      	cmp	r3, #1
 801111a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801111e:	d001      	beq.n	8011124 <_strtol_l.isra.0+0xc>
 8011120:	2b24      	cmp	r3, #36	; 0x24
 8011122:	d906      	bls.n	8011132 <_strtol_l.isra.0+0x1a>
 8011124:	f7fe f902 	bl	800f32c <__errno>
 8011128:	2316      	movs	r3, #22
 801112a:	6003      	str	r3, [r0, #0]
 801112c:	2000      	movs	r0, #0
 801112e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011132:	4f3a      	ldr	r7, [pc, #232]	; (801121c <_strtol_l.isra.0+0x104>)
 8011134:	468e      	mov	lr, r1
 8011136:	4676      	mov	r6, lr
 8011138:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801113c:	5de5      	ldrb	r5, [r4, r7]
 801113e:	f015 0508 	ands.w	r5, r5, #8
 8011142:	d1f8      	bne.n	8011136 <_strtol_l.isra.0+0x1e>
 8011144:	2c2d      	cmp	r4, #45	; 0x2d
 8011146:	d134      	bne.n	80111b2 <_strtol_l.isra.0+0x9a>
 8011148:	f89e 4000 	ldrb.w	r4, [lr]
 801114c:	f04f 0801 	mov.w	r8, #1
 8011150:	f106 0e02 	add.w	lr, r6, #2
 8011154:	2b00      	cmp	r3, #0
 8011156:	d05c      	beq.n	8011212 <_strtol_l.isra.0+0xfa>
 8011158:	2b10      	cmp	r3, #16
 801115a:	d10c      	bne.n	8011176 <_strtol_l.isra.0+0x5e>
 801115c:	2c30      	cmp	r4, #48	; 0x30
 801115e:	d10a      	bne.n	8011176 <_strtol_l.isra.0+0x5e>
 8011160:	f89e 4000 	ldrb.w	r4, [lr]
 8011164:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011168:	2c58      	cmp	r4, #88	; 0x58
 801116a:	d14d      	bne.n	8011208 <_strtol_l.isra.0+0xf0>
 801116c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8011170:	2310      	movs	r3, #16
 8011172:	f10e 0e02 	add.w	lr, lr, #2
 8011176:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801117a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801117e:	2600      	movs	r6, #0
 8011180:	fbbc f9f3 	udiv	r9, ip, r3
 8011184:	4635      	mov	r5, r6
 8011186:	fb03 ca19 	mls	sl, r3, r9, ip
 801118a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801118e:	2f09      	cmp	r7, #9
 8011190:	d818      	bhi.n	80111c4 <_strtol_l.isra.0+0xac>
 8011192:	463c      	mov	r4, r7
 8011194:	42a3      	cmp	r3, r4
 8011196:	dd24      	ble.n	80111e2 <_strtol_l.isra.0+0xca>
 8011198:	2e00      	cmp	r6, #0
 801119a:	db1f      	blt.n	80111dc <_strtol_l.isra.0+0xc4>
 801119c:	45a9      	cmp	r9, r5
 801119e:	d31d      	bcc.n	80111dc <_strtol_l.isra.0+0xc4>
 80111a0:	d101      	bne.n	80111a6 <_strtol_l.isra.0+0x8e>
 80111a2:	45a2      	cmp	sl, r4
 80111a4:	db1a      	blt.n	80111dc <_strtol_l.isra.0+0xc4>
 80111a6:	fb05 4503 	mla	r5, r5, r3, r4
 80111aa:	2601      	movs	r6, #1
 80111ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80111b0:	e7eb      	b.n	801118a <_strtol_l.isra.0+0x72>
 80111b2:	2c2b      	cmp	r4, #43	; 0x2b
 80111b4:	bf08      	it	eq
 80111b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80111ba:	46a8      	mov	r8, r5
 80111bc:	bf08      	it	eq
 80111be:	f106 0e02 	addeq.w	lr, r6, #2
 80111c2:	e7c7      	b.n	8011154 <_strtol_l.isra.0+0x3c>
 80111c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80111c8:	2f19      	cmp	r7, #25
 80111ca:	d801      	bhi.n	80111d0 <_strtol_l.isra.0+0xb8>
 80111cc:	3c37      	subs	r4, #55	; 0x37
 80111ce:	e7e1      	b.n	8011194 <_strtol_l.isra.0+0x7c>
 80111d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80111d4:	2f19      	cmp	r7, #25
 80111d6:	d804      	bhi.n	80111e2 <_strtol_l.isra.0+0xca>
 80111d8:	3c57      	subs	r4, #87	; 0x57
 80111da:	e7db      	b.n	8011194 <_strtol_l.isra.0+0x7c>
 80111dc:	f04f 36ff 	mov.w	r6, #4294967295
 80111e0:	e7e4      	b.n	80111ac <_strtol_l.isra.0+0x94>
 80111e2:	2e00      	cmp	r6, #0
 80111e4:	da05      	bge.n	80111f2 <_strtol_l.isra.0+0xda>
 80111e6:	2322      	movs	r3, #34	; 0x22
 80111e8:	6003      	str	r3, [r0, #0]
 80111ea:	4665      	mov	r5, ip
 80111ec:	b942      	cbnz	r2, 8011200 <_strtol_l.isra.0+0xe8>
 80111ee:	4628      	mov	r0, r5
 80111f0:	e79d      	b.n	801112e <_strtol_l.isra.0+0x16>
 80111f2:	f1b8 0f00 	cmp.w	r8, #0
 80111f6:	d000      	beq.n	80111fa <_strtol_l.isra.0+0xe2>
 80111f8:	426d      	negs	r5, r5
 80111fa:	2a00      	cmp	r2, #0
 80111fc:	d0f7      	beq.n	80111ee <_strtol_l.isra.0+0xd6>
 80111fe:	b10e      	cbz	r6, 8011204 <_strtol_l.isra.0+0xec>
 8011200:	f10e 31ff 	add.w	r1, lr, #4294967295
 8011204:	6011      	str	r1, [r2, #0]
 8011206:	e7f2      	b.n	80111ee <_strtol_l.isra.0+0xd6>
 8011208:	2430      	movs	r4, #48	; 0x30
 801120a:	2b00      	cmp	r3, #0
 801120c:	d1b3      	bne.n	8011176 <_strtol_l.isra.0+0x5e>
 801120e:	2308      	movs	r3, #8
 8011210:	e7b1      	b.n	8011176 <_strtol_l.isra.0+0x5e>
 8011212:	2c30      	cmp	r4, #48	; 0x30
 8011214:	d0a4      	beq.n	8011160 <_strtol_l.isra.0+0x48>
 8011216:	230a      	movs	r3, #10
 8011218:	e7ad      	b.n	8011176 <_strtol_l.isra.0+0x5e>
 801121a:	bf00      	nop
 801121c:	08016231 	.word	0x08016231

08011220 <_strtol_r>:
 8011220:	f7ff bf7a 	b.w	8011118 <_strtol_l.isra.0>

08011224 <strtol>:
 8011224:	4613      	mov	r3, r2
 8011226:	460a      	mov	r2, r1
 8011228:	4601      	mov	r1, r0
 801122a:	4802      	ldr	r0, [pc, #8]	; (8011234 <strtol+0x10>)
 801122c:	6800      	ldr	r0, [r0, #0]
 801122e:	f7ff bf73 	b.w	8011118 <_strtol_l.isra.0>
 8011232:	bf00      	nop
 8011234:	20000028 	.word	0x20000028

08011238 <_vsniprintf_r>:
 8011238:	b530      	push	{r4, r5, lr}
 801123a:	1e14      	subs	r4, r2, #0
 801123c:	4605      	mov	r5, r0
 801123e:	b09b      	sub	sp, #108	; 0x6c
 8011240:	4618      	mov	r0, r3
 8011242:	da05      	bge.n	8011250 <_vsniprintf_r+0x18>
 8011244:	238b      	movs	r3, #139	; 0x8b
 8011246:	602b      	str	r3, [r5, #0]
 8011248:	f04f 30ff 	mov.w	r0, #4294967295
 801124c:	b01b      	add	sp, #108	; 0x6c
 801124e:	bd30      	pop	{r4, r5, pc}
 8011250:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011254:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011258:	bf14      	ite	ne
 801125a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801125e:	4623      	moveq	r3, r4
 8011260:	9302      	str	r3, [sp, #8]
 8011262:	9305      	str	r3, [sp, #20]
 8011264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011268:	9100      	str	r1, [sp, #0]
 801126a:	9104      	str	r1, [sp, #16]
 801126c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011270:	4602      	mov	r2, r0
 8011272:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011274:	4669      	mov	r1, sp
 8011276:	4628      	mov	r0, r5
 8011278:	f002 fa5a 	bl	8013730 <_svfiprintf_r>
 801127c:	1c43      	adds	r3, r0, #1
 801127e:	bfbc      	itt	lt
 8011280:	238b      	movlt	r3, #139	; 0x8b
 8011282:	602b      	strlt	r3, [r5, #0]
 8011284:	2c00      	cmp	r4, #0
 8011286:	d0e1      	beq.n	801124c <_vsniprintf_r+0x14>
 8011288:	9b00      	ldr	r3, [sp, #0]
 801128a:	2200      	movs	r2, #0
 801128c:	701a      	strb	r2, [r3, #0]
 801128e:	e7dd      	b.n	801124c <_vsniprintf_r+0x14>

08011290 <vsniprintf>:
 8011290:	b507      	push	{r0, r1, r2, lr}
 8011292:	9300      	str	r3, [sp, #0]
 8011294:	4613      	mov	r3, r2
 8011296:	460a      	mov	r2, r1
 8011298:	4601      	mov	r1, r0
 801129a:	4803      	ldr	r0, [pc, #12]	; (80112a8 <vsniprintf+0x18>)
 801129c:	6800      	ldr	r0, [r0, #0]
 801129e:	f7ff ffcb 	bl	8011238 <_vsniprintf_r>
 80112a2:	b003      	add	sp, #12
 80112a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80112a8:	20000028 	.word	0x20000028

080112ac <__swbuf_r>:
 80112ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ae:	460e      	mov	r6, r1
 80112b0:	4614      	mov	r4, r2
 80112b2:	4605      	mov	r5, r0
 80112b4:	b118      	cbz	r0, 80112be <__swbuf_r+0x12>
 80112b6:	6983      	ldr	r3, [r0, #24]
 80112b8:	b90b      	cbnz	r3, 80112be <__swbuf_r+0x12>
 80112ba:	f001 f86b 	bl	8012394 <__sinit>
 80112be:	4b21      	ldr	r3, [pc, #132]	; (8011344 <__swbuf_r+0x98>)
 80112c0:	429c      	cmp	r4, r3
 80112c2:	d12b      	bne.n	801131c <__swbuf_r+0x70>
 80112c4:	686c      	ldr	r4, [r5, #4]
 80112c6:	69a3      	ldr	r3, [r4, #24]
 80112c8:	60a3      	str	r3, [r4, #8]
 80112ca:	89a3      	ldrh	r3, [r4, #12]
 80112cc:	071a      	lsls	r2, r3, #28
 80112ce:	d52f      	bpl.n	8011330 <__swbuf_r+0x84>
 80112d0:	6923      	ldr	r3, [r4, #16]
 80112d2:	b36b      	cbz	r3, 8011330 <__swbuf_r+0x84>
 80112d4:	6923      	ldr	r3, [r4, #16]
 80112d6:	6820      	ldr	r0, [r4, #0]
 80112d8:	1ac0      	subs	r0, r0, r3
 80112da:	6963      	ldr	r3, [r4, #20]
 80112dc:	b2f6      	uxtb	r6, r6
 80112de:	4283      	cmp	r3, r0
 80112e0:	4637      	mov	r7, r6
 80112e2:	dc04      	bgt.n	80112ee <__swbuf_r+0x42>
 80112e4:	4621      	mov	r1, r4
 80112e6:	4628      	mov	r0, r5
 80112e8:	f000 ffc0 	bl	801226c <_fflush_r>
 80112ec:	bb30      	cbnz	r0, 801133c <__swbuf_r+0x90>
 80112ee:	68a3      	ldr	r3, [r4, #8]
 80112f0:	3b01      	subs	r3, #1
 80112f2:	60a3      	str	r3, [r4, #8]
 80112f4:	6823      	ldr	r3, [r4, #0]
 80112f6:	1c5a      	adds	r2, r3, #1
 80112f8:	6022      	str	r2, [r4, #0]
 80112fa:	701e      	strb	r6, [r3, #0]
 80112fc:	6963      	ldr	r3, [r4, #20]
 80112fe:	3001      	adds	r0, #1
 8011300:	4283      	cmp	r3, r0
 8011302:	d004      	beq.n	801130e <__swbuf_r+0x62>
 8011304:	89a3      	ldrh	r3, [r4, #12]
 8011306:	07db      	lsls	r3, r3, #31
 8011308:	d506      	bpl.n	8011318 <__swbuf_r+0x6c>
 801130a:	2e0a      	cmp	r6, #10
 801130c:	d104      	bne.n	8011318 <__swbuf_r+0x6c>
 801130e:	4621      	mov	r1, r4
 8011310:	4628      	mov	r0, r5
 8011312:	f000 ffab 	bl	801226c <_fflush_r>
 8011316:	b988      	cbnz	r0, 801133c <__swbuf_r+0x90>
 8011318:	4638      	mov	r0, r7
 801131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801131c:	4b0a      	ldr	r3, [pc, #40]	; (8011348 <__swbuf_r+0x9c>)
 801131e:	429c      	cmp	r4, r3
 8011320:	d101      	bne.n	8011326 <__swbuf_r+0x7a>
 8011322:	68ac      	ldr	r4, [r5, #8]
 8011324:	e7cf      	b.n	80112c6 <__swbuf_r+0x1a>
 8011326:	4b09      	ldr	r3, [pc, #36]	; (801134c <__swbuf_r+0xa0>)
 8011328:	429c      	cmp	r4, r3
 801132a:	bf08      	it	eq
 801132c:	68ec      	ldreq	r4, [r5, #12]
 801132e:	e7ca      	b.n	80112c6 <__swbuf_r+0x1a>
 8011330:	4621      	mov	r1, r4
 8011332:	4628      	mov	r0, r5
 8011334:	f000 f81e 	bl	8011374 <__swsetup_r>
 8011338:	2800      	cmp	r0, #0
 801133a:	d0cb      	beq.n	80112d4 <__swbuf_r+0x28>
 801133c:	f04f 37ff 	mov.w	r7, #4294967295
 8011340:	e7ea      	b.n	8011318 <__swbuf_r+0x6c>
 8011342:	bf00      	nop
 8011344:	08016474 	.word	0x08016474
 8011348:	08016494 	.word	0x08016494
 801134c:	08016454 	.word	0x08016454

08011350 <_write_r>:
 8011350:	b538      	push	{r3, r4, r5, lr}
 8011352:	4d07      	ldr	r5, [pc, #28]	; (8011370 <_write_r+0x20>)
 8011354:	4604      	mov	r4, r0
 8011356:	4608      	mov	r0, r1
 8011358:	4611      	mov	r1, r2
 801135a:	2200      	movs	r2, #0
 801135c:	602a      	str	r2, [r5, #0]
 801135e:	461a      	mov	r2, r3
 8011360:	f7f3 faa1 	bl	80048a6 <_write>
 8011364:	1c43      	adds	r3, r0, #1
 8011366:	d102      	bne.n	801136e <_write_r+0x1e>
 8011368:	682b      	ldr	r3, [r5, #0]
 801136a:	b103      	cbz	r3, 801136e <_write_r+0x1e>
 801136c:	6023      	str	r3, [r4, #0]
 801136e:	bd38      	pop	{r3, r4, r5, pc}
 8011370:	20001a6c 	.word	0x20001a6c

08011374 <__swsetup_r>:
 8011374:	4b32      	ldr	r3, [pc, #200]	; (8011440 <__swsetup_r+0xcc>)
 8011376:	b570      	push	{r4, r5, r6, lr}
 8011378:	681d      	ldr	r5, [r3, #0]
 801137a:	4606      	mov	r6, r0
 801137c:	460c      	mov	r4, r1
 801137e:	b125      	cbz	r5, 801138a <__swsetup_r+0x16>
 8011380:	69ab      	ldr	r3, [r5, #24]
 8011382:	b913      	cbnz	r3, 801138a <__swsetup_r+0x16>
 8011384:	4628      	mov	r0, r5
 8011386:	f001 f805 	bl	8012394 <__sinit>
 801138a:	4b2e      	ldr	r3, [pc, #184]	; (8011444 <__swsetup_r+0xd0>)
 801138c:	429c      	cmp	r4, r3
 801138e:	d10f      	bne.n	80113b0 <__swsetup_r+0x3c>
 8011390:	686c      	ldr	r4, [r5, #4]
 8011392:	89a3      	ldrh	r3, [r4, #12]
 8011394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011398:	0719      	lsls	r1, r3, #28
 801139a:	d42c      	bmi.n	80113f6 <__swsetup_r+0x82>
 801139c:	06dd      	lsls	r5, r3, #27
 801139e:	d411      	bmi.n	80113c4 <__swsetup_r+0x50>
 80113a0:	2309      	movs	r3, #9
 80113a2:	6033      	str	r3, [r6, #0]
 80113a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80113a8:	81a3      	strh	r3, [r4, #12]
 80113aa:	f04f 30ff 	mov.w	r0, #4294967295
 80113ae:	e03e      	b.n	801142e <__swsetup_r+0xba>
 80113b0:	4b25      	ldr	r3, [pc, #148]	; (8011448 <__swsetup_r+0xd4>)
 80113b2:	429c      	cmp	r4, r3
 80113b4:	d101      	bne.n	80113ba <__swsetup_r+0x46>
 80113b6:	68ac      	ldr	r4, [r5, #8]
 80113b8:	e7eb      	b.n	8011392 <__swsetup_r+0x1e>
 80113ba:	4b24      	ldr	r3, [pc, #144]	; (801144c <__swsetup_r+0xd8>)
 80113bc:	429c      	cmp	r4, r3
 80113be:	bf08      	it	eq
 80113c0:	68ec      	ldreq	r4, [r5, #12]
 80113c2:	e7e6      	b.n	8011392 <__swsetup_r+0x1e>
 80113c4:	0758      	lsls	r0, r3, #29
 80113c6:	d512      	bpl.n	80113ee <__swsetup_r+0x7a>
 80113c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80113ca:	b141      	cbz	r1, 80113de <__swsetup_r+0x6a>
 80113cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80113d0:	4299      	cmp	r1, r3
 80113d2:	d002      	beq.n	80113da <__swsetup_r+0x66>
 80113d4:	4630      	mov	r0, r6
 80113d6:	f7fd fff1 	bl	800f3bc <_free_r>
 80113da:	2300      	movs	r3, #0
 80113dc:	6363      	str	r3, [r4, #52]	; 0x34
 80113de:	89a3      	ldrh	r3, [r4, #12]
 80113e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80113e4:	81a3      	strh	r3, [r4, #12]
 80113e6:	2300      	movs	r3, #0
 80113e8:	6063      	str	r3, [r4, #4]
 80113ea:	6923      	ldr	r3, [r4, #16]
 80113ec:	6023      	str	r3, [r4, #0]
 80113ee:	89a3      	ldrh	r3, [r4, #12]
 80113f0:	f043 0308 	orr.w	r3, r3, #8
 80113f4:	81a3      	strh	r3, [r4, #12]
 80113f6:	6923      	ldr	r3, [r4, #16]
 80113f8:	b94b      	cbnz	r3, 801140e <__swsetup_r+0x9a>
 80113fa:	89a3      	ldrh	r3, [r4, #12]
 80113fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011404:	d003      	beq.n	801140e <__swsetup_r+0x9a>
 8011406:	4621      	mov	r1, r4
 8011408:	4630      	mov	r0, r6
 801140a:	f001 fc0d 	bl	8012c28 <__smakebuf_r>
 801140e:	89a0      	ldrh	r0, [r4, #12]
 8011410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011414:	f010 0301 	ands.w	r3, r0, #1
 8011418:	d00a      	beq.n	8011430 <__swsetup_r+0xbc>
 801141a:	2300      	movs	r3, #0
 801141c:	60a3      	str	r3, [r4, #8]
 801141e:	6963      	ldr	r3, [r4, #20]
 8011420:	425b      	negs	r3, r3
 8011422:	61a3      	str	r3, [r4, #24]
 8011424:	6923      	ldr	r3, [r4, #16]
 8011426:	b943      	cbnz	r3, 801143a <__swsetup_r+0xc6>
 8011428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801142c:	d1ba      	bne.n	80113a4 <__swsetup_r+0x30>
 801142e:	bd70      	pop	{r4, r5, r6, pc}
 8011430:	0781      	lsls	r1, r0, #30
 8011432:	bf58      	it	pl
 8011434:	6963      	ldrpl	r3, [r4, #20]
 8011436:	60a3      	str	r3, [r4, #8]
 8011438:	e7f4      	b.n	8011424 <__swsetup_r+0xb0>
 801143a:	2000      	movs	r0, #0
 801143c:	e7f7      	b.n	801142e <__swsetup_r+0xba>
 801143e:	bf00      	nop
 8011440:	20000028 	.word	0x20000028
 8011444:	08016474 	.word	0x08016474
 8011448:	08016494 	.word	0x08016494
 801144c:	08016454 	.word	0x08016454

08011450 <_close_r>:
 8011450:	b538      	push	{r3, r4, r5, lr}
 8011452:	4d06      	ldr	r5, [pc, #24]	; (801146c <_close_r+0x1c>)
 8011454:	2300      	movs	r3, #0
 8011456:	4604      	mov	r4, r0
 8011458:	4608      	mov	r0, r1
 801145a:	602b      	str	r3, [r5, #0]
 801145c:	f7f3 fa3f 	bl	80048de <_close>
 8011460:	1c43      	adds	r3, r0, #1
 8011462:	d102      	bne.n	801146a <_close_r+0x1a>
 8011464:	682b      	ldr	r3, [r5, #0]
 8011466:	b103      	cbz	r3, 801146a <_close_r+0x1a>
 8011468:	6023      	str	r3, [r4, #0]
 801146a:	bd38      	pop	{r3, r4, r5, pc}
 801146c:	20001a6c 	.word	0x20001a6c

08011470 <quorem>:
 8011470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011474:	6903      	ldr	r3, [r0, #16]
 8011476:	690c      	ldr	r4, [r1, #16]
 8011478:	42a3      	cmp	r3, r4
 801147a:	4607      	mov	r7, r0
 801147c:	f2c0 8081 	blt.w	8011582 <quorem+0x112>
 8011480:	3c01      	subs	r4, #1
 8011482:	f101 0814 	add.w	r8, r1, #20
 8011486:	f100 0514 	add.w	r5, r0, #20
 801148a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801148e:	9301      	str	r3, [sp, #4]
 8011490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011498:	3301      	adds	r3, #1
 801149a:	429a      	cmp	r2, r3
 801149c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80114a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80114a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80114a8:	d331      	bcc.n	801150e <quorem+0x9e>
 80114aa:	f04f 0e00 	mov.w	lr, #0
 80114ae:	4640      	mov	r0, r8
 80114b0:	46ac      	mov	ip, r5
 80114b2:	46f2      	mov	sl, lr
 80114b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80114b8:	b293      	uxth	r3, r2
 80114ba:	fb06 e303 	mla	r3, r6, r3, lr
 80114be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	ebaa 0303 	sub.w	r3, sl, r3
 80114c8:	0c12      	lsrs	r2, r2, #16
 80114ca:	f8dc a000 	ldr.w	sl, [ip]
 80114ce:	fb06 e202 	mla	r2, r6, r2, lr
 80114d2:	fa13 f38a 	uxtah	r3, r3, sl
 80114d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80114da:	fa1f fa82 	uxth.w	sl, r2
 80114de:	f8dc 2000 	ldr.w	r2, [ip]
 80114e2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80114e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80114f0:	4581      	cmp	r9, r0
 80114f2:	f84c 3b04 	str.w	r3, [ip], #4
 80114f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80114fa:	d2db      	bcs.n	80114b4 <quorem+0x44>
 80114fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8011500:	b92b      	cbnz	r3, 801150e <quorem+0x9e>
 8011502:	9b01      	ldr	r3, [sp, #4]
 8011504:	3b04      	subs	r3, #4
 8011506:	429d      	cmp	r5, r3
 8011508:	461a      	mov	r2, r3
 801150a:	d32e      	bcc.n	801156a <quorem+0xfa>
 801150c:	613c      	str	r4, [r7, #16]
 801150e:	4638      	mov	r0, r7
 8011510:	f001 feb0 	bl	8013274 <__mcmp>
 8011514:	2800      	cmp	r0, #0
 8011516:	db24      	blt.n	8011562 <quorem+0xf2>
 8011518:	3601      	adds	r6, #1
 801151a:	4628      	mov	r0, r5
 801151c:	f04f 0c00 	mov.w	ip, #0
 8011520:	f858 2b04 	ldr.w	r2, [r8], #4
 8011524:	f8d0 e000 	ldr.w	lr, [r0]
 8011528:	b293      	uxth	r3, r2
 801152a:	ebac 0303 	sub.w	r3, ip, r3
 801152e:	0c12      	lsrs	r2, r2, #16
 8011530:	fa13 f38e 	uxtah	r3, r3, lr
 8011534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801153c:	b29b      	uxth	r3, r3
 801153e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011542:	45c1      	cmp	r9, r8
 8011544:	f840 3b04 	str.w	r3, [r0], #4
 8011548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801154c:	d2e8      	bcs.n	8011520 <quorem+0xb0>
 801154e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011556:	b922      	cbnz	r2, 8011562 <quorem+0xf2>
 8011558:	3b04      	subs	r3, #4
 801155a:	429d      	cmp	r5, r3
 801155c:	461a      	mov	r2, r3
 801155e:	d30a      	bcc.n	8011576 <quorem+0x106>
 8011560:	613c      	str	r4, [r7, #16]
 8011562:	4630      	mov	r0, r6
 8011564:	b003      	add	sp, #12
 8011566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801156a:	6812      	ldr	r2, [r2, #0]
 801156c:	3b04      	subs	r3, #4
 801156e:	2a00      	cmp	r2, #0
 8011570:	d1cc      	bne.n	801150c <quorem+0x9c>
 8011572:	3c01      	subs	r4, #1
 8011574:	e7c7      	b.n	8011506 <quorem+0x96>
 8011576:	6812      	ldr	r2, [r2, #0]
 8011578:	3b04      	subs	r3, #4
 801157a:	2a00      	cmp	r2, #0
 801157c:	d1f0      	bne.n	8011560 <quorem+0xf0>
 801157e:	3c01      	subs	r4, #1
 8011580:	e7eb      	b.n	801155a <quorem+0xea>
 8011582:	2000      	movs	r0, #0
 8011584:	e7ee      	b.n	8011564 <quorem+0xf4>
	...

08011588 <_dtoa_r>:
 8011588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801158c:	ed2d 8b02 	vpush	{d8}
 8011590:	ec57 6b10 	vmov	r6, r7, d0
 8011594:	b095      	sub	sp, #84	; 0x54
 8011596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801159c:	9105      	str	r1, [sp, #20]
 801159e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80115a2:	4604      	mov	r4, r0
 80115a4:	9209      	str	r2, [sp, #36]	; 0x24
 80115a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80115a8:	b975      	cbnz	r5, 80115c8 <_dtoa_r+0x40>
 80115aa:	2010      	movs	r0, #16
 80115ac:	f7fd fee8 	bl	800f380 <malloc>
 80115b0:	4602      	mov	r2, r0
 80115b2:	6260      	str	r0, [r4, #36]	; 0x24
 80115b4:	b920      	cbnz	r0, 80115c0 <_dtoa_r+0x38>
 80115b6:	4bb2      	ldr	r3, [pc, #712]	; (8011880 <_dtoa_r+0x2f8>)
 80115b8:	21ea      	movs	r1, #234	; 0xea
 80115ba:	48b2      	ldr	r0, [pc, #712]	; (8011884 <_dtoa_r+0x2fc>)
 80115bc:	f002 ff4c 	bl	8014458 <__assert_func>
 80115c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80115c4:	6005      	str	r5, [r0, #0]
 80115c6:	60c5      	str	r5, [r0, #12]
 80115c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115ca:	6819      	ldr	r1, [r3, #0]
 80115cc:	b151      	cbz	r1, 80115e4 <_dtoa_r+0x5c>
 80115ce:	685a      	ldr	r2, [r3, #4]
 80115d0:	604a      	str	r2, [r1, #4]
 80115d2:	2301      	movs	r3, #1
 80115d4:	4093      	lsls	r3, r2
 80115d6:	608b      	str	r3, [r1, #8]
 80115d8:	4620      	mov	r0, r4
 80115da:	f001 fbc3 	bl	8012d64 <_Bfree>
 80115de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115e0:	2200      	movs	r2, #0
 80115e2:	601a      	str	r2, [r3, #0]
 80115e4:	1e3b      	subs	r3, r7, #0
 80115e6:	bfb9      	ittee	lt
 80115e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80115ec:	9303      	strlt	r3, [sp, #12]
 80115ee:	2300      	movge	r3, #0
 80115f0:	f8c8 3000 	strge.w	r3, [r8]
 80115f4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80115f8:	4ba3      	ldr	r3, [pc, #652]	; (8011888 <_dtoa_r+0x300>)
 80115fa:	bfbc      	itt	lt
 80115fc:	2201      	movlt	r2, #1
 80115fe:	f8c8 2000 	strlt.w	r2, [r8]
 8011602:	ea33 0309 	bics.w	r3, r3, r9
 8011606:	d11b      	bne.n	8011640 <_dtoa_r+0xb8>
 8011608:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801160a:	f242 730f 	movw	r3, #9999	; 0x270f
 801160e:	6013      	str	r3, [r2, #0]
 8011610:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011614:	4333      	orrs	r3, r6
 8011616:	f000 857a 	beq.w	801210e <_dtoa_r+0xb86>
 801161a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801161c:	b963      	cbnz	r3, 8011638 <_dtoa_r+0xb0>
 801161e:	4b9b      	ldr	r3, [pc, #620]	; (801188c <_dtoa_r+0x304>)
 8011620:	e024      	b.n	801166c <_dtoa_r+0xe4>
 8011622:	4b9b      	ldr	r3, [pc, #620]	; (8011890 <_dtoa_r+0x308>)
 8011624:	9300      	str	r3, [sp, #0]
 8011626:	3308      	adds	r3, #8
 8011628:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801162a:	6013      	str	r3, [r2, #0]
 801162c:	9800      	ldr	r0, [sp, #0]
 801162e:	b015      	add	sp, #84	; 0x54
 8011630:	ecbd 8b02 	vpop	{d8}
 8011634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011638:	4b94      	ldr	r3, [pc, #592]	; (801188c <_dtoa_r+0x304>)
 801163a:	9300      	str	r3, [sp, #0]
 801163c:	3303      	adds	r3, #3
 801163e:	e7f3      	b.n	8011628 <_dtoa_r+0xa0>
 8011640:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011644:	2200      	movs	r2, #0
 8011646:	ec51 0b17 	vmov	r0, r1, d7
 801164a:	2300      	movs	r3, #0
 801164c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011650:	f7ef fa5a 	bl	8000b08 <__aeabi_dcmpeq>
 8011654:	4680      	mov	r8, r0
 8011656:	b158      	cbz	r0, 8011670 <_dtoa_r+0xe8>
 8011658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801165a:	2301      	movs	r3, #1
 801165c:	6013      	str	r3, [r2, #0]
 801165e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011660:	2b00      	cmp	r3, #0
 8011662:	f000 8551 	beq.w	8012108 <_dtoa_r+0xb80>
 8011666:	488b      	ldr	r0, [pc, #556]	; (8011894 <_dtoa_r+0x30c>)
 8011668:	6018      	str	r0, [r3, #0]
 801166a:	1e43      	subs	r3, r0, #1
 801166c:	9300      	str	r3, [sp, #0]
 801166e:	e7dd      	b.n	801162c <_dtoa_r+0xa4>
 8011670:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8011674:	aa12      	add	r2, sp, #72	; 0x48
 8011676:	a913      	add	r1, sp, #76	; 0x4c
 8011678:	4620      	mov	r0, r4
 801167a:	f001 ff1b 	bl	80134b4 <__d2b>
 801167e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011682:	4683      	mov	fp, r0
 8011684:	2d00      	cmp	r5, #0
 8011686:	d07c      	beq.n	8011782 <_dtoa_r+0x1fa>
 8011688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801168a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801168e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011692:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011696:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801169a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801169e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80116a2:	4b7d      	ldr	r3, [pc, #500]	; (8011898 <_dtoa_r+0x310>)
 80116a4:	2200      	movs	r2, #0
 80116a6:	4630      	mov	r0, r6
 80116a8:	4639      	mov	r1, r7
 80116aa:	f7ee fe0d 	bl	80002c8 <__aeabi_dsub>
 80116ae:	a36e      	add	r3, pc, #440	; (adr r3, 8011868 <_dtoa_r+0x2e0>)
 80116b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b4:	f7ee ffc0 	bl	8000638 <__aeabi_dmul>
 80116b8:	a36d      	add	r3, pc, #436	; (adr r3, 8011870 <_dtoa_r+0x2e8>)
 80116ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116be:	f7ee fe05 	bl	80002cc <__adddf3>
 80116c2:	4606      	mov	r6, r0
 80116c4:	4628      	mov	r0, r5
 80116c6:	460f      	mov	r7, r1
 80116c8:	f7ee ff4c 	bl	8000564 <__aeabi_i2d>
 80116cc:	a36a      	add	r3, pc, #424	; (adr r3, 8011878 <_dtoa_r+0x2f0>)
 80116ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d2:	f7ee ffb1 	bl	8000638 <__aeabi_dmul>
 80116d6:	4602      	mov	r2, r0
 80116d8:	460b      	mov	r3, r1
 80116da:	4630      	mov	r0, r6
 80116dc:	4639      	mov	r1, r7
 80116de:	f7ee fdf5 	bl	80002cc <__adddf3>
 80116e2:	4606      	mov	r6, r0
 80116e4:	460f      	mov	r7, r1
 80116e6:	f7ef fa57 	bl	8000b98 <__aeabi_d2iz>
 80116ea:	2200      	movs	r2, #0
 80116ec:	4682      	mov	sl, r0
 80116ee:	2300      	movs	r3, #0
 80116f0:	4630      	mov	r0, r6
 80116f2:	4639      	mov	r1, r7
 80116f4:	f7ef fa12 	bl	8000b1c <__aeabi_dcmplt>
 80116f8:	b148      	cbz	r0, 801170e <_dtoa_r+0x186>
 80116fa:	4650      	mov	r0, sl
 80116fc:	f7ee ff32 	bl	8000564 <__aeabi_i2d>
 8011700:	4632      	mov	r2, r6
 8011702:	463b      	mov	r3, r7
 8011704:	f7ef fa00 	bl	8000b08 <__aeabi_dcmpeq>
 8011708:	b908      	cbnz	r0, 801170e <_dtoa_r+0x186>
 801170a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801170e:	f1ba 0f16 	cmp.w	sl, #22
 8011712:	d854      	bhi.n	80117be <_dtoa_r+0x236>
 8011714:	4b61      	ldr	r3, [pc, #388]	; (801189c <_dtoa_r+0x314>)
 8011716:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011722:	f7ef f9fb 	bl	8000b1c <__aeabi_dcmplt>
 8011726:	2800      	cmp	r0, #0
 8011728:	d04b      	beq.n	80117c2 <_dtoa_r+0x23a>
 801172a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801172e:	2300      	movs	r3, #0
 8011730:	930e      	str	r3, [sp, #56]	; 0x38
 8011732:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011734:	1b5d      	subs	r5, r3, r5
 8011736:	1e6b      	subs	r3, r5, #1
 8011738:	9304      	str	r3, [sp, #16]
 801173a:	bf43      	ittte	mi
 801173c:	2300      	movmi	r3, #0
 801173e:	f1c5 0801 	rsbmi	r8, r5, #1
 8011742:	9304      	strmi	r3, [sp, #16]
 8011744:	f04f 0800 	movpl.w	r8, #0
 8011748:	f1ba 0f00 	cmp.w	sl, #0
 801174c:	db3b      	blt.n	80117c6 <_dtoa_r+0x23e>
 801174e:	9b04      	ldr	r3, [sp, #16]
 8011750:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8011754:	4453      	add	r3, sl
 8011756:	9304      	str	r3, [sp, #16]
 8011758:	2300      	movs	r3, #0
 801175a:	9306      	str	r3, [sp, #24]
 801175c:	9b05      	ldr	r3, [sp, #20]
 801175e:	2b09      	cmp	r3, #9
 8011760:	d869      	bhi.n	8011836 <_dtoa_r+0x2ae>
 8011762:	2b05      	cmp	r3, #5
 8011764:	bfc4      	itt	gt
 8011766:	3b04      	subgt	r3, #4
 8011768:	9305      	strgt	r3, [sp, #20]
 801176a:	9b05      	ldr	r3, [sp, #20]
 801176c:	f1a3 0302 	sub.w	r3, r3, #2
 8011770:	bfcc      	ite	gt
 8011772:	2500      	movgt	r5, #0
 8011774:	2501      	movle	r5, #1
 8011776:	2b03      	cmp	r3, #3
 8011778:	d869      	bhi.n	801184e <_dtoa_r+0x2c6>
 801177a:	e8df f003 	tbb	[pc, r3]
 801177e:	4e2c      	.short	0x4e2c
 8011780:	5a4c      	.short	0x5a4c
 8011782:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011786:	441d      	add	r5, r3
 8011788:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801178c:	2b20      	cmp	r3, #32
 801178e:	bfc1      	itttt	gt
 8011790:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011794:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011798:	fa09 f303 	lslgt.w	r3, r9, r3
 801179c:	fa26 f000 	lsrgt.w	r0, r6, r0
 80117a0:	bfda      	itte	le
 80117a2:	f1c3 0320 	rsble	r3, r3, #32
 80117a6:	fa06 f003 	lslle.w	r0, r6, r3
 80117aa:	4318      	orrgt	r0, r3
 80117ac:	f7ee feca 	bl	8000544 <__aeabi_ui2d>
 80117b0:	2301      	movs	r3, #1
 80117b2:	4606      	mov	r6, r0
 80117b4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80117b8:	3d01      	subs	r5, #1
 80117ba:	9310      	str	r3, [sp, #64]	; 0x40
 80117bc:	e771      	b.n	80116a2 <_dtoa_r+0x11a>
 80117be:	2301      	movs	r3, #1
 80117c0:	e7b6      	b.n	8011730 <_dtoa_r+0x1a8>
 80117c2:	900e      	str	r0, [sp, #56]	; 0x38
 80117c4:	e7b5      	b.n	8011732 <_dtoa_r+0x1aa>
 80117c6:	f1ca 0300 	rsb	r3, sl, #0
 80117ca:	9306      	str	r3, [sp, #24]
 80117cc:	2300      	movs	r3, #0
 80117ce:	eba8 080a 	sub.w	r8, r8, sl
 80117d2:	930d      	str	r3, [sp, #52]	; 0x34
 80117d4:	e7c2      	b.n	801175c <_dtoa_r+0x1d4>
 80117d6:	2300      	movs	r3, #0
 80117d8:	9308      	str	r3, [sp, #32]
 80117da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117dc:	2b00      	cmp	r3, #0
 80117de:	dc39      	bgt.n	8011854 <_dtoa_r+0x2cc>
 80117e0:	f04f 0901 	mov.w	r9, #1
 80117e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80117e8:	464b      	mov	r3, r9
 80117ea:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80117ee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80117f0:	2200      	movs	r2, #0
 80117f2:	6042      	str	r2, [r0, #4]
 80117f4:	2204      	movs	r2, #4
 80117f6:	f102 0614 	add.w	r6, r2, #20
 80117fa:	429e      	cmp	r6, r3
 80117fc:	6841      	ldr	r1, [r0, #4]
 80117fe:	d92f      	bls.n	8011860 <_dtoa_r+0x2d8>
 8011800:	4620      	mov	r0, r4
 8011802:	f001 fa6f 	bl	8012ce4 <_Balloc>
 8011806:	9000      	str	r0, [sp, #0]
 8011808:	2800      	cmp	r0, #0
 801180a:	d14b      	bne.n	80118a4 <_dtoa_r+0x31c>
 801180c:	4b24      	ldr	r3, [pc, #144]	; (80118a0 <_dtoa_r+0x318>)
 801180e:	4602      	mov	r2, r0
 8011810:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011814:	e6d1      	b.n	80115ba <_dtoa_r+0x32>
 8011816:	2301      	movs	r3, #1
 8011818:	e7de      	b.n	80117d8 <_dtoa_r+0x250>
 801181a:	2300      	movs	r3, #0
 801181c:	9308      	str	r3, [sp, #32]
 801181e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011820:	eb0a 0903 	add.w	r9, sl, r3
 8011824:	f109 0301 	add.w	r3, r9, #1
 8011828:	2b01      	cmp	r3, #1
 801182a:	9301      	str	r3, [sp, #4]
 801182c:	bfb8      	it	lt
 801182e:	2301      	movlt	r3, #1
 8011830:	e7dd      	b.n	80117ee <_dtoa_r+0x266>
 8011832:	2301      	movs	r3, #1
 8011834:	e7f2      	b.n	801181c <_dtoa_r+0x294>
 8011836:	2501      	movs	r5, #1
 8011838:	2300      	movs	r3, #0
 801183a:	9305      	str	r3, [sp, #20]
 801183c:	9508      	str	r5, [sp, #32]
 801183e:	f04f 39ff 	mov.w	r9, #4294967295
 8011842:	2200      	movs	r2, #0
 8011844:	f8cd 9004 	str.w	r9, [sp, #4]
 8011848:	2312      	movs	r3, #18
 801184a:	9209      	str	r2, [sp, #36]	; 0x24
 801184c:	e7cf      	b.n	80117ee <_dtoa_r+0x266>
 801184e:	2301      	movs	r3, #1
 8011850:	9308      	str	r3, [sp, #32]
 8011852:	e7f4      	b.n	801183e <_dtoa_r+0x2b6>
 8011854:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8011858:	f8cd 9004 	str.w	r9, [sp, #4]
 801185c:	464b      	mov	r3, r9
 801185e:	e7c6      	b.n	80117ee <_dtoa_r+0x266>
 8011860:	3101      	adds	r1, #1
 8011862:	6041      	str	r1, [r0, #4]
 8011864:	0052      	lsls	r2, r2, #1
 8011866:	e7c6      	b.n	80117f6 <_dtoa_r+0x26e>
 8011868:	636f4361 	.word	0x636f4361
 801186c:	3fd287a7 	.word	0x3fd287a7
 8011870:	8b60c8b3 	.word	0x8b60c8b3
 8011874:	3fc68a28 	.word	0x3fc68a28
 8011878:	509f79fb 	.word	0x509f79fb
 801187c:	3fd34413 	.word	0x3fd34413
 8011880:	080163cd 	.word	0x080163cd
 8011884:	080163e4 	.word	0x080163e4
 8011888:	7ff00000 	.word	0x7ff00000
 801188c:	080163c9 	.word	0x080163c9
 8011890:	080163c0 	.word	0x080163c0
 8011894:	080166aa 	.word	0x080166aa
 8011898:	3ff80000 	.word	0x3ff80000
 801189c:	080165c0 	.word	0x080165c0
 80118a0:	08016443 	.word	0x08016443
 80118a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80118a6:	9a00      	ldr	r2, [sp, #0]
 80118a8:	601a      	str	r2, [r3, #0]
 80118aa:	9b01      	ldr	r3, [sp, #4]
 80118ac:	2b0e      	cmp	r3, #14
 80118ae:	f200 80ad 	bhi.w	8011a0c <_dtoa_r+0x484>
 80118b2:	2d00      	cmp	r5, #0
 80118b4:	f000 80aa 	beq.w	8011a0c <_dtoa_r+0x484>
 80118b8:	f1ba 0f00 	cmp.w	sl, #0
 80118bc:	dd36      	ble.n	801192c <_dtoa_r+0x3a4>
 80118be:	4ac3      	ldr	r2, [pc, #780]	; (8011bcc <_dtoa_r+0x644>)
 80118c0:	f00a 030f 	and.w	r3, sl, #15
 80118c4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80118c8:	ed93 7b00 	vldr	d7, [r3]
 80118cc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80118d0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80118d4:	eeb0 8a47 	vmov.f32	s16, s14
 80118d8:	eef0 8a67 	vmov.f32	s17, s15
 80118dc:	d016      	beq.n	801190c <_dtoa_r+0x384>
 80118de:	4bbc      	ldr	r3, [pc, #752]	; (8011bd0 <_dtoa_r+0x648>)
 80118e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80118e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80118e8:	f7ee ffd0 	bl	800088c <__aeabi_ddiv>
 80118ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118f0:	f007 070f 	and.w	r7, r7, #15
 80118f4:	2503      	movs	r5, #3
 80118f6:	4eb6      	ldr	r6, [pc, #728]	; (8011bd0 <_dtoa_r+0x648>)
 80118f8:	b957      	cbnz	r7, 8011910 <_dtoa_r+0x388>
 80118fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118fe:	ec53 2b18 	vmov	r2, r3, d8
 8011902:	f7ee ffc3 	bl	800088c <__aeabi_ddiv>
 8011906:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801190a:	e029      	b.n	8011960 <_dtoa_r+0x3d8>
 801190c:	2502      	movs	r5, #2
 801190e:	e7f2      	b.n	80118f6 <_dtoa_r+0x36e>
 8011910:	07f9      	lsls	r1, r7, #31
 8011912:	d508      	bpl.n	8011926 <_dtoa_r+0x39e>
 8011914:	ec51 0b18 	vmov	r0, r1, d8
 8011918:	e9d6 2300 	ldrd	r2, r3, [r6]
 801191c:	f7ee fe8c 	bl	8000638 <__aeabi_dmul>
 8011920:	ec41 0b18 	vmov	d8, r0, r1
 8011924:	3501      	adds	r5, #1
 8011926:	107f      	asrs	r7, r7, #1
 8011928:	3608      	adds	r6, #8
 801192a:	e7e5      	b.n	80118f8 <_dtoa_r+0x370>
 801192c:	f000 80a6 	beq.w	8011a7c <_dtoa_r+0x4f4>
 8011930:	f1ca 0600 	rsb	r6, sl, #0
 8011934:	4ba5      	ldr	r3, [pc, #660]	; (8011bcc <_dtoa_r+0x644>)
 8011936:	4fa6      	ldr	r7, [pc, #664]	; (8011bd0 <_dtoa_r+0x648>)
 8011938:	f006 020f 	and.w	r2, r6, #15
 801193c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011948:	f7ee fe76 	bl	8000638 <__aeabi_dmul>
 801194c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011950:	1136      	asrs	r6, r6, #4
 8011952:	2300      	movs	r3, #0
 8011954:	2502      	movs	r5, #2
 8011956:	2e00      	cmp	r6, #0
 8011958:	f040 8085 	bne.w	8011a66 <_dtoa_r+0x4de>
 801195c:	2b00      	cmp	r3, #0
 801195e:	d1d2      	bne.n	8011906 <_dtoa_r+0x37e>
 8011960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011962:	2b00      	cmp	r3, #0
 8011964:	f000 808c 	beq.w	8011a80 <_dtoa_r+0x4f8>
 8011968:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801196c:	4b99      	ldr	r3, [pc, #612]	; (8011bd4 <_dtoa_r+0x64c>)
 801196e:	2200      	movs	r2, #0
 8011970:	4630      	mov	r0, r6
 8011972:	4639      	mov	r1, r7
 8011974:	f7ef f8d2 	bl	8000b1c <__aeabi_dcmplt>
 8011978:	2800      	cmp	r0, #0
 801197a:	f000 8081 	beq.w	8011a80 <_dtoa_r+0x4f8>
 801197e:	9b01      	ldr	r3, [sp, #4]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d07d      	beq.n	8011a80 <_dtoa_r+0x4f8>
 8011984:	f1b9 0f00 	cmp.w	r9, #0
 8011988:	dd3c      	ble.n	8011a04 <_dtoa_r+0x47c>
 801198a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801198e:	9307      	str	r3, [sp, #28]
 8011990:	2200      	movs	r2, #0
 8011992:	4b91      	ldr	r3, [pc, #580]	; (8011bd8 <_dtoa_r+0x650>)
 8011994:	4630      	mov	r0, r6
 8011996:	4639      	mov	r1, r7
 8011998:	f7ee fe4e 	bl	8000638 <__aeabi_dmul>
 801199c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119a0:	3501      	adds	r5, #1
 80119a2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80119a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80119aa:	4628      	mov	r0, r5
 80119ac:	f7ee fdda 	bl	8000564 <__aeabi_i2d>
 80119b0:	4632      	mov	r2, r6
 80119b2:	463b      	mov	r3, r7
 80119b4:	f7ee fe40 	bl	8000638 <__aeabi_dmul>
 80119b8:	4b88      	ldr	r3, [pc, #544]	; (8011bdc <_dtoa_r+0x654>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	f7ee fc86 	bl	80002cc <__adddf3>
 80119c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80119c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119c8:	9303      	str	r3, [sp, #12]
 80119ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d15c      	bne.n	8011a8a <_dtoa_r+0x502>
 80119d0:	4b83      	ldr	r3, [pc, #524]	; (8011be0 <_dtoa_r+0x658>)
 80119d2:	2200      	movs	r2, #0
 80119d4:	4630      	mov	r0, r6
 80119d6:	4639      	mov	r1, r7
 80119d8:	f7ee fc76 	bl	80002c8 <__aeabi_dsub>
 80119dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119e0:	4606      	mov	r6, r0
 80119e2:	460f      	mov	r7, r1
 80119e4:	f7ef f8b8 	bl	8000b58 <__aeabi_dcmpgt>
 80119e8:	2800      	cmp	r0, #0
 80119ea:	f040 8296 	bne.w	8011f1a <_dtoa_r+0x992>
 80119ee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80119f2:	4630      	mov	r0, r6
 80119f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80119f8:	4639      	mov	r1, r7
 80119fa:	f7ef f88f 	bl	8000b1c <__aeabi_dcmplt>
 80119fe:	2800      	cmp	r0, #0
 8011a00:	f040 8288 	bne.w	8011f14 <_dtoa_r+0x98c>
 8011a04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011a08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011a0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f2c0 8158 	blt.w	8011cc4 <_dtoa_r+0x73c>
 8011a14:	f1ba 0f0e 	cmp.w	sl, #14
 8011a18:	f300 8154 	bgt.w	8011cc4 <_dtoa_r+0x73c>
 8011a1c:	4b6b      	ldr	r3, [pc, #428]	; (8011bcc <_dtoa_r+0x644>)
 8011a1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011a22:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	f280 80e3 	bge.w	8011bf4 <_dtoa_r+0x66c>
 8011a2e:	9b01      	ldr	r3, [sp, #4]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	f300 80df 	bgt.w	8011bf4 <_dtoa_r+0x66c>
 8011a36:	f040 826d 	bne.w	8011f14 <_dtoa_r+0x98c>
 8011a3a:	4b69      	ldr	r3, [pc, #420]	; (8011be0 <_dtoa_r+0x658>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	4640      	mov	r0, r8
 8011a40:	4649      	mov	r1, r9
 8011a42:	f7ee fdf9 	bl	8000638 <__aeabi_dmul>
 8011a46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011a4a:	f7ef f87b 	bl	8000b44 <__aeabi_dcmpge>
 8011a4e:	9e01      	ldr	r6, [sp, #4]
 8011a50:	4637      	mov	r7, r6
 8011a52:	2800      	cmp	r0, #0
 8011a54:	f040 8243 	bne.w	8011ede <_dtoa_r+0x956>
 8011a58:	9d00      	ldr	r5, [sp, #0]
 8011a5a:	2331      	movs	r3, #49	; 0x31
 8011a5c:	f805 3b01 	strb.w	r3, [r5], #1
 8011a60:	f10a 0a01 	add.w	sl, sl, #1
 8011a64:	e23f      	b.n	8011ee6 <_dtoa_r+0x95e>
 8011a66:	07f2      	lsls	r2, r6, #31
 8011a68:	d505      	bpl.n	8011a76 <_dtoa_r+0x4ee>
 8011a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011a6e:	f7ee fde3 	bl	8000638 <__aeabi_dmul>
 8011a72:	3501      	adds	r5, #1
 8011a74:	2301      	movs	r3, #1
 8011a76:	1076      	asrs	r6, r6, #1
 8011a78:	3708      	adds	r7, #8
 8011a7a:	e76c      	b.n	8011956 <_dtoa_r+0x3ce>
 8011a7c:	2502      	movs	r5, #2
 8011a7e:	e76f      	b.n	8011960 <_dtoa_r+0x3d8>
 8011a80:	9b01      	ldr	r3, [sp, #4]
 8011a82:	f8cd a01c 	str.w	sl, [sp, #28]
 8011a86:	930c      	str	r3, [sp, #48]	; 0x30
 8011a88:	e78d      	b.n	80119a6 <_dtoa_r+0x41e>
 8011a8a:	9900      	ldr	r1, [sp, #0]
 8011a8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8011a8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a90:	4b4e      	ldr	r3, [pc, #312]	; (8011bcc <_dtoa_r+0x644>)
 8011a92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011a96:	4401      	add	r1, r0
 8011a98:	9102      	str	r1, [sp, #8]
 8011a9a:	9908      	ldr	r1, [sp, #32]
 8011a9c:	eeb0 8a47 	vmov.f32	s16, s14
 8011aa0:	eef0 8a67 	vmov.f32	s17, s15
 8011aa4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011aa8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011aac:	2900      	cmp	r1, #0
 8011aae:	d045      	beq.n	8011b3c <_dtoa_r+0x5b4>
 8011ab0:	494c      	ldr	r1, [pc, #304]	; (8011be4 <_dtoa_r+0x65c>)
 8011ab2:	2000      	movs	r0, #0
 8011ab4:	f7ee feea 	bl	800088c <__aeabi_ddiv>
 8011ab8:	ec53 2b18 	vmov	r2, r3, d8
 8011abc:	f7ee fc04 	bl	80002c8 <__aeabi_dsub>
 8011ac0:	9d00      	ldr	r5, [sp, #0]
 8011ac2:	ec41 0b18 	vmov	d8, r0, r1
 8011ac6:	4639      	mov	r1, r7
 8011ac8:	4630      	mov	r0, r6
 8011aca:	f7ef f865 	bl	8000b98 <__aeabi_d2iz>
 8011ace:	900c      	str	r0, [sp, #48]	; 0x30
 8011ad0:	f7ee fd48 	bl	8000564 <__aeabi_i2d>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	460b      	mov	r3, r1
 8011ad8:	4630      	mov	r0, r6
 8011ada:	4639      	mov	r1, r7
 8011adc:	f7ee fbf4 	bl	80002c8 <__aeabi_dsub>
 8011ae0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ae2:	3330      	adds	r3, #48	; 0x30
 8011ae4:	f805 3b01 	strb.w	r3, [r5], #1
 8011ae8:	ec53 2b18 	vmov	r2, r3, d8
 8011aec:	4606      	mov	r6, r0
 8011aee:	460f      	mov	r7, r1
 8011af0:	f7ef f814 	bl	8000b1c <__aeabi_dcmplt>
 8011af4:	2800      	cmp	r0, #0
 8011af6:	d165      	bne.n	8011bc4 <_dtoa_r+0x63c>
 8011af8:	4632      	mov	r2, r6
 8011afa:	463b      	mov	r3, r7
 8011afc:	4935      	ldr	r1, [pc, #212]	; (8011bd4 <_dtoa_r+0x64c>)
 8011afe:	2000      	movs	r0, #0
 8011b00:	f7ee fbe2 	bl	80002c8 <__aeabi_dsub>
 8011b04:	ec53 2b18 	vmov	r2, r3, d8
 8011b08:	f7ef f808 	bl	8000b1c <__aeabi_dcmplt>
 8011b0c:	2800      	cmp	r0, #0
 8011b0e:	f040 80b9 	bne.w	8011c84 <_dtoa_r+0x6fc>
 8011b12:	9b02      	ldr	r3, [sp, #8]
 8011b14:	429d      	cmp	r5, r3
 8011b16:	f43f af75 	beq.w	8011a04 <_dtoa_r+0x47c>
 8011b1a:	4b2f      	ldr	r3, [pc, #188]	; (8011bd8 <_dtoa_r+0x650>)
 8011b1c:	ec51 0b18 	vmov	r0, r1, d8
 8011b20:	2200      	movs	r2, #0
 8011b22:	f7ee fd89 	bl	8000638 <__aeabi_dmul>
 8011b26:	4b2c      	ldr	r3, [pc, #176]	; (8011bd8 <_dtoa_r+0x650>)
 8011b28:	ec41 0b18 	vmov	d8, r0, r1
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	4630      	mov	r0, r6
 8011b30:	4639      	mov	r1, r7
 8011b32:	f7ee fd81 	bl	8000638 <__aeabi_dmul>
 8011b36:	4606      	mov	r6, r0
 8011b38:	460f      	mov	r7, r1
 8011b3a:	e7c4      	b.n	8011ac6 <_dtoa_r+0x53e>
 8011b3c:	ec51 0b17 	vmov	r0, r1, d7
 8011b40:	f7ee fd7a 	bl	8000638 <__aeabi_dmul>
 8011b44:	9b02      	ldr	r3, [sp, #8]
 8011b46:	9d00      	ldr	r5, [sp, #0]
 8011b48:	930c      	str	r3, [sp, #48]	; 0x30
 8011b4a:	ec41 0b18 	vmov	d8, r0, r1
 8011b4e:	4639      	mov	r1, r7
 8011b50:	4630      	mov	r0, r6
 8011b52:	f7ef f821 	bl	8000b98 <__aeabi_d2iz>
 8011b56:	9011      	str	r0, [sp, #68]	; 0x44
 8011b58:	f7ee fd04 	bl	8000564 <__aeabi_i2d>
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	460b      	mov	r3, r1
 8011b60:	4630      	mov	r0, r6
 8011b62:	4639      	mov	r1, r7
 8011b64:	f7ee fbb0 	bl	80002c8 <__aeabi_dsub>
 8011b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011b6a:	3330      	adds	r3, #48	; 0x30
 8011b6c:	f805 3b01 	strb.w	r3, [r5], #1
 8011b70:	9b02      	ldr	r3, [sp, #8]
 8011b72:	429d      	cmp	r5, r3
 8011b74:	4606      	mov	r6, r0
 8011b76:	460f      	mov	r7, r1
 8011b78:	f04f 0200 	mov.w	r2, #0
 8011b7c:	d134      	bne.n	8011be8 <_dtoa_r+0x660>
 8011b7e:	4b19      	ldr	r3, [pc, #100]	; (8011be4 <_dtoa_r+0x65c>)
 8011b80:	ec51 0b18 	vmov	r0, r1, d8
 8011b84:	f7ee fba2 	bl	80002cc <__adddf3>
 8011b88:	4602      	mov	r2, r0
 8011b8a:	460b      	mov	r3, r1
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	4639      	mov	r1, r7
 8011b90:	f7ee ffe2 	bl	8000b58 <__aeabi_dcmpgt>
 8011b94:	2800      	cmp	r0, #0
 8011b96:	d175      	bne.n	8011c84 <_dtoa_r+0x6fc>
 8011b98:	ec53 2b18 	vmov	r2, r3, d8
 8011b9c:	4911      	ldr	r1, [pc, #68]	; (8011be4 <_dtoa_r+0x65c>)
 8011b9e:	2000      	movs	r0, #0
 8011ba0:	f7ee fb92 	bl	80002c8 <__aeabi_dsub>
 8011ba4:	4602      	mov	r2, r0
 8011ba6:	460b      	mov	r3, r1
 8011ba8:	4630      	mov	r0, r6
 8011baa:	4639      	mov	r1, r7
 8011bac:	f7ee ffb6 	bl	8000b1c <__aeabi_dcmplt>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	f43f af27 	beq.w	8011a04 <_dtoa_r+0x47c>
 8011bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011bb8:	1e6b      	subs	r3, r5, #1
 8011bba:	930c      	str	r3, [sp, #48]	; 0x30
 8011bbc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011bc0:	2b30      	cmp	r3, #48	; 0x30
 8011bc2:	d0f8      	beq.n	8011bb6 <_dtoa_r+0x62e>
 8011bc4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011bc8:	e04a      	b.n	8011c60 <_dtoa_r+0x6d8>
 8011bca:	bf00      	nop
 8011bcc:	080165c0 	.word	0x080165c0
 8011bd0:	08016598 	.word	0x08016598
 8011bd4:	3ff00000 	.word	0x3ff00000
 8011bd8:	40240000 	.word	0x40240000
 8011bdc:	401c0000 	.word	0x401c0000
 8011be0:	40140000 	.word	0x40140000
 8011be4:	3fe00000 	.word	0x3fe00000
 8011be8:	4baf      	ldr	r3, [pc, #700]	; (8011ea8 <_dtoa_r+0x920>)
 8011bea:	f7ee fd25 	bl	8000638 <__aeabi_dmul>
 8011bee:	4606      	mov	r6, r0
 8011bf0:	460f      	mov	r7, r1
 8011bf2:	e7ac      	b.n	8011b4e <_dtoa_r+0x5c6>
 8011bf4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011bf8:	9d00      	ldr	r5, [sp, #0]
 8011bfa:	4642      	mov	r2, r8
 8011bfc:	464b      	mov	r3, r9
 8011bfe:	4630      	mov	r0, r6
 8011c00:	4639      	mov	r1, r7
 8011c02:	f7ee fe43 	bl	800088c <__aeabi_ddiv>
 8011c06:	f7ee ffc7 	bl	8000b98 <__aeabi_d2iz>
 8011c0a:	9002      	str	r0, [sp, #8]
 8011c0c:	f7ee fcaa 	bl	8000564 <__aeabi_i2d>
 8011c10:	4642      	mov	r2, r8
 8011c12:	464b      	mov	r3, r9
 8011c14:	f7ee fd10 	bl	8000638 <__aeabi_dmul>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	4639      	mov	r1, r7
 8011c20:	f7ee fb52 	bl	80002c8 <__aeabi_dsub>
 8011c24:	9e02      	ldr	r6, [sp, #8]
 8011c26:	9f01      	ldr	r7, [sp, #4]
 8011c28:	3630      	adds	r6, #48	; 0x30
 8011c2a:	f805 6b01 	strb.w	r6, [r5], #1
 8011c2e:	9e00      	ldr	r6, [sp, #0]
 8011c30:	1bae      	subs	r6, r5, r6
 8011c32:	42b7      	cmp	r7, r6
 8011c34:	4602      	mov	r2, r0
 8011c36:	460b      	mov	r3, r1
 8011c38:	d137      	bne.n	8011caa <_dtoa_r+0x722>
 8011c3a:	f7ee fb47 	bl	80002cc <__adddf3>
 8011c3e:	4642      	mov	r2, r8
 8011c40:	464b      	mov	r3, r9
 8011c42:	4606      	mov	r6, r0
 8011c44:	460f      	mov	r7, r1
 8011c46:	f7ee ff87 	bl	8000b58 <__aeabi_dcmpgt>
 8011c4a:	b9c8      	cbnz	r0, 8011c80 <_dtoa_r+0x6f8>
 8011c4c:	4642      	mov	r2, r8
 8011c4e:	464b      	mov	r3, r9
 8011c50:	4630      	mov	r0, r6
 8011c52:	4639      	mov	r1, r7
 8011c54:	f7ee ff58 	bl	8000b08 <__aeabi_dcmpeq>
 8011c58:	b110      	cbz	r0, 8011c60 <_dtoa_r+0x6d8>
 8011c5a:	9b02      	ldr	r3, [sp, #8]
 8011c5c:	07d9      	lsls	r1, r3, #31
 8011c5e:	d40f      	bmi.n	8011c80 <_dtoa_r+0x6f8>
 8011c60:	4620      	mov	r0, r4
 8011c62:	4659      	mov	r1, fp
 8011c64:	f001 f87e 	bl	8012d64 <_Bfree>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	702b      	strb	r3, [r5, #0]
 8011c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011c6e:	f10a 0001 	add.w	r0, sl, #1
 8011c72:	6018      	str	r0, [r3, #0]
 8011c74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	f43f acd8 	beq.w	801162c <_dtoa_r+0xa4>
 8011c7c:	601d      	str	r5, [r3, #0]
 8011c7e:	e4d5      	b.n	801162c <_dtoa_r+0xa4>
 8011c80:	f8cd a01c 	str.w	sl, [sp, #28]
 8011c84:	462b      	mov	r3, r5
 8011c86:	461d      	mov	r5, r3
 8011c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c8c:	2a39      	cmp	r2, #57	; 0x39
 8011c8e:	d108      	bne.n	8011ca2 <_dtoa_r+0x71a>
 8011c90:	9a00      	ldr	r2, [sp, #0]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d1f7      	bne.n	8011c86 <_dtoa_r+0x6fe>
 8011c96:	9a07      	ldr	r2, [sp, #28]
 8011c98:	9900      	ldr	r1, [sp, #0]
 8011c9a:	3201      	adds	r2, #1
 8011c9c:	9207      	str	r2, [sp, #28]
 8011c9e:	2230      	movs	r2, #48	; 0x30
 8011ca0:	700a      	strb	r2, [r1, #0]
 8011ca2:	781a      	ldrb	r2, [r3, #0]
 8011ca4:	3201      	adds	r2, #1
 8011ca6:	701a      	strb	r2, [r3, #0]
 8011ca8:	e78c      	b.n	8011bc4 <_dtoa_r+0x63c>
 8011caa:	4b7f      	ldr	r3, [pc, #508]	; (8011ea8 <_dtoa_r+0x920>)
 8011cac:	2200      	movs	r2, #0
 8011cae:	f7ee fcc3 	bl	8000638 <__aeabi_dmul>
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	4606      	mov	r6, r0
 8011cb8:	460f      	mov	r7, r1
 8011cba:	f7ee ff25 	bl	8000b08 <__aeabi_dcmpeq>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	d09b      	beq.n	8011bfa <_dtoa_r+0x672>
 8011cc2:	e7cd      	b.n	8011c60 <_dtoa_r+0x6d8>
 8011cc4:	9a08      	ldr	r2, [sp, #32]
 8011cc6:	2a00      	cmp	r2, #0
 8011cc8:	f000 80c4 	beq.w	8011e54 <_dtoa_r+0x8cc>
 8011ccc:	9a05      	ldr	r2, [sp, #20]
 8011cce:	2a01      	cmp	r2, #1
 8011cd0:	f300 80a8 	bgt.w	8011e24 <_dtoa_r+0x89c>
 8011cd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011cd6:	2a00      	cmp	r2, #0
 8011cd8:	f000 80a0 	beq.w	8011e1c <_dtoa_r+0x894>
 8011cdc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011ce0:	9e06      	ldr	r6, [sp, #24]
 8011ce2:	4645      	mov	r5, r8
 8011ce4:	9a04      	ldr	r2, [sp, #16]
 8011ce6:	2101      	movs	r1, #1
 8011ce8:	441a      	add	r2, r3
 8011cea:	4620      	mov	r0, r4
 8011cec:	4498      	add	r8, r3
 8011cee:	9204      	str	r2, [sp, #16]
 8011cf0:	f001 f93e 	bl	8012f70 <__i2b>
 8011cf4:	4607      	mov	r7, r0
 8011cf6:	2d00      	cmp	r5, #0
 8011cf8:	dd0b      	ble.n	8011d12 <_dtoa_r+0x78a>
 8011cfa:	9b04      	ldr	r3, [sp, #16]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	dd08      	ble.n	8011d12 <_dtoa_r+0x78a>
 8011d00:	42ab      	cmp	r3, r5
 8011d02:	9a04      	ldr	r2, [sp, #16]
 8011d04:	bfa8      	it	ge
 8011d06:	462b      	movge	r3, r5
 8011d08:	eba8 0803 	sub.w	r8, r8, r3
 8011d0c:	1aed      	subs	r5, r5, r3
 8011d0e:	1ad3      	subs	r3, r2, r3
 8011d10:	9304      	str	r3, [sp, #16]
 8011d12:	9b06      	ldr	r3, [sp, #24]
 8011d14:	b1fb      	cbz	r3, 8011d56 <_dtoa_r+0x7ce>
 8011d16:	9b08      	ldr	r3, [sp, #32]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f000 809f 	beq.w	8011e5c <_dtoa_r+0x8d4>
 8011d1e:	2e00      	cmp	r6, #0
 8011d20:	dd11      	ble.n	8011d46 <_dtoa_r+0x7be>
 8011d22:	4639      	mov	r1, r7
 8011d24:	4632      	mov	r2, r6
 8011d26:	4620      	mov	r0, r4
 8011d28:	f001 f9de 	bl	80130e8 <__pow5mult>
 8011d2c:	465a      	mov	r2, fp
 8011d2e:	4601      	mov	r1, r0
 8011d30:	4607      	mov	r7, r0
 8011d32:	4620      	mov	r0, r4
 8011d34:	f001 f932 	bl	8012f9c <__multiply>
 8011d38:	4659      	mov	r1, fp
 8011d3a:	9007      	str	r0, [sp, #28]
 8011d3c:	4620      	mov	r0, r4
 8011d3e:	f001 f811 	bl	8012d64 <_Bfree>
 8011d42:	9b07      	ldr	r3, [sp, #28]
 8011d44:	469b      	mov	fp, r3
 8011d46:	9b06      	ldr	r3, [sp, #24]
 8011d48:	1b9a      	subs	r2, r3, r6
 8011d4a:	d004      	beq.n	8011d56 <_dtoa_r+0x7ce>
 8011d4c:	4659      	mov	r1, fp
 8011d4e:	4620      	mov	r0, r4
 8011d50:	f001 f9ca 	bl	80130e8 <__pow5mult>
 8011d54:	4683      	mov	fp, r0
 8011d56:	2101      	movs	r1, #1
 8011d58:	4620      	mov	r0, r4
 8011d5a:	f001 f909 	bl	8012f70 <__i2b>
 8011d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	4606      	mov	r6, r0
 8011d64:	dd7c      	ble.n	8011e60 <_dtoa_r+0x8d8>
 8011d66:	461a      	mov	r2, r3
 8011d68:	4601      	mov	r1, r0
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f001 f9bc 	bl	80130e8 <__pow5mult>
 8011d70:	9b05      	ldr	r3, [sp, #20]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	4606      	mov	r6, r0
 8011d76:	dd76      	ble.n	8011e66 <_dtoa_r+0x8de>
 8011d78:	2300      	movs	r3, #0
 8011d7a:	9306      	str	r3, [sp, #24]
 8011d7c:	6933      	ldr	r3, [r6, #16]
 8011d7e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011d82:	6918      	ldr	r0, [r3, #16]
 8011d84:	f001 f8a4 	bl	8012ed0 <__hi0bits>
 8011d88:	f1c0 0020 	rsb	r0, r0, #32
 8011d8c:	9b04      	ldr	r3, [sp, #16]
 8011d8e:	4418      	add	r0, r3
 8011d90:	f010 001f 	ands.w	r0, r0, #31
 8011d94:	f000 8086 	beq.w	8011ea4 <_dtoa_r+0x91c>
 8011d98:	f1c0 0320 	rsb	r3, r0, #32
 8011d9c:	2b04      	cmp	r3, #4
 8011d9e:	dd7f      	ble.n	8011ea0 <_dtoa_r+0x918>
 8011da0:	f1c0 001c 	rsb	r0, r0, #28
 8011da4:	9b04      	ldr	r3, [sp, #16]
 8011da6:	4403      	add	r3, r0
 8011da8:	4480      	add	r8, r0
 8011daa:	4405      	add	r5, r0
 8011dac:	9304      	str	r3, [sp, #16]
 8011dae:	f1b8 0f00 	cmp.w	r8, #0
 8011db2:	dd05      	ble.n	8011dc0 <_dtoa_r+0x838>
 8011db4:	4659      	mov	r1, fp
 8011db6:	4642      	mov	r2, r8
 8011db8:	4620      	mov	r0, r4
 8011dba:	f001 f9ef 	bl	801319c <__lshift>
 8011dbe:	4683      	mov	fp, r0
 8011dc0:	9b04      	ldr	r3, [sp, #16]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	dd05      	ble.n	8011dd2 <_dtoa_r+0x84a>
 8011dc6:	4631      	mov	r1, r6
 8011dc8:	461a      	mov	r2, r3
 8011dca:	4620      	mov	r0, r4
 8011dcc:	f001 f9e6 	bl	801319c <__lshift>
 8011dd0:	4606      	mov	r6, r0
 8011dd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d069      	beq.n	8011eac <_dtoa_r+0x924>
 8011dd8:	4631      	mov	r1, r6
 8011dda:	4658      	mov	r0, fp
 8011ddc:	f001 fa4a 	bl	8013274 <__mcmp>
 8011de0:	2800      	cmp	r0, #0
 8011de2:	da63      	bge.n	8011eac <_dtoa_r+0x924>
 8011de4:	2300      	movs	r3, #0
 8011de6:	4659      	mov	r1, fp
 8011de8:	220a      	movs	r2, #10
 8011dea:	4620      	mov	r0, r4
 8011dec:	f000 ffdc 	bl	8012da8 <__multadd>
 8011df0:	9b08      	ldr	r3, [sp, #32]
 8011df2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011df6:	4683      	mov	fp, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	f000 818f 	beq.w	801211c <_dtoa_r+0xb94>
 8011dfe:	4639      	mov	r1, r7
 8011e00:	2300      	movs	r3, #0
 8011e02:	220a      	movs	r2, #10
 8011e04:	4620      	mov	r0, r4
 8011e06:	f000 ffcf 	bl	8012da8 <__multadd>
 8011e0a:	f1b9 0f00 	cmp.w	r9, #0
 8011e0e:	4607      	mov	r7, r0
 8011e10:	f300 808e 	bgt.w	8011f30 <_dtoa_r+0x9a8>
 8011e14:	9b05      	ldr	r3, [sp, #20]
 8011e16:	2b02      	cmp	r3, #2
 8011e18:	dc50      	bgt.n	8011ebc <_dtoa_r+0x934>
 8011e1a:	e089      	b.n	8011f30 <_dtoa_r+0x9a8>
 8011e1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011e1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011e22:	e75d      	b.n	8011ce0 <_dtoa_r+0x758>
 8011e24:	9b01      	ldr	r3, [sp, #4]
 8011e26:	1e5e      	subs	r6, r3, #1
 8011e28:	9b06      	ldr	r3, [sp, #24]
 8011e2a:	42b3      	cmp	r3, r6
 8011e2c:	bfbf      	itttt	lt
 8011e2e:	9b06      	ldrlt	r3, [sp, #24]
 8011e30:	9606      	strlt	r6, [sp, #24]
 8011e32:	1af2      	sublt	r2, r6, r3
 8011e34:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8011e36:	bfb6      	itet	lt
 8011e38:	189b      	addlt	r3, r3, r2
 8011e3a:	1b9e      	subge	r6, r3, r6
 8011e3c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011e3e:	9b01      	ldr	r3, [sp, #4]
 8011e40:	bfb8      	it	lt
 8011e42:	2600      	movlt	r6, #0
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	bfb5      	itete	lt
 8011e48:	eba8 0503 	sublt.w	r5, r8, r3
 8011e4c:	9b01      	ldrge	r3, [sp, #4]
 8011e4e:	2300      	movlt	r3, #0
 8011e50:	4645      	movge	r5, r8
 8011e52:	e747      	b.n	8011ce4 <_dtoa_r+0x75c>
 8011e54:	9e06      	ldr	r6, [sp, #24]
 8011e56:	9f08      	ldr	r7, [sp, #32]
 8011e58:	4645      	mov	r5, r8
 8011e5a:	e74c      	b.n	8011cf6 <_dtoa_r+0x76e>
 8011e5c:	9a06      	ldr	r2, [sp, #24]
 8011e5e:	e775      	b.n	8011d4c <_dtoa_r+0x7c4>
 8011e60:	9b05      	ldr	r3, [sp, #20]
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	dc18      	bgt.n	8011e98 <_dtoa_r+0x910>
 8011e66:	9b02      	ldr	r3, [sp, #8]
 8011e68:	b9b3      	cbnz	r3, 8011e98 <_dtoa_r+0x910>
 8011e6a:	9b03      	ldr	r3, [sp, #12]
 8011e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e70:	b9a3      	cbnz	r3, 8011e9c <_dtoa_r+0x914>
 8011e72:	9b03      	ldr	r3, [sp, #12]
 8011e74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e78:	0d1b      	lsrs	r3, r3, #20
 8011e7a:	051b      	lsls	r3, r3, #20
 8011e7c:	b12b      	cbz	r3, 8011e8a <_dtoa_r+0x902>
 8011e7e:	9b04      	ldr	r3, [sp, #16]
 8011e80:	3301      	adds	r3, #1
 8011e82:	9304      	str	r3, [sp, #16]
 8011e84:	f108 0801 	add.w	r8, r8, #1
 8011e88:	2301      	movs	r3, #1
 8011e8a:	9306      	str	r3, [sp, #24]
 8011e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	f47f af74 	bne.w	8011d7c <_dtoa_r+0x7f4>
 8011e94:	2001      	movs	r0, #1
 8011e96:	e779      	b.n	8011d8c <_dtoa_r+0x804>
 8011e98:	2300      	movs	r3, #0
 8011e9a:	e7f6      	b.n	8011e8a <_dtoa_r+0x902>
 8011e9c:	9b02      	ldr	r3, [sp, #8]
 8011e9e:	e7f4      	b.n	8011e8a <_dtoa_r+0x902>
 8011ea0:	d085      	beq.n	8011dae <_dtoa_r+0x826>
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	301c      	adds	r0, #28
 8011ea6:	e77d      	b.n	8011da4 <_dtoa_r+0x81c>
 8011ea8:	40240000 	.word	0x40240000
 8011eac:	9b01      	ldr	r3, [sp, #4]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	dc38      	bgt.n	8011f24 <_dtoa_r+0x99c>
 8011eb2:	9b05      	ldr	r3, [sp, #20]
 8011eb4:	2b02      	cmp	r3, #2
 8011eb6:	dd35      	ble.n	8011f24 <_dtoa_r+0x99c>
 8011eb8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011ebc:	f1b9 0f00 	cmp.w	r9, #0
 8011ec0:	d10d      	bne.n	8011ede <_dtoa_r+0x956>
 8011ec2:	4631      	mov	r1, r6
 8011ec4:	464b      	mov	r3, r9
 8011ec6:	2205      	movs	r2, #5
 8011ec8:	4620      	mov	r0, r4
 8011eca:	f000 ff6d 	bl	8012da8 <__multadd>
 8011ece:	4601      	mov	r1, r0
 8011ed0:	4606      	mov	r6, r0
 8011ed2:	4658      	mov	r0, fp
 8011ed4:	f001 f9ce 	bl	8013274 <__mcmp>
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	f73f adbd 	bgt.w	8011a58 <_dtoa_r+0x4d0>
 8011ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ee0:	9d00      	ldr	r5, [sp, #0]
 8011ee2:	ea6f 0a03 	mvn.w	sl, r3
 8011ee6:	f04f 0800 	mov.w	r8, #0
 8011eea:	4631      	mov	r1, r6
 8011eec:	4620      	mov	r0, r4
 8011eee:	f000 ff39 	bl	8012d64 <_Bfree>
 8011ef2:	2f00      	cmp	r7, #0
 8011ef4:	f43f aeb4 	beq.w	8011c60 <_dtoa_r+0x6d8>
 8011ef8:	f1b8 0f00 	cmp.w	r8, #0
 8011efc:	d005      	beq.n	8011f0a <_dtoa_r+0x982>
 8011efe:	45b8      	cmp	r8, r7
 8011f00:	d003      	beq.n	8011f0a <_dtoa_r+0x982>
 8011f02:	4641      	mov	r1, r8
 8011f04:	4620      	mov	r0, r4
 8011f06:	f000 ff2d 	bl	8012d64 <_Bfree>
 8011f0a:	4639      	mov	r1, r7
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	f000 ff29 	bl	8012d64 <_Bfree>
 8011f12:	e6a5      	b.n	8011c60 <_dtoa_r+0x6d8>
 8011f14:	2600      	movs	r6, #0
 8011f16:	4637      	mov	r7, r6
 8011f18:	e7e1      	b.n	8011ede <_dtoa_r+0x956>
 8011f1a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011f1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011f20:	4637      	mov	r7, r6
 8011f22:	e599      	b.n	8011a58 <_dtoa_r+0x4d0>
 8011f24:	9b08      	ldr	r3, [sp, #32]
 8011f26:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 80fd 	beq.w	801212a <_dtoa_r+0xba2>
 8011f30:	2d00      	cmp	r5, #0
 8011f32:	dd05      	ble.n	8011f40 <_dtoa_r+0x9b8>
 8011f34:	4639      	mov	r1, r7
 8011f36:	462a      	mov	r2, r5
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f001 f92f 	bl	801319c <__lshift>
 8011f3e:	4607      	mov	r7, r0
 8011f40:	9b06      	ldr	r3, [sp, #24]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d05c      	beq.n	8012000 <_dtoa_r+0xa78>
 8011f46:	6879      	ldr	r1, [r7, #4]
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f000 fecb 	bl	8012ce4 <_Balloc>
 8011f4e:	4605      	mov	r5, r0
 8011f50:	b928      	cbnz	r0, 8011f5e <_dtoa_r+0x9d6>
 8011f52:	4b80      	ldr	r3, [pc, #512]	; (8012154 <_dtoa_r+0xbcc>)
 8011f54:	4602      	mov	r2, r0
 8011f56:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011f5a:	f7ff bb2e 	b.w	80115ba <_dtoa_r+0x32>
 8011f5e:	693a      	ldr	r2, [r7, #16]
 8011f60:	3202      	adds	r2, #2
 8011f62:	0092      	lsls	r2, r2, #2
 8011f64:	f107 010c 	add.w	r1, r7, #12
 8011f68:	300c      	adds	r0, #12
 8011f6a:	f7fd fa11 	bl	800f390 <memcpy>
 8011f6e:	2201      	movs	r2, #1
 8011f70:	4629      	mov	r1, r5
 8011f72:	4620      	mov	r0, r4
 8011f74:	f001 f912 	bl	801319c <__lshift>
 8011f78:	9b00      	ldr	r3, [sp, #0]
 8011f7a:	3301      	adds	r3, #1
 8011f7c:	9301      	str	r3, [sp, #4]
 8011f7e:	9b00      	ldr	r3, [sp, #0]
 8011f80:	444b      	add	r3, r9
 8011f82:	9307      	str	r3, [sp, #28]
 8011f84:	9b02      	ldr	r3, [sp, #8]
 8011f86:	f003 0301 	and.w	r3, r3, #1
 8011f8a:	46b8      	mov	r8, r7
 8011f8c:	9306      	str	r3, [sp, #24]
 8011f8e:	4607      	mov	r7, r0
 8011f90:	9b01      	ldr	r3, [sp, #4]
 8011f92:	4631      	mov	r1, r6
 8011f94:	3b01      	subs	r3, #1
 8011f96:	4658      	mov	r0, fp
 8011f98:	9302      	str	r3, [sp, #8]
 8011f9a:	f7ff fa69 	bl	8011470 <quorem>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	3330      	adds	r3, #48	; 0x30
 8011fa2:	9004      	str	r0, [sp, #16]
 8011fa4:	4641      	mov	r1, r8
 8011fa6:	4658      	mov	r0, fp
 8011fa8:	9308      	str	r3, [sp, #32]
 8011faa:	f001 f963 	bl	8013274 <__mcmp>
 8011fae:	463a      	mov	r2, r7
 8011fb0:	4681      	mov	r9, r0
 8011fb2:	4631      	mov	r1, r6
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f001 f979 	bl	80132ac <__mdiff>
 8011fba:	68c2      	ldr	r2, [r0, #12]
 8011fbc:	9b08      	ldr	r3, [sp, #32]
 8011fbe:	4605      	mov	r5, r0
 8011fc0:	bb02      	cbnz	r2, 8012004 <_dtoa_r+0xa7c>
 8011fc2:	4601      	mov	r1, r0
 8011fc4:	4658      	mov	r0, fp
 8011fc6:	f001 f955 	bl	8013274 <__mcmp>
 8011fca:	9b08      	ldr	r3, [sp, #32]
 8011fcc:	4602      	mov	r2, r0
 8011fce:	4629      	mov	r1, r5
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011fd6:	f000 fec5 	bl	8012d64 <_Bfree>
 8011fda:	9b05      	ldr	r3, [sp, #20]
 8011fdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fde:	9d01      	ldr	r5, [sp, #4]
 8011fe0:	ea43 0102 	orr.w	r1, r3, r2
 8011fe4:	9b06      	ldr	r3, [sp, #24]
 8011fe6:	430b      	orrs	r3, r1
 8011fe8:	9b08      	ldr	r3, [sp, #32]
 8011fea:	d10d      	bne.n	8012008 <_dtoa_r+0xa80>
 8011fec:	2b39      	cmp	r3, #57	; 0x39
 8011fee:	d029      	beq.n	8012044 <_dtoa_r+0xabc>
 8011ff0:	f1b9 0f00 	cmp.w	r9, #0
 8011ff4:	dd01      	ble.n	8011ffa <_dtoa_r+0xa72>
 8011ff6:	9b04      	ldr	r3, [sp, #16]
 8011ff8:	3331      	adds	r3, #49	; 0x31
 8011ffa:	9a02      	ldr	r2, [sp, #8]
 8011ffc:	7013      	strb	r3, [r2, #0]
 8011ffe:	e774      	b.n	8011eea <_dtoa_r+0x962>
 8012000:	4638      	mov	r0, r7
 8012002:	e7b9      	b.n	8011f78 <_dtoa_r+0x9f0>
 8012004:	2201      	movs	r2, #1
 8012006:	e7e2      	b.n	8011fce <_dtoa_r+0xa46>
 8012008:	f1b9 0f00 	cmp.w	r9, #0
 801200c:	db06      	blt.n	801201c <_dtoa_r+0xa94>
 801200e:	9905      	ldr	r1, [sp, #20]
 8012010:	ea41 0909 	orr.w	r9, r1, r9
 8012014:	9906      	ldr	r1, [sp, #24]
 8012016:	ea59 0101 	orrs.w	r1, r9, r1
 801201a:	d120      	bne.n	801205e <_dtoa_r+0xad6>
 801201c:	2a00      	cmp	r2, #0
 801201e:	ddec      	ble.n	8011ffa <_dtoa_r+0xa72>
 8012020:	4659      	mov	r1, fp
 8012022:	2201      	movs	r2, #1
 8012024:	4620      	mov	r0, r4
 8012026:	9301      	str	r3, [sp, #4]
 8012028:	f001 f8b8 	bl	801319c <__lshift>
 801202c:	4631      	mov	r1, r6
 801202e:	4683      	mov	fp, r0
 8012030:	f001 f920 	bl	8013274 <__mcmp>
 8012034:	2800      	cmp	r0, #0
 8012036:	9b01      	ldr	r3, [sp, #4]
 8012038:	dc02      	bgt.n	8012040 <_dtoa_r+0xab8>
 801203a:	d1de      	bne.n	8011ffa <_dtoa_r+0xa72>
 801203c:	07da      	lsls	r2, r3, #31
 801203e:	d5dc      	bpl.n	8011ffa <_dtoa_r+0xa72>
 8012040:	2b39      	cmp	r3, #57	; 0x39
 8012042:	d1d8      	bne.n	8011ff6 <_dtoa_r+0xa6e>
 8012044:	9a02      	ldr	r2, [sp, #8]
 8012046:	2339      	movs	r3, #57	; 0x39
 8012048:	7013      	strb	r3, [r2, #0]
 801204a:	462b      	mov	r3, r5
 801204c:	461d      	mov	r5, r3
 801204e:	3b01      	subs	r3, #1
 8012050:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012054:	2a39      	cmp	r2, #57	; 0x39
 8012056:	d050      	beq.n	80120fa <_dtoa_r+0xb72>
 8012058:	3201      	adds	r2, #1
 801205a:	701a      	strb	r2, [r3, #0]
 801205c:	e745      	b.n	8011eea <_dtoa_r+0x962>
 801205e:	2a00      	cmp	r2, #0
 8012060:	dd03      	ble.n	801206a <_dtoa_r+0xae2>
 8012062:	2b39      	cmp	r3, #57	; 0x39
 8012064:	d0ee      	beq.n	8012044 <_dtoa_r+0xabc>
 8012066:	3301      	adds	r3, #1
 8012068:	e7c7      	b.n	8011ffa <_dtoa_r+0xa72>
 801206a:	9a01      	ldr	r2, [sp, #4]
 801206c:	9907      	ldr	r1, [sp, #28]
 801206e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8012072:	428a      	cmp	r2, r1
 8012074:	d02a      	beq.n	80120cc <_dtoa_r+0xb44>
 8012076:	4659      	mov	r1, fp
 8012078:	2300      	movs	r3, #0
 801207a:	220a      	movs	r2, #10
 801207c:	4620      	mov	r0, r4
 801207e:	f000 fe93 	bl	8012da8 <__multadd>
 8012082:	45b8      	cmp	r8, r7
 8012084:	4683      	mov	fp, r0
 8012086:	f04f 0300 	mov.w	r3, #0
 801208a:	f04f 020a 	mov.w	r2, #10
 801208e:	4641      	mov	r1, r8
 8012090:	4620      	mov	r0, r4
 8012092:	d107      	bne.n	80120a4 <_dtoa_r+0xb1c>
 8012094:	f000 fe88 	bl	8012da8 <__multadd>
 8012098:	4680      	mov	r8, r0
 801209a:	4607      	mov	r7, r0
 801209c:	9b01      	ldr	r3, [sp, #4]
 801209e:	3301      	adds	r3, #1
 80120a0:	9301      	str	r3, [sp, #4]
 80120a2:	e775      	b.n	8011f90 <_dtoa_r+0xa08>
 80120a4:	f000 fe80 	bl	8012da8 <__multadd>
 80120a8:	4639      	mov	r1, r7
 80120aa:	4680      	mov	r8, r0
 80120ac:	2300      	movs	r3, #0
 80120ae:	220a      	movs	r2, #10
 80120b0:	4620      	mov	r0, r4
 80120b2:	f000 fe79 	bl	8012da8 <__multadd>
 80120b6:	4607      	mov	r7, r0
 80120b8:	e7f0      	b.n	801209c <_dtoa_r+0xb14>
 80120ba:	f1b9 0f00 	cmp.w	r9, #0
 80120be:	9a00      	ldr	r2, [sp, #0]
 80120c0:	bfcc      	ite	gt
 80120c2:	464d      	movgt	r5, r9
 80120c4:	2501      	movle	r5, #1
 80120c6:	4415      	add	r5, r2
 80120c8:	f04f 0800 	mov.w	r8, #0
 80120cc:	4659      	mov	r1, fp
 80120ce:	2201      	movs	r2, #1
 80120d0:	4620      	mov	r0, r4
 80120d2:	9301      	str	r3, [sp, #4]
 80120d4:	f001 f862 	bl	801319c <__lshift>
 80120d8:	4631      	mov	r1, r6
 80120da:	4683      	mov	fp, r0
 80120dc:	f001 f8ca 	bl	8013274 <__mcmp>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	dcb2      	bgt.n	801204a <_dtoa_r+0xac2>
 80120e4:	d102      	bne.n	80120ec <_dtoa_r+0xb64>
 80120e6:	9b01      	ldr	r3, [sp, #4]
 80120e8:	07db      	lsls	r3, r3, #31
 80120ea:	d4ae      	bmi.n	801204a <_dtoa_r+0xac2>
 80120ec:	462b      	mov	r3, r5
 80120ee:	461d      	mov	r5, r3
 80120f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80120f4:	2a30      	cmp	r2, #48	; 0x30
 80120f6:	d0fa      	beq.n	80120ee <_dtoa_r+0xb66>
 80120f8:	e6f7      	b.n	8011eea <_dtoa_r+0x962>
 80120fa:	9a00      	ldr	r2, [sp, #0]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d1a5      	bne.n	801204c <_dtoa_r+0xac4>
 8012100:	f10a 0a01 	add.w	sl, sl, #1
 8012104:	2331      	movs	r3, #49	; 0x31
 8012106:	e779      	b.n	8011ffc <_dtoa_r+0xa74>
 8012108:	4b13      	ldr	r3, [pc, #76]	; (8012158 <_dtoa_r+0xbd0>)
 801210a:	f7ff baaf 	b.w	801166c <_dtoa_r+0xe4>
 801210e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012110:	2b00      	cmp	r3, #0
 8012112:	f47f aa86 	bne.w	8011622 <_dtoa_r+0x9a>
 8012116:	4b11      	ldr	r3, [pc, #68]	; (801215c <_dtoa_r+0xbd4>)
 8012118:	f7ff baa8 	b.w	801166c <_dtoa_r+0xe4>
 801211c:	f1b9 0f00 	cmp.w	r9, #0
 8012120:	dc03      	bgt.n	801212a <_dtoa_r+0xba2>
 8012122:	9b05      	ldr	r3, [sp, #20]
 8012124:	2b02      	cmp	r3, #2
 8012126:	f73f aec9 	bgt.w	8011ebc <_dtoa_r+0x934>
 801212a:	9d00      	ldr	r5, [sp, #0]
 801212c:	4631      	mov	r1, r6
 801212e:	4658      	mov	r0, fp
 8012130:	f7ff f99e 	bl	8011470 <quorem>
 8012134:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8012138:	f805 3b01 	strb.w	r3, [r5], #1
 801213c:	9a00      	ldr	r2, [sp, #0]
 801213e:	1aaa      	subs	r2, r5, r2
 8012140:	4591      	cmp	r9, r2
 8012142:	ddba      	ble.n	80120ba <_dtoa_r+0xb32>
 8012144:	4659      	mov	r1, fp
 8012146:	2300      	movs	r3, #0
 8012148:	220a      	movs	r2, #10
 801214a:	4620      	mov	r0, r4
 801214c:	f000 fe2c 	bl	8012da8 <__multadd>
 8012150:	4683      	mov	fp, r0
 8012152:	e7eb      	b.n	801212c <_dtoa_r+0xba4>
 8012154:	08016443 	.word	0x08016443
 8012158:	080166a9 	.word	0x080166a9
 801215c:	080163c0 	.word	0x080163c0

08012160 <__sflush_r>:
 8012160:	898a      	ldrh	r2, [r1, #12]
 8012162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012166:	4605      	mov	r5, r0
 8012168:	0710      	lsls	r0, r2, #28
 801216a:	460c      	mov	r4, r1
 801216c:	d458      	bmi.n	8012220 <__sflush_r+0xc0>
 801216e:	684b      	ldr	r3, [r1, #4]
 8012170:	2b00      	cmp	r3, #0
 8012172:	dc05      	bgt.n	8012180 <__sflush_r+0x20>
 8012174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012176:	2b00      	cmp	r3, #0
 8012178:	dc02      	bgt.n	8012180 <__sflush_r+0x20>
 801217a:	2000      	movs	r0, #0
 801217c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012182:	2e00      	cmp	r6, #0
 8012184:	d0f9      	beq.n	801217a <__sflush_r+0x1a>
 8012186:	2300      	movs	r3, #0
 8012188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801218c:	682f      	ldr	r7, [r5, #0]
 801218e:	602b      	str	r3, [r5, #0]
 8012190:	d032      	beq.n	80121f8 <__sflush_r+0x98>
 8012192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012194:	89a3      	ldrh	r3, [r4, #12]
 8012196:	075a      	lsls	r2, r3, #29
 8012198:	d505      	bpl.n	80121a6 <__sflush_r+0x46>
 801219a:	6863      	ldr	r3, [r4, #4]
 801219c:	1ac0      	subs	r0, r0, r3
 801219e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80121a0:	b10b      	cbz	r3, 80121a6 <__sflush_r+0x46>
 80121a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80121a4:	1ac0      	subs	r0, r0, r3
 80121a6:	2300      	movs	r3, #0
 80121a8:	4602      	mov	r2, r0
 80121aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121ac:	6a21      	ldr	r1, [r4, #32]
 80121ae:	4628      	mov	r0, r5
 80121b0:	47b0      	blx	r6
 80121b2:	1c43      	adds	r3, r0, #1
 80121b4:	89a3      	ldrh	r3, [r4, #12]
 80121b6:	d106      	bne.n	80121c6 <__sflush_r+0x66>
 80121b8:	6829      	ldr	r1, [r5, #0]
 80121ba:	291d      	cmp	r1, #29
 80121bc:	d82c      	bhi.n	8012218 <__sflush_r+0xb8>
 80121be:	4a2a      	ldr	r2, [pc, #168]	; (8012268 <__sflush_r+0x108>)
 80121c0:	40ca      	lsrs	r2, r1
 80121c2:	07d6      	lsls	r6, r2, #31
 80121c4:	d528      	bpl.n	8012218 <__sflush_r+0xb8>
 80121c6:	2200      	movs	r2, #0
 80121c8:	6062      	str	r2, [r4, #4]
 80121ca:	04d9      	lsls	r1, r3, #19
 80121cc:	6922      	ldr	r2, [r4, #16]
 80121ce:	6022      	str	r2, [r4, #0]
 80121d0:	d504      	bpl.n	80121dc <__sflush_r+0x7c>
 80121d2:	1c42      	adds	r2, r0, #1
 80121d4:	d101      	bne.n	80121da <__sflush_r+0x7a>
 80121d6:	682b      	ldr	r3, [r5, #0]
 80121d8:	b903      	cbnz	r3, 80121dc <__sflush_r+0x7c>
 80121da:	6560      	str	r0, [r4, #84]	; 0x54
 80121dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121de:	602f      	str	r7, [r5, #0]
 80121e0:	2900      	cmp	r1, #0
 80121e2:	d0ca      	beq.n	801217a <__sflush_r+0x1a>
 80121e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121e8:	4299      	cmp	r1, r3
 80121ea:	d002      	beq.n	80121f2 <__sflush_r+0x92>
 80121ec:	4628      	mov	r0, r5
 80121ee:	f7fd f8e5 	bl	800f3bc <_free_r>
 80121f2:	2000      	movs	r0, #0
 80121f4:	6360      	str	r0, [r4, #52]	; 0x34
 80121f6:	e7c1      	b.n	801217c <__sflush_r+0x1c>
 80121f8:	6a21      	ldr	r1, [r4, #32]
 80121fa:	2301      	movs	r3, #1
 80121fc:	4628      	mov	r0, r5
 80121fe:	47b0      	blx	r6
 8012200:	1c41      	adds	r1, r0, #1
 8012202:	d1c7      	bne.n	8012194 <__sflush_r+0x34>
 8012204:	682b      	ldr	r3, [r5, #0]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d0c4      	beq.n	8012194 <__sflush_r+0x34>
 801220a:	2b1d      	cmp	r3, #29
 801220c:	d001      	beq.n	8012212 <__sflush_r+0xb2>
 801220e:	2b16      	cmp	r3, #22
 8012210:	d101      	bne.n	8012216 <__sflush_r+0xb6>
 8012212:	602f      	str	r7, [r5, #0]
 8012214:	e7b1      	b.n	801217a <__sflush_r+0x1a>
 8012216:	89a3      	ldrh	r3, [r4, #12]
 8012218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801221c:	81a3      	strh	r3, [r4, #12]
 801221e:	e7ad      	b.n	801217c <__sflush_r+0x1c>
 8012220:	690f      	ldr	r7, [r1, #16]
 8012222:	2f00      	cmp	r7, #0
 8012224:	d0a9      	beq.n	801217a <__sflush_r+0x1a>
 8012226:	0793      	lsls	r3, r2, #30
 8012228:	680e      	ldr	r6, [r1, #0]
 801222a:	bf08      	it	eq
 801222c:	694b      	ldreq	r3, [r1, #20]
 801222e:	600f      	str	r7, [r1, #0]
 8012230:	bf18      	it	ne
 8012232:	2300      	movne	r3, #0
 8012234:	eba6 0807 	sub.w	r8, r6, r7
 8012238:	608b      	str	r3, [r1, #8]
 801223a:	f1b8 0f00 	cmp.w	r8, #0
 801223e:	dd9c      	ble.n	801217a <__sflush_r+0x1a>
 8012240:	6a21      	ldr	r1, [r4, #32]
 8012242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012244:	4643      	mov	r3, r8
 8012246:	463a      	mov	r2, r7
 8012248:	4628      	mov	r0, r5
 801224a:	47b0      	blx	r6
 801224c:	2800      	cmp	r0, #0
 801224e:	dc06      	bgt.n	801225e <__sflush_r+0xfe>
 8012250:	89a3      	ldrh	r3, [r4, #12]
 8012252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012256:	81a3      	strh	r3, [r4, #12]
 8012258:	f04f 30ff 	mov.w	r0, #4294967295
 801225c:	e78e      	b.n	801217c <__sflush_r+0x1c>
 801225e:	4407      	add	r7, r0
 8012260:	eba8 0800 	sub.w	r8, r8, r0
 8012264:	e7e9      	b.n	801223a <__sflush_r+0xda>
 8012266:	bf00      	nop
 8012268:	20400001 	.word	0x20400001

0801226c <_fflush_r>:
 801226c:	b538      	push	{r3, r4, r5, lr}
 801226e:	690b      	ldr	r3, [r1, #16]
 8012270:	4605      	mov	r5, r0
 8012272:	460c      	mov	r4, r1
 8012274:	b913      	cbnz	r3, 801227c <_fflush_r+0x10>
 8012276:	2500      	movs	r5, #0
 8012278:	4628      	mov	r0, r5
 801227a:	bd38      	pop	{r3, r4, r5, pc}
 801227c:	b118      	cbz	r0, 8012286 <_fflush_r+0x1a>
 801227e:	6983      	ldr	r3, [r0, #24]
 8012280:	b90b      	cbnz	r3, 8012286 <_fflush_r+0x1a>
 8012282:	f000 f887 	bl	8012394 <__sinit>
 8012286:	4b14      	ldr	r3, [pc, #80]	; (80122d8 <_fflush_r+0x6c>)
 8012288:	429c      	cmp	r4, r3
 801228a:	d11b      	bne.n	80122c4 <_fflush_r+0x58>
 801228c:	686c      	ldr	r4, [r5, #4]
 801228e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d0ef      	beq.n	8012276 <_fflush_r+0xa>
 8012296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012298:	07d0      	lsls	r0, r2, #31
 801229a:	d404      	bmi.n	80122a6 <_fflush_r+0x3a>
 801229c:	0599      	lsls	r1, r3, #22
 801229e:	d402      	bmi.n	80122a6 <_fflush_r+0x3a>
 80122a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122a2:	f000 fc88 	bl	8012bb6 <__retarget_lock_acquire_recursive>
 80122a6:	4628      	mov	r0, r5
 80122a8:	4621      	mov	r1, r4
 80122aa:	f7ff ff59 	bl	8012160 <__sflush_r>
 80122ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122b0:	07da      	lsls	r2, r3, #31
 80122b2:	4605      	mov	r5, r0
 80122b4:	d4e0      	bmi.n	8012278 <_fflush_r+0xc>
 80122b6:	89a3      	ldrh	r3, [r4, #12]
 80122b8:	059b      	lsls	r3, r3, #22
 80122ba:	d4dd      	bmi.n	8012278 <_fflush_r+0xc>
 80122bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122be:	f000 fc7b 	bl	8012bb8 <__retarget_lock_release_recursive>
 80122c2:	e7d9      	b.n	8012278 <_fflush_r+0xc>
 80122c4:	4b05      	ldr	r3, [pc, #20]	; (80122dc <_fflush_r+0x70>)
 80122c6:	429c      	cmp	r4, r3
 80122c8:	d101      	bne.n	80122ce <_fflush_r+0x62>
 80122ca:	68ac      	ldr	r4, [r5, #8]
 80122cc:	e7df      	b.n	801228e <_fflush_r+0x22>
 80122ce:	4b04      	ldr	r3, [pc, #16]	; (80122e0 <_fflush_r+0x74>)
 80122d0:	429c      	cmp	r4, r3
 80122d2:	bf08      	it	eq
 80122d4:	68ec      	ldreq	r4, [r5, #12]
 80122d6:	e7da      	b.n	801228e <_fflush_r+0x22>
 80122d8:	08016474 	.word	0x08016474
 80122dc:	08016494 	.word	0x08016494
 80122e0:	08016454 	.word	0x08016454

080122e4 <std>:
 80122e4:	2300      	movs	r3, #0
 80122e6:	b510      	push	{r4, lr}
 80122e8:	4604      	mov	r4, r0
 80122ea:	e9c0 3300 	strd	r3, r3, [r0]
 80122ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80122f2:	6083      	str	r3, [r0, #8]
 80122f4:	8181      	strh	r1, [r0, #12]
 80122f6:	6643      	str	r3, [r0, #100]	; 0x64
 80122f8:	81c2      	strh	r2, [r0, #14]
 80122fa:	6183      	str	r3, [r0, #24]
 80122fc:	4619      	mov	r1, r3
 80122fe:	2208      	movs	r2, #8
 8012300:	305c      	adds	r0, #92	; 0x5c
 8012302:	f7fd f853 	bl	800f3ac <memset>
 8012306:	4b05      	ldr	r3, [pc, #20]	; (801231c <std+0x38>)
 8012308:	6263      	str	r3, [r4, #36]	; 0x24
 801230a:	4b05      	ldr	r3, [pc, #20]	; (8012320 <std+0x3c>)
 801230c:	62a3      	str	r3, [r4, #40]	; 0x28
 801230e:	4b05      	ldr	r3, [pc, #20]	; (8012324 <std+0x40>)
 8012310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012312:	4b05      	ldr	r3, [pc, #20]	; (8012328 <std+0x44>)
 8012314:	6224      	str	r4, [r4, #32]
 8012316:	6323      	str	r3, [r4, #48]	; 0x30
 8012318:	bd10      	pop	{r4, pc}
 801231a:	bf00      	nop
 801231c:	080103e5 	.word	0x080103e5
 8012320:	0801040b 	.word	0x0801040b
 8012324:	08010443 	.word	0x08010443
 8012328:	08010467 	.word	0x08010467

0801232c <_cleanup_r>:
 801232c:	4901      	ldr	r1, [pc, #4]	; (8012334 <_cleanup_r+0x8>)
 801232e:	f000 b8af 	b.w	8012490 <_fwalk_reent>
 8012332:	bf00      	nop
 8012334:	0801226d 	.word	0x0801226d

08012338 <__sfmoreglue>:
 8012338:	b570      	push	{r4, r5, r6, lr}
 801233a:	1e4a      	subs	r2, r1, #1
 801233c:	2568      	movs	r5, #104	; 0x68
 801233e:	4355      	muls	r5, r2
 8012340:	460e      	mov	r6, r1
 8012342:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012346:	f7fd f889 	bl	800f45c <_malloc_r>
 801234a:	4604      	mov	r4, r0
 801234c:	b140      	cbz	r0, 8012360 <__sfmoreglue+0x28>
 801234e:	2100      	movs	r1, #0
 8012350:	e9c0 1600 	strd	r1, r6, [r0]
 8012354:	300c      	adds	r0, #12
 8012356:	60a0      	str	r0, [r4, #8]
 8012358:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801235c:	f7fd f826 	bl	800f3ac <memset>
 8012360:	4620      	mov	r0, r4
 8012362:	bd70      	pop	{r4, r5, r6, pc}

08012364 <__sfp_lock_acquire>:
 8012364:	4801      	ldr	r0, [pc, #4]	; (801236c <__sfp_lock_acquire+0x8>)
 8012366:	f000 bc26 	b.w	8012bb6 <__retarget_lock_acquire_recursive>
 801236a:	bf00      	nop
 801236c:	20001a68 	.word	0x20001a68

08012370 <__sfp_lock_release>:
 8012370:	4801      	ldr	r0, [pc, #4]	; (8012378 <__sfp_lock_release+0x8>)
 8012372:	f000 bc21 	b.w	8012bb8 <__retarget_lock_release_recursive>
 8012376:	bf00      	nop
 8012378:	20001a68 	.word	0x20001a68

0801237c <__sinit_lock_acquire>:
 801237c:	4801      	ldr	r0, [pc, #4]	; (8012384 <__sinit_lock_acquire+0x8>)
 801237e:	f000 bc1a 	b.w	8012bb6 <__retarget_lock_acquire_recursive>
 8012382:	bf00      	nop
 8012384:	20001a63 	.word	0x20001a63

08012388 <__sinit_lock_release>:
 8012388:	4801      	ldr	r0, [pc, #4]	; (8012390 <__sinit_lock_release+0x8>)
 801238a:	f000 bc15 	b.w	8012bb8 <__retarget_lock_release_recursive>
 801238e:	bf00      	nop
 8012390:	20001a63 	.word	0x20001a63

08012394 <__sinit>:
 8012394:	b510      	push	{r4, lr}
 8012396:	4604      	mov	r4, r0
 8012398:	f7ff fff0 	bl	801237c <__sinit_lock_acquire>
 801239c:	69a3      	ldr	r3, [r4, #24]
 801239e:	b11b      	cbz	r3, 80123a8 <__sinit+0x14>
 80123a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123a4:	f7ff bff0 	b.w	8012388 <__sinit_lock_release>
 80123a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80123ac:	6523      	str	r3, [r4, #80]	; 0x50
 80123ae:	4b13      	ldr	r3, [pc, #76]	; (80123fc <__sinit+0x68>)
 80123b0:	4a13      	ldr	r2, [pc, #76]	; (8012400 <__sinit+0x6c>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80123b6:	42a3      	cmp	r3, r4
 80123b8:	bf04      	itt	eq
 80123ba:	2301      	moveq	r3, #1
 80123bc:	61a3      	streq	r3, [r4, #24]
 80123be:	4620      	mov	r0, r4
 80123c0:	f000 f820 	bl	8012404 <__sfp>
 80123c4:	6060      	str	r0, [r4, #4]
 80123c6:	4620      	mov	r0, r4
 80123c8:	f000 f81c 	bl	8012404 <__sfp>
 80123cc:	60a0      	str	r0, [r4, #8]
 80123ce:	4620      	mov	r0, r4
 80123d0:	f000 f818 	bl	8012404 <__sfp>
 80123d4:	2200      	movs	r2, #0
 80123d6:	60e0      	str	r0, [r4, #12]
 80123d8:	2104      	movs	r1, #4
 80123da:	6860      	ldr	r0, [r4, #4]
 80123dc:	f7ff ff82 	bl	80122e4 <std>
 80123e0:	68a0      	ldr	r0, [r4, #8]
 80123e2:	2201      	movs	r2, #1
 80123e4:	2109      	movs	r1, #9
 80123e6:	f7ff ff7d 	bl	80122e4 <std>
 80123ea:	68e0      	ldr	r0, [r4, #12]
 80123ec:	2202      	movs	r2, #2
 80123ee:	2112      	movs	r1, #18
 80123f0:	f7ff ff78 	bl	80122e4 <std>
 80123f4:	2301      	movs	r3, #1
 80123f6:	61a3      	str	r3, [r4, #24]
 80123f8:	e7d2      	b.n	80123a0 <__sinit+0xc>
 80123fa:	bf00      	nop
 80123fc:	08016334 	.word	0x08016334
 8012400:	0801232d 	.word	0x0801232d

08012404 <__sfp>:
 8012404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012406:	4607      	mov	r7, r0
 8012408:	f7ff ffac 	bl	8012364 <__sfp_lock_acquire>
 801240c:	4b1e      	ldr	r3, [pc, #120]	; (8012488 <__sfp+0x84>)
 801240e:	681e      	ldr	r6, [r3, #0]
 8012410:	69b3      	ldr	r3, [r6, #24]
 8012412:	b913      	cbnz	r3, 801241a <__sfp+0x16>
 8012414:	4630      	mov	r0, r6
 8012416:	f7ff ffbd 	bl	8012394 <__sinit>
 801241a:	3648      	adds	r6, #72	; 0x48
 801241c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012420:	3b01      	subs	r3, #1
 8012422:	d503      	bpl.n	801242c <__sfp+0x28>
 8012424:	6833      	ldr	r3, [r6, #0]
 8012426:	b30b      	cbz	r3, 801246c <__sfp+0x68>
 8012428:	6836      	ldr	r6, [r6, #0]
 801242a:	e7f7      	b.n	801241c <__sfp+0x18>
 801242c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012430:	b9d5      	cbnz	r5, 8012468 <__sfp+0x64>
 8012432:	4b16      	ldr	r3, [pc, #88]	; (801248c <__sfp+0x88>)
 8012434:	60e3      	str	r3, [r4, #12]
 8012436:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801243a:	6665      	str	r5, [r4, #100]	; 0x64
 801243c:	f000 fbba 	bl	8012bb4 <__retarget_lock_init_recursive>
 8012440:	f7ff ff96 	bl	8012370 <__sfp_lock_release>
 8012444:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012448:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801244c:	6025      	str	r5, [r4, #0]
 801244e:	61a5      	str	r5, [r4, #24]
 8012450:	2208      	movs	r2, #8
 8012452:	4629      	mov	r1, r5
 8012454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012458:	f7fc ffa8 	bl	800f3ac <memset>
 801245c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012464:	4620      	mov	r0, r4
 8012466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012468:	3468      	adds	r4, #104	; 0x68
 801246a:	e7d9      	b.n	8012420 <__sfp+0x1c>
 801246c:	2104      	movs	r1, #4
 801246e:	4638      	mov	r0, r7
 8012470:	f7ff ff62 	bl	8012338 <__sfmoreglue>
 8012474:	4604      	mov	r4, r0
 8012476:	6030      	str	r0, [r6, #0]
 8012478:	2800      	cmp	r0, #0
 801247a:	d1d5      	bne.n	8012428 <__sfp+0x24>
 801247c:	f7ff ff78 	bl	8012370 <__sfp_lock_release>
 8012480:	230c      	movs	r3, #12
 8012482:	603b      	str	r3, [r7, #0]
 8012484:	e7ee      	b.n	8012464 <__sfp+0x60>
 8012486:	bf00      	nop
 8012488:	08016334 	.word	0x08016334
 801248c:	ffff0001 	.word	0xffff0001

08012490 <_fwalk_reent>:
 8012490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012494:	4606      	mov	r6, r0
 8012496:	4688      	mov	r8, r1
 8012498:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801249c:	2700      	movs	r7, #0
 801249e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80124a2:	f1b9 0901 	subs.w	r9, r9, #1
 80124a6:	d505      	bpl.n	80124b4 <_fwalk_reent+0x24>
 80124a8:	6824      	ldr	r4, [r4, #0]
 80124aa:	2c00      	cmp	r4, #0
 80124ac:	d1f7      	bne.n	801249e <_fwalk_reent+0xe>
 80124ae:	4638      	mov	r0, r7
 80124b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124b4:	89ab      	ldrh	r3, [r5, #12]
 80124b6:	2b01      	cmp	r3, #1
 80124b8:	d907      	bls.n	80124ca <_fwalk_reent+0x3a>
 80124ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80124be:	3301      	adds	r3, #1
 80124c0:	d003      	beq.n	80124ca <_fwalk_reent+0x3a>
 80124c2:	4629      	mov	r1, r5
 80124c4:	4630      	mov	r0, r6
 80124c6:	47c0      	blx	r8
 80124c8:	4307      	orrs	r7, r0
 80124ca:	3568      	adds	r5, #104	; 0x68
 80124cc:	e7e9      	b.n	80124a2 <_fwalk_reent+0x12>

080124ce <rshift>:
 80124ce:	6903      	ldr	r3, [r0, #16]
 80124d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80124d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 80124dc:	f100 0414 	add.w	r4, r0, #20
 80124e0:	dd45      	ble.n	801256e <rshift+0xa0>
 80124e2:	f011 011f 	ands.w	r1, r1, #31
 80124e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80124ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80124ee:	d10c      	bne.n	801250a <rshift+0x3c>
 80124f0:	f100 0710 	add.w	r7, r0, #16
 80124f4:	4629      	mov	r1, r5
 80124f6:	42b1      	cmp	r1, r6
 80124f8:	d334      	bcc.n	8012564 <rshift+0x96>
 80124fa:	1a9b      	subs	r3, r3, r2
 80124fc:	009b      	lsls	r3, r3, #2
 80124fe:	1eea      	subs	r2, r5, #3
 8012500:	4296      	cmp	r6, r2
 8012502:	bf38      	it	cc
 8012504:	2300      	movcc	r3, #0
 8012506:	4423      	add	r3, r4
 8012508:	e015      	b.n	8012536 <rshift+0x68>
 801250a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801250e:	f1c1 0820 	rsb	r8, r1, #32
 8012512:	40cf      	lsrs	r7, r1
 8012514:	f105 0e04 	add.w	lr, r5, #4
 8012518:	46a1      	mov	r9, r4
 801251a:	4576      	cmp	r6, lr
 801251c:	46f4      	mov	ip, lr
 801251e:	d815      	bhi.n	801254c <rshift+0x7e>
 8012520:	1a9b      	subs	r3, r3, r2
 8012522:	009a      	lsls	r2, r3, #2
 8012524:	3a04      	subs	r2, #4
 8012526:	3501      	adds	r5, #1
 8012528:	42ae      	cmp	r6, r5
 801252a:	bf38      	it	cc
 801252c:	2200      	movcc	r2, #0
 801252e:	18a3      	adds	r3, r4, r2
 8012530:	50a7      	str	r7, [r4, r2]
 8012532:	b107      	cbz	r7, 8012536 <rshift+0x68>
 8012534:	3304      	adds	r3, #4
 8012536:	1b1a      	subs	r2, r3, r4
 8012538:	42a3      	cmp	r3, r4
 801253a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801253e:	bf08      	it	eq
 8012540:	2300      	moveq	r3, #0
 8012542:	6102      	str	r2, [r0, #16]
 8012544:	bf08      	it	eq
 8012546:	6143      	streq	r3, [r0, #20]
 8012548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801254c:	f8dc c000 	ldr.w	ip, [ip]
 8012550:	fa0c fc08 	lsl.w	ip, ip, r8
 8012554:	ea4c 0707 	orr.w	r7, ip, r7
 8012558:	f849 7b04 	str.w	r7, [r9], #4
 801255c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012560:	40cf      	lsrs	r7, r1
 8012562:	e7da      	b.n	801251a <rshift+0x4c>
 8012564:	f851 cb04 	ldr.w	ip, [r1], #4
 8012568:	f847 cf04 	str.w	ip, [r7, #4]!
 801256c:	e7c3      	b.n	80124f6 <rshift+0x28>
 801256e:	4623      	mov	r3, r4
 8012570:	e7e1      	b.n	8012536 <rshift+0x68>

08012572 <__hexdig_fun>:
 8012572:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012576:	2b09      	cmp	r3, #9
 8012578:	d802      	bhi.n	8012580 <__hexdig_fun+0xe>
 801257a:	3820      	subs	r0, #32
 801257c:	b2c0      	uxtb	r0, r0
 801257e:	4770      	bx	lr
 8012580:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012584:	2b05      	cmp	r3, #5
 8012586:	d801      	bhi.n	801258c <__hexdig_fun+0x1a>
 8012588:	3847      	subs	r0, #71	; 0x47
 801258a:	e7f7      	b.n	801257c <__hexdig_fun+0xa>
 801258c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012590:	2b05      	cmp	r3, #5
 8012592:	d801      	bhi.n	8012598 <__hexdig_fun+0x26>
 8012594:	3827      	subs	r0, #39	; 0x27
 8012596:	e7f1      	b.n	801257c <__hexdig_fun+0xa>
 8012598:	2000      	movs	r0, #0
 801259a:	4770      	bx	lr

0801259c <__gethex>:
 801259c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a0:	ed2d 8b02 	vpush	{d8}
 80125a4:	b089      	sub	sp, #36	; 0x24
 80125a6:	ee08 0a10 	vmov	s16, r0
 80125aa:	9304      	str	r3, [sp, #16]
 80125ac:	4bbc      	ldr	r3, [pc, #752]	; (80128a0 <__gethex+0x304>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	9301      	str	r3, [sp, #4]
 80125b2:	4618      	mov	r0, r3
 80125b4:	468b      	mov	fp, r1
 80125b6:	4690      	mov	r8, r2
 80125b8:	f7ed fe24 	bl	8000204 <strlen>
 80125bc:	9b01      	ldr	r3, [sp, #4]
 80125be:	f8db 2000 	ldr.w	r2, [fp]
 80125c2:	4403      	add	r3, r0
 80125c4:	4682      	mov	sl, r0
 80125c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80125ca:	9305      	str	r3, [sp, #20]
 80125cc:	1c93      	adds	r3, r2, #2
 80125ce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80125d2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80125d6:	32fe      	adds	r2, #254	; 0xfe
 80125d8:	18d1      	adds	r1, r2, r3
 80125da:	461f      	mov	r7, r3
 80125dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 80125e0:	9100      	str	r1, [sp, #0]
 80125e2:	2830      	cmp	r0, #48	; 0x30
 80125e4:	d0f8      	beq.n	80125d8 <__gethex+0x3c>
 80125e6:	f7ff ffc4 	bl	8012572 <__hexdig_fun>
 80125ea:	4604      	mov	r4, r0
 80125ec:	2800      	cmp	r0, #0
 80125ee:	d13a      	bne.n	8012666 <__gethex+0xca>
 80125f0:	9901      	ldr	r1, [sp, #4]
 80125f2:	4652      	mov	r2, sl
 80125f4:	4638      	mov	r0, r7
 80125f6:	f7fd ff4f 	bl	8010498 <strncmp>
 80125fa:	4605      	mov	r5, r0
 80125fc:	2800      	cmp	r0, #0
 80125fe:	d168      	bne.n	80126d2 <__gethex+0x136>
 8012600:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012604:	eb07 060a 	add.w	r6, r7, sl
 8012608:	f7ff ffb3 	bl	8012572 <__hexdig_fun>
 801260c:	2800      	cmp	r0, #0
 801260e:	d062      	beq.n	80126d6 <__gethex+0x13a>
 8012610:	4633      	mov	r3, r6
 8012612:	7818      	ldrb	r0, [r3, #0]
 8012614:	2830      	cmp	r0, #48	; 0x30
 8012616:	461f      	mov	r7, r3
 8012618:	f103 0301 	add.w	r3, r3, #1
 801261c:	d0f9      	beq.n	8012612 <__gethex+0x76>
 801261e:	f7ff ffa8 	bl	8012572 <__hexdig_fun>
 8012622:	2301      	movs	r3, #1
 8012624:	fab0 f480 	clz	r4, r0
 8012628:	0964      	lsrs	r4, r4, #5
 801262a:	4635      	mov	r5, r6
 801262c:	9300      	str	r3, [sp, #0]
 801262e:	463a      	mov	r2, r7
 8012630:	4616      	mov	r6, r2
 8012632:	3201      	adds	r2, #1
 8012634:	7830      	ldrb	r0, [r6, #0]
 8012636:	f7ff ff9c 	bl	8012572 <__hexdig_fun>
 801263a:	2800      	cmp	r0, #0
 801263c:	d1f8      	bne.n	8012630 <__gethex+0x94>
 801263e:	9901      	ldr	r1, [sp, #4]
 8012640:	4652      	mov	r2, sl
 8012642:	4630      	mov	r0, r6
 8012644:	f7fd ff28 	bl	8010498 <strncmp>
 8012648:	b980      	cbnz	r0, 801266c <__gethex+0xd0>
 801264a:	b94d      	cbnz	r5, 8012660 <__gethex+0xc4>
 801264c:	eb06 050a 	add.w	r5, r6, sl
 8012650:	462a      	mov	r2, r5
 8012652:	4616      	mov	r6, r2
 8012654:	3201      	adds	r2, #1
 8012656:	7830      	ldrb	r0, [r6, #0]
 8012658:	f7ff ff8b 	bl	8012572 <__hexdig_fun>
 801265c:	2800      	cmp	r0, #0
 801265e:	d1f8      	bne.n	8012652 <__gethex+0xb6>
 8012660:	1bad      	subs	r5, r5, r6
 8012662:	00ad      	lsls	r5, r5, #2
 8012664:	e004      	b.n	8012670 <__gethex+0xd4>
 8012666:	2400      	movs	r4, #0
 8012668:	4625      	mov	r5, r4
 801266a:	e7e0      	b.n	801262e <__gethex+0x92>
 801266c:	2d00      	cmp	r5, #0
 801266e:	d1f7      	bne.n	8012660 <__gethex+0xc4>
 8012670:	7833      	ldrb	r3, [r6, #0]
 8012672:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012676:	2b50      	cmp	r3, #80	; 0x50
 8012678:	d13b      	bne.n	80126f2 <__gethex+0x156>
 801267a:	7873      	ldrb	r3, [r6, #1]
 801267c:	2b2b      	cmp	r3, #43	; 0x2b
 801267e:	d02c      	beq.n	80126da <__gethex+0x13e>
 8012680:	2b2d      	cmp	r3, #45	; 0x2d
 8012682:	d02e      	beq.n	80126e2 <__gethex+0x146>
 8012684:	1c71      	adds	r1, r6, #1
 8012686:	f04f 0900 	mov.w	r9, #0
 801268a:	7808      	ldrb	r0, [r1, #0]
 801268c:	f7ff ff71 	bl	8012572 <__hexdig_fun>
 8012690:	1e43      	subs	r3, r0, #1
 8012692:	b2db      	uxtb	r3, r3
 8012694:	2b18      	cmp	r3, #24
 8012696:	d82c      	bhi.n	80126f2 <__gethex+0x156>
 8012698:	f1a0 0210 	sub.w	r2, r0, #16
 801269c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80126a0:	f7ff ff67 	bl	8012572 <__hexdig_fun>
 80126a4:	1e43      	subs	r3, r0, #1
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	2b18      	cmp	r3, #24
 80126aa:	d91d      	bls.n	80126e8 <__gethex+0x14c>
 80126ac:	f1b9 0f00 	cmp.w	r9, #0
 80126b0:	d000      	beq.n	80126b4 <__gethex+0x118>
 80126b2:	4252      	negs	r2, r2
 80126b4:	4415      	add	r5, r2
 80126b6:	f8cb 1000 	str.w	r1, [fp]
 80126ba:	b1e4      	cbz	r4, 80126f6 <__gethex+0x15a>
 80126bc:	9b00      	ldr	r3, [sp, #0]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	bf14      	ite	ne
 80126c2:	2700      	movne	r7, #0
 80126c4:	2706      	moveq	r7, #6
 80126c6:	4638      	mov	r0, r7
 80126c8:	b009      	add	sp, #36	; 0x24
 80126ca:	ecbd 8b02 	vpop	{d8}
 80126ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d2:	463e      	mov	r6, r7
 80126d4:	4625      	mov	r5, r4
 80126d6:	2401      	movs	r4, #1
 80126d8:	e7ca      	b.n	8012670 <__gethex+0xd4>
 80126da:	f04f 0900 	mov.w	r9, #0
 80126de:	1cb1      	adds	r1, r6, #2
 80126e0:	e7d3      	b.n	801268a <__gethex+0xee>
 80126e2:	f04f 0901 	mov.w	r9, #1
 80126e6:	e7fa      	b.n	80126de <__gethex+0x142>
 80126e8:	230a      	movs	r3, #10
 80126ea:	fb03 0202 	mla	r2, r3, r2, r0
 80126ee:	3a10      	subs	r2, #16
 80126f0:	e7d4      	b.n	801269c <__gethex+0x100>
 80126f2:	4631      	mov	r1, r6
 80126f4:	e7df      	b.n	80126b6 <__gethex+0x11a>
 80126f6:	1bf3      	subs	r3, r6, r7
 80126f8:	3b01      	subs	r3, #1
 80126fa:	4621      	mov	r1, r4
 80126fc:	2b07      	cmp	r3, #7
 80126fe:	dc0b      	bgt.n	8012718 <__gethex+0x17c>
 8012700:	ee18 0a10 	vmov	r0, s16
 8012704:	f000 faee 	bl	8012ce4 <_Balloc>
 8012708:	4604      	mov	r4, r0
 801270a:	b940      	cbnz	r0, 801271e <__gethex+0x182>
 801270c:	4b65      	ldr	r3, [pc, #404]	; (80128a4 <__gethex+0x308>)
 801270e:	4602      	mov	r2, r0
 8012710:	21de      	movs	r1, #222	; 0xde
 8012712:	4865      	ldr	r0, [pc, #404]	; (80128a8 <__gethex+0x30c>)
 8012714:	f001 fea0 	bl	8014458 <__assert_func>
 8012718:	3101      	adds	r1, #1
 801271a:	105b      	asrs	r3, r3, #1
 801271c:	e7ee      	b.n	80126fc <__gethex+0x160>
 801271e:	f100 0914 	add.w	r9, r0, #20
 8012722:	f04f 0b00 	mov.w	fp, #0
 8012726:	f1ca 0301 	rsb	r3, sl, #1
 801272a:	f8cd 9008 	str.w	r9, [sp, #8]
 801272e:	f8cd b000 	str.w	fp, [sp]
 8012732:	9306      	str	r3, [sp, #24]
 8012734:	42b7      	cmp	r7, r6
 8012736:	d340      	bcc.n	80127ba <__gethex+0x21e>
 8012738:	9802      	ldr	r0, [sp, #8]
 801273a:	9b00      	ldr	r3, [sp, #0]
 801273c:	f840 3b04 	str.w	r3, [r0], #4
 8012740:	eba0 0009 	sub.w	r0, r0, r9
 8012744:	1080      	asrs	r0, r0, #2
 8012746:	0146      	lsls	r6, r0, #5
 8012748:	6120      	str	r0, [r4, #16]
 801274a:	4618      	mov	r0, r3
 801274c:	f000 fbc0 	bl	8012ed0 <__hi0bits>
 8012750:	1a30      	subs	r0, r6, r0
 8012752:	f8d8 6000 	ldr.w	r6, [r8]
 8012756:	42b0      	cmp	r0, r6
 8012758:	dd63      	ble.n	8012822 <__gethex+0x286>
 801275a:	1b87      	subs	r7, r0, r6
 801275c:	4639      	mov	r1, r7
 801275e:	4620      	mov	r0, r4
 8012760:	f000 ff5a 	bl	8013618 <__any_on>
 8012764:	4682      	mov	sl, r0
 8012766:	b1a8      	cbz	r0, 8012794 <__gethex+0x1f8>
 8012768:	1e7b      	subs	r3, r7, #1
 801276a:	1159      	asrs	r1, r3, #5
 801276c:	f003 021f 	and.w	r2, r3, #31
 8012770:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012774:	f04f 0a01 	mov.w	sl, #1
 8012778:	fa0a f202 	lsl.w	r2, sl, r2
 801277c:	420a      	tst	r2, r1
 801277e:	d009      	beq.n	8012794 <__gethex+0x1f8>
 8012780:	4553      	cmp	r3, sl
 8012782:	dd05      	ble.n	8012790 <__gethex+0x1f4>
 8012784:	1eb9      	subs	r1, r7, #2
 8012786:	4620      	mov	r0, r4
 8012788:	f000 ff46 	bl	8013618 <__any_on>
 801278c:	2800      	cmp	r0, #0
 801278e:	d145      	bne.n	801281c <__gethex+0x280>
 8012790:	f04f 0a02 	mov.w	sl, #2
 8012794:	4639      	mov	r1, r7
 8012796:	4620      	mov	r0, r4
 8012798:	f7ff fe99 	bl	80124ce <rshift>
 801279c:	443d      	add	r5, r7
 801279e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80127a2:	42ab      	cmp	r3, r5
 80127a4:	da4c      	bge.n	8012840 <__gethex+0x2a4>
 80127a6:	ee18 0a10 	vmov	r0, s16
 80127aa:	4621      	mov	r1, r4
 80127ac:	f000 fada 	bl	8012d64 <_Bfree>
 80127b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80127b2:	2300      	movs	r3, #0
 80127b4:	6013      	str	r3, [r2, #0]
 80127b6:	27a3      	movs	r7, #163	; 0xa3
 80127b8:	e785      	b.n	80126c6 <__gethex+0x12a>
 80127ba:	1e73      	subs	r3, r6, #1
 80127bc:	9a05      	ldr	r2, [sp, #20]
 80127be:	9303      	str	r3, [sp, #12]
 80127c0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d019      	beq.n	80127fc <__gethex+0x260>
 80127c8:	f1bb 0f20 	cmp.w	fp, #32
 80127cc:	d107      	bne.n	80127de <__gethex+0x242>
 80127ce:	9b02      	ldr	r3, [sp, #8]
 80127d0:	9a00      	ldr	r2, [sp, #0]
 80127d2:	f843 2b04 	str.w	r2, [r3], #4
 80127d6:	9302      	str	r3, [sp, #8]
 80127d8:	2300      	movs	r3, #0
 80127da:	9300      	str	r3, [sp, #0]
 80127dc:	469b      	mov	fp, r3
 80127de:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80127e2:	f7ff fec6 	bl	8012572 <__hexdig_fun>
 80127e6:	9b00      	ldr	r3, [sp, #0]
 80127e8:	f000 000f 	and.w	r0, r0, #15
 80127ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80127f0:	4303      	orrs	r3, r0
 80127f2:	9300      	str	r3, [sp, #0]
 80127f4:	f10b 0b04 	add.w	fp, fp, #4
 80127f8:	9b03      	ldr	r3, [sp, #12]
 80127fa:	e00d      	b.n	8012818 <__gethex+0x27c>
 80127fc:	9b03      	ldr	r3, [sp, #12]
 80127fe:	9a06      	ldr	r2, [sp, #24]
 8012800:	4413      	add	r3, r2
 8012802:	42bb      	cmp	r3, r7
 8012804:	d3e0      	bcc.n	80127c8 <__gethex+0x22c>
 8012806:	4618      	mov	r0, r3
 8012808:	9901      	ldr	r1, [sp, #4]
 801280a:	9307      	str	r3, [sp, #28]
 801280c:	4652      	mov	r2, sl
 801280e:	f7fd fe43 	bl	8010498 <strncmp>
 8012812:	9b07      	ldr	r3, [sp, #28]
 8012814:	2800      	cmp	r0, #0
 8012816:	d1d7      	bne.n	80127c8 <__gethex+0x22c>
 8012818:	461e      	mov	r6, r3
 801281a:	e78b      	b.n	8012734 <__gethex+0x198>
 801281c:	f04f 0a03 	mov.w	sl, #3
 8012820:	e7b8      	b.n	8012794 <__gethex+0x1f8>
 8012822:	da0a      	bge.n	801283a <__gethex+0x29e>
 8012824:	1a37      	subs	r7, r6, r0
 8012826:	4621      	mov	r1, r4
 8012828:	ee18 0a10 	vmov	r0, s16
 801282c:	463a      	mov	r2, r7
 801282e:	f000 fcb5 	bl	801319c <__lshift>
 8012832:	1bed      	subs	r5, r5, r7
 8012834:	4604      	mov	r4, r0
 8012836:	f100 0914 	add.w	r9, r0, #20
 801283a:	f04f 0a00 	mov.w	sl, #0
 801283e:	e7ae      	b.n	801279e <__gethex+0x202>
 8012840:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012844:	42a8      	cmp	r0, r5
 8012846:	dd72      	ble.n	801292e <__gethex+0x392>
 8012848:	1b45      	subs	r5, r0, r5
 801284a:	42ae      	cmp	r6, r5
 801284c:	dc36      	bgt.n	80128bc <__gethex+0x320>
 801284e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012852:	2b02      	cmp	r3, #2
 8012854:	d02a      	beq.n	80128ac <__gethex+0x310>
 8012856:	2b03      	cmp	r3, #3
 8012858:	d02c      	beq.n	80128b4 <__gethex+0x318>
 801285a:	2b01      	cmp	r3, #1
 801285c:	d115      	bne.n	801288a <__gethex+0x2ee>
 801285e:	42ae      	cmp	r6, r5
 8012860:	d113      	bne.n	801288a <__gethex+0x2ee>
 8012862:	2e01      	cmp	r6, #1
 8012864:	d10b      	bne.n	801287e <__gethex+0x2e2>
 8012866:	9a04      	ldr	r2, [sp, #16]
 8012868:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801286c:	6013      	str	r3, [r2, #0]
 801286e:	2301      	movs	r3, #1
 8012870:	6123      	str	r3, [r4, #16]
 8012872:	f8c9 3000 	str.w	r3, [r9]
 8012876:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012878:	2762      	movs	r7, #98	; 0x62
 801287a:	601c      	str	r4, [r3, #0]
 801287c:	e723      	b.n	80126c6 <__gethex+0x12a>
 801287e:	1e71      	subs	r1, r6, #1
 8012880:	4620      	mov	r0, r4
 8012882:	f000 fec9 	bl	8013618 <__any_on>
 8012886:	2800      	cmp	r0, #0
 8012888:	d1ed      	bne.n	8012866 <__gethex+0x2ca>
 801288a:	ee18 0a10 	vmov	r0, s16
 801288e:	4621      	mov	r1, r4
 8012890:	f000 fa68 	bl	8012d64 <_Bfree>
 8012894:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012896:	2300      	movs	r3, #0
 8012898:	6013      	str	r3, [r2, #0]
 801289a:	2750      	movs	r7, #80	; 0x50
 801289c:	e713      	b.n	80126c6 <__gethex+0x12a>
 801289e:	bf00      	nop
 80128a0:	08016520 	.word	0x08016520
 80128a4:	08016443 	.word	0x08016443
 80128a8:	080164b4 	.word	0x080164b4
 80128ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d1eb      	bne.n	801288a <__gethex+0x2ee>
 80128b2:	e7d8      	b.n	8012866 <__gethex+0x2ca>
 80128b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d1d5      	bne.n	8012866 <__gethex+0x2ca>
 80128ba:	e7e6      	b.n	801288a <__gethex+0x2ee>
 80128bc:	1e6f      	subs	r7, r5, #1
 80128be:	f1ba 0f00 	cmp.w	sl, #0
 80128c2:	d131      	bne.n	8012928 <__gethex+0x38c>
 80128c4:	b127      	cbz	r7, 80128d0 <__gethex+0x334>
 80128c6:	4639      	mov	r1, r7
 80128c8:	4620      	mov	r0, r4
 80128ca:	f000 fea5 	bl	8013618 <__any_on>
 80128ce:	4682      	mov	sl, r0
 80128d0:	117b      	asrs	r3, r7, #5
 80128d2:	2101      	movs	r1, #1
 80128d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80128d8:	f007 071f 	and.w	r7, r7, #31
 80128dc:	fa01 f707 	lsl.w	r7, r1, r7
 80128e0:	421f      	tst	r7, r3
 80128e2:	4629      	mov	r1, r5
 80128e4:	4620      	mov	r0, r4
 80128e6:	bf18      	it	ne
 80128e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80128ec:	1b76      	subs	r6, r6, r5
 80128ee:	f7ff fdee 	bl	80124ce <rshift>
 80128f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80128f6:	2702      	movs	r7, #2
 80128f8:	f1ba 0f00 	cmp.w	sl, #0
 80128fc:	d048      	beq.n	8012990 <__gethex+0x3f4>
 80128fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012902:	2b02      	cmp	r3, #2
 8012904:	d015      	beq.n	8012932 <__gethex+0x396>
 8012906:	2b03      	cmp	r3, #3
 8012908:	d017      	beq.n	801293a <__gethex+0x39e>
 801290a:	2b01      	cmp	r3, #1
 801290c:	d109      	bne.n	8012922 <__gethex+0x386>
 801290e:	f01a 0f02 	tst.w	sl, #2
 8012912:	d006      	beq.n	8012922 <__gethex+0x386>
 8012914:	f8d9 0000 	ldr.w	r0, [r9]
 8012918:	ea4a 0a00 	orr.w	sl, sl, r0
 801291c:	f01a 0f01 	tst.w	sl, #1
 8012920:	d10e      	bne.n	8012940 <__gethex+0x3a4>
 8012922:	f047 0710 	orr.w	r7, r7, #16
 8012926:	e033      	b.n	8012990 <__gethex+0x3f4>
 8012928:	f04f 0a01 	mov.w	sl, #1
 801292c:	e7d0      	b.n	80128d0 <__gethex+0x334>
 801292e:	2701      	movs	r7, #1
 8012930:	e7e2      	b.n	80128f8 <__gethex+0x35c>
 8012932:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012934:	f1c3 0301 	rsb	r3, r3, #1
 8012938:	9315      	str	r3, [sp, #84]	; 0x54
 801293a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801293c:	2b00      	cmp	r3, #0
 801293e:	d0f0      	beq.n	8012922 <__gethex+0x386>
 8012940:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012944:	f104 0314 	add.w	r3, r4, #20
 8012948:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801294c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012950:	f04f 0c00 	mov.w	ip, #0
 8012954:	4618      	mov	r0, r3
 8012956:	f853 2b04 	ldr.w	r2, [r3], #4
 801295a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801295e:	d01c      	beq.n	801299a <__gethex+0x3fe>
 8012960:	3201      	adds	r2, #1
 8012962:	6002      	str	r2, [r0, #0]
 8012964:	2f02      	cmp	r7, #2
 8012966:	f104 0314 	add.w	r3, r4, #20
 801296a:	d13f      	bne.n	80129ec <__gethex+0x450>
 801296c:	f8d8 2000 	ldr.w	r2, [r8]
 8012970:	3a01      	subs	r2, #1
 8012972:	42b2      	cmp	r2, r6
 8012974:	d10a      	bne.n	801298c <__gethex+0x3f0>
 8012976:	1171      	asrs	r1, r6, #5
 8012978:	2201      	movs	r2, #1
 801297a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801297e:	f006 061f 	and.w	r6, r6, #31
 8012982:	fa02 f606 	lsl.w	r6, r2, r6
 8012986:	421e      	tst	r6, r3
 8012988:	bf18      	it	ne
 801298a:	4617      	movne	r7, r2
 801298c:	f047 0720 	orr.w	r7, r7, #32
 8012990:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012992:	601c      	str	r4, [r3, #0]
 8012994:	9b04      	ldr	r3, [sp, #16]
 8012996:	601d      	str	r5, [r3, #0]
 8012998:	e695      	b.n	80126c6 <__gethex+0x12a>
 801299a:	4299      	cmp	r1, r3
 801299c:	f843 cc04 	str.w	ip, [r3, #-4]
 80129a0:	d8d8      	bhi.n	8012954 <__gethex+0x3b8>
 80129a2:	68a3      	ldr	r3, [r4, #8]
 80129a4:	459b      	cmp	fp, r3
 80129a6:	db19      	blt.n	80129dc <__gethex+0x440>
 80129a8:	6861      	ldr	r1, [r4, #4]
 80129aa:	ee18 0a10 	vmov	r0, s16
 80129ae:	3101      	adds	r1, #1
 80129b0:	f000 f998 	bl	8012ce4 <_Balloc>
 80129b4:	4681      	mov	r9, r0
 80129b6:	b918      	cbnz	r0, 80129c0 <__gethex+0x424>
 80129b8:	4b1a      	ldr	r3, [pc, #104]	; (8012a24 <__gethex+0x488>)
 80129ba:	4602      	mov	r2, r0
 80129bc:	2184      	movs	r1, #132	; 0x84
 80129be:	e6a8      	b.n	8012712 <__gethex+0x176>
 80129c0:	6922      	ldr	r2, [r4, #16]
 80129c2:	3202      	adds	r2, #2
 80129c4:	f104 010c 	add.w	r1, r4, #12
 80129c8:	0092      	lsls	r2, r2, #2
 80129ca:	300c      	adds	r0, #12
 80129cc:	f7fc fce0 	bl	800f390 <memcpy>
 80129d0:	4621      	mov	r1, r4
 80129d2:	ee18 0a10 	vmov	r0, s16
 80129d6:	f000 f9c5 	bl	8012d64 <_Bfree>
 80129da:	464c      	mov	r4, r9
 80129dc:	6923      	ldr	r3, [r4, #16]
 80129de:	1c5a      	adds	r2, r3, #1
 80129e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80129e4:	6122      	str	r2, [r4, #16]
 80129e6:	2201      	movs	r2, #1
 80129e8:	615a      	str	r2, [r3, #20]
 80129ea:	e7bb      	b.n	8012964 <__gethex+0x3c8>
 80129ec:	6922      	ldr	r2, [r4, #16]
 80129ee:	455a      	cmp	r2, fp
 80129f0:	dd0b      	ble.n	8012a0a <__gethex+0x46e>
 80129f2:	2101      	movs	r1, #1
 80129f4:	4620      	mov	r0, r4
 80129f6:	f7ff fd6a 	bl	80124ce <rshift>
 80129fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80129fe:	3501      	adds	r5, #1
 8012a00:	42ab      	cmp	r3, r5
 8012a02:	f6ff aed0 	blt.w	80127a6 <__gethex+0x20a>
 8012a06:	2701      	movs	r7, #1
 8012a08:	e7c0      	b.n	801298c <__gethex+0x3f0>
 8012a0a:	f016 061f 	ands.w	r6, r6, #31
 8012a0e:	d0fa      	beq.n	8012a06 <__gethex+0x46a>
 8012a10:	449a      	add	sl, r3
 8012a12:	f1c6 0620 	rsb	r6, r6, #32
 8012a16:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8012a1a:	f000 fa59 	bl	8012ed0 <__hi0bits>
 8012a1e:	42b0      	cmp	r0, r6
 8012a20:	dbe7      	blt.n	80129f2 <__gethex+0x456>
 8012a22:	e7f0      	b.n	8012a06 <__gethex+0x46a>
 8012a24:	08016443 	.word	0x08016443

08012a28 <L_shift>:
 8012a28:	f1c2 0208 	rsb	r2, r2, #8
 8012a2c:	0092      	lsls	r2, r2, #2
 8012a2e:	b570      	push	{r4, r5, r6, lr}
 8012a30:	f1c2 0620 	rsb	r6, r2, #32
 8012a34:	6843      	ldr	r3, [r0, #4]
 8012a36:	6804      	ldr	r4, [r0, #0]
 8012a38:	fa03 f506 	lsl.w	r5, r3, r6
 8012a3c:	432c      	orrs	r4, r5
 8012a3e:	40d3      	lsrs	r3, r2
 8012a40:	6004      	str	r4, [r0, #0]
 8012a42:	f840 3f04 	str.w	r3, [r0, #4]!
 8012a46:	4288      	cmp	r0, r1
 8012a48:	d3f4      	bcc.n	8012a34 <L_shift+0xc>
 8012a4a:	bd70      	pop	{r4, r5, r6, pc}

08012a4c <__match>:
 8012a4c:	b530      	push	{r4, r5, lr}
 8012a4e:	6803      	ldr	r3, [r0, #0]
 8012a50:	3301      	adds	r3, #1
 8012a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a56:	b914      	cbnz	r4, 8012a5e <__match+0x12>
 8012a58:	6003      	str	r3, [r0, #0]
 8012a5a:	2001      	movs	r0, #1
 8012a5c:	bd30      	pop	{r4, r5, pc}
 8012a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012a66:	2d19      	cmp	r5, #25
 8012a68:	bf98      	it	ls
 8012a6a:	3220      	addls	r2, #32
 8012a6c:	42a2      	cmp	r2, r4
 8012a6e:	d0f0      	beq.n	8012a52 <__match+0x6>
 8012a70:	2000      	movs	r0, #0
 8012a72:	e7f3      	b.n	8012a5c <__match+0x10>

08012a74 <__hexnan>:
 8012a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a78:	680b      	ldr	r3, [r1, #0]
 8012a7a:	6801      	ldr	r1, [r0, #0]
 8012a7c:	115e      	asrs	r6, r3, #5
 8012a7e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012a82:	f013 031f 	ands.w	r3, r3, #31
 8012a86:	b087      	sub	sp, #28
 8012a88:	bf18      	it	ne
 8012a8a:	3604      	addne	r6, #4
 8012a8c:	2500      	movs	r5, #0
 8012a8e:	1f37      	subs	r7, r6, #4
 8012a90:	4682      	mov	sl, r0
 8012a92:	4690      	mov	r8, r2
 8012a94:	9301      	str	r3, [sp, #4]
 8012a96:	f846 5c04 	str.w	r5, [r6, #-4]
 8012a9a:	46b9      	mov	r9, r7
 8012a9c:	463c      	mov	r4, r7
 8012a9e:	9502      	str	r5, [sp, #8]
 8012aa0:	46ab      	mov	fp, r5
 8012aa2:	784a      	ldrb	r2, [r1, #1]
 8012aa4:	1c4b      	adds	r3, r1, #1
 8012aa6:	9303      	str	r3, [sp, #12]
 8012aa8:	b342      	cbz	r2, 8012afc <__hexnan+0x88>
 8012aaa:	4610      	mov	r0, r2
 8012aac:	9105      	str	r1, [sp, #20]
 8012aae:	9204      	str	r2, [sp, #16]
 8012ab0:	f7ff fd5f 	bl	8012572 <__hexdig_fun>
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	d14f      	bne.n	8012b58 <__hexnan+0xe4>
 8012ab8:	9a04      	ldr	r2, [sp, #16]
 8012aba:	9905      	ldr	r1, [sp, #20]
 8012abc:	2a20      	cmp	r2, #32
 8012abe:	d818      	bhi.n	8012af2 <__hexnan+0x7e>
 8012ac0:	9b02      	ldr	r3, [sp, #8]
 8012ac2:	459b      	cmp	fp, r3
 8012ac4:	dd13      	ble.n	8012aee <__hexnan+0x7a>
 8012ac6:	454c      	cmp	r4, r9
 8012ac8:	d206      	bcs.n	8012ad8 <__hexnan+0x64>
 8012aca:	2d07      	cmp	r5, #7
 8012acc:	dc04      	bgt.n	8012ad8 <__hexnan+0x64>
 8012ace:	462a      	mov	r2, r5
 8012ad0:	4649      	mov	r1, r9
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f7ff ffa8 	bl	8012a28 <L_shift>
 8012ad8:	4544      	cmp	r4, r8
 8012ada:	d950      	bls.n	8012b7e <__hexnan+0x10a>
 8012adc:	2300      	movs	r3, #0
 8012ade:	f1a4 0904 	sub.w	r9, r4, #4
 8012ae2:	f844 3c04 	str.w	r3, [r4, #-4]
 8012ae6:	f8cd b008 	str.w	fp, [sp, #8]
 8012aea:	464c      	mov	r4, r9
 8012aec:	461d      	mov	r5, r3
 8012aee:	9903      	ldr	r1, [sp, #12]
 8012af0:	e7d7      	b.n	8012aa2 <__hexnan+0x2e>
 8012af2:	2a29      	cmp	r2, #41	; 0x29
 8012af4:	d156      	bne.n	8012ba4 <__hexnan+0x130>
 8012af6:	3102      	adds	r1, #2
 8012af8:	f8ca 1000 	str.w	r1, [sl]
 8012afc:	f1bb 0f00 	cmp.w	fp, #0
 8012b00:	d050      	beq.n	8012ba4 <__hexnan+0x130>
 8012b02:	454c      	cmp	r4, r9
 8012b04:	d206      	bcs.n	8012b14 <__hexnan+0xa0>
 8012b06:	2d07      	cmp	r5, #7
 8012b08:	dc04      	bgt.n	8012b14 <__hexnan+0xa0>
 8012b0a:	462a      	mov	r2, r5
 8012b0c:	4649      	mov	r1, r9
 8012b0e:	4620      	mov	r0, r4
 8012b10:	f7ff ff8a 	bl	8012a28 <L_shift>
 8012b14:	4544      	cmp	r4, r8
 8012b16:	d934      	bls.n	8012b82 <__hexnan+0x10e>
 8012b18:	f1a8 0204 	sub.w	r2, r8, #4
 8012b1c:	4623      	mov	r3, r4
 8012b1e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012b22:	f842 1f04 	str.w	r1, [r2, #4]!
 8012b26:	429f      	cmp	r7, r3
 8012b28:	d2f9      	bcs.n	8012b1e <__hexnan+0xaa>
 8012b2a:	1b3b      	subs	r3, r7, r4
 8012b2c:	f023 0303 	bic.w	r3, r3, #3
 8012b30:	3304      	adds	r3, #4
 8012b32:	3401      	adds	r4, #1
 8012b34:	3e03      	subs	r6, #3
 8012b36:	42b4      	cmp	r4, r6
 8012b38:	bf88      	it	hi
 8012b3a:	2304      	movhi	r3, #4
 8012b3c:	4443      	add	r3, r8
 8012b3e:	2200      	movs	r2, #0
 8012b40:	f843 2b04 	str.w	r2, [r3], #4
 8012b44:	429f      	cmp	r7, r3
 8012b46:	d2fb      	bcs.n	8012b40 <__hexnan+0xcc>
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	b91b      	cbnz	r3, 8012b54 <__hexnan+0xe0>
 8012b4c:	4547      	cmp	r7, r8
 8012b4e:	d127      	bne.n	8012ba0 <__hexnan+0x12c>
 8012b50:	2301      	movs	r3, #1
 8012b52:	603b      	str	r3, [r7, #0]
 8012b54:	2005      	movs	r0, #5
 8012b56:	e026      	b.n	8012ba6 <__hexnan+0x132>
 8012b58:	3501      	adds	r5, #1
 8012b5a:	2d08      	cmp	r5, #8
 8012b5c:	f10b 0b01 	add.w	fp, fp, #1
 8012b60:	dd06      	ble.n	8012b70 <__hexnan+0xfc>
 8012b62:	4544      	cmp	r4, r8
 8012b64:	d9c3      	bls.n	8012aee <__hexnan+0x7a>
 8012b66:	2300      	movs	r3, #0
 8012b68:	f844 3c04 	str.w	r3, [r4, #-4]
 8012b6c:	2501      	movs	r5, #1
 8012b6e:	3c04      	subs	r4, #4
 8012b70:	6822      	ldr	r2, [r4, #0]
 8012b72:	f000 000f 	and.w	r0, r0, #15
 8012b76:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012b7a:	6022      	str	r2, [r4, #0]
 8012b7c:	e7b7      	b.n	8012aee <__hexnan+0x7a>
 8012b7e:	2508      	movs	r5, #8
 8012b80:	e7b5      	b.n	8012aee <__hexnan+0x7a>
 8012b82:	9b01      	ldr	r3, [sp, #4]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d0df      	beq.n	8012b48 <__hexnan+0xd4>
 8012b88:	f04f 32ff 	mov.w	r2, #4294967295
 8012b8c:	f1c3 0320 	rsb	r3, r3, #32
 8012b90:	fa22 f303 	lsr.w	r3, r2, r3
 8012b94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012b98:	401a      	ands	r2, r3
 8012b9a:	f846 2c04 	str.w	r2, [r6, #-4]
 8012b9e:	e7d3      	b.n	8012b48 <__hexnan+0xd4>
 8012ba0:	3f04      	subs	r7, #4
 8012ba2:	e7d1      	b.n	8012b48 <__hexnan+0xd4>
 8012ba4:	2004      	movs	r0, #4
 8012ba6:	b007      	add	sp, #28
 8012ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012bac <_localeconv_r>:
 8012bac:	4800      	ldr	r0, [pc, #0]	; (8012bb0 <_localeconv_r+0x4>)
 8012bae:	4770      	bx	lr
 8012bb0:	20000180 	.word	0x20000180

08012bb4 <__retarget_lock_init_recursive>:
 8012bb4:	4770      	bx	lr

08012bb6 <__retarget_lock_acquire_recursive>:
 8012bb6:	4770      	bx	lr

08012bb8 <__retarget_lock_release_recursive>:
 8012bb8:	4770      	bx	lr
	...

08012bbc <_lseek_r>:
 8012bbc:	b538      	push	{r3, r4, r5, lr}
 8012bbe:	4d07      	ldr	r5, [pc, #28]	; (8012bdc <_lseek_r+0x20>)
 8012bc0:	4604      	mov	r4, r0
 8012bc2:	4608      	mov	r0, r1
 8012bc4:	4611      	mov	r1, r2
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	602a      	str	r2, [r5, #0]
 8012bca:	461a      	mov	r2, r3
 8012bcc:	f7f1 feae 	bl	800492c <_lseek>
 8012bd0:	1c43      	adds	r3, r0, #1
 8012bd2:	d102      	bne.n	8012bda <_lseek_r+0x1e>
 8012bd4:	682b      	ldr	r3, [r5, #0]
 8012bd6:	b103      	cbz	r3, 8012bda <_lseek_r+0x1e>
 8012bd8:	6023      	str	r3, [r4, #0]
 8012bda:	bd38      	pop	{r3, r4, r5, pc}
 8012bdc:	20001a6c 	.word	0x20001a6c

08012be0 <__swhatbuf_r>:
 8012be0:	b570      	push	{r4, r5, r6, lr}
 8012be2:	460e      	mov	r6, r1
 8012be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012be8:	2900      	cmp	r1, #0
 8012bea:	b096      	sub	sp, #88	; 0x58
 8012bec:	4614      	mov	r4, r2
 8012bee:	461d      	mov	r5, r3
 8012bf0:	da07      	bge.n	8012c02 <__swhatbuf_r+0x22>
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	602b      	str	r3, [r5, #0]
 8012bf6:	89b3      	ldrh	r3, [r6, #12]
 8012bf8:	061a      	lsls	r2, r3, #24
 8012bfa:	d410      	bmi.n	8012c1e <__swhatbuf_r+0x3e>
 8012bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c00:	e00e      	b.n	8012c20 <__swhatbuf_r+0x40>
 8012c02:	466a      	mov	r2, sp
 8012c04:	f001 fc58 	bl	80144b8 <_fstat_r>
 8012c08:	2800      	cmp	r0, #0
 8012c0a:	dbf2      	blt.n	8012bf2 <__swhatbuf_r+0x12>
 8012c0c:	9a01      	ldr	r2, [sp, #4]
 8012c0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012c12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012c16:	425a      	negs	r2, r3
 8012c18:	415a      	adcs	r2, r3
 8012c1a:	602a      	str	r2, [r5, #0]
 8012c1c:	e7ee      	b.n	8012bfc <__swhatbuf_r+0x1c>
 8012c1e:	2340      	movs	r3, #64	; 0x40
 8012c20:	2000      	movs	r0, #0
 8012c22:	6023      	str	r3, [r4, #0]
 8012c24:	b016      	add	sp, #88	; 0x58
 8012c26:	bd70      	pop	{r4, r5, r6, pc}

08012c28 <__smakebuf_r>:
 8012c28:	898b      	ldrh	r3, [r1, #12]
 8012c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c2c:	079d      	lsls	r5, r3, #30
 8012c2e:	4606      	mov	r6, r0
 8012c30:	460c      	mov	r4, r1
 8012c32:	d507      	bpl.n	8012c44 <__smakebuf_r+0x1c>
 8012c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c38:	6023      	str	r3, [r4, #0]
 8012c3a:	6123      	str	r3, [r4, #16]
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	6163      	str	r3, [r4, #20]
 8012c40:	b002      	add	sp, #8
 8012c42:	bd70      	pop	{r4, r5, r6, pc}
 8012c44:	ab01      	add	r3, sp, #4
 8012c46:	466a      	mov	r2, sp
 8012c48:	f7ff ffca 	bl	8012be0 <__swhatbuf_r>
 8012c4c:	9900      	ldr	r1, [sp, #0]
 8012c4e:	4605      	mov	r5, r0
 8012c50:	4630      	mov	r0, r6
 8012c52:	f7fc fc03 	bl	800f45c <_malloc_r>
 8012c56:	b948      	cbnz	r0, 8012c6c <__smakebuf_r+0x44>
 8012c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c5c:	059a      	lsls	r2, r3, #22
 8012c5e:	d4ef      	bmi.n	8012c40 <__smakebuf_r+0x18>
 8012c60:	f023 0303 	bic.w	r3, r3, #3
 8012c64:	f043 0302 	orr.w	r3, r3, #2
 8012c68:	81a3      	strh	r3, [r4, #12]
 8012c6a:	e7e3      	b.n	8012c34 <__smakebuf_r+0xc>
 8012c6c:	4b0d      	ldr	r3, [pc, #52]	; (8012ca4 <__smakebuf_r+0x7c>)
 8012c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012c70:	89a3      	ldrh	r3, [r4, #12]
 8012c72:	6020      	str	r0, [r4, #0]
 8012c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c78:	81a3      	strh	r3, [r4, #12]
 8012c7a:	9b00      	ldr	r3, [sp, #0]
 8012c7c:	6163      	str	r3, [r4, #20]
 8012c7e:	9b01      	ldr	r3, [sp, #4]
 8012c80:	6120      	str	r0, [r4, #16]
 8012c82:	b15b      	cbz	r3, 8012c9c <__smakebuf_r+0x74>
 8012c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f001 fc27 	bl	80144dc <_isatty_r>
 8012c8e:	b128      	cbz	r0, 8012c9c <__smakebuf_r+0x74>
 8012c90:	89a3      	ldrh	r3, [r4, #12]
 8012c92:	f023 0303 	bic.w	r3, r3, #3
 8012c96:	f043 0301 	orr.w	r3, r3, #1
 8012c9a:	81a3      	strh	r3, [r4, #12]
 8012c9c:	89a0      	ldrh	r0, [r4, #12]
 8012c9e:	4305      	orrs	r5, r0
 8012ca0:	81a5      	strh	r5, [r4, #12]
 8012ca2:	e7cd      	b.n	8012c40 <__smakebuf_r+0x18>
 8012ca4:	0801232d 	.word	0x0801232d

08012ca8 <__ascii_mbtowc>:
 8012ca8:	b082      	sub	sp, #8
 8012caa:	b901      	cbnz	r1, 8012cae <__ascii_mbtowc+0x6>
 8012cac:	a901      	add	r1, sp, #4
 8012cae:	b142      	cbz	r2, 8012cc2 <__ascii_mbtowc+0x1a>
 8012cb0:	b14b      	cbz	r3, 8012cc6 <__ascii_mbtowc+0x1e>
 8012cb2:	7813      	ldrb	r3, [r2, #0]
 8012cb4:	600b      	str	r3, [r1, #0]
 8012cb6:	7812      	ldrb	r2, [r2, #0]
 8012cb8:	1e10      	subs	r0, r2, #0
 8012cba:	bf18      	it	ne
 8012cbc:	2001      	movne	r0, #1
 8012cbe:	b002      	add	sp, #8
 8012cc0:	4770      	bx	lr
 8012cc2:	4610      	mov	r0, r2
 8012cc4:	e7fb      	b.n	8012cbe <__ascii_mbtowc+0x16>
 8012cc6:	f06f 0001 	mvn.w	r0, #1
 8012cca:	e7f8      	b.n	8012cbe <__ascii_mbtowc+0x16>

08012ccc <__malloc_lock>:
 8012ccc:	4801      	ldr	r0, [pc, #4]	; (8012cd4 <__malloc_lock+0x8>)
 8012cce:	f7ff bf72 	b.w	8012bb6 <__retarget_lock_acquire_recursive>
 8012cd2:	bf00      	nop
 8012cd4:	20001a64 	.word	0x20001a64

08012cd8 <__malloc_unlock>:
 8012cd8:	4801      	ldr	r0, [pc, #4]	; (8012ce0 <__malloc_unlock+0x8>)
 8012cda:	f7ff bf6d 	b.w	8012bb8 <__retarget_lock_release_recursive>
 8012cde:	bf00      	nop
 8012ce0:	20001a64 	.word	0x20001a64

08012ce4 <_Balloc>:
 8012ce4:	b570      	push	{r4, r5, r6, lr}
 8012ce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012ce8:	4604      	mov	r4, r0
 8012cea:	460d      	mov	r5, r1
 8012cec:	b976      	cbnz	r6, 8012d0c <_Balloc+0x28>
 8012cee:	2010      	movs	r0, #16
 8012cf0:	f7fc fb46 	bl	800f380 <malloc>
 8012cf4:	4602      	mov	r2, r0
 8012cf6:	6260      	str	r0, [r4, #36]	; 0x24
 8012cf8:	b920      	cbnz	r0, 8012d04 <_Balloc+0x20>
 8012cfa:	4b18      	ldr	r3, [pc, #96]	; (8012d5c <_Balloc+0x78>)
 8012cfc:	4818      	ldr	r0, [pc, #96]	; (8012d60 <_Balloc+0x7c>)
 8012cfe:	2166      	movs	r1, #102	; 0x66
 8012d00:	f001 fbaa 	bl	8014458 <__assert_func>
 8012d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d08:	6006      	str	r6, [r0, #0]
 8012d0a:	60c6      	str	r6, [r0, #12]
 8012d0c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d0e:	68f3      	ldr	r3, [r6, #12]
 8012d10:	b183      	cbz	r3, 8012d34 <_Balloc+0x50>
 8012d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d14:	68db      	ldr	r3, [r3, #12]
 8012d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012d1a:	b9b8      	cbnz	r0, 8012d4c <_Balloc+0x68>
 8012d1c:	2101      	movs	r1, #1
 8012d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8012d22:	1d72      	adds	r2, r6, #5
 8012d24:	0092      	lsls	r2, r2, #2
 8012d26:	4620      	mov	r0, r4
 8012d28:	f000 fc97 	bl	801365a <_calloc_r>
 8012d2c:	b160      	cbz	r0, 8012d48 <_Balloc+0x64>
 8012d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d32:	e00e      	b.n	8012d52 <_Balloc+0x6e>
 8012d34:	2221      	movs	r2, #33	; 0x21
 8012d36:	2104      	movs	r1, #4
 8012d38:	4620      	mov	r0, r4
 8012d3a:	f000 fc8e 	bl	801365a <_calloc_r>
 8012d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d40:	60f0      	str	r0, [r6, #12]
 8012d42:	68db      	ldr	r3, [r3, #12]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d1e4      	bne.n	8012d12 <_Balloc+0x2e>
 8012d48:	2000      	movs	r0, #0
 8012d4a:	bd70      	pop	{r4, r5, r6, pc}
 8012d4c:	6802      	ldr	r2, [r0, #0]
 8012d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d52:	2300      	movs	r3, #0
 8012d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d58:	e7f7      	b.n	8012d4a <_Balloc+0x66>
 8012d5a:	bf00      	nop
 8012d5c:	080163cd 	.word	0x080163cd
 8012d60:	08016534 	.word	0x08016534

08012d64 <_Bfree>:
 8012d64:	b570      	push	{r4, r5, r6, lr}
 8012d66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012d68:	4605      	mov	r5, r0
 8012d6a:	460c      	mov	r4, r1
 8012d6c:	b976      	cbnz	r6, 8012d8c <_Bfree+0x28>
 8012d6e:	2010      	movs	r0, #16
 8012d70:	f7fc fb06 	bl	800f380 <malloc>
 8012d74:	4602      	mov	r2, r0
 8012d76:	6268      	str	r0, [r5, #36]	; 0x24
 8012d78:	b920      	cbnz	r0, 8012d84 <_Bfree+0x20>
 8012d7a:	4b09      	ldr	r3, [pc, #36]	; (8012da0 <_Bfree+0x3c>)
 8012d7c:	4809      	ldr	r0, [pc, #36]	; (8012da4 <_Bfree+0x40>)
 8012d7e:	218a      	movs	r1, #138	; 0x8a
 8012d80:	f001 fb6a 	bl	8014458 <__assert_func>
 8012d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d88:	6006      	str	r6, [r0, #0]
 8012d8a:	60c6      	str	r6, [r0, #12]
 8012d8c:	b13c      	cbz	r4, 8012d9e <_Bfree+0x3a>
 8012d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012d90:	6862      	ldr	r2, [r4, #4]
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d98:	6021      	str	r1, [r4, #0]
 8012d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d9e:	bd70      	pop	{r4, r5, r6, pc}
 8012da0:	080163cd 	.word	0x080163cd
 8012da4:	08016534 	.word	0x08016534

08012da8 <__multadd>:
 8012da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dac:	690e      	ldr	r6, [r1, #16]
 8012dae:	4607      	mov	r7, r0
 8012db0:	4698      	mov	r8, r3
 8012db2:	460c      	mov	r4, r1
 8012db4:	f101 0014 	add.w	r0, r1, #20
 8012db8:	2300      	movs	r3, #0
 8012dba:	6805      	ldr	r5, [r0, #0]
 8012dbc:	b2a9      	uxth	r1, r5
 8012dbe:	fb02 8101 	mla	r1, r2, r1, r8
 8012dc2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012dc6:	0c2d      	lsrs	r5, r5, #16
 8012dc8:	fb02 c505 	mla	r5, r2, r5, ip
 8012dcc:	b289      	uxth	r1, r1
 8012dce:	3301      	adds	r3, #1
 8012dd0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012dd4:	429e      	cmp	r6, r3
 8012dd6:	f840 1b04 	str.w	r1, [r0], #4
 8012dda:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012dde:	dcec      	bgt.n	8012dba <__multadd+0x12>
 8012de0:	f1b8 0f00 	cmp.w	r8, #0
 8012de4:	d022      	beq.n	8012e2c <__multadd+0x84>
 8012de6:	68a3      	ldr	r3, [r4, #8]
 8012de8:	42b3      	cmp	r3, r6
 8012dea:	dc19      	bgt.n	8012e20 <__multadd+0x78>
 8012dec:	6861      	ldr	r1, [r4, #4]
 8012dee:	4638      	mov	r0, r7
 8012df0:	3101      	adds	r1, #1
 8012df2:	f7ff ff77 	bl	8012ce4 <_Balloc>
 8012df6:	4605      	mov	r5, r0
 8012df8:	b928      	cbnz	r0, 8012e06 <__multadd+0x5e>
 8012dfa:	4602      	mov	r2, r0
 8012dfc:	4b0d      	ldr	r3, [pc, #52]	; (8012e34 <__multadd+0x8c>)
 8012dfe:	480e      	ldr	r0, [pc, #56]	; (8012e38 <__multadd+0x90>)
 8012e00:	21b5      	movs	r1, #181	; 0xb5
 8012e02:	f001 fb29 	bl	8014458 <__assert_func>
 8012e06:	6922      	ldr	r2, [r4, #16]
 8012e08:	3202      	adds	r2, #2
 8012e0a:	f104 010c 	add.w	r1, r4, #12
 8012e0e:	0092      	lsls	r2, r2, #2
 8012e10:	300c      	adds	r0, #12
 8012e12:	f7fc fabd 	bl	800f390 <memcpy>
 8012e16:	4621      	mov	r1, r4
 8012e18:	4638      	mov	r0, r7
 8012e1a:	f7ff ffa3 	bl	8012d64 <_Bfree>
 8012e1e:	462c      	mov	r4, r5
 8012e20:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012e24:	3601      	adds	r6, #1
 8012e26:	f8c3 8014 	str.w	r8, [r3, #20]
 8012e2a:	6126      	str	r6, [r4, #16]
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e32:	bf00      	nop
 8012e34:	08016443 	.word	0x08016443
 8012e38:	08016534 	.word	0x08016534

08012e3c <__s2b>:
 8012e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e40:	460c      	mov	r4, r1
 8012e42:	4615      	mov	r5, r2
 8012e44:	461f      	mov	r7, r3
 8012e46:	2209      	movs	r2, #9
 8012e48:	3308      	adds	r3, #8
 8012e4a:	4606      	mov	r6, r0
 8012e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e50:	2100      	movs	r1, #0
 8012e52:	2201      	movs	r2, #1
 8012e54:	429a      	cmp	r2, r3
 8012e56:	db09      	blt.n	8012e6c <__s2b+0x30>
 8012e58:	4630      	mov	r0, r6
 8012e5a:	f7ff ff43 	bl	8012ce4 <_Balloc>
 8012e5e:	b940      	cbnz	r0, 8012e72 <__s2b+0x36>
 8012e60:	4602      	mov	r2, r0
 8012e62:	4b19      	ldr	r3, [pc, #100]	; (8012ec8 <__s2b+0x8c>)
 8012e64:	4819      	ldr	r0, [pc, #100]	; (8012ecc <__s2b+0x90>)
 8012e66:	21ce      	movs	r1, #206	; 0xce
 8012e68:	f001 faf6 	bl	8014458 <__assert_func>
 8012e6c:	0052      	lsls	r2, r2, #1
 8012e6e:	3101      	adds	r1, #1
 8012e70:	e7f0      	b.n	8012e54 <__s2b+0x18>
 8012e72:	9b08      	ldr	r3, [sp, #32]
 8012e74:	6143      	str	r3, [r0, #20]
 8012e76:	2d09      	cmp	r5, #9
 8012e78:	f04f 0301 	mov.w	r3, #1
 8012e7c:	6103      	str	r3, [r0, #16]
 8012e7e:	dd16      	ble.n	8012eae <__s2b+0x72>
 8012e80:	f104 0909 	add.w	r9, r4, #9
 8012e84:	46c8      	mov	r8, r9
 8012e86:	442c      	add	r4, r5
 8012e88:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e8c:	4601      	mov	r1, r0
 8012e8e:	3b30      	subs	r3, #48	; 0x30
 8012e90:	220a      	movs	r2, #10
 8012e92:	4630      	mov	r0, r6
 8012e94:	f7ff ff88 	bl	8012da8 <__multadd>
 8012e98:	45a0      	cmp	r8, r4
 8012e9a:	d1f5      	bne.n	8012e88 <__s2b+0x4c>
 8012e9c:	f1a5 0408 	sub.w	r4, r5, #8
 8012ea0:	444c      	add	r4, r9
 8012ea2:	1b2d      	subs	r5, r5, r4
 8012ea4:	1963      	adds	r3, r4, r5
 8012ea6:	42bb      	cmp	r3, r7
 8012ea8:	db04      	blt.n	8012eb4 <__s2b+0x78>
 8012eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eae:	340a      	adds	r4, #10
 8012eb0:	2509      	movs	r5, #9
 8012eb2:	e7f6      	b.n	8012ea2 <__s2b+0x66>
 8012eb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012eb8:	4601      	mov	r1, r0
 8012eba:	3b30      	subs	r3, #48	; 0x30
 8012ebc:	220a      	movs	r2, #10
 8012ebe:	4630      	mov	r0, r6
 8012ec0:	f7ff ff72 	bl	8012da8 <__multadd>
 8012ec4:	e7ee      	b.n	8012ea4 <__s2b+0x68>
 8012ec6:	bf00      	nop
 8012ec8:	08016443 	.word	0x08016443
 8012ecc:	08016534 	.word	0x08016534

08012ed0 <__hi0bits>:
 8012ed0:	0c03      	lsrs	r3, r0, #16
 8012ed2:	041b      	lsls	r3, r3, #16
 8012ed4:	b9d3      	cbnz	r3, 8012f0c <__hi0bits+0x3c>
 8012ed6:	0400      	lsls	r0, r0, #16
 8012ed8:	2310      	movs	r3, #16
 8012eda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012ede:	bf04      	itt	eq
 8012ee0:	0200      	lsleq	r0, r0, #8
 8012ee2:	3308      	addeq	r3, #8
 8012ee4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ee8:	bf04      	itt	eq
 8012eea:	0100      	lsleq	r0, r0, #4
 8012eec:	3304      	addeq	r3, #4
 8012eee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012ef2:	bf04      	itt	eq
 8012ef4:	0080      	lsleq	r0, r0, #2
 8012ef6:	3302      	addeq	r3, #2
 8012ef8:	2800      	cmp	r0, #0
 8012efa:	db05      	blt.n	8012f08 <__hi0bits+0x38>
 8012efc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012f00:	f103 0301 	add.w	r3, r3, #1
 8012f04:	bf08      	it	eq
 8012f06:	2320      	moveq	r3, #32
 8012f08:	4618      	mov	r0, r3
 8012f0a:	4770      	bx	lr
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	e7e4      	b.n	8012eda <__hi0bits+0xa>

08012f10 <__lo0bits>:
 8012f10:	6803      	ldr	r3, [r0, #0]
 8012f12:	f013 0207 	ands.w	r2, r3, #7
 8012f16:	4601      	mov	r1, r0
 8012f18:	d00b      	beq.n	8012f32 <__lo0bits+0x22>
 8012f1a:	07da      	lsls	r2, r3, #31
 8012f1c:	d424      	bmi.n	8012f68 <__lo0bits+0x58>
 8012f1e:	0798      	lsls	r0, r3, #30
 8012f20:	bf49      	itett	mi
 8012f22:	085b      	lsrmi	r3, r3, #1
 8012f24:	089b      	lsrpl	r3, r3, #2
 8012f26:	2001      	movmi	r0, #1
 8012f28:	600b      	strmi	r3, [r1, #0]
 8012f2a:	bf5c      	itt	pl
 8012f2c:	600b      	strpl	r3, [r1, #0]
 8012f2e:	2002      	movpl	r0, #2
 8012f30:	4770      	bx	lr
 8012f32:	b298      	uxth	r0, r3
 8012f34:	b9b0      	cbnz	r0, 8012f64 <__lo0bits+0x54>
 8012f36:	0c1b      	lsrs	r3, r3, #16
 8012f38:	2010      	movs	r0, #16
 8012f3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012f3e:	bf04      	itt	eq
 8012f40:	0a1b      	lsreq	r3, r3, #8
 8012f42:	3008      	addeq	r0, #8
 8012f44:	071a      	lsls	r2, r3, #28
 8012f46:	bf04      	itt	eq
 8012f48:	091b      	lsreq	r3, r3, #4
 8012f4a:	3004      	addeq	r0, #4
 8012f4c:	079a      	lsls	r2, r3, #30
 8012f4e:	bf04      	itt	eq
 8012f50:	089b      	lsreq	r3, r3, #2
 8012f52:	3002      	addeq	r0, #2
 8012f54:	07da      	lsls	r2, r3, #31
 8012f56:	d403      	bmi.n	8012f60 <__lo0bits+0x50>
 8012f58:	085b      	lsrs	r3, r3, #1
 8012f5a:	f100 0001 	add.w	r0, r0, #1
 8012f5e:	d005      	beq.n	8012f6c <__lo0bits+0x5c>
 8012f60:	600b      	str	r3, [r1, #0]
 8012f62:	4770      	bx	lr
 8012f64:	4610      	mov	r0, r2
 8012f66:	e7e8      	b.n	8012f3a <__lo0bits+0x2a>
 8012f68:	2000      	movs	r0, #0
 8012f6a:	4770      	bx	lr
 8012f6c:	2020      	movs	r0, #32
 8012f6e:	4770      	bx	lr

08012f70 <__i2b>:
 8012f70:	b510      	push	{r4, lr}
 8012f72:	460c      	mov	r4, r1
 8012f74:	2101      	movs	r1, #1
 8012f76:	f7ff feb5 	bl	8012ce4 <_Balloc>
 8012f7a:	4602      	mov	r2, r0
 8012f7c:	b928      	cbnz	r0, 8012f8a <__i2b+0x1a>
 8012f7e:	4b05      	ldr	r3, [pc, #20]	; (8012f94 <__i2b+0x24>)
 8012f80:	4805      	ldr	r0, [pc, #20]	; (8012f98 <__i2b+0x28>)
 8012f82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012f86:	f001 fa67 	bl	8014458 <__assert_func>
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	6144      	str	r4, [r0, #20]
 8012f8e:	6103      	str	r3, [r0, #16]
 8012f90:	bd10      	pop	{r4, pc}
 8012f92:	bf00      	nop
 8012f94:	08016443 	.word	0x08016443
 8012f98:	08016534 	.word	0x08016534

08012f9c <__multiply>:
 8012f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fa0:	4614      	mov	r4, r2
 8012fa2:	690a      	ldr	r2, [r1, #16]
 8012fa4:	6923      	ldr	r3, [r4, #16]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	bfb8      	it	lt
 8012faa:	460b      	movlt	r3, r1
 8012fac:	460d      	mov	r5, r1
 8012fae:	bfbc      	itt	lt
 8012fb0:	4625      	movlt	r5, r4
 8012fb2:	461c      	movlt	r4, r3
 8012fb4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012fb8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012fbc:	68ab      	ldr	r3, [r5, #8]
 8012fbe:	6869      	ldr	r1, [r5, #4]
 8012fc0:	eb0a 0709 	add.w	r7, sl, r9
 8012fc4:	42bb      	cmp	r3, r7
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	bfb8      	it	lt
 8012fca:	3101      	addlt	r1, #1
 8012fcc:	f7ff fe8a 	bl	8012ce4 <_Balloc>
 8012fd0:	b930      	cbnz	r0, 8012fe0 <__multiply+0x44>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	4b42      	ldr	r3, [pc, #264]	; (80130e0 <__multiply+0x144>)
 8012fd6:	4843      	ldr	r0, [pc, #268]	; (80130e4 <__multiply+0x148>)
 8012fd8:	f240 115d 	movw	r1, #349	; 0x15d
 8012fdc:	f001 fa3c 	bl	8014458 <__assert_func>
 8012fe0:	f100 0614 	add.w	r6, r0, #20
 8012fe4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8012fe8:	4633      	mov	r3, r6
 8012fea:	2200      	movs	r2, #0
 8012fec:	4543      	cmp	r3, r8
 8012fee:	d31e      	bcc.n	801302e <__multiply+0x92>
 8012ff0:	f105 0c14 	add.w	ip, r5, #20
 8012ff4:	f104 0314 	add.w	r3, r4, #20
 8012ff8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8012ffc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8013000:	9202      	str	r2, [sp, #8]
 8013002:	ebac 0205 	sub.w	r2, ip, r5
 8013006:	3a15      	subs	r2, #21
 8013008:	f022 0203 	bic.w	r2, r2, #3
 801300c:	3204      	adds	r2, #4
 801300e:	f105 0115 	add.w	r1, r5, #21
 8013012:	458c      	cmp	ip, r1
 8013014:	bf38      	it	cc
 8013016:	2204      	movcc	r2, #4
 8013018:	9201      	str	r2, [sp, #4]
 801301a:	9a02      	ldr	r2, [sp, #8]
 801301c:	9303      	str	r3, [sp, #12]
 801301e:	429a      	cmp	r2, r3
 8013020:	d808      	bhi.n	8013034 <__multiply+0x98>
 8013022:	2f00      	cmp	r7, #0
 8013024:	dc55      	bgt.n	80130d2 <__multiply+0x136>
 8013026:	6107      	str	r7, [r0, #16]
 8013028:	b005      	add	sp, #20
 801302a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801302e:	f843 2b04 	str.w	r2, [r3], #4
 8013032:	e7db      	b.n	8012fec <__multiply+0x50>
 8013034:	f8b3 a000 	ldrh.w	sl, [r3]
 8013038:	f1ba 0f00 	cmp.w	sl, #0
 801303c:	d020      	beq.n	8013080 <__multiply+0xe4>
 801303e:	f105 0e14 	add.w	lr, r5, #20
 8013042:	46b1      	mov	r9, r6
 8013044:	2200      	movs	r2, #0
 8013046:	f85e 4b04 	ldr.w	r4, [lr], #4
 801304a:	f8d9 b000 	ldr.w	fp, [r9]
 801304e:	b2a1      	uxth	r1, r4
 8013050:	fa1f fb8b 	uxth.w	fp, fp
 8013054:	fb0a b101 	mla	r1, sl, r1, fp
 8013058:	4411      	add	r1, r2
 801305a:	f8d9 2000 	ldr.w	r2, [r9]
 801305e:	0c24      	lsrs	r4, r4, #16
 8013060:	0c12      	lsrs	r2, r2, #16
 8013062:	fb0a 2404 	mla	r4, sl, r4, r2
 8013066:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801306a:	b289      	uxth	r1, r1
 801306c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8013070:	45f4      	cmp	ip, lr
 8013072:	f849 1b04 	str.w	r1, [r9], #4
 8013076:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801307a:	d8e4      	bhi.n	8013046 <__multiply+0xaa>
 801307c:	9901      	ldr	r1, [sp, #4]
 801307e:	5072      	str	r2, [r6, r1]
 8013080:	9a03      	ldr	r2, [sp, #12]
 8013082:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013086:	3304      	adds	r3, #4
 8013088:	f1b9 0f00 	cmp.w	r9, #0
 801308c:	d01f      	beq.n	80130ce <__multiply+0x132>
 801308e:	6834      	ldr	r4, [r6, #0]
 8013090:	f105 0114 	add.w	r1, r5, #20
 8013094:	46b6      	mov	lr, r6
 8013096:	f04f 0a00 	mov.w	sl, #0
 801309a:	880a      	ldrh	r2, [r1, #0]
 801309c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80130a0:	fb09 b202 	mla	r2, r9, r2, fp
 80130a4:	4492      	add	sl, r2
 80130a6:	b2a4      	uxth	r4, r4
 80130a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80130ac:	f84e 4b04 	str.w	r4, [lr], #4
 80130b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80130b4:	f8be 2000 	ldrh.w	r2, [lr]
 80130b8:	0c24      	lsrs	r4, r4, #16
 80130ba:	fb09 2404 	mla	r4, r9, r4, r2
 80130be:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80130c2:	458c      	cmp	ip, r1
 80130c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80130c8:	d8e7      	bhi.n	801309a <__multiply+0xfe>
 80130ca:	9a01      	ldr	r2, [sp, #4]
 80130cc:	50b4      	str	r4, [r6, r2]
 80130ce:	3604      	adds	r6, #4
 80130d0:	e7a3      	b.n	801301a <__multiply+0x7e>
 80130d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d1a5      	bne.n	8013026 <__multiply+0x8a>
 80130da:	3f01      	subs	r7, #1
 80130dc:	e7a1      	b.n	8013022 <__multiply+0x86>
 80130de:	bf00      	nop
 80130e0:	08016443 	.word	0x08016443
 80130e4:	08016534 	.word	0x08016534

080130e8 <__pow5mult>:
 80130e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130ec:	4615      	mov	r5, r2
 80130ee:	f012 0203 	ands.w	r2, r2, #3
 80130f2:	4606      	mov	r6, r0
 80130f4:	460f      	mov	r7, r1
 80130f6:	d007      	beq.n	8013108 <__pow5mult+0x20>
 80130f8:	4c25      	ldr	r4, [pc, #148]	; (8013190 <__pow5mult+0xa8>)
 80130fa:	3a01      	subs	r2, #1
 80130fc:	2300      	movs	r3, #0
 80130fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013102:	f7ff fe51 	bl	8012da8 <__multadd>
 8013106:	4607      	mov	r7, r0
 8013108:	10ad      	asrs	r5, r5, #2
 801310a:	d03d      	beq.n	8013188 <__pow5mult+0xa0>
 801310c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801310e:	b97c      	cbnz	r4, 8013130 <__pow5mult+0x48>
 8013110:	2010      	movs	r0, #16
 8013112:	f7fc f935 	bl	800f380 <malloc>
 8013116:	4602      	mov	r2, r0
 8013118:	6270      	str	r0, [r6, #36]	; 0x24
 801311a:	b928      	cbnz	r0, 8013128 <__pow5mult+0x40>
 801311c:	4b1d      	ldr	r3, [pc, #116]	; (8013194 <__pow5mult+0xac>)
 801311e:	481e      	ldr	r0, [pc, #120]	; (8013198 <__pow5mult+0xb0>)
 8013120:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013124:	f001 f998 	bl	8014458 <__assert_func>
 8013128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801312c:	6004      	str	r4, [r0, #0]
 801312e:	60c4      	str	r4, [r0, #12]
 8013130:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013138:	b94c      	cbnz	r4, 801314e <__pow5mult+0x66>
 801313a:	f240 2171 	movw	r1, #625	; 0x271
 801313e:	4630      	mov	r0, r6
 8013140:	f7ff ff16 	bl	8012f70 <__i2b>
 8013144:	2300      	movs	r3, #0
 8013146:	f8c8 0008 	str.w	r0, [r8, #8]
 801314a:	4604      	mov	r4, r0
 801314c:	6003      	str	r3, [r0, #0]
 801314e:	f04f 0900 	mov.w	r9, #0
 8013152:	07eb      	lsls	r3, r5, #31
 8013154:	d50a      	bpl.n	801316c <__pow5mult+0x84>
 8013156:	4639      	mov	r1, r7
 8013158:	4622      	mov	r2, r4
 801315a:	4630      	mov	r0, r6
 801315c:	f7ff ff1e 	bl	8012f9c <__multiply>
 8013160:	4639      	mov	r1, r7
 8013162:	4680      	mov	r8, r0
 8013164:	4630      	mov	r0, r6
 8013166:	f7ff fdfd 	bl	8012d64 <_Bfree>
 801316a:	4647      	mov	r7, r8
 801316c:	106d      	asrs	r5, r5, #1
 801316e:	d00b      	beq.n	8013188 <__pow5mult+0xa0>
 8013170:	6820      	ldr	r0, [r4, #0]
 8013172:	b938      	cbnz	r0, 8013184 <__pow5mult+0x9c>
 8013174:	4622      	mov	r2, r4
 8013176:	4621      	mov	r1, r4
 8013178:	4630      	mov	r0, r6
 801317a:	f7ff ff0f 	bl	8012f9c <__multiply>
 801317e:	6020      	str	r0, [r4, #0]
 8013180:	f8c0 9000 	str.w	r9, [r0]
 8013184:	4604      	mov	r4, r0
 8013186:	e7e4      	b.n	8013152 <__pow5mult+0x6a>
 8013188:	4638      	mov	r0, r7
 801318a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801318e:	bf00      	nop
 8013190:	08016688 	.word	0x08016688
 8013194:	080163cd 	.word	0x080163cd
 8013198:	08016534 	.word	0x08016534

0801319c <__lshift>:
 801319c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131a0:	460c      	mov	r4, r1
 80131a2:	6849      	ldr	r1, [r1, #4]
 80131a4:	6923      	ldr	r3, [r4, #16]
 80131a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80131aa:	68a3      	ldr	r3, [r4, #8]
 80131ac:	4607      	mov	r7, r0
 80131ae:	4691      	mov	r9, r2
 80131b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80131b4:	f108 0601 	add.w	r6, r8, #1
 80131b8:	42b3      	cmp	r3, r6
 80131ba:	db0b      	blt.n	80131d4 <__lshift+0x38>
 80131bc:	4638      	mov	r0, r7
 80131be:	f7ff fd91 	bl	8012ce4 <_Balloc>
 80131c2:	4605      	mov	r5, r0
 80131c4:	b948      	cbnz	r0, 80131da <__lshift+0x3e>
 80131c6:	4602      	mov	r2, r0
 80131c8:	4b28      	ldr	r3, [pc, #160]	; (801326c <__lshift+0xd0>)
 80131ca:	4829      	ldr	r0, [pc, #164]	; (8013270 <__lshift+0xd4>)
 80131cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80131d0:	f001 f942 	bl	8014458 <__assert_func>
 80131d4:	3101      	adds	r1, #1
 80131d6:	005b      	lsls	r3, r3, #1
 80131d8:	e7ee      	b.n	80131b8 <__lshift+0x1c>
 80131da:	2300      	movs	r3, #0
 80131dc:	f100 0114 	add.w	r1, r0, #20
 80131e0:	f100 0210 	add.w	r2, r0, #16
 80131e4:	4618      	mov	r0, r3
 80131e6:	4553      	cmp	r3, sl
 80131e8:	db33      	blt.n	8013252 <__lshift+0xb6>
 80131ea:	6920      	ldr	r0, [r4, #16]
 80131ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131f0:	f104 0314 	add.w	r3, r4, #20
 80131f4:	f019 091f 	ands.w	r9, r9, #31
 80131f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013200:	d02b      	beq.n	801325a <__lshift+0xbe>
 8013202:	f1c9 0e20 	rsb	lr, r9, #32
 8013206:	468a      	mov	sl, r1
 8013208:	2200      	movs	r2, #0
 801320a:	6818      	ldr	r0, [r3, #0]
 801320c:	fa00 f009 	lsl.w	r0, r0, r9
 8013210:	4302      	orrs	r2, r0
 8013212:	f84a 2b04 	str.w	r2, [sl], #4
 8013216:	f853 2b04 	ldr.w	r2, [r3], #4
 801321a:	459c      	cmp	ip, r3
 801321c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013220:	d8f3      	bhi.n	801320a <__lshift+0x6e>
 8013222:	ebac 0304 	sub.w	r3, ip, r4
 8013226:	3b15      	subs	r3, #21
 8013228:	f023 0303 	bic.w	r3, r3, #3
 801322c:	3304      	adds	r3, #4
 801322e:	f104 0015 	add.w	r0, r4, #21
 8013232:	4584      	cmp	ip, r0
 8013234:	bf38      	it	cc
 8013236:	2304      	movcc	r3, #4
 8013238:	50ca      	str	r2, [r1, r3]
 801323a:	b10a      	cbz	r2, 8013240 <__lshift+0xa4>
 801323c:	f108 0602 	add.w	r6, r8, #2
 8013240:	3e01      	subs	r6, #1
 8013242:	4638      	mov	r0, r7
 8013244:	612e      	str	r6, [r5, #16]
 8013246:	4621      	mov	r1, r4
 8013248:	f7ff fd8c 	bl	8012d64 <_Bfree>
 801324c:	4628      	mov	r0, r5
 801324e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013252:	f842 0f04 	str.w	r0, [r2, #4]!
 8013256:	3301      	adds	r3, #1
 8013258:	e7c5      	b.n	80131e6 <__lshift+0x4a>
 801325a:	3904      	subs	r1, #4
 801325c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013260:	f841 2f04 	str.w	r2, [r1, #4]!
 8013264:	459c      	cmp	ip, r3
 8013266:	d8f9      	bhi.n	801325c <__lshift+0xc0>
 8013268:	e7ea      	b.n	8013240 <__lshift+0xa4>
 801326a:	bf00      	nop
 801326c:	08016443 	.word	0x08016443
 8013270:	08016534 	.word	0x08016534

08013274 <__mcmp>:
 8013274:	b530      	push	{r4, r5, lr}
 8013276:	6902      	ldr	r2, [r0, #16]
 8013278:	690c      	ldr	r4, [r1, #16]
 801327a:	1b12      	subs	r2, r2, r4
 801327c:	d10e      	bne.n	801329c <__mcmp+0x28>
 801327e:	f100 0314 	add.w	r3, r0, #20
 8013282:	3114      	adds	r1, #20
 8013284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801328c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013294:	42a5      	cmp	r5, r4
 8013296:	d003      	beq.n	80132a0 <__mcmp+0x2c>
 8013298:	d305      	bcc.n	80132a6 <__mcmp+0x32>
 801329a:	2201      	movs	r2, #1
 801329c:	4610      	mov	r0, r2
 801329e:	bd30      	pop	{r4, r5, pc}
 80132a0:	4283      	cmp	r3, r0
 80132a2:	d3f3      	bcc.n	801328c <__mcmp+0x18>
 80132a4:	e7fa      	b.n	801329c <__mcmp+0x28>
 80132a6:	f04f 32ff 	mov.w	r2, #4294967295
 80132aa:	e7f7      	b.n	801329c <__mcmp+0x28>

080132ac <__mdiff>:
 80132ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132b0:	460c      	mov	r4, r1
 80132b2:	4606      	mov	r6, r0
 80132b4:	4611      	mov	r1, r2
 80132b6:	4620      	mov	r0, r4
 80132b8:	4617      	mov	r7, r2
 80132ba:	f7ff ffdb 	bl	8013274 <__mcmp>
 80132be:	1e05      	subs	r5, r0, #0
 80132c0:	d110      	bne.n	80132e4 <__mdiff+0x38>
 80132c2:	4629      	mov	r1, r5
 80132c4:	4630      	mov	r0, r6
 80132c6:	f7ff fd0d 	bl	8012ce4 <_Balloc>
 80132ca:	b930      	cbnz	r0, 80132da <__mdiff+0x2e>
 80132cc:	4b39      	ldr	r3, [pc, #228]	; (80133b4 <__mdiff+0x108>)
 80132ce:	4602      	mov	r2, r0
 80132d0:	f240 2132 	movw	r1, #562	; 0x232
 80132d4:	4838      	ldr	r0, [pc, #224]	; (80133b8 <__mdiff+0x10c>)
 80132d6:	f001 f8bf 	bl	8014458 <__assert_func>
 80132da:	2301      	movs	r3, #1
 80132dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132e4:	bfa4      	itt	ge
 80132e6:	463b      	movge	r3, r7
 80132e8:	4627      	movge	r7, r4
 80132ea:	4630      	mov	r0, r6
 80132ec:	6879      	ldr	r1, [r7, #4]
 80132ee:	bfa6      	itte	ge
 80132f0:	461c      	movge	r4, r3
 80132f2:	2500      	movge	r5, #0
 80132f4:	2501      	movlt	r5, #1
 80132f6:	f7ff fcf5 	bl	8012ce4 <_Balloc>
 80132fa:	b920      	cbnz	r0, 8013306 <__mdiff+0x5a>
 80132fc:	4b2d      	ldr	r3, [pc, #180]	; (80133b4 <__mdiff+0x108>)
 80132fe:	4602      	mov	r2, r0
 8013300:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013304:	e7e6      	b.n	80132d4 <__mdiff+0x28>
 8013306:	693e      	ldr	r6, [r7, #16]
 8013308:	60c5      	str	r5, [r0, #12]
 801330a:	6925      	ldr	r5, [r4, #16]
 801330c:	f107 0114 	add.w	r1, r7, #20
 8013310:	f104 0914 	add.w	r9, r4, #20
 8013314:	f100 0e14 	add.w	lr, r0, #20
 8013318:	f107 0210 	add.w	r2, r7, #16
 801331c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8013320:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8013324:	46f2      	mov	sl, lr
 8013326:	2700      	movs	r7, #0
 8013328:	f859 3b04 	ldr.w	r3, [r9], #4
 801332c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013330:	fa1f f883 	uxth.w	r8, r3
 8013334:	fa17 f78b 	uxtah	r7, r7, fp
 8013338:	0c1b      	lsrs	r3, r3, #16
 801333a:	eba7 0808 	sub.w	r8, r7, r8
 801333e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013342:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013346:	fa1f f888 	uxth.w	r8, r8
 801334a:	141f      	asrs	r7, r3, #16
 801334c:	454d      	cmp	r5, r9
 801334e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013352:	f84a 3b04 	str.w	r3, [sl], #4
 8013356:	d8e7      	bhi.n	8013328 <__mdiff+0x7c>
 8013358:	1b2b      	subs	r3, r5, r4
 801335a:	3b15      	subs	r3, #21
 801335c:	f023 0303 	bic.w	r3, r3, #3
 8013360:	3304      	adds	r3, #4
 8013362:	3415      	adds	r4, #21
 8013364:	42a5      	cmp	r5, r4
 8013366:	bf38      	it	cc
 8013368:	2304      	movcc	r3, #4
 801336a:	4419      	add	r1, r3
 801336c:	4473      	add	r3, lr
 801336e:	469e      	mov	lr, r3
 8013370:	460d      	mov	r5, r1
 8013372:	4565      	cmp	r5, ip
 8013374:	d30e      	bcc.n	8013394 <__mdiff+0xe8>
 8013376:	f10c 0203 	add.w	r2, ip, #3
 801337a:	1a52      	subs	r2, r2, r1
 801337c:	f022 0203 	bic.w	r2, r2, #3
 8013380:	3903      	subs	r1, #3
 8013382:	458c      	cmp	ip, r1
 8013384:	bf38      	it	cc
 8013386:	2200      	movcc	r2, #0
 8013388:	441a      	add	r2, r3
 801338a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801338e:	b17b      	cbz	r3, 80133b0 <__mdiff+0x104>
 8013390:	6106      	str	r6, [r0, #16]
 8013392:	e7a5      	b.n	80132e0 <__mdiff+0x34>
 8013394:	f855 8b04 	ldr.w	r8, [r5], #4
 8013398:	fa17 f488 	uxtah	r4, r7, r8
 801339c:	1422      	asrs	r2, r4, #16
 801339e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80133a2:	b2a4      	uxth	r4, r4
 80133a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80133a8:	f84e 4b04 	str.w	r4, [lr], #4
 80133ac:	1417      	asrs	r7, r2, #16
 80133ae:	e7e0      	b.n	8013372 <__mdiff+0xc6>
 80133b0:	3e01      	subs	r6, #1
 80133b2:	e7ea      	b.n	801338a <__mdiff+0xde>
 80133b4:	08016443 	.word	0x08016443
 80133b8:	08016534 	.word	0x08016534

080133bc <__ulp>:
 80133bc:	b082      	sub	sp, #8
 80133be:	ed8d 0b00 	vstr	d0, [sp]
 80133c2:	9b01      	ldr	r3, [sp, #4]
 80133c4:	4912      	ldr	r1, [pc, #72]	; (8013410 <__ulp+0x54>)
 80133c6:	4019      	ands	r1, r3
 80133c8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80133cc:	2900      	cmp	r1, #0
 80133ce:	dd05      	ble.n	80133dc <__ulp+0x20>
 80133d0:	2200      	movs	r2, #0
 80133d2:	460b      	mov	r3, r1
 80133d4:	ec43 2b10 	vmov	d0, r2, r3
 80133d8:	b002      	add	sp, #8
 80133da:	4770      	bx	lr
 80133dc:	4249      	negs	r1, r1
 80133de:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80133e2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80133e6:	f04f 0200 	mov.w	r2, #0
 80133ea:	f04f 0300 	mov.w	r3, #0
 80133ee:	da04      	bge.n	80133fa <__ulp+0x3e>
 80133f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80133f4:	fa41 f300 	asr.w	r3, r1, r0
 80133f8:	e7ec      	b.n	80133d4 <__ulp+0x18>
 80133fa:	f1a0 0114 	sub.w	r1, r0, #20
 80133fe:	291e      	cmp	r1, #30
 8013400:	bfda      	itte	le
 8013402:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013406:	fa20 f101 	lsrle.w	r1, r0, r1
 801340a:	2101      	movgt	r1, #1
 801340c:	460a      	mov	r2, r1
 801340e:	e7e1      	b.n	80133d4 <__ulp+0x18>
 8013410:	7ff00000 	.word	0x7ff00000

08013414 <__b2d>:
 8013414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013416:	6905      	ldr	r5, [r0, #16]
 8013418:	f100 0714 	add.w	r7, r0, #20
 801341c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013420:	1f2e      	subs	r6, r5, #4
 8013422:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013426:	4620      	mov	r0, r4
 8013428:	f7ff fd52 	bl	8012ed0 <__hi0bits>
 801342c:	f1c0 0320 	rsb	r3, r0, #32
 8013430:	280a      	cmp	r0, #10
 8013432:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80134b0 <__b2d+0x9c>
 8013436:	600b      	str	r3, [r1, #0]
 8013438:	dc14      	bgt.n	8013464 <__b2d+0x50>
 801343a:	f1c0 0e0b 	rsb	lr, r0, #11
 801343e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013442:	42b7      	cmp	r7, r6
 8013444:	ea41 030c 	orr.w	r3, r1, ip
 8013448:	bf34      	ite	cc
 801344a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801344e:	2100      	movcs	r1, #0
 8013450:	3015      	adds	r0, #21
 8013452:	fa04 f000 	lsl.w	r0, r4, r0
 8013456:	fa21 f10e 	lsr.w	r1, r1, lr
 801345a:	ea40 0201 	orr.w	r2, r0, r1
 801345e:	ec43 2b10 	vmov	d0, r2, r3
 8013462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013464:	42b7      	cmp	r7, r6
 8013466:	bf3a      	itte	cc
 8013468:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801346c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013470:	2100      	movcs	r1, #0
 8013472:	380b      	subs	r0, #11
 8013474:	d017      	beq.n	80134a6 <__b2d+0x92>
 8013476:	f1c0 0c20 	rsb	ip, r0, #32
 801347a:	fa04 f500 	lsl.w	r5, r4, r0
 801347e:	42be      	cmp	r6, r7
 8013480:	fa21 f40c 	lsr.w	r4, r1, ip
 8013484:	ea45 0504 	orr.w	r5, r5, r4
 8013488:	bf8c      	ite	hi
 801348a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801348e:	2400      	movls	r4, #0
 8013490:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013494:	fa01 f000 	lsl.w	r0, r1, r0
 8013498:	fa24 f40c 	lsr.w	r4, r4, ip
 801349c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80134a0:	ea40 0204 	orr.w	r2, r0, r4
 80134a4:	e7db      	b.n	801345e <__b2d+0x4a>
 80134a6:	ea44 030c 	orr.w	r3, r4, ip
 80134aa:	460a      	mov	r2, r1
 80134ac:	e7d7      	b.n	801345e <__b2d+0x4a>
 80134ae:	bf00      	nop
 80134b0:	3ff00000 	.word	0x3ff00000

080134b4 <__d2b>:
 80134b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134b8:	4689      	mov	r9, r1
 80134ba:	2101      	movs	r1, #1
 80134bc:	ec57 6b10 	vmov	r6, r7, d0
 80134c0:	4690      	mov	r8, r2
 80134c2:	f7ff fc0f 	bl	8012ce4 <_Balloc>
 80134c6:	4604      	mov	r4, r0
 80134c8:	b930      	cbnz	r0, 80134d8 <__d2b+0x24>
 80134ca:	4602      	mov	r2, r0
 80134cc:	4b25      	ldr	r3, [pc, #148]	; (8013564 <__d2b+0xb0>)
 80134ce:	4826      	ldr	r0, [pc, #152]	; (8013568 <__d2b+0xb4>)
 80134d0:	f240 310a 	movw	r1, #778	; 0x30a
 80134d4:	f000 ffc0 	bl	8014458 <__assert_func>
 80134d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80134dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80134e0:	bb35      	cbnz	r5, 8013530 <__d2b+0x7c>
 80134e2:	2e00      	cmp	r6, #0
 80134e4:	9301      	str	r3, [sp, #4]
 80134e6:	d028      	beq.n	801353a <__d2b+0x86>
 80134e8:	4668      	mov	r0, sp
 80134ea:	9600      	str	r6, [sp, #0]
 80134ec:	f7ff fd10 	bl	8012f10 <__lo0bits>
 80134f0:	9900      	ldr	r1, [sp, #0]
 80134f2:	b300      	cbz	r0, 8013536 <__d2b+0x82>
 80134f4:	9a01      	ldr	r2, [sp, #4]
 80134f6:	f1c0 0320 	rsb	r3, r0, #32
 80134fa:	fa02 f303 	lsl.w	r3, r2, r3
 80134fe:	430b      	orrs	r3, r1
 8013500:	40c2      	lsrs	r2, r0
 8013502:	6163      	str	r3, [r4, #20]
 8013504:	9201      	str	r2, [sp, #4]
 8013506:	9b01      	ldr	r3, [sp, #4]
 8013508:	61a3      	str	r3, [r4, #24]
 801350a:	2b00      	cmp	r3, #0
 801350c:	bf14      	ite	ne
 801350e:	2202      	movne	r2, #2
 8013510:	2201      	moveq	r2, #1
 8013512:	6122      	str	r2, [r4, #16]
 8013514:	b1d5      	cbz	r5, 801354c <__d2b+0x98>
 8013516:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801351a:	4405      	add	r5, r0
 801351c:	f8c9 5000 	str.w	r5, [r9]
 8013520:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013524:	f8c8 0000 	str.w	r0, [r8]
 8013528:	4620      	mov	r0, r4
 801352a:	b003      	add	sp, #12
 801352c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013534:	e7d5      	b.n	80134e2 <__d2b+0x2e>
 8013536:	6161      	str	r1, [r4, #20]
 8013538:	e7e5      	b.n	8013506 <__d2b+0x52>
 801353a:	a801      	add	r0, sp, #4
 801353c:	f7ff fce8 	bl	8012f10 <__lo0bits>
 8013540:	9b01      	ldr	r3, [sp, #4]
 8013542:	6163      	str	r3, [r4, #20]
 8013544:	2201      	movs	r2, #1
 8013546:	6122      	str	r2, [r4, #16]
 8013548:	3020      	adds	r0, #32
 801354a:	e7e3      	b.n	8013514 <__d2b+0x60>
 801354c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013550:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013554:	f8c9 0000 	str.w	r0, [r9]
 8013558:	6918      	ldr	r0, [r3, #16]
 801355a:	f7ff fcb9 	bl	8012ed0 <__hi0bits>
 801355e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013562:	e7df      	b.n	8013524 <__d2b+0x70>
 8013564:	08016443 	.word	0x08016443
 8013568:	08016534 	.word	0x08016534

0801356c <__ratio>:
 801356c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013570:	4688      	mov	r8, r1
 8013572:	4669      	mov	r1, sp
 8013574:	4681      	mov	r9, r0
 8013576:	f7ff ff4d 	bl	8013414 <__b2d>
 801357a:	a901      	add	r1, sp, #4
 801357c:	4640      	mov	r0, r8
 801357e:	ec55 4b10 	vmov	r4, r5, d0
 8013582:	f7ff ff47 	bl	8013414 <__b2d>
 8013586:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801358a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801358e:	eba3 0c02 	sub.w	ip, r3, r2
 8013592:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013596:	1a9b      	subs	r3, r3, r2
 8013598:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801359c:	ec51 0b10 	vmov	r0, r1, d0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	bfd6      	itet	le
 80135a4:	460a      	movle	r2, r1
 80135a6:	462a      	movgt	r2, r5
 80135a8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80135ac:	468b      	mov	fp, r1
 80135ae:	462f      	mov	r7, r5
 80135b0:	bfd4      	ite	le
 80135b2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80135b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80135ba:	4620      	mov	r0, r4
 80135bc:	ee10 2a10 	vmov	r2, s0
 80135c0:	465b      	mov	r3, fp
 80135c2:	4639      	mov	r1, r7
 80135c4:	f7ed f962 	bl	800088c <__aeabi_ddiv>
 80135c8:	ec41 0b10 	vmov	d0, r0, r1
 80135cc:	b003      	add	sp, #12
 80135ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080135d2 <__copybits>:
 80135d2:	3901      	subs	r1, #1
 80135d4:	b570      	push	{r4, r5, r6, lr}
 80135d6:	1149      	asrs	r1, r1, #5
 80135d8:	6914      	ldr	r4, [r2, #16]
 80135da:	3101      	adds	r1, #1
 80135dc:	f102 0314 	add.w	r3, r2, #20
 80135e0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80135e4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80135e8:	1f05      	subs	r5, r0, #4
 80135ea:	42a3      	cmp	r3, r4
 80135ec:	d30c      	bcc.n	8013608 <__copybits+0x36>
 80135ee:	1aa3      	subs	r3, r4, r2
 80135f0:	3b11      	subs	r3, #17
 80135f2:	f023 0303 	bic.w	r3, r3, #3
 80135f6:	3211      	adds	r2, #17
 80135f8:	42a2      	cmp	r2, r4
 80135fa:	bf88      	it	hi
 80135fc:	2300      	movhi	r3, #0
 80135fe:	4418      	add	r0, r3
 8013600:	2300      	movs	r3, #0
 8013602:	4288      	cmp	r0, r1
 8013604:	d305      	bcc.n	8013612 <__copybits+0x40>
 8013606:	bd70      	pop	{r4, r5, r6, pc}
 8013608:	f853 6b04 	ldr.w	r6, [r3], #4
 801360c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013610:	e7eb      	b.n	80135ea <__copybits+0x18>
 8013612:	f840 3b04 	str.w	r3, [r0], #4
 8013616:	e7f4      	b.n	8013602 <__copybits+0x30>

08013618 <__any_on>:
 8013618:	f100 0214 	add.w	r2, r0, #20
 801361c:	6900      	ldr	r0, [r0, #16]
 801361e:	114b      	asrs	r3, r1, #5
 8013620:	4298      	cmp	r0, r3
 8013622:	b510      	push	{r4, lr}
 8013624:	db11      	blt.n	801364a <__any_on+0x32>
 8013626:	dd0a      	ble.n	801363e <__any_on+0x26>
 8013628:	f011 011f 	ands.w	r1, r1, #31
 801362c:	d007      	beq.n	801363e <__any_on+0x26>
 801362e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013632:	fa24 f001 	lsr.w	r0, r4, r1
 8013636:	fa00 f101 	lsl.w	r1, r0, r1
 801363a:	428c      	cmp	r4, r1
 801363c:	d10b      	bne.n	8013656 <__any_on+0x3e>
 801363e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013642:	4293      	cmp	r3, r2
 8013644:	d803      	bhi.n	801364e <__any_on+0x36>
 8013646:	2000      	movs	r0, #0
 8013648:	bd10      	pop	{r4, pc}
 801364a:	4603      	mov	r3, r0
 801364c:	e7f7      	b.n	801363e <__any_on+0x26>
 801364e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013652:	2900      	cmp	r1, #0
 8013654:	d0f5      	beq.n	8013642 <__any_on+0x2a>
 8013656:	2001      	movs	r0, #1
 8013658:	e7f6      	b.n	8013648 <__any_on+0x30>

0801365a <_calloc_r>:
 801365a:	b513      	push	{r0, r1, r4, lr}
 801365c:	434a      	muls	r2, r1
 801365e:	4611      	mov	r1, r2
 8013660:	9201      	str	r2, [sp, #4]
 8013662:	f7fb fefb 	bl	800f45c <_malloc_r>
 8013666:	4604      	mov	r4, r0
 8013668:	b118      	cbz	r0, 8013672 <_calloc_r+0x18>
 801366a:	9a01      	ldr	r2, [sp, #4]
 801366c:	2100      	movs	r1, #0
 801366e:	f7fb fe9d 	bl	800f3ac <memset>
 8013672:	4620      	mov	r0, r4
 8013674:	b002      	add	sp, #8
 8013676:	bd10      	pop	{r4, pc}

08013678 <__ssputs_r>:
 8013678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801367c:	688e      	ldr	r6, [r1, #8]
 801367e:	429e      	cmp	r6, r3
 8013680:	4682      	mov	sl, r0
 8013682:	460c      	mov	r4, r1
 8013684:	4690      	mov	r8, r2
 8013686:	461f      	mov	r7, r3
 8013688:	d838      	bhi.n	80136fc <__ssputs_r+0x84>
 801368a:	898a      	ldrh	r2, [r1, #12]
 801368c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013690:	d032      	beq.n	80136f8 <__ssputs_r+0x80>
 8013692:	6825      	ldr	r5, [r4, #0]
 8013694:	6909      	ldr	r1, [r1, #16]
 8013696:	eba5 0901 	sub.w	r9, r5, r1
 801369a:	6965      	ldr	r5, [r4, #20]
 801369c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80136a4:	3301      	adds	r3, #1
 80136a6:	444b      	add	r3, r9
 80136a8:	106d      	asrs	r5, r5, #1
 80136aa:	429d      	cmp	r5, r3
 80136ac:	bf38      	it	cc
 80136ae:	461d      	movcc	r5, r3
 80136b0:	0553      	lsls	r3, r2, #21
 80136b2:	d531      	bpl.n	8013718 <__ssputs_r+0xa0>
 80136b4:	4629      	mov	r1, r5
 80136b6:	f7fb fed1 	bl	800f45c <_malloc_r>
 80136ba:	4606      	mov	r6, r0
 80136bc:	b950      	cbnz	r0, 80136d4 <__ssputs_r+0x5c>
 80136be:	230c      	movs	r3, #12
 80136c0:	f8ca 3000 	str.w	r3, [sl]
 80136c4:	89a3      	ldrh	r3, [r4, #12]
 80136c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136ca:	81a3      	strh	r3, [r4, #12]
 80136cc:	f04f 30ff 	mov.w	r0, #4294967295
 80136d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136d4:	6921      	ldr	r1, [r4, #16]
 80136d6:	464a      	mov	r2, r9
 80136d8:	f7fb fe5a 	bl	800f390 <memcpy>
 80136dc:	89a3      	ldrh	r3, [r4, #12]
 80136de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80136e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136e6:	81a3      	strh	r3, [r4, #12]
 80136e8:	6126      	str	r6, [r4, #16]
 80136ea:	6165      	str	r5, [r4, #20]
 80136ec:	444e      	add	r6, r9
 80136ee:	eba5 0509 	sub.w	r5, r5, r9
 80136f2:	6026      	str	r6, [r4, #0]
 80136f4:	60a5      	str	r5, [r4, #8]
 80136f6:	463e      	mov	r6, r7
 80136f8:	42be      	cmp	r6, r7
 80136fa:	d900      	bls.n	80136fe <__ssputs_r+0x86>
 80136fc:	463e      	mov	r6, r7
 80136fe:	4632      	mov	r2, r6
 8013700:	6820      	ldr	r0, [r4, #0]
 8013702:	4641      	mov	r1, r8
 8013704:	f000 fefa 	bl	80144fc <memmove>
 8013708:	68a3      	ldr	r3, [r4, #8]
 801370a:	6822      	ldr	r2, [r4, #0]
 801370c:	1b9b      	subs	r3, r3, r6
 801370e:	4432      	add	r2, r6
 8013710:	60a3      	str	r3, [r4, #8]
 8013712:	6022      	str	r2, [r4, #0]
 8013714:	2000      	movs	r0, #0
 8013716:	e7db      	b.n	80136d0 <__ssputs_r+0x58>
 8013718:	462a      	mov	r2, r5
 801371a:	f000 ff09 	bl	8014530 <_realloc_r>
 801371e:	4606      	mov	r6, r0
 8013720:	2800      	cmp	r0, #0
 8013722:	d1e1      	bne.n	80136e8 <__ssputs_r+0x70>
 8013724:	6921      	ldr	r1, [r4, #16]
 8013726:	4650      	mov	r0, sl
 8013728:	f7fb fe48 	bl	800f3bc <_free_r>
 801372c:	e7c7      	b.n	80136be <__ssputs_r+0x46>
	...

08013730 <_svfiprintf_r>:
 8013730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013734:	4698      	mov	r8, r3
 8013736:	898b      	ldrh	r3, [r1, #12]
 8013738:	061b      	lsls	r3, r3, #24
 801373a:	b09d      	sub	sp, #116	; 0x74
 801373c:	4607      	mov	r7, r0
 801373e:	460d      	mov	r5, r1
 8013740:	4614      	mov	r4, r2
 8013742:	d50e      	bpl.n	8013762 <_svfiprintf_r+0x32>
 8013744:	690b      	ldr	r3, [r1, #16]
 8013746:	b963      	cbnz	r3, 8013762 <_svfiprintf_r+0x32>
 8013748:	2140      	movs	r1, #64	; 0x40
 801374a:	f7fb fe87 	bl	800f45c <_malloc_r>
 801374e:	6028      	str	r0, [r5, #0]
 8013750:	6128      	str	r0, [r5, #16]
 8013752:	b920      	cbnz	r0, 801375e <_svfiprintf_r+0x2e>
 8013754:	230c      	movs	r3, #12
 8013756:	603b      	str	r3, [r7, #0]
 8013758:	f04f 30ff 	mov.w	r0, #4294967295
 801375c:	e0d1      	b.n	8013902 <_svfiprintf_r+0x1d2>
 801375e:	2340      	movs	r3, #64	; 0x40
 8013760:	616b      	str	r3, [r5, #20]
 8013762:	2300      	movs	r3, #0
 8013764:	9309      	str	r3, [sp, #36]	; 0x24
 8013766:	2320      	movs	r3, #32
 8013768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801376c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013770:	2330      	movs	r3, #48	; 0x30
 8013772:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801391c <_svfiprintf_r+0x1ec>
 8013776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801377a:	f04f 0901 	mov.w	r9, #1
 801377e:	4623      	mov	r3, r4
 8013780:	469a      	mov	sl, r3
 8013782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013786:	b10a      	cbz	r2, 801378c <_svfiprintf_r+0x5c>
 8013788:	2a25      	cmp	r2, #37	; 0x25
 801378a:	d1f9      	bne.n	8013780 <_svfiprintf_r+0x50>
 801378c:	ebba 0b04 	subs.w	fp, sl, r4
 8013790:	d00b      	beq.n	80137aa <_svfiprintf_r+0x7a>
 8013792:	465b      	mov	r3, fp
 8013794:	4622      	mov	r2, r4
 8013796:	4629      	mov	r1, r5
 8013798:	4638      	mov	r0, r7
 801379a:	f7ff ff6d 	bl	8013678 <__ssputs_r>
 801379e:	3001      	adds	r0, #1
 80137a0:	f000 80aa 	beq.w	80138f8 <_svfiprintf_r+0x1c8>
 80137a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137a6:	445a      	add	r2, fp
 80137a8:	9209      	str	r2, [sp, #36]	; 0x24
 80137aa:	f89a 3000 	ldrb.w	r3, [sl]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	f000 80a2 	beq.w	80138f8 <_svfiprintf_r+0x1c8>
 80137b4:	2300      	movs	r3, #0
 80137b6:	f04f 32ff 	mov.w	r2, #4294967295
 80137ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137be:	f10a 0a01 	add.w	sl, sl, #1
 80137c2:	9304      	str	r3, [sp, #16]
 80137c4:	9307      	str	r3, [sp, #28]
 80137c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137ca:	931a      	str	r3, [sp, #104]	; 0x68
 80137cc:	4654      	mov	r4, sl
 80137ce:	2205      	movs	r2, #5
 80137d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137d4:	4851      	ldr	r0, [pc, #324]	; (801391c <_svfiprintf_r+0x1ec>)
 80137d6:	f7ec fd23 	bl	8000220 <memchr>
 80137da:	9a04      	ldr	r2, [sp, #16]
 80137dc:	b9d8      	cbnz	r0, 8013816 <_svfiprintf_r+0xe6>
 80137de:	06d0      	lsls	r0, r2, #27
 80137e0:	bf44      	itt	mi
 80137e2:	2320      	movmi	r3, #32
 80137e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137e8:	0711      	lsls	r1, r2, #28
 80137ea:	bf44      	itt	mi
 80137ec:	232b      	movmi	r3, #43	; 0x2b
 80137ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137f2:	f89a 3000 	ldrb.w	r3, [sl]
 80137f6:	2b2a      	cmp	r3, #42	; 0x2a
 80137f8:	d015      	beq.n	8013826 <_svfiprintf_r+0xf6>
 80137fa:	9a07      	ldr	r2, [sp, #28]
 80137fc:	4654      	mov	r4, sl
 80137fe:	2000      	movs	r0, #0
 8013800:	f04f 0c0a 	mov.w	ip, #10
 8013804:	4621      	mov	r1, r4
 8013806:	f811 3b01 	ldrb.w	r3, [r1], #1
 801380a:	3b30      	subs	r3, #48	; 0x30
 801380c:	2b09      	cmp	r3, #9
 801380e:	d94e      	bls.n	80138ae <_svfiprintf_r+0x17e>
 8013810:	b1b0      	cbz	r0, 8013840 <_svfiprintf_r+0x110>
 8013812:	9207      	str	r2, [sp, #28]
 8013814:	e014      	b.n	8013840 <_svfiprintf_r+0x110>
 8013816:	eba0 0308 	sub.w	r3, r0, r8
 801381a:	fa09 f303 	lsl.w	r3, r9, r3
 801381e:	4313      	orrs	r3, r2
 8013820:	9304      	str	r3, [sp, #16]
 8013822:	46a2      	mov	sl, r4
 8013824:	e7d2      	b.n	80137cc <_svfiprintf_r+0x9c>
 8013826:	9b03      	ldr	r3, [sp, #12]
 8013828:	1d19      	adds	r1, r3, #4
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	9103      	str	r1, [sp, #12]
 801382e:	2b00      	cmp	r3, #0
 8013830:	bfbb      	ittet	lt
 8013832:	425b      	neglt	r3, r3
 8013834:	f042 0202 	orrlt.w	r2, r2, #2
 8013838:	9307      	strge	r3, [sp, #28]
 801383a:	9307      	strlt	r3, [sp, #28]
 801383c:	bfb8      	it	lt
 801383e:	9204      	strlt	r2, [sp, #16]
 8013840:	7823      	ldrb	r3, [r4, #0]
 8013842:	2b2e      	cmp	r3, #46	; 0x2e
 8013844:	d10c      	bne.n	8013860 <_svfiprintf_r+0x130>
 8013846:	7863      	ldrb	r3, [r4, #1]
 8013848:	2b2a      	cmp	r3, #42	; 0x2a
 801384a:	d135      	bne.n	80138b8 <_svfiprintf_r+0x188>
 801384c:	9b03      	ldr	r3, [sp, #12]
 801384e:	1d1a      	adds	r2, r3, #4
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	9203      	str	r2, [sp, #12]
 8013854:	2b00      	cmp	r3, #0
 8013856:	bfb8      	it	lt
 8013858:	f04f 33ff 	movlt.w	r3, #4294967295
 801385c:	3402      	adds	r4, #2
 801385e:	9305      	str	r3, [sp, #20]
 8013860:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801392c <_svfiprintf_r+0x1fc>
 8013864:	7821      	ldrb	r1, [r4, #0]
 8013866:	2203      	movs	r2, #3
 8013868:	4650      	mov	r0, sl
 801386a:	f7ec fcd9 	bl	8000220 <memchr>
 801386e:	b140      	cbz	r0, 8013882 <_svfiprintf_r+0x152>
 8013870:	2340      	movs	r3, #64	; 0x40
 8013872:	eba0 000a 	sub.w	r0, r0, sl
 8013876:	fa03 f000 	lsl.w	r0, r3, r0
 801387a:	9b04      	ldr	r3, [sp, #16]
 801387c:	4303      	orrs	r3, r0
 801387e:	3401      	adds	r4, #1
 8013880:	9304      	str	r3, [sp, #16]
 8013882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013886:	4826      	ldr	r0, [pc, #152]	; (8013920 <_svfiprintf_r+0x1f0>)
 8013888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801388c:	2206      	movs	r2, #6
 801388e:	f7ec fcc7 	bl	8000220 <memchr>
 8013892:	2800      	cmp	r0, #0
 8013894:	d038      	beq.n	8013908 <_svfiprintf_r+0x1d8>
 8013896:	4b23      	ldr	r3, [pc, #140]	; (8013924 <_svfiprintf_r+0x1f4>)
 8013898:	bb1b      	cbnz	r3, 80138e2 <_svfiprintf_r+0x1b2>
 801389a:	9b03      	ldr	r3, [sp, #12]
 801389c:	3307      	adds	r3, #7
 801389e:	f023 0307 	bic.w	r3, r3, #7
 80138a2:	3308      	adds	r3, #8
 80138a4:	9303      	str	r3, [sp, #12]
 80138a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138a8:	4433      	add	r3, r6
 80138aa:	9309      	str	r3, [sp, #36]	; 0x24
 80138ac:	e767      	b.n	801377e <_svfiprintf_r+0x4e>
 80138ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80138b2:	460c      	mov	r4, r1
 80138b4:	2001      	movs	r0, #1
 80138b6:	e7a5      	b.n	8013804 <_svfiprintf_r+0xd4>
 80138b8:	2300      	movs	r3, #0
 80138ba:	3401      	adds	r4, #1
 80138bc:	9305      	str	r3, [sp, #20]
 80138be:	4619      	mov	r1, r3
 80138c0:	f04f 0c0a 	mov.w	ip, #10
 80138c4:	4620      	mov	r0, r4
 80138c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138ca:	3a30      	subs	r2, #48	; 0x30
 80138cc:	2a09      	cmp	r2, #9
 80138ce:	d903      	bls.n	80138d8 <_svfiprintf_r+0x1a8>
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d0c5      	beq.n	8013860 <_svfiprintf_r+0x130>
 80138d4:	9105      	str	r1, [sp, #20]
 80138d6:	e7c3      	b.n	8013860 <_svfiprintf_r+0x130>
 80138d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80138dc:	4604      	mov	r4, r0
 80138de:	2301      	movs	r3, #1
 80138e0:	e7f0      	b.n	80138c4 <_svfiprintf_r+0x194>
 80138e2:	ab03      	add	r3, sp, #12
 80138e4:	9300      	str	r3, [sp, #0]
 80138e6:	462a      	mov	r2, r5
 80138e8:	4b0f      	ldr	r3, [pc, #60]	; (8013928 <_svfiprintf_r+0x1f8>)
 80138ea:	a904      	add	r1, sp, #16
 80138ec:	4638      	mov	r0, r7
 80138ee:	f7fb feaf 	bl	800f650 <_printf_float>
 80138f2:	1c42      	adds	r2, r0, #1
 80138f4:	4606      	mov	r6, r0
 80138f6:	d1d6      	bne.n	80138a6 <_svfiprintf_r+0x176>
 80138f8:	89ab      	ldrh	r3, [r5, #12]
 80138fa:	065b      	lsls	r3, r3, #25
 80138fc:	f53f af2c 	bmi.w	8013758 <_svfiprintf_r+0x28>
 8013900:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013902:	b01d      	add	sp, #116	; 0x74
 8013904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013908:	ab03      	add	r3, sp, #12
 801390a:	9300      	str	r3, [sp, #0]
 801390c:	462a      	mov	r2, r5
 801390e:	4b06      	ldr	r3, [pc, #24]	; (8013928 <_svfiprintf_r+0x1f8>)
 8013910:	a904      	add	r1, sp, #16
 8013912:	4638      	mov	r0, r7
 8013914:	f7fc f940 	bl	800fb98 <_printf_i>
 8013918:	e7eb      	b.n	80138f2 <_svfiprintf_r+0x1c2>
 801391a:	bf00      	nop
 801391c:	08016694 	.word	0x08016694
 8013920:	0801669e 	.word	0x0801669e
 8013924:	0800f651 	.word	0x0800f651
 8013928:	08013679 	.word	0x08013679
 801392c:	0801669a 	.word	0x0801669a

08013930 <_sungetc_r>:
 8013930:	b538      	push	{r3, r4, r5, lr}
 8013932:	1c4b      	adds	r3, r1, #1
 8013934:	4614      	mov	r4, r2
 8013936:	d103      	bne.n	8013940 <_sungetc_r+0x10>
 8013938:	f04f 35ff 	mov.w	r5, #4294967295
 801393c:	4628      	mov	r0, r5
 801393e:	bd38      	pop	{r3, r4, r5, pc}
 8013940:	8993      	ldrh	r3, [r2, #12]
 8013942:	f023 0320 	bic.w	r3, r3, #32
 8013946:	8193      	strh	r3, [r2, #12]
 8013948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801394a:	6852      	ldr	r2, [r2, #4]
 801394c:	b2cd      	uxtb	r5, r1
 801394e:	b18b      	cbz	r3, 8013974 <_sungetc_r+0x44>
 8013950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013952:	4293      	cmp	r3, r2
 8013954:	dd08      	ble.n	8013968 <_sungetc_r+0x38>
 8013956:	6823      	ldr	r3, [r4, #0]
 8013958:	1e5a      	subs	r2, r3, #1
 801395a:	6022      	str	r2, [r4, #0]
 801395c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013960:	6863      	ldr	r3, [r4, #4]
 8013962:	3301      	adds	r3, #1
 8013964:	6063      	str	r3, [r4, #4]
 8013966:	e7e9      	b.n	801393c <_sungetc_r+0xc>
 8013968:	4621      	mov	r1, r4
 801396a:	f000 fd2d 	bl	80143c8 <__submore>
 801396e:	2800      	cmp	r0, #0
 8013970:	d0f1      	beq.n	8013956 <_sungetc_r+0x26>
 8013972:	e7e1      	b.n	8013938 <_sungetc_r+0x8>
 8013974:	6921      	ldr	r1, [r4, #16]
 8013976:	6823      	ldr	r3, [r4, #0]
 8013978:	b151      	cbz	r1, 8013990 <_sungetc_r+0x60>
 801397a:	4299      	cmp	r1, r3
 801397c:	d208      	bcs.n	8013990 <_sungetc_r+0x60>
 801397e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013982:	42a9      	cmp	r1, r5
 8013984:	d104      	bne.n	8013990 <_sungetc_r+0x60>
 8013986:	3b01      	subs	r3, #1
 8013988:	3201      	adds	r2, #1
 801398a:	6023      	str	r3, [r4, #0]
 801398c:	6062      	str	r2, [r4, #4]
 801398e:	e7d5      	b.n	801393c <_sungetc_r+0xc>
 8013990:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013994:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013998:	6363      	str	r3, [r4, #52]	; 0x34
 801399a:	2303      	movs	r3, #3
 801399c:	63a3      	str	r3, [r4, #56]	; 0x38
 801399e:	4623      	mov	r3, r4
 80139a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80139a4:	6023      	str	r3, [r4, #0]
 80139a6:	2301      	movs	r3, #1
 80139a8:	e7dc      	b.n	8013964 <_sungetc_r+0x34>

080139aa <__ssrefill_r>:
 80139aa:	b510      	push	{r4, lr}
 80139ac:	460c      	mov	r4, r1
 80139ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80139b0:	b169      	cbz	r1, 80139ce <__ssrefill_r+0x24>
 80139b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139b6:	4299      	cmp	r1, r3
 80139b8:	d001      	beq.n	80139be <__ssrefill_r+0x14>
 80139ba:	f7fb fcff 	bl	800f3bc <_free_r>
 80139be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80139c0:	6063      	str	r3, [r4, #4]
 80139c2:	2000      	movs	r0, #0
 80139c4:	6360      	str	r0, [r4, #52]	; 0x34
 80139c6:	b113      	cbz	r3, 80139ce <__ssrefill_r+0x24>
 80139c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80139ca:	6023      	str	r3, [r4, #0]
 80139cc:	bd10      	pop	{r4, pc}
 80139ce:	6923      	ldr	r3, [r4, #16]
 80139d0:	6023      	str	r3, [r4, #0]
 80139d2:	2300      	movs	r3, #0
 80139d4:	6063      	str	r3, [r4, #4]
 80139d6:	89a3      	ldrh	r3, [r4, #12]
 80139d8:	f043 0320 	orr.w	r3, r3, #32
 80139dc:	81a3      	strh	r3, [r4, #12]
 80139de:	f04f 30ff 	mov.w	r0, #4294967295
 80139e2:	e7f3      	b.n	80139cc <__ssrefill_r+0x22>

080139e4 <__ssvfiscanf_r>:
 80139e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139e8:	460c      	mov	r4, r1
 80139ea:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80139ee:	2100      	movs	r1, #0
 80139f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80139f4:	49b2      	ldr	r1, [pc, #712]	; (8013cc0 <__ssvfiscanf_r+0x2dc>)
 80139f6:	91a0      	str	r1, [sp, #640]	; 0x280
 80139f8:	f10d 0804 	add.w	r8, sp, #4
 80139fc:	49b1      	ldr	r1, [pc, #708]	; (8013cc4 <__ssvfiscanf_r+0x2e0>)
 80139fe:	4fb2      	ldr	r7, [pc, #712]	; (8013cc8 <__ssvfiscanf_r+0x2e4>)
 8013a00:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8013ccc <__ssvfiscanf_r+0x2e8>
 8013a04:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013a08:	4606      	mov	r6, r0
 8013a0a:	91a1      	str	r1, [sp, #644]	; 0x284
 8013a0c:	9300      	str	r3, [sp, #0]
 8013a0e:	f892 a000 	ldrb.w	sl, [r2]
 8013a12:	f1ba 0f00 	cmp.w	sl, #0
 8013a16:	f000 8151 	beq.w	8013cbc <__ssvfiscanf_r+0x2d8>
 8013a1a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8013a1e:	f013 0308 	ands.w	r3, r3, #8
 8013a22:	f102 0501 	add.w	r5, r2, #1
 8013a26:	d019      	beq.n	8013a5c <__ssvfiscanf_r+0x78>
 8013a28:	6863      	ldr	r3, [r4, #4]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	dd0f      	ble.n	8013a4e <__ssvfiscanf_r+0x6a>
 8013a2e:	6823      	ldr	r3, [r4, #0]
 8013a30:	781a      	ldrb	r2, [r3, #0]
 8013a32:	5cba      	ldrb	r2, [r7, r2]
 8013a34:	0712      	lsls	r2, r2, #28
 8013a36:	d401      	bmi.n	8013a3c <__ssvfiscanf_r+0x58>
 8013a38:	462a      	mov	r2, r5
 8013a3a:	e7e8      	b.n	8013a0e <__ssvfiscanf_r+0x2a>
 8013a3c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013a3e:	3201      	adds	r2, #1
 8013a40:	9245      	str	r2, [sp, #276]	; 0x114
 8013a42:	6862      	ldr	r2, [r4, #4]
 8013a44:	3301      	adds	r3, #1
 8013a46:	3a01      	subs	r2, #1
 8013a48:	6062      	str	r2, [r4, #4]
 8013a4a:	6023      	str	r3, [r4, #0]
 8013a4c:	e7ec      	b.n	8013a28 <__ssvfiscanf_r+0x44>
 8013a4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013a50:	4621      	mov	r1, r4
 8013a52:	4630      	mov	r0, r6
 8013a54:	4798      	blx	r3
 8013a56:	2800      	cmp	r0, #0
 8013a58:	d0e9      	beq.n	8013a2e <__ssvfiscanf_r+0x4a>
 8013a5a:	e7ed      	b.n	8013a38 <__ssvfiscanf_r+0x54>
 8013a5c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8013a60:	f040 8083 	bne.w	8013b6a <__ssvfiscanf_r+0x186>
 8013a64:	9341      	str	r3, [sp, #260]	; 0x104
 8013a66:	9343      	str	r3, [sp, #268]	; 0x10c
 8013a68:	7853      	ldrb	r3, [r2, #1]
 8013a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8013a6c:	bf02      	ittt	eq
 8013a6e:	2310      	moveq	r3, #16
 8013a70:	1c95      	addeq	r5, r2, #2
 8013a72:	9341      	streq	r3, [sp, #260]	; 0x104
 8013a74:	220a      	movs	r2, #10
 8013a76:	46ab      	mov	fp, r5
 8013a78:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8013a7c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013a80:	2b09      	cmp	r3, #9
 8013a82:	d91d      	bls.n	8013ac0 <__ssvfiscanf_r+0xdc>
 8013a84:	4891      	ldr	r0, [pc, #580]	; (8013ccc <__ssvfiscanf_r+0x2e8>)
 8013a86:	2203      	movs	r2, #3
 8013a88:	f7ec fbca 	bl	8000220 <memchr>
 8013a8c:	b140      	cbz	r0, 8013aa0 <__ssvfiscanf_r+0xbc>
 8013a8e:	2301      	movs	r3, #1
 8013a90:	eba0 0009 	sub.w	r0, r0, r9
 8013a94:	fa03 f000 	lsl.w	r0, r3, r0
 8013a98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013a9a:	4318      	orrs	r0, r3
 8013a9c:	9041      	str	r0, [sp, #260]	; 0x104
 8013a9e:	465d      	mov	r5, fp
 8013aa0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013aa4:	2b78      	cmp	r3, #120	; 0x78
 8013aa6:	d806      	bhi.n	8013ab6 <__ssvfiscanf_r+0xd2>
 8013aa8:	2b57      	cmp	r3, #87	; 0x57
 8013aaa:	d810      	bhi.n	8013ace <__ssvfiscanf_r+0xea>
 8013aac:	2b25      	cmp	r3, #37	; 0x25
 8013aae:	d05c      	beq.n	8013b6a <__ssvfiscanf_r+0x186>
 8013ab0:	d856      	bhi.n	8013b60 <__ssvfiscanf_r+0x17c>
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d074      	beq.n	8013ba0 <__ssvfiscanf_r+0x1bc>
 8013ab6:	2303      	movs	r3, #3
 8013ab8:	9347      	str	r3, [sp, #284]	; 0x11c
 8013aba:	230a      	movs	r3, #10
 8013abc:	9342      	str	r3, [sp, #264]	; 0x108
 8013abe:	e081      	b.n	8013bc4 <__ssvfiscanf_r+0x1e0>
 8013ac0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013ac2:	fb02 1303 	mla	r3, r2, r3, r1
 8013ac6:	3b30      	subs	r3, #48	; 0x30
 8013ac8:	9343      	str	r3, [sp, #268]	; 0x10c
 8013aca:	465d      	mov	r5, fp
 8013acc:	e7d3      	b.n	8013a76 <__ssvfiscanf_r+0x92>
 8013ace:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013ad2:	2a20      	cmp	r2, #32
 8013ad4:	d8ef      	bhi.n	8013ab6 <__ssvfiscanf_r+0xd2>
 8013ad6:	a101      	add	r1, pc, #4	; (adr r1, 8013adc <__ssvfiscanf_r+0xf8>)
 8013ad8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013adc:	08013baf 	.word	0x08013baf
 8013ae0:	08013ab7 	.word	0x08013ab7
 8013ae4:	08013ab7 	.word	0x08013ab7
 8013ae8:	08013c0d 	.word	0x08013c0d
 8013aec:	08013ab7 	.word	0x08013ab7
 8013af0:	08013ab7 	.word	0x08013ab7
 8013af4:	08013ab7 	.word	0x08013ab7
 8013af8:	08013ab7 	.word	0x08013ab7
 8013afc:	08013ab7 	.word	0x08013ab7
 8013b00:	08013ab7 	.word	0x08013ab7
 8013b04:	08013ab7 	.word	0x08013ab7
 8013b08:	08013c23 	.word	0x08013c23
 8013b0c:	08013bf9 	.word	0x08013bf9
 8013b10:	08013b67 	.word	0x08013b67
 8013b14:	08013b67 	.word	0x08013b67
 8013b18:	08013b67 	.word	0x08013b67
 8013b1c:	08013ab7 	.word	0x08013ab7
 8013b20:	08013bfd 	.word	0x08013bfd
 8013b24:	08013ab7 	.word	0x08013ab7
 8013b28:	08013ab7 	.word	0x08013ab7
 8013b2c:	08013ab7 	.word	0x08013ab7
 8013b30:	08013ab7 	.word	0x08013ab7
 8013b34:	08013c33 	.word	0x08013c33
 8013b38:	08013c05 	.word	0x08013c05
 8013b3c:	08013ba7 	.word	0x08013ba7
 8013b40:	08013ab7 	.word	0x08013ab7
 8013b44:	08013ab7 	.word	0x08013ab7
 8013b48:	08013c2f 	.word	0x08013c2f
 8013b4c:	08013ab7 	.word	0x08013ab7
 8013b50:	08013bf9 	.word	0x08013bf9
 8013b54:	08013ab7 	.word	0x08013ab7
 8013b58:	08013ab7 	.word	0x08013ab7
 8013b5c:	08013baf 	.word	0x08013baf
 8013b60:	3b45      	subs	r3, #69	; 0x45
 8013b62:	2b02      	cmp	r3, #2
 8013b64:	d8a7      	bhi.n	8013ab6 <__ssvfiscanf_r+0xd2>
 8013b66:	2305      	movs	r3, #5
 8013b68:	e02b      	b.n	8013bc2 <__ssvfiscanf_r+0x1de>
 8013b6a:	6863      	ldr	r3, [r4, #4]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	dd0d      	ble.n	8013b8c <__ssvfiscanf_r+0x1a8>
 8013b70:	6823      	ldr	r3, [r4, #0]
 8013b72:	781a      	ldrb	r2, [r3, #0]
 8013b74:	4552      	cmp	r2, sl
 8013b76:	f040 80a1 	bne.w	8013cbc <__ssvfiscanf_r+0x2d8>
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	6862      	ldr	r2, [r4, #4]
 8013b7e:	6023      	str	r3, [r4, #0]
 8013b80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8013b82:	3a01      	subs	r2, #1
 8013b84:	3301      	adds	r3, #1
 8013b86:	6062      	str	r2, [r4, #4]
 8013b88:	9345      	str	r3, [sp, #276]	; 0x114
 8013b8a:	e755      	b.n	8013a38 <__ssvfiscanf_r+0x54>
 8013b8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013b8e:	4621      	mov	r1, r4
 8013b90:	4630      	mov	r0, r6
 8013b92:	4798      	blx	r3
 8013b94:	2800      	cmp	r0, #0
 8013b96:	d0eb      	beq.n	8013b70 <__ssvfiscanf_r+0x18c>
 8013b98:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013b9a:	2800      	cmp	r0, #0
 8013b9c:	f040 8084 	bne.w	8013ca8 <__ssvfiscanf_r+0x2c4>
 8013ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ba4:	e086      	b.n	8013cb4 <__ssvfiscanf_r+0x2d0>
 8013ba6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013ba8:	f042 0220 	orr.w	r2, r2, #32
 8013bac:	9241      	str	r2, [sp, #260]	; 0x104
 8013bae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8013bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013bb4:	9241      	str	r2, [sp, #260]	; 0x104
 8013bb6:	2210      	movs	r2, #16
 8013bb8:	2b6f      	cmp	r3, #111	; 0x6f
 8013bba:	9242      	str	r2, [sp, #264]	; 0x108
 8013bbc:	bf34      	ite	cc
 8013bbe:	2303      	movcc	r3, #3
 8013bc0:	2304      	movcs	r3, #4
 8013bc2:	9347      	str	r3, [sp, #284]	; 0x11c
 8013bc4:	6863      	ldr	r3, [r4, #4]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	dd41      	ble.n	8013c4e <__ssvfiscanf_r+0x26a>
 8013bca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013bcc:	0659      	lsls	r1, r3, #25
 8013bce:	d404      	bmi.n	8013bda <__ssvfiscanf_r+0x1f6>
 8013bd0:	6823      	ldr	r3, [r4, #0]
 8013bd2:	781a      	ldrb	r2, [r3, #0]
 8013bd4:	5cba      	ldrb	r2, [r7, r2]
 8013bd6:	0712      	lsls	r2, r2, #28
 8013bd8:	d440      	bmi.n	8013c5c <__ssvfiscanf_r+0x278>
 8013bda:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8013bdc:	2b02      	cmp	r3, #2
 8013bde:	dc4f      	bgt.n	8013c80 <__ssvfiscanf_r+0x29c>
 8013be0:	466b      	mov	r3, sp
 8013be2:	4622      	mov	r2, r4
 8013be4:	a941      	add	r1, sp, #260	; 0x104
 8013be6:	4630      	mov	r0, r6
 8013be8:	f000 f9ce 	bl	8013f88 <_scanf_chars>
 8013bec:	2801      	cmp	r0, #1
 8013bee:	d065      	beq.n	8013cbc <__ssvfiscanf_r+0x2d8>
 8013bf0:	2802      	cmp	r0, #2
 8013bf2:	f47f af21 	bne.w	8013a38 <__ssvfiscanf_r+0x54>
 8013bf6:	e7cf      	b.n	8013b98 <__ssvfiscanf_r+0x1b4>
 8013bf8:	220a      	movs	r2, #10
 8013bfa:	e7dd      	b.n	8013bb8 <__ssvfiscanf_r+0x1d4>
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	9342      	str	r3, [sp, #264]	; 0x108
 8013c00:	2303      	movs	r3, #3
 8013c02:	e7de      	b.n	8013bc2 <__ssvfiscanf_r+0x1de>
 8013c04:	2308      	movs	r3, #8
 8013c06:	9342      	str	r3, [sp, #264]	; 0x108
 8013c08:	2304      	movs	r3, #4
 8013c0a:	e7da      	b.n	8013bc2 <__ssvfiscanf_r+0x1de>
 8013c0c:	4629      	mov	r1, r5
 8013c0e:	4640      	mov	r0, r8
 8013c10:	f000 fb22 	bl	8014258 <__sccl>
 8013c14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c1a:	9341      	str	r3, [sp, #260]	; 0x104
 8013c1c:	4605      	mov	r5, r0
 8013c1e:	2301      	movs	r3, #1
 8013c20:	e7cf      	b.n	8013bc2 <__ssvfiscanf_r+0x1de>
 8013c22:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c28:	9341      	str	r3, [sp, #260]	; 0x104
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	e7c9      	b.n	8013bc2 <__ssvfiscanf_r+0x1de>
 8013c2e:	2302      	movs	r3, #2
 8013c30:	e7c7      	b.n	8013bc2 <__ssvfiscanf_r+0x1de>
 8013c32:	9841      	ldr	r0, [sp, #260]	; 0x104
 8013c34:	06c3      	lsls	r3, r0, #27
 8013c36:	f53f aeff 	bmi.w	8013a38 <__ssvfiscanf_r+0x54>
 8013c3a:	9b00      	ldr	r3, [sp, #0]
 8013c3c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013c3e:	1d19      	adds	r1, r3, #4
 8013c40:	9100      	str	r1, [sp, #0]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	07c0      	lsls	r0, r0, #31
 8013c46:	bf4c      	ite	mi
 8013c48:	801a      	strhmi	r2, [r3, #0]
 8013c4a:	601a      	strpl	r2, [r3, #0]
 8013c4c:	e6f4      	b.n	8013a38 <__ssvfiscanf_r+0x54>
 8013c4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013c50:	4621      	mov	r1, r4
 8013c52:	4630      	mov	r0, r6
 8013c54:	4798      	blx	r3
 8013c56:	2800      	cmp	r0, #0
 8013c58:	d0b7      	beq.n	8013bca <__ssvfiscanf_r+0x1e6>
 8013c5a:	e79d      	b.n	8013b98 <__ssvfiscanf_r+0x1b4>
 8013c5c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013c5e:	3201      	adds	r2, #1
 8013c60:	9245      	str	r2, [sp, #276]	; 0x114
 8013c62:	6862      	ldr	r2, [r4, #4]
 8013c64:	3a01      	subs	r2, #1
 8013c66:	2a00      	cmp	r2, #0
 8013c68:	6062      	str	r2, [r4, #4]
 8013c6a:	dd02      	ble.n	8013c72 <__ssvfiscanf_r+0x28e>
 8013c6c:	3301      	adds	r3, #1
 8013c6e:	6023      	str	r3, [r4, #0]
 8013c70:	e7ae      	b.n	8013bd0 <__ssvfiscanf_r+0x1ec>
 8013c72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013c74:	4621      	mov	r1, r4
 8013c76:	4630      	mov	r0, r6
 8013c78:	4798      	blx	r3
 8013c7a:	2800      	cmp	r0, #0
 8013c7c:	d0a8      	beq.n	8013bd0 <__ssvfiscanf_r+0x1ec>
 8013c7e:	e78b      	b.n	8013b98 <__ssvfiscanf_r+0x1b4>
 8013c80:	2b04      	cmp	r3, #4
 8013c82:	dc06      	bgt.n	8013c92 <__ssvfiscanf_r+0x2ae>
 8013c84:	466b      	mov	r3, sp
 8013c86:	4622      	mov	r2, r4
 8013c88:	a941      	add	r1, sp, #260	; 0x104
 8013c8a:	4630      	mov	r0, r6
 8013c8c:	f000 f9d4 	bl	8014038 <_scanf_i>
 8013c90:	e7ac      	b.n	8013bec <__ssvfiscanf_r+0x208>
 8013c92:	4b0f      	ldr	r3, [pc, #60]	; (8013cd0 <__ssvfiscanf_r+0x2ec>)
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	f43f aecf 	beq.w	8013a38 <__ssvfiscanf_r+0x54>
 8013c9a:	466b      	mov	r3, sp
 8013c9c:	4622      	mov	r2, r4
 8013c9e:	a941      	add	r1, sp, #260	; 0x104
 8013ca0:	4630      	mov	r0, r6
 8013ca2:	f7fc f89f 	bl	800fde4 <_scanf_float>
 8013ca6:	e7a1      	b.n	8013bec <__ssvfiscanf_r+0x208>
 8013ca8:	89a3      	ldrh	r3, [r4, #12]
 8013caa:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013cae:	bf18      	it	ne
 8013cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8013cb4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8013cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cbc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8013cbe:	e7f9      	b.n	8013cb4 <__ssvfiscanf_r+0x2d0>
 8013cc0:	08013931 	.word	0x08013931
 8013cc4:	080139ab 	.word	0x080139ab
 8013cc8:	08016231 	.word	0x08016231
 8013ccc:	0801669a 	.word	0x0801669a
 8013cd0:	0800fde5 	.word	0x0800fde5

08013cd4 <__sfputc_r>:
 8013cd4:	6893      	ldr	r3, [r2, #8]
 8013cd6:	3b01      	subs	r3, #1
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	b410      	push	{r4}
 8013cdc:	6093      	str	r3, [r2, #8]
 8013cde:	da08      	bge.n	8013cf2 <__sfputc_r+0x1e>
 8013ce0:	6994      	ldr	r4, [r2, #24]
 8013ce2:	42a3      	cmp	r3, r4
 8013ce4:	db01      	blt.n	8013cea <__sfputc_r+0x16>
 8013ce6:	290a      	cmp	r1, #10
 8013ce8:	d103      	bne.n	8013cf2 <__sfputc_r+0x1e>
 8013cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cee:	f7fd badd 	b.w	80112ac <__swbuf_r>
 8013cf2:	6813      	ldr	r3, [r2, #0]
 8013cf4:	1c58      	adds	r0, r3, #1
 8013cf6:	6010      	str	r0, [r2, #0]
 8013cf8:	7019      	strb	r1, [r3, #0]
 8013cfa:	4608      	mov	r0, r1
 8013cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d00:	4770      	bx	lr

08013d02 <__sfputs_r>:
 8013d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d04:	4606      	mov	r6, r0
 8013d06:	460f      	mov	r7, r1
 8013d08:	4614      	mov	r4, r2
 8013d0a:	18d5      	adds	r5, r2, r3
 8013d0c:	42ac      	cmp	r4, r5
 8013d0e:	d101      	bne.n	8013d14 <__sfputs_r+0x12>
 8013d10:	2000      	movs	r0, #0
 8013d12:	e007      	b.n	8013d24 <__sfputs_r+0x22>
 8013d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d18:	463a      	mov	r2, r7
 8013d1a:	4630      	mov	r0, r6
 8013d1c:	f7ff ffda 	bl	8013cd4 <__sfputc_r>
 8013d20:	1c43      	adds	r3, r0, #1
 8013d22:	d1f3      	bne.n	8013d0c <__sfputs_r+0xa>
 8013d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d28 <_vfiprintf_r>:
 8013d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d2c:	460d      	mov	r5, r1
 8013d2e:	b09d      	sub	sp, #116	; 0x74
 8013d30:	4614      	mov	r4, r2
 8013d32:	4698      	mov	r8, r3
 8013d34:	4606      	mov	r6, r0
 8013d36:	b118      	cbz	r0, 8013d40 <_vfiprintf_r+0x18>
 8013d38:	6983      	ldr	r3, [r0, #24]
 8013d3a:	b90b      	cbnz	r3, 8013d40 <_vfiprintf_r+0x18>
 8013d3c:	f7fe fb2a 	bl	8012394 <__sinit>
 8013d40:	4b89      	ldr	r3, [pc, #548]	; (8013f68 <_vfiprintf_r+0x240>)
 8013d42:	429d      	cmp	r5, r3
 8013d44:	d11b      	bne.n	8013d7e <_vfiprintf_r+0x56>
 8013d46:	6875      	ldr	r5, [r6, #4]
 8013d48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d4a:	07d9      	lsls	r1, r3, #31
 8013d4c:	d405      	bmi.n	8013d5a <_vfiprintf_r+0x32>
 8013d4e:	89ab      	ldrh	r3, [r5, #12]
 8013d50:	059a      	lsls	r2, r3, #22
 8013d52:	d402      	bmi.n	8013d5a <_vfiprintf_r+0x32>
 8013d54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d56:	f7fe ff2e 	bl	8012bb6 <__retarget_lock_acquire_recursive>
 8013d5a:	89ab      	ldrh	r3, [r5, #12]
 8013d5c:	071b      	lsls	r3, r3, #28
 8013d5e:	d501      	bpl.n	8013d64 <_vfiprintf_r+0x3c>
 8013d60:	692b      	ldr	r3, [r5, #16]
 8013d62:	b9eb      	cbnz	r3, 8013da0 <_vfiprintf_r+0x78>
 8013d64:	4629      	mov	r1, r5
 8013d66:	4630      	mov	r0, r6
 8013d68:	f7fd fb04 	bl	8011374 <__swsetup_r>
 8013d6c:	b1c0      	cbz	r0, 8013da0 <_vfiprintf_r+0x78>
 8013d6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013d70:	07dc      	lsls	r4, r3, #31
 8013d72:	d50e      	bpl.n	8013d92 <_vfiprintf_r+0x6a>
 8013d74:	f04f 30ff 	mov.w	r0, #4294967295
 8013d78:	b01d      	add	sp, #116	; 0x74
 8013d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d7e:	4b7b      	ldr	r3, [pc, #492]	; (8013f6c <_vfiprintf_r+0x244>)
 8013d80:	429d      	cmp	r5, r3
 8013d82:	d101      	bne.n	8013d88 <_vfiprintf_r+0x60>
 8013d84:	68b5      	ldr	r5, [r6, #8]
 8013d86:	e7df      	b.n	8013d48 <_vfiprintf_r+0x20>
 8013d88:	4b79      	ldr	r3, [pc, #484]	; (8013f70 <_vfiprintf_r+0x248>)
 8013d8a:	429d      	cmp	r5, r3
 8013d8c:	bf08      	it	eq
 8013d8e:	68f5      	ldreq	r5, [r6, #12]
 8013d90:	e7da      	b.n	8013d48 <_vfiprintf_r+0x20>
 8013d92:	89ab      	ldrh	r3, [r5, #12]
 8013d94:	0598      	lsls	r0, r3, #22
 8013d96:	d4ed      	bmi.n	8013d74 <_vfiprintf_r+0x4c>
 8013d98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013d9a:	f7fe ff0d 	bl	8012bb8 <__retarget_lock_release_recursive>
 8013d9e:	e7e9      	b.n	8013d74 <_vfiprintf_r+0x4c>
 8013da0:	2300      	movs	r3, #0
 8013da2:	9309      	str	r3, [sp, #36]	; 0x24
 8013da4:	2320      	movs	r3, #32
 8013da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013daa:	f8cd 800c 	str.w	r8, [sp, #12]
 8013dae:	2330      	movs	r3, #48	; 0x30
 8013db0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013f74 <_vfiprintf_r+0x24c>
 8013db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013db8:	f04f 0901 	mov.w	r9, #1
 8013dbc:	4623      	mov	r3, r4
 8013dbe:	469a      	mov	sl, r3
 8013dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dc4:	b10a      	cbz	r2, 8013dca <_vfiprintf_r+0xa2>
 8013dc6:	2a25      	cmp	r2, #37	; 0x25
 8013dc8:	d1f9      	bne.n	8013dbe <_vfiprintf_r+0x96>
 8013dca:	ebba 0b04 	subs.w	fp, sl, r4
 8013dce:	d00b      	beq.n	8013de8 <_vfiprintf_r+0xc0>
 8013dd0:	465b      	mov	r3, fp
 8013dd2:	4622      	mov	r2, r4
 8013dd4:	4629      	mov	r1, r5
 8013dd6:	4630      	mov	r0, r6
 8013dd8:	f7ff ff93 	bl	8013d02 <__sfputs_r>
 8013ddc:	3001      	adds	r0, #1
 8013dde:	f000 80aa 	beq.w	8013f36 <_vfiprintf_r+0x20e>
 8013de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013de4:	445a      	add	r2, fp
 8013de6:	9209      	str	r2, [sp, #36]	; 0x24
 8013de8:	f89a 3000 	ldrb.w	r3, [sl]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	f000 80a2 	beq.w	8013f36 <_vfiprintf_r+0x20e>
 8013df2:	2300      	movs	r3, #0
 8013df4:	f04f 32ff 	mov.w	r2, #4294967295
 8013df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dfc:	f10a 0a01 	add.w	sl, sl, #1
 8013e00:	9304      	str	r3, [sp, #16]
 8013e02:	9307      	str	r3, [sp, #28]
 8013e04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e08:	931a      	str	r3, [sp, #104]	; 0x68
 8013e0a:	4654      	mov	r4, sl
 8013e0c:	2205      	movs	r2, #5
 8013e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e12:	4858      	ldr	r0, [pc, #352]	; (8013f74 <_vfiprintf_r+0x24c>)
 8013e14:	f7ec fa04 	bl	8000220 <memchr>
 8013e18:	9a04      	ldr	r2, [sp, #16]
 8013e1a:	b9d8      	cbnz	r0, 8013e54 <_vfiprintf_r+0x12c>
 8013e1c:	06d1      	lsls	r1, r2, #27
 8013e1e:	bf44      	itt	mi
 8013e20:	2320      	movmi	r3, #32
 8013e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e26:	0713      	lsls	r3, r2, #28
 8013e28:	bf44      	itt	mi
 8013e2a:	232b      	movmi	r3, #43	; 0x2b
 8013e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e30:	f89a 3000 	ldrb.w	r3, [sl]
 8013e34:	2b2a      	cmp	r3, #42	; 0x2a
 8013e36:	d015      	beq.n	8013e64 <_vfiprintf_r+0x13c>
 8013e38:	9a07      	ldr	r2, [sp, #28]
 8013e3a:	4654      	mov	r4, sl
 8013e3c:	2000      	movs	r0, #0
 8013e3e:	f04f 0c0a 	mov.w	ip, #10
 8013e42:	4621      	mov	r1, r4
 8013e44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e48:	3b30      	subs	r3, #48	; 0x30
 8013e4a:	2b09      	cmp	r3, #9
 8013e4c:	d94e      	bls.n	8013eec <_vfiprintf_r+0x1c4>
 8013e4e:	b1b0      	cbz	r0, 8013e7e <_vfiprintf_r+0x156>
 8013e50:	9207      	str	r2, [sp, #28]
 8013e52:	e014      	b.n	8013e7e <_vfiprintf_r+0x156>
 8013e54:	eba0 0308 	sub.w	r3, r0, r8
 8013e58:	fa09 f303 	lsl.w	r3, r9, r3
 8013e5c:	4313      	orrs	r3, r2
 8013e5e:	9304      	str	r3, [sp, #16]
 8013e60:	46a2      	mov	sl, r4
 8013e62:	e7d2      	b.n	8013e0a <_vfiprintf_r+0xe2>
 8013e64:	9b03      	ldr	r3, [sp, #12]
 8013e66:	1d19      	adds	r1, r3, #4
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	9103      	str	r1, [sp, #12]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	bfbb      	ittet	lt
 8013e70:	425b      	neglt	r3, r3
 8013e72:	f042 0202 	orrlt.w	r2, r2, #2
 8013e76:	9307      	strge	r3, [sp, #28]
 8013e78:	9307      	strlt	r3, [sp, #28]
 8013e7a:	bfb8      	it	lt
 8013e7c:	9204      	strlt	r2, [sp, #16]
 8013e7e:	7823      	ldrb	r3, [r4, #0]
 8013e80:	2b2e      	cmp	r3, #46	; 0x2e
 8013e82:	d10c      	bne.n	8013e9e <_vfiprintf_r+0x176>
 8013e84:	7863      	ldrb	r3, [r4, #1]
 8013e86:	2b2a      	cmp	r3, #42	; 0x2a
 8013e88:	d135      	bne.n	8013ef6 <_vfiprintf_r+0x1ce>
 8013e8a:	9b03      	ldr	r3, [sp, #12]
 8013e8c:	1d1a      	adds	r2, r3, #4
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	9203      	str	r2, [sp, #12]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	bfb8      	it	lt
 8013e96:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e9a:	3402      	adds	r4, #2
 8013e9c:	9305      	str	r3, [sp, #20]
 8013e9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013f84 <_vfiprintf_r+0x25c>
 8013ea2:	7821      	ldrb	r1, [r4, #0]
 8013ea4:	2203      	movs	r2, #3
 8013ea6:	4650      	mov	r0, sl
 8013ea8:	f7ec f9ba 	bl	8000220 <memchr>
 8013eac:	b140      	cbz	r0, 8013ec0 <_vfiprintf_r+0x198>
 8013eae:	2340      	movs	r3, #64	; 0x40
 8013eb0:	eba0 000a 	sub.w	r0, r0, sl
 8013eb4:	fa03 f000 	lsl.w	r0, r3, r0
 8013eb8:	9b04      	ldr	r3, [sp, #16]
 8013eba:	4303      	orrs	r3, r0
 8013ebc:	3401      	adds	r4, #1
 8013ebe:	9304      	str	r3, [sp, #16]
 8013ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ec4:	482c      	ldr	r0, [pc, #176]	; (8013f78 <_vfiprintf_r+0x250>)
 8013ec6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013eca:	2206      	movs	r2, #6
 8013ecc:	f7ec f9a8 	bl	8000220 <memchr>
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d03f      	beq.n	8013f54 <_vfiprintf_r+0x22c>
 8013ed4:	4b29      	ldr	r3, [pc, #164]	; (8013f7c <_vfiprintf_r+0x254>)
 8013ed6:	bb1b      	cbnz	r3, 8013f20 <_vfiprintf_r+0x1f8>
 8013ed8:	9b03      	ldr	r3, [sp, #12]
 8013eda:	3307      	adds	r3, #7
 8013edc:	f023 0307 	bic.w	r3, r3, #7
 8013ee0:	3308      	adds	r3, #8
 8013ee2:	9303      	str	r3, [sp, #12]
 8013ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ee6:	443b      	add	r3, r7
 8013ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8013eea:	e767      	b.n	8013dbc <_vfiprintf_r+0x94>
 8013eec:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ef0:	460c      	mov	r4, r1
 8013ef2:	2001      	movs	r0, #1
 8013ef4:	e7a5      	b.n	8013e42 <_vfiprintf_r+0x11a>
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	3401      	adds	r4, #1
 8013efa:	9305      	str	r3, [sp, #20]
 8013efc:	4619      	mov	r1, r3
 8013efe:	f04f 0c0a 	mov.w	ip, #10
 8013f02:	4620      	mov	r0, r4
 8013f04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f08:	3a30      	subs	r2, #48	; 0x30
 8013f0a:	2a09      	cmp	r2, #9
 8013f0c:	d903      	bls.n	8013f16 <_vfiprintf_r+0x1ee>
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d0c5      	beq.n	8013e9e <_vfiprintf_r+0x176>
 8013f12:	9105      	str	r1, [sp, #20]
 8013f14:	e7c3      	b.n	8013e9e <_vfiprintf_r+0x176>
 8013f16:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f1a:	4604      	mov	r4, r0
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	e7f0      	b.n	8013f02 <_vfiprintf_r+0x1da>
 8013f20:	ab03      	add	r3, sp, #12
 8013f22:	9300      	str	r3, [sp, #0]
 8013f24:	462a      	mov	r2, r5
 8013f26:	4b16      	ldr	r3, [pc, #88]	; (8013f80 <_vfiprintf_r+0x258>)
 8013f28:	a904      	add	r1, sp, #16
 8013f2a:	4630      	mov	r0, r6
 8013f2c:	f7fb fb90 	bl	800f650 <_printf_float>
 8013f30:	4607      	mov	r7, r0
 8013f32:	1c78      	adds	r0, r7, #1
 8013f34:	d1d6      	bne.n	8013ee4 <_vfiprintf_r+0x1bc>
 8013f36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013f38:	07d9      	lsls	r1, r3, #31
 8013f3a:	d405      	bmi.n	8013f48 <_vfiprintf_r+0x220>
 8013f3c:	89ab      	ldrh	r3, [r5, #12]
 8013f3e:	059a      	lsls	r2, r3, #22
 8013f40:	d402      	bmi.n	8013f48 <_vfiprintf_r+0x220>
 8013f42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013f44:	f7fe fe38 	bl	8012bb8 <__retarget_lock_release_recursive>
 8013f48:	89ab      	ldrh	r3, [r5, #12]
 8013f4a:	065b      	lsls	r3, r3, #25
 8013f4c:	f53f af12 	bmi.w	8013d74 <_vfiprintf_r+0x4c>
 8013f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f52:	e711      	b.n	8013d78 <_vfiprintf_r+0x50>
 8013f54:	ab03      	add	r3, sp, #12
 8013f56:	9300      	str	r3, [sp, #0]
 8013f58:	462a      	mov	r2, r5
 8013f5a:	4b09      	ldr	r3, [pc, #36]	; (8013f80 <_vfiprintf_r+0x258>)
 8013f5c:	a904      	add	r1, sp, #16
 8013f5e:	4630      	mov	r0, r6
 8013f60:	f7fb fe1a 	bl	800fb98 <_printf_i>
 8013f64:	e7e4      	b.n	8013f30 <_vfiprintf_r+0x208>
 8013f66:	bf00      	nop
 8013f68:	08016474 	.word	0x08016474
 8013f6c:	08016494 	.word	0x08016494
 8013f70:	08016454 	.word	0x08016454
 8013f74:	08016694 	.word	0x08016694
 8013f78:	0801669e 	.word	0x0801669e
 8013f7c:	0800f651 	.word	0x0800f651
 8013f80:	08013d03 	.word	0x08013d03
 8013f84:	0801669a 	.word	0x0801669a

08013f88 <_scanf_chars>:
 8013f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f8c:	4615      	mov	r5, r2
 8013f8e:	688a      	ldr	r2, [r1, #8]
 8013f90:	4680      	mov	r8, r0
 8013f92:	460c      	mov	r4, r1
 8013f94:	b932      	cbnz	r2, 8013fa4 <_scanf_chars+0x1c>
 8013f96:	698a      	ldr	r2, [r1, #24]
 8013f98:	2a00      	cmp	r2, #0
 8013f9a:	bf0c      	ite	eq
 8013f9c:	2201      	moveq	r2, #1
 8013f9e:	f04f 32ff 	movne.w	r2, #4294967295
 8013fa2:	608a      	str	r2, [r1, #8]
 8013fa4:	6822      	ldr	r2, [r4, #0]
 8013fa6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8014034 <_scanf_chars+0xac>
 8013faa:	06d1      	lsls	r1, r2, #27
 8013fac:	bf5f      	itttt	pl
 8013fae:	681a      	ldrpl	r2, [r3, #0]
 8013fb0:	1d11      	addpl	r1, r2, #4
 8013fb2:	6019      	strpl	r1, [r3, #0]
 8013fb4:	6816      	ldrpl	r6, [r2, #0]
 8013fb6:	2700      	movs	r7, #0
 8013fb8:	69a0      	ldr	r0, [r4, #24]
 8013fba:	b188      	cbz	r0, 8013fe0 <_scanf_chars+0x58>
 8013fbc:	2801      	cmp	r0, #1
 8013fbe:	d107      	bne.n	8013fd0 <_scanf_chars+0x48>
 8013fc0:	682b      	ldr	r3, [r5, #0]
 8013fc2:	781a      	ldrb	r2, [r3, #0]
 8013fc4:	6963      	ldr	r3, [r4, #20]
 8013fc6:	5c9b      	ldrb	r3, [r3, r2]
 8013fc8:	b953      	cbnz	r3, 8013fe0 <_scanf_chars+0x58>
 8013fca:	bb27      	cbnz	r7, 8014016 <_scanf_chars+0x8e>
 8013fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fd0:	2802      	cmp	r0, #2
 8013fd2:	d120      	bne.n	8014016 <_scanf_chars+0x8e>
 8013fd4:	682b      	ldr	r3, [r5, #0]
 8013fd6:	781b      	ldrb	r3, [r3, #0]
 8013fd8:	f813 3009 	ldrb.w	r3, [r3, r9]
 8013fdc:	071b      	lsls	r3, r3, #28
 8013fde:	d41a      	bmi.n	8014016 <_scanf_chars+0x8e>
 8013fe0:	6823      	ldr	r3, [r4, #0]
 8013fe2:	06da      	lsls	r2, r3, #27
 8013fe4:	bf5e      	ittt	pl
 8013fe6:	682b      	ldrpl	r3, [r5, #0]
 8013fe8:	781b      	ldrbpl	r3, [r3, #0]
 8013fea:	f806 3b01 	strbpl.w	r3, [r6], #1
 8013fee:	682a      	ldr	r2, [r5, #0]
 8013ff0:	686b      	ldr	r3, [r5, #4]
 8013ff2:	3201      	adds	r2, #1
 8013ff4:	602a      	str	r2, [r5, #0]
 8013ff6:	68a2      	ldr	r2, [r4, #8]
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	3a01      	subs	r2, #1
 8013ffc:	606b      	str	r3, [r5, #4]
 8013ffe:	3701      	adds	r7, #1
 8014000:	60a2      	str	r2, [r4, #8]
 8014002:	b142      	cbz	r2, 8014016 <_scanf_chars+0x8e>
 8014004:	2b00      	cmp	r3, #0
 8014006:	dcd7      	bgt.n	8013fb8 <_scanf_chars+0x30>
 8014008:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801400c:	4629      	mov	r1, r5
 801400e:	4640      	mov	r0, r8
 8014010:	4798      	blx	r3
 8014012:	2800      	cmp	r0, #0
 8014014:	d0d0      	beq.n	8013fb8 <_scanf_chars+0x30>
 8014016:	6823      	ldr	r3, [r4, #0]
 8014018:	f013 0310 	ands.w	r3, r3, #16
 801401c:	d105      	bne.n	801402a <_scanf_chars+0xa2>
 801401e:	68e2      	ldr	r2, [r4, #12]
 8014020:	3201      	adds	r2, #1
 8014022:	60e2      	str	r2, [r4, #12]
 8014024:	69a2      	ldr	r2, [r4, #24]
 8014026:	b102      	cbz	r2, 801402a <_scanf_chars+0xa2>
 8014028:	7033      	strb	r3, [r6, #0]
 801402a:	6923      	ldr	r3, [r4, #16]
 801402c:	441f      	add	r7, r3
 801402e:	6127      	str	r7, [r4, #16]
 8014030:	2000      	movs	r0, #0
 8014032:	e7cb      	b.n	8013fcc <_scanf_chars+0x44>
 8014034:	08016231 	.word	0x08016231

08014038 <_scanf_i>:
 8014038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801403c:	4698      	mov	r8, r3
 801403e:	4b74      	ldr	r3, [pc, #464]	; (8014210 <_scanf_i+0x1d8>)
 8014040:	460c      	mov	r4, r1
 8014042:	4682      	mov	sl, r0
 8014044:	4616      	mov	r6, r2
 8014046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801404a:	b087      	sub	sp, #28
 801404c:	ab03      	add	r3, sp, #12
 801404e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014052:	4b70      	ldr	r3, [pc, #448]	; (8014214 <_scanf_i+0x1dc>)
 8014054:	69a1      	ldr	r1, [r4, #24]
 8014056:	4a70      	ldr	r2, [pc, #448]	; (8014218 <_scanf_i+0x1e0>)
 8014058:	2903      	cmp	r1, #3
 801405a:	bf18      	it	ne
 801405c:	461a      	movne	r2, r3
 801405e:	68a3      	ldr	r3, [r4, #8]
 8014060:	9201      	str	r2, [sp, #4]
 8014062:	1e5a      	subs	r2, r3, #1
 8014064:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014068:	bf88      	it	hi
 801406a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801406e:	4627      	mov	r7, r4
 8014070:	bf82      	ittt	hi
 8014072:	eb03 0905 	addhi.w	r9, r3, r5
 8014076:	f240 135d 	movwhi	r3, #349	; 0x15d
 801407a:	60a3      	strhi	r3, [r4, #8]
 801407c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014080:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014084:	bf98      	it	ls
 8014086:	f04f 0900 	movls.w	r9, #0
 801408a:	6023      	str	r3, [r4, #0]
 801408c:	463d      	mov	r5, r7
 801408e:	f04f 0b00 	mov.w	fp, #0
 8014092:	6831      	ldr	r1, [r6, #0]
 8014094:	ab03      	add	r3, sp, #12
 8014096:	7809      	ldrb	r1, [r1, #0]
 8014098:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801409c:	2202      	movs	r2, #2
 801409e:	f7ec f8bf 	bl	8000220 <memchr>
 80140a2:	b328      	cbz	r0, 80140f0 <_scanf_i+0xb8>
 80140a4:	f1bb 0f01 	cmp.w	fp, #1
 80140a8:	d159      	bne.n	801415e <_scanf_i+0x126>
 80140aa:	6862      	ldr	r2, [r4, #4]
 80140ac:	b92a      	cbnz	r2, 80140ba <_scanf_i+0x82>
 80140ae:	6822      	ldr	r2, [r4, #0]
 80140b0:	2308      	movs	r3, #8
 80140b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80140b6:	6063      	str	r3, [r4, #4]
 80140b8:	6022      	str	r2, [r4, #0]
 80140ba:	6822      	ldr	r2, [r4, #0]
 80140bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80140c0:	6022      	str	r2, [r4, #0]
 80140c2:	68a2      	ldr	r2, [r4, #8]
 80140c4:	1e51      	subs	r1, r2, #1
 80140c6:	60a1      	str	r1, [r4, #8]
 80140c8:	b192      	cbz	r2, 80140f0 <_scanf_i+0xb8>
 80140ca:	6832      	ldr	r2, [r6, #0]
 80140cc:	1c51      	adds	r1, r2, #1
 80140ce:	6031      	str	r1, [r6, #0]
 80140d0:	7812      	ldrb	r2, [r2, #0]
 80140d2:	f805 2b01 	strb.w	r2, [r5], #1
 80140d6:	6872      	ldr	r2, [r6, #4]
 80140d8:	3a01      	subs	r2, #1
 80140da:	2a00      	cmp	r2, #0
 80140dc:	6072      	str	r2, [r6, #4]
 80140de:	dc07      	bgt.n	80140f0 <_scanf_i+0xb8>
 80140e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80140e4:	4631      	mov	r1, r6
 80140e6:	4650      	mov	r0, sl
 80140e8:	4790      	blx	r2
 80140ea:	2800      	cmp	r0, #0
 80140ec:	f040 8085 	bne.w	80141fa <_scanf_i+0x1c2>
 80140f0:	f10b 0b01 	add.w	fp, fp, #1
 80140f4:	f1bb 0f03 	cmp.w	fp, #3
 80140f8:	d1cb      	bne.n	8014092 <_scanf_i+0x5a>
 80140fa:	6863      	ldr	r3, [r4, #4]
 80140fc:	b90b      	cbnz	r3, 8014102 <_scanf_i+0xca>
 80140fe:	230a      	movs	r3, #10
 8014100:	6063      	str	r3, [r4, #4]
 8014102:	6863      	ldr	r3, [r4, #4]
 8014104:	4945      	ldr	r1, [pc, #276]	; (801421c <_scanf_i+0x1e4>)
 8014106:	6960      	ldr	r0, [r4, #20]
 8014108:	1ac9      	subs	r1, r1, r3
 801410a:	f000 f8a5 	bl	8014258 <__sccl>
 801410e:	f04f 0b00 	mov.w	fp, #0
 8014112:	68a3      	ldr	r3, [r4, #8]
 8014114:	6822      	ldr	r2, [r4, #0]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d03d      	beq.n	8014196 <_scanf_i+0x15e>
 801411a:	6831      	ldr	r1, [r6, #0]
 801411c:	6960      	ldr	r0, [r4, #20]
 801411e:	f891 c000 	ldrb.w	ip, [r1]
 8014122:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014126:	2800      	cmp	r0, #0
 8014128:	d035      	beq.n	8014196 <_scanf_i+0x15e>
 801412a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801412e:	d124      	bne.n	801417a <_scanf_i+0x142>
 8014130:	0510      	lsls	r0, r2, #20
 8014132:	d522      	bpl.n	801417a <_scanf_i+0x142>
 8014134:	f10b 0b01 	add.w	fp, fp, #1
 8014138:	f1b9 0f00 	cmp.w	r9, #0
 801413c:	d003      	beq.n	8014146 <_scanf_i+0x10e>
 801413e:	3301      	adds	r3, #1
 8014140:	f109 39ff 	add.w	r9, r9, #4294967295
 8014144:	60a3      	str	r3, [r4, #8]
 8014146:	6873      	ldr	r3, [r6, #4]
 8014148:	3b01      	subs	r3, #1
 801414a:	2b00      	cmp	r3, #0
 801414c:	6073      	str	r3, [r6, #4]
 801414e:	dd1b      	ble.n	8014188 <_scanf_i+0x150>
 8014150:	6833      	ldr	r3, [r6, #0]
 8014152:	3301      	adds	r3, #1
 8014154:	6033      	str	r3, [r6, #0]
 8014156:	68a3      	ldr	r3, [r4, #8]
 8014158:	3b01      	subs	r3, #1
 801415a:	60a3      	str	r3, [r4, #8]
 801415c:	e7d9      	b.n	8014112 <_scanf_i+0xda>
 801415e:	f1bb 0f02 	cmp.w	fp, #2
 8014162:	d1ae      	bne.n	80140c2 <_scanf_i+0x8a>
 8014164:	6822      	ldr	r2, [r4, #0]
 8014166:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801416a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801416e:	d1bf      	bne.n	80140f0 <_scanf_i+0xb8>
 8014170:	2310      	movs	r3, #16
 8014172:	6063      	str	r3, [r4, #4]
 8014174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014178:	e7a2      	b.n	80140c0 <_scanf_i+0x88>
 801417a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801417e:	6022      	str	r2, [r4, #0]
 8014180:	780b      	ldrb	r3, [r1, #0]
 8014182:	f805 3b01 	strb.w	r3, [r5], #1
 8014186:	e7de      	b.n	8014146 <_scanf_i+0x10e>
 8014188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801418c:	4631      	mov	r1, r6
 801418e:	4650      	mov	r0, sl
 8014190:	4798      	blx	r3
 8014192:	2800      	cmp	r0, #0
 8014194:	d0df      	beq.n	8014156 <_scanf_i+0x11e>
 8014196:	6823      	ldr	r3, [r4, #0]
 8014198:	05d9      	lsls	r1, r3, #23
 801419a:	d50d      	bpl.n	80141b8 <_scanf_i+0x180>
 801419c:	42bd      	cmp	r5, r7
 801419e:	d909      	bls.n	80141b4 <_scanf_i+0x17c>
 80141a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80141a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80141a8:	4632      	mov	r2, r6
 80141aa:	4650      	mov	r0, sl
 80141ac:	4798      	blx	r3
 80141ae:	f105 39ff 	add.w	r9, r5, #4294967295
 80141b2:	464d      	mov	r5, r9
 80141b4:	42bd      	cmp	r5, r7
 80141b6:	d028      	beq.n	801420a <_scanf_i+0x1d2>
 80141b8:	6822      	ldr	r2, [r4, #0]
 80141ba:	f012 0210 	ands.w	r2, r2, #16
 80141be:	d113      	bne.n	80141e8 <_scanf_i+0x1b0>
 80141c0:	702a      	strb	r2, [r5, #0]
 80141c2:	6863      	ldr	r3, [r4, #4]
 80141c4:	9e01      	ldr	r6, [sp, #4]
 80141c6:	4639      	mov	r1, r7
 80141c8:	4650      	mov	r0, sl
 80141ca:	47b0      	blx	r6
 80141cc:	f8d8 3000 	ldr.w	r3, [r8]
 80141d0:	6821      	ldr	r1, [r4, #0]
 80141d2:	1d1a      	adds	r2, r3, #4
 80141d4:	f8c8 2000 	str.w	r2, [r8]
 80141d8:	f011 0f20 	tst.w	r1, #32
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	d00f      	beq.n	8014200 <_scanf_i+0x1c8>
 80141e0:	6018      	str	r0, [r3, #0]
 80141e2:	68e3      	ldr	r3, [r4, #12]
 80141e4:	3301      	adds	r3, #1
 80141e6:	60e3      	str	r3, [r4, #12]
 80141e8:	1bed      	subs	r5, r5, r7
 80141ea:	44ab      	add	fp, r5
 80141ec:	6925      	ldr	r5, [r4, #16]
 80141ee:	445d      	add	r5, fp
 80141f0:	6125      	str	r5, [r4, #16]
 80141f2:	2000      	movs	r0, #0
 80141f4:	b007      	add	sp, #28
 80141f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141fa:	f04f 0b00 	mov.w	fp, #0
 80141fe:	e7ca      	b.n	8014196 <_scanf_i+0x15e>
 8014200:	07ca      	lsls	r2, r1, #31
 8014202:	bf4c      	ite	mi
 8014204:	8018      	strhmi	r0, [r3, #0]
 8014206:	6018      	strpl	r0, [r3, #0]
 8014208:	e7eb      	b.n	80141e2 <_scanf_i+0x1aa>
 801420a:	2001      	movs	r0, #1
 801420c:	e7f2      	b.n	80141f4 <_scanf_i+0x1bc>
 801420e:	bf00      	nop
 8014210:	08016134 	.word	0x08016134
 8014214:	080143c5 	.word	0x080143c5
 8014218:	08011221 	.word	0x08011221
 801421c:	080166be 	.word	0x080166be

08014220 <_read_r>:
 8014220:	b538      	push	{r3, r4, r5, lr}
 8014222:	4d07      	ldr	r5, [pc, #28]	; (8014240 <_read_r+0x20>)
 8014224:	4604      	mov	r4, r0
 8014226:	4608      	mov	r0, r1
 8014228:	4611      	mov	r1, r2
 801422a:	2200      	movs	r2, #0
 801422c:	602a      	str	r2, [r5, #0]
 801422e:	461a      	mov	r2, r3
 8014230:	f7f0 fb1c 	bl	800486c <_read>
 8014234:	1c43      	adds	r3, r0, #1
 8014236:	d102      	bne.n	801423e <_read_r+0x1e>
 8014238:	682b      	ldr	r3, [r5, #0]
 801423a:	b103      	cbz	r3, 801423e <_read_r+0x1e>
 801423c:	6023      	str	r3, [r4, #0]
 801423e:	bd38      	pop	{r3, r4, r5, pc}
 8014240:	20001a6c 	.word	0x20001a6c
 8014244:	00000000 	.word	0x00000000

08014248 <nan>:
 8014248:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014250 <nan+0x8>
 801424c:	4770      	bx	lr
 801424e:	bf00      	nop
 8014250:	00000000 	.word	0x00000000
 8014254:	7ff80000 	.word	0x7ff80000

08014258 <__sccl>:
 8014258:	b570      	push	{r4, r5, r6, lr}
 801425a:	780b      	ldrb	r3, [r1, #0]
 801425c:	4604      	mov	r4, r0
 801425e:	2b5e      	cmp	r3, #94	; 0x5e
 8014260:	bf0b      	itete	eq
 8014262:	784b      	ldrbeq	r3, [r1, #1]
 8014264:	1c48      	addne	r0, r1, #1
 8014266:	1c88      	addeq	r0, r1, #2
 8014268:	2200      	movne	r2, #0
 801426a:	bf08      	it	eq
 801426c:	2201      	moveq	r2, #1
 801426e:	1e61      	subs	r1, r4, #1
 8014270:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014274:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014278:	42a9      	cmp	r1, r5
 801427a:	d1fb      	bne.n	8014274 <__sccl+0x1c>
 801427c:	b90b      	cbnz	r3, 8014282 <__sccl+0x2a>
 801427e:	3801      	subs	r0, #1
 8014280:	bd70      	pop	{r4, r5, r6, pc}
 8014282:	f082 0101 	eor.w	r1, r2, #1
 8014286:	54e1      	strb	r1, [r4, r3]
 8014288:	1c42      	adds	r2, r0, #1
 801428a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801428e:	2d2d      	cmp	r5, #45	; 0x2d
 8014290:	f102 36ff 	add.w	r6, r2, #4294967295
 8014294:	4610      	mov	r0, r2
 8014296:	d006      	beq.n	80142a6 <__sccl+0x4e>
 8014298:	2d5d      	cmp	r5, #93	; 0x5d
 801429a:	d0f1      	beq.n	8014280 <__sccl+0x28>
 801429c:	b90d      	cbnz	r5, 80142a2 <__sccl+0x4a>
 801429e:	4630      	mov	r0, r6
 80142a0:	e7ee      	b.n	8014280 <__sccl+0x28>
 80142a2:	462b      	mov	r3, r5
 80142a4:	e7ef      	b.n	8014286 <__sccl+0x2e>
 80142a6:	7816      	ldrb	r6, [r2, #0]
 80142a8:	2e5d      	cmp	r6, #93	; 0x5d
 80142aa:	d0fa      	beq.n	80142a2 <__sccl+0x4a>
 80142ac:	42b3      	cmp	r3, r6
 80142ae:	dcf8      	bgt.n	80142a2 <__sccl+0x4a>
 80142b0:	4618      	mov	r0, r3
 80142b2:	3001      	adds	r0, #1
 80142b4:	4286      	cmp	r6, r0
 80142b6:	5421      	strb	r1, [r4, r0]
 80142b8:	dcfb      	bgt.n	80142b2 <__sccl+0x5a>
 80142ba:	43d8      	mvns	r0, r3
 80142bc:	4430      	add	r0, r6
 80142be:	1c5d      	adds	r5, r3, #1
 80142c0:	42b3      	cmp	r3, r6
 80142c2:	bfa8      	it	ge
 80142c4:	2000      	movge	r0, #0
 80142c6:	182b      	adds	r3, r5, r0
 80142c8:	3202      	adds	r2, #2
 80142ca:	e7de      	b.n	801428a <__sccl+0x32>

080142cc <_strtoul_l.isra.0>:
 80142cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80142d0:	4e3b      	ldr	r6, [pc, #236]	; (80143c0 <_strtoul_l.isra.0+0xf4>)
 80142d2:	4686      	mov	lr, r0
 80142d4:	468c      	mov	ip, r1
 80142d6:	4660      	mov	r0, ip
 80142d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80142dc:	5da5      	ldrb	r5, [r4, r6]
 80142de:	f015 0508 	ands.w	r5, r5, #8
 80142e2:	d1f8      	bne.n	80142d6 <_strtoul_l.isra.0+0xa>
 80142e4:	2c2d      	cmp	r4, #45	; 0x2d
 80142e6:	d134      	bne.n	8014352 <_strtoul_l.isra.0+0x86>
 80142e8:	f89c 4000 	ldrb.w	r4, [ip]
 80142ec:	f04f 0801 	mov.w	r8, #1
 80142f0:	f100 0c02 	add.w	ip, r0, #2
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d05e      	beq.n	80143b6 <_strtoul_l.isra.0+0xea>
 80142f8:	2b10      	cmp	r3, #16
 80142fa:	d10c      	bne.n	8014316 <_strtoul_l.isra.0+0x4a>
 80142fc:	2c30      	cmp	r4, #48	; 0x30
 80142fe:	d10a      	bne.n	8014316 <_strtoul_l.isra.0+0x4a>
 8014300:	f89c 0000 	ldrb.w	r0, [ip]
 8014304:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014308:	2858      	cmp	r0, #88	; 0x58
 801430a:	d14f      	bne.n	80143ac <_strtoul_l.isra.0+0xe0>
 801430c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8014310:	2310      	movs	r3, #16
 8014312:	f10c 0c02 	add.w	ip, ip, #2
 8014316:	f04f 37ff 	mov.w	r7, #4294967295
 801431a:	2500      	movs	r5, #0
 801431c:	fbb7 f7f3 	udiv	r7, r7, r3
 8014320:	fb03 f907 	mul.w	r9, r3, r7
 8014324:	ea6f 0909 	mvn.w	r9, r9
 8014328:	4628      	mov	r0, r5
 801432a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801432e:	2e09      	cmp	r6, #9
 8014330:	d818      	bhi.n	8014364 <_strtoul_l.isra.0+0x98>
 8014332:	4634      	mov	r4, r6
 8014334:	42a3      	cmp	r3, r4
 8014336:	dd24      	ble.n	8014382 <_strtoul_l.isra.0+0xb6>
 8014338:	2d00      	cmp	r5, #0
 801433a:	db1f      	blt.n	801437c <_strtoul_l.isra.0+0xb0>
 801433c:	4287      	cmp	r7, r0
 801433e:	d31d      	bcc.n	801437c <_strtoul_l.isra.0+0xb0>
 8014340:	d101      	bne.n	8014346 <_strtoul_l.isra.0+0x7a>
 8014342:	45a1      	cmp	r9, r4
 8014344:	db1a      	blt.n	801437c <_strtoul_l.isra.0+0xb0>
 8014346:	fb00 4003 	mla	r0, r0, r3, r4
 801434a:	2501      	movs	r5, #1
 801434c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8014350:	e7eb      	b.n	801432a <_strtoul_l.isra.0+0x5e>
 8014352:	2c2b      	cmp	r4, #43	; 0x2b
 8014354:	bf08      	it	eq
 8014356:	f89c 4000 	ldrbeq.w	r4, [ip]
 801435a:	46a8      	mov	r8, r5
 801435c:	bf08      	it	eq
 801435e:	f100 0c02 	addeq.w	ip, r0, #2
 8014362:	e7c7      	b.n	80142f4 <_strtoul_l.isra.0+0x28>
 8014364:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8014368:	2e19      	cmp	r6, #25
 801436a:	d801      	bhi.n	8014370 <_strtoul_l.isra.0+0xa4>
 801436c:	3c37      	subs	r4, #55	; 0x37
 801436e:	e7e1      	b.n	8014334 <_strtoul_l.isra.0+0x68>
 8014370:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8014374:	2e19      	cmp	r6, #25
 8014376:	d804      	bhi.n	8014382 <_strtoul_l.isra.0+0xb6>
 8014378:	3c57      	subs	r4, #87	; 0x57
 801437a:	e7db      	b.n	8014334 <_strtoul_l.isra.0+0x68>
 801437c:	f04f 35ff 	mov.w	r5, #4294967295
 8014380:	e7e4      	b.n	801434c <_strtoul_l.isra.0+0x80>
 8014382:	2d00      	cmp	r5, #0
 8014384:	da07      	bge.n	8014396 <_strtoul_l.isra.0+0xca>
 8014386:	2322      	movs	r3, #34	; 0x22
 8014388:	f8ce 3000 	str.w	r3, [lr]
 801438c:	f04f 30ff 	mov.w	r0, #4294967295
 8014390:	b942      	cbnz	r2, 80143a4 <_strtoul_l.isra.0+0xd8>
 8014392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014396:	f1b8 0f00 	cmp.w	r8, #0
 801439a:	d000      	beq.n	801439e <_strtoul_l.isra.0+0xd2>
 801439c:	4240      	negs	r0, r0
 801439e:	2a00      	cmp	r2, #0
 80143a0:	d0f7      	beq.n	8014392 <_strtoul_l.isra.0+0xc6>
 80143a2:	b10d      	cbz	r5, 80143a8 <_strtoul_l.isra.0+0xdc>
 80143a4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80143a8:	6011      	str	r1, [r2, #0]
 80143aa:	e7f2      	b.n	8014392 <_strtoul_l.isra.0+0xc6>
 80143ac:	2430      	movs	r4, #48	; 0x30
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d1b1      	bne.n	8014316 <_strtoul_l.isra.0+0x4a>
 80143b2:	2308      	movs	r3, #8
 80143b4:	e7af      	b.n	8014316 <_strtoul_l.isra.0+0x4a>
 80143b6:	2c30      	cmp	r4, #48	; 0x30
 80143b8:	d0a2      	beq.n	8014300 <_strtoul_l.isra.0+0x34>
 80143ba:	230a      	movs	r3, #10
 80143bc:	e7ab      	b.n	8014316 <_strtoul_l.isra.0+0x4a>
 80143be:	bf00      	nop
 80143c0:	08016231 	.word	0x08016231

080143c4 <_strtoul_r>:
 80143c4:	f7ff bf82 	b.w	80142cc <_strtoul_l.isra.0>

080143c8 <__submore>:
 80143c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143cc:	460c      	mov	r4, r1
 80143ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80143d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80143d4:	4299      	cmp	r1, r3
 80143d6:	d11d      	bne.n	8014414 <__submore+0x4c>
 80143d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80143dc:	f7fb f83e 	bl	800f45c <_malloc_r>
 80143e0:	b918      	cbnz	r0, 80143ea <__submore+0x22>
 80143e2:	f04f 30ff 	mov.w	r0, #4294967295
 80143e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143ee:	63a3      	str	r3, [r4, #56]	; 0x38
 80143f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80143f4:	6360      	str	r0, [r4, #52]	; 0x34
 80143f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80143fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80143fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014402:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014406:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801440a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801440e:	6020      	str	r0, [r4, #0]
 8014410:	2000      	movs	r0, #0
 8014412:	e7e8      	b.n	80143e6 <__submore+0x1e>
 8014414:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014416:	0077      	lsls	r7, r6, #1
 8014418:	463a      	mov	r2, r7
 801441a:	f000 f889 	bl	8014530 <_realloc_r>
 801441e:	4605      	mov	r5, r0
 8014420:	2800      	cmp	r0, #0
 8014422:	d0de      	beq.n	80143e2 <__submore+0x1a>
 8014424:	eb00 0806 	add.w	r8, r0, r6
 8014428:	4601      	mov	r1, r0
 801442a:	4632      	mov	r2, r6
 801442c:	4640      	mov	r0, r8
 801442e:	f7fa ffaf 	bl	800f390 <memcpy>
 8014432:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014436:	f8c4 8000 	str.w	r8, [r4]
 801443a:	e7e9      	b.n	8014410 <__submore+0x48>

0801443c <__ascii_wctomb>:
 801443c:	b149      	cbz	r1, 8014452 <__ascii_wctomb+0x16>
 801443e:	2aff      	cmp	r2, #255	; 0xff
 8014440:	bf85      	ittet	hi
 8014442:	238a      	movhi	r3, #138	; 0x8a
 8014444:	6003      	strhi	r3, [r0, #0]
 8014446:	700a      	strbls	r2, [r1, #0]
 8014448:	f04f 30ff 	movhi.w	r0, #4294967295
 801444c:	bf98      	it	ls
 801444e:	2001      	movls	r0, #1
 8014450:	4770      	bx	lr
 8014452:	4608      	mov	r0, r1
 8014454:	4770      	bx	lr
	...

08014458 <__assert_func>:
 8014458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801445a:	4614      	mov	r4, r2
 801445c:	461a      	mov	r2, r3
 801445e:	4b09      	ldr	r3, [pc, #36]	; (8014484 <__assert_func+0x2c>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	4605      	mov	r5, r0
 8014464:	68d8      	ldr	r0, [r3, #12]
 8014466:	b14c      	cbz	r4, 801447c <__assert_func+0x24>
 8014468:	4b07      	ldr	r3, [pc, #28]	; (8014488 <__assert_func+0x30>)
 801446a:	9100      	str	r1, [sp, #0]
 801446c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014470:	4906      	ldr	r1, [pc, #24]	; (801448c <__assert_func+0x34>)
 8014472:	462b      	mov	r3, r5
 8014474:	f000 f80e 	bl	8014494 <fiprintf>
 8014478:	f000 f880 	bl	801457c <abort>
 801447c:	4b04      	ldr	r3, [pc, #16]	; (8014490 <__assert_func+0x38>)
 801447e:	461c      	mov	r4, r3
 8014480:	e7f3      	b.n	801446a <__assert_func+0x12>
 8014482:	bf00      	nop
 8014484:	20000028 	.word	0x20000028
 8014488:	080166c0 	.word	0x080166c0
 801448c:	080166cd 	.word	0x080166cd
 8014490:	080166fb 	.word	0x080166fb

08014494 <fiprintf>:
 8014494:	b40e      	push	{r1, r2, r3}
 8014496:	b503      	push	{r0, r1, lr}
 8014498:	4601      	mov	r1, r0
 801449a:	ab03      	add	r3, sp, #12
 801449c:	4805      	ldr	r0, [pc, #20]	; (80144b4 <fiprintf+0x20>)
 801449e:	f853 2b04 	ldr.w	r2, [r3], #4
 80144a2:	6800      	ldr	r0, [r0, #0]
 80144a4:	9301      	str	r3, [sp, #4]
 80144a6:	f7ff fc3f 	bl	8013d28 <_vfiprintf_r>
 80144aa:	b002      	add	sp, #8
 80144ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80144b0:	b003      	add	sp, #12
 80144b2:	4770      	bx	lr
 80144b4:	20000028 	.word	0x20000028

080144b8 <_fstat_r>:
 80144b8:	b538      	push	{r3, r4, r5, lr}
 80144ba:	4d07      	ldr	r5, [pc, #28]	; (80144d8 <_fstat_r+0x20>)
 80144bc:	2300      	movs	r3, #0
 80144be:	4604      	mov	r4, r0
 80144c0:	4608      	mov	r0, r1
 80144c2:	4611      	mov	r1, r2
 80144c4:	602b      	str	r3, [r5, #0]
 80144c6:	f7f0 fa16 	bl	80048f6 <_fstat>
 80144ca:	1c43      	adds	r3, r0, #1
 80144cc:	d102      	bne.n	80144d4 <_fstat_r+0x1c>
 80144ce:	682b      	ldr	r3, [r5, #0]
 80144d0:	b103      	cbz	r3, 80144d4 <_fstat_r+0x1c>
 80144d2:	6023      	str	r3, [r4, #0]
 80144d4:	bd38      	pop	{r3, r4, r5, pc}
 80144d6:	bf00      	nop
 80144d8:	20001a6c 	.word	0x20001a6c

080144dc <_isatty_r>:
 80144dc:	b538      	push	{r3, r4, r5, lr}
 80144de:	4d06      	ldr	r5, [pc, #24]	; (80144f8 <_isatty_r+0x1c>)
 80144e0:	2300      	movs	r3, #0
 80144e2:	4604      	mov	r4, r0
 80144e4:	4608      	mov	r0, r1
 80144e6:	602b      	str	r3, [r5, #0]
 80144e8:	f7f0 fa15 	bl	8004916 <_isatty>
 80144ec:	1c43      	adds	r3, r0, #1
 80144ee:	d102      	bne.n	80144f6 <_isatty_r+0x1a>
 80144f0:	682b      	ldr	r3, [r5, #0]
 80144f2:	b103      	cbz	r3, 80144f6 <_isatty_r+0x1a>
 80144f4:	6023      	str	r3, [r4, #0]
 80144f6:	bd38      	pop	{r3, r4, r5, pc}
 80144f8:	20001a6c 	.word	0x20001a6c

080144fc <memmove>:
 80144fc:	4288      	cmp	r0, r1
 80144fe:	b510      	push	{r4, lr}
 8014500:	eb01 0402 	add.w	r4, r1, r2
 8014504:	d902      	bls.n	801450c <memmove+0x10>
 8014506:	4284      	cmp	r4, r0
 8014508:	4623      	mov	r3, r4
 801450a:	d807      	bhi.n	801451c <memmove+0x20>
 801450c:	1e43      	subs	r3, r0, #1
 801450e:	42a1      	cmp	r1, r4
 8014510:	d008      	beq.n	8014524 <memmove+0x28>
 8014512:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014516:	f803 2f01 	strb.w	r2, [r3, #1]!
 801451a:	e7f8      	b.n	801450e <memmove+0x12>
 801451c:	4402      	add	r2, r0
 801451e:	4601      	mov	r1, r0
 8014520:	428a      	cmp	r2, r1
 8014522:	d100      	bne.n	8014526 <memmove+0x2a>
 8014524:	bd10      	pop	{r4, pc}
 8014526:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801452a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801452e:	e7f7      	b.n	8014520 <memmove+0x24>

08014530 <_realloc_r>:
 8014530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014532:	4607      	mov	r7, r0
 8014534:	4614      	mov	r4, r2
 8014536:	460e      	mov	r6, r1
 8014538:	b921      	cbnz	r1, 8014544 <_realloc_r+0x14>
 801453a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801453e:	4611      	mov	r1, r2
 8014540:	f7fa bf8c 	b.w	800f45c <_malloc_r>
 8014544:	b922      	cbnz	r2, 8014550 <_realloc_r+0x20>
 8014546:	f7fa ff39 	bl	800f3bc <_free_r>
 801454a:	4625      	mov	r5, r4
 801454c:	4628      	mov	r0, r5
 801454e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014550:	f000 f81b 	bl	801458a <_malloc_usable_size_r>
 8014554:	42a0      	cmp	r0, r4
 8014556:	d20f      	bcs.n	8014578 <_realloc_r+0x48>
 8014558:	4621      	mov	r1, r4
 801455a:	4638      	mov	r0, r7
 801455c:	f7fa ff7e 	bl	800f45c <_malloc_r>
 8014560:	4605      	mov	r5, r0
 8014562:	2800      	cmp	r0, #0
 8014564:	d0f2      	beq.n	801454c <_realloc_r+0x1c>
 8014566:	4631      	mov	r1, r6
 8014568:	4622      	mov	r2, r4
 801456a:	f7fa ff11 	bl	800f390 <memcpy>
 801456e:	4631      	mov	r1, r6
 8014570:	4638      	mov	r0, r7
 8014572:	f7fa ff23 	bl	800f3bc <_free_r>
 8014576:	e7e9      	b.n	801454c <_realloc_r+0x1c>
 8014578:	4635      	mov	r5, r6
 801457a:	e7e7      	b.n	801454c <_realloc_r+0x1c>

0801457c <abort>:
 801457c:	b508      	push	{r3, lr}
 801457e:	2006      	movs	r0, #6
 8014580:	f000 f834 	bl	80145ec <raise>
 8014584:	2001      	movs	r0, #1
 8014586:	f7f0 f967 	bl	8004858 <_exit>

0801458a <_malloc_usable_size_r>:
 801458a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801458e:	1f18      	subs	r0, r3, #4
 8014590:	2b00      	cmp	r3, #0
 8014592:	bfbc      	itt	lt
 8014594:	580b      	ldrlt	r3, [r1, r0]
 8014596:	18c0      	addlt	r0, r0, r3
 8014598:	4770      	bx	lr

0801459a <_raise_r>:
 801459a:	291f      	cmp	r1, #31
 801459c:	b538      	push	{r3, r4, r5, lr}
 801459e:	4604      	mov	r4, r0
 80145a0:	460d      	mov	r5, r1
 80145a2:	d904      	bls.n	80145ae <_raise_r+0x14>
 80145a4:	2316      	movs	r3, #22
 80145a6:	6003      	str	r3, [r0, #0]
 80145a8:	f04f 30ff 	mov.w	r0, #4294967295
 80145ac:	bd38      	pop	{r3, r4, r5, pc}
 80145ae:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80145b0:	b112      	cbz	r2, 80145b8 <_raise_r+0x1e>
 80145b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80145b6:	b94b      	cbnz	r3, 80145cc <_raise_r+0x32>
 80145b8:	4620      	mov	r0, r4
 80145ba:	f000 f831 	bl	8014620 <_getpid_r>
 80145be:	462a      	mov	r2, r5
 80145c0:	4601      	mov	r1, r0
 80145c2:	4620      	mov	r0, r4
 80145c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145c8:	f000 b818 	b.w	80145fc <_kill_r>
 80145cc:	2b01      	cmp	r3, #1
 80145ce:	d00a      	beq.n	80145e6 <_raise_r+0x4c>
 80145d0:	1c59      	adds	r1, r3, #1
 80145d2:	d103      	bne.n	80145dc <_raise_r+0x42>
 80145d4:	2316      	movs	r3, #22
 80145d6:	6003      	str	r3, [r0, #0]
 80145d8:	2001      	movs	r0, #1
 80145da:	e7e7      	b.n	80145ac <_raise_r+0x12>
 80145dc:	2400      	movs	r4, #0
 80145de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80145e2:	4628      	mov	r0, r5
 80145e4:	4798      	blx	r3
 80145e6:	2000      	movs	r0, #0
 80145e8:	e7e0      	b.n	80145ac <_raise_r+0x12>
	...

080145ec <raise>:
 80145ec:	4b02      	ldr	r3, [pc, #8]	; (80145f8 <raise+0xc>)
 80145ee:	4601      	mov	r1, r0
 80145f0:	6818      	ldr	r0, [r3, #0]
 80145f2:	f7ff bfd2 	b.w	801459a <_raise_r>
 80145f6:	bf00      	nop
 80145f8:	20000028 	.word	0x20000028

080145fc <_kill_r>:
 80145fc:	b538      	push	{r3, r4, r5, lr}
 80145fe:	4d07      	ldr	r5, [pc, #28]	; (801461c <_kill_r+0x20>)
 8014600:	2300      	movs	r3, #0
 8014602:	4604      	mov	r4, r0
 8014604:	4608      	mov	r0, r1
 8014606:	4611      	mov	r1, r2
 8014608:	602b      	str	r3, [r5, #0]
 801460a:	f7f0 f915 	bl	8004838 <_kill>
 801460e:	1c43      	adds	r3, r0, #1
 8014610:	d102      	bne.n	8014618 <_kill_r+0x1c>
 8014612:	682b      	ldr	r3, [r5, #0]
 8014614:	b103      	cbz	r3, 8014618 <_kill_r+0x1c>
 8014616:	6023      	str	r3, [r4, #0]
 8014618:	bd38      	pop	{r3, r4, r5, pc}
 801461a:	bf00      	nop
 801461c:	20001a6c 	.word	0x20001a6c

08014620 <_getpid_r>:
 8014620:	f7f0 b902 	b.w	8004828 <_getpid>

08014624 <pow>:
 8014624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014628:	ec59 8b10 	vmov	r8, r9, d0
 801462c:	ec57 6b11 	vmov	r6, r7, d1
 8014630:	f000 f8a6 	bl	8014780 <__ieee754_pow>
 8014634:	4b4e      	ldr	r3, [pc, #312]	; (8014770 <pow+0x14c>)
 8014636:	f993 3000 	ldrsb.w	r3, [r3]
 801463a:	3301      	adds	r3, #1
 801463c:	ec55 4b10 	vmov	r4, r5, d0
 8014640:	d015      	beq.n	801466e <pow+0x4a>
 8014642:	4632      	mov	r2, r6
 8014644:	463b      	mov	r3, r7
 8014646:	4630      	mov	r0, r6
 8014648:	4639      	mov	r1, r7
 801464a:	f7ec fa8f 	bl	8000b6c <__aeabi_dcmpun>
 801464e:	b970      	cbnz	r0, 801466e <pow+0x4a>
 8014650:	4642      	mov	r2, r8
 8014652:	464b      	mov	r3, r9
 8014654:	4640      	mov	r0, r8
 8014656:	4649      	mov	r1, r9
 8014658:	f7ec fa88 	bl	8000b6c <__aeabi_dcmpun>
 801465c:	2200      	movs	r2, #0
 801465e:	2300      	movs	r3, #0
 8014660:	b148      	cbz	r0, 8014676 <pow+0x52>
 8014662:	4630      	mov	r0, r6
 8014664:	4639      	mov	r1, r7
 8014666:	f7ec fa4f 	bl	8000b08 <__aeabi_dcmpeq>
 801466a:	2800      	cmp	r0, #0
 801466c:	d17d      	bne.n	801476a <pow+0x146>
 801466e:	ec45 4b10 	vmov	d0, r4, r5
 8014672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014676:	4640      	mov	r0, r8
 8014678:	4649      	mov	r1, r9
 801467a:	f7ec fa45 	bl	8000b08 <__aeabi_dcmpeq>
 801467e:	b1e0      	cbz	r0, 80146ba <pow+0x96>
 8014680:	2200      	movs	r2, #0
 8014682:	2300      	movs	r3, #0
 8014684:	4630      	mov	r0, r6
 8014686:	4639      	mov	r1, r7
 8014688:	f7ec fa3e 	bl	8000b08 <__aeabi_dcmpeq>
 801468c:	2800      	cmp	r0, #0
 801468e:	d16c      	bne.n	801476a <pow+0x146>
 8014690:	ec47 6b10 	vmov	d0, r6, r7
 8014694:	f000 fe53 	bl	801533e <finite>
 8014698:	2800      	cmp	r0, #0
 801469a:	d0e8      	beq.n	801466e <pow+0x4a>
 801469c:	2200      	movs	r2, #0
 801469e:	2300      	movs	r3, #0
 80146a0:	4630      	mov	r0, r6
 80146a2:	4639      	mov	r1, r7
 80146a4:	f7ec fa3a 	bl	8000b1c <__aeabi_dcmplt>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d0e0      	beq.n	801466e <pow+0x4a>
 80146ac:	f7fa fe3e 	bl	800f32c <__errno>
 80146b0:	2321      	movs	r3, #33	; 0x21
 80146b2:	6003      	str	r3, [r0, #0]
 80146b4:	2400      	movs	r4, #0
 80146b6:	4d2f      	ldr	r5, [pc, #188]	; (8014774 <pow+0x150>)
 80146b8:	e7d9      	b.n	801466e <pow+0x4a>
 80146ba:	ec45 4b10 	vmov	d0, r4, r5
 80146be:	f000 fe3e 	bl	801533e <finite>
 80146c2:	bbb8      	cbnz	r0, 8014734 <pow+0x110>
 80146c4:	ec49 8b10 	vmov	d0, r8, r9
 80146c8:	f000 fe39 	bl	801533e <finite>
 80146cc:	b390      	cbz	r0, 8014734 <pow+0x110>
 80146ce:	ec47 6b10 	vmov	d0, r6, r7
 80146d2:	f000 fe34 	bl	801533e <finite>
 80146d6:	b368      	cbz	r0, 8014734 <pow+0x110>
 80146d8:	4622      	mov	r2, r4
 80146da:	462b      	mov	r3, r5
 80146dc:	4620      	mov	r0, r4
 80146de:	4629      	mov	r1, r5
 80146e0:	f7ec fa44 	bl	8000b6c <__aeabi_dcmpun>
 80146e4:	b160      	cbz	r0, 8014700 <pow+0xdc>
 80146e6:	f7fa fe21 	bl	800f32c <__errno>
 80146ea:	2321      	movs	r3, #33	; 0x21
 80146ec:	6003      	str	r3, [r0, #0]
 80146ee:	2200      	movs	r2, #0
 80146f0:	2300      	movs	r3, #0
 80146f2:	4610      	mov	r0, r2
 80146f4:	4619      	mov	r1, r3
 80146f6:	f7ec f8c9 	bl	800088c <__aeabi_ddiv>
 80146fa:	4604      	mov	r4, r0
 80146fc:	460d      	mov	r5, r1
 80146fe:	e7b6      	b.n	801466e <pow+0x4a>
 8014700:	f7fa fe14 	bl	800f32c <__errno>
 8014704:	2322      	movs	r3, #34	; 0x22
 8014706:	6003      	str	r3, [r0, #0]
 8014708:	2200      	movs	r2, #0
 801470a:	2300      	movs	r3, #0
 801470c:	4640      	mov	r0, r8
 801470e:	4649      	mov	r1, r9
 8014710:	f7ec fa04 	bl	8000b1c <__aeabi_dcmplt>
 8014714:	2400      	movs	r4, #0
 8014716:	b158      	cbz	r0, 8014730 <pow+0x10c>
 8014718:	ec47 6b10 	vmov	d0, r6, r7
 801471c:	f000 fe1a 	bl	8015354 <rint>
 8014720:	4632      	mov	r2, r6
 8014722:	ec51 0b10 	vmov	r0, r1, d0
 8014726:	463b      	mov	r3, r7
 8014728:	f7ec f9ee 	bl	8000b08 <__aeabi_dcmpeq>
 801472c:	2800      	cmp	r0, #0
 801472e:	d0c2      	beq.n	80146b6 <pow+0x92>
 8014730:	4d11      	ldr	r5, [pc, #68]	; (8014778 <pow+0x154>)
 8014732:	e79c      	b.n	801466e <pow+0x4a>
 8014734:	2200      	movs	r2, #0
 8014736:	2300      	movs	r3, #0
 8014738:	4620      	mov	r0, r4
 801473a:	4629      	mov	r1, r5
 801473c:	f7ec f9e4 	bl	8000b08 <__aeabi_dcmpeq>
 8014740:	2800      	cmp	r0, #0
 8014742:	d094      	beq.n	801466e <pow+0x4a>
 8014744:	ec49 8b10 	vmov	d0, r8, r9
 8014748:	f000 fdf9 	bl	801533e <finite>
 801474c:	2800      	cmp	r0, #0
 801474e:	d08e      	beq.n	801466e <pow+0x4a>
 8014750:	ec47 6b10 	vmov	d0, r6, r7
 8014754:	f000 fdf3 	bl	801533e <finite>
 8014758:	2800      	cmp	r0, #0
 801475a:	d088      	beq.n	801466e <pow+0x4a>
 801475c:	f7fa fde6 	bl	800f32c <__errno>
 8014760:	2322      	movs	r3, #34	; 0x22
 8014762:	6003      	str	r3, [r0, #0]
 8014764:	2400      	movs	r4, #0
 8014766:	2500      	movs	r5, #0
 8014768:	e781      	b.n	801466e <pow+0x4a>
 801476a:	4d04      	ldr	r5, [pc, #16]	; (801477c <pow+0x158>)
 801476c:	2400      	movs	r4, #0
 801476e:	e77e      	b.n	801466e <pow+0x4a>
 8014770:	200001fc 	.word	0x200001fc
 8014774:	fff00000 	.word	0xfff00000
 8014778:	7ff00000 	.word	0x7ff00000
 801477c:	3ff00000 	.word	0x3ff00000

08014780 <__ieee754_pow>:
 8014780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014784:	ed2d 8b06 	vpush	{d8-d10}
 8014788:	b08d      	sub	sp, #52	; 0x34
 801478a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801478e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8014792:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8014796:	ea56 0100 	orrs.w	r1, r6, r0
 801479a:	ec53 2b10 	vmov	r2, r3, d0
 801479e:	f000 84d1 	beq.w	8015144 <__ieee754_pow+0x9c4>
 80147a2:	497f      	ldr	r1, [pc, #508]	; (80149a0 <__ieee754_pow+0x220>)
 80147a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80147a8:	428c      	cmp	r4, r1
 80147aa:	ee10 8a10 	vmov	r8, s0
 80147ae:	4699      	mov	r9, r3
 80147b0:	dc09      	bgt.n	80147c6 <__ieee754_pow+0x46>
 80147b2:	d103      	bne.n	80147bc <__ieee754_pow+0x3c>
 80147b4:	b97a      	cbnz	r2, 80147d6 <__ieee754_pow+0x56>
 80147b6:	42a6      	cmp	r6, r4
 80147b8:	dd02      	ble.n	80147c0 <__ieee754_pow+0x40>
 80147ba:	e00c      	b.n	80147d6 <__ieee754_pow+0x56>
 80147bc:	428e      	cmp	r6, r1
 80147be:	dc02      	bgt.n	80147c6 <__ieee754_pow+0x46>
 80147c0:	428e      	cmp	r6, r1
 80147c2:	d110      	bne.n	80147e6 <__ieee754_pow+0x66>
 80147c4:	b178      	cbz	r0, 80147e6 <__ieee754_pow+0x66>
 80147c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80147ca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80147ce:	ea54 0308 	orrs.w	r3, r4, r8
 80147d2:	f000 84b7 	beq.w	8015144 <__ieee754_pow+0x9c4>
 80147d6:	4873      	ldr	r0, [pc, #460]	; (80149a4 <__ieee754_pow+0x224>)
 80147d8:	b00d      	add	sp, #52	; 0x34
 80147da:	ecbd 8b06 	vpop	{d8-d10}
 80147de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e2:	f7ff bd31 	b.w	8014248 <nan>
 80147e6:	f1b9 0f00 	cmp.w	r9, #0
 80147ea:	da36      	bge.n	801485a <__ieee754_pow+0xda>
 80147ec:	496e      	ldr	r1, [pc, #440]	; (80149a8 <__ieee754_pow+0x228>)
 80147ee:	428e      	cmp	r6, r1
 80147f0:	dc51      	bgt.n	8014896 <__ieee754_pow+0x116>
 80147f2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80147f6:	428e      	cmp	r6, r1
 80147f8:	f340 84af 	ble.w	801515a <__ieee754_pow+0x9da>
 80147fc:	1531      	asrs	r1, r6, #20
 80147fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014802:	2914      	cmp	r1, #20
 8014804:	dd0f      	ble.n	8014826 <__ieee754_pow+0xa6>
 8014806:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801480a:	fa20 fc01 	lsr.w	ip, r0, r1
 801480e:	fa0c f101 	lsl.w	r1, ip, r1
 8014812:	4281      	cmp	r1, r0
 8014814:	f040 84a1 	bne.w	801515a <__ieee754_pow+0x9da>
 8014818:	f00c 0c01 	and.w	ip, ip, #1
 801481c:	f1cc 0102 	rsb	r1, ip, #2
 8014820:	9100      	str	r1, [sp, #0]
 8014822:	b180      	cbz	r0, 8014846 <__ieee754_pow+0xc6>
 8014824:	e059      	b.n	80148da <__ieee754_pow+0x15a>
 8014826:	2800      	cmp	r0, #0
 8014828:	d155      	bne.n	80148d6 <__ieee754_pow+0x156>
 801482a:	f1c1 0114 	rsb	r1, r1, #20
 801482e:	fa46 fc01 	asr.w	ip, r6, r1
 8014832:	fa0c f101 	lsl.w	r1, ip, r1
 8014836:	42b1      	cmp	r1, r6
 8014838:	f040 848c 	bne.w	8015154 <__ieee754_pow+0x9d4>
 801483c:	f00c 0c01 	and.w	ip, ip, #1
 8014840:	f1cc 0102 	rsb	r1, ip, #2
 8014844:	9100      	str	r1, [sp, #0]
 8014846:	4959      	ldr	r1, [pc, #356]	; (80149ac <__ieee754_pow+0x22c>)
 8014848:	428e      	cmp	r6, r1
 801484a:	d12d      	bne.n	80148a8 <__ieee754_pow+0x128>
 801484c:	2f00      	cmp	r7, #0
 801484e:	da79      	bge.n	8014944 <__ieee754_pow+0x1c4>
 8014850:	4956      	ldr	r1, [pc, #344]	; (80149ac <__ieee754_pow+0x22c>)
 8014852:	2000      	movs	r0, #0
 8014854:	f7ec f81a 	bl	800088c <__aeabi_ddiv>
 8014858:	e016      	b.n	8014888 <__ieee754_pow+0x108>
 801485a:	2100      	movs	r1, #0
 801485c:	9100      	str	r1, [sp, #0]
 801485e:	2800      	cmp	r0, #0
 8014860:	d13b      	bne.n	80148da <__ieee754_pow+0x15a>
 8014862:	494f      	ldr	r1, [pc, #316]	; (80149a0 <__ieee754_pow+0x220>)
 8014864:	428e      	cmp	r6, r1
 8014866:	d1ee      	bne.n	8014846 <__ieee754_pow+0xc6>
 8014868:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801486c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014870:	ea53 0308 	orrs.w	r3, r3, r8
 8014874:	f000 8466 	beq.w	8015144 <__ieee754_pow+0x9c4>
 8014878:	4b4d      	ldr	r3, [pc, #308]	; (80149b0 <__ieee754_pow+0x230>)
 801487a:	429c      	cmp	r4, r3
 801487c:	dd0d      	ble.n	801489a <__ieee754_pow+0x11a>
 801487e:	2f00      	cmp	r7, #0
 8014880:	f280 8464 	bge.w	801514c <__ieee754_pow+0x9cc>
 8014884:	2000      	movs	r0, #0
 8014886:	2100      	movs	r1, #0
 8014888:	ec41 0b10 	vmov	d0, r0, r1
 801488c:	b00d      	add	sp, #52	; 0x34
 801488e:	ecbd 8b06 	vpop	{d8-d10}
 8014892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014896:	2102      	movs	r1, #2
 8014898:	e7e0      	b.n	801485c <__ieee754_pow+0xdc>
 801489a:	2f00      	cmp	r7, #0
 801489c:	daf2      	bge.n	8014884 <__ieee754_pow+0x104>
 801489e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80148a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80148a6:	e7ef      	b.n	8014888 <__ieee754_pow+0x108>
 80148a8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80148ac:	d104      	bne.n	80148b8 <__ieee754_pow+0x138>
 80148ae:	4610      	mov	r0, r2
 80148b0:	4619      	mov	r1, r3
 80148b2:	f7eb fec1 	bl	8000638 <__aeabi_dmul>
 80148b6:	e7e7      	b.n	8014888 <__ieee754_pow+0x108>
 80148b8:	493e      	ldr	r1, [pc, #248]	; (80149b4 <__ieee754_pow+0x234>)
 80148ba:	428f      	cmp	r7, r1
 80148bc:	d10d      	bne.n	80148da <__ieee754_pow+0x15a>
 80148be:	f1b9 0f00 	cmp.w	r9, #0
 80148c2:	db0a      	blt.n	80148da <__ieee754_pow+0x15a>
 80148c4:	ec43 2b10 	vmov	d0, r2, r3
 80148c8:	b00d      	add	sp, #52	; 0x34
 80148ca:	ecbd 8b06 	vpop	{d8-d10}
 80148ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148d2:	f000 bc77 	b.w	80151c4 <__ieee754_sqrt>
 80148d6:	2100      	movs	r1, #0
 80148d8:	9100      	str	r1, [sp, #0]
 80148da:	ec43 2b10 	vmov	d0, r2, r3
 80148de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80148e2:	f000 fd23 	bl	801532c <fabs>
 80148e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80148ea:	ec51 0b10 	vmov	r0, r1, d0
 80148ee:	f1b8 0f00 	cmp.w	r8, #0
 80148f2:	d12a      	bne.n	801494a <__ieee754_pow+0x1ca>
 80148f4:	b12c      	cbz	r4, 8014902 <__ieee754_pow+0x182>
 80148f6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80149ac <__ieee754_pow+0x22c>
 80148fa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80148fe:	45e6      	cmp	lr, ip
 8014900:	d123      	bne.n	801494a <__ieee754_pow+0x1ca>
 8014902:	2f00      	cmp	r7, #0
 8014904:	da05      	bge.n	8014912 <__ieee754_pow+0x192>
 8014906:	4602      	mov	r2, r0
 8014908:	460b      	mov	r3, r1
 801490a:	2000      	movs	r0, #0
 801490c:	4927      	ldr	r1, [pc, #156]	; (80149ac <__ieee754_pow+0x22c>)
 801490e:	f7eb ffbd 	bl	800088c <__aeabi_ddiv>
 8014912:	f1b9 0f00 	cmp.w	r9, #0
 8014916:	dab7      	bge.n	8014888 <__ieee754_pow+0x108>
 8014918:	9b00      	ldr	r3, [sp, #0]
 801491a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801491e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014922:	4323      	orrs	r3, r4
 8014924:	d108      	bne.n	8014938 <__ieee754_pow+0x1b8>
 8014926:	4602      	mov	r2, r0
 8014928:	460b      	mov	r3, r1
 801492a:	4610      	mov	r0, r2
 801492c:	4619      	mov	r1, r3
 801492e:	f7eb fccb 	bl	80002c8 <__aeabi_dsub>
 8014932:	4602      	mov	r2, r0
 8014934:	460b      	mov	r3, r1
 8014936:	e78d      	b.n	8014854 <__ieee754_pow+0xd4>
 8014938:	9b00      	ldr	r3, [sp, #0]
 801493a:	2b01      	cmp	r3, #1
 801493c:	d1a4      	bne.n	8014888 <__ieee754_pow+0x108>
 801493e:	4602      	mov	r2, r0
 8014940:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014944:	4610      	mov	r0, r2
 8014946:	4619      	mov	r1, r3
 8014948:	e79e      	b.n	8014888 <__ieee754_pow+0x108>
 801494a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801494e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8014952:	950a      	str	r5, [sp, #40]	; 0x28
 8014954:	9d00      	ldr	r5, [sp, #0]
 8014956:	46ac      	mov	ip, r5
 8014958:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801495a:	ea5c 0505 	orrs.w	r5, ip, r5
 801495e:	d0e4      	beq.n	801492a <__ieee754_pow+0x1aa>
 8014960:	4b15      	ldr	r3, [pc, #84]	; (80149b8 <__ieee754_pow+0x238>)
 8014962:	429e      	cmp	r6, r3
 8014964:	f340 80fc 	ble.w	8014b60 <__ieee754_pow+0x3e0>
 8014968:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801496c:	429e      	cmp	r6, r3
 801496e:	4b10      	ldr	r3, [pc, #64]	; (80149b0 <__ieee754_pow+0x230>)
 8014970:	dd07      	ble.n	8014982 <__ieee754_pow+0x202>
 8014972:	429c      	cmp	r4, r3
 8014974:	dc0a      	bgt.n	801498c <__ieee754_pow+0x20c>
 8014976:	2f00      	cmp	r7, #0
 8014978:	da84      	bge.n	8014884 <__ieee754_pow+0x104>
 801497a:	a307      	add	r3, pc, #28	; (adr r3, 8014998 <__ieee754_pow+0x218>)
 801497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014980:	e795      	b.n	80148ae <__ieee754_pow+0x12e>
 8014982:	429c      	cmp	r4, r3
 8014984:	dbf7      	blt.n	8014976 <__ieee754_pow+0x1f6>
 8014986:	4b09      	ldr	r3, [pc, #36]	; (80149ac <__ieee754_pow+0x22c>)
 8014988:	429c      	cmp	r4, r3
 801498a:	dd17      	ble.n	80149bc <__ieee754_pow+0x23c>
 801498c:	2f00      	cmp	r7, #0
 801498e:	dcf4      	bgt.n	801497a <__ieee754_pow+0x1fa>
 8014990:	e778      	b.n	8014884 <__ieee754_pow+0x104>
 8014992:	bf00      	nop
 8014994:	f3af 8000 	nop.w
 8014998:	8800759c 	.word	0x8800759c
 801499c:	7e37e43c 	.word	0x7e37e43c
 80149a0:	7ff00000 	.word	0x7ff00000
 80149a4:	080166fb 	.word	0x080166fb
 80149a8:	433fffff 	.word	0x433fffff
 80149ac:	3ff00000 	.word	0x3ff00000
 80149b0:	3fefffff 	.word	0x3fefffff
 80149b4:	3fe00000 	.word	0x3fe00000
 80149b8:	41e00000 	.word	0x41e00000
 80149bc:	4b64      	ldr	r3, [pc, #400]	; (8014b50 <__ieee754_pow+0x3d0>)
 80149be:	2200      	movs	r2, #0
 80149c0:	f7eb fc82 	bl	80002c8 <__aeabi_dsub>
 80149c4:	a356      	add	r3, pc, #344	; (adr r3, 8014b20 <__ieee754_pow+0x3a0>)
 80149c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ca:	4604      	mov	r4, r0
 80149cc:	460d      	mov	r5, r1
 80149ce:	f7eb fe33 	bl	8000638 <__aeabi_dmul>
 80149d2:	a355      	add	r3, pc, #340	; (adr r3, 8014b28 <__ieee754_pow+0x3a8>)
 80149d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d8:	4606      	mov	r6, r0
 80149da:	460f      	mov	r7, r1
 80149dc:	4620      	mov	r0, r4
 80149de:	4629      	mov	r1, r5
 80149e0:	f7eb fe2a 	bl	8000638 <__aeabi_dmul>
 80149e4:	4b5b      	ldr	r3, [pc, #364]	; (8014b54 <__ieee754_pow+0x3d4>)
 80149e6:	4682      	mov	sl, r0
 80149e8:	468b      	mov	fp, r1
 80149ea:	2200      	movs	r2, #0
 80149ec:	4620      	mov	r0, r4
 80149ee:	4629      	mov	r1, r5
 80149f0:	f7eb fe22 	bl	8000638 <__aeabi_dmul>
 80149f4:	4602      	mov	r2, r0
 80149f6:	460b      	mov	r3, r1
 80149f8:	a14d      	add	r1, pc, #308	; (adr r1, 8014b30 <__ieee754_pow+0x3b0>)
 80149fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80149fe:	f7eb fc63 	bl	80002c8 <__aeabi_dsub>
 8014a02:	4622      	mov	r2, r4
 8014a04:	462b      	mov	r3, r5
 8014a06:	f7eb fe17 	bl	8000638 <__aeabi_dmul>
 8014a0a:	4602      	mov	r2, r0
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	2000      	movs	r0, #0
 8014a10:	4951      	ldr	r1, [pc, #324]	; (8014b58 <__ieee754_pow+0x3d8>)
 8014a12:	f7eb fc59 	bl	80002c8 <__aeabi_dsub>
 8014a16:	4622      	mov	r2, r4
 8014a18:	4680      	mov	r8, r0
 8014a1a:	4689      	mov	r9, r1
 8014a1c:	462b      	mov	r3, r5
 8014a1e:	4620      	mov	r0, r4
 8014a20:	4629      	mov	r1, r5
 8014a22:	f7eb fe09 	bl	8000638 <__aeabi_dmul>
 8014a26:	4602      	mov	r2, r0
 8014a28:	460b      	mov	r3, r1
 8014a2a:	4640      	mov	r0, r8
 8014a2c:	4649      	mov	r1, r9
 8014a2e:	f7eb fe03 	bl	8000638 <__aeabi_dmul>
 8014a32:	a341      	add	r3, pc, #260	; (adr r3, 8014b38 <__ieee754_pow+0x3b8>)
 8014a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a38:	f7eb fdfe 	bl	8000638 <__aeabi_dmul>
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	460b      	mov	r3, r1
 8014a40:	4650      	mov	r0, sl
 8014a42:	4659      	mov	r1, fp
 8014a44:	f7eb fc40 	bl	80002c8 <__aeabi_dsub>
 8014a48:	4602      	mov	r2, r0
 8014a4a:	460b      	mov	r3, r1
 8014a4c:	4680      	mov	r8, r0
 8014a4e:	4689      	mov	r9, r1
 8014a50:	4630      	mov	r0, r6
 8014a52:	4639      	mov	r1, r7
 8014a54:	f7eb fc3a 	bl	80002cc <__adddf3>
 8014a58:	2400      	movs	r4, #0
 8014a5a:	4632      	mov	r2, r6
 8014a5c:	463b      	mov	r3, r7
 8014a5e:	4620      	mov	r0, r4
 8014a60:	460d      	mov	r5, r1
 8014a62:	f7eb fc31 	bl	80002c8 <__aeabi_dsub>
 8014a66:	4602      	mov	r2, r0
 8014a68:	460b      	mov	r3, r1
 8014a6a:	4640      	mov	r0, r8
 8014a6c:	4649      	mov	r1, r9
 8014a6e:	f7eb fc2b 	bl	80002c8 <__aeabi_dsub>
 8014a72:	9b00      	ldr	r3, [sp, #0]
 8014a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a76:	3b01      	subs	r3, #1
 8014a78:	4313      	orrs	r3, r2
 8014a7a:	4682      	mov	sl, r0
 8014a7c:	468b      	mov	fp, r1
 8014a7e:	f040 81f1 	bne.w	8014e64 <__ieee754_pow+0x6e4>
 8014a82:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8014b40 <__ieee754_pow+0x3c0>
 8014a86:	eeb0 8a47 	vmov.f32	s16, s14
 8014a8a:	eef0 8a67 	vmov.f32	s17, s15
 8014a8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8014a92:	2600      	movs	r6, #0
 8014a94:	4632      	mov	r2, r6
 8014a96:	463b      	mov	r3, r7
 8014a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a9c:	f7eb fc14 	bl	80002c8 <__aeabi_dsub>
 8014aa0:	4622      	mov	r2, r4
 8014aa2:	462b      	mov	r3, r5
 8014aa4:	f7eb fdc8 	bl	8000638 <__aeabi_dmul>
 8014aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014aac:	4680      	mov	r8, r0
 8014aae:	4689      	mov	r9, r1
 8014ab0:	4650      	mov	r0, sl
 8014ab2:	4659      	mov	r1, fp
 8014ab4:	f7eb fdc0 	bl	8000638 <__aeabi_dmul>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	4640      	mov	r0, r8
 8014abe:	4649      	mov	r1, r9
 8014ac0:	f7eb fc04 	bl	80002cc <__adddf3>
 8014ac4:	4632      	mov	r2, r6
 8014ac6:	463b      	mov	r3, r7
 8014ac8:	4680      	mov	r8, r0
 8014aca:	4689      	mov	r9, r1
 8014acc:	4620      	mov	r0, r4
 8014ace:	4629      	mov	r1, r5
 8014ad0:	f7eb fdb2 	bl	8000638 <__aeabi_dmul>
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	4604      	mov	r4, r0
 8014ad8:	460d      	mov	r5, r1
 8014ada:	4602      	mov	r2, r0
 8014adc:	4649      	mov	r1, r9
 8014ade:	4640      	mov	r0, r8
 8014ae0:	f7eb fbf4 	bl	80002cc <__adddf3>
 8014ae4:	4b1d      	ldr	r3, [pc, #116]	; (8014b5c <__ieee754_pow+0x3dc>)
 8014ae6:	4299      	cmp	r1, r3
 8014ae8:	ec45 4b19 	vmov	d9, r4, r5
 8014aec:	4606      	mov	r6, r0
 8014aee:	460f      	mov	r7, r1
 8014af0:	468b      	mov	fp, r1
 8014af2:	f340 82fe 	ble.w	80150f2 <__ieee754_pow+0x972>
 8014af6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014afa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014afe:	4303      	orrs	r3, r0
 8014b00:	f000 81f0 	beq.w	8014ee4 <__ieee754_pow+0x764>
 8014b04:	a310      	add	r3, pc, #64	; (adr r3, 8014b48 <__ieee754_pow+0x3c8>)
 8014b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b0a:	ec51 0b18 	vmov	r0, r1, d8
 8014b0e:	f7eb fd93 	bl	8000638 <__aeabi_dmul>
 8014b12:	a30d      	add	r3, pc, #52	; (adr r3, 8014b48 <__ieee754_pow+0x3c8>)
 8014b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b18:	e6cb      	b.n	80148b2 <__ieee754_pow+0x132>
 8014b1a:	bf00      	nop
 8014b1c:	f3af 8000 	nop.w
 8014b20:	60000000 	.word	0x60000000
 8014b24:	3ff71547 	.word	0x3ff71547
 8014b28:	f85ddf44 	.word	0xf85ddf44
 8014b2c:	3e54ae0b 	.word	0x3e54ae0b
 8014b30:	55555555 	.word	0x55555555
 8014b34:	3fd55555 	.word	0x3fd55555
 8014b38:	652b82fe 	.word	0x652b82fe
 8014b3c:	3ff71547 	.word	0x3ff71547
 8014b40:	00000000 	.word	0x00000000
 8014b44:	bff00000 	.word	0xbff00000
 8014b48:	8800759c 	.word	0x8800759c
 8014b4c:	7e37e43c 	.word	0x7e37e43c
 8014b50:	3ff00000 	.word	0x3ff00000
 8014b54:	3fd00000 	.word	0x3fd00000
 8014b58:	3fe00000 	.word	0x3fe00000
 8014b5c:	408fffff 	.word	0x408fffff
 8014b60:	4bd7      	ldr	r3, [pc, #860]	; (8014ec0 <__ieee754_pow+0x740>)
 8014b62:	ea03 0309 	and.w	r3, r3, r9
 8014b66:	2200      	movs	r2, #0
 8014b68:	b92b      	cbnz	r3, 8014b76 <__ieee754_pow+0x3f6>
 8014b6a:	4bd6      	ldr	r3, [pc, #856]	; (8014ec4 <__ieee754_pow+0x744>)
 8014b6c:	f7eb fd64 	bl	8000638 <__aeabi_dmul>
 8014b70:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014b74:	460c      	mov	r4, r1
 8014b76:	1523      	asrs	r3, r4, #20
 8014b78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014b7c:	4413      	add	r3, r2
 8014b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8014b80:	4bd1      	ldr	r3, [pc, #836]	; (8014ec8 <__ieee754_pow+0x748>)
 8014b82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014b86:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014b8a:	429c      	cmp	r4, r3
 8014b8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014b90:	dd08      	ble.n	8014ba4 <__ieee754_pow+0x424>
 8014b92:	4bce      	ldr	r3, [pc, #824]	; (8014ecc <__ieee754_pow+0x74c>)
 8014b94:	429c      	cmp	r4, r3
 8014b96:	f340 8163 	ble.w	8014e60 <__ieee754_pow+0x6e0>
 8014b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b9c:	3301      	adds	r3, #1
 8014b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8014ba0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014ba4:	2400      	movs	r4, #0
 8014ba6:	00e3      	lsls	r3, r4, #3
 8014ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8014baa:	4bc9      	ldr	r3, [pc, #804]	; (8014ed0 <__ieee754_pow+0x750>)
 8014bac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014bb0:	ed93 7b00 	vldr	d7, [r3]
 8014bb4:	4629      	mov	r1, r5
 8014bb6:	ec53 2b17 	vmov	r2, r3, d7
 8014bba:	eeb0 8a47 	vmov.f32	s16, s14
 8014bbe:	eef0 8a67 	vmov.f32	s17, s15
 8014bc2:	4682      	mov	sl, r0
 8014bc4:	f7eb fb80 	bl	80002c8 <__aeabi_dsub>
 8014bc8:	4652      	mov	r2, sl
 8014bca:	4606      	mov	r6, r0
 8014bcc:	460f      	mov	r7, r1
 8014bce:	462b      	mov	r3, r5
 8014bd0:	ec51 0b18 	vmov	r0, r1, d8
 8014bd4:	f7eb fb7a 	bl	80002cc <__adddf3>
 8014bd8:	4602      	mov	r2, r0
 8014bda:	460b      	mov	r3, r1
 8014bdc:	2000      	movs	r0, #0
 8014bde:	49bd      	ldr	r1, [pc, #756]	; (8014ed4 <__ieee754_pow+0x754>)
 8014be0:	f7eb fe54 	bl	800088c <__aeabi_ddiv>
 8014be4:	ec41 0b19 	vmov	d9, r0, r1
 8014be8:	4602      	mov	r2, r0
 8014bea:	460b      	mov	r3, r1
 8014bec:	4630      	mov	r0, r6
 8014bee:	4639      	mov	r1, r7
 8014bf0:	f7eb fd22 	bl	8000638 <__aeabi_dmul>
 8014bf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014bf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014bfc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014c00:	2300      	movs	r3, #0
 8014c02:	9304      	str	r3, [sp, #16]
 8014c04:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8014c08:	46ab      	mov	fp, r5
 8014c0a:	106d      	asrs	r5, r5, #1
 8014c0c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014c10:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014c14:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014c18:	2200      	movs	r2, #0
 8014c1a:	4640      	mov	r0, r8
 8014c1c:	4649      	mov	r1, r9
 8014c1e:	4614      	mov	r4, r2
 8014c20:	461d      	mov	r5, r3
 8014c22:	f7eb fd09 	bl	8000638 <__aeabi_dmul>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	4630      	mov	r0, r6
 8014c2c:	4639      	mov	r1, r7
 8014c2e:	f7eb fb4b 	bl	80002c8 <__aeabi_dsub>
 8014c32:	ec53 2b18 	vmov	r2, r3, d8
 8014c36:	4606      	mov	r6, r0
 8014c38:	460f      	mov	r7, r1
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	4629      	mov	r1, r5
 8014c3e:	f7eb fb43 	bl	80002c8 <__aeabi_dsub>
 8014c42:	4602      	mov	r2, r0
 8014c44:	460b      	mov	r3, r1
 8014c46:	4650      	mov	r0, sl
 8014c48:	4659      	mov	r1, fp
 8014c4a:	f7eb fb3d 	bl	80002c8 <__aeabi_dsub>
 8014c4e:	4642      	mov	r2, r8
 8014c50:	464b      	mov	r3, r9
 8014c52:	f7eb fcf1 	bl	8000638 <__aeabi_dmul>
 8014c56:	4602      	mov	r2, r0
 8014c58:	460b      	mov	r3, r1
 8014c5a:	4630      	mov	r0, r6
 8014c5c:	4639      	mov	r1, r7
 8014c5e:	f7eb fb33 	bl	80002c8 <__aeabi_dsub>
 8014c62:	ec53 2b19 	vmov	r2, r3, d9
 8014c66:	f7eb fce7 	bl	8000638 <__aeabi_dmul>
 8014c6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014c6e:	ec41 0b18 	vmov	d8, r0, r1
 8014c72:	4610      	mov	r0, r2
 8014c74:	4619      	mov	r1, r3
 8014c76:	f7eb fcdf 	bl	8000638 <__aeabi_dmul>
 8014c7a:	a37d      	add	r3, pc, #500	; (adr r3, 8014e70 <__ieee754_pow+0x6f0>)
 8014c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c80:	4604      	mov	r4, r0
 8014c82:	460d      	mov	r5, r1
 8014c84:	f7eb fcd8 	bl	8000638 <__aeabi_dmul>
 8014c88:	a37b      	add	r3, pc, #492	; (adr r3, 8014e78 <__ieee754_pow+0x6f8>)
 8014c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c8e:	f7eb fb1d 	bl	80002cc <__adddf3>
 8014c92:	4622      	mov	r2, r4
 8014c94:	462b      	mov	r3, r5
 8014c96:	f7eb fccf 	bl	8000638 <__aeabi_dmul>
 8014c9a:	a379      	add	r3, pc, #484	; (adr r3, 8014e80 <__ieee754_pow+0x700>)
 8014c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca0:	f7eb fb14 	bl	80002cc <__adddf3>
 8014ca4:	4622      	mov	r2, r4
 8014ca6:	462b      	mov	r3, r5
 8014ca8:	f7eb fcc6 	bl	8000638 <__aeabi_dmul>
 8014cac:	a376      	add	r3, pc, #472	; (adr r3, 8014e88 <__ieee754_pow+0x708>)
 8014cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cb2:	f7eb fb0b 	bl	80002cc <__adddf3>
 8014cb6:	4622      	mov	r2, r4
 8014cb8:	462b      	mov	r3, r5
 8014cba:	f7eb fcbd 	bl	8000638 <__aeabi_dmul>
 8014cbe:	a374      	add	r3, pc, #464	; (adr r3, 8014e90 <__ieee754_pow+0x710>)
 8014cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc4:	f7eb fb02 	bl	80002cc <__adddf3>
 8014cc8:	4622      	mov	r2, r4
 8014cca:	462b      	mov	r3, r5
 8014ccc:	f7eb fcb4 	bl	8000638 <__aeabi_dmul>
 8014cd0:	a371      	add	r3, pc, #452	; (adr r3, 8014e98 <__ieee754_pow+0x718>)
 8014cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd6:	f7eb faf9 	bl	80002cc <__adddf3>
 8014cda:	4622      	mov	r2, r4
 8014cdc:	4606      	mov	r6, r0
 8014cde:	460f      	mov	r7, r1
 8014ce0:	462b      	mov	r3, r5
 8014ce2:	4620      	mov	r0, r4
 8014ce4:	4629      	mov	r1, r5
 8014ce6:	f7eb fca7 	bl	8000638 <__aeabi_dmul>
 8014cea:	4602      	mov	r2, r0
 8014cec:	460b      	mov	r3, r1
 8014cee:	4630      	mov	r0, r6
 8014cf0:	4639      	mov	r1, r7
 8014cf2:	f7eb fca1 	bl	8000638 <__aeabi_dmul>
 8014cf6:	4642      	mov	r2, r8
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	460d      	mov	r5, r1
 8014cfc:	464b      	mov	r3, r9
 8014cfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014d02:	f7eb fae3 	bl	80002cc <__adddf3>
 8014d06:	ec53 2b18 	vmov	r2, r3, d8
 8014d0a:	f7eb fc95 	bl	8000638 <__aeabi_dmul>
 8014d0e:	4622      	mov	r2, r4
 8014d10:	462b      	mov	r3, r5
 8014d12:	f7eb fadb 	bl	80002cc <__adddf3>
 8014d16:	4642      	mov	r2, r8
 8014d18:	4682      	mov	sl, r0
 8014d1a:	468b      	mov	fp, r1
 8014d1c:	464b      	mov	r3, r9
 8014d1e:	4640      	mov	r0, r8
 8014d20:	4649      	mov	r1, r9
 8014d22:	f7eb fc89 	bl	8000638 <__aeabi_dmul>
 8014d26:	4b6c      	ldr	r3, [pc, #432]	; (8014ed8 <__ieee754_pow+0x758>)
 8014d28:	2200      	movs	r2, #0
 8014d2a:	4606      	mov	r6, r0
 8014d2c:	460f      	mov	r7, r1
 8014d2e:	f7eb facd 	bl	80002cc <__adddf3>
 8014d32:	4652      	mov	r2, sl
 8014d34:	465b      	mov	r3, fp
 8014d36:	f7eb fac9 	bl	80002cc <__adddf3>
 8014d3a:	9c04      	ldr	r4, [sp, #16]
 8014d3c:	460d      	mov	r5, r1
 8014d3e:	4622      	mov	r2, r4
 8014d40:	460b      	mov	r3, r1
 8014d42:	4640      	mov	r0, r8
 8014d44:	4649      	mov	r1, r9
 8014d46:	f7eb fc77 	bl	8000638 <__aeabi_dmul>
 8014d4a:	4b63      	ldr	r3, [pc, #396]	; (8014ed8 <__ieee754_pow+0x758>)
 8014d4c:	4680      	mov	r8, r0
 8014d4e:	4689      	mov	r9, r1
 8014d50:	2200      	movs	r2, #0
 8014d52:	4620      	mov	r0, r4
 8014d54:	4629      	mov	r1, r5
 8014d56:	f7eb fab7 	bl	80002c8 <__aeabi_dsub>
 8014d5a:	4632      	mov	r2, r6
 8014d5c:	463b      	mov	r3, r7
 8014d5e:	f7eb fab3 	bl	80002c8 <__aeabi_dsub>
 8014d62:	4602      	mov	r2, r0
 8014d64:	460b      	mov	r3, r1
 8014d66:	4650      	mov	r0, sl
 8014d68:	4659      	mov	r1, fp
 8014d6a:	f7eb faad 	bl	80002c8 <__aeabi_dsub>
 8014d6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014d72:	f7eb fc61 	bl	8000638 <__aeabi_dmul>
 8014d76:	4622      	mov	r2, r4
 8014d78:	4606      	mov	r6, r0
 8014d7a:	460f      	mov	r7, r1
 8014d7c:	462b      	mov	r3, r5
 8014d7e:	ec51 0b18 	vmov	r0, r1, d8
 8014d82:	f7eb fc59 	bl	8000638 <__aeabi_dmul>
 8014d86:	4602      	mov	r2, r0
 8014d88:	460b      	mov	r3, r1
 8014d8a:	4630      	mov	r0, r6
 8014d8c:	4639      	mov	r1, r7
 8014d8e:	f7eb fa9d 	bl	80002cc <__adddf3>
 8014d92:	4606      	mov	r6, r0
 8014d94:	460f      	mov	r7, r1
 8014d96:	4602      	mov	r2, r0
 8014d98:	460b      	mov	r3, r1
 8014d9a:	4640      	mov	r0, r8
 8014d9c:	4649      	mov	r1, r9
 8014d9e:	f7eb fa95 	bl	80002cc <__adddf3>
 8014da2:	9c04      	ldr	r4, [sp, #16]
 8014da4:	a33e      	add	r3, pc, #248	; (adr r3, 8014ea0 <__ieee754_pow+0x720>)
 8014da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014daa:	4620      	mov	r0, r4
 8014dac:	460d      	mov	r5, r1
 8014dae:	f7eb fc43 	bl	8000638 <__aeabi_dmul>
 8014db2:	4642      	mov	r2, r8
 8014db4:	ec41 0b18 	vmov	d8, r0, r1
 8014db8:	464b      	mov	r3, r9
 8014dba:	4620      	mov	r0, r4
 8014dbc:	4629      	mov	r1, r5
 8014dbe:	f7eb fa83 	bl	80002c8 <__aeabi_dsub>
 8014dc2:	4602      	mov	r2, r0
 8014dc4:	460b      	mov	r3, r1
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	4639      	mov	r1, r7
 8014dca:	f7eb fa7d 	bl	80002c8 <__aeabi_dsub>
 8014dce:	a336      	add	r3, pc, #216	; (adr r3, 8014ea8 <__ieee754_pow+0x728>)
 8014dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dd4:	f7eb fc30 	bl	8000638 <__aeabi_dmul>
 8014dd8:	a335      	add	r3, pc, #212	; (adr r3, 8014eb0 <__ieee754_pow+0x730>)
 8014dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dde:	4606      	mov	r6, r0
 8014de0:	460f      	mov	r7, r1
 8014de2:	4620      	mov	r0, r4
 8014de4:	4629      	mov	r1, r5
 8014de6:	f7eb fc27 	bl	8000638 <__aeabi_dmul>
 8014dea:	4602      	mov	r2, r0
 8014dec:	460b      	mov	r3, r1
 8014dee:	4630      	mov	r0, r6
 8014df0:	4639      	mov	r1, r7
 8014df2:	f7eb fa6b 	bl	80002cc <__adddf3>
 8014df6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014df8:	4b38      	ldr	r3, [pc, #224]	; (8014edc <__ieee754_pow+0x75c>)
 8014dfa:	4413      	add	r3, r2
 8014dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e00:	f7eb fa64 	bl	80002cc <__adddf3>
 8014e04:	4682      	mov	sl, r0
 8014e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e08:	468b      	mov	fp, r1
 8014e0a:	f7eb fbab 	bl	8000564 <__aeabi_i2d>
 8014e0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e10:	4b33      	ldr	r3, [pc, #204]	; (8014ee0 <__ieee754_pow+0x760>)
 8014e12:	4413      	add	r3, r2
 8014e14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014e18:	4606      	mov	r6, r0
 8014e1a:	460f      	mov	r7, r1
 8014e1c:	4652      	mov	r2, sl
 8014e1e:	465b      	mov	r3, fp
 8014e20:	ec51 0b18 	vmov	r0, r1, d8
 8014e24:	f7eb fa52 	bl	80002cc <__adddf3>
 8014e28:	4642      	mov	r2, r8
 8014e2a:	464b      	mov	r3, r9
 8014e2c:	f7eb fa4e 	bl	80002cc <__adddf3>
 8014e30:	4632      	mov	r2, r6
 8014e32:	463b      	mov	r3, r7
 8014e34:	f7eb fa4a 	bl	80002cc <__adddf3>
 8014e38:	9c04      	ldr	r4, [sp, #16]
 8014e3a:	4632      	mov	r2, r6
 8014e3c:	463b      	mov	r3, r7
 8014e3e:	4620      	mov	r0, r4
 8014e40:	460d      	mov	r5, r1
 8014e42:	f7eb fa41 	bl	80002c8 <__aeabi_dsub>
 8014e46:	4642      	mov	r2, r8
 8014e48:	464b      	mov	r3, r9
 8014e4a:	f7eb fa3d 	bl	80002c8 <__aeabi_dsub>
 8014e4e:	ec53 2b18 	vmov	r2, r3, d8
 8014e52:	f7eb fa39 	bl	80002c8 <__aeabi_dsub>
 8014e56:	4602      	mov	r2, r0
 8014e58:	460b      	mov	r3, r1
 8014e5a:	4650      	mov	r0, sl
 8014e5c:	4659      	mov	r1, fp
 8014e5e:	e606      	b.n	8014a6e <__ieee754_pow+0x2ee>
 8014e60:	2401      	movs	r4, #1
 8014e62:	e6a0      	b.n	8014ba6 <__ieee754_pow+0x426>
 8014e64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014eb8 <__ieee754_pow+0x738>
 8014e68:	e60d      	b.n	8014a86 <__ieee754_pow+0x306>
 8014e6a:	bf00      	nop
 8014e6c:	f3af 8000 	nop.w
 8014e70:	4a454eef 	.word	0x4a454eef
 8014e74:	3fca7e28 	.word	0x3fca7e28
 8014e78:	93c9db65 	.word	0x93c9db65
 8014e7c:	3fcd864a 	.word	0x3fcd864a
 8014e80:	a91d4101 	.word	0xa91d4101
 8014e84:	3fd17460 	.word	0x3fd17460
 8014e88:	518f264d 	.word	0x518f264d
 8014e8c:	3fd55555 	.word	0x3fd55555
 8014e90:	db6fabff 	.word	0xdb6fabff
 8014e94:	3fdb6db6 	.word	0x3fdb6db6
 8014e98:	33333303 	.word	0x33333303
 8014e9c:	3fe33333 	.word	0x3fe33333
 8014ea0:	e0000000 	.word	0xe0000000
 8014ea4:	3feec709 	.word	0x3feec709
 8014ea8:	dc3a03fd 	.word	0xdc3a03fd
 8014eac:	3feec709 	.word	0x3feec709
 8014eb0:	145b01f5 	.word	0x145b01f5
 8014eb4:	be3e2fe0 	.word	0xbe3e2fe0
 8014eb8:	00000000 	.word	0x00000000
 8014ebc:	3ff00000 	.word	0x3ff00000
 8014ec0:	7ff00000 	.word	0x7ff00000
 8014ec4:	43400000 	.word	0x43400000
 8014ec8:	0003988e 	.word	0x0003988e
 8014ecc:	000bb679 	.word	0x000bb679
 8014ed0:	08016700 	.word	0x08016700
 8014ed4:	3ff00000 	.word	0x3ff00000
 8014ed8:	40080000 	.word	0x40080000
 8014edc:	08016720 	.word	0x08016720
 8014ee0:	08016710 	.word	0x08016710
 8014ee4:	a3b5      	add	r3, pc, #724	; (adr r3, 80151bc <__ieee754_pow+0xa3c>)
 8014ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eea:	4640      	mov	r0, r8
 8014eec:	4649      	mov	r1, r9
 8014eee:	f7eb f9ed 	bl	80002cc <__adddf3>
 8014ef2:	4622      	mov	r2, r4
 8014ef4:	ec41 0b1a 	vmov	d10, r0, r1
 8014ef8:	462b      	mov	r3, r5
 8014efa:	4630      	mov	r0, r6
 8014efc:	4639      	mov	r1, r7
 8014efe:	f7eb f9e3 	bl	80002c8 <__aeabi_dsub>
 8014f02:	4602      	mov	r2, r0
 8014f04:	460b      	mov	r3, r1
 8014f06:	ec51 0b1a 	vmov	r0, r1, d10
 8014f0a:	f7eb fe25 	bl	8000b58 <__aeabi_dcmpgt>
 8014f0e:	2800      	cmp	r0, #0
 8014f10:	f47f adf8 	bne.w	8014b04 <__ieee754_pow+0x384>
 8014f14:	4aa4      	ldr	r2, [pc, #656]	; (80151a8 <__ieee754_pow+0xa28>)
 8014f16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014f1a:	4293      	cmp	r3, r2
 8014f1c:	f340 810b 	ble.w	8015136 <__ieee754_pow+0x9b6>
 8014f20:	151b      	asrs	r3, r3, #20
 8014f22:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014f26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014f2a:	fa4a f303 	asr.w	r3, sl, r3
 8014f2e:	445b      	add	r3, fp
 8014f30:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014f34:	4e9d      	ldr	r6, [pc, #628]	; (80151ac <__ieee754_pow+0xa2c>)
 8014f36:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014f3a:	4116      	asrs	r6, r2
 8014f3c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014f40:	2000      	movs	r0, #0
 8014f42:	ea23 0106 	bic.w	r1, r3, r6
 8014f46:	f1c2 0214 	rsb	r2, r2, #20
 8014f4a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014f4e:	fa4a fa02 	asr.w	sl, sl, r2
 8014f52:	f1bb 0f00 	cmp.w	fp, #0
 8014f56:	4602      	mov	r2, r0
 8014f58:	460b      	mov	r3, r1
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	4629      	mov	r1, r5
 8014f5e:	bfb8      	it	lt
 8014f60:	f1ca 0a00 	rsblt	sl, sl, #0
 8014f64:	f7eb f9b0 	bl	80002c8 <__aeabi_dsub>
 8014f68:	ec41 0b19 	vmov	d9, r0, r1
 8014f6c:	4642      	mov	r2, r8
 8014f6e:	464b      	mov	r3, r9
 8014f70:	ec51 0b19 	vmov	r0, r1, d9
 8014f74:	f7eb f9aa 	bl	80002cc <__adddf3>
 8014f78:	2400      	movs	r4, #0
 8014f7a:	a379      	add	r3, pc, #484	; (adr r3, 8015160 <__ieee754_pow+0x9e0>)
 8014f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f80:	4620      	mov	r0, r4
 8014f82:	460d      	mov	r5, r1
 8014f84:	f7eb fb58 	bl	8000638 <__aeabi_dmul>
 8014f88:	ec53 2b19 	vmov	r2, r3, d9
 8014f8c:	4606      	mov	r6, r0
 8014f8e:	460f      	mov	r7, r1
 8014f90:	4620      	mov	r0, r4
 8014f92:	4629      	mov	r1, r5
 8014f94:	f7eb f998 	bl	80002c8 <__aeabi_dsub>
 8014f98:	4602      	mov	r2, r0
 8014f9a:	460b      	mov	r3, r1
 8014f9c:	4640      	mov	r0, r8
 8014f9e:	4649      	mov	r1, r9
 8014fa0:	f7eb f992 	bl	80002c8 <__aeabi_dsub>
 8014fa4:	a370      	add	r3, pc, #448	; (adr r3, 8015168 <__ieee754_pow+0x9e8>)
 8014fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014faa:	f7eb fb45 	bl	8000638 <__aeabi_dmul>
 8014fae:	a370      	add	r3, pc, #448	; (adr r3, 8015170 <__ieee754_pow+0x9f0>)
 8014fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb4:	4680      	mov	r8, r0
 8014fb6:	4689      	mov	r9, r1
 8014fb8:	4620      	mov	r0, r4
 8014fba:	4629      	mov	r1, r5
 8014fbc:	f7eb fb3c 	bl	8000638 <__aeabi_dmul>
 8014fc0:	4602      	mov	r2, r0
 8014fc2:	460b      	mov	r3, r1
 8014fc4:	4640      	mov	r0, r8
 8014fc6:	4649      	mov	r1, r9
 8014fc8:	f7eb f980 	bl	80002cc <__adddf3>
 8014fcc:	4604      	mov	r4, r0
 8014fce:	460d      	mov	r5, r1
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	460b      	mov	r3, r1
 8014fd4:	4630      	mov	r0, r6
 8014fd6:	4639      	mov	r1, r7
 8014fd8:	f7eb f978 	bl	80002cc <__adddf3>
 8014fdc:	4632      	mov	r2, r6
 8014fde:	463b      	mov	r3, r7
 8014fe0:	4680      	mov	r8, r0
 8014fe2:	4689      	mov	r9, r1
 8014fe4:	f7eb f970 	bl	80002c8 <__aeabi_dsub>
 8014fe8:	4602      	mov	r2, r0
 8014fea:	460b      	mov	r3, r1
 8014fec:	4620      	mov	r0, r4
 8014fee:	4629      	mov	r1, r5
 8014ff0:	f7eb f96a 	bl	80002c8 <__aeabi_dsub>
 8014ff4:	4642      	mov	r2, r8
 8014ff6:	4606      	mov	r6, r0
 8014ff8:	460f      	mov	r7, r1
 8014ffa:	464b      	mov	r3, r9
 8014ffc:	4640      	mov	r0, r8
 8014ffe:	4649      	mov	r1, r9
 8015000:	f7eb fb1a 	bl	8000638 <__aeabi_dmul>
 8015004:	a35c      	add	r3, pc, #368	; (adr r3, 8015178 <__ieee754_pow+0x9f8>)
 8015006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801500a:	4604      	mov	r4, r0
 801500c:	460d      	mov	r5, r1
 801500e:	f7eb fb13 	bl	8000638 <__aeabi_dmul>
 8015012:	a35b      	add	r3, pc, #364	; (adr r3, 8015180 <__ieee754_pow+0xa00>)
 8015014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015018:	f7eb f956 	bl	80002c8 <__aeabi_dsub>
 801501c:	4622      	mov	r2, r4
 801501e:	462b      	mov	r3, r5
 8015020:	f7eb fb0a 	bl	8000638 <__aeabi_dmul>
 8015024:	a358      	add	r3, pc, #352	; (adr r3, 8015188 <__ieee754_pow+0xa08>)
 8015026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801502a:	f7eb f94f 	bl	80002cc <__adddf3>
 801502e:	4622      	mov	r2, r4
 8015030:	462b      	mov	r3, r5
 8015032:	f7eb fb01 	bl	8000638 <__aeabi_dmul>
 8015036:	a356      	add	r3, pc, #344	; (adr r3, 8015190 <__ieee754_pow+0xa10>)
 8015038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801503c:	f7eb f944 	bl	80002c8 <__aeabi_dsub>
 8015040:	4622      	mov	r2, r4
 8015042:	462b      	mov	r3, r5
 8015044:	f7eb faf8 	bl	8000638 <__aeabi_dmul>
 8015048:	a353      	add	r3, pc, #332	; (adr r3, 8015198 <__ieee754_pow+0xa18>)
 801504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801504e:	f7eb f93d 	bl	80002cc <__adddf3>
 8015052:	4622      	mov	r2, r4
 8015054:	462b      	mov	r3, r5
 8015056:	f7eb faef 	bl	8000638 <__aeabi_dmul>
 801505a:	4602      	mov	r2, r0
 801505c:	460b      	mov	r3, r1
 801505e:	4640      	mov	r0, r8
 8015060:	4649      	mov	r1, r9
 8015062:	f7eb f931 	bl	80002c8 <__aeabi_dsub>
 8015066:	4604      	mov	r4, r0
 8015068:	460d      	mov	r5, r1
 801506a:	4602      	mov	r2, r0
 801506c:	460b      	mov	r3, r1
 801506e:	4640      	mov	r0, r8
 8015070:	4649      	mov	r1, r9
 8015072:	f7eb fae1 	bl	8000638 <__aeabi_dmul>
 8015076:	2200      	movs	r2, #0
 8015078:	ec41 0b19 	vmov	d9, r0, r1
 801507c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015080:	4620      	mov	r0, r4
 8015082:	4629      	mov	r1, r5
 8015084:	f7eb f920 	bl	80002c8 <__aeabi_dsub>
 8015088:	4602      	mov	r2, r0
 801508a:	460b      	mov	r3, r1
 801508c:	ec51 0b19 	vmov	r0, r1, d9
 8015090:	f7eb fbfc 	bl	800088c <__aeabi_ddiv>
 8015094:	4632      	mov	r2, r6
 8015096:	4604      	mov	r4, r0
 8015098:	460d      	mov	r5, r1
 801509a:	463b      	mov	r3, r7
 801509c:	4640      	mov	r0, r8
 801509e:	4649      	mov	r1, r9
 80150a0:	f7eb faca 	bl	8000638 <__aeabi_dmul>
 80150a4:	4632      	mov	r2, r6
 80150a6:	463b      	mov	r3, r7
 80150a8:	f7eb f910 	bl	80002cc <__adddf3>
 80150ac:	4602      	mov	r2, r0
 80150ae:	460b      	mov	r3, r1
 80150b0:	4620      	mov	r0, r4
 80150b2:	4629      	mov	r1, r5
 80150b4:	f7eb f908 	bl	80002c8 <__aeabi_dsub>
 80150b8:	4642      	mov	r2, r8
 80150ba:	464b      	mov	r3, r9
 80150bc:	f7eb f904 	bl	80002c8 <__aeabi_dsub>
 80150c0:	460b      	mov	r3, r1
 80150c2:	4602      	mov	r2, r0
 80150c4:	493a      	ldr	r1, [pc, #232]	; (80151b0 <__ieee754_pow+0xa30>)
 80150c6:	2000      	movs	r0, #0
 80150c8:	f7eb f8fe 	bl	80002c8 <__aeabi_dsub>
 80150cc:	e9cd 0100 	strd	r0, r1, [sp]
 80150d0:	9b01      	ldr	r3, [sp, #4]
 80150d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80150d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80150da:	da2f      	bge.n	801513c <__ieee754_pow+0x9bc>
 80150dc:	4650      	mov	r0, sl
 80150de:	ed9d 0b00 	vldr	d0, [sp]
 80150e2:	f000 f9c1 	bl	8015468 <scalbn>
 80150e6:	ec51 0b10 	vmov	r0, r1, d0
 80150ea:	ec53 2b18 	vmov	r2, r3, d8
 80150ee:	f7ff bbe0 	b.w	80148b2 <__ieee754_pow+0x132>
 80150f2:	4b30      	ldr	r3, [pc, #192]	; (80151b4 <__ieee754_pow+0xa34>)
 80150f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80150f8:	429e      	cmp	r6, r3
 80150fa:	f77f af0b 	ble.w	8014f14 <__ieee754_pow+0x794>
 80150fe:	4b2e      	ldr	r3, [pc, #184]	; (80151b8 <__ieee754_pow+0xa38>)
 8015100:	440b      	add	r3, r1
 8015102:	4303      	orrs	r3, r0
 8015104:	d00b      	beq.n	801511e <__ieee754_pow+0x99e>
 8015106:	a326      	add	r3, pc, #152	; (adr r3, 80151a0 <__ieee754_pow+0xa20>)
 8015108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801510c:	ec51 0b18 	vmov	r0, r1, d8
 8015110:	f7eb fa92 	bl	8000638 <__aeabi_dmul>
 8015114:	a322      	add	r3, pc, #136	; (adr r3, 80151a0 <__ieee754_pow+0xa20>)
 8015116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801511a:	f7ff bbca 	b.w	80148b2 <__ieee754_pow+0x132>
 801511e:	4622      	mov	r2, r4
 8015120:	462b      	mov	r3, r5
 8015122:	f7eb f8d1 	bl	80002c8 <__aeabi_dsub>
 8015126:	4642      	mov	r2, r8
 8015128:	464b      	mov	r3, r9
 801512a:	f7eb fd0b 	bl	8000b44 <__aeabi_dcmpge>
 801512e:	2800      	cmp	r0, #0
 8015130:	f43f aef0 	beq.w	8014f14 <__ieee754_pow+0x794>
 8015134:	e7e7      	b.n	8015106 <__ieee754_pow+0x986>
 8015136:	f04f 0a00 	mov.w	sl, #0
 801513a:	e717      	b.n	8014f6c <__ieee754_pow+0x7ec>
 801513c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015140:	4619      	mov	r1, r3
 8015142:	e7d2      	b.n	80150ea <__ieee754_pow+0x96a>
 8015144:	491a      	ldr	r1, [pc, #104]	; (80151b0 <__ieee754_pow+0xa30>)
 8015146:	2000      	movs	r0, #0
 8015148:	f7ff bb9e 	b.w	8014888 <__ieee754_pow+0x108>
 801514c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015150:	f7ff bb9a 	b.w	8014888 <__ieee754_pow+0x108>
 8015154:	9000      	str	r0, [sp, #0]
 8015156:	f7ff bb76 	b.w	8014846 <__ieee754_pow+0xc6>
 801515a:	2100      	movs	r1, #0
 801515c:	f7ff bb60 	b.w	8014820 <__ieee754_pow+0xa0>
 8015160:	00000000 	.word	0x00000000
 8015164:	3fe62e43 	.word	0x3fe62e43
 8015168:	fefa39ef 	.word	0xfefa39ef
 801516c:	3fe62e42 	.word	0x3fe62e42
 8015170:	0ca86c39 	.word	0x0ca86c39
 8015174:	be205c61 	.word	0xbe205c61
 8015178:	72bea4d0 	.word	0x72bea4d0
 801517c:	3e663769 	.word	0x3e663769
 8015180:	c5d26bf1 	.word	0xc5d26bf1
 8015184:	3ebbbd41 	.word	0x3ebbbd41
 8015188:	af25de2c 	.word	0xaf25de2c
 801518c:	3f11566a 	.word	0x3f11566a
 8015190:	16bebd93 	.word	0x16bebd93
 8015194:	3f66c16c 	.word	0x3f66c16c
 8015198:	5555553e 	.word	0x5555553e
 801519c:	3fc55555 	.word	0x3fc55555
 80151a0:	c2f8f359 	.word	0xc2f8f359
 80151a4:	01a56e1f 	.word	0x01a56e1f
 80151a8:	3fe00000 	.word	0x3fe00000
 80151ac:	000fffff 	.word	0x000fffff
 80151b0:	3ff00000 	.word	0x3ff00000
 80151b4:	4090cbff 	.word	0x4090cbff
 80151b8:	3f6f3400 	.word	0x3f6f3400
 80151bc:	652b82fe 	.word	0x652b82fe
 80151c0:	3c971547 	.word	0x3c971547

080151c4 <__ieee754_sqrt>:
 80151c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151c8:	ec55 4b10 	vmov	r4, r5, d0
 80151cc:	4e56      	ldr	r6, [pc, #344]	; (8015328 <__ieee754_sqrt+0x164>)
 80151ce:	43ae      	bics	r6, r5
 80151d0:	ee10 0a10 	vmov	r0, s0
 80151d4:	ee10 3a10 	vmov	r3, s0
 80151d8:	4629      	mov	r1, r5
 80151da:	462a      	mov	r2, r5
 80151dc:	d110      	bne.n	8015200 <__ieee754_sqrt+0x3c>
 80151de:	ee10 2a10 	vmov	r2, s0
 80151e2:	462b      	mov	r3, r5
 80151e4:	f7eb fa28 	bl	8000638 <__aeabi_dmul>
 80151e8:	4602      	mov	r2, r0
 80151ea:	460b      	mov	r3, r1
 80151ec:	4620      	mov	r0, r4
 80151ee:	4629      	mov	r1, r5
 80151f0:	f7eb f86c 	bl	80002cc <__adddf3>
 80151f4:	4604      	mov	r4, r0
 80151f6:	460d      	mov	r5, r1
 80151f8:	ec45 4b10 	vmov	d0, r4, r5
 80151fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015200:	2d00      	cmp	r5, #0
 8015202:	dc10      	bgt.n	8015226 <__ieee754_sqrt+0x62>
 8015204:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015208:	4330      	orrs	r0, r6
 801520a:	d0f5      	beq.n	80151f8 <__ieee754_sqrt+0x34>
 801520c:	b15d      	cbz	r5, 8015226 <__ieee754_sqrt+0x62>
 801520e:	ee10 2a10 	vmov	r2, s0
 8015212:	462b      	mov	r3, r5
 8015214:	ee10 0a10 	vmov	r0, s0
 8015218:	f7eb f856 	bl	80002c8 <__aeabi_dsub>
 801521c:	4602      	mov	r2, r0
 801521e:	460b      	mov	r3, r1
 8015220:	f7eb fb34 	bl	800088c <__aeabi_ddiv>
 8015224:	e7e6      	b.n	80151f4 <__ieee754_sqrt+0x30>
 8015226:	1509      	asrs	r1, r1, #20
 8015228:	d076      	beq.n	8015318 <__ieee754_sqrt+0x154>
 801522a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801522e:	07ce      	lsls	r6, r1, #31
 8015230:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8015234:	bf5e      	ittt	pl
 8015236:	0fda      	lsrpl	r2, r3, #31
 8015238:	005b      	lslpl	r3, r3, #1
 801523a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801523e:	0fda      	lsrs	r2, r3, #31
 8015240:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8015244:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8015248:	2000      	movs	r0, #0
 801524a:	106d      	asrs	r5, r5, #1
 801524c:	005b      	lsls	r3, r3, #1
 801524e:	f04f 0e16 	mov.w	lr, #22
 8015252:	4684      	mov	ip, r0
 8015254:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015258:	eb0c 0401 	add.w	r4, ip, r1
 801525c:	4294      	cmp	r4, r2
 801525e:	bfde      	ittt	le
 8015260:	1b12      	suble	r2, r2, r4
 8015262:	eb04 0c01 	addle.w	ip, r4, r1
 8015266:	1840      	addle	r0, r0, r1
 8015268:	0052      	lsls	r2, r2, #1
 801526a:	f1be 0e01 	subs.w	lr, lr, #1
 801526e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015272:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8015276:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801527a:	d1ed      	bne.n	8015258 <__ieee754_sqrt+0x94>
 801527c:	4671      	mov	r1, lr
 801527e:	2720      	movs	r7, #32
 8015280:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8015284:	4562      	cmp	r2, ip
 8015286:	eb04 060e 	add.w	r6, r4, lr
 801528a:	dc02      	bgt.n	8015292 <__ieee754_sqrt+0xce>
 801528c:	d113      	bne.n	80152b6 <__ieee754_sqrt+0xf2>
 801528e:	429e      	cmp	r6, r3
 8015290:	d811      	bhi.n	80152b6 <__ieee754_sqrt+0xf2>
 8015292:	2e00      	cmp	r6, #0
 8015294:	eb06 0e04 	add.w	lr, r6, r4
 8015298:	da43      	bge.n	8015322 <__ieee754_sqrt+0x15e>
 801529a:	f1be 0f00 	cmp.w	lr, #0
 801529e:	db40      	blt.n	8015322 <__ieee754_sqrt+0x15e>
 80152a0:	f10c 0801 	add.w	r8, ip, #1
 80152a4:	eba2 020c 	sub.w	r2, r2, ip
 80152a8:	429e      	cmp	r6, r3
 80152aa:	bf88      	it	hi
 80152ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80152b0:	1b9b      	subs	r3, r3, r6
 80152b2:	4421      	add	r1, r4
 80152b4:	46c4      	mov	ip, r8
 80152b6:	0052      	lsls	r2, r2, #1
 80152b8:	3f01      	subs	r7, #1
 80152ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80152be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80152c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80152c6:	d1dd      	bne.n	8015284 <__ieee754_sqrt+0xc0>
 80152c8:	4313      	orrs	r3, r2
 80152ca:	d006      	beq.n	80152da <__ieee754_sqrt+0x116>
 80152cc:	1c4c      	adds	r4, r1, #1
 80152ce:	bf13      	iteet	ne
 80152d0:	3101      	addne	r1, #1
 80152d2:	3001      	addeq	r0, #1
 80152d4:	4639      	moveq	r1, r7
 80152d6:	f021 0101 	bicne.w	r1, r1, #1
 80152da:	1043      	asrs	r3, r0, #1
 80152dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80152e0:	0849      	lsrs	r1, r1, #1
 80152e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80152e6:	07c2      	lsls	r2, r0, #31
 80152e8:	bf48      	it	mi
 80152ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80152ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80152f2:	460c      	mov	r4, r1
 80152f4:	463d      	mov	r5, r7
 80152f6:	e77f      	b.n	80151f8 <__ieee754_sqrt+0x34>
 80152f8:	0ada      	lsrs	r2, r3, #11
 80152fa:	3815      	subs	r0, #21
 80152fc:	055b      	lsls	r3, r3, #21
 80152fe:	2a00      	cmp	r2, #0
 8015300:	d0fa      	beq.n	80152f8 <__ieee754_sqrt+0x134>
 8015302:	02d7      	lsls	r7, r2, #11
 8015304:	d50a      	bpl.n	801531c <__ieee754_sqrt+0x158>
 8015306:	f1c1 0420 	rsb	r4, r1, #32
 801530a:	fa23 f404 	lsr.w	r4, r3, r4
 801530e:	1e4d      	subs	r5, r1, #1
 8015310:	408b      	lsls	r3, r1
 8015312:	4322      	orrs	r2, r4
 8015314:	1b41      	subs	r1, r0, r5
 8015316:	e788      	b.n	801522a <__ieee754_sqrt+0x66>
 8015318:	4608      	mov	r0, r1
 801531a:	e7f0      	b.n	80152fe <__ieee754_sqrt+0x13a>
 801531c:	0052      	lsls	r2, r2, #1
 801531e:	3101      	adds	r1, #1
 8015320:	e7ef      	b.n	8015302 <__ieee754_sqrt+0x13e>
 8015322:	46e0      	mov	r8, ip
 8015324:	e7be      	b.n	80152a4 <__ieee754_sqrt+0xe0>
 8015326:	bf00      	nop
 8015328:	7ff00000 	.word	0x7ff00000

0801532c <fabs>:
 801532c:	ec51 0b10 	vmov	r0, r1, d0
 8015330:	ee10 2a10 	vmov	r2, s0
 8015334:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015338:	ec43 2b10 	vmov	d0, r2, r3
 801533c:	4770      	bx	lr

0801533e <finite>:
 801533e:	b082      	sub	sp, #8
 8015340:	ed8d 0b00 	vstr	d0, [sp]
 8015344:	9801      	ldr	r0, [sp, #4]
 8015346:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801534a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801534e:	0fc0      	lsrs	r0, r0, #31
 8015350:	b002      	add	sp, #8
 8015352:	4770      	bx	lr

08015354 <rint>:
 8015354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015356:	ec51 0b10 	vmov	r0, r1, d0
 801535a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801535e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015362:	2e13      	cmp	r6, #19
 8015364:	ee10 4a10 	vmov	r4, s0
 8015368:	460b      	mov	r3, r1
 801536a:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801536e:	dc58      	bgt.n	8015422 <rint+0xce>
 8015370:	2e00      	cmp	r6, #0
 8015372:	da2b      	bge.n	80153cc <rint+0x78>
 8015374:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015378:	4302      	orrs	r2, r0
 801537a:	d023      	beq.n	80153c4 <rint+0x70>
 801537c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015380:	4302      	orrs	r2, r0
 8015382:	4254      	negs	r4, r2
 8015384:	4314      	orrs	r4, r2
 8015386:	0c4b      	lsrs	r3, r1, #17
 8015388:	0b24      	lsrs	r4, r4, #12
 801538a:	045b      	lsls	r3, r3, #17
 801538c:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015390:	ea44 0103 	orr.w	r1, r4, r3
 8015394:	4b32      	ldr	r3, [pc, #200]	; (8015460 <rint+0x10c>)
 8015396:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801539a:	e9d3 6700 	ldrd	r6, r7, [r3]
 801539e:	4602      	mov	r2, r0
 80153a0:	460b      	mov	r3, r1
 80153a2:	4630      	mov	r0, r6
 80153a4:	4639      	mov	r1, r7
 80153a6:	f7ea ff91 	bl	80002cc <__adddf3>
 80153aa:	e9cd 0100 	strd	r0, r1, [sp]
 80153ae:	463b      	mov	r3, r7
 80153b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153b4:	4632      	mov	r2, r6
 80153b6:	f7ea ff87 	bl	80002c8 <__aeabi_dsub>
 80153ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80153be:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80153c2:	4639      	mov	r1, r7
 80153c4:	ec41 0b10 	vmov	d0, r0, r1
 80153c8:	b003      	add	sp, #12
 80153ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153cc:	4a25      	ldr	r2, [pc, #148]	; (8015464 <rint+0x110>)
 80153ce:	4132      	asrs	r2, r6
 80153d0:	ea01 0702 	and.w	r7, r1, r2
 80153d4:	4307      	orrs	r7, r0
 80153d6:	d0f5      	beq.n	80153c4 <rint+0x70>
 80153d8:	0851      	lsrs	r1, r2, #1
 80153da:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80153de:	4314      	orrs	r4, r2
 80153e0:	d00c      	beq.n	80153fc <rint+0xa8>
 80153e2:	ea23 0201 	bic.w	r2, r3, r1
 80153e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80153ea:	2e13      	cmp	r6, #19
 80153ec:	fa43 f606 	asr.w	r6, r3, r6
 80153f0:	bf0c      	ite	eq
 80153f2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80153f6:	2400      	movne	r4, #0
 80153f8:	ea42 0306 	orr.w	r3, r2, r6
 80153fc:	4918      	ldr	r1, [pc, #96]	; (8015460 <rint+0x10c>)
 80153fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015402:	4622      	mov	r2, r4
 8015404:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015408:	4620      	mov	r0, r4
 801540a:	4629      	mov	r1, r5
 801540c:	f7ea ff5e 	bl	80002cc <__adddf3>
 8015410:	e9cd 0100 	strd	r0, r1, [sp]
 8015414:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015418:	4622      	mov	r2, r4
 801541a:	462b      	mov	r3, r5
 801541c:	f7ea ff54 	bl	80002c8 <__aeabi_dsub>
 8015420:	e7d0      	b.n	80153c4 <rint+0x70>
 8015422:	2e33      	cmp	r6, #51	; 0x33
 8015424:	dd07      	ble.n	8015436 <rint+0xe2>
 8015426:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801542a:	d1cb      	bne.n	80153c4 <rint+0x70>
 801542c:	ee10 2a10 	vmov	r2, s0
 8015430:	f7ea ff4c 	bl	80002cc <__adddf3>
 8015434:	e7c6      	b.n	80153c4 <rint+0x70>
 8015436:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801543a:	f04f 36ff 	mov.w	r6, #4294967295
 801543e:	40d6      	lsrs	r6, r2
 8015440:	4230      	tst	r0, r6
 8015442:	d0bf      	beq.n	80153c4 <rint+0x70>
 8015444:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8015448:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801544c:	bf1f      	itttt	ne
 801544e:	ea24 0101 	bicne.w	r1, r4, r1
 8015452:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015456:	fa44 f202 	asrne.w	r2, r4, r2
 801545a:	ea41 0402 	orrne.w	r4, r1, r2
 801545e:	e7cd      	b.n	80153fc <rint+0xa8>
 8015460:	08016730 	.word	0x08016730
 8015464:	000fffff 	.word	0x000fffff

08015468 <scalbn>:
 8015468:	b570      	push	{r4, r5, r6, lr}
 801546a:	ec55 4b10 	vmov	r4, r5, d0
 801546e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015472:	4606      	mov	r6, r0
 8015474:	462b      	mov	r3, r5
 8015476:	b99a      	cbnz	r2, 80154a0 <scalbn+0x38>
 8015478:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801547c:	4323      	orrs	r3, r4
 801547e:	d036      	beq.n	80154ee <scalbn+0x86>
 8015480:	4b39      	ldr	r3, [pc, #228]	; (8015568 <scalbn+0x100>)
 8015482:	4629      	mov	r1, r5
 8015484:	ee10 0a10 	vmov	r0, s0
 8015488:	2200      	movs	r2, #0
 801548a:	f7eb f8d5 	bl	8000638 <__aeabi_dmul>
 801548e:	4b37      	ldr	r3, [pc, #220]	; (801556c <scalbn+0x104>)
 8015490:	429e      	cmp	r6, r3
 8015492:	4604      	mov	r4, r0
 8015494:	460d      	mov	r5, r1
 8015496:	da10      	bge.n	80154ba <scalbn+0x52>
 8015498:	a32b      	add	r3, pc, #172	; (adr r3, 8015548 <scalbn+0xe0>)
 801549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549e:	e03a      	b.n	8015516 <scalbn+0xae>
 80154a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80154a4:	428a      	cmp	r2, r1
 80154a6:	d10c      	bne.n	80154c2 <scalbn+0x5a>
 80154a8:	ee10 2a10 	vmov	r2, s0
 80154ac:	4620      	mov	r0, r4
 80154ae:	4629      	mov	r1, r5
 80154b0:	f7ea ff0c 	bl	80002cc <__adddf3>
 80154b4:	4604      	mov	r4, r0
 80154b6:	460d      	mov	r5, r1
 80154b8:	e019      	b.n	80154ee <scalbn+0x86>
 80154ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80154be:	460b      	mov	r3, r1
 80154c0:	3a36      	subs	r2, #54	; 0x36
 80154c2:	4432      	add	r2, r6
 80154c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80154c8:	428a      	cmp	r2, r1
 80154ca:	dd08      	ble.n	80154de <scalbn+0x76>
 80154cc:	2d00      	cmp	r5, #0
 80154ce:	a120      	add	r1, pc, #128	; (adr r1, 8015550 <scalbn+0xe8>)
 80154d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154d4:	da1c      	bge.n	8015510 <scalbn+0xa8>
 80154d6:	a120      	add	r1, pc, #128	; (adr r1, 8015558 <scalbn+0xf0>)
 80154d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80154dc:	e018      	b.n	8015510 <scalbn+0xa8>
 80154de:	2a00      	cmp	r2, #0
 80154e0:	dd08      	ble.n	80154f4 <scalbn+0x8c>
 80154e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80154e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80154ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80154ee:	ec45 4b10 	vmov	d0, r4, r5
 80154f2:	bd70      	pop	{r4, r5, r6, pc}
 80154f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80154f8:	da19      	bge.n	801552e <scalbn+0xc6>
 80154fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80154fe:	429e      	cmp	r6, r3
 8015500:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8015504:	dd0a      	ble.n	801551c <scalbn+0xb4>
 8015506:	a112      	add	r1, pc, #72	; (adr r1, 8015550 <scalbn+0xe8>)
 8015508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d1e2      	bne.n	80154d6 <scalbn+0x6e>
 8015510:	a30f      	add	r3, pc, #60	; (adr r3, 8015550 <scalbn+0xe8>)
 8015512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015516:	f7eb f88f 	bl	8000638 <__aeabi_dmul>
 801551a:	e7cb      	b.n	80154b4 <scalbn+0x4c>
 801551c:	a10a      	add	r1, pc, #40	; (adr r1, 8015548 <scalbn+0xe0>)
 801551e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d0b8      	beq.n	8015498 <scalbn+0x30>
 8015526:	a10e      	add	r1, pc, #56	; (adr r1, 8015560 <scalbn+0xf8>)
 8015528:	e9d1 0100 	ldrd	r0, r1, [r1]
 801552c:	e7b4      	b.n	8015498 <scalbn+0x30>
 801552e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015532:	3236      	adds	r2, #54	; 0x36
 8015534:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015538:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801553c:	4620      	mov	r0, r4
 801553e:	4b0c      	ldr	r3, [pc, #48]	; (8015570 <scalbn+0x108>)
 8015540:	2200      	movs	r2, #0
 8015542:	e7e8      	b.n	8015516 <scalbn+0xae>
 8015544:	f3af 8000 	nop.w
 8015548:	c2f8f359 	.word	0xc2f8f359
 801554c:	01a56e1f 	.word	0x01a56e1f
 8015550:	8800759c 	.word	0x8800759c
 8015554:	7e37e43c 	.word	0x7e37e43c
 8015558:	8800759c 	.word	0x8800759c
 801555c:	fe37e43c 	.word	0xfe37e43c
 8015560:	c2f8f359 	.word	0xc2f8f359
 8015564:	81a56e1f 	.word	0x81a56e1f
 8015568:	43500000 	.word	0x43500000
 801556c:	ffff3cb0 	.word	0xffff3cb0
 8015570:	3c900000 	.word	0x3c900000

08015574 <_init>:
 8015574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015576:	bf00      	nop
 8015578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801557a:	bc08      	pop	{r3}
 801557c:	469e      	mov	lr, r3
 801557e:	4770      	bx	lr

08015580 <_fini>:
 8015580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015582:	bf00      	nop
 8015584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015586:	bc08      	pop	{r3}
 8015588:	469e      	mov	lr, r3
 801558a:	4770      	bx	lr
